// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: fuzz_testing.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Protos/fuzz_testing.proto
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2021 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See http://swift.org/LICENSE.txt for license information
// See http://swift.org/CONTRIBUTORS.txt for the list of Swift project authors

// Using a proto2 syntax so the the test message can include groups and
// extensions. This should have every field type so the fuzz testing can attempt
// to execersize just about everything.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum Fuzz_Testing_AnEnum: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case zero // = 0
  case one // = 1
  case two // = 2
  case three // = 3

  public init() {
    self = .zero
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .zero
    case 1: self = .one
    case 2: self = .two
    case 3: self = .three
    default: return nil
    }
  }

  public var rawValue: Int {
    switch self {
    case .zero: return 0
    case .one: return 1
    case .two: return 2
    case .three: return 3
    }
  }

}

#if swift(>=4.2)

extension Fuzz_Testing_AnEnum: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

public struct Fuzz_Testing_Message: SwiftProtobuf.ExtensibleMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Singular
  public var singularInt32: Int32 {
    get {return _storage._singularInt32 ?? 0}
    set {_uniqueStorage()._singularInt32 = newValue}
  }
  /// Returns true if `singularInt32` has been explicitly set.
  public var hasSingularInt32: Bool {return _storage._singularInt32 != nil}
  /// Clears the value of `singularInt32`. Subsequent reads from it will return its default value.
  public mutating func clearSingularInt32() {_uniqueStorage()._singularInt32 = nil}

  public var singularInt64: Int64 {
    get {return _storage._singularInt64 ?? 0}
    set {_uniqueStorage()._singularInt64 = newValue}
  }
  /// Returns true if `singularInt64` has been explicitly set.
  public var hasSingularInt64: Bool {return _storage._singularInt64 != nil}
  /// Clears the value of `singularInt64`. Subsequent reads from it will return its default value.
  public mutating func clearSingularInt64() {_uniqueStorage()._singularInt64 = nil}

  public var singularUint32: UInt32 {
    get {return _storage._singularUint32 ?? 0}
    set {_uniqueStorage()._singularUint32 = newValue}
  }
  /// Returns true if `singularUint32` has been explicitly set.
  public var hasSingularUint32: Bool {return _storage._singularUint32 != nil}
  /// Clears the value of `singularUint32`. Subsequent reads from it will return its default value.
  public mutating func clearSingularUint32() {_uniqueStorage()._singularUint32 = nil}

  public var singularUint64: UInt64 {
    get {return _storage._singularUint64 ?? 0}
    set {_uniqueStorage()._singularUint64 = newValue}
  }
  /// Returns true if `singularUint64` has been explicitly set.
  public var hasSingularUint64: Bool {return _storage._singularUint64 != nil}
  /// Clears the value of `singularUint64`. Subsequent reads from it will return its default value.
  public mutating func clearSingularUint64() {_uniqueStorage()._singularUint64 = nil}

  public var singularSint32: Int32 {
    get {return _storage._singularSint32 ?? 0}
    set {_uniqueStorage()._singularSint32 = newValue}
  }
  /// Returns true if `singularSint32` has been explicitly set.
  public var hasSingularSint32: Bool {return _storage._singularSint32 != nil}
  /// Clears the value of `singularSint32`. Subsequent reads from it will return its default value.
  public mutating func clearSingularSint32() {_uniqueStorage()._singularSint32 = nil}

  public var singularSint64: Int64 {
    get {return _storage._singularSint64 ?? 0}
    set {_uniqueStorage()._singularSint64 = newValue}
  }
  /// Returns true if `singularSint64` has been explicitly set.
  public var hasSingularSint64: Bool {return _storage._singularSint64 != nil}
  /// Clears the value of `singularSint64`. Subsequent reads from it will return its default value.
  public mutating func clearSingularSint64() {_uniqueStorage()._singularSint64 = nil}

  public var singularFixed32: UInt32 {
    get {return _storage._singularFixed32 ?? 0}
    set {_uniqueStorage()._singularFixed32 = newValue}
  }
  /// Returns true if `singularFixed32` has been explicitly set.
  public var hasSingularFixed32: Bool {return _storage._singularFixed32 != nil}
  /// Clears the value of `singularFixed32`. Subsequent reads from it will return its default value.
  public mutating func clearSingularFixed32() {_uniqueStorage()._singularFixed32 = nil}

  public var singularFixed64: UInt64 {
    get {return _storage._singularFixed64 ?? 0}
    set {_uniqueStorage()._singularFixed64 = newValue}
  }
  /// Returns true if `singularFixed64` has been explicitly set.
  public var hasSingularFixed64: Bool {return _storage._singularFixed64 != nil}
  /// Clears the value of `singularFixed64`. Subsequent reads from it will return its default value.
  public mutating func clearSingularFixed64() {_uniqueStorage()._singularFixed64 = nil}

  public var singularSfixed32: Int32 {
    get {return _storage._singularSfixed32 ?? 0}
    set {_uniqueStorage()._singularSfixed32 = newValue}
  }
  /// Returns true if `singularSfixed32` has been explicitly set.
  public var hasSingularSfixed32: Bool {return _storage._singularSfixed32 != nil}
  /// Clears the value of `singularSfixed32`. Subsequent reads from it will return its default value.
  public mutating func clearSingularSfixed32() {_uniqueStorage()._singularSfixed32 = nil}

  public var singularSfixed64: Int64 {
    get {return _storage._singularSfixed64 ?? 0}
    set {_uniqueStorage()._singularSfixed64 = newValue}
  }
  /// Returns true if `singularSfixed64` has been explicitly set.
  public var hasSingularSfixed64: Bool {return _storage._singularSfixed64 != nil}
  /// Clears the value of `singularSfixed64`. Subsequent reads from it will return its default value.
  public mutating func clearSingularSfixed64() {_uniqueStorage()._singularSfixed64 = nil}

  public var singularFloat: Float {
    get {return _storage._singularFloat ?? 0}
    set {_uniqueStorage()._singularFloat = newValue}
  }
  /// Returns true if `singularFloat` has been explicitly set.
  public var hasSingularFloat: Bool {return _storage._singularFloat != nil}
  /// Clears the value of `singularFloat`. Subsequent reads from it will return its default value.
  public mutating func clearSingularFloat() {_uniqueStorage()._singularFloat = nil}

  public var singularDouble: Double {
    get {return _storage._singularDouble ?? 0}
    set {_uniqueStorage()._singularDouble = newValue}
  }
  /// Returns true if `singularDouble` has been explicitly set.
  public var hasSingularDouble: Bool {return _storage._singularDouble != nil}
  /// Clears the value of `singularDouble`. Subsequent reads from it will return its default value.
  public mutating func clearSingularDouble() {_uniqueStorage()._singularDouble = nil}

  public var singularBool: Bool {
    get {return _storage._singularBool ?? false}
    set {_uniqueStorage()._singularBool = newValue}
  }
  /// Returns true if `singularBool` has been explicitly set.
  public var hasSingularBool: Bool {return _storage._singularBool != nil}
  /// Clears the value of `singularBool`. Subsequent reads from it will return its default value.
  public mutating func clearSingularBool() {_uniqueStorage()._singularBool = nil}

  public var singularString: String {
    get {return _storage._singularString ?? String()}
    set {_uniqueStorage()._singularString = newValue}
  }
  /// Returns true if `singularString` has been explicitly set.
  public var hasSingularString: Bool {return _storage._singularString != nil}
  /// Clears the value of `singularString`. Subsequent reads from it will return its default value.
  public mutating func clearSingularString() {_uniqueStorage()._singularString = nil}

  public var singularBytes: Data {
    get {return _storage._singularBytes ?? Data()}
    set {_uniqueStorage()._singularBytes = newValue}
  }
  /// Returns true if `singularBytes` has been explicitly set.
  public var hasSingularBytes: Bool {return _storage._singularBytes != nil}
  /// Clears the value of `singularBytes`. Subsequent reads from it will return its default value.
  public mutating func clearSingularBytes() {_uniqueStorage()._singularBytes = nil}

  public var singularEnum: Fuzz_Testing_AnEnum {
    get {return _storage._singularEnum ?? .zero}
    set {_uniqueStorage()._singularEnum = newValue}
  }
  /// Returns true if `singularEnum` has been explicitly set.
  public var hasSingularEnum: Bool {return _storage._singularEnum != nil}
  /// Clears the value of `singularEnum`. Subsequent reads from it will return its default value.
  public mutating func clearSingularEnum() {_uniqueStorage()._singularEnum = nil}

  public var singularGroup: Fuzz_Testing_Message.SingularGroup {
    get {return _storage._singularGroup ?? Fuzz_Testing_Message.SingularGroup()}
    set {_uniqueStorage()._singularGroup = newValue}
  }
  /// Returns true if `singularGroup` has been explicitly set.
  public var hasSingularGroup: Bool {return _storage._singularGroup != nil}
  /// Clears the value of `singularGroup`. Subsequent reads from it will return its default value.
  public mutating func clearSingularGroup() {_uniqueStorage()._singularGroup = nil}

  public var singularMessage: Fuzz_Testing_Message {
    get {return _storage._singularMessage ?? Fuzz_Testing_Message()}
    set {_uniqueStorage()._singularMessage = newValue}
  }
  /// Returns true if `singularMessage` has been explicitly set.
  public var hasSingularMessage: Bool {return _storage._singularMessage != nil}
  /// Clears the value of `singularMessage`. Subsequent reads from it will return its default value.
  public mutating func clearSingularMessage() {_uniqueStorage()._singularMessage = nil}

  /// Repeated
  public var repeatedInt32: [Int32] {
    get {return _storage._repeatedInt32}
    set {_uniqueStorage()._repeatedInt32 = newValue}
  }

  public var repeatedInt64: [Int64] {
    get {return _storage._repeatedInt64}
    set {_uniqueStorage()._repeatedInt64 = newValue}
  }

  public var repeatedUint32: [UInt32] {
    get {return _storage._repeatedUint32}
    set {_uniqueStorage()._repeatedUint32 = newValue}
  }

  public var repeatedUint64: [UInt64] {
    get {return _storage._repeatedUint64}
    set {_uniqueStorage()._repeatedUint64 = newValue}
  }

  public var repeatedSint32: [Int32] {
    get {return _storage._repeatedSint32}
    set {_uniqueStorage()._repeatedSint32 = newValue}
  }

  public var repeatedSint64: [Int64] {
    get {return _storage._repeatedSint64}
    set {_uniqueStorage()._repeatedSint64 = newValue}
  }

  public var repeatedFixed32: [UInt32] {
    get {return _storage._repeatedFixed32}
    set {_uniqueStorage()._repeatedFixed32 = newValue}
  }

  public var repeatedFixed64: [UInt64] {
    get {return _storage._repeatedFixed64}
    set {_uniqueStorage()._repeatedFixed64 = newValue}
  }

  public var repeatedSfixed32: [Int32] {
    get {return _storage._repeatedSfixed32}
    set {_uniqueStorage()._repeatedSfixed32 = newValue}
  }

  public var repeatedSfixed64: [Int64] {
    get {return _storage._repeatedSfixed64}
    set {_uniqueStorage()._repeatedSfixed64 = newValue}
  }

  public var repeatedFloat: [Float] {
    get {return _storage._repeatedFloat}
    set {_uniqueStorage()._repeatedFloat = newValue}
  }

  public var repeatedDouble: [Double] {
    get {return _storage._repeatedDouble}
    set {_uniqueStorage()._repeatedDouble = newValue}
  }

  public var repeatedBool: [Bool] {
    get {return _storage._repeatedBool}
    set {_uniqueStorage()._repeatedBool = newValue}
  }

  public var repeatedString: [String] {
    get {return _storage._repeatedString}
    set {_uniqueStorage()._repeatedString = newValue}
  }

  public var repeatedBytes: [Data] {
    get {return _storage._repeatedBytes}
    set {_uniqueStorage()._repeatedBytes = newValue}
  }

  public var repeatedEnum: [Fuzz_Testing_AnEnum] {
    get {return _storage._repeatedEnum}
    set {_uniqueStorage()._repeatedEnum = newValue}
  }

  public var repeatedGroup: [Fuzz_Testing_Message.RepeatedGroup] {
    get {return _storage._repeatedGroup}
    set {_uniqueStorage()._repeatedGroup = newValue}
  }

  public var repeatedMessage: [Fuzz_Testing_Message] {
    get {return _storage._repeatedMessage}
    set {_uniqueStorage()._repeatedMessage = newValue}
  }

  /// oneof
  public var o: OneOf_O? {
    get {return _storage._o}
    set {_uniqueStorage()._o = newValue}
  }

  public var oneofInt32: Int32 {
    get {
      if case .oneofInt32(let v)? = _storage._o {return v}
      return 0
    }
    set {_uniqueStorage()._o = .oneofInt32(newValue)}
  }

  public var oneofInt64: Int64 {
    get {
      if case .oneofInt64(let v)? = _storage._o {return v}
      return 0
    }
    set {_uniqueStorage()._o = .oneofInt64(newValue)}
  }

  public var oneofUint32: UInt32 {
    get {
      if case .oneofUint32(let v)? = _storage._o {return v}
      return 0
    }
    set {_uniqueStorage()._o = .oneofUint32(newValue)}
  }

  public var oneofUint64: UInt64 {
    get {
      if case .oneofUint64(let v)? = _storage._o {return v}
      return 0
    }
    set {_uniqueStorage()._o = .oneofUint64(newValue)}
  }

  public var oneofSint32: Int32 {
    get {
      if case .oneofSint32(let v)? = _storage._o {return v}
      return 0
    }
    set {_uniqueStorage()._o = .oneofSint32(newValue)}
  }

  public var oneofSint64: Int64 {
    get {
      if case .oneofSint64(let v)? = _storage._o {return v}
      return 0
    }
    set {_uniqueStorage()._o = .oneofSint64(newValue)}
  }

  public var oneofFixed32: UInt32 {
    get {
      if case .oneofFixed32(let v)? = _storage._o {return v}
      return 0
    }
    set {_uniqueStorage()._o = .oneofFixed32(newValue)}
  }

  public var oneofFixed64: UInt64 {
    get {
      if case .oneofFixed64(let v)? = _storage._o {return v}
      return 0
    }
    set {_uniqueStorage()._o = .oneofFixed64(newValue)}
  }

  public var oneofSfixed32: Int32 {
    get {
      if case .oneofSfixed32(let v)? = _storage._o {return v}
      return 0
    }
    set {_uniqueStorage()._o = .oneofSfixed32(newValue)}
  }

  public var oneofSfixed64: Int64 {
    get {
      if case .oneofSfixed64(let v)? = _storage._o {return v}
      return 0
    }
    set {_uniqueStorage()._o = .oneofSfixed64(newValue)}
  }

  public var oneofFloat: Float {
    get {
      if case .oneofFloat(let v)? = _storage._o {return v}
      return 0
    }
    set {_uniqueStorage()._o = .oneofFloat(newValue)}
  }

  public var oneofDouble: Double {
    get {
      if case .oneofDouble(let v)? = _storage._o {return v}
      return 0
    }
    set {_uniqueStorage()._o = .oneofDouble(newValue)}
  }

  public var oneofBool: Bool {
    get {
      if case .oneofBool(let v)? = _storage._o {return v}
      return false
    }
    set {_uniqueStorage()._o = .oneofBool(newValue)}
  }

  public var oneofString: String {
    get {
      if case .oneofString(let v)? = _storage._o {return v}
      return String()
    }
    set {_uniqueStorage()._o = .oneofString(newValue)}
  }

  public var oneofBytes: Data {
    get {
      if case .oneofBytes(let v)? = _storage._o {return v}
      return Data()
    }
    set {_uniqueStorage()._o = .oneofBytes(newValue)}
  }

  public var oneofEnum: Fuzz_Testing_AnEnum {
    get {
      if case .oneofEnum(let v)? = _storage._o {return v}
      return .zero
    }
    set {_uniqueStorage()._o = .oneofEnum(newValue)}
  }

  public var oneofGroup: Fuzz_Testing_Message.OneofGroup {
    get {
      if case .oneofGroup(let v)? = _storage._o {return v}
      return Fuzz_Testing_Message.OneofGroup()
    }
    set {_uniqueStorage()._o = .oneofGroup(newValue)}
  }

  public var oneofMessage: Fuzz_Testing_Message {
    get {
      if case .oneofMessage(let v)? = _storage._o {return v}
      return Fuzz_Testing_Message()
    }
    set {_uniqueStorage()._o = .oneofMessage(newValue)}
  }

  /// map<>
  public var mapInt32Int32: Dictionary<Int32,Int32> {
    get {return _storage._mapInt32Int32}
    set {_uniqueStorage()._mapInt32Int32 = newValue}
  }

  public var mapInt32Int64: Dictionary<Int32,Int64> {
    get {return _storage._mapInt32Int64}
    set {_uniqueStorage()._mapInt32Int64 = newValue}
  }

  public var mapInt32Uint32: Dictionary<Int32,UInt32> {
    get {return _storage._mapInt32Uint32}
    set {_uniqueStorage()._mapInt32Uint32 = newValue}
  }

  public var mapInt32Uint64: Dictionary<Int32,UInt64> {
    get {return _storage._mapInt32Uint64}
    set {_uniqueStorage()._mapInt32Uint64 = newValue}
  }

  public var mapInt32Sint32: Dictionary<Int32,Int32> {
    get {return _storage._mapInt32Sint32}
    set {_uniqueStorage()._mapInt32Sint32 = newValue}
  }

  public var mapInt32Sint64: Dictionary<Int32,Int64> {
    get {return _storage._mapInt32Sint64}
    set {_uniqueStorage()._mapInt32Sint64 = newValue}
  }

  public var mapInt32Fixed32: Dictionary<Int32,UInt32> {
    get {return _storage._mapInt32Fixed32}
    set {_uniqueStorage()._mapInt32Fixed32 = newValue}
  }

  public var mapInt32Fixed64: Dictionary<Int32,UInt64> {
    get {return _storage._mapInt32Fixed64}
    set {_uniqueStorage()._mapInt32Fixed64 = newValue}
  }

  public var mapInt32Sfixed32: Dictionary<Int32,Int32> {
    get {return _storage._mapInt32Sfixed32}
    set {_uniqueStorage()._mapInt32Sfixed32 = newValue}
  }

  public var mapInt32Sfixed64: Dictionary<Int32,Int64> {
    get {return _storage._mapInt32Sfixed64}
    set {_uniqueStorage()._mapInt32Sfixed64 = newValue}
  }

  public var mapInt32Float: Dictionary<Int32,Float> {
    get {return _storage._mapInt32Float}
    set {_uniqueStorage()._mapInt32Float = newValue}
  }

  public var mapInt32Double: Dictionary<Int32,Double> {
    get {return _storage._mapInt32Double}
    set {_uniqueStorage()._mapInt32Double = newValue}
  }

  public var mapInt32Bool: Dictionary<Int32,Bool> {
    get {return _storage._mapInt32Bool}
    set {_uniqueStorage()._mapInt32Bool = newValue}
  }

  public var mapInt32String: Dictionary<Int32,String> {
    get {return _storage._mapInt32String}
    set {_uniqueStorage()._mapInt32String = newValue}
  }

  public var mapInt32Bytes: Dictionary<Int32,Data> {
    get {return _storage._mapInt32Bytes}
    set {_uniqueStorage()._mapInt32Bytes = newValue}
  }

  public var mapInt32AnEnum: Dictionary<Int32,Fuzz_Testing_AnEnum> {
    get {return _storage._mapInt32AnEnum}
    set {_uniqueStorage()._mapInt32AnEnum = newValue}
  }

  public var mapInt32Message: Dictionary<Int32,Fuzz_Testing_Message> {
    get {return _storage._mapInt32Message}
    set {_uniqueStorage()._mapInt32Message = newValue}
  }

  public var mapInt64Int32: Dictionary<Int64,Int32> {
    get {return _storage._mapInt64Int32}
    set {_uniqueStorage()._mapInt64Int32 = newValue}
  }

  public var mapInt64Int64: Dictionary<Int64,Int64> {
    get {return _storage._mapInt64Int64}
    set {_uniqueStorage()._mapInt64Int64 = newValue}
  }

  public var mapInt64Uint32: Dictionary<Int64,UInt32> {
    get {return _storage._mapInt64Uint32}
    set {_uniqueStorage()._mapInt64Uint32 = newValue}
  }

  public var mapInt64Uint64: Dictionary<Int64,UInt64> {
    get {return _storage._mapInt64Uint64}
    set {_uniqueStorage()._mapInt64Uint64 = newValue}
  }

  public var mapInt64Sint32: Dictionary<Int64,Int32> {
    get {return _storage._mapInt64Sint32}
    set {_uniqueStorage()._mapInt64Sint32 = newValue}
  }

  public var mapInt64Sint64: Dictionary<Int64,Int64> {
    get {return _storage._mapInt64Sint64}
    set {_uniqueStorage()._mapInt64Sint64 = newValue}
  }

  public var mapInt64Fixed32: Dictionary<Int64,UInt32> {
    get {return _storage._mapInt64Fixed32}
    set {_uniqueStorage()._mapInt64Fixed32 = newValue}
  }

  public var mapInt64Fixed64: Dictionary<Int64,UInt64> {
    get {return _storage._mapInt64Fixed64}
    set {_uniqueStorage()._mapInt64Fixed64 = newValue}
  }

  public var mapInt64Sfixed32: Dictionary<Int64,Int32> {
    get {return _storage._mapInt64Sfixed32}
    set {_uniqueStorage()._mapInt64Sfixed32 = newValue}
  }

  public var mapInt64Sfixed64: Dictionary<Int64,Int64> {
    get {return _storage._mapInt64Sfixed64}
    set {_uniqueStorage()._mapInt64Sfixed64 = newValue}
  }

  public var mapInt64Float: Dictionary<Int64,Float> {
    get {return _storage._mapInt64Float}
    set {_uniqueStorage()._mapInt64Float = newValue}
  }

  public var mapInt64Double: Dictionary<Int64,Double> {
    get {return _storage._mapInt64Double}
    set {_uniqueStorage()._mapInt64Double = newValue}
  }

  public var mapInt64Bool: Dictionary<Int64,Bool> {
    get {return _storage._mapInt64Bool}
    set {_uniqueStorage()._mapInt64Bool = newValue}
  }

  public var mapInt64String: Dictionary<Int64,String> {
    get {return _storage._mapInt64String}
    set {_uniqueStorage()._mapInt64String = newValue}
  }

  public var mapInt64Bytes: Dictionary<Int64,Data> {
    get {return _storage._mapInt64Bytes}
    set {_uniqueStorage()._mapInt64Bytes = newValue}
  }

  public var mapInt64AnEnum: Dictionary<Int64,Fuzz_Testing_AnEnum> {
    get {return _storage._mapInt64AnEnum}
    set {_uniqueStorage()._mapInt64AnEnum = newValue}
  }

  public var mapInt64Message: Dictionary<Int64,Fuzz_Testing_Message> {
    get {return _storage._mapInt64Message}
    set {_uniqueStorage()._mapInt64Message = newValue}
  }

  public var mapUint32Int32: Dictionary<UInt32,Int32> {
    get {return _storage._mapUint32Int32}
    set {_uniqueStorage()._mapUint32Int32 = newValue}
  }

  public var mapUint32Int64: Dictionary<UInt32,Int64> {
    get {return _storage._mapUint32Int64}
    set {_uniqueStorage()._mapUint32Int64 = newValue}
  }

  public var mapUint32Uint32: Dictionary<UInt32,UInt32> {
    get {return _storage._mapUint32Uint32}
    set {_uniqueStorage()._mapUint32Uint32 = newValue}
  }

  public var mapUint32Uint64: Dictionary<UInt32,UInt64> {
    get {return _storage._mapUint32Uint64}
    set {_uniqueStorage()._mapUint32Uint64 = newValue}
  }

  public var mapUint32Sint32: Dictionary<UInt32,Int32> {
    get {return _storage._mapUint32Sint32}
    set {_uniqueStorage()._mapUint32Sint32 = newValue}
  }

  public var mapUint32Sint64: Dictionary<UInt32,Int64> {
    get {return _storage._mapUint32Sint64}
    set {_uniqueStorage()._mapUint32Sint64 = newValue}
  }

  public var mapUint32Fixed32: Dictionary<UInt32,UInt32> {
    get {return _storage._mapUint32Fixed32}
    set {_uniqueStorage()._mapUint32Fixed32 = newValue}
  }

  public var mapUint32Fixed64: Dictionary<UInt32,UInt64> {
    get {return _storage._mapUint32Fixed64}
    set {_uniqueStorage()._mapUint32Fixed64 = newValue}
  }

  public var mapUint32Sfixed32: Dictionary<UInt32,Int32> {
    get {return _storage._mapUint32Sfixed32}
    set {_uniqueStorage()._mapUint32Sfixed32 = newValue}
  }

  public var mapUint32Sfixed64: Dictionary<UInt32,Int64> {
    get {return _storage._mapUint32Sfixed64}
    set {_uniqueStorage()._mapUint32Sfixed64 = newValue}
  }

  public var mapUint32Float: Dictionary<UInt32,Float> {
    get {return _storage._mapUint32Float}
    set {_uniqueStorage()._mapUint32Float = newValue}
  }

  public var mapUint32Double: Dictionary<UInt32,Double> {
    get {return _storage._mapUint32Double}
    set {_uniqueStorage()._mapUint32Double = newValue}
  }

  public var mapUint32Bool: Dictionary<UInt32,Bool> {
    get {return _storage._mapUint32Bool}
    set {_uniqueStorage()._mapUint32Bool = newValue}
  }

  public var mapUint32String: Dictionary<UInt32,String> {
    get {return _storage._mapUint32String}
    set {_uniqueStorage()._mapUint32String = newValue}
  }

  public var mapUint32Bytes: Dictionary<UInt32,Data> {
    get {return _storage._mapUint32Bytes}
    set {_uniqueStorage()._mapUint32Bytes = newValue}
  }

  public var mapUint32AnEnum: Dictionary<UInt32,Fuzz_Testing_AnEnum> {
    get {return _storage._mapUint32AnEnum}
    set {_uniqueStorage()._mapUint32AnEnum = newValue}
  }

  public var mapUint32Message: Dictionary<UInt32,Fuzz_Testing_Message> {
    get {return _storage._mapUint32Message}
    set {_uniqueStorage()._mapUint32Message = newValue}
  }

  public var mapUint64Int32: Dictionary<UInt64,Int32> {
    get {return _storage._mapUint64Int32}
    set {_uniqueStorage()._mapUint64Int32 = newValue}
  }

  public var mapUint64Int64: Dictionary<UInt64,Int64> {
    get {return _storage._mapUint64Int64}
    set {_uniqueStorage()._mapUint64Int64 = newValue}
  }

  public var mapUint64Uint32: Dictionary<UInt64,UInt32> {
    get {return _storage._mapUint64Uint32}
    set {_uniqueStorage()._mapUint64Uint32 = newValue}
  }

  public var mapUint64Uint64: Dictionary<UInt64,UInt64> {
    get {return _storage._mapUint64Uint64}
    set {_uniqueStorage()._mapUint64Uint64 = newValue}
  }

  public var mapUint64Sint32: Dictionary<UInt64,Int32> {
    get {return _storage._mapUint64Sint32}
    set {_uniqueStorage()._mapUint64Sint32 = newValue}
  }

  public var mapUint64Sint64: Dictionary<UInt64,Int64> {
    get {return _storage._mapUint64Sint64}
    set {_uniqueStorage()._mapUint64Sint64 = newValue}
  }

  public var mapUint64Fixed32: Dictionary<UInt64,UInt32> {
    get {return _storage._mapUint64Fixed32}
    set {_uniqueStorage()._mapUint64Fixed32 = newValue}
  }

  public var mapUint64Fixed64: Dictionary<UInt64,UInt64> {
    get {return _storage._mapUint64Fixed64}
    set {_uniqueStorage()._mapUint64Fixed64 = newValue}
  }

  public var mapUint64Sfixed32: Dictionary<UInt64,Int32> {
    get {return _storage._mapUint64Sfixed32}
    set {_uniqueStorage()._mapUint64Sfixed32 = newValue}
  }

  public var mapUint64Sfixed64: Dictionary<UInt64,Int64> {
    get {return _storage._mapUint64Sfixed64}
    set {_uniqueStorage()._mapUint64Sfixed64 = newValue}
  }

  public var mapUint64Float: Dictionary<UInt64,Float> {
    get {return _storage._mapUint64Float}
    set {_uniqueStorage()._mapUint64Float = newValue}
  }

  public var mapUint64Double: Dictionary<UInt64,Double> {
    get {return _storage._mapUint64Double}
    set {_uniqueStorage()._mapUint64Double = newValue}
  }

  public var mapUint64Bool: Dictionary<UInt64,Bool> {
    get {return _storage._mapUint64Bool}
    set {_uniqueStorage()._mapUint64Bool = newValue}
  }

  public var mapUint64String: Dictionary<UInt64,String> {
    get {return _storage._mapUint64String}
    set {_uniqueStorage()._mapUint64String = newValue}
  }

  public var mapUint64Bytes: Dictionary<UInt64,Data> {
    get {return _storage._mapUint64Bytes}
    set {_uniqueStorage()._mapUint64Bytes = newValue}
  }

  public var mapUint64AnEnum: Dictionary<UInt64,Fuzz_Testing_AnEnum> {
    get {return _storage._mapUint64AnEnum}
    set {_uniqueStorage()._mapUint64AnEnum = newValue}
  }

  public var mapUint64Message: Dictionary<UInt64,Fuzz_Testing_Message> {
    get {return _storage._mapUint64Message}
    set {_uniqueStorage()._mapUint64Message = newValue}
  }

  public var mapSint32Int32: Dictionary<Int32,Int32> {
    get {return _storage._mapSint32Int32}
    set {_uniqueStorage()._mapSint32Int32 = newValue}
  }

  public var mapSint32Int64: Dictionary<Int32,Int64> {
    get {return _storage._mapSint32Int64}
    set {_uniqueStorage()._mapSint32Int64 = newValue}
  }

  public var mapSint32Uint32: Dictionary<Int32,UInt32> {
    get {return _storage._mapSint32Uint32}
    set {_uniqueStorage()._mapSint32Uint32 = newValue}
  }

  public var mapSint32Uint64: Dictionary<Int32,UInt64> {
    get {return _storage._mapSint32Uint64}
    set {_uniqueStorage()._mapSint32Uint64 = newValue}
  }

  public var mapSint32Sint32: Dictionary<Int32,Int32> {
    get {return _storage._mapSint32Sint32}
    set {_uniqueStorage()._mapSint32Sint32 = newValue}
  }

  public var mapSint32Sint64: Dictionary<Int32,Int64> {
    get {return _storage._mapSint32Sint64}
    set {_uniqueStorage()._mapSint32Sint64 = newValue}
  }

  public var mapSint32Fixed32: Dictionary<Int32,UInt32> {
    get {return _storage._mapSint32Fixed32}
    set {_uniqueStorage()._mapSint32Fixed32 = newValue}
  }

  public var mapSint32Fixed64: Dictionary<Int32,UInt64> {
    get {return _storage._mapSint32Fixed64}
    set {_uniqueStorage()._mapSint32Fixed64 = newValue}
  }

  public var mapSint32Sfixed32: Dictionary<Int32,Int32> {
    get {return _storage._mapSint32Sfixed32}
    set {_uniqueStorage()._mapSint32Sfixed32 = newValue}
  }

  public var mapSint32Sfixed64: Dictionary<Int32,Int64> {
    get {return _storage._mapSint32Sfixed64}
    set {_uniqueStorage()._mapSint32Sfixed64 = newValue}
  }

  public var mapSint32Float: Dictionary<Int32,Float> {
    get {return _storage._mapSint32Float}
    set {_uniqueStorage()._mapSint32Float = newValue}
  }

  public var mapSint32Double: Dictionary<Int32,Double> {
    get {return _storage._mapSint32Double}
    set {_uniqueStorage()._mapSint32Double = newValue}
  }

  public var mapSint32Bool: Dictionary<Int32,Bool> {
    get {return _storage._mapSint32Bool}
    set {_uniqueStorage()._mapSint32Bool = newValue}
  }

  public var mapSint32String: Dictionary<Int32,String> {
    get {return _storage._mapSint32String}
    set {_uniqueStorage()._mapSint32String = newValue}
  }

  public var mapSint32Bytes: Dictionary<Int32,Data> {
    get {return _storage._mapSint32Bytes}
    set {_uniqueStorage()._mapSint32Bytes = newValue}
  }

  public var mapSint32AnEnum: Dictionary<Int32,Fuzz_Testing_AnEnum> {
    get {return _storage._mapSint32AnEnum}
    set {_uniqueStorage()._mapSint32AnEnum = newValue}
  }

  public var mapSint32Message: Dictionary<Int32,Fuzz_Testing_Message> {
    get {return _storage._mapSint32Message}
    set {_uniqueStorage()._mapSint32Message = newValue}
  }

  public var mapSint64Int32: Dictionary<Int64,Int32> {
    get {return _storage._mapSint64Int32}
    set {_uniqueStorage()._mapSint64Int32 = newValue}
  }

  public var mapSint64Int64: Dictionary<Int64,Int64> {
    get {return _storage._mapSint64Int64}
    set {_uniqueStorage()._mapSint64Int64 = newValue}
  }

  public var mapSint64Uint32: Dictionary<Int64,UInt32> {
    get {return _storage._mapSint64Uint32}
    set {_uniqueStorage()._mapSint64Uint32 = newValue}
  }

  public var mapSint64Uint64: Dictionary<Int64,UInt64> {
    get {return _storage._mapSint64Uint64}
    set {_uniqueStorage()._mapSint64Uint64 = newValue}
  }

  public var mapSint64Sint32: Dictionary<Int64,Int32> {
    get {return _storage._mapSint64Sint32}
    set {_uniqueStorage()._mapSint64Sint32 = newValue}
  }

  public var mapSint64Sint64: Dictionary<Int64,Int64> {
    get {return _storage._mapSint64Sint64}
    set {_uniqueStorage()._mapSint64Sint64 = newValue}
  }

  public var mapSint64Fixed32: Dictionary<Int64,UInt32> {
    get {return _storage._mapSint64Fixed32}
    set {_uniqueStorage()._mapSint64Fixed32 = newValue}
  }

  public var mapSint64Fixed64: Dictionary<Int64,UInt64> {
    get {return _storage._mapSint64Fixed64}
    set {_uniqueStorage()._mapSint64Fixed64 = newValue}
  }

  public var mapSint64Sfixed32: Dictionary<Int64,Int32> {
    get {return _storage._mapSint64Sfixed32}
    set {_uniqueStorage()._mapSint64Sfixed32 = newValue}
  }

  public var mapSint64Sfixed64: Dictionary<Int64,Int64> {
    get {return _storage._mapSint64Sfixed64}
    set {_uniqueStorage()._mapSint64Sfixed64 = newValue}
  }

  public var mapSint64Float: Dictionary<Int64,Float> {
    get {return _storage._mapSint64Float}
    set {_uniqueStorage()._mapSint64Float = newValue}
  }

  public var mapSint64Double: Dictionary<Int64,Double> {
    get {return _storage._mapSint64Double}
    set {_uniqueStorage()._mapSint64Double = newValue}
  }

  public var mapSint64Bool: Dictionary<Int64,Bool> {
    get {return _storage._mapSint64Bool}
    set {_uniqueStorage()._mapSint64Bool = newValue}
  }

  public var mapSint64String: Dictionary<Int64,String> {
    get {return _storage._mapSint64String}
    set {_uniqueStorage()._mapSint64String = newValue}
  }

  public var mapSint64Bytes: Dictionary<Int64,Data> {
    get {return _storage._mapSint64Bytes}
    set {_uniqueStorage()._mapSint64Bytes = newValue}
  }

  public var mapSint64AnEnum: Dictionary<Int64,Fuzz_Testing_AnEnum> {
    get {return _storage._mapSint64AnEnum}
    set {_uniqueStorage()._mapSint64AnEnum = newValue}
  }

  public var mapSint64Message: Dictionary<Int64,Fuzz_Testing_Message> {
    get {return _storage._mapSint64Message}
    set {_uniqueStorage()._mapSint64Message = newValue}
  }

  public var mapFixed32Int32: Dictionary<UInt32,Int32> {
    get {return _storage._mapFixed32Int32}
    set {_uniqueStorage()._mapFixed32Int32 = newValue}
  }

  public var mapFixed32Int64: Dictionary<UInt32,Int64> {
    get {return _storage._mapFixed32Int64}
    set {_uniqueStorage()._mapFixed32Int64 = newValue}
  }

  public var mapFixed32Uint32: Dictionary<UInt32,UInt32> {
    get {return _storage._mapFixed32Uint32}
    set {_uniqueStorage()._mapFixed32Uint32 = newValue}
  }

  public var mapFixed32Uint64: Dictionary<UInt32,UInt64> {
    get {return _storage._mapFixed32Uint64}
    set {_uniqueStorage()._mapFixed32Uint64 = newValue}
  }

  public var mapFixed32Sint32: Dictionary<UInt32,Int32> {
    get {return _storage._mapFixed32Sint32}
    set {_uniqueStorage()._mapFixed32Sint32 = newValue}
  }

  public var mapFixed32Sint64: Dictionary<UInt32,Int64> {
    get {return _storage._mapFixed32Sint64}
    set {_uniqueStorage()._mapFixed32Sint64 = newValue}
  }

  public var mapFixed32Fixed32: Dictionary<UInt32,UInt32> {
    get {return _storage._mapFixed32Fixed32}
    set {_uniqueStorage()._mapFixed32Fixed32 = newValue}
  }

  public var mapFixed32Fixed64: Dictionary<UInt32,UInt64> {
    get {return _storage._mapFixed32Fixed64}
    set {_uniqueStorage()._mapFixed32Fixed64 = newValue}
  }

  public var mapFixed32Sfixed32: Dictionary<UInt32,Int32> {
    get {return _storage._mapFixed32Sfixed32}
    set {_uniqueStorage()._mapFixed32Sfixed32 = newValue}
  }

  public var mapFixed32Sfixed64: Dictionary<UInt32,Int64> {
    get {return _storage._mapFixed32Sfixed64}
    set {_uniqueStorage()._mapFixed32Sfixed64 = newValue}
  }

  public var mapFixed32Float: Dictionary<UInt32,Float> {
    get {return _storage._mapFixed32Float}
    set {_uniqueStorage()._mapFixed32Float = newValue}
  }

  public var mapFixed32Double: Dictionary<UInt32,Double> {
    get {return _storage._mapFixed32Double}
    set {_uniqueStorage()._mapFixed32Double = newValue}
  }

  public var mapFixed32Bool: Dictionary<UInt32,Bool> {
    get {return _storage._mapFixed32Bool}
    set {_uniqueStorage()._mapFixed32Bool = newValue}
  }

  public var mapFixed32String: Dictionary<UInt32,String> {
    get {return _storage._mapFixed32String}
    set {_uniqueStorage()._mapFixed32String = newValue}
  }

  public var mapFixed32Bytes: Dictionary<UInt32,Data> {
    get {return _storage._mapFixed32Bytes}
    set {_uniqueStorage()._mapFixed32Bytes = newValue}
  }

  public var mapFixed32AnEnum: Dictionary<UInt32,Fuzz_Testing_AnEnum> {
    get {return _storage._mapFixed32AnEnum}
    set {_uniqueStorage()._mapFixed32AnEnum = newValue}
  }

  public var mapFixed32Message: Dictionary<UInt32,Fuzz_Testing_Message> {
    get {return _storage._mapFixed32Message}
    set {_uniqueStorage()._mapFixed32Message = newValue}
  }

  public var mapFixed64Int32: Dictionary<UInt64,Int32> {
    get {return _storage._mapFixed64Int32}
    set {_uniqueStorage()._mapFixed64Int32 = newValue}
  }

  public var mapFixed64Int64: Dictionary<UInt64,Int64> {
    get {return _storage._mapFixed64Int64}
    set {_uniqueStorage()._mapFixed64Int64 = newValue}
  }

  public var mapFixed64Uint32: Dictionary<UInt64,UInt32> {
    get {return _storage._mapFixed64Uint32}
    set {_uniqueStorage()._mapFixed64Uint32 = newValue}
  }

  public var mapFixed64Uint64: Dictionary<UInt64,UInt64> {
    get {return _storage._mapFixed64Uint64}
    set {_uniqueStorage()._mapFixed64Uint64 = newValue}
  }

  public var mapFixed64Sint32: Dictionary<UInt64,Int32> {
    get {return _storage._mapFixed64Sint32}
    set {_uniqueStorage()._mapFixed64Sint32 = newValue}
  }

  public var mapFixed64Sint64: Dictionary<UInt64,Int64> {
    get {return _storage._mapFixed64Sint64}
    set {_uniqueStorage()._mapFixed64Sint64 = newValue}
  }

  public var mapFixed64Fixed32: Dictionary<UInt64,UInt32> {
    get {return _storage._mapFixed64Fixed32}
    set {_uniqueStorage()._mapFixed64Fixed32 = newValue}
  }

  public var mapFixed64Fixed64: Dictionary<UInt64,UInt64> {
    get {return _storage._mapFixed64Fixed64}
    set {_uniqueStorage()._mapFixed64Fixed64 = newValue}
  }

  public var mapFixed64Sfixed32: Dictionary<UInt64,Int32> {
    get {return _storage._mapFixed64Sfixed32}
    set {_uniqueStorage()._mapFixed64Sfixed32 = newValue}
  }

  public var mapFixed64Sfixed64: Dictionary<UInt64,Int64> {
    get {return _storage._mapFixed64Sfixed64}
    set {_uniqueStorage()._mapFixed64Sfixed64 = newValue}
  }

  public var mapFixed64Float: Dictionary<UInt64,Float> {
    get {return _storage._mapFixed64Float}
    set {_uniqueStorage()._mapFixed64Float = newValue}
  }

  public var mapFixed64Double: Dictionary<UInt64,Double> {
    get {return _storage._mapFixed64Double}
    set {_uniqueStorage()._mapFixed64Double = newValue}
  }

  public var mapFixed64Bool: Dictionary<UInt64,Bool> {
    get {return _storage._mapFixed64Bool}
    set {_uniqueStorage()._mapFixed64Bool = newValue}
  }

  public var mapFixed64String: Dictionary<UInt64,String> {
    get {return _storage._mapFixed64String}
    set {_uniqueStorage()._mapFixed64String = newValue}
  }

  public var mapFixed64Bytes: Dictionary<UInt64,Data> {
    get {return _storage._mapFixed64Bytes}
    set {_uniqueStorage()._mapFixed64Bytes = newValue}
  }

  public var mapFixed64AnEnum: Dictionary<UInt64,Fuzz_Testing_AnEnum> {
    get {return _storage._mapFixed64AnEnum}
    set {_uniqueStorage()._mapFixed64AnEnum = newValue}
  }

  public var mapFixed64Message: Dictionary<UInt64,Fuzz_Testing_Message> {
    get {return _storage._mapFixed64Message}
    set {_uniqueStorage()._mapFixed64Message = newValue}
  }

  public var mapSfixed32Int32: Dictionary<Int32,Int32> {
    get {return _storage._mapSfixed32Int32}
    set {_uniqueStorage()._mapSfixed32Int32 = newValue}
  }

  public var mapSfixed32Int64: Dictionary<Int32,Int64> {
    get {return _storage._mapSfixed32Int64}
    set {_uniqueStorage()._mapSfixed32Int64 = newValue}
  }

  public var mapSfixed32Uint32: Dictionary<Int32,UInt32> {
    get {return _storage._mapSfixed32Uint32}
    set {_uniqueStorage()._mapSfixed32Uint32 = newValue}
  }

  public var mapSfixed32Uint64: Dictionary<Int32,UInt64> {
    get {return _storage._mapSfixed32Uint64}
    set {_uniqueStorage()._mapSfixed32Uint64 = newValue}
  }

  public var mapSfixed32Sint32: Dictionary<Int32,Int32> {
    get {return _storage._mapSfixed32Sint32}
    set {_uniqueStorage()._mapSfixed32Sint32 = newValue}
  }

  public var mapSfixed32Sint64: Dictionary<Int32,Int64> {
    get {return _storage._mapSfixed32Sint64}
    set {_uniqueStorage()._mapSfixed32Sint64 = newValue}
  }

  public var mapSfixed32Fixed32: Dictionary<Int32,UInt32> {
    get {return _storage._mapSfixed32Fixed32}
    set {_uniqueStorage()._mapSfixed32Fixed32 = newValue}
  }

  public var mapSfixed32Fixed64: Dictionary<Int32,UInt64> {
    get {return _storage._mapSfixed32Fixed64}
    set {_uniqueStorage()._mapSfixed32Fixed64 = newValue}
  }

  public var mapSfixed32Sfixed32: Dictionary<Int32,Int32> {
    get {return _storage._mapSfixed32Sfixed32}
    set {_uniqueStorage()._mapSfixed32Sfixed32 = newValue}
  }

  public var mapSfixed32Sfixed64: Dictionary<Int32,Int64> {
    get {return _storage._mapSfixed32Sfixed64}
    set {_uniqueStorage()._mapSfixed32Sfixed64 = newValue}
  }

  public var mapSfixed32Float: Dictionary<Int32,Float> {
    get {return _storage._mapSfixed32Float}
    set {_uniqueStorage()._mapSfixed32Float = newValue}
  }

  public var mapSfixed32Double: Dictionary<Int32,Double> {
    get {return _storage._mapSfixed32Double}
    set {_uniqueStorage()._mapSfixed32Double = newValue}
  }

  public var mapSfixed32Bool: Dictionary<Int32,Bool> {
    get {return _storage._mapSfixed32Bool}
    set {_uniqueStorage()._mapSfixed32Bool = newValue}
  }

  public var mapSfixed32String: Dictionary<Int32,String> {
    get {return _storage._mapSfixed32String}
    set {_uniqueStorage()._mapSfixed32String = newValue}
  }

  public var mapSfixed32Bytes: Dictionary<Int32,Data> {
    get {return _storage._mapSfixed32Bytes}
    set {_uniqueStorage()._mapSfixed32Bytes = newValue}
  }

  public var mapSfixed32AnEnum: Dictionary<Int32,Fuzz_Testing_AnEnum> {
    get {return _storage._mapSfixed32AnEnum}
    set {_uniqueStorage()._mapSfixed32AnEnum = newValue}
  }

  public var mapSfixed32Message: Dictionary<Int32,Fuzz_Testing_Message> {
    get {return _storage._mapSfixed32Message}
    set {_uniqueStorage()._mapSfixed32Message = newValue}
  }

  public var mapSfixed64Int32: Dictionary<Int64,Int32> {
    get {return _storage._mapSfixed64Int32}
    set {_uniqueStorage()._mapSfixed64Int32 = newValue}
  }

  public var mapSfixed64Int64: Dictionary<Int64,Int64> {
    get {return _storage._mapSfixed64Int64}
    set {_uniqueStorage()._mapSfixed64Int64 = newValue}
  }

  public var mapSfixed64Uint32: Dictionary<Int64,UInt32> {
    get {return _storage._mapSfixed64Uint32}
    set {_uniqueStorage()._mapSfixed64Uint32 = newValue}
  }

  public var mapSfixed64Uint64: Dictionary<Int64,UInt64> {
    get {return _storage._mapSfixed64Uint64}
    set {_uniqueStorage()._mapSfixed64Uint64 = newValue}
  }

  public var mapSfixed64Sint32: Dictionary<Int64,Int32> {
    get {return _storage._mapSfixed64Sint32}
    set {_uniqueStorage()._mapSfixed64Sint32 = newValue}
  }

  public var mapSfixed64Sint64: Dictionary<Int64,Int64> {
    get {return _storage._mapSfixed64Sint64}
    set {_uniqueStorage()._mapSfixed64Sint64 = newValue}
  }

  public var mapSfixed64Fixed32: Dictionary<Int64,UInt32> {
    get {return _storage._mapSfixed64Fixed32}
    set {_uniqueStorage()._mapSfixed64Fixed32 = newValue}
  }

  public var mapSfixed64Fixed64: Dictionary<Int64,UInt64> {
    get {return _storage._mapSfixed64Fixed64}
    set {_uniqueStorage()._mapSfixed64Fixed64 = newValue}
  }

  public var mapSfixed64Sfixed32: Dictionary<Int64,Int32> {
    get {return _storage._mapSfixed64Sfixed32}
    set {_uniqueStorage()._mapSfixed64Sfixed32 = newValue}
  }

  public var mapSfixed64Sfixed64: Dictionary<Int64,Int64> {
    get {return _storage._mapSfixed64Sfixed64}
    set {_uniqueStorage()._mapSfixed64Sfixed64 = newValue}
  }

  public var mapSfixed64Float: Dictionary<Int64,Float> {
    get {return _storage._mapSfixed64Float}
    set {_uniqueStorage()._mapSfixed64Float = newValue}
  }

  public var mapSfixed64Double: Dictionary<Int64,Double> {
    get {return _storage._mapSfixed64Double}
    set {_uniqueStorage()._mapSfixed64Double = newValue}
  }

  public var mapSfixed64Bool: Dictionary<Int64,Bool> {
    get {return _storage._mapSfixed64Bool}
    set {_uniqueStorage()._mapSfixed64Bool = newValue}
  }

  public var mapSfixed64String: Dictionary<Int64,String> {
    get {return _storage._mapSfixed64String}
    set {_uniqueStorage()._mapSfixed64String = newValue}
  }

  public var mapSfixed64Bytes: Dictionary<Int64,Data> {
    get {return _storage._mapSfixed64Bytes}
    set {_uniqueStorage()._mapSfixed64Bytes = newValue}
  }

  public var mapSfixed64AnEnum: Dictionary<Int64,Fuzz_Testing_AnEnum> {
    get {return _storage._mapSfixed64AnEnum}
    set {_uniqueStorage()._mapSfixed64AnEnum = newValue}
  }

  public var mapSfixed64Message: Dictionary<Int64,Fuzz_Testing_Message> {
    get {return _storage._mapSfixed64Message}
    set {_uniqueStorage()._mapSfixed64Message = newValue}
  }

  public var mapBoolInt32: Dictionary<Bool,Int32> {
    get {return _storage._mapBoolInt32}
    set {_uniqueStorage()._mapBoolInt32 = newValue}
  }

  public var mapBoolInt64: Dictionary<Bool,Int64> {
    get {return _storage._mapBoolInt64}
    set {_uniqueStorage()._mapBoolInt64 = newValue}
  }

  public var mapBoolUint32: Dictionary<Bool,UInt32> {
    get {return _storage._mapBoolUint32}
    set {_uniqueStorage()._mapBoolUint32 = newValue}
  }

  public var mapBoolUint64: Dictionary<Bool,UInt64> {
    get {return _storage._mapBoolUint64}
    set {_uniqueStorage()._mapBoolUint64 = newValue}
  }

  public var mapBoolSint32: Dictionary<Bool,Int32> {
    get {return _storage._mapBoolSint32}
    set {_uniqueStorage()._mapBoolSint32 = newValue}
  }

  public var mapBoolSint64: Dictionary<Bool,Int64> {
    get {return _storage._mapBoolSint64}
    set {_uniqueStorage()._mapBoolSint64 = newValue}
  }

  public var mapBoolFixed32: Dictionary<Bool,UInt32> {
    get {return _storage._mapBoolFixed32}
    set {_uniqueStorage()._mapBoolFixed32 = newValue}
  }

  public var mapBoolFixed64: Dictionary<Bool,UInt64> {
    get {return _storage._mapBoolFixed64}
    set {_uniqueStorage()._mapBoolFixed64 = newValue}
  }

  public var mapBoolSfixed32: Dictionary<Bool,Int32> {
    get {return _storage._mapBoolSfixed32}
    set {_uniqueStorage()._mapBoolSfixed32 = newValue}
  }

  public var mapBoolSfixed64: Dictionary<Bool,Int64> {
    get {return _storage._mapBoolSfixed64}
    set {_uniqueStorage()._mapBoolSfixed64 = newValue}
  }

  public var mapBoolFloat: Dictionary<Bool,Float> {
    get {return _storage._mapBoolFloat}
    set {_uniqueStorage()._mapBoolFloat = newValue}
  }

  public var mapBoolDouble: Dictionary<Bool,Double> {
    get {return _storage._mapBoolDouble}
    set {_uniqueStorage()._mapBoolDouble = newValue}
  }

  public var mapBoolBool: Dictionary<Bool,Bool> {
    get {return _storage._mapBoolBool}
    set {_uniqueStorage()._mapBoolBool = newValue}
  }

  public var mapBoolString: Dictionary<Bool,String> {
    get {return _storage._mapBoolString}
    set {_uniqueStorage()._mapBoolString = newValue}
  }

  public var mapBoolBytes: Dictionary<Bool,Data> {
    get {return _storage._mapBoolBytes}
    set {_uniqueStorage()._mapBoolBytes = newValue}
  }

  public var mapBoolAnEnum: Dictionary<Bool,Fuzz_Testing_AnEnum> {
    get {return _storage._mapBoolAnEnum}
    set {_uniqueStorage()._mapBoolAnEnum = newValue}
  }

  public var mapBoolMessage: Dictionary<Bool,Fuzz_Testing_Message> {
    get {return _storage._mapBoolMessage}
    set {_uniqueStorage()._mapBoolMessage = newValue}
  }

  /// WKTs since some get special handing in JSON.
  public var wktAny: SwiftProtobuf.Google_Protobuf_Any {
    get {return _storage._wktAny ?? SwiftProtobuf.Google_Protobuf_Any()}
    set {_uniqueStorage()._wktAny = newValue}
  }
  /// Returns true if `wktAny` has been explicitly set.
  public var hasWktAny: Bool {return _storage._wktAny != nil}
  /// Clears the value of `wktAny`. Subsequent reads from it will return its default value.
  public mutating func clearWktAny() {_uniqueStorage()._wktAny = nil}

  public var wktApi: SwiftProtobuf.Google_Protobuf_Api {
    get {return _storage._wktApi ?? SwiftProtobuf.Google_Protobuf_Api()}
    set {_uniqueStorage()._wktApi = newValue}
  }
  /// Returns true if `wktApi` has been explicitly set.
  public var hasWktApi: Bool {return _storage._wktApi != nil}
  /// Clears the value of `wktApi`. Subsequent reads from it will return its default value.
  public mutating func clearWktApi() {_uniqueStorage()._wktApi = nil}

  public var wktDuration: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _storage._wktDuration ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_uniqueStorage()._wktDuration = newValue}
  }
  /// Returns true if `wktDuration` has been explicitly set.
  public var hasWktDuration: Bool {return _storage._wktDuration != nil}
  /// Clears the value of `wktDuration`. Subsequent reads from it will return its default value.
  public mutating func clearWktDuration() {_uniqueStorage()._wktDuration = nil}

  public var wktEmpty: SwiftProtobuf.Google_Protobuf_Empty {
    get {return _storage._wktEmpty ?? SwiftProtobuf.Google_Protobuf_Empty()}
    set {_uniqueStorage()._wktEmpty = newValue}
  }
  /// Returns true if `wktEmpty` has been explicitly set.
  public var hasWktEmpty: Bool {return _storage._wktEmpty != nil}
  /// Clears the value of `wktEmpty`. Subsequent reads from it will return its default value.
  public mutating func clearWktEmpty() {_uniqueStorage()._wktEmpty = nil}

  public var wktFieldMask: SwiftProtobuf.Google_Protobuf_FieldMask {
    get {return _storage._wktFieldMask ?? SwiftProtobuf.Google_Protobuf_FieldMask()}
    set {_uniqueStorage()._wktFieldMask = newValue}
  }
  /// Returns true if `wktFieldMask` has been explicitly set.
  public var hasWktFieldMask: Bool {return _storage._wktFieldMask != nil}
  /// Clears the value of `wktFieldMask`. Subsequent reads from it will return its default value.
  public mutating func clearWktFieldMask() {_uniqueStorage()._wktFieldMask = nil}

  public var wktSourceContext: SwiftProtobuf.Google_Protobuf_SourceContext {
    get {return _storage._wktSourceContext ?? SwiftProtobuf.Google_Protobuf_SourceContext()}
    set {_uniqueStorage()._wktSourceContext = newValue}
  }
  /// Returns true if `wktSourceContext` has been explicitly set.
  public var hasWktSourceContext: Bool {return _storage._wktSourceContext != nil}
  /// Clears the value of `wktSourceContext`. Subsequent reads from it will return its default value.
  public mutating func clearWktSourceContext() {_uniqueStorage()._wktSourceContext = nil}

  public var wktStruct: SwiftProtobuf.Google_Protobuf_Struct {
    get {return _storage._wktStruct ?? SwiftProtobuf.Google_Protobuf_Struct()}
    set {_uniqueStorage()._wktStruct = newValue}
  }
  /// Returns true if `wktStruct` has been explicitly set.
  public var hasWktStruct: Bool {return _storage._wktStruct != nil}
  /// Clears the value of `wktStruct`. Subsequent reads from it will return its default value.
  public mutating func clearWktStruct() {_uniqueStorage()._wktStruct = nil}

  public var wktTimestamp: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._wktTimestamp ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._wktTimestamp = newValue}
  }
  /// Returns true if `wktTimestamp` has been explicitly set.
  public var hasWktTimestamp: Bool {return _storage._wktTimestamp != nil}
  /// Clears the value of `wktTimestamp`. Subsequent reads from it will return its default value.
  public mutating func clearWktTimestamp() {_uniqueStorage()._wktTimestamp = nil}

  public var wktType: SwiftProtobuf.Google_Protobuf_Type {
    get {return _storage._wktType ?? SwiftProtobuf.Google_Protobuf_Type()}
    set {_uniqueStorage()._wktType = newValue}
  }
  /// Returns true if `wktType` has been explicitly set.
  public var hasWktType: Bool {return _storage._wktType != nil}
  /// Clears the value of `wktType`. Subsequent reads from it will return its default value.
  public mutating func clearWktType() {_uniqueStorage()._wktType = nil}

  public var wktDoubleValue: SwiftProtobuf.Google_Protobuf_DoubleValue {
    get {return _storage._wktDoubleValue ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
    set {_uniqueStorage()._wktDoubleValue = newValue}
  }
  /// Returns true if `wktDoubleValue` has been explicitly set.
  public var hasWktDoubleValue: Bool {return _storage._wktDoubleValue != nil}
  /// Clears the value of `wktDoubleValue`. Subsequent reads from it will return its default value.
  public mutating func clearWktDoubleValue() {_uniqueStorage()._wktDoubleValue = nil}

  public var wktFloatValue: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._wktFloatValue ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._wktFloatValue = newValue}
  }
  /// Returns true if `wktFloatValue` has been explicitly set.
  public var hasWktFloatValue: Bool {return _storage._wktFloatValue != nil}
  /// Clears the value of `wktFloatValue`. Subsequent reads from it will return its default value.
  public mutating func clearWktFloatValue() {_uniqueStorage()._wktFloatValue = nil}

  public var wktInt64Value: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _storage._wktInt64Value ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_uniqueStorage()._wktInt64Value = newValue}
  }
  /// Returns true if `wktInt64Value` has been explicitly set.
  public var hasWktInt64Value: Bool {return _storage._wktInt64Value != nil}
  /// Clears the value of `wktInt64Value`. Subsequent reads from it will return its default value.
  public mutating func clearWktInt64Value() {_uniqueStorage()._wktInt64Value = nil}

  public var wktUint64Value: SwiftProtobuf.Google_Protobuf_UInt64Value {
    get {return _storage._wktUint64Value ?? SwiftProtobuf.Google_Protobuf_UInt64Value()}
    set {_uniqueStorage()._wktUint64Value = newValue}
  }
  /// Returns true if `wktUint64Value` has been explicitly set.
  public var hasWktUint64Value: Bool {return _storage._wktUint64Value != nil}
  /// Clears the value of `wktUint64Value`. Subsequent reads from it will return its default value.
  public mutating func clearWktUint64Value() {_uniqueStorage()._wktUint64Value = nil}

  public var wktInt32Value: SwiftProtobuf.Google_Protobuf_Int32Value {
    get {return _storage._wktInt32Value ?? SwiftProtobuf.Google_Protobuf_Int32Value()}
    set {_uniqueStorage()._wktInt32Value = newValue}
  }
  /// Returns true if `wktInt32Value` has been explicitly set.
  public var hasWktInt32Value: Bool {return _storage._wktInt32Value != nil}
  /// Clears the value of `wktInt32Value`. Subsequent reads from it will return its default value.
  public mutating func clearWktInt32Value() {_uniqueStorage()._wktInt32Value = nil}

  public var wktUint32Value: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._wktUint32Value ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._wktUint32Value = newValue}
  }
  /// Returns true if `wktUint32Value` has been explicitly set.
  public var hasWktUint32Value: Bool {return _storage._wktUint32Value != nil}
  /// Clears the value of `wktUint32Value`. Subsequent reads from it will return its default value.
  public mutating func clearWktUint32Value() {_uniqueStorage()._wktUint32Value = nil}

  public var wktBoolValue: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _storage._wktBoolValue ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_uniqueStorage()._wktBoolValue = newValue}
  }
  /// Returns true if `wktBoolValue` has been explicitly set.
  public var hasWktBoolValue: Bool {return _storage._wktBoolValue != nil}
  /// Clears the value of `wktBoolValue`. Subsequent reads from it will return its default value.
  public mutating func clearWktBoolValue() {_uniqueStorage()._wktBoolValue = nil}

  public var wktStringValue: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _storage._wktStringValue ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_uniqueStorage()._wktStringValue = newValue}
  }
  /// Returns true if `wktStringValue` has been explicitly set.
  public var hasWktStringValue: Bool {return _storage._wktStringValue != nil}
  /// Clears the value of `wktStringValue`. Subsequent reads from it will return its default value.
  public mutating func clearWktStringValue() {_uniqueStorage()._wktStringValue = nil}

  public var wktBytesValue: SwiftProtobuf.Google_Protobuf_BytesValue {
    get {return _storage._wktBytesValue ?? SwiftProtobuf.Google_Protobuf_BytesValue()}
    set {_uniqueStorage()._wktBytesValue = newValue}
  }
  /// Returns true if `wktBytesValue` has been explicitly set.
  public var hasWktBytesValue: Bool {return _storage._wktBytesValue != nil}
  /// Clears the value of `wktBytesValue`. Subsequent reads from it will return its default value.
  public mutating func clearWktBytesValue() {_uniqueStorage()._wktBytesValue = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// oneof
  public enum OneOf_O: Equatable {
    case oneofInt32(Int32)
    case oneofInt64(Int64)
    case oneofUint32(UInt32)
    case oneofUint64(UInt64)
    case oneofSint32(Int32)
    case oneofSint64(Int64)
    case oneofFixed32(UInt32)
    case oneofFixed64(UInt64)
    case oneofSfixed32(Int32)
    case oneofSfixed64(Int64)
    case oneofFloat(Float)
    case oneofDouble(Double)
    case oneofBool(Bool)
    case oneofString(String)
    case oneofBytes(Data)
    case oneofEnum(Fuzz_Testing_AnEnum)
    case oneofGroup(Fuzz_Testing_Message.OneofGroup)
    case oneofMessage(Fuzz_Testing_Message)

    fileprivate var isInitialized: Bool {
      guard case .oneofMessage(let v) = self else {return true}
      return v.isInitialized
    }

  #if !swift(>=4.1)
    public static func ==(lhs: Fuzz_Testing_Message.OneOf_O, rhs: Fuzz_Testing_Message.OneOf_O) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.oneofInt32, .oneofInt32): return {
        guard case .oneofInt32(let l) = lhs, case .oneofInt32(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.oneofInt64, .oneofInt64): return {
        guard case .oneofInt64(let l) = lhs, case .oneofInt64(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.oneofUint32, .oneofUint32): return {
        guard case .oneofUint32(let l) = lhs, case .oneofUint32(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.oneofUint64, .oneofUint64): return {
        guard case .oneofUint64(let l) = lhs, case .oneofUint64(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.oneofSint32, .oneofSint32): return {
        guard case .oneofSint32(let l) = lhs, case .oneofSint32(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.oneofSint64, .oneofSint64): return {
        guard case .oneofSint64(let l) = lhs, case .oneofSint64(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.oneofFixed32, .oneofFixed32): return {
        guard case .oneofFixed32(let l) = lhs, case .oneofFixed32(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.oneofFixed64, .oneofFixed64): return {
        guard case .oneofFixed64(let l) = lhs, case .oneofFixed64(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.oneofSfixed32, .oneofSfixed32): return {
        guard case .oneofSfixed32(let l) = lhs, case .oneofSfixed32(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.oneofSfixed64, .oneofSfixed64): return {
        guard case .oneofSfixed64(let l) = lhs, case .oneofSfixed64(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.oneofFloat, .oneofFloat): return {
        guard case .oneofFloat(let l) = lhs, case .oneofFloat(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.oneofDouble, .oneofDouble): return {
        guard case .oneofDouble(let l) = lhs, case .oneofDouble(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.oneofBool, .oneofBool): return {
        guard case .oneofBool(let l) = lhs, case .oneofBool(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.oneofString, .oneofString): return {
        guard case .oneofString(let l) = lhs, case .oneofString(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.oneofBytes, .oneofBytes): return {
        guard case .oneofBytes(let l) = lhs, case .oneofBytes(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.oneofEnum, .oneofEnum): return {
        guard case .oneofEnum(let l) = lhs, case .oneofEnum(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.oneofGroup, .oneofGroup): return {
        guard case .oneofGroup(let l) = lhs, case .oneofGroup(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.oneofMessage, .oneofMessage): return {
        guard case .oneofMessage(let l) = lhs, case .oneofMessage(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public struct SingularGroup {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var groupField: Int32 {
      get {return _groupField ?? 0}
      set {_groupField = newValue}
    }
    /// Returns true if `groupField` has been explicitly set.
    public var hasGroupField: Bool {return self._groupField != nil}
    /// Clears the value of `groupField`. Subsequent reads from it will return its default value.
    public mutating func clearGroupField() {self._groupField = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _groupField: Int32? = nil
  }

  public struct RepeatedGroup {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var groupField: Int32 {
      get {return _groupField ?? 0}
      set {_groupField = newValue}
    }
    /// Returns true if `groupField` has been explicitly set.
    public var hasGroupField: Bool {return self._groupField != nil}
    /// Clears the value of `groupField`. Subsequent reads from it will return its default value.
    public mutating func clearGroupField() {self._groupField = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _groupField: Int32? = nil
  }

  public struct OneofGroup {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var groupField: Int32 {
      get {return _groupField ?? 0}
      set {_groupField = newValue}
    }
    /// Returns true if `groupField` has been explicitly set.
    public var hasGroupField: Bool {return self._groupField != nil}
    /// Clears the value of `groupField`. Subsequent reads from it will return its default value.
    public mutating func clearGroupField() {self._groupField = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _groupField: Int32? = nil
  }

  public init() {}

  public var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Fuzz_Testing_SingularGroup_ext {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var groupField: Int32 {
    get {return _groupField ?? 0}
    set {_groupField = newValue}
  }
  /// Returns true if `groupField` has been explicitly set.
  public var hasGroupField: Bool {return self._groupField != nil}
  /// Clears the value of `groupField`. Subsequent reads from it will return its default value.
  public mutating func clearGroupField() {self._groupField = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _groupField: Int32? = nil
}

public struct Fuzz_Testing_RepeatedGroup_ext {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var groupField: Int32 {
    get {return _groupField ?? 0}
    set {_groupField = newValue}
  }
  /// Returns true if `groupField` has been explicitly set.
  public var hasGroupField: Bool {return self._groupField != nil}
  /// Clears the value of `groupField`. Subsequent reads from it will return its default value.
  public mutating func clearGroupField() {self._groupField = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _groupField: Int32? = nil
}

// MARK: - Extension support defined in fuzz_testing.proto.

// MARK: - Extension Properties

// Swift Extensions on the exteneded Messages to add easy access to the declared
// extension fields. The names are based on the extension field name from the proto
// declaration. To avoid naming collisions, the names are prefixed with the name of
// the scope where the extend directive occurs.

extension Fuzz_Testing_Message {

  /// Singular
  public var Fuzz_Testing_singularInt32Ext: Int32 {
    get {return getExtensionValue(ext: Fuzz_Testing_Extensions_singular_int32_ext) ?? 0}
    set {setExtensionValue(ext: Fuzz_Testing_Extensions_singular_int32_ext, value: newValue)}
  }
  /// Returns true if extension `Fuzz_Testing_Extensions_singular_int32_ext`
  /// has been explicitly set.
  public var hasFuzz_Testing_singularInt32Ext: Bool {
    return hasExtensionValue(ext: Fuzz_Testing_Extensions_singular_int32_ext)
  }
  /// Clears the value of extension `Fuzz_Testing_Extensions_singular_int32_ext`.
  /// Subsequent reads from it will return its default value.
  public mutating func clearFuzz_Testing_singularInt32Ext() {
    clearExtensionValue(ext: Fuzz_Testing_Extensions_singular_int32_ext)
  }

  public var Fuzz_Testing_singularInt64Ext: Int64 {
    get {return getExtensionValue(ext: Fuzz_Testing_Extensions_singular_int64_ext) ?? 0}
    set {setExtensionValue(ext: Fuzz_Testing_Extensions_singular_int64_ext, value: newValue)}
  }
  /// Returns true if extension `Fuzz_Testing_Extensions_singular_int64_ext`
  /// has been explicitly set.
  public var hasFuzz_Testing_singularInt64Ext: Bool {
    return hasExtensionValue(ext: Fuzz_Testing_Extensions_singular_int64_ext)
  }
  /// Clears the value of extension `Fuzz_Testing_Extensions_singular_int64_ext`.
  /// Subsequent reads from it will return its default value.
  public mutating func clearFuzz_Testing_singularInt64Ext() {
    clearExtensionValue(ext: Fuzz_Testing_Extensions_singular_int64_ext)
  }

  public var Fuzz_Testing_singularUint32Ext: UInt32 {
    get {return getExtensionValue(ext: Fuzz_Testing_Extensions_singular_uint32_ext) ?? 0}
    set {setExtensionValue(ext: Fuzz_Testing_Extensions_singular_uint32_ext, value: newValue)}
  }
  /// Returns true if extension `Fuzz_Testing_Extensions_singular_uint32_ext`
  /// has been explicitly set.
  public var hasFuzz_Testing_singularUint32Ext: Bool {
    return hasExtensionValue(ext: Fuzz_Testing_Extensions_singular_uint32_ext)
  }
  /// Clears the value of extension `Fuzz_Testing_Extensions_singular_uint32_ext`.
  /// Subsequent reads from it will return its default value.
  public mutating func clearFuzz_Testing_singularUint32Ext() {
    clearExtensionValue(ext: Fuzz_Testing_Extensions_singular_uint32_ext)
  }

  public var Fuzz_Testing_singularUint64Ext: UInt64 {
    get {return getExtensionValue(ext: Fuzz_Testing_Extensions_singular_uint64_ext) ?? 0}
    set {setExtensionValue(ext: Fuzz_Testing_Extensions_singular_uint64_ext, value: newValue)}
  }
  /// Returns true if extension `Fuzz_Testing_Extensions_singular_uint64_ext`
  /// has been explicitly set.
  public var hasFuzz_Testing_singularUint64Ext: Bool {
    return hasExtensionValue(ext: Fuzz_Testing_Extensions_singular_uint64_ext)
  }
  /// Clears the value of extension `Fuzz_Testing_Extensions_singular_uint64_ext`.
  /// Subsequent reads from it will return its default value.
  public mutating func clearFuzz_Testing_singularUint64Ext() {
    clearExtensionValue(ext: Fuzz_Testing_Extensions_singular_uint64_ext)
  }

  public var Fuzz_Testing_singularSint32Ext: Int32 {
    get {return getExtensionValue(ext: Fuzz_Testing_Extensions_singular_sint32_ext) ?? 0}
    set {setExtensionValue(ext: Fuzz_Testing_Extensions_singular_sint32_ext, value: newValue)}
  }
  /// Returns true if extension `Fuzz_Testing_Extensions_singular_sint32_ext`
  /// has been explicitly set.
  public var hasFuzz_Testing_singularSint32Ext: Bool {
    return hasExtensionValue(ext: Fuzz_Testing_Extensions_singular_sint32_ext)
  }
  /// Clears the value of extension `Fuzz_Testing_Extensions_singular_sint32_ext`.
  /// Subsequent reads from it will return its default value.
  public mutating func clearFuzz_Testing_singularSint32Ext() {
    clearExtensionValue(ext: Fuzz_Testing_Extensions_singular_sint32_ext)
  }

  public var Fuzz_Testing_singularSint64Ext: Int64 {
    get {return getExtensionValue(ext: Fuzz_Testing_Extensions_singular_sint64_ext) ?? 0}
    set {setExtensionValue(ext: Fuzz_Testing_Extensions_singular_sint64_ext, value: newValue)}
  }
  /// Returns true if extension `Fuzz_Testing_Extensions_singular_sint64_ext`
  /// has been explicitly set.
  public var hasFuzz_Testing_singularSint64Ext: Bool {
    return hasExtensionValue(ext: Fuzz_Testing_Extensions_singular_sint64_ext)
  }
  /// Clears the value of extension `Fuzz_Testing_Extensions_singular_sint64_ext`.
  /// Subsequent reads from it will return its default value.
  public mutating func clearFuzz_Testing_singularSint64Ext() {
    clearExtensionValue(ext: Fuzz_Testing_Extensions_singular_sint64_ext)
  }

  public var Fuzz_Testing_singularFixed32Ext: UInt32 {
    get {return getExtensionValue(ext: Fuzz_Testing_Extensions_singular_fixed32_ext) ?? 0}
    set {setExtensionValue(ext: Fuzz_Testing_Extensions_singular_fixed32_ext, value: newValue)}
  }
  /// Returns true if extension `Fuzz_Testing_Extensions_singular_fixed32_ext`
  /// has been explicitly set.
  public var hasFuzz_Testing_singularFixed32Ext: Bool {
    return hasExtensionValue(ext: Fuzz_Testing_Extensions_singular_fixed32_ext)
  }
  /// Clears the value of extension `Fuzz_Testing_Extensions_singular_fixed32_ext`.
  /// Subsequent reads from it will return its default value.
  public mutating func clearFuzz_Testing_singularFixed32Ext() {
    clearExtensionValue(ext: Fuzz_Testing_Extensions_singular_fixed32_ext)
  }

  public var Fuzz_Testing_singularFixed64Ext: UInt64 {
    get {return getExtensionValue(ext: Fuzz_Testing_Extensions_singular_fixed64_ext) ?? 0}
    set {setExtensionValue(ext: Fuzz_Testing_Extensions_singular_fixed64_ext, value: newValue)}
  }
  /// Returns true if extension `Fuzz_Testing_Extensions_singular_fixed64_ext`
  /// has been explicitly set.
  public var hasFuzz_Testing_singularFixed64Ext: Bool {
    return hasExtensionValue(ext: Fuzz_Testing_Extensions_singular_fixed64_ext)
  }
  /// Clears the value of extension `Fuzz_Testing_Extensions_singular_fixed64_ext`.
  /// Subsequent reads from it will return its default value.
  public mutating func clearFuzz_Testing_singularFixed64Ext() {
    clearExtensionValue(ext: Fuzz_Testing_Extensions_singular_fixed64_ext)
  }

  public var Fuzz_Testing_singularSfixed32Ext: Int32 {
    get {return getExtensionValue(ext: Fuzz_Testing_Extensions_singular_sfixed32_ext) ?? 0}
    set {setExtensionValue(ext: Fuzz_Testing_Extensions_singular_sfixed32_ext, value: newValue)}
  }
  /// Returns true if extension `Fuzz_Testing_Extensions_singular_sfixed32_ext`
  /// has been explicitly set.
  public var hasFuzz_Testing_singularSfixed32Ext: Bool {
    return hasExtensionValue(ext: Fuzz_Testing_Extensions_singular_sfixed32_ext)
  }
  /// Clears the value of extension `Fuzz_Testing_Extensions_singular_sfixed32_ext`.
  /// Subsequent reads from it will return its default value.
  public mutating func clearFuzz_Testing_singularSfixed32Ext() {
    clearExtensionValue(ext: Fuzz_Testing_Extensions_singular_sfixed32_ext)
  }

  public var Fuzz_Testing_singularSfixed64Ext: Int64 {
    get {return getExtensionValue(ext: Fuzz_Testing_Extensions_singular_sfixed64_ext) ?? 0}
    set {setExtensionValue(ext: Fuzz_Testing_Extensions_singular_sfixed64_ext, value: newValue)}
  }
  /// Returns true if extension `Fuzz_Testing_Extensions_singular_sfixed64_ext`
  /// has been explicitly set.
  public var hasFuzz_Testing_singularSfixed64Ext: Bool {
    return hasExtensionValue(ext: Fuzz_Testing_Extensions_singular_sfixed64_ext)
  }
  /// Clears the value of extension `Fuzz_Testing_Extensions_singular_sfixed64_ext`.
  /// Subsequent reads from it will return its default value.
  public mutating func clearFuzz_Testing_singularSfixed64Ext() {
    clearExtensionValue(ext: Fuzz_Testing_Extensions_singular_sfixed64_ext)
  }

  public var Fuzz_Testing_singularFloatExt: Float {
    get {return getExtensionValue(ext: Fuzz_Testing_Extensions_singular_float_ext) ?? 0}
    set {setExtensionValue(ext: Fuzz_Testing_Extensions_singular_float_ext, value: newValue)}
  }
  /// Returns true if extension `Fuzz_Testing_Extensions_singular_float_ext`
  /// has been explicitly set.
  public var hasFuzz_Testing_singularFloatExt: Bool {
    return hasExtensionValue(ext: Fuzz_Testing_Extensions_singular_float_ext)
  }
  /// Clears the value of extension `Fuzz_Testing_Extensions_singular_float_ext`.
  /// Subsequent reads from it will return its default value.
  public mutating func clearFuzz_Testing_singularFloatExt() {
    clearExtensionValue(ext: Fuzz_Testing_Extensions_singular_float_ext)
  }

  public var Fuzz_Testing_singularDoubleExt: Double {
    get {return getExtensionValue(ext: Fuzz_Testing_Extensions_singular_double_ext) ?? 0}
    set {setExtensionValue(ext: Fuzz_Testing_Extensions_singular_double_ext, value: newValue)}
  }
  /// Returns true if extension `Fuzz_Testing_Extensions_singular_double_ext`
  /// has been explicitly set.
  public var hasFuzz_Testing_singularDoubleExt: Bool {
    return hasExtensionValue(ext: Fuzz_Testing_Extensions_singular_double_ext)
  }
  /// Clears the value of extension `Fuzz_Testing_Extensions_singular_double_ext`.
  /// Subsequent reads from it will return its default value.
  public mutating func clearFuzz_Testing_singularDoubleExt() {
    clearExtensionValue(ext: Fuzz_Testing_Extensions_singular_double_ext)
  }

  public var Fuzz_Testing_singularBoolExt: Bool {
    get {return getExtensionValue(ext: Fuzz_Testing_Extensions_singular_bool_ext) ?? false}
    set {setExtensionValue(ext: Fuzz_Testing_Extensions_singular_bool_ext, value: newValue)}
  }
  /// Returns true if extension `Fuzz_Testing_Extensions_singular_bool_ext`
  /// has been explicitly set.
  public var hasFuzz_Testing_singularBoolExt: Bool {
    return hasExtensionValue(ext: Fuzz_Testing_Extensions_singular_bool_ext)
  }
  /// Clears the value of extension `Fuzz_Testing_Extensions_singular_bool_ext`.
  /// Subsequent reads from it will return its default value.
  public mutating func clearFuzz_Testing_singularBoolExt() {
    clearExtensionValue(ext: Fuzz_Testing_Extensions_singular_bool_ext)
  }

  public var Fuzz_Testing_singularStringExt: String {
    get {return getExtensionValue(ext: Fuzz_Testing_Extensions_singular_string_ext) ?? String()}
    set {setExtensionValue(ext: Fuzz_Testing_Extensions_singular_string_ext, value: newValue)}
  }
  /// Returns true if extension `Fuzz_Testing_Extensions_singular_string_ext`
  /// has been explicitly set.
  public var hasFuzz_Testing_singularStringExt: Bool {
    return hasExtensionValue(ext: Fuzz_Testing_Extensions_singular_string_ext)
  }
  /// Clears the value of extension `Fuzz_Testing_Extensions_singular_string_ext`.
  /// Subsequent reads from it will return its default value.
  public mutating func clearFuzz_Testing_singularStringExt() {
    clearExtensionValue(ext: Fuzz_Testing_Extensions_singular_string_ext)
  }

  public var Fuzz_Testing_singularBytesExt: Data {
    get {return getExtensionValue(ext: Fuzz_Testing_Extensions_singular_bytes_ext) ?? Data()}
    set {setExtensionValue(ext: Fuzz_Testing_Extensions_singular_bytes_ext, value: newValue)}
  }
  /// Returns true if extension `Fuzz_Testing_Extensions_singular_bytes_ext`
  /// has been explicitly set.
  public var hasFuzz_Testing_singularBytesExt: Bool {
    return hasExtensionValue(ext: Fuzz_Testing_Extensions_singular_bytes_ext)
  }
  /// Clears the value of extension `Fuzz_Testing_Extensions_singular_bytes_ext`.
  /// Subsequent reads from it will return its default value.
  public mutating func clearFuzz_Testing_singularBytesExt() {
    clearExtensionValue(ext: Fuzz_Testing_Extensions_singular_bytes_ext)
  }

  public var Fuzz_Testing_singularEnumExt: Fuzz_Testing_AnEnum {
    get {return getExtensionValue(ext: Fuzz_Testing_Extensions_singular_enum_ext) ?? .zero}
    set {setExtensionValue(ext: Fuzz_Testing_Extensions_singular_enum_ext, value: newValue)}
  }
  /// Returns true if extension `Fuzz_Testing_Extensions_singular_enum_ext`
  /// has been explicitly set.
  public var hasFuzz_Testing_singularEnumExt: Bool {
    return hasExtensionValue(ext: Fuzz_Testing_Extensions_singular_enum_ext)
  }
  /// Clears the value of extension `Fuzz_Testing_Extensions_singular_enum_ext`.
  /// Subsequent reads from it will return its default value.
  public mutating func clearFuzz_Testing_singularEnumExt() {
    clearExtensionValue(ext: Fuzz_Testing_Extensions_singular_enum_ext)
  }

  public var Fuzz_Testing_singularGroupExt: Fuzz_Testing_SingularGroup_ext {
    get {return getExtensionValue(ext: Fuzz_Testing_Extensions_SingularGroup_ext) ?? Fuzz_Testing_SingularGroup_ext()}
    set {setExtensionValue(ext: Fuzz_Testing_Extensions_SingularGroup_ext, value: newValue)}
  }
  /// Returns true if extension `Fuzz_Testing_Extensions_SingularGroup_ext`
  /// has been explicitly set.
  public var hasFuzz_Testing_singularGroupExt: Bool {
    return hasExtensionValue(ext: Fuzz_Testing_Extensions_SingularGroup_ext)
  }
  /// Clears the value of extension `Fuzz_Testing_Extensions_SingularGroup_ext`.
  /// Subsequent reads from it will return its default value.
  public mutating func clearFuzz_Testing_singularGroupExt() {
    clearExtensionValue(ext: Fuzz_Testing_Extensions_SingularGroup_ext)
  }

  public var Fuzz_Testing_singularMessageExt: Fuzz_Testing_Message {
    get {return getExtensionValue(ext: Fuzz_Testing_Extensions_singular_message_ext) ?? Fuzz_Testing_Message()}
    set {setExtensionValue(ext: Fuzz_Testing_Extensions_singular_message_ext, value: newValue)}
  }
  /// Returns true if extension `Fuzz_Testing_Extensions_singular_message_ext`
  /// has been explicitly set.
  public var hasFuzz_Testing_singularMessageExt: Bool {
    return hasExtensionValue(ext: Fuzz_Testing_Extensions_singular_message_ext)
  }
  /// Clears the value of extension `Fuzz_Testing_Extensions_singular_message_ext`.
  /// Subsequent reads from it will return its default value.
  public mutating func clearFuzz_Testing_singularMessageExt() {
    clearExtensionValue(ext: Fuzz_Testing_Extensions_singular_message_ext)
  }

  /// Repeated
  public var Fuzz_Testing_repeatedInt32Ext: [Int32] {
    get {return getExtensionValue(ext: Fuzz_Testing_Extensions_repeated_int32_ext) ?? []}
    set {setExtensionValue(ext: Fuzz_Testing_Extensions_repeated_int32_ext, value: newValue)}
  }
  /// Returns true if extension `Fuzz_Testing_Extensions_repeated_int32_ext`
  /// has been explicitly set.
  public var hasFuzz_Testing_repeatedInt32Ext: Bool {
    return hasExtensionValue(ext: Fuzz_Testing_Extensions_repeated_int32_ext)
  }
  /// Clears the value of extension `Fuzz_Testing_Extensions_repeated_int32_ext`.
  /// Subsequent reads from it will return its default value.
  public mutating func clearFuzz_Testing_repeatedInt32Ext() {
    clearExtensionValue(ext: Fuzz_Testing_Extensions_repeated_int32_ext)
  }

  public var Fuzz_Testing_repeatedInt64Ext: [Int64] {
    get {return getExtensionValue(ext: Fuzz_Testing_Extensions_repeated_int64_ext) ?? []}
    set {setExtensionValue(ext: Fuzz_Testing_Extensions_repeated_int64_ext, value: newValue)}
  }
  /// Returns true if extension `Fuzz_Testing_Extensions_repeated_int64_ext`
  /// has been explicitly set.
  public var hasFuzz_Testing_repeatedInt64Ext: Bool {
    return hasExtensionValue(ext: Fuzz_Testing_Extensions_repeated_int64_ext)
  }
  /// Clears the value of extension `Fuzz_Testing_Extensions_repeated_int64_ext`.
  /// Subsequent reads from it will return its default value.
  public mutating func clearFuzz_Testing_repeatedInt64Ext() {
    clearExtensionValue(ext: Fuzz_Testing_Extensions_repeated_int64_ext)
  }

  public var Fuzz_Testing_repeatedUint32Ext: [UInt32] {
    get {return getExtensionValue(ext: Fuzz_Testing_Extensions_repeated_uint32_ext) ?? []}
    set {setExtensionValue(ext: Fuzz_Testing_Extensions_repeated_uint32_ext, value: newValue)}
  }
  /// Returns true if extension `Fuzz_Testing_Extensions_repeated_uint32_ext`
  /// has been explicitly set.
  public var hasFuzz_Testing_repeatedUint32Ext: Bool {
    return hasExtensionValue(ext: Fuzz_Testing_Extensions_repeated_uint32_ext)
  }
  /// Clears the value of extension `Fuzz_Testing_Extensions_repeated_uint32_ext`.
  /// Subsequent reads from it will return its default value.
  public mutating func clearFuzz_Testing_repeatedUint32Ext() {
    clearExtensionValue(ext: Fuzz_Testing_Extensions_repeated_uint32_ext)
  }

  public var Fuzz_Testing_repeatedUint64Ext: [UInt64] {
    get {return getExtensionValue(ext: Fuzz_Testing_Extensions_repeated_uint64_ext) ?? []}
    set {setExtensionValue(ext: Fuzz_Testing_Extensions_repeated_uint64_ext, value: newValue)}
  }
  /// Returns true if extension `Fuzz_Testing_Extensions_repeated_uint64_ext`
  /// has been explicitly set.
  public var hasFuzz_Testing_repeatedUint64Ext: Bool {
    return hasExtensionValue(ext: Fuzz_Testing_Extensions_repeated_uint64_ext)
  }
  /// Clears the value of extension `Fuzz_Testing_Extensions_repeated_uint64_ext`.
  /// Subsequent reads from it will return its default value.
  public mutating func clearFuzz_Testing_repeatedUint64Ext() {
    clearExtensionValue(ext: Fuzz_Testing_Extensions_repeated_uint64_ext)
  }

  public var Fuzz_Testing_repeatedSint32Ext: [Int32] {
    get {return getExtensionValue(ext: Fuzz_Testing_Extensions_repeated_sint32_ext) ?? []}
    set {setExtensionValue(ext: Fuzz_Testing_Extensions_repeated_sint32_ext, value: newValue)}
  }
  /// Returns true if extension `Fuzz_Testing_Extensions_repeated_sint32_ext`
  /// has been explicitly set.
  public var hasFuzz_Testing_repeatedSint32Ext: Bool {
    return hasExtensionValue(ext: Fuzz_Testing_Extensions_repeated_sint32_ext)
  }
  /// Clears the value of extension `Fuzz_Testing_Extensions_repeated_sint32_ext`.
  /// Subsequent reads from it will return its default value.
  public mutating func clearFuzz_Testing_repeatedSint32Ext() {
    clearExtensionValue(ext: Fuzz_Testing_Extensions_repeated_sint32_ext)
  }

  public var Fuzz_Testing_repeatedSint64Ext: [Int64] {
    get {return getExtensionValue(ext: Fuzz_Testing_Extensions_repeated_sint64_ext) ?? []}
    set {setExtensionValue(ext: Fuzz_Testing_Extensions_repeated_sint64_ext, value: newValue)}
  }
  /// Returns true if extension `Fuzz_Testing_Extensions_repeated_sint64_ext`
  /// has been explicitly set.
  public var hasFuzz_Testing_repeatedSint64Ext: Bool {
    return hasExtensionValue(ext: Fuzz_Testing_Extensions_repeated_sint64_ext)
  }
  /// Clears the value of extension `Fuzz_Testing_Extensions_repeated_sint64_ext`.
  /// Subsequent reads from it will return its default value.
  public mutating func clearFuzz_Testing_repeatedSint64Ext() {
    clearExtensionValue(ext: Fuzz_Testing_Extensions_repeated_sint64_ext)
  }

  public var Fuzz_Testing_repeatedFixed32Ext: [UInt32] {
    get {return getExtensionValue(ext: Fuzz_Testing_Extensions_repeated_fixed32_ext) ?? []}
    set {setExtensionValue(ext: Fuzz_Testing_Extensions_repeated_fixed32_ext, value: newValue)}
  }
  /// Returns true if extension `Fuzz_Testing_Extensions_repeated_fixed32_ext`
  /// has been explicitly set.
  public var hasFuzz_Testing_repeatedFixed32Ext: Bool {
    return hasExtensionValue(ext: Fuzz_Testing_Extensions_repeated_fixed32_ext)
  }
  /// Clears the value of extension `Fuzz_Testing_Extensions_repeated_fixed32_ext`.
  /// Subsequent reads from it will return its default value.
  public mutating func clearFuzz_Testing_repeatedFixed32Ext() {
    clearExtensionValue(ext: Fuzz_Testing_Extensions_repeated_fixed32_ext)
  }

  public var Fuzz_Testing_repeatedFixed64Ext: [UInt64] {
    get {return getExtensionValue(ext: Fuzz_Testing_Extensions_repeated_fixed64_ext) ?? []}
    set {setExtensionValue(ext: Fuzz_Testing_Extensions_repeated_fixed64_ext, value: newValue)}
  }
  /// Returns true if extension `Fuzz_Testing_Extensions_repeated_fixed64_ext`
  /// has been explicitly set.
  public var hasFuzz_Testing_repeatedFixed64Ext: Bool {
    return hasExtensionValue(ext: Fuzz_Testing_Extensions_repeated_fixed64_ext)
  }
  /// Clears the value of extension `Fuzz_Testing_Extensions_repeated_fixed64_ext`.
  /// Subsequent reads from it will return its default value.
  public mutating func clearFuzz_Testing_repeatedFixed64Ext() {
    clearExtensionValue(ext: Fuzz_Testing_Extensions_repeated_fixed64_ext)
  }

  public var Fuzz_Testing_repeatedSfixed32Ext: [Int32] {
    get {return getExtensionValue(ext: Fuzz_Testing_Extensions_repeated_sfixed32_ext) ?? []}
    set {setExtensionValue(ext: Fuzz_Testing_Extensions_repeated_sfixed32_ext, value: newValue)}
  }
  /// Returns true if extension `Fuzz_Testing_Extensions_repeated_sfixed32_ext`
  /// has been explicitly set.
  public var hasFuzz_Testing_repeatedSfixed32Ext: Bool {
    return hasExtensionValue(ext: Fuzz_Testing_Extensions_repeated_sfixed32_ext)
  }
  /// Clears the value of extension `Fuzz_Testing_Extensions_repeated_sfixed32_ext`.
  /// Subsequent reads from it will return its default value.
  public mutating func clearFuzz_Testing_repeatedSfixed32Ext() {
    clearExtensionValue(ext: Fuzz_Testing_Extensions_repeated_sfixed32_ext)
  }

  public var Fuzz_Testing_repeatedSfixed64Ext: [Int64] {
    get {return getExtensionValue(ext: Fuzz_Testing_Extensions_repeated_sfixed64_ext) ?? []}
    set {setExtensionValue(ext: Fuzz_Testing_Extensions_repeated_sfixed64_ext, value: newValue)}
  }
  /// Returns true if extension `Fuzz_Testing_Extensions_repeated_sfixed64_ext`
  /// has been explicitly set.
  public var hasFuzz_Testing_repeatedSfixed64Ext: Bool {
    return hasExtensionValue(ext: Fuzz_Testing_Extensions_repeated_sfixed64_ext)
  }
  /// Clears the value of extension `Fuzz_Testing_Extensions_repeated_sfixed64_ext`.
  /// Subsequent reads from it will return its default value.
  public mutating func clearFuzz_Testing_repeatedSfixed64Ext() {
    clearExtensionValue(ext: Fuzz_Testing_Extensions_repeated_sfixed64_ext)
  }

  public var Fuzz_Testing_repeatedFloatExt: [Float] {
    get {return getExtensionValue(ext: Fuzz_Testing_Extensions_repeated_float_ext) ?? []}
    set {setExtensionValue(ext: Fuzz_Testing_Extensions_repeated_float_ext, value: newValue)}
  }
  /// Returns true if extension `Fuzz_Testing_Extensions_repeated_float_ext`
  /// has been explicitly set.
  public var hasFuzz_Testing_repeatedFloatExt: Bool {
    return hasExtensionValue(ext: Fuzz_Testing_Extensions_repeated_float_ext)
  }
  /// Clears the value of extension `Fuzz_Testing_Extensions_repeated_float_ext`.
  /// Subsequent reads from it will return its default value.
  public mutating func clearFuzz_Testing_repeatedFloatExt() {
    clearExtensionValue(ext: Fuzz_Testing_Extensions_repeated_float_ext)
  }

  public var Fuzz_Testing_repeatedDoubleExt: [Double] {
    get {return getExtensionValue(ext: Fuzz_Testing_Extensions_repeated_double_ext) ?? []}
    set {setExtensionValue(ext: Fuzz_Testing_Extensions_repeated_double_ext, value: newValue)}
  }
  /// Returns true if extension `Fuzz_Testing_Extensions_repeated_double_ext`
  /// has been explicitly set.
  public var hasFuzz_Testing_repeatedDoubleExt: Bool {
    return hasExtensionValue(ext: Fuzz_Testing_Extensions_repeated_double_ext)
  }
  /// Clears the value of extension `Fuzz_Testing_Extensions_repeated_double_ext`.
  /// Subsequent reads from it will return its default value.
  public mutating func clearFuzz_Testing_repeatedDoubleExt() {
    clearExtensionValue(ext: Fuzz_Testing_Extensions_repeated_double_ext)
  }

  public var Fuzz_Testing_repeatedBoolExt: [Bool] {
    get {return getExtensionValue(ext: Fuzz_Testing_Extensions_repeated_bool_ext) ?? []}
    set {setExtensionValue(ext: Fuzz_Testing_Extensions_repeated_bool_ext, value: newValue)}
  }
  /// Returns true if extension `Fuzz_Testing_Extensions_repeated_bool_ext`
  /// has been explicitly set.
  public var hasFuzz_Testing_repeatedBoolExt: Bool {
    return hasExtensionValue(ext: Fuzz_Testing_Extensions_repeated_bool_ext)
  }
  /// Clears the value of extension `Fuzz_Testing_Extensions_repeated_bool_ext`.
  /// Subsequent reads from it will return its default value.
  public mutating func clearFuzz_Testing_repeatedBoolExt() {
    clearExtensionValue(ext: Fuzz_Testing_Extensions_repeated_bool_ext)
  }

  public var Fuzz_Testing_repeatedStringExt: [String] {
    get {return getExtensionValue(ext: Fuzz_Testing_Extensions_repeated_string_ext) ?? []}
    set {setExtensionValue(ext: Fuzz_Testing_Extensions_repeated_string_ext, value: newValue)}
  }
  /// Returns true if extension `Fuzz_Testing_Extensions_repeated_string_ext`
  /// has been explicitly set.
  public var hasFuzz_Testing_repeatedStringExt: Bool {
    return hasExtensionValue(ext: Fuzz_Testing_Extensions_repeated_string_ext)
  }
  /// Clears the value of extension `Fuzz_Testing_Extensions_repeated_string_ext`.
  /// Subsequent reads from it will return its default value.
  public mutating func clearFuzz_Testing_repeatedStringExt() {
    clearExtensionValue(ext: Fuzz_Testing_Extensions_repeated_string_ext)
  }

  public var Fuzz_Testing_repeatedBytesExt: [Data] {
    get {return getExtensionValue(ext: Fuzz_Testing_Extensions_repeated_bytes_ext) ?? []}
    set {setExtensionValue(ext: Fuzz_Testing_Extensions_repeated_bytes_ext, value: newValue)}
  }
  /// Returns true if extension `Fuzz_Testing_Extensions_repeated_bytes_ext`
  /// has been explicitly set.
  public var hasFuzz_Testing_repeatedBytesExt: Bool {
    return hasExtensionValue(ext: Fuzz_Testing_Extensions_repeated_bytes_ext)
  }
  /// Clears the value of extension `Fuzz_Testing_Extensions_repeated_bytes_ext`.
  /// Subsequent reads from it will return its default value.
  public mutating func clearFuzz_Testing_repeatedBytesExt() {
    clearExtensionValue(ext: Fuzz_Testing_Extensions_repeated_bytes_ext)
  }

  public var Fuzz_Testing_repeatedEnumExt: [Fuzz_Testing_AnEnum] {
    get {return getExtensionValue(ext: Fuzz_Testing_Extensions_repeated_enum_ext) ?? []}
    set {setExtensionValue(ext: Fuzz_Testing_Extensions_repeated_enum_ext, value: newValue)}
  }
  /// Returns true if extension `Fuzz_Testing_Extensions_repeated_enum_ext`
  /// has been explicitly set.
  public var hasFuzz_Testing_repeatedEnumExt: Bool {
    return hasExtensionValue(ext: Fuzz_Testing_Extensions_repeated_enum_ext)
  }
  /// Clears the value of extension `Fuzz_Testing_Extensions_repeated_enum_ext`.
  /// Subsequent reads from it will return its default value.
  public mutating func clearFuzz_Testing_repeatedEnumExt() {
    clearExtensionValue(ext: Fuzz_Testing_Extensions_repeated_enum_ext)
  }

  public var Fuzz_Testing_repeatedGroupExt: [Fuzz_Testing_RepeatedGroup_ext] {
    get {return getExtensionValue(ext: Fuzz_Testing_Extensions_RepeatedGroup_ext) ?? []}
    set {setExtensionValue(ext: Fuzz_Testing_Extensions_RepeatedGroup_ext, value: newValue)}
  }
  /// Returns true if extension `Fuzz_Testing_Extensions_RepeatedGroup_ext`
  /// has been explicitly set.
  public var hasFuzz_Testing_repeatedGroupExt: Bool {
    return hasExtensionValue(ext: Fuzz_Testing_Extensions_RepeatedGroup_ext)
  }
  /// Clears the value of extension `Fuzz_Testing_Extensions_RepeatedGroup_ext`.
  /// Subsequent reads from it will return its default value.
  public mutating func clearFuzz_Testing_repeatedGroupExt() {
    clearExtensionValue(ext: Fuzz_Testing_Extensions_RepeatedGroup_ext)
  }

  public var Fuzz_Testing_repeatedMessageExt: [Fuzz_Testing_Message] {
    get {return getExtensionValue(ext: Fuzz_Testing_Extensions_repeated_message_ext) ?? []}
    set {setExtensionValue(ext: Fuzz_Testing_Extensions_repeated_message_ext, value: newValue)}
  }
  /// Returns true if extension `Fuzz_Testing_Extensions_repeated_message_ext`
  /// has been explicitly set.
  public var hasFuzz_Testing_repeatedMessageExt: Bool {
    return hasExtensionValue(ext: Fuzz_Testing_Extensions_repeated_message_ext)
  }
  /// Clears the value of extension `Fuzz_Testing_Extensions_repeated_message_ext`.
  /// Subsequent reads from it will return its default value.
  public mutating func clearFuzz_Testing_repeatedMessageExt() {
    clearExtensionValue(ext: Fuzz_Testing_Extensions_repeated_message_ext)
  }

}

// MARK: - File's ExtensionMap: Fuzz_Testing_FuzzTesting_Extensions

/// A `SwiftProtobuf.SimpleExtensionMap` that includes all of the extensions defined by
/// this .proto file. It can be used any place an `SwiftProtobuf.ExtensionMap` is needed
/// in parsing, or it can be combined with other `SwiftProtobuf.SimpleExtensionMap`s to create
/// a larger `SwiftProtobuf.SimpleExtensionMap`.
public let Fuzz_Testing_FuzzTesting_Extensions: SwiftProtobuf.SimpleExtensionMap = [
  Fuzz_Testing_Extensions_singular_int32_ext,
  Fuzz_Testing_Extensions_singular_int64_ext,
  Fuzz_Testing_Extensions_singular_uint32_ext,
  Fuzz_Testing_Extensions_singular_uint64_ext,
  Fuzz_Testing_Extensions_singular_sint32_ext,
  Fuzz_Testing_Extensions_singular_sint64_ext,
  Fuzz_Testing_Extensions_singular_fixed32_ext,
  Fuzz_Testing_Extensions_singular_fixed64_ext,
  Fuzz_Testing_Extensions_singular_sfixed32_ext,
  Fuzz_Testing_Extensions_singular_sfixed64_ext,
  Fuzz_Testing_Extensions_singular_float_ext,
  Fuzz_Testing_Extensions_singular_double_ext,
  Fuzz_Testing_Extensions_singular_bool_ext,
  Fuzz_Testing_Extensions_singular_string_ext,
  Fuzz_Testing_Extensions_singular_bytes_ext,
  Fuzz_Testing_Extensions_singular_enum_ext,
  Fuzz_Testing_Extensions_SingularGroup_ext,
  Fuzz_Testing_Extensions_singular_message_ext,
  Fuzz_Testing_Extensions_repeated_int32_ext,
  Fuzz_Testing_Extensions_repeated_int64_ext,
  Fuzz_Testing_Extensions_repeated_uint32_ext,
  Fuzz_Testing_Extensions_repeated_uint64_ext,
  Fuzz_Testing_Extensions_repeated_sint32_ext,
  Fuzz_Testing_Extensions_repeated_sint64_ext,
  Fuzz_Testing_Extensions_repeated_fixed32_ext,
  Fuzz_Testing_Extensions_repeated_fixed64_ext,
  Fuzz_Testing_Extensions_repeated_sfixed32_ext,
  Fuzz_Testing_Extensions_repeated_sfixed64_ext,
  Fuzz_Testing_Extensions_repeated_float_ext,
  Fuzz_Testing_Extensions_repeated_double_ext,
  Fuzz_Testing_Extensions_repeated_bool_ext,
  Fuzz_Testing_Extensions_repeated_string_ext,
  Fuzz_Testing_Extensions_repeated_bytes_ext,
  Fuzz_Testing_Extensions_repeated_enum_ext,
  Fuzz_Testing_Extensions_RepeatedGroup_ext,
  Fuzz_Testing_Extensions_repeated_message_ext
]

// Extension Objects - The only reason these might be needed is when manually
// constructing a `SimpleExtensionMap`, otherwise, use the above _Extension Properties_
// accessors for the extension fields on the messages directly.

/// Singular
public let Fuzz_Testing_Extensions_singular_int32_ext = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, Fuzz_Testing_Message>(
  _protobuf_fieldNumber: 1001,
  fieldName: "fuzz.testing.singular_int32_ext"
)

public let Fuzz_Testing_Extensions_singular_int64_ext = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufInt64>, Fuzz_Testing_Message>(
  _protobuf_fieldNumber: 1002,
  fieldName: "fuzz.testing.singular_int64_ext"
)

public let Fuzz_Testing_Extensions_singular_uint32_ext = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufUInt32>, Fuzz_Testing_Message>(
  _protobuf_fieldNumber: 1003,
  fieldName: "fuzz.testing.singular_uint32_ext"
)

public let Fuzz_Testing_Extensions_singular_uint64_ext = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufUInt64>, Fuzz_Testing_Message>(
  _protobuf_fieldNumber: 1004,
  fieldName: "fuzz.testing.singular_uint64_ext"
)

public let Fuzz_Testing_Extensions_singular_sint32_ext = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufSInt32>, Fuzz_Testing_Message>(
  _protobuf_fieldNumber: 1005,
  fieldName: "fuzz.testing.singular_sint32_ext"
)

public let Fuzz_Testing_Extensions_singular_sint64_ext = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufSInt64>, Fuzz_Testing_Message>(
  _protobuf_fieldNumber: 1006,
  fieldName: "fuzz.testing.singular_sint64_ext"
)

public let Fuzz_Testing_Extensions_singular_fixed32_ext = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufFixed32>, Fuzz_Testing_Message>(
  _protobuf_fieldNumber: 1007,
  fieldName: "fuzz.testing.singular_fixed32_ext"
)

public let Fuzz_Testing_Extensions_singular_fixed64_ext = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufFixed64>, Fuzz_Testing_Message>(
  _protobuf_fieldNumber: 1008,
  fieldName: "fuzz.testing.singular_fixed64_ext"
)

public let Fuzz_Testing_Extensions_singular_sfixed32_ext = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufSFixed32>, Fuzz_Testing_Message>(
  _protobuf_fieldNumber: 1009,
  fieldName: "fuzz.testing.singular_sfixed32_ext"
)

public let Fuzz_Testing_Extensions_singular_sfixed64_ext = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufSFixed64>, Fuzz_Testing_Message>(
  _protobuf_fieldNumber: 1010,
  fieldName: "fuzz.testing.singular_sfixed64_ext"
)

public let Fuzz_Testing_Extensions_singular_float_ext = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufFloat>, Fuzz_Testing_Message>(
  _protobuf_fieldNumber: 1011,
  fieldName: "fuzz.testing.singular_float_ext"
)

public let Fuzz_Testing_Extensions_singular_double_ext = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufDouble>, Fuzz_Testing_Message>(
  _protobuf_fieldNumber: 1012,
  fieldName: "fuzz.testing.singular_double_ext"
)

public let Fuzz_Testing_Extensions_singular_bool_ext = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufBool>, Fuzz_Testing_Message>(
  _protobuf_fieldNumber: 1013,
  fieldName: "fuzz.testing.singular_bool_ext"
)

public let Fuzz_Testing_Extensions_singular_string_ext = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufString>, Fuzz_Testing_Message>(
  _protobuf_fieldNumber: 1014,
  fieldName: "fuzz.testing.singular_string_ext"
)

public let Fuzz_Testing_Extensions_singular_bytes_ext = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufBytes>, Fuzz_Testing_Message>(
  _protobuf_fieldNumber: 1015,
  fieldName: "fuzz.testing.singular_bytes_ext"
)

public let Fuzz_Testing_Extensions_singular_enum_ext = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalEnumExtensionField<Fuzz_Testing_AnEnum>, Fuzz_Testing_Message>(
  _protobuf_fieldNumber: 1016,
  fieldName: "fuzz.testing.singular_enum_ext"
)

public let Fuzz_Testing_Extensions_SingularGroup_ext = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalGroupExtensionField<Fuzz_Testing_SingularGroup_ext>, Fuzz_Testing_Message>(
  _protobuf_fieldNumber: 1017,
  fieldName: "fuzz.testing.singulargroup_ext"
)

public let Fuzz_Testing_Extensions_singular_message_ext = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Fuzz_Testing_Message>, Fuzz_Testing_Message>(
  _protobuf_fieldNumber: 1019,
  fieldName: "fuzz.testing.singular_message_ext"
)

/// Repeated
public let Fuzz_Testing_Extensions_repeated_int32_ext = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufInt32>, Fuzz_Testing_Message>(
  _protobuf_fieldNumber: 1031,
  fieldName: "fuzz.testing.repeated_int32_ext"
)

public let Fuzz_Testing_Extensions_repeated_int64_ext = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufInt64>, Fuzz_Testing_Message>(
  _protobuf_fieldNumber: 1032,
  fieldName: "fuzz.testing.repeated_int64_ext"
)

public let Fuzz_Testing_Extensions_repeated_uint32_ext = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufUInt32>, Fuzz_Testing_Message>(
  _protobuf_fieldNumber: 1033,
  fieldName: "fuzz.testing.repeated_uint32_ext"
)

public let Fuzz_Testing_Extensions_repeated_uint64_ext = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufUInt64>, Fuzz_Testing_Message>(
  _protobuf_fieldNumber: 1034,
  fieldName: "fuzz.testing.repeated_uint64_ext"
)

public let Fuzz_Testing_Extensions_repeated_sint32_ext = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufSInt32>, Fuzz_Testing_Message>(
  _protobuf_fieldNumber: 1035,
  fieldName: "fuzz.testing.repeated_sint32_ext"
)

public let Fuzz_Testing_Extensions_repeated_sint64_ext = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufSInt64>, Fuzz_Testing_Message>(
  _protobuf_fieldNumber: 1036,
  fieldName: "fuzz.testing.repeated_sint64_ext"
)

public let Fuzz_Testing_Extensions_repeated_fixed32_ext = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufFixed32>, Fuzz_Testing_Message>(
  _protobuf_fieldNumber: 1037,
  fieldName: "fuzz.testing.repeated_fixed32_ext"
)

public let Fuzz_Testing_Extensions_repeated_fixed64_ext = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufFixed64>, Fuzz_Testing_Message>(
  _protobuf_fieldNumber: 1038,
  fieldName: "fuzz.testing.repeated_fixed64_ext"
)

public let Fuzz_Testing_Extensions_repeated_sfixed32_ext = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufSFixed32>, Fuzz_Testing_Message>(
  _protobuf_fieldNumber: 1039,
  fieldName: "fuzz.testing.repeated_sfixed32_ext"
)

public let Fuzz_Testing_Extensions_repeated_sfixed64_ext = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufSFixed64>, Fuzz_Testing_Message>(
  _protobuf_fieldNumber: 1040,
  fieldName: "fuzz.testing.repeated_sfixed64_ext"
)

public let Fuzz_Testing_Extensions_repeated_float_ext = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufFloat>, Fuzz_Testing_Message>(
  _protobuf_fieldNumber: 1041,
  fieldName: "fuzz.testing.repeated_float_ext"
)

public let Fuzz_Testing_Extensions_repeated_double_ext = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufDouble>, Fuzz_Testing_Message>(
  _protobuf_fieldNumber: 1042,
  fieldName: "fuzz.testing.repeated_double_ext"
)

public let Fuzz_Testing_Extensions_repeated_bool_ext = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufBool>, Fuzz_Testing_Message>(
  _protobuf_fieldNumber: 1043,
  fieldName: "fuzz.testing.repeated_bool_ext"
)

public let Fuzz_Testing_Extensions_repeated_string_ext = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufString>, Fuzz_Testing_Message>(
  _protobuf_fieldNumber: 1044,
  fieldName: "fuzz.testing.repeated_string_ext"
)

public let Fuzz_Testing_Extensions_repeated_bytes_ext = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufBytes>, Fuzz_Testing_Message>(
  _protobuf_fieldNumber: 1045,
  fieldName: "fuzz.testing.repeated_bytes_ext"
)

public let Fuzz_Testing_Extensions_repeated_enum_ext = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedEnumExtensionField<Fuzz_Testing_AnEnum>, Fuzz_Testing_Message>(
  _protobuf_fieldNumber: 1046,
  fieldName: "fuzz.testing.repeated_enum_ext"
)

public let Fuzz_Testing_Extensions_RepeatedGroup_ext = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedGroupExtensionField<Fuzz_Testing_RepeatedGroup_ext>, Fuzz_Testing_Message>(
  _protobuf_fieldNumber: 1047,
  fieldName: "fuzz.testing.repeatedgroup_ext"
)

public let Fuzz_Testing_Extensions_repeated_message_ext = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedMessageExtensionField<Fuzz_Testing_Message>, Fuzz_Testing_Message>(
  _protobuf_fieldNumber: 1049,
  fieldName: "fuzz.testing.repeated_message_ext"
)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "fuzz.testing"

extension Fuzz_Testing_AnEnum: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ZERO"),
    1: .same(proto: "ONE"),
    2: .same(proto: "TWO"),
    3: .same(proto: "THREE"),
  ]
}

extension Fuzz_Testing_Message: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Message"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "singular_int32"),
    2: .standard(proto: "singular_int64"),
    3: .standard(proto: "singular_uint32"),
    4: .standard(proto: "singular_uint64"),
    5: .standard(proto: "singular_sint32"),
    6: .standard(proto: "singular_sint64"),
    7: .standard(proto: "singular_fixed32"),
    8: .standard(proto: "singular_fixed64"),
    9: .standard(proto: "singular_sfixed32"),
    10: .standard(proto: "singular_sfixed64"),
    11: .standard(proto: "singular_float"),
    12: .standard(proto: "singular_double"),
    13: .standard(proto: "singular_bool"),
    14: .standard(proto: "singular_string"),
    15: .standard(proto: "singular_bytes"),
    16: .standard(proto: "singular_enum"),
    17: .unique(proto: "SingularGroup", json: "singulargroup"),
    19: .standard(proto: "singular_message"),
    31: .standard(proto: "repeated_int32"),
    32: .standard(proto: "repeated_int64"),
    33: .standard(proto: "repeated_uint32"),
    34: .standard(proto: "repeated_uint64"),
    35: .standard(proto: "repeated_sint32"),
    36: .standard(proto: "repeated_sint64"),
    37: .standard(proto: "repeated_fixed32"),
    38: .standard(proto: "repeated_fixed64"),
    39: .standard(proto: "repeated_sfixed32"),
    40: .standard(proto: "repeated_sfixed64"),
    41: .standard(proto: "repeated_float"),
    42: .standard(proto: "repeated_double"),
    43: .standard(proto: "repeated_bool"),
    44: .standard(proto: "repeated_string"),
    45: .standard(proto: "repeated_bytes"),
    46: .standard(proto: "repeated_enum"),
    47: .unique(proto: "RepeatedGroup", json: "repeatedgroup"),
    49: .standard(proto: "repeated_message"),
    61: .standard(proto: "oneof_int32"),
    62: .standard(proto: "oneof_int64"),
    63: .standard(proto: "oneof_uint32"),
    64: .standard(proto: "oneof_uint64"),
    65: .standard(proto: "oneof_sint32"),
    66: .standard(proto: "oneof_sint64"),
    67: .standard(proto: "oneof_fixed32"),
    68: .standard(proto: "oneof_fixed64"),
    69: .standard(proto: "oneof_sfixed32"),
    70: .standard(proto: "oneof_sfixed64"),
    71: .standard(proto: "oneof_float"),
    72: .standard(proto: "oneof_double"),
    73: .standard(proto: "oneof_bool"),
    74: .standard(proto: "oneof_string"),
    75: .standard(proto: "oneof_bytes"),
    76: .standard(proto: "oneof_enum"),
    77: .unique(proto: "OneofGroup", json: "oneofgroup"),
    79: .standard(proto: "oneof_message"),
    100: .standard(proto: "map_int32_int32"),
    101: .standard(proto: "map_int32_int64"),
    102: .standard(proto: "map_int32_uint32"),
    103: .standard(proto: "map_int32_uint64"),
    104: .standard(proto: "map_int32_sint32"),
    105: .standard(proto: "map_int32_sint64"),
    106: .standard(proto: "map_int32_fixed32"),
    107: .standard(proto: "map_int32_fixed64"),
    108: .standard(proto: "map_int32_sfixed32"),
    109: .standard(proto: "map_int32_sfixed64"),
    110: .standard(proto: "map_int32_float"),
    111: .standard(proto: "map_int32_double"),
    112: .standard(proto: "map_int32_bool"),
    113: .standard(proto: "map_int32_string"),
    114: .standard(proto: "map_int32_bytes"),
    115: .standard(proto: "map_int32_AnEnum"),
    116: .standard(proto: "map_int32_Message"),
    117: .standard(proto: "map_int64_int32"),
    118: .standard(proto: "map_int64_int64"),
    119: .standard(proto: "map_int64_uint32"),
    120: .standard(proto: "map_int64_uint64"),
    121: .standard(proto: "map_int64_sint32"),
    122: .standard(proto: "map_int64_sint64"),
    123: .standard(proto: "map_int64_fixed32"),
    124: .standard(proto: "map_int64_fixed64"),
    125: .standard(proto: "map_int64_sfixed32"),
    126: .standard(proto: "map_int64_sfixed64"),
    127: .standard(proto: "map_int64_float"),
    128: .standard(proto: "map_int64_double"),
    129: .standard(proto: "map_int64_bool"),
    130: .standard(proto: "map_int64_string"),
    131: .standard(proto: "map_int64_bytes"),
    132: .standard(proto: "map_int64_AnEnum"),
    133: .standard(proto: "map_int64_Message"),
    134: .standard(proto: "map_uint32_int32"),
    135: .standard(proto: "map_uint32_int64"),
    136: .standard(proto: "map_uint32_uint32"),
    137: .standard(proto: "map_uint32_uint64"),
    138: .standard(proto: "map_uint32_sint32"),
    139: .standard(proto: "map_uint32_sint64"),
    140: .standard(proto: "map_uint32_fixed32"),
    141: .standard(proto: "map_uint32_fixed64"),
    142: .standard(proto: "map_uint32_sfixed32"),
    143: .standard(proto: "map_uint32_sfixed64"),
    144: .standard(proto: "map_uint32_float"),
    145: .standard(proto: "map_uint32_double"),
    146: .standard(proto: "map_uint32_bool"),
    147: .standard(proto: "map_uint32_string"),
    148: .standard(proto: "map_uint32_bytes"),
    149: .standard(proto: "map_uint32_AnEnum"),
    150: .standard(proto: "map_uint32_Message"),
    151: .standard(proto: "map_uint64_int32"),
    152: .standard(proto: "map_uint64_int64"),
    153: .standard(proto: "map_uint64_uint32"),
    154: .standard(proto: "map_uint64_uint64"),
    155: .standard(proto: "map_uint64_sint32"),
    156: .standard(proto: "map_uint64_sint64"),
    157: .standard(proto: "map_uint64_fixed32"),
    158: .standard(proto: "map_uint64_fixed64"),
    159: .standard(proto: "map_uint64_sfixed32"),
    160: .standard(proto: "map_uint64_sfixed64"),
    161: .standard(proto: "map_uint64_float"),
    162: .standard(proto: "map_uint64_double"),
    163: .standard(proto: "map_uint64_bool"),
    164: .standard(proto: "map_uint64_string"),
    165: .standard(proto: "map_uint64_bytes"),
    166: .standard(proto: "map_uint64_AnEnum"),
    167: .standard(proto: "map_uint64_Message"),
    168: .standard(proto: "map_sint32_int32"),
    169: .standard(proto: "map_sint32_int64"),
    170: .standard(proto: "map_sint32_uint32"),
    171: .standard(proto: "map_sint32_uint64"),
    172: .standard(proto: "map_sint32_sint32"),
    173: .standard(proto: "map_sint32_sint64"),
    174: .standard(proto: "map_sint32_fixed32"),
    175: .standard(proto: "map_sint32_fixed64"),
    176: .standard(proto: "map_sint32_sfixed32"),
    177: .standard(proto: "map_sint32_sfixed64"),
    178: .standard(proto: "map_sint32_float"),
    179: .standard(proto: "map_sint32_double"),
    180: .standard(proto: "map_sint32_bool"),
    181: .standard(proto: "map_sint32_string"),
    182: .standard(proto: "map_sint32_bytes"),
    183: .standard(proto: "map_sint32_AnEnum"),
    184: .standard(proto: "map_sint32_Message"),
    185: .standard(proto: "map_sint64_int32"),
    186: .standard(proto: "map_sint64_int64"),
    187: .standard(proto: "map_sint64_uint32"),
    188: .standard(proto: "map_sint64_uint64"),
    189: .standard(proto: "map_sint64_sint32"),
    190: .standard(proto: "map_sint64_sint64"),
    191: .standard(proto: "map_sint64_fixed32"),
    192: .standard(proto: "map_sint64_fixed64"),
    193: .standard(proto: "map_sint64_sfixed32"),
    194: .standard(proto: "map_sint64_sfixed64"),
    195: .standard(proto: "map_sint64_float"),
    196: .standard(proto: "map_sint64_double"),
    197: .standard(proto: "map_sint64_bool"),
    198: .standard(proto: "map_sint64_string"),
    199: .standard(proto: "map_sint64_bytes"),
    200: .standard(proto: "map_sint64_AnEnum"),
    201: .standard(proto: "map_sint64_Message"),
    202: .standard(proto: "map_fixed32_int32"),
    203: .standard(proto: "map_fixed32_int64"),
    204: .standard(proto: "map_fixed32_uint32"),
    205: .standard(proto: "map_fixed32_uint64"),
    206: .standard(proto: "map_fixed32_sint32"),
    207: .standard(proto: "map_fixed32_sint64"),
    208: .standard(proto: "map_fixed32_fixed32"),
    209: .standard(proto: "map_fixed32_fixed64"),
    210: .standard(proto: "map_fixed32_sfixed32"),
    211: .standard(proto: "map_fixed32_sfixed64"),
    212: .standard(proto: "map_fixed32_float"),
    213: .standard(proto: "map_fixed32_double"),
    214: .standard(proto: "map_fixed32_bool"),
    215: .standard(proto: "map_fixed32_string"),
    216: .standard(proto: "map_fixed32_bytes"),
    217: .standard(proto: "map_fixed32_AnEnum"),
    218: .standard(proto: "map_fixed32_Message"),
    219: .standard(proto: "map_fixed64_int32"),
    220: .standard(proto: "map_fixed64_int64"),
    221: .standard(proto: "map_fixed64_uint32"),
    222: .standard(proto: "map_fixed64_uint64"),
    223: .standard(proto: "map_fixed64_sint32"),
    224: .standard(proto: "map_fixed64_sint64"),
    225: .standard(proto: "map_fixed64_fixed32"),
    226: .standard(proto: "map_fixed64_fixed64"),
    227: .standard(proto: "map_fixed64_sfixed32"),
    228: .standard(proto: "map_fixed64_sfixed64"),
    229: .standard(proto: "map_fixed64_float"),
    230: .standard(proto: "map_fixed64_double"),
    231: .standard(proto: "map_fixed64_bool"),
    232: .standard(proto: "map_fixed64_string"),
    233: .standard(proto: "map_fixed64_bytes"),
    234: .standard(proto: "map_fixed64_AnEnum"),
    235: .standard(proto: "map_fixed64_Message"),
    236: .standard(proto: "map_sfixed32_int32"),
    237: .standard(proto: "map_sfixed32_int64"),
    238: .standard(proto: "map_sfixed32_uint32"),
    239: .standard(proto: "map_sfixed32_uint64"),
    240: .standard(proto: "map_sfixed32_sint32"),
    241: .standard(proto: "map_sfixed32_sint64"),
    242: .standard(proto: "map_sfixed32_fixed32"),
    243: .standard(proto: "map_sfixed32_fixed64"),
    244: .standard(proto: "map_sfixed32_sfixed32"),
    245: .standard(proto: "map_sfixed32_sfixed64"),
    246: .standard(proto: "map_sfixed32_float"),
    247: .standard(proto: "map_sfixed32_double"),
    248: .standard(proto: "map_sfixed32_bool"),
    249: .standard(proto: "map_sfixed32_string"),
    250: .standard(proto: "map_sfixed32_bytes"),
    251: .standard(proto: "map_sfixed32_AnEnum"),
    252: .standard(proto: "map_sfixed32_Message"),
    253: .standard(proto: "map_sfixed64_int32"),
    254: .standard(proto: "map_sfixed64_int64"),
    255: .standard(proto: "map_sfixed64_uint32"),
    256: .standard(proto: "map_sfixed64_uint64"),
    257: .standard(proto: "map_sfixed64_sint32"),
    258: .standard(proto: "map_sfixed64_sint64"),
    259: .standard(proto: "map_sfixed64_fixed32"),
    260: .standard(proto: "map_sfixed64_fixed64"),
    261: .standard(proto: "map_sfixed64_sfixed32"),
    262: .standard(proto: "map_sfixed64_sfixed64"),
    263: .standard(proto: "map_sfixed64_float"),
    264: .standard(proto: "map_sfixed64_double"),
    265: .standard(proto: "map_sfixed64_bool"),
    266: .standard(proto: "map_sfixed64_string"),
    267: .standard(proto: "map_sfixed64_bytes"),
    268: .standard(proto: "map_sfixed64_AnEnum"),
    269: .standard(proto: "map_sfixed64_Message"),
    270: .standard(proto: "map_bool_int32"),
    271: .standard(proto: "map_bool_int64"),
    272: .standard(proto: "map_bool_uint32"),
    273: .standard(proto: "map_bool_uint64"),
    274: .standard(proto: "map_bool_sint32"),
    275: .standard(proto: "map_bool_sint64"),
    276: .standard(proto: "map_bool_fixed32"),
    277: .standard(proto: "map_bool_fixed64"),
    278: .standard(proto: "map_bool_sfixed32"),
    279: .standard(proto: "map_bool_sfixed64"),
    280: .standard(proto: "map_bool_float"),
    281: .standard(proto: "map_bool_double"),
    282: .standard(proto: "map_bool_bool"),
    283: .standard(proto: "map_bool_string"),
    284: .standard(proto: "map_bool_bytes"),
    285: .standard(proto: "map_bool_AnEnum"),
    286: .standard(proto: "map_bool_Message"),
    500: .standard(proto: "wkt_any"),
    501: .standard(proto: "wkt_api"),
    502: .standard(proto: "wkt_duration"),
    503: .standard(proto: "wkt_empty"),
    504: .standard(proto: "wkt_field_mask"),
    505: .standard(proto: "wkt_source_context"),
    506: .standard(proto: "wkt_struct"),
    507: .standard(proto: "wkt_timestamp"),
    508: .standard(proto: "wkt_type"),
    509: .standard(proto: "wkt_double_value"),
    510: .standard(proto: "wkt_float_value"),
    511: .standard(proto: "wkt_int64_value"),
    512: .standard(proto: "wkt_uint64_value"),
    513: .standard(proto: "wkt_int32_value"),
    514: .standard(proto: "wkt_uint32_value"),
    515: .standard(proto: "wkt_bool_value"),
    516: .standard(proto: "wkt_string_value"),
    517: .standard(proto: "wkt_bytes_value"),
  ]

  fileprivate class _StorageClass {
    var _singularInt32: Int32? = nil
    var _singularInt64: Int64? = nil
    var _singularUint32: UInt32? = nil
    var _singularUint64: UInt64? = nil
    var _singularSint32: Int32? = nil
    var _singularSint64: Int64? = nil
    var _singularFixed32: UInt32? = nil
    var _singularFixed64: UInt64? = nil
    var _singularSfixed32: Int32? = nil
    var _singularSfixed64: Int64? = nil
    var _singularFloat: Float? = nil
    var _singularDouble: Double? = nil
    var _singularBool: Bool? = nil
    var _singularString: String? = nil
    var _singularBytes: Data? = nil
    var _singularEnum: Fuzz_Testing_AnEnum? = nil
    var _singularGroup: Fuzz_Testing_Message.SingularGroup? = nil
    var _singularMessage: Fuzz_Testing_Message? = nil
    var _repeatedInt32: [Int32] = []
    var _repeatedInt64: [Int64] = []
    var _repeatedUint32: [UInt32] = []
    var _repeatedUint64: [UInt64] = []
    var _repeatedSint32: [Int32] = []
    var _repeatedSint64: [Int64] = []
    var _repeatedFixed32: [UInt32] = []
    var _repeatedFixed64: [UInt64] = []
    var _repeatedSfixed32: [Int32] = []
    var _repeatedSfixed64: [Int64] = []
    var _repeatedFloat: [Float] = []
    var _repeatedDouble: [Double] = []
    var _repeatedBool: [Bool] = []
    var _repeatedString: [String] = []
    var _repeatedBytes: [Data] = []
    var _repeatedEnum: [Fuzz_Testing_AnEnum] = []
    var _repeatedGroup: [Fuzz_Testing_Message.RepeatedGroup] = []
    var _repeatedMessage: [Fuzz_Testing_Message] = []
    var _o: Fuzz_Testing_Message.OneOf_O?
    var _mapInt32Int32: Dictionary<Int32,Int32> = [:]
    var _mapInt32Int64: Dictionary<Int32,Int64> = [:]
    var _mapInt32Uint32: Dictionary<Int32,UInt32> = [:]
    var _mapInt32Uint64: Dictionary<Int32,UInt64> = [:]
    var _mapInt32Sint32: Dictionary<Int32,Int32> = [:]
    var _mapInt32Sint64: Dictionary<Int32,Int64> = [:]
    var _mapInt32Fixed32: Dictionary<Int32,UInt32> = [:]
    var _mapInt32Fixed64: Dictionary<Int32,UInt64> = [:]
    var _mapInt32Sfixed32: Dictionary<Int32,Int32> = [:]
    var _mapInt32Sfixed64: Dictionary<Int32,Int64> = [:]
    var _mapInt32Float: Dictionary<Int32,Float> = [:]
    var _mapInt32Double: Dictionary<Int32,Double> = [:]
    var _mapInt32Bool: Dictionary<Int32,Bool> = [:]
    var _mapInt32String: Dictionary<Int32,String> = [:]
    var _mapInt32Bytes: Dictionary<Int32,Data> = [:]
    var _mapInt32AnEnum: Dictionary<Int32,Fuzz_Testing_AnEnum> = [:]
    var _mapInt32Message: Dictionary<Int32,Fuzz_Testing_Message> = [:]
    var _mapInt64Int32: Dictionary<Int64,Int32> = [:]
    var _mapInt64Int64: Dictionary<Int64,Int64> = [:]
    var _mapInt64Uint32: Dictionary<Int64,UInt32> = [:]
    var _mapInt64Uint64: Dictionary<Int64,UInt64> = [:]
    var _mapInt64Sint32: Dictionary<Int64,Int32> = [:]
    var _mapInt64Sint64: Dictionary<Int64,Int64> = [:]
    var _mapInt64Fixed32: Dictionary<Int64,UInt32> = [:]
    var _mapInt64Fixed64: Dictionary<Int64,UInt64> = [:]
    var _mapInt64Sfixed32: Dictionary<Int64,Int32> = [:]
    var _mapInt64Sfixed64: Dictionary<Int64,Int64> = [:]
    var _mapInt64Float: Dictionary<Int64,Float> = [:]
    var _mapInt64Double: Dictionary<Int64,Double> = [:]
    var _mapInt64Bool: Dictionary<Int64,Bool> = [:]
    var _mapInt64String: Dictionary<Int64,String> = [:]
    var _mapInt64Bytes: Dictionary<Int64,Data> = [:]
    var _mapInt64AnEnum: Dictionary<Int64,Fuzz_Testing_AnEnum> = [:]
    var _mapInt64Message: Dictionary<Int64,Fuzz_Testing_Message> = [:]
    var _mapUint32Int32: Dictionary<UInt32,Int32> = [:]
    var _mapUint32Int64: Dictionary<UInt32,Int64> = [:]
    var _mapUint32Uint32: Dictionary<UInt32,UInt32> = [:]
    var _mapUint32Uint64: Dictionary<UInt32,UInt64> = [:]
    var _mapUint32Sint32: Dictionary<UInt32,Int32> = [:]
    var _mapUint32Sint64: Dictionary<UInt32,Int64> = [:]
    var _mapUint32Fixed32: Dictionary<UInt32,UInt32> = [:]
    var _mapUint32Fixed64: Dictionary<UInt32,UInt64> = [:]
    var _mapUint32Sfixed32: Dictionary<UInt32,Int32> = [:]
    var _mapUint32Sfixed64: Dictionary<UInt32,Int64> = [:]
    var _mapUint32Float: Dictionary<UInt32,Float> = [:]
    var _mapUint32Double: Dictionary<UInt32,Double> = [:]
    var _mapUint32Bool: Dictionary<UInt32,Bool> = [:]
    var _mapUint32String: Dictionary<UInt32,String> = [:]
    var _mapUint32Bytes: Dictionary<UInt32,Data> = [:]
    var _mapUint32AnEnum: Dictionary<UInt32,Fuzz_Testing_AnEnum> = [:]
    var _mapUint32Message: Dictionary<UInt32,Fuzz_Testing_Message> = [:]
    var _mapUint64Int32: Dictionary<UInt64,Int32> = [:]
    var _mapUint64Int64: Dictionary<UInt64,Int64> = [:]
    var _mapUint64Uint32: Dictionary<UInt64,UInt32> = [:]
    var _mapUint64Uint64: Dictionary<UInt64,UInt64> = [:]
    var _mapUint64Sint32: Dictionary<UInt64,Int32> = [:]
    var _mapUint64Sint64: Dictionary<UInt64,Int64> = [:]
    var _mapUint64Fixed32: Dictionary<UInt64,UInt32> = [:]
    var _mapUint64Fixed64: Dictionary<UInt64,UInt64> = [:]
    var _mapUint64Sfixed32: Dictionary<UInt64,Int32> = [:]
    var _mapUint64Sfixed64: Dictionary<UInt64,Int64> = [:]
    var _mapUint64Float: Dictionary<UInt64,Float> = [:]
    var _mapUint64Double: Dictionary<UInt64,Double> = [:]
    var _mapUint64Bool: Dictionary<UInt64,Bool> = [:]
    var _mapUint64String: Dictionary<UInt64,String> = [:]
    var _mapUint64Bytes: Dictionary<UInt64,Data> = [:]
    var _mapUint64AnEnum: Dictionary<UInt64,Fuzz_Testing_AnEnum> = [:]
    var _mapUint64Message: Dictionary<UInt64,Fuzz_Testing_Message> = [:]
    var _mapSint32Int32: Dictionary<Int32,Int32> = [:]
    var _mapSint32Int64: Dictionary<Int32,Int64> = [:]
    var _mapSint32Uint32: Dictionary<Int32,UInt32> = [:]
    var _mapSint32Uint64: Dictionary<Int32,UInt64> = [:]
    var _mapSint32Sint32: Dictionary<Int32,Int32> = [:]
    var _mapSint32Sint64: Dictionary<Int32,Int64> = [:]
    var _mapSint32Fixed32: Dictionary<Int32,UInt32> = [:]
    var _mapSint32Fixed64: Dictionary<Int32,UInt64> = [:]
    var _mapSint32Sfixed32: Dictionary<Int32,Int32> = [:]
    var _mapSint32Sfixed64: Dictionary<Int32,Int64> = [:]
    var _mapSint32Float: Dictionary<Int32,Float> = [:]
    var _mapSint32Double: Dictionary<Int32,Double> = [:]
    var _mapSint32Bool: Dictionary<Int32,Bool> = [:]
    var _mapSint32String: Dictionary<Int32,String> = [:]
    var _mapSint32Bytes: Dictionary<Int32,Data> = [:]
    var _mapSint32AnEnum: Dictionary<Int32,Fuzz_Testing_AnEnum> = [:]
    var _mapSint32Message: Dictionary<Int32,Fuzz_Testing_Message> = [:]
    var _mapSint64Int32: Dictionary<Int64,Int32> = [:]
    var _mapSint64Int64: Dictionary<Int64,Int64> = [:]
    var _mapSint64Uint32: Dictionary<Int64,UInt32> = [:]
    var _mapSint64Uint64: Dictionary<Int64,UInt64> = [:]
    var _mapSint64Sint32: Dictionary<Int64,Int32> = [:]
    var _mapSint64Sint64: Dictionary<Int64,Int64> = [:]
    var _mapSint64Fixed32: Dictionary<Int64,UInt32> = [:]
    var _mapSint64Fixed64: Dictionary<Int64,UInt64> = [:]
    var _mapSint64Sfixed32: Dictionary<Int64,Int32> = [:]
    var _mapSint64Sfixed64: Dictionary<Int64,Int64> = [:]
    var _mapSint64Float: Dictionary<Int64,Float> = [:]
    var _mapSint64Double: Dictionary<Int64,Double> = [:]
    var _mapSint64Bool: Dictionary<Int64,Bool> = [:]
    var _mapSint64String: Dictionary<Int64,String> = [:]
    var _mapSint64Bytes: Dictionary<Int64,Data> = [:]
    var _mapSint64AnEnum: Dictionary<Int64,Fuzz_Testing_AnEnum> = [:]
    var _mapSint64Message: Dictionary<Int64,Fuzz_Testing_Message> = [:]
    var _mapFixed32Int32: Dictionary<UInt32,Int32> = [:]
    var _mapFixed32Int64: Dictionary<UInt32,Int64> = [:]
    var _mapFixed32Uint32: Dictionary<UInt32,UInt32> = [:]
    var _mapFixed32Uint64: Dictionary<UInt32,UInt64> = [:]
    var _mapFixed32Sint32: Dictionary<UInt32,Int32> = [:]
    var _mapFixed32Sint64: Dictionary<UInt32,Int64> = [:]
    var _mapFixed32Fixed32: Dictionary<UInt32,UInt32> = [:]
    var _mapFixed32Fixed64: Dictionary<UInt32,UInt64> = [:]
    var _mapFixed32Sfixed32: Dictionary<UInt32,Int32> = [:]
    var _mapFixed32Sfixed64: Dictionary<UInt32,Int64> = [:]
    var _mapFixed32Float: Dictionary<UInt32,Float> = [:]
    var _mapFixed32Double: Dictionary<UInt32,Double> = [:]
    var _mapFixed32Bool: Dictionary<UInt32,Bool> = [:]
    var _mapFixed32String: Dictionary<UInt32,String> = [:]
    var _mapFixed32Bytes: Dictionary<UInt32,Data> = [:]
    var _mapFixed32AnEnum: Dictionary<UInt32,Fuzz_Testing_AnEnum> = [:]
    var _mapFixed32Message: Dictionary<UInt32,Fuzz_Testing_Message> = [:]
    var _mapFixed64Int32: Dictionary<UInt64,Int32> = [:]
    var _mapFixed64Int64: Dictionary<UInt64,Int64> = [:]
    var _mapFixed64Uint32: Dictionary<UInt64,UInt32> = [:]
    var _mapFixed64Uint64: Dictionary<UInt64,UInt64> = [:]
    var _mapFixed64Sint32: Dictionary<UInt64,Int32> = [:]
    var _mapFixed64Sint64: Dictionary<UInt64,Int64> = [:]
    var _mapFixed64Fixed32: Dictionary<UInt64,UInt32> = [:]
    var _mapFixed64Fixed64: Dictionary<UInt64,UInt64> = [:]
    var _mapFixed64Sfixed32: Dictionary<UInt64,Int32> = [:]
    var _mapFixed64Sfixed64: Dictionary<UInt64,Int64> = [:]
    var _mapFixed64Float: Dictionary<UInt64,Float> = [:]
    var _mapFixed64Double: Dictionary<UInt64,Double> = [:]
    var _mapFixed64Bool: Dictionary<UInt64,Bool> = [:]
    var _mapFixed64String: Dictionary<UInt64,String> = [:]
    var _mapFixed64Bytes: Dictionary<UInt64,Data> = [:]
    var _mapFixed64AnEnum: Dictionary<UInt64,Fuzz_Testing_AnEnum> = [:]
    var _mapFixed64Message: Dictionary<UInt64,Fuzz_Testing_Message> = [:]
    var _mapSfixed32Int32: Dictionary<Int32,Int32> = [:]
    var _mapSfixed32Int64: Dictionary<Int32,Int64> = [:]
    var _mapSfixed32Uint32: Dictionary<Int32,UInt32> = [:]
    var _mapSfixed32Uint64: Dictionary<Int32,UInt64> = [:]
    var _mapSfixed32Sint32: Dictionary<Int32,Int32> = [:]
    var _mapSfixed32Sint64: Dictionary<Int32,Int64> = [:]
    var _mapSfixed32Fixed32: Dictionary<Int32,UInt32> = [:]
    var _mapSfixed32Fixed64: Dictionary<Int32,UInt64> = [:]
    var _mapSfixed32Sfixed32: Dictionary<Int32,Int32> = [:]
    var _mapSfixed32Sfixed64: Dictionary<Int32,Int64> = [:]
    var _mapSfixed32Float: Dictionary<Int32,Float> = [:]
    var _mapSfixed32Double: Dictionary<Int32,Double> = [:]
    var _mapSfixed32Bool: Dictionary<Int32,Bool> = [:]
    var _mapSfixed32String: Dictionary<Int32,String> = [:]
    var _mapSfixed32Bytes: Dictionary<Int32,Data> = [:]
    var _mapSfixed32AnEnum: Dictionary<Int32,Fuzz_Testing_AnEnum> = [:]
    var _mapSfixed32Message: Dictionary<Int32,Fuzz_Testing_Message> = [:]
    var _mapSfixed64Int32: Dictionary<Int64,Int32> = [:]
    var _mapSfixed64Int64: Dictionary<Int64,Int64> = [:]
    var _mapSfixed64Uint32: Dictionary<Int64,UInt32> = [:]
    var _mapSfixed64Uint64: Dictionary<Int64,UInt64> = [:]
    var _mapSfixed64Sint32: Dictionary<Int64,Int32> = [:]
    var _mapSfixed64Sint64: Dictionary<Int64,Int64> = [:]
    var _mapSfixed64Fixed32: Dictionary<Int64,UInt32> = [:]
    var _mapSfixed64Fixed64: Dictionary<Int64,UInt64> = [:]
    var _mapSfixed64Sfixed32: Dictionary<Int64,Int32> = [:]
    var _mapSfixed64Sfixed64: Dictionary<Int64,Int64> = [:]
    var _mapSfixed64Float: Dictionary<Int64,Float> = [:]
    var _mapSfixed64Double: Dictionary<Int64,Double> = [:]
    var _mapSfixed64Bool: Dictionary<Int64,Bool> = [:]
    var _mapSfixed64String: Dictionary<Int64,String> = [:]
    var _mapSfixed64Bytes: Dictionary<Int64,Data> = [:]
    var _mapSfixed64AnEnum: Dictionary<Int64,Fuzz_Testing_AnEnum> = [:]
    var _mapSfixed64Message: Dictionary<Int64,Fuzz_Testing_Message> = [:]
    var _mapBoolInt32: Dictionary<Bool,Int32> = [:]
    var _mapBoolInt64: Dictionary<Bool,Int64> = [:]
    var _mapBoolUint32: Dictionary<Bool,UInt32> = [:]
    var _mapBoolUint64: Dictionary<Bool,UInt64> = [:]
    var _mapBoolSint32: Dictionary<Bool,Int32> = [:]
    var _mapBoolSint64: Dictionary<Bool,Int64> = [:]
    var _mapBoolFixed32: Dictionary<Bool,UInt32> = [:]
    var _mapBoolFixed64: Dictionary<Bool,UInt64> = [:]
    var _mapBoolSfixed32: Dictionary<Bool,Int32> = [:]
    var _mapBoolSfixed64: Dictionary<Bool,Int64> = [:]
    var _mapBoolFloat: Dictionary<Bool,Float> = [:]
    var _mapBoolDouble: Dictionary<Bool,Double> = [:]
    var _mapBoolBool: Dictionary<Bool,Bool> = [:]
    var _mapBoolString: Dictionary<Bool,String> = [:]
    var _mapBoolBytes: Dictionary<Bool,Data> = [:]
    var _mapBoolAnEnum: Dictionary<Bool,Fuzz_Testing_AnEnum> = [:]
    var _mapBoolMessage: Dictionary<Bool,Fuzz_Testing_Message> = [:]
    var _wktAny: SwiftProtobuf.Google_Protobuf_Any? = nil
    var _wktApi: SwiftProtobuf.Google_Protobuf_Api? = nil
    var _wktDuration: SwiftProtobuf.Google_Protobuf_Duration? = nil
    var _wktEmpty: SwiftProtobuf.Google_Protobuf_Empty? = nil
    var _wktFieldMask: SwiftProtobuf.Google_Protobuf_FieldMask? = nil
    var _wktSourceContext: SwiftProtobuf.Google_Protobuf_SourceContext? = nil
    var _wktStruct: SwiftProtobuf.Google_Protobuf_Struct? = nil
    var _wktTimestamp: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _wktType: SwiftProtobuf.Google_Protobuf_Type? = nil
    var _wktDoubleValue: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
    var _wktFloatValue: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _wktInt64Value: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
    var _wktUint64Value: SwiftProtobuf.Google_Protobuf_UInt64Value? = nil
    var _wktInt32Value: SwiftProtobuf.Google_Protobuf_Int32Value? = nil
    var _wktUint32Value: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _wktBoolValue: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _wktStringValue: SwiftProtobuf.Google_Protobuf_StringValue? = nil
    var _wktBytesValue: SwiftProtobuf.Google_Protobuf_BytesValue? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _singularInt32 = source._singularInt32
      _singularInt64 = source._singularInt64
      _singularUint32 = source._singularUint32
      _singularUint64 = source._singularUint64
      _singularSint32 = source._singularSint32
      _singularSint64 = source._singularSint64
      _singularFixed32 = source._singularFixed32
      _singularFixed64 = source._singularFixed64
      _singularSfixed32 = source._singularSfixed32
      _singularSfixed64 = source._singularSfixed64
      _singularFloat = source._singularFloat
      _singularDouble = source._singularDouble
      _singularBool = source._singularBool
      _singularString = source._singularString
      _singularBytes = source._singularBytes
      _singularEnum = source._singularEnum
      _singularGroup = source._singularGroup
      _singularMessage = source._singularMessage
      _repeatedInt32 = source._repeatedInt32
      _repeatedInt64 = source._repeatedInt64
      _repeatedUint32 = source._repeatedUint32
      _repeatedUint64 = source._repeatedUint64
      _repeatedSint32 = source._repeatedSint32
      _repeatedSint64 = source._repeatedSint64
      _repeatedFixed32 = source._repeatedFixed32
      _repeatedFixed64 = source._repeatedFixed64
      _repeatedSfixed32 = source._repeatedSfixed32
      _repeatedSfixed64 = source._repeatedSfixed64
      _repeatedFloat = source._repeatedFloat
      _repeatedDouble = source._repeatedDouble
      _repeatedBool = source._repeatedBool
      _repeatedString = source._repeatedString
      _repeatedBytes = source._repeatedBytes
      _repeatedEnum = source._repeatedEnum
      _repeatedGroup = source._repeatedGroup
      _repeatedMessage = source._repeatedMessage
      _o = source._o
      _mapInt32Int32 = source._mapInt32Int32
      _mapInt32Int64 = source._mapInt32Int64
      _mapInt32Uint32 = source._mapInt32Uint32
      _mapInt32Uint64 = source._mapInt32Uint64
      _mapInt32Sint32 = source._mapInt32Sint32
      _mapInt32Sint64 = source._mapInt32Sint64
      _mapInt32Fixed32 = source._mapInt32Fixed32
      _mapInt32Fixed64 = source._mapInt32Fixed64
      _mapInt32Sfixed32 = source._mapInt32Sfixed32
      _mapInt32Sfixed64 = source._mapInt32Sfixed64
      _mapInt32Float = source._mapInt32Float
      _mapInt32Double = source._mapInt32Double
      _mapInt32Bool = source._mapInt32Bool
      _mapInt32String = source._mapInt32String
      _mapInt32Bytes = source._mapInt32Bytes
      _mapInt32AnEnum = source._mapInt32AnEnum
      _mapInt32Message = source._mapInt32Message
      _mapInt64Int32 = source._mapInt64Int32
      _mapInt64Int64 = source._mapInt64Int64
      _mapInt64Uint32 = source._mapInt64Uint32
      _mapInt64Uint64 = source._mapInt64Uint64
      _mapInt64Sint32 = source._mapInt64Sint32
      _mapInt64Sint64 = source._mapInt64Sint64
      _mapInt64Fixed32 = source._mapInt64Fixed32
      _mapInt64Fixed64 = source._mapInt64Fixed64
      _mapInt64Sfixed32 = source._mapInt64Sfixed32
      _mapInt64Sfixed64 = source._mapInt64Sfixed64
      _mapInt64Float = source._mapInt64Float
      _mapInt64Double = source._mapInt64Double
      _mapInt64Bool = source._mapInt64Bool
      _mapInt64String = source._mapInt64String
      _mapInt64Bytes = source._mapInt64Bytes
      _mapInt64AnEnum = source._mapInt64AnEnum
      _mapInt64Message = source._mapInt64Message
      _mapUint32Int32 = source._mapUint32Int32
      _mapUint32Int64 = source._mapUint32Int64
      _mapUint32Uint32 = source._mapUint32Uint32
      _mapUint32Uint64 = source._mapUint32Uint64
      _mapUint32Sint32 = source._mapUint32Sint32
      _mapUint32Sint64 = source._mapUint32Sint64
      _mapUint32Fixed32 = source._mapUint32Fixed32
      _mapUint32Fixed64 = source._mapUint32Fixed64
      _mapUint32Sfixed32 = source._mapUint32Sfixed32
      _mapUint32Sfixed64 = source._mapUint32Sfixed64
      _mapUint32Float = source._mapUint32Float
      _mapUint32Double = source._mapUint32Double
      _mapUint32Bool = source._mapUint32Bool
      _mapUint32String = source._mapUint32String
      _mapUint32Bytes = source._mapUint32Bytes
      _mapUint32AnEnum = source._mapUint32AnEnum
      _mapUint32Message = source._mapUint32Message
      _mapUint64Int32 = source._mapUint64Int32
      _mapUint64Int64 = source._mapUint64Int64
      _mapUint64Uint32 = source._mapUint64Uint32
      _mapUint64Uint64 = source._mapUint64Uint64
      _mapUint64Sint32 = source._mapUint64Sint32
      _mapUint64Sint64 = source._mapUint64Sint64
      _mapUint64Fixed32 = source._mapUint64Fixed32
      _mapUint64Fixed64 = source._mapUint64Fixed64
      _mapUint64Sfixed32 = source._mapUint64Sfixed32
      _mapUint64Sfixed64 = source._mapUint64Sfixed64
      _mapUint64Float = source._mapUint64Float
      _mapUint64Double = source._mapUint64Double
      _mapUint64Bool = source._mapUint64Bool
      _mapUint64String = source._mapUint64String
      _mapUint64Bytes = source._mapUint64Bytes
      _mapUint64AnEnum = source._mapUint64AnEnum
      _mapUint64Message = source._mapUint64Message
      _mapSint32Int32 = source._mapSint32Int32
      _mapSint32Int64 = source._mapSint32Int64
      _mapSint32Uint32 = source._mapSint32Uint32
      _mapSint32Uint64 = source._mapSint32Uint64
      _mapSint32Sint32 = source._mapSint32Sint32
      _mapSint32Sint64 = source._mapSint32Sint64
      _mapSint32Fixed32 = source._mapSint32Fixed32
      _mapSint32Fixed64 = source._mapSint32Fixed64
      _mapSint32Sfixed32 = source._mapSint32Sfixed32
      _mapSint32Sfixed64 = source._mapSint32Sfixed64
      _mapSint32Float = source._mapSint32Float
      _mapSint32Double = source._mapSint32Double
      _mapSint32Bool = source._mapSint32Bool
      _mapSint32String = source._mapSint32String
      _mapSint32Bytes = source._mapSint32Bytes
      _mapSint32AnEnum = source._mapSint32AnEnum
      _mapSint32Message = source._mapSint32Message
      _mapSint64Int32 = source._mapSint64Int32
      _mapSint64Int64 = source._mapSint64Int64
      _mapSint64Uint32 = source._mapSint64Uint32
      _mapSint64Uint64 = source._mapSint64Uint64
      _mapSint64Sint32 = source._mapSint64Sint32
      _mapSint64Sint64 = source._mapSint64Sint64
      _mapSint64Fixed32 = source._mapSint64Fixed32
      _mapSint64Fixed64 = source._mapSint64Fixed64
      _mapSint64Sfixed32 = source._mapSint64Sfixed32
      _mapSint64Sfixed64 = source._mapSint64Sfixed64
      _mapSint64Float = source._mapSint64Float
      _mapSint64Double = source._mapSint64Double
      _mapSint64Bool = source._mapSint64Bool
      _mapSint64String = source._mapSint64String
      _mapSint64Bytes = source._mapSint64Bytes
      _mapSint64AnEnum = source._mapSint64AnEnum
      _mapSint64Message = source._mapSint64Message
      _mapFixed32Int32 = source._mapFixed32Int32
      _mapFixed32Int64 = source._mapFixed32Int64
      _mapFixed32Uint32 = source._mapFixed32Uint32
      _mapFixed32Uint64 = source._mapFixed32Uint64
      _mapFixed32Sint32 = source._mapFixed32Sint32
      _mapFixed32Sint64 = source._mapFixed32Sint64
      _mapFixed32Fixed32 = source._mapFixed32Fixed32
      _mapFixed32Fixed64 = source._mapFixed32Fixed64
      _mapFixed32Sfixed32 = source._mapFixed32Sfixed32
      _mapFixed32Sfixed64 = source._mapFixed32Sfixed64
      _mapFixed32Float = source._mapFixed32Float
      _mapFixed32Double = source._mapFixed32Double
      _mapFixed32Bool = source._mapFixed32Bool
      _mapFixed32String = source._mapFixed32String
      _mapFixed32Bytes = source._mapFixed32Bytes
      _mapFixed32AnEnum = source._mapFixed32AnEnum
      _mapFixed32Message = source._mapFixed32Message
      _mapFixed64Int32 = source._mapFixed64Int32
      _mapFixed64Int64 = source._mapFixed64Int64
      _mapFixed64Uint32 = source._mapFixed64Uint32
      _mapFixed64Uint64 = source._mapFixed64Uint64
      _mapFixed64Sint32 = source._mapFixed64Sint32
      _mapFixed64Sint64 = source._mapFixed64Sint64
      _mapFixed64Fixed32 = source._mapFixed64Fixed32
      _mapFixed64Fixed64 = source._mapFixed64Fixed64
      _mapFixed64Sfixed32 = source._mapFixed64Sfixed32
      _mapFixed64Sfixed64 = source._mapFixed64Sfixed64
      _mapFixed64Float = source._mapFixed64Float
      _mapFixed64Double = source._mapFixed64Double
      _mapFixed64Bool = source._mapFixed64Bool
      _mapFixed64String = source._mapFixed64String
      _mapFixed64Bytes = source._mapFixed64Bytes
      _mapFixed64AnEnum = source._mapFixed64AnEnum
      _mapFixed64Message = source._mapFixed64Message
      _mapSfixed32Int32 = source._mapSfixed32Int32
      _mapSfixed32Int64 = source._mapSfixed32Int64
      _mapSfixed32Uint32 = source._mapSfixed32Uint32
      _mapSfixed32Uint64 = source._mapSfixed32Uint64
      _mapSfixed32Sint32 = source._mapSfixed32Sint32
      _mapSfixed32Sint64 = source._mapSfixed32Sint64
      _mapSfixed32Fixed32 = source._mapSfixed32Fixed32
      _mapSfixed32Fixed64 = source._mapSfixed32Fixed64
      _mapSfixed32Sfixed32 = source._mapSfixed32Sfixed32
      _mapSfixed32Sfixed64 = source._mapSfixed32Sfixed64
      _mapSfixed32Float = source._mapSfixed32Float
      _mapSfixed32Double = source._mapSfixed32Double
      _mapSfixed32Bool = source._mapSfixed32Bool
      _mapSfixed32String = source._mapSfixed32String
      _mapSfixed32Bytes = source._mapSfixed32Bytes
      _mapSfixed32AnEnum = source._mapSfixed32AnEnum
      _mapSfixed32Message = source._mapSfixed32Message
      _mapSfixed64Int32 = source._mapSfixed64Int32
      _mapSfixed64Int64 = source._mapSfixed64Int64
      _mapSfixed64Uint32 = source._mapSfixed64Uint32
      _mapSfixed64Uint64 = source._mapSfixed64Uint64
      _mapSfixed64Sint32 = source._mapSfixed64Sint32
      _mapSfixed64Sint64 = source._mapSfixed64Sint64
      _mapSfixed64Fixed32 = source._mapSfixed64Fixed32
      _mapSfixed64Fixed64 = source._mapSfixed64Fixed64
      _mapSfixed64Sfixed32 = source._mapSfixed64Sfixed32
      _mapSfixed64Sfixed64 = source._mapSfixed64Sfixed64
      _mapSfixed64Float = source._mapSfixed64Float
      _mapSfixed64Double = source._mapSfixed64Double
      _mapSfixed64Bool = source._mapSfixed64Bool
      _mapSfixed64String = source._mapSfixed64String
      _mapSfixed64Bytes = source._mapSfixed64Bytes
      _mapSfixed64AnEnum = source._mapSfixed64AnEnum
      _mapSfixed64Message = source._mapSfixed64Message
      _mapBoolInt32 = source._mapBoolInt32
      _mapBoolInt64 = source._mapBoolInt64
      _mapBoolUint32 = source._mapBoolUint32
      _mapBoolUint64 = source._mapBoolUint64
      _mapBoolSint32 = source._mapBoolSint32
      _mapBoolSint64 = source._mapBoolSint64
      _mapBoolFixed32 = source._mapBoolFixed32
      _mapBoolFixed64 = source._mapBoolFixed64
      _mapBoolSfixed32 = source._mapBoolSfixed32
      _mapBoolSfixed64 = source._mapBoolSfixed64
      _mapBoolFloat = source._mapBoolFloat
      _mapBoolDouble = source._mapBoolDouble
      _mapBoolBool = source._mapBoolBool
      _mapBoolString = source._mapBoolString
      _mapBoolBytes = source._mapBoolBytes
      _mapBoolAnEnum = source._mapBoolAnEnum
      _mapBoolMessage = source._mapBoolMessage
      _wktAny = source._wktAny
      _wktApi = source._wktApi
      _wktDuration = source._wktDuration
      _wktEmpty = source._wktEmpty
      _wktFieldMask = source._wktFieldMask
      _wktSourceContext = source._wktSourceContext
      _wktStruct = source._wktStruct
      _wktTimestamp = source._wktTimestamp
      _wktType = source._wktType
      _wktDoubleValue = source._wktDoubleValue
      _wktFloatValue = source._wktFloatValue
      _wktInt64Value = source._wktInt64Value
      _wktUint64Value = source._wktUint64Value
      _wktInt32Value = source._wktInt32Value
      _wktUint32Value = source._wktUint32Value
      _wktBoolValue = source._wktBoolValue
      _wktStringValue = source._wktStringValue
      _wktBytesValue = source._wktBytesValue
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._singularMessage, !v.isInitialized {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._repeatedMessage) {return false}
      if let v = _storage._o, !v.isInitialized {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._mapInt32Message) {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._mapInt64Message) {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._mapUint32Message) {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._mapUint64Message) {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._mapSint32Message) {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._mapSint64Message) {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._mapFixed32Message) {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._mapFixed64Message) {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._mapSfixed32Message) {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._mapSfixed64Message) {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._mapBoolMessage) {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularInt32Field(value: &_storage._singularInt32) }()
        case 2: try { try decoder.decodeSingularInt64Field(value: &_storage._singularInt64) }()
        case 3: try { try decoder.decodeSingularUInt32Field(value: &_storage._singularUint32) }()
        case 4: try { try decoder.decodeSingularUInt64Field(value: &_storage._singularUint64) }()
        case 5: try { try decoder.decodeSingularSInt32Field(value: &_storage._singularSint32) }()
        case 6: try { try decoder.decodeSingularSInt64Field(value: &_storage._singularSint64) }()
        case 7: try { try decoder.decodeSingularFixed32Field(value: &_storage._singularFixed32) }()
        case 8: try { try decoder.decodeSingularFixed64Field(value: &_storage._singularFixed64) }()
        case 9: try { try decoder.decodeSingularSFixed32Field(value: &_storage._singularSfixed32) }()
        case 10: try { try decoder.decodeSingularSFixed64Field(value: &_storage._singularSfixed64) }()
        case 11: try { try decoder.decodeSingularFloatField(value: &_storage._singularFloat) }()
        case 12: try { try decoder.decodeSingularDoubleField(value: &_storage._singularDouble) }()
        case 13: try { try decoder.decodeSingularBoolField(value: &_storage._singularBool) }()
        case 14: try { try decoder.decodeSingularStringField(value: &_storage._singularString) }()
        case 15: try { try decoder.decodeSingularBytesField(value: &_storage._singularBytes) }()
        case 16: try { try decoder.decodeSingularEnumField(value: &_storage._singularEnum) }()
        case 17: try { try decoder.decodeSingularGroupField(value: &_storage._singularGroup) }()
        case 19: try { try decoder.decodeSingularMessageField(value: &_storage._singularMessage) }()
        case 31: try { try decoder.decodeRepeatedInt32Field(value: &_storage._repeatedInt32) }()
        case 32: try { try decoder.decodeRepeatedInt64Field(value: &_storage._repeatedInt64) }()
        case 33: try { try decoder.decodeRepeatedUInt32Field(value: &_storage._repeatedUint32) }()
        case 34: try { try decoder.decodeRepeatedUInt64Field(value: &_storage._repeatedUint64) }()
        case 35: try { try decoder.decodeRepeatedSInt32Field(value: &_storage._repeatedSint32) }()
        case 36: try { try decoder.decodeRepeatedSInt64Field(value: &_storage._repeatedSint64) }()
        case 37: try { try decoder.decodeRepeatedFixed32Field(value: &_storage._repeatedFixed32) }()
        case 38: try { try decoder.decodeRepeatedFixed64Field(value: &_storage._repeatedFixed64) }()
        case 39: try { try decoder.decodeRepeatedSFixed32Field(value: &_storage._repeatedSfixed32) }()
        case 40: try { try decoder.decodeRepeatedSFixed64Field(value: &_storage._repeatedSfixed64) }()
        case 41: try { try decoder.decodeRepeatedFloatField(value: &_storage._repeatedFloat) }()
        case 42: try { try decoder.decodeRepeatedDoubleField(value: &_storage._repeatedDouble) }()
        case 43: try { try decoder.decodeRepeatedBoolField(value: &_storage._repeatedBool) }()
        case 44: try { try decoder.decodeRepeatedStringField(value: &_storage._repeatedString) }()
        case 45: try { try decoder.decodeRepeatedBytesField(value: &_storage._repeatedBytes) }()
        case 46: try { try decoder.decodeRepeatedEnumField(value: &_storage._repeatedEnum) }()
        case 47: try { try decoder.decodeRepeatedGroupField(value: &_storage._repeatedGroup) }()
        case 49: try { try decoder.decodeRepeatedMessageField(value: &_storage._repeatedMessage) }()
        case 61: try {
          var v: Int32?
          try decoder.decodeSingularInt32Field(value: &v)
          if let v = v {
            if _storage._o != nil {try decoder.handleConflictingOneOf()}
            _storage._o = .oneofInt32(v)
          }
        }()
        case 62: try {
          var v: Int64?
          try decoder.decodeSingularInt64Field(value: &v)
          if let v = v {
            if _storage._o != nil {try decoder.handleConflictingOneOf()}
            _storage._o = .oneofInt64(v)
          }
        }()
        case 63: try {
          var v: UInt32?
          try decoder.decodeSingularUInt32Field(value: &v)
          if let v = v {
            if _storage._o != nil {try decoder.handleConflictingOneOf()}
            _storage._o = .oneofUint32(v)
          }
        }()
        case 64: try {
          var v: UInt64?
          try decoder.decodeSingularUInt64Field(value: &v)
          if let v = v {
            if _storage._o != nil {try decoder.handleConflictingOneOf()}
            _storage._o = .oneofUint64(v)
          }
        }()
        case 65: try {
          var v: Int32?
          try decoder.decodeSingularSInt32Field(value: &v)
          if let v = v {
            if _storage._o != nil {try decoder.handleConflictingOneOf()}
            _storage._o = .oneofSint32(v)
          }
        }()
        case 66: try {
          var v: Int64?
          try decoder.decodeSingularSInt64Field(value: &v)
          if let v = v {
            if _storage._o != nil {try decoder.handleConflictingOneOf()}
            _storage._o = .oneofSint64(v)
          }
        }()
        case 67: try {
          var v: UInt32?
          try decoder.decodeSingularFixed32Field(value: &v)
          if let v = v {
            if _storage._o != nil {try decoder.handleConflictingOneOf()}
            _storage._o = .oneofFixed32(v)
          }
        }()
        case 68: try {
          var v: UInt64?
          try decoder.decodeSingularFixed64Field(value: &v)
          if let v = v {
            if _storage._o != nil {try decoder.handleConflictingOneOf()}
            _storage._o = .oneofFixed64(v)
          }
        }()
        case 69: try {
          var v: Int32?
          try decoder.decodeSingularSFixed32Field(value: &v)
          if let v = v {
            if _storage._o != nil {try decoder.handleConflictingOneOf()}
            _storage._o = .oneofSfixed32(v)
          }
        }()
        case 70: try {
          var v: Int64?
          try decoder.decodeSingularSFixed64Field(value: &v)
          if let v = v {
            if _storage._o != nil {try decoder.handleConflictingOneOf()}
            _storage._o = .oneofSfixed64(v)
          }
        }()
        case 71: try {
          var v: Float?
          try decoder.decodeSingularFloatField(value: &v)
          if let v = v {
            if _storage._o != nil {try decoder.handleConflictingOneOf()}
            _storage._o = .oneofFloat(v)
          }
        }()
        case 72: try {
          var v: Double?
          try decoder.decodeSingularDoubleField(value: &v)
          if let v = v {
            if _storage._o != nil {try decoder.handleConflictingOneOf()}
            _storage._o = .oneofDouble(v)
          }
        }()
        case 73: try {
          var v: Bool?
          try decoder.decodeSingularBoolField(value: &v)
          if let v = v {
            if _storage._o != nil {try decoder.handleConflictingOneOf()}
            _storage._o = .oneofBool(v)
          }
        }()
        case 74: try {
          var v: String?
          try decoder.decodeSingularStringField(value: &v)
          if let v = v {
            if _storage._o != nil {try decoder.handleConflictingOneOf()}
            _storage._o = .oneofString(v)
          }
        }()
        case 75: try {
          var v: Data?
          try decoder.decodeSingularBytesField(value: &v)
          if let v = v {
            if _storage._o != nil {try decoder.handleConflictingOneOf()}
            _storage._o = .oneofBytes(v)
          }
        }()
        case 76: try {
          var v: Fuzz_Testing_AnEnum?
          try decoder.decodeSingularEnumField(value: &v)
          if let v = v {
            if _storage._o != nil {try decoder.handleConflictingOneOf()}
            _storage._o = .oneofEnum(v)
          }
        }()
        case 77: try {
          var v: Fuzz_Testing_Message.OneofGroup?
          var hadOneofValue = false
          if let current = _storage._o {
            hadOneofValue = true
            if case .oneofGroup(let m) = current {v = m}
          }
          try decoder.decodeSingularGroupField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._o = .oneofGroup(v)
          }
        }()
        case 79: try {
          var v: Fuzz_Testing_Message?
          var hadOneofValue = false
          if let current = _storage._o {
            hadOneofValue = true
            if case .oneofMessage(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._o = .oneofMessage(v)
          }
        }()
        case 100: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt32,SwiftProtobuf.ProtobufInt32>.self, value: &_storage._mapInt32Int32) }()
        case 101: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt32,SwiftProtobuf.ProtobufInt64>.self, value: &_storage._mapInt32Int64) }()
        case 102: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt32,SwiftProtobuf.ProtobufUInt32>.self, value: &_storage._mapInt32Uint32) }()
        case 103: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt32,SwiftProtobuf.ProtobufUInt64>.self, value: &_storage._mapInt32Uint64) }()
        case 104: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt32,SwiftProtobuf.ProtobufSInt32>.self, value: &_storage._mapInt32Sint32) }()
        case 105: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt32,SwiftProtobuf.ProtobufSInt64>.self, value: &_storage._mapInt32Sint64) }()
        case 106: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt32,SwiftProtobuf.ProtobufFixed32>.self, value: &_storage._mapInt32Fixed32) }()
        case 107: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt32,SwiftProtobuf.ProtobufFixed64>.self, value: &_storage._mapInt32Fixed64) }()
        case 108: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt32,SwiftProtobuf.ProtobufSFixed32>.self, value: &_storage._mapInt32Sfixed32) }()
        case 109: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt32,SwiftProtobuf.ProtobufSFixed64>.self, value: &_storage._mapInt32Sfixed64) }()
        case 110: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt32,SwiftProtobuf.ProtobufFloat>.self, value: &_storage._mapInt32Float) }()
        case 111: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt32,SwiftProtobuf.ProtobufDouble>.self, value: &_storage._mapInt32Double) }()
        case 112: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt32,SwiftProtobuf.ProtobufBool>.self, value: &_storage._mapInt32Bool) }()
        case 113: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt32,SwiftProtobuf.ProtobufString>.self, value: &_storage._mapInt32String) }()
        case 114: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt32,SwiftProtobuf.ProtobufBytes>.self, value: &_storage._mapInt32Bytes) }()
        case 115: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufEnumMap<SwiftProtobuf.ProtobufInt32,Fuzz_Testing_AnEnum>.self, value: &_storage._mapInt32AnEnum) }()
        case 116: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufInt32,Fuzz_Testing_Message>.self, value: &_storage._mapInt32Message) }()
        case 117: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt64,SwiftProtobuf.ProtobufInt32>.self, value: &_storage._mapInt64Int32) }()
        case 118: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt64,SwiftProtobuf.ProtobufInt64>.self, value: &_storage._mapInt64Int64) }()
        case 119: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt64,SwiftProtobuf.ProtobufUInt32>.self, value: &_storage._mapInt64Uint32) }()
        case 120: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt64,SwiftProtobuf.ProtobufUInt64>.self, value: &_storage._mapInt64Uint64) }()
        case 121: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt64,SwiftProtobuf.ProtobufSInt32>.self, value: &_storage._mapInt64Sint32) }()
        case 122: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt64,SwiftProtobuf.ProtobufSInt64>.self, value: &_storage._mapInt64Sint64) }()
        case 123: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt64,SwiftProtobuf.ProtobufFixed32>.self, value: &_storage._mapInt64Fixed32) }()
        case 124: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt64,SwiftProtobuf.ProtobufFixed64>.self, value: &_storage._mapInt64Fixed64) }()
        case 125: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt64,SwiftProtobuf.ProtobufSFixed32>.self, value: &_storage._mapInt64Sfixed32) }()
        case 126: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt64,SwiftProtobuf.ProtobufSFixed64>.self, value: &_storage._mapInt64Sfixed64) }()
        case 127: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt64,SwiftProtobuf.ProtobufFloat>.self, value: &_storage._mapInt64Float) }()
        case 128: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt64,SwiftProtobuf.ProtobufDouble>.self, value: &_storage._mapInt64Double) }()
        case 129: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt64,SwiftProtobuf.ProtobufBool>.self, value: &_storage._mapInt64Bool) }()
        case 130: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt64,SwiftProtobuf.ProtobufString>.self, value: &_storage._mapInt64String) }()
        case 131: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt64,SwiftProtobuf.ProtobufBytes>.self, value: &_storage._mapInt64Bytes) }()
        case 132: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufEnumMap<SwiftProtobuf.ProtobufInt64,Fuzz_Testing_AnEnum>.self, value: &_storage._mapInt64AnEnum) }()
        case 133: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufInt64,Fuzz_Testing_Message>.self, value: &_storage._mapInt64Message) }()
        case 134: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufUInt32,SwiftProtobuf.ProtobufInt32>.self, value: &_storage._mapUint32Int32) }()
        case 135: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufUInt32,SwiftProtobuf.ProtobufInt64>.self, value: &_storage._mapUint32Int64) }()
        case 136: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufUInt32,SwiftProtobuf.ProtobufUInt32>.self, value: &_storage._mapUint32Uint32) }()
        case 137: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufUInt32,SwiftProtobuf.ProtobufUInt64>.self, value: &_storage._mapUint32Uint64) }()
        case 138: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufUInt32,SwiftProtobuf.ProtobufSInt32>.self, value: &_storage._mapUint32Sint32) }()
        case 139: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufUInt32,SwiftProtobuf.ProtobufSInt64>.self, value: &_storage._mapUint32Sint64) }()
        case 140: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufUInt32,SwiftProtobuf.ProtobufFixed32>.self, value: &_storage._mapUint32Fixed32) }()
        case 141: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufUInt32,SwiftProtobuf.ProtobufFixed64>.self, value: &_storage._mapUint32Fixed64) }()
        case 142: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufUInt32,SwiftProtobuf.ProtobufSFixed32>.self, value: &_storage._mapUint32Sfixed32) }()
        case 143: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufUInt32,SwiftProtobuf.ProtobufSFixed64>.self, value: &_storage._mapUint32Sfixed64) }()
        case 144: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufUInt32,SwiftProtobuf.ProtobufFloat>.self, value: &_storage._mapUint32Float) }()
        case 145: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufUInt32,SwiftProtobuf.ProtobufDouble>.self, value: &_storage._mapUint32Double) }()
        case 146: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufUInt32,SwiftProtobuf.ProtobufBool>.self, value: &_storage._mapUint32Bool) }()
        case 147: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufUInt32,SwiftProtobuf.ProtobufString>.self, value: &_storage._mapUint32String) }()
        case 148: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufUInt32,SwiftProtobuf.ProtobufBytes>.self, value: &_storage._mapUint32Bytes) }()
        case 149: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufEnumMap<SwiftProtobuf.ProtobufUInt32,Fuzz_Testing_AnEnum>.self, value: &_storage._mapUint32AnEnum) }()
        case 150: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufUInt32,Fuzz_Testing_Message>.self, value: &_storage._mapUint32Message) }()
        case 151: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufUInt64,SwiftProtobuf.ProtobufInt32>.self, value: &_storage._mapUint64Int32) }()
        case 152: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufUInt64,SwiftProtobuf.ProtobufInt64>.self, value: &_storage._mapUint64Int64) }()
        case 153: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufUInt64,SwiftProtobuf.ProtobufUInt32>.self, value: &_storage._mapUint64Uint32) }()
        case 154: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufUInt64,SwiftProtobuf.ProtobufUInt64>.self, value: &_storage._mapUint64Uint64) }()
        case 155: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufUInt64,SwiftProtobuf.ProtobufSInt32>.self, value: &_storage._mapUint64Sint32) }()
        case 156: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufUInt64,SwiftProtobuf.ProtobufSInt64>.self, value: &_storage._mapUint64Sint64) }()
        case 157: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufUInt64,SwiftProtobuf.ProtobufFixed32>.self, value: &_storage._mapUint64Fixed32) }()
        case 158: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufUInt64,SwiftProtobuf.ProtobufFixed64>.self, value: &_storage._mapUint64Fixed64) }()
        case 159: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufUInt64,SwiftProtobuf.ProtobufSFixed32>.self, value: &_storage._mapUint64Sfixed32) }()
        case 160: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufUInt64,SwiftProtobuf.ProtobufSFixed64>.self, value: &_storage._mapUint64Sfixed64) }()
        case 161: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufUInt64,SwiftProtobuf.ProtobufFloat>.self, value: &_storage._mapUint64Float) }()
        case 162: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufUInt64,SwiftProtobuf.ProtobufDouble>.self, value: &_storage._mapUint64Double) }()
        case 163: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufUInt64,SwiftProtobuf.ProtobufBool>.self, value: &_storage._mapUint64Bool) }()
        case 164: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufUInt64,SwiftProtobuf.ProtobufString>.self, value: &_storage._mapUint64String) }()
        case 165: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufUInt64,SwiftProtobuf.ProtobufBytes>.self, value: &_storage._mapUint64Bytes) }()
        case 166: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufEnumMap<SwiftProtobuf.ProtobufUInt64,Fuzz_Testing_AnEnum>.self, value: &_storage._mapUint64AnEnum) }()
        case 167: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufUInt64,Fuzz_Testing_Message>.self, value: &_storage._mapUint64Message) }()
        case 168: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSInt32,SwiftProtobuf.ProtobufInt32>.self, value: &_storage._mapSint32Int32) }()
        case 169: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSInt32,SwiftProtobuf.ProtobufInt64>.self, value: &_storage._mapSint32Int64) }()
        case 170: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSInt32,SwiftProtobuf.ProtobufUInt32>.self, value: &_storage._mapSint32Uint32) }()
        case 171: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSInt32,SwiftProtobuf.ProtobufUInt64>.self, value: &_storage._mapSint32Uint64) }()
        case 172: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSInt32,SwiftProtobuf.ProtobufSInt32>.self, value: &_storage._mapSint32Sint32) }()
        case 173: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSInt32,SwiftProtobuf.ProtobufSInt64>.self, value: &_storage._mapSint32Sint64) }()
        case 174: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSInt32,SwiftProtobuf.ProtobufFixed32>.self, value: &_storage._mapSint32Fixed32) }()
        case 175: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSInt32,SwiftProtobuf.ProtobufFixed64>.self, value: &_storage._mapSint32Fixed64) }()
        case 176: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSInt32,SwiftProtobuf.ProtobufSFixed32>.self, value: &_storage._mapSint32Sfixed32) }()
        case 177: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSInt32,SwiftProtobuf.ProtobufSFixed64>.self, value: &_storage._mapSint32Sfixed64) }()
        case 178: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSInt32,SwiftProtobuf.ProtobufFloat>.self, value: &_storage._mapSint32Float) }()
        case 179: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSInt32,SwiftProtobuf.ProtobufDouble>.self, value: &_storage._mapSint32Double) }()
        case 180: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSInt32,SwiftProtobuf.ProtobufBool>.self, value: &_storage._mapSint32Bool) }()
        case 181: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSInt32,SwiftProtobuf.ProtobufString>.self, value: &_storage._mapSint32String) }()
        case 182: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSInt32,SwiftProtobuf.ProtobufBytes>.self, value: &_storage._mapSint32Bytes) }()
        case 183: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufEnumMap<SwiftProtobuf.ProtobufSInt32,Fuzz_Testing_AnEnum>.self, value: &_storage._mapSint32AnEnum) }()
        case 184: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufSInt32,Fuzz_Testing_Message>.self, value: &_storage._mapSint32Message) }()
        case 185: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSInt64,SwiftProtobuf.ProtobufInt32>.self, value: &_storage._mapSint64Int32) }()
        case 186: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSInt64,SwiftProtobuf.ProtobufInt64>.self, value: &_storage._mapSint64Int64) }()
        case 187: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSInt64,SwiftProtobuf.ProtobufUInt32>.self, value: &_storage._mapSint64Uint32) }()
        case 188: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSInt64,SwiftProtobuf.ProtobufUInt64>.self, value: &_storage._mapSint64Uint64) }()
        case 189: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSInt64,SwiftProtobuf.ProtobufSInt32>.self, value: &_storage._mapSint64Sint32) }()
        case 190: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSInt64,SwiftProtobuf.ProtobufSInt64>.self, value: &_storage._mapSint64Sint64) }()
        case 191: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSInt64,SwiftProtobuf.ProtobufFixed32>.self, value: &_storage._mapSint64Fixed32) }()
        case 192: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSInt64,SwiftProtobuf.ProtobufFixed64>.self, value: &_storage._mapSint64Fixed64) }()
        case 193: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSInt64,SwiftProtobuf.ProtobufSFixed32>.self, value: &_storage._mapSint64Sfixed32) }()
        case 194: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSInt64,SwiftProtobuf.ProtobufSFixed64>.self, value: &_storage._mapSint64Sfixed64) }()
        case 195: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSInt64,SwiftProtobuf.ProtobufFloat>.self, value: &_storage._mapSint64Float) }()
        case 196: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSInt64,SwiftProtobuf.ProtobufDouble>.self, value: &_storage._mapSint64Double) }()
        case 197: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSInt64,SwiftProtobuf.ProtobufBool>.self, value: &_storage._mapSint64Bool) }()
        case 198: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSInt64,SwiftProtobuf.ProtobufString>.self, value: &_storage._mapSint64String) }()
        case 199: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSInt64,SwiftProtobuf.ProtobufBytes>.self, value: &_storage._mapSint64Bytes) }()
        case 200: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufEnumMap<SwiftProtobuf.ProtobufSInt64,Fuzz_Testing_AnEnum>.self, value: &_storage._mapSint64AnEnum) }()
        case 201: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufSInt64,Fuzz_Testing_Message>.self, value: &_storage._mapSint64Message) }()
        case 202: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufFixed32,SwiftProtobuf.ProtobufInt32>.self, value: &_storage._mapFixed32Int32) }()
        case 203: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufFixed32,SwiftProtobuf.ProtobufInt64>.self, value: &_storage._mapFixed32Int64) }()
        case 204: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufFixed32,SwiftProtobuf.ProtobufUInt32>.self, value: &_storage._mapFixed32Uint32) }()
        case 205: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufFixed32,SwiftProtobuf.ProtobufUInt64>.self, value: &_storage._mapFixed32Uint64) }()
        case 206: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufFixed32,SwiftProtobuf.ProtobufSInt32>.self, value: &_storage._mapFixed32Sint32) }()
        case 207: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufFixed32,SwiftProtobuf.ProtobufSInt64>.self, value: &_storage._mapFixed32Sint64) }()
        case 208: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufFixed32,SwiftProtobuf.ProtobufFixed32>.self, value: &_storage._mapFixed32Fixed32) }()
        case 209: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufFixed32,SwiftProtobuf.ProtobufFixed64>.self, value: &_storage._mapFixed32Fixed64) }()
        case 210: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufFixed32,SwiftProtobuf.ProtobufSFixed32>.self, value: &_storage._mapFixed32Sfixed32) }()
        case 211: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufFixed32,SwiftProtobuf.ProtobufSFixed64>.self, value: &_storage._mapFixed32Sfixed64) }()
        case 212: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufFixed32,SwiftProtobuf.ProtobufFloat>.self, value: &_storage._mapFixed32Float) }()
        case 213: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufFixed32,SwiftProtobuf.ProtobufDouble>.self, value: &_storage._mapFixed32Double) }()
        case 214: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufFixed32,SwiftProtobuf.ProtobufBool>.self, value: &_storage._mapFixed32Bool) }()
        case 215: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufFixed32,SwiftProtobuf.ProtobufString>.self, value: &_storage._mapFixed32String) }()
        case 216: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufFixed32,SwiftProtobuf.ProtobufBytes>.self, value: &_storage._mapFixed32Bytes) }()
        case 217: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufEnumMap<SwiftProtobuf.ProtobufFixed32,Fuzz_Testing_AnEnum>.self, value: &_storage._mapFixed32AnEnum) }()
        case 218: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufFixed32,Fuzz_Testing_Message>.self, value: &_storage._mapFixed32Message) }()
        case 219: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufFixed64,SwiftProtobuf.ProtobufInt32>.self, value: &_storage._mapFixed64Int32) }()
        case 220: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufFixed64,SwiftProtobuf.ProtobufInt64>.self, value: &_storage._mapFixed64Int64) }()
        case 221: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufFixed64,SwiftProtobuf.ProtobufUInt32>.self, value: &_storage._mapFixed64Uint32) }()
        case 222: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufFixed64,SwiftProtobuf.ProtobufUInt64>.self, value: &_storage._mapFixed64Uint64) }()
        case 223: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufFixed64,SwiftProtobuf.ProtobufSInt32>.self, value: &_storage._mapFixed64Sint32) }()
        case 224: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufFixed64,SwiftProtobuf.ProtobufSInt64>.self, value: &_storage._mapFixed64Sint64) }()
        case 225: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufFixed64,SwiftProtobuf.ProtobufFixed32>.self, value: &_storage._mapFixed64Fixed32) }()
        case 226: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufFixed64,SwiftProtobuf.ProtobufFixed64>.self, value: &_storage._mapFixed64Fixed64) }()
        case 227: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufFixed64,SwiftProtobuf.ProtobufSFixed32>.self, value: &_storage._mapFixed64Sfixed32) }()
        case 228: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufFixed64,SwiftProtobuf.ProtobufSFixed64>.self, value: &_storage._mapFixed64Sfixed64) }()
        case 229: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufFixed64,SwiftProtobuf.ProtobufFloat>.self, value: &_storage._mapFixed64Float) }()
        case 230: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufFixed64,SwiftProtobuf.ProtobufDouble>.self, value: &_storage._mapFixed64Double) }()
        case 231: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufFixed64,SwiftProtobuf.ProtobufBool>.self, value: &_storage._mapFixed64Bool) }()
        case 232: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufFixed64,SwiftProtobuf.ProtobufString>.self, value: &_storage._mapFixed64String) }()
        case 233: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufFixed64,SwiftProtobuf.ProtobufBytes>.self, value: &_storage._mapFixed64Bytes) }()
        case 234: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufEnumMap<SwiftProtobuf.ProtobufFixed64,Fuzz_Testing_AnEnum>.self, value: &_storage._mapFixed64AnEnum) }()
        case 235: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufFixed64,Fuzz_Testing_Message>.self, value: &_storage._mapFixed64Message) }()
        case 236: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSFixed32,SwiftProtobuf.ProtobufInt32>.self, value: &_storage._mapSfixed32Int32) }()
        case 237: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSFixed32,SwiftProtobuf.ProtobufInt64>.self, value: &_storage._mapSfixed32Int64) }()
        case 238: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSFixed32,SwiftProtobuf.ProtobufUInt32>.self, value: &_storage._mapSfixed32Uint32) }()
        case 239: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSFixed32,SwiftProtobuf.ProtobufUInt64>.self, value: &_storage._mapSfixed32Uint64) }()
        case 240: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSFixed32,SwiftProtobuf.ProtobufSInt32>.self, value: &_storage._mapSfixed32Sint32) }()
        case 241: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSFixed32,SwiftProtobuf.ProtobufSInt64>.self, value: &_storage._mapSfixed32Sint64) }()
        case 242: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSFixed32,SwiftProtobuf.ProtobufFixed32>.self, value: &_storage._mapSfixed32Fixed32) }()
        case 243: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSFixed32,SwiftProtobuf.ProtobufFixed64>.self, value: &_storage._mapSfixed32Fixed64) }()
        case 244: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSFixed32,SwiftProtobuf.ProtobufSFixed32>.self, value: &_storage._mapSfixed32Sfixed32) }()
        case 245: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSFixed32,SwiftProtobuf.ProtobufSFixed64>.self, value: &_storage._mapSfixed32Sfixed64) }()
        case 246: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSFixed32,SwiftProtobuf.ProtobufFloat>.self, value: &_storage._mapSfixed32Float) }()
        case 247: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSFixed32,SwiftProtobuf.ProtobufDouble>.self, value: &_storage._mapSfixed32Double) }()
        case 248: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSFixed32,SwiftProtobuf.ProtobufBool>.self, value: &_storage._mapSfixed32Bool) }()
        case 249: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSFixed32,SwiftProtobuf.ProtobufString>.self, value: &_storage._mapSfixed32String) }()
        case 250: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSFixed32,SwiftProtobuf.ProtobufBytes>.self, value: &_storage._mapSfixed32Bytes) }()
        case 251: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufEnumMap<SwiftProtobuf.ProtobufSFixed32,Fuzz_Testing_AnEnum>.self, value: &_storage._mapSfixed32AnEnum) }()
        case 252: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufSFixed32,Fuzz_Testing_Message>.self, value: &_storage._mapSfixed32Message) }()
        case 253: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSFixed64,SwiftProtobuf.ProtobufInt32>.self, value: &_storage._mapSfixed64Int32) }()
        case 254: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSFixed64,SwiftProtobuf.ProtobufInt64>.self, value: &_storage._mapSfixed64Int64) }()
        case 255: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSFixed64,SwiftProtobuf.ProtobufUInt32>.self, value: &_storage._mapSfixed64Uint32) }()
        case 256: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSFixed64,SwiftProtobuf.ProtobufUInt64>.self, value: &_storage._mapSfixed64Uint64) }()
        case 257: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSFixed64,SwiftProtobuf.ProtobufSInt32>.self, value: &_storage._mapSfixed64Sint32) }()
        case 258: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSFixed64,SwiftProtobuf.ProtobufSInt64>.self, value: &_storage._mapSfixed64Sint64) }()
        case 259: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSFixed64,SwiftProtobuf.ProtobufFixed32>.self, value: &_storage._mapSfixed64Fixed32) }()
        case 260: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSFixed64,SwiftProtobuf.ProtobufFixed64>.self, value: &_storage._mapSfixed64Fixed64) }()
        case 261: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSFixed64,SwiftProtobuf.ProtobufSFixed32>.self, value: &_storage._mapSfixed64Sfixed32) }()
        case 262: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSFixed64,SwiftProtobuf.ProtobufSFixed64>.self, value: &_storage._mapSfixed64Sfixed64) }()
        case 263: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSFixed64,SwiftProtobuf.ProtobufFloat>.self, value: &_storage._mapSfixed64Float) }()
        case 264: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSFixed64,SwiftProtobuf.ProtobufDouble>.self, value: &_storage._mapSfixed64Double) }()
        case 265: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSFixed64,SwiftProtobuf.ProtobufBool>.self, value: &_storage._mapSfixed64Bool) }()
        case 266: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSFixed64,SwiftProtobuf.ProtobufString>.self, value: &_storage._mapSfixed64String) }()
        case 267: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSFixed64,SwiftProtobuf.ProtobufBytes>.self, value: &_storage._mapSfixed64Bytes) }()
        case 268: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufEnumMap<SwiftProtobuf.ProtobufSFixed64,Fuzz_Testing_AnEnum>.self, value: &_storage._mapSfixed64AnEnum) }()
        case 269: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufSFixed64,Fuzz_Testing_Message>.self, value: &_storage._mapSfixed64Message) }()
        case 270: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufBool,SwiftProtobuf.ProtobufInt32>.self, value: &_storage._mapBoolInt32) }()
        case 271: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufBool,SwiftProtobuf.ProtobufInt64>.self, value: &_storage._mapBoolInt64) }()
        case 272: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufBool,SwiftProtobuf.ProtobufUInt32>.self, value: &_storage._mapBoolUint32) }()
        case 273: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufBool,SwiftProtobuf.ProtobufUInt64>.self, value: &_storage._mapBoolUint64) }()
        case 274: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufBool,SwiftProtobuf.ProtobufSInt32>.self, value: &_storage._mapBoolSint32) }()
        case 275: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufBool,SwiftProtobuf.ProtobufSInt64>.self, value: &_storage._mapBoolSint64) }()
        case 276: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufBool,SwiftProtobuf.ProtobufFixed32>.self, value: &_storage._mapBoolFixed32) }()
        case 277: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufBool,SwiftProtobuf.ProtobufFixed64>.self, value: &_storage._mapBoolFixed64) }()
        case 278: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufBool,SwiftProtobuf.ProtobufSFixed32>.self, value: &_storage._mapBoolSfixed32) }()
        case 279: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufBool,SwiftProtobuf.ProtobufSFixed64>.self, value: &_storage._mapBoolSfixed64) }()
        case 280: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufBool,SwiftProtobuf.ProtobufFloat>.self, value: &_storage._mapBoolFloat) }()
        case 281: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufBool,SwiftProtobuf.ProtobufDouble>.self, value: &_storage._mapBoolDouble) }()
        case 282: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufBool,SwiftProtobuf.ProtobufBool>.self, value: &_storage._mapBoolBool) }()
        case 283: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufBool,SwiftProtobuf.ProtobufString>.self, value: &_storage._mapBoolString) }()
        case 284: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufBool,SwiftProtobuf.ProtobufBytes>.self, value: &_storage._mapBoolBytes) }()
        case 285: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufEnumMap<SwiftProtobuf.ProtobufBool,Fuzz_Testing_AnEnum>.self, value: &_storage._mapBoolAnEnum) }()
        case 286: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufBool,Fuzz_Testing_Message>.self, value: &_storage._mapBoolMessage) }()
        case 500: try { try decoder.decodeSingularMessageField(value: &_storage._wktAny) }()
        case 501: try { try decoder.decodeSingularMessageField(value: &_storage._wktApi) }()
        case 502: try { try decoder.decodeSingularMessageField(value: &_storage._wktDuration) }()
        case 503: try { try decoder.decodeSingularMessageField(value: &_storage._wktEmpty) }()
        case 504: try { try decoder.decodeSingularMessageField(value: &_storage._wktFieldMask) }()
        case 505: try { try decoder.decodeSingularMessageField(value: &_storage._wktSourceContext) }()
        case 506: try { try decoder.decodeSingularMessageField(value: &_storage._wktStruct) }()
        case 507: try { try decoder.decodeSingularMessageField(value: &_storage._wktTimestamp) }()
        case 508: try { try decoder.decodeSingularMessageField(value: &_storage._wktType) }()
        case 509: try { try decoder.decodeSingularMessageField(value: &_storage._wktDoubleValue) }()
        case 510: try { try decoder.decodeSingularMessageField(value: &_storage._wktFloatValue) }()
        case 511: try { try decoder.decodeSingularMessageField(value: &_storage._wktInt64Value) }()
        case 512: try { try decoder.decodeSingularMessageField(value: &_storage._wktUint64Value) }()
        case 513: try { try decoder.decodeSingularMessageField(value: &_storage._wktInt32Value) }()
        case 514: try { try decoder.decodeSingularMessageField(value: &_storage._wktUint32Value) }()
        case 515: try { try decoder.decodeSingularMessageField(value: &_storage._wktBoolValue) }()
        case 516: try { try decoder.decodeSingularMessageField(value: &_storage._wktStringValue) }()
        case 517: try { try decoder.decodeSingularMessageField(value: &_storage._wktBytesValue) }()
        case 1000..<2001:
          try { try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: Fuzz_Testing_Message.self, fieldNumber: fieldNumber) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._singularInt32 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      if let v = _storage._singularInt64 {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 2)
      }
      if let v = _storage._singularUint32 {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
      }
      if let v = _storage._singularUint64 {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 4)
      }
      if let v = _storage._singularSint32 {
        try visitor.visitSingularSInt32Field(value: v, fieldNumber: 5)
      }
      if let v = _storage._singularSint64 {
        try visitor.visitSingularSInt64Field(value: v, fieldNumber: 6)
      }
      if let v = _storage._singularFixed32 {
        try visitor.visitSingularFixed32Field(value: v, fieldNumber: 7)
      }
      if let v = _storage._singularFixed64 {
        try visitor.visitSingularFixed64Field(value: v, fieldNumber: 8)
      }
      if let v = _storage._singularSfixed32 {
        try visitor.visitSingularSFixed32Field(value: v, fieldNumber: 9)
      }
      if let v = _storage._singularSfixed64 {
        try visitor.visitSingularSFixed64Field(value: v, fieldNumber: 10)
      }
      if let v = _storage._singularFloat {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 11)
      }
      if let v = _storage._singularDouble {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 12)
      }
      if let v = _storage._singularBool {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 13)
      }
      if let v = _storage._singularString {
        try visitor.visitSingularStringField(value: v, fieldNumber: 14)
      }
      if let v = _storage._singularBytes {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 15)
      }
      if let v = _storage._singularEnum {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 16)
      }
      if let v = _storage._singularGroup {
        try visitor.visitSingularGroupField(value: v, fieldNumber: 17)
      }
      if let v = _storage._singularMessage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
      }
      if !_storage._repeatedInt32.isEmpty {
        try visitor.visitRepeatedInt32Field(value: _storage._repeatedInt32, fieldNumber: 31)
      }
      if !_storage._repeatedInt64.isEmpty {
        try visitor.visitRepeatedInt64Field(value: _storage._repeatedInt64, fieldNumber: 32)
      }
      if !_storage._repeatedUint32.isEmpty {
        try visitor.visitRepeatedUInt32Field(value: _storage._repeatedUint32, fieldNumber: 33)
      }
      if !_storage._repeatedUint64.isEmpty {
        try visitor.visitRepeatedUInt64Field(value: _storage._repeatedUint64, fieldNumber: 34)
      }
      if !_storage._repeatedSint32.isEmpty {
        try visitor.visitRepeatedSInt32Field(value: _storage._repeatedSint32, fieldNumber: 35)
      }
      if !_storage._repeatedSint64.isEmpty {
        try visitor.visitRepeatedSInt64Field(value: _storage._repeatedSint64, fieldNumber: 36)
      }
      if !_storage._repeatedFixed32.isEmpty {
        try visitor.visitRepeatedFixed32Field(value: _storage._repeatedFixed32, fieldNumber: 37)
      }
      if !_storage._repeatedFixed64.isEmpty {
        try visitor.visitRepeatedFixed64Field(value: _storage._repeatedFixed64, fieldNumber: 38)
      }
      if !_storage._repeatedSfixed32.isEmpty {
        try visitor.visitRepeatedSFixed32Field(value: _storage._repeatedSfixed32, fieldNumber: 39)
      }
      if !_storage._repeatedSfixed64.isEmpty {
        try visitor.visitRepeatedSFixed64Field(value: _storage._repeatedSfixed64, fieldNumber: 40)
      }
      if !_storage._repeatedFloat.isEmpty {
        try visitor.visitRepeatedFloatField(value: _storage._repeatedFloat, fieldNumber: 41)
      }
      if !_storage._repeatedDouble.isEmpty {
        try visitor.visitRepeatedDoubleField(value: _storage._repeatedDouble, fieldNumber: 42)
      }
      if !_storage._repeatedBool.isEmpty {
        try visitor.visitRepeatedBoolField(value: _storage._repeatedBool, fieldNumber: 43)
      }
      if !_storage._repeatedString.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._repeatedString, fieldNumber: 44)
      }
      if !_storage._repeatedBytes.isEmpty {
        try visitor.visitRepeatedBytesField(value: _storage._repeatedBytes, fieldNumber: 45)
      }
      if !_storage._repeatedEnum.isEmpty {
        try visitor.visitRepeatedEnumField(value: _storage._repeatedEnum, fieldNumber: 46)
      }
      if !_storage._repeatedGroup.isEmpty {
        try visitor.visitRepeatedGroupField(value: _storage._repeatedGroup, fieldNumber: 47)
      }
      if !_storage._repeatedMessage.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._repeatedMessage, fieldNumber: 49)
      }
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch _storage._o {
      case .oneofInt32?: try {
        guard case .oneofInt32(let v)? = _storage._o else { preconditionFailure() }
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 61)
      }()
      case .oneofInt64?: try {
        guard case .oneofInt64(let v)? = _storage._o else { preconditionFailure() }
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 62)
      }()
      case .oneofUint32?: try {
        guard case .oneofUint32(let v)? = _storage._o else { preconditionFailure() }
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 63)
      }()
      case .oneofUint64?: try {
        guard case .oneofUint64(let v)? = _storage._o else { preconditionFailure() }
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 64)
      }()
      case .oneofSint32?: try {
        guard case .oneofSint32(let v)? = _storage._o else { preconditionFailure() }
        try visitor.visitSingularSInt32Field(value: v, fieldNumber: 65)
      }()
      case .oneofSint64?: try {
        guard case .oneofSint64(let v)? = _storage._o else { preconditionFailure() }
        try visitor.visitSingularSInt64Field(value: v, fieldNumber: 66)
      }()
      case .oneofFixed32?: try {
        guard case .oneofFixed32(let v)? = _storage._o else { preconditionFailure() }
        try visitor.visitSingularFixed32Field(value: v, fieldNumber: 67)
      }()
      case .oneofFixed64?: try {
        guard case .oneofFixed64(let v)? = _storage._o else { preconditionFailure() }
        try visitor.visitSingularFixed64Field(value: v, fieldNumber: 68)
      }()
      case .oneofSfixed32?: try {
        guard case .oneofSfixed32(let v)? = _storage._o else { preconditionFailure() }
        try visitor.visitSingularSFixed32Field(value: v, fieldNumber: 69)
      }()
      case .oneofSfixed64?: try {
        guard case .oneofSfixed64(let v)? = _storage._o else { preconditionFailure() }
        try visitor.visitSingularSFixed64Field(value: v, fieldNumber: 70)
      }()
      case .oneofFloat?: try {
        guard case .oneofFloat(let v)? = _storage._o else { preconditionFailure() }
        try visitor.visitSingularFloatField(value: v, fieldNumber: 71)
      }()
      case .oneofDouble?: try {
        guard case .oneofDouble(let v)? = _storage._o else { preconditionFailure() }
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 72)
      }()
      case .oneofBool?: try {
        guard case .oneofBool(let v)? = _storage._o else { preconditionFailure() }
        try visitor.visitSingularBoolField(value: v, fieldNumber: 73)
      }()
      case .oneofString?: try {
        guard case .oneofString(let v)? = _storage._o else { preconditionFailure() }
        try visitor.visitSingularStringField(value: v, fieldNumber: 74)
      }()
      case .oneofBytes?: try {
        guard case .oneofBytes(let v)? = _storage._o else { preconditionFailure() }
        try visitor.visitSingularBytesField(value: v, fieldNumber: 75)
      }()
      case .oneofEnum?: try {
        guard case .oneofEnum(let v)? = _storage._o else { preconditionFailure() }
        try visitor.visitSingularEnumField(value: v, fieldNumber: 76)
      }()
      case .oneofGroup?: try {
        guard case .oneofGroup(let v)? = _storage._o else { preconditionFailure() }
        try visitor.visitSingularGroupField(value: v, fieldNumber: 77)
      }()
      case .oneofMessage?: try {
        guard case .oneofMessage(let v)? = _storage._o else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 79)
      }()
      case nil: break
      }
      if !_storage._mapInt32Int32.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt32,SwiftProtobuf.ProtobufInt32>.self, value: _storage._mapInt32Int32, fieldNumber: 100)
      }
      if !_storage._mapInt32Int64.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt32,SwiftProtobuf.ProtobufInt64>.self, value: _storage._mapInt32Int64, fieldNumber: 101)
      }
      if !_storage._mapInt32Uint32.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt32,SwiftProtobuf.ProtobufUInt32>.self, value: _storage._mapInt32Uint32, fieldNumber: 102)
      }
      if !_storage._mapInt32Uint64.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt32,SwiftProtobuf.ProtobufUInt64>.self, value: _storage._mapInt32Uint64, fieldNumber: 103)
      }
      if !_storage._mapInt32Sint32.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt32,SwiftProtobuf.ProtobufSInt32>.self, value: _storage._mapInt32Sint32, fieldNumber: 104)
      }
      if !_storage._mapInt32Sint64.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt32,SwiftProtobuf.ProtobufSInt64>.self, value: _storage._mapInt32Sint64, fieldNumber: 105)
      }
      if !_storage._mapInt32Fixed32.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt32,SwiftProtobuf.ProtobufFixed32>.self, value: _storage._mapInt32Fixed32, fieldNumber: 106)
      }
      if !_storage._mapInt32Fixed64.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt32,SwiftProtobuf.ProtobufFixed64>.self, value: _storage._mapInt32Fixed64, fieldNumber: 107)
      }
      if !_storage._mapInt32Sfixed32.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt32,SwiftProtobuf.ProtobufSFixed32>.self, value: _storage._mapInt32Sfixed32, fieldNumber: 108)
      }
      if !_storage._mapInt32Sfixed64.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt32,SwiftProtobuf.ProtobufSFixed64>.self, value: _storage._mapInt32Sfixed64, fieldNumber: 109)
      }
      if !_storage._mapInt32Float.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt32,SwiftProtobuf.ProtobufFloat>.self, value: _storage._mapInt32Float, fieldNumber: 110)
      }
      if !_storage._mapInt32Double.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt32,SwiftProtobuf.ProtobufDouble>.self, value: _storage._mapInt32Double, fieldNumber: 111)
      }
      if !_storage._mapInt32Bool.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt32,SwiftProtobuf.ProtobufBool>.self, value: _storage._mapInt32Bool, fieldNumber: 112)
      }
      if !_storage._mapInt32String.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt32,SwiftProtobuf.ProtobufString>.self, value: _storage._mapInt32String, fieldNumber: 113)
      }
      if !_storage._mapInt32Bytes.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt32,SwiftProtobuf.ProtobufBytes>.self, value: _storage._mapInt32Bytes, fieldNumber: 114)
      }
      if !_storage._mapInt32AnEnum.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufEnumMap<SwiftProtobuf.ProtobufInt32,Fuzz_Testing_AnEnum>.self, value: _storage._mapInt32AnEnum, fieldNumber: 115)
      }
      if !_storage._mapInt32Message.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufInt32,Fuzz_Testing_Message>.self, value: _storage._mapInt32Message, fieldNumber: 116)
      }
      if !_storage._mapInt64Int32.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt64,SwiftProtobuf.ProtobufInt32>.self, value: _storage._mapInt64Int32, fieldNumber: 117)
      }
      if !_storage._mapInt64Int64.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt64,SwiftProtobuf.ProtobufInt64>.self, value: _storage._mapInt64Int64, fieldNumber: 118)
      }
      if !_storage._mapInt64Uint32.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt64,SwiftProtobuf.ProtobufUInt32>.self, value: _storage._mapInt64Uint32, fieldNumber: 119)
      }
      if !_storage._mapInt64Uint64.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt64,SwiftProtobuf.ProtobufUInt64>.self, value: _storage._mapInt64Uint64, fieldNumber: 120)
      }
      if !_storage._mapInt64Sint32.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt64,SwiftProtobuf.ProtobufSInt32>.self, value: _storage._mapInt64Sint32, fieldNumber: 121)
      }
      if !_storage._mapInt64Sint64.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt64,SwiftProtobuf.ProtobufSInt64>.self, value: _storage._mapInt64Sint64, fieldNumber: 122)
      }
      if !_storage._mapInt64Fixed32.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt64,SwiftProtobuf.ProtobufFixed32>.self, value: _storage._mapInt64Fixed32, fieldNumber: 123)
      }
      if !_storage._mapInt64Fixed64.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt64,SwiftProtobuf.ProtobufFixed64>.self, value: _storage._mapInt64Fixed64, fieldNumber: 124)
      }
      if !_storage._mapInt64Sfixed32.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt64,SwiftProtobuf.ProtobufSFixed32>.self, value: _storage._mapInt64Sfixed32, fieldNumber: 125)
      }
      if !_storage._mapInt64Sfixed64.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt64,SwiftProtobuf.ProtobufSFixed64>.self, value: _storage._mapInt64Sfixed64, fieldNumber: 126)
      }
      if !_storage._mapInt64Float.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt64,SwiftProtobuf.ProtobufFloat>.self, value: _storage._mapInt64Float, fieldNumber: 127)
      }
      if !_storage._mapInt64Double.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt64,SwiftProtobuf.ProtobufDouble>.self, value: _storage._mapInt64Double, fieldNumber: 128)
      }
      if !_storage._mapInt64Bool.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt64,SwiftProtobuf.ProtobufBool>.self, value: _storage._mapInt64Bool, fieldNumber: 129)
      }
      if !_storage._mapInt64String.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt64,SwiftProtobuf.ProtobufString>.self, value: _storage._mapInt64String, fieldNumber: 130)
      }
      if !_storage._mapInt64Bytes.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt64,SwiftProtobuf.ProtobufBytes>.self, value: _storage._mapInt64Bytes, fieldNumber: 131)
      }
      if !_storage._mapInt64AnEnum.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufEnumMap<SwiftProtobuf.ProtobufInt64,Fuzz_Testing_AnEnum>.self, value: _storage._mapInt64AnEnum, fieldNumber: 132)
      }
      if !_storage._mapInt64Message.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufInt64,Fuzz_Testing_Message>.self, value: _storage._mapInt64Message, fieldNumber: 133)
      }
      if !_storage._mapUint32Int32.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufUInt32,SwiftProtobuf.ProtobufInt32>.self, value: _storage._mapUint32Int32, fieldNumber: 134)
      }
      if !_storage._mapUint32Int64.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufUInt32,SwiftProtobuf.ProtobufInt64>.self, value: _storage._mapUint32Int64, fieldNumber: 135)
      }
      if !_storage._mapUint32Uint32.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufUInt32,SwiftProtobuf.ProtobufUInt32>.self, value: _storage._mapUint32Uint32, fieldNumber: 136)
      }
      if !_storage._mapUint32Uint64.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufUInt32,SwiftProtobuf.ProtobufUInt64>.self, value: _storage._mapUint32Uint64, fieldNumber: 137)
      }
      if !_storage._mapUint32Sint32.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufUInt32,SwiftProtobuf.ProtobufSInt32>.self, value: _storage._mapUint32Sint32, fieldNumber: 138)
      }
      if !_storage._mapUint32Sint64.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufUInt32,SwiftProtobuf.ProtobufSInt64>.self, value: _storage._mapUint32Sint64, fieldNumber: 139)
      }
      if !_storage._mapUint32Fixed32.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufUInt32,SwiftProtobuf.ProtobufFixed32>.self, value: _storage._mapUint32Fixed32, fieldNumber: 140)
      }
      if !_storage._mapUint32Fixed64.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufUInt32,SwiftProtobuf.ProtobufFixed64>.self, value: _storage._mapUint32Fixed64, fieldNumber: 141)
      }
      if !_storage._mapUint32Sfixed32.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufUInt32,SwiftProtobuf.ProtobufSFixed32>.self, value: _storage._mapUint32Sfixed32, fieldNumber: 142)
      }
      if !_storage._mapUint32Sfixed64.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufUInt32,SwiftProtobuf.ProtobufSFixed64>.self, value: _storage._mapUint32Sfixed64, fieldNumber: 143)
      }
      if !_storage._mapUint32Float.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufUInt32,SwiftProtobuf.ProtobufFloat>.self, value: _storage._mapUint32Float, fieldNumber: 144)
      }
      if !_storage._mapUint32Double.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufUInt32,SwiftProtobuf.ProtobufDouble>.self, value: _storage._mapUint32Double, fieldNumber: 145)
      }
      if !_storage._mapUint32Bool.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufUInt32,SwiftProtobuf.ProtobufBool>.self, value: _storage._mapUint32Bool, fieldNumber: 146)
      }
      if !_storage._mapUint32String.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufUInt32,SwiftProtobuf.ProtobufString>.self, value: _storage._mapUint32String, fieldNumber: 147)
      }
      if !_storage._mapUint32Bytes.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufUInt32,SwiftProtobuf.ProtobufBytes>.self, value: _storage._mapUint32Bytes, fieldNumber: 148)
      }
      if !_storage._mapUint32AnEnum.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufEnumMap<SwiftProtobuf.ProtobufUInt32,Fuzz_Testing_AnEnum>.self, value: _storage._mapUint32AnEnum, fieldNumber: 149)
      }
      if !_storage._mapUint32Message.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufUInt32,Fuzz_Testing_Message>.self, value: _storage._mapUint32Message, fieldNumber: 150)
      }
      if !_storage._mapUint64Int32.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufUInt64,SwiftProtobuf.ProtobufInt32>.self, value: _storage._mapUint64Int32, fieldNumber: 151)
      }
      if !_storage._mapUint64Int64.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufUInt64,SwiftProtobuf.ProtobufInt64>.self, value: _storage._mapUint64Int64, fieldNumber: 152)
      }
      if !_storage._mapUint64Uint32.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufUInt64,SwiftProtobuf.ProtobufUInt32>.self, value: _storage._mapUint64Uint32, fieldNumber: 153)
      }
      if !_storage._mapUint64Uint64.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufUInt64,SwiftProtobuf.ProtobufUInt64>.self, value: _storage._mapUint64Uint64, fieldNumber: 154)
      }
      if !_storage._mapUint64Sint32.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufUInt64,SwiftProtobuf.ProtobufSInt32>.self, value: _storage._mapUint64Sint32, fieldNumber: 155)
      }
      if !_storage._mapUint64Sint64.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufUInt64,SwiftProtobuf.ProtobufSInt64>.self, value: _storage._mapUint64Sint64, fieldNumber: 156)
      }
      if !_storage._mapUint64Fixed32.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufUInt64,SwiftProtobuf.ProtobufFixed32>.self, value: _storage._mapUint64Fixed32, fieldNumber: 157)
      }
      if !_storage._mapUint64Fixed64.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufUInt64,SwiftProtobuf.ProtobufFixed64>.self, value: _storage._mapUint64Fixed64, fieldNumber: 158)
      }
      if !_storage._mapUint64Sfixed32.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufUInt64,SwiftProtobuf.ProtobufSFixed32>.self, value: _storage._mapUint64Sfixed32, fieldNumber: 159)
      }
      if !_storage._mapUint64Sfixed64.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufUInt64,SwiftProtobuf.ProtobufSFixed64>.self, value: _storage._mapUint64Sfixed64, fieldNumber: 160)
      }
      if !_storage._mapUint64Float.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufUInt64,SwiftProtobuf.ProtobufFloat>.self, value: _storage._mapUint64Float, fieldNumber: 161)
      }
      if !_storage._mapUint64Double.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufUInt64,SwiftProtobuf.ProtobufDouble>.self, value: _storage._mapUint64Double, fieldNumber: 162)
      }
      if !_storage._mapUint64Bool.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufUInt64,SwiftProtobuf.ProtobufBool>.self, value: _storage._mapUint64Bool, fieldNumber: 163)
      }
      if !_storage._mapUint64String.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufUInt64,SwiftProtobuf.ProtobufString>.self, value: _storage._mapUint64String, fieldNumber: 164)
      }
      if !_storage._mapUint64Bytes.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufUInt64,SwiftProtobuf.ProtobufBytes>.self, value: _storage._mapUint64Bytes, fieldNumber: 165)
      }
      if !_storage._mapUint64AnEnum.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufEnumMap<SwiftProtobuf.ProtobufUInt64,Fuzz_Testing_AnEnum>.self, value: _storage._mapUint64AnEnum, fieldNumber: 166)
      }
      if !_storage._mapUint64Message.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufUInt64,Fuzz_Testing_Message>.self, value: _storage._mapUint64Message, fieldNumber: 167)
      }
      if !_storage._mapSint32Int32.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSInt32,SwiftProtobuf.ProtobufInt32>.self, value: _storage._mapSint32Int32, fieldNumber: 168)
      }
      if !_storage._mapSint32Int64.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSInt32,SwiftProtobuf.ProtobufInt64>.self, value: _storage._mapSint32Int64, fieldNumber: 169)
      }
      if !_storage._mapSint32Uint32.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSInt32,SwiftProtobuf.ProtobufUInt32>.self, value: _storage._mapSint32Uint32, fieldNumber: 170)
      }
      if !_storage._mapSint32Uint64.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSInt32,SwiftProtobuf.ProtobufUInt64>.self, value: _storage._mapSint32Uint64, fieldNumber: 171)
      }
      if !_storage._mapSint32Sint32.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSInt32,SwiftProtobuf.ProtobufSInt32>.self, value: _storage._mapSint32Sint32, fieldNumber: 172)
      }
      if !_storage._mapSint32Sint64.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSInt32,SwiftProtobuf.ProtobufSInt64>.self, value: _storage._mapSint32Sint64, fieldNumber: 173)
      }
      if !_storage._mapSint32Fixed32.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSInt32,SwiftProtobuf.ProtobufFixed32>.self, value: _storage._mapSint32Fixed32, fieldNumber: 174)
      }
      if !_storage._mapSint32Fixed64.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSInt32,SwiftProtobuf.ProtobufFixed64>.self, value: _storage._mapSint32Fixed64, fieldNumber: 175)
      }
      if !_storage._mapSint32Sfixed32.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSInt32,SwiftProtobuf.ProtobufSFixed32>.self, value: _storage._mapSint32Sfixed32, fieldNumber: 176)
      }
      if !_storage._mapSint32Sfixed64.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSInt32,SwiftProtobuf.ProtobufSFixed64>.self, value: _storage._mapSint32Sfixed64, fieldNumber: 177)
      }
      if !_storage._mapSint32Float.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSInt32,SwiftProtobuf.ProtobufFloat>.self, value: _storage._mapSint32Float, fieldNumber: 178)
      }
      if !_storage._mapSint32Double.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSInt32,SwiftProtobuf.ProtobufDouble>.self, value: _storage._mapSint32Double, fieldNumber: 179)
      }
      if !_storage._mapSint32Bool.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSInt32,SwiftProtobuf.ProtobufBool>.self, value: _storage._mapSint32Bool, fieldNumber: 180)
      }
      if !_storage._mapSint32String.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSInt32,SwiftProtobuf.ProtobufString>.self, value: _storage._mapSint32String, fieldNumber: 181)
      }
      if !_storage._mapSint32Bytes.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSInt32,SwiftProtobuf.ProtobufBytes>.self, value: _storage._mapSint32Bytes, fieldNumber: 182)
      }
      if !_storage._mapSint32AnEnum.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufEnumMap<SwiftProtobuf.ProtobufSInt32,Fuzz_Testing_AnEnum>.self, value: _storage._mapSint32AnEnum, fieldNumber: 183)
      }
      if !_storage._mapSint32Message.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufSInt32,Fuzz_Testing_Message>.self, value: _storage._mapSint32Message, fieldNumber: 184)
      }
      if !_storage._mapSint64Int32.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSInt64,SwiftProtobuf.ProtobufInt32>.self, value: _storage._mapSint64Int32, fieldNumber: 185)
      }
      if !_storage._mapSint64Int64.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSInt64,SwiftProtobuf.ProtobufInt64>.self, value: _storage._mapSint64Int64, fieldNumber: 186)
      }
      if !_storage._mapSint64Uint32.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSInt64,SwiftProtobuf.ProtobufUInt32>.self, value: _storage._mapSint64Uint32, fieldNumber: 187)
      }
      if !_storage._mapSint64Uint64.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSInt64,SwiftProtobuf.ProtobufUInt64>.self, value: _storage._mapSint64Uint64, fieldNumber: 188)
      }
      if !_storage._mapSint64Sint32.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSInt64,SwiftProtobuf.ProtobufSInt32>.self, value: _storage._mapSint64Sint32, fieldNumber: 189)
      }
      if !_storage._mapSint64Sint64.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSInt64,SwiftProtobuf.ProtobufSInt64>.self, value: _storage._mapSint64Sint64, fieldNumber: 190)
      }
      if !_storage._mapSint64Fixed32.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSInt64,SwiftProtobuf.ProtobufFixed32>.self, value: _storage._mapSint64Fixed32, fieldNumber: 191)
      }
      if !_storage._mapSint64Fixed64.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSInt64,SwiftProtobuf.ProtobufFixed64>.self, value: _storage._mapSint64Fixed64, fieldNumber: 192)
      }
      if !_storage._mapSint64Sfixed32.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSInt64,SwiftProtobuf.ProtobufSFixed32>.self, value: _storage._mapSint64Sfixed32, fieldNumber: 193)
      }
      if !_storage._mapSint64Sfixed64.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSInt64,SwiftProtobuf.ProtobufSFixed64>.self, value: _storage._mapSint64Sfixed64, fieldNumber: 194)
      }
      if !_storage._mapSint64Float.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSInt64,SwiftProtobuf.ProtobufFloat>.self, value: _storage._mapSint64Float, fieldNumber: 195)
      }
      if !_storage._mapSint64Double.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSInt64,SwiftProtobuf.ProtobufDouble>.self, value: _storage._mapSint64Double, fieldNumber: 196)
      }
      if !_storage._mapSint64Bool.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSInt64,SwiftProtobuf.ProtobufBool>.self, value: _storage._mapSint64Bool, fieldNumber: 197)
      }
      if !_storage._mapSint64String.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSInt64,SwiftProtobuf.ProtobufString>.self, value: _storage._mapSint64String, fieldNumber: 198)
      }
      if !_storage._mapSint64Bytes.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSInt64,SwiftProtobuf.ProtobufBytes>.self, value: _storage._mapSint64Bytes, fieldNumber: 199)
      }
      if !_storage._mapSint64AnEnum.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufEnumMap<SwiftProtobuf.ProtobufSInt64,Fuzz_Testing_AnEnum>.self, value: _storage._mapSint64AnEnum, fieldNumber: 200)
      }
      if !_storage._mapSint64Message.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufSInt64,Fuzz_Testing_Message>.self, value: _storage._mapSint64Message, fieldNumber: 201)
      }
      if !_storage._mapFixed32Int32.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufFixed32,SwiftProtobuf.ProtobufInt32>.self, value: _storage._mapFixed32Int32, fieldNumber: 202)
      }
      if !_storage._mapFixed32Int64.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufFixed32,SwiftProtobuf.ProtobufInt64>.self, value: _storage._mapFixed32Int64, fieldNumber: 203)
      }
      if !_storage._mapFixed32Uint32.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufFixed32,SwiftProtobuf.ProtobufUInt32>.self, value: _storage._mapFixed32Uint32, fieldNumber: 204)
      }
      if !_storage._mapFixed32Uint64.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufFixed32,SwiftProtobuf.ProtobufUInt64>.self, value: _storage._mapFixed32Uint64, fieldNumber: 205)
      }
      if !_storage._mapFixed32Sint32.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufFixed32,SwiftProtobuf.ProtobufSInt32>.self, value: _storage._mapFixed32Sint32, fieldNumber: 206)
      }
      if !_storage._mapFixed32Sint64.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufFixed32,SwiftProtobuf.ProtobufSInt64>.self, value: _storage._mapFixed32Sint64, fieldNumber: 207)
      }
      if !_storage._mapFixed32Fixed32.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufFixed32,SwiftProtobuf.ProtobufFixed32>.self, value: _storage._mapFixed32Fixed32, fieldNumber: 208)
      }
      if !_storage._mapFixed32Fixed64.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufFixed32,SwiftProtobuf.ProtobufFixed64>.self, value: _storage._mapFixed32Fixed64, fieldNumber: 209)
      }
      if !_storage._mapFixed32Sfixed32.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufFixed32,SwiftProtobuf.ProtobufSFixed32>.self, value: _storage._mapFixed32Sfixed32, fieldNumber: 210)
      }
      if !_storage._mapFixed32Sfixed64.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufFixed32,SwiftProtobuf.ProtobufSFixed64>.self, value: _storage._mapFixed32Sfixed64, fieldNumber: 211)
      }
      if !_storage._mapFixed32Float.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufFixed32,SwiftProtobuf.ProtobufFloat>.self, value: _storage._mapFixed32Float, fieldNumber: 212)
      }
      if !_storage._mapFixed32Double.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufFixed32,SwiftProtobuf.ProtobufDouble>.self, value: _storage._mapFixed32Double, fieldNumber: 213)
      }
      if !_storage._mapFixed32Bool.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufFixed32,SwiftProtobuf.ProtobufBool>.self, value: _storage._mapFixed32Bool, fieldNumber: 214)
      }
      if !_storage._mapFixed32String.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufFixed32,SwiftProtobuf.ProtobufString>.self, value: _storage._mapFixed32String, fieldNumber: 215)
      }
      if !_storage._mapFixed32Bytes.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufFixed32,SwiftProtobuf.ProtobufBytes>.self, value: _storage._mapFixed32Bytes, fieldNumber: 216)
      }
      if !_storage._mapFixed32AnEnum.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufEnumMap<SwiftProtobuf.ProtobufFixed32,Fuzz_Testing_AnEnum>.self, value: _storage._mapFixed32AnEnum, fieldNumber: 217)
      }
      if !_storage._mapFixed32Message.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufFixed32,Fuzz_Testing_Message>.self, value: _storage._mapFixed32Message, fieldNumber: 218)
      }
      if !_storage._mapFixed64Int32.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufFixed64,SwiftProtobuf.ProtobufInt32>.self, value: _storage._mapFixed64Int32, fieldNumber: 219)
      }
      if !_storage._mapFixed64Int64.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufFixed64,SwiftProtobuf.ProtobufInt64>.self, value: _storage._mapFixed64Int64, fieldNumber: 220)
      }
      if !_storage._mapFixed64Uint32.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufFixed64,SwiftProtobuf.ProtobufUInt32>.self, value: _storage._mapFixed64Uint32, fieldNumber: 221)
      }
      if !_storage._mapFixed64Uint64.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufFixed64,SwiftProtobuf.ProtobufUInt64>.self, value: _storage._mapFixed64Uint64, fieldNumber: 222)
      }
      if !_storage._mapFixed64Sint32.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufFixed64,SwiftProtobuf.ProtobufSInt32>.self, value: _storage._mapFixed64Sint32, fieldNumber: 223)
      }
      if !_storage._mapFixed64Sint64.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufFixed64,SwiftProtobuf.ProtobufSInt64>.self, value: _storage._mapFixed64Sint64, fieldNumber: 224)
      }
      if !_storage._mapFixed64Fixed32.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufFixed64,SwiftProtobuf.ProtobufFixed32>.self, value: _storage._mapFixed64Fixed32, fieldNumber: 225)
      }
      if !_storage._mapFixed64Fixed64.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufFixed64,SwiftProtobuf.ProtobufFixed64>.self, value: _storage._mapFixed64Fixed64, fieldNumber: 226)
      }
      if !_storage._mapFixed64Sfixed32.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufFixed64,SwiftProtobuf.ProtobufSFixed32>.self, value: _storage._mapFixed64Sfixed32, fieldNumber: 227)
      }
      if !_storage._mapFixed64Sfixed64.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufFixed64,SwiftProtobuf.ProtobufSFixed64>.self, value: _storage._mapFixed64Sfixed64, fieldNumber: 228)
      }
      if !_storage._mapFixed64Float.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufFixed64,SwiftProtobuf.ProtobufFloat>.self, value: _storage._mapFixed64Float, fieldNumber: 229)
      }
      if !_storage._mapFixed64Double.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufFixed64,SwiftProtobuf.ProtobufDouble>.self, value: _storage._mapFixed64Double, fieldNumber: 230)
      }
      if !_storage._mapFixed64Bool.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufFixed64,SwiftProtobuf.ProtobufBool>.self, value: _storage._mapFixed64Bool, fieldNumber: 231)
      }
      if !_storage._mapFixed64String.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufFixed64,SwiftProtobuf.ProtobufString>.self, value: _storage._mapFixed64String, fieldNumber: 232)
      }
      if !_storage._mapFixed64Bytes.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufFixed64,SwiftProtobuf.ProtobufBytes>.self, value: _storage._mapFixed64Bytes, fieldNumber: 233)
      }
      if !_storage._mapFixed64AnEnum.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufEnumMap<SwiftProtobuf.ProtobufFixed64,Fuzz_Testing_AnEnum>.self, value: _storage._mapFixed64AnEnum, fieldNumber: 234)
      }
      if !_storage._mapFixed64Message.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufFixed64,Fuzz_Testing_Message>.self, value: _storage._mapFixed64Message, fieldNumber: 235)
      }
      if !_storage._mapSfixed32Int32.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSFixed32,SwiftProtobuf.ProtobufInt32>.self, value: _storage._mapSfixed32Int32, fieldNumber: 236)
      }
      if !_storage._mapSfixed32Int64.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSFixed32,SwiftProtobuf.ProtobufInt64>.self, value: _storage._mapSfixed32Int64, fieldNumber: 237)
      }
      if !_storage._mapSfixed32Uint32.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSFixed32,SwiftProtobuf.ProtobufUInt32>.self, value: _storage._mapSfixed32Uint32, fieldNumber: 238)
      }
      if !_storage._mapSfixed32Uint64.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSFixed32,SwiftProtobuf.ProtobufUInt64>.self, value: _storage._mapSfixed32Uint64, fieldNumber: 239)
      }
      if !_storage._mapSfixed32Sint32.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSFixed32,SwiftProtobuf.ProtobufSInt32>.self, value: _storage._mapSfixed32Sint32, fieldNumber: 240)
      }
      if !_storage._mapSfixed32Sint64.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSFixed32,SwiftProtobuf.ProtobufSInt64>.self, value: _storage._mapSfixed32Sint64, fieldNumber: 241)
      }
      if !_storage._mapSfixed32Fixed32.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSFixed32,SwiftProtobuf.ProtobufFixed32>.self, value: _storage._mapSfixed32Fixed32, fieldNumber: 242)
      }
      if !_storage._mapSfixed32Fixed64.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSFixed32,SwiftProtobuf.ProtobufFixed64>.self, value: _storage._mapSfixed32Fixed64, fieldNumber: 243)
      }
      if !_storage._mapSfixed32Sfixed32.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSFixed32,SwiftProtobuf.ProtobufSFixed32>.self, value: _storage._mapSfixed32Sfixed32, fieldNumber: 244)
      }
      if !_storage._mapSfixed32Sfixed64.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSFixed32,SwiftProtobuf.ProtobufSFixed64>.self, value: _storage._mapSfixed32Sfixed64, fieldNumber: 245)
      }
      if !_storage._mapSfixed32Float.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSFixed32,SwiftProtobuf.ProtobufFloat>.self, value: _storage._mapSfixed32Float, fieldNumber: 246)
      }
      if !_storage._mapSfixed32Double.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSFixed32,SwiftProtobuf.ProtobufDouble>.self, value: _storage._mapSfixed32Double, fieldNumber: 247)
      }
      if !_storage._mapSfixed32Bool.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSFixed32,SwiftProtobuf.ProtobufBool>.self, value: _storage._mapSfixed32Bool, fieldNumber: 248)
      }
      if !_storage._mapSfixed32String.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSFixed32,SwiftProtobuf.ProtobufString>.self, value: _storage._mapSfixed32String, fieldNumber: 249)
      }
      if !_storage._mapSfixed32Bytes.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSFixed32,SwiftProtobuf.ProtobufBytes>.self, value: _storage._mapSfixed32Bytes, fieldNumber: 250)
      }
      if !_storage._mapSfixed32AnEnum.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufEnumMap<SwiftProtobuf.ProtobufSFixed32,Fuzz_Testing_AnEnum>.self, value: _storage._mapSfixed32AnEnum, fieldNumber: 251)
      }
      if !_storage._mapSfixed32Message.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufSFixed32,Fuzz_Testing_Message>.self, value: _storage._mapSfixed32Message, fieldNumber: 252)
      }
      if !_storage._mapSfixed64Int32.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSFixed64,SwiftProtobuf.ProtobufInt32>.self, value: _storage._mapSfixed64Int32, fieldNumber: 253)
      }
      if !_storage._mapSfixed64Int64.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSFixed64,SwiftProtobuf.ProtobufInt64>.self, value: _storage._mapSfixed64Int64, fieldNumber: 254)
      }
      if !_storage._mapSfixed64Uint32.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSFixed64,SwiftProtobuf.ProtobufUInt32>.self, value: _storage._mapSfixed64Uint32, fieldNumber: 255)
      }
      if !_storage._mapSfixed64Uint64.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSFixed64,SwiftProtobuf.ProtobufUInt64>.self, value: _storage._mapSfixed64Uint64, fieldNumber: 256)
      }
      if !_storage._mapSfixed64Sint32.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSFixed64,SwiftProtobuf.ProtobufSInt32>.self, value: _storage._mapSfixed64Sint32, fieldNumber: 257)
      }
      if !_storage._mapSfixed64Sint64.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSFixed64,SwiftProtobuf.ProtobufSInt64>.self, value: _storage._mapSfixed64Sint64, fieldNumber: 258)
      }
      if !_storage._mapSfixed64Fixed32.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSFixed64,SwiftProtobuf.ProtobufFixed32>.self, value: _storage._mapSfixed64Fixed32, fieldNumber: 259)
      }
      if !_storage._mapSfixed64Fixed64.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSFixed64,SwiftProtobuf.ProtobufFixed64>.self, value: _storage._mapSfixed64Fixed64, fieldNumber: 260)
      }
      if !_storage._mapSfixed64Sfixed32.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSFixed64,SwiftProtobuf.ProtobufSFixed32>.self, value: _storage._mapSfixed64Sfixed32, fieldNumber: 261)
      }
      if !_storage._mapSfixed64Sfixed64.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSFixed64,SwiftProtobuf.ProtobufSFixed64>.self, value: _storage._mapSfixed64Sfixed64, fieldNumber: 262)
      }
      if !_storage._mapSfixed64Float.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSFixed64,SwiftProtobuf.ProtobufFloat>.self, value: _storage._mapSfixed64Float, fieldNumber: 263)
      }
      if !_storage._mapSfixed64Double.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSFixed64,SwiftProtobuf.ProtobufDouble>.self, value: _storage._mapSfixed64Double, fieldNumber: 264)
      }
      if !_storage._mapSfixed64Bool.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSFixed64,SwiftProtobuf.ProtobufBool>.self, value: _storage._mapSfixed64Bool, fieldNumber: 265)
      }
      if !_storage._mapSfixed64String.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSFixed64,SwiftProtobuf.ProtobufString>.self, value: _storage._mapSfixed64String, fieldNumber: 266)
      }
      if !_storage._mapSfixed64Bytes.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSFixed64,SwiftProtobuf.ProtobufBytes>.self, value: _storage._mapSfixed64Bytes, fieldNumber: 267)
      }
      if !_storage._mapSfixed64AnEnum.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufEnumMap<SwiftProtobuf.ProtobufSFixed64,Fuzz_Testing_AnEnum>.self, value: _storage._mapSfixed64AnEnum, fieldNumber: 268)
      }
      if !_storage._mapSfixed64Message.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufSFixed64,Fuzz_Testing_Message>.self, value: _storage._mapSfixed64Message, fieldNumber: 269)
      }
      if !_storage._mapBoolInt32.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufBool,SwiftProtobuf.ProtobufInt32>.self, value: _storage._mapBoolInt32, fieldNumber: 270)
      }
      if !_storage._mapBoolInt64.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufBool,SwiftProtobuf.ProtobufInt64>.self, value: _storage._mapBoolInt64, fieldNumber: 271)
      }
      if !_storage._mapBoolUint32.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufBool,SwiftProtobuf.ProtobufUInt32>.self, value: _storage._mapBoolUint32, fieldNumber: 272)
      }
      if !_storage._mapBoolUint64.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufBool,SwiftProtobuf.ProtobufUInt64>.self, value: _storage._mapBoolUint64, fieldNumber: 273)
      }
      if !_storage._mapBoolSint32.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufBool,SwiftProtobuf.ProtobufSInt32>.self, value: _storage._mapBoolSint32, fieldNumber: 274)
      }
      if !_storage._mapBoolSint64.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufBool,SwiftProtobuf.ProtobufSInt64>.self, value: _storage._mapBoolSint64, fieldNumber: 275)
      }
      if !_storage._mapBoolFixed32.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufBool,SwiftProtobuf.ProtobufFixed32>.self, value: _storage._mapBoolFixed32, fieldNumber: 276)
      }
      if !_storage._mapBoolFixed64.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufBool,SwiftProtobuf.ProtobufFixed64>.self, value: _storage._mapBoolFixed64, fieldNumber: 277)
      }
      if !_storage._mapBoolSfixed32.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufBool,SwiftProtobuf.ProtobufSFixed32>.self, value: _storage._mapBoolSfixed32, fieldNumber: 278)
      }
      if !_storage._mapBoolSfixed64.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufBool,SwiftProtobuf.ProtobufSFixed64>.self, value: _storage._mapBoolSfixed64, fieldNumber: 279)
      }
      if !_storage._mapBoolFloat.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufBool,SwiftProtobuf.ProtobufFloat>.self, value: _storage._mapBoolFloat, fieldNumber: 280)
      }
      if !_storage._mapBoolDouble.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufBool,SwiftProtobuf.ProtobufDouble>.self, value: _storage._mapBoolDouble, fieldNumber: 281)
      }
      if !_storage._mapBoolBool.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufBool,SwiftProtobuf.ProtobufBool>.self, value: _storage._mapBoolBool, fieldNumber: 282)
      }
      if !_storage._mapBoolString.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufBool,SwiftProtobuf.ProtobufString>.self, value: _storage._mapBoolString, fieldNumber: 283)
      }
      if !_storage._mapBoolBytes.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufBool,SwiftProtobuf.ProtobufBytes>.self, value: _storage._mapBoolBytes, fieldNumber: 284)
      }
      if !_storage._mapBoolAnEnum.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufEnumMap<SwiftProtobuf.ProtobufBool,Fuzz_Testing_AnEnum>.self, value: _storage._mapBoolAnEnum, fieldNumber: 285)
      }
      if !_storage._mapBoolMessage.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufBool,Fuzz_Testing_Message>.self, value: _storage._mapBoolMessage, fieldNumber: 286)
      }
      if let v = _storage._wktAny {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 500)
      }
      if let v = _storage._wktApi {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 501)
      }
      if let v = _storage._wktDuration {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 502)
      }
      if let v = _storage._wktEmpty {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 503)
      }
      if let v = _storage._wktFieldMask {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 504)
      }
      if let v = _storage._wktSourceContext {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 505)
      }
      if let v = _storage._wktStruct {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 506)
      }
      if let v = _storage._wktTimestamp {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 507)
      }
      if let v = _storage._wktType {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 508)
      }
      if let v = _storage._wktDoubleValue {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 509)
      }
      if let v = _storage._wktFloatValue {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 510)
      }
      if let v = _storage._wktInt64Value {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 511)
      }
      if let v = _storage._wktUint64Value {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 512)
      }
      if let v = _storage._wktInt32Value {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 513)
      }
      if let v = _storage._wktUint32Value {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 514)
      }
      if let v = _storage._wktBoolValue {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 515)
      }
      if let v = _storage._wktStringValue {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 516)
      }
      if let v = _storage._wktBytesValue {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 517)
      }
      try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 1000, end: 2001)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Fuzz_Testing_Message, rhs: Fuzz_Testing_Message) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._singularInt32 != rhs_storage._singularInt32 {return false}
        if _storage._singularInt64 != rhs_storage._singularInt64 {return false}
        if _storage._singularUint32 != rhs_storage._singularUint32 {return false}
        if _storage._singularUint64 != rhs_storage._singularUint64 {return false}
        if _storage._singularSint32 != rhs_storage._singularSint32 {return false}
        if _storage._singularSint64 != rhs_storage._singularSint64 {return false}
        if _storage._singularFixed32 != rhs_storage._singularFixed32 {return false}
        if _storage._singularFixed64 != rhs_storage._singularFixed64 {return false}
        if _storage._singularSfixed32 != rhs_storage._singularSfixed32 {return false}
        if _storage._singularSfixed64 != rhs_storage._singularSfixed64 {return false}
        if _storage._singularFloat != rhs_storage._singularFloat {return false}
        if _storage._singularDouble != rhs_storage._singularDouble {return false}
        if _storage._singularBool != rhs_storage._singularBool {return false}
        if _storage._singularString != rhs_storage._singularString {return false}
        if _storage._singularBytes != rhs_storage._singularBytes {return false}
        if _storage._singularEnum != rhs_storage._singularEnum {return false}
        if _storage._singularGroup != rhs_storage._singularGroup {return false}
        if _storage._singularMessage != rhs_storage._singularMessage {return false}
        if _storage._repeatedInt32 != rhs_storage._repeatedInt32 {return false}
        if _storage._repeatedInt64 != rhs_storage._repeatedInt64 {return false}
        if _storage._repeatedUint32 != rhs_storage._repeatedUint32 {return false}
        if _storage._repeatedUint64 != rhs_storage._repeatedUint64 {return false}
        if _storage._repeatedSint32 != rhs_storage._repeatedSint32 {return false}
        if _storage._repeatedSint64 != rhs_storage._repeatedSint64 {return false}
        if _storage._repeatedFixed32 != rhs_storage._repeatedFixed32 {return false}
        if _storage._repeatedFixed64 != rhs_storage._repeatedFixed64 {return false}
        if _storage._repeatedSfixed32 != rhs_storage._repeatedSfixed32 {return false}
        if _storage._repeatedSfixed64 != rhs_storage._repeatedSfixed64 {return false}
        if _storage._repeatedFloat != rhs_storage._repeatedFloat {return false}
        if _storage._repeatedDouble != rhs_storage._repeatedDouble {return false}
        if _storage._repeatedBool != rhs_storage._repeatedBool {return false}
        if _storage._repeatedString != rhs_storage._repeatedString {return false}
        if _storage._repeatedBytes != rhs_storage._repeatedBytes {return false}
        if _storage._repeatedEnum != rhs_storage._repeatedEnum {return false}
        if _storage._repeatedGroup != rhs_storage._repeatedGroup {return false}
        if _storage._repeatedMessage != rhs_storage._repeatedMessage {return false}
        if _storage._o != rhs_storage._o {return false}
        if _storage._mapInt32Int32 != rhs_storage._mapInt32Int32 {return false}
        if _storage._mapInt32Int64 != rhs_storage._mapInt32Int64 {return false}
        if _storage._mapInt32Uint32 != rhs_storage._mapInt32Uint32 {return false}
        if _storage._mapInt32Uint64 != rhs_storage._mapInt32Uint64 {return false}
        if _storage._mapInt32Sint32 != rhs_storage._mapInt32Sint32 {return false}
        if _storage._mapInt32Sint64 != rhs_storage._mapInt32Sint64 {return false}
        if _storage._mapInt32Fixed32 != rhs_storage._mapInt32Fixed32 {return false}
        if _storage._mapInt32Fixed64 != rhs_storage._mapInt32Fixed64 {return false}
        if _storage._mapInt32Sfixed32 != rhs_storage._mapInt32Sfixed32 {return false}
        if _storage._mapInt32Sfixed64 != rhs_storage._mapInt32Sfixed64 {return false}
        if _storage._mapInt32Float != rhs_storage._mapInt32Float {return false}
        if _storage._mapInt32Double != rhs_storage._mapInt32Double {return false}
        if _storage._mapInt32Bool != rhs_storage._mapInt32Bool {return false}
        if _storage._mapInt32String != rhs_storage._mapInt32String {return false}
        if _storage._mapInt32Bytes != rhs_storage._mapInt32Bytes {return false}
        if _storage._mapInt32AnEnum != rhs_storage._mapInt32AnEnum {return false}
        if _storage._mapInt32Message != rhs_storage._mapInt32Message {return false}
        if _storage._mapInt64Int32 != rhs_storage._mapInt64Int32 {return false}
        if _storage._mapInt64Int64 != rhs_storage._mapInt64Int64 {return false}
        if _storage._mapInt64Uint32 != rhs_storage._mapInt64Uint32 {return false}
        if _storage._mapInt64Uint64 != rhs_storage._mapInt64Uint64 {return false}
        if _storage._mapInt64Sint32 != rhs_storage._mapInt64Sint32 {return false}
        if _storage._mapInt64Sint64 != rhs_storage._mapInt64Sint64 {return false}
        if _storage._mapInt64Fixed32 != rhs_storage._mapInt64Fixed32 {return false}
        if _storage._mapInt64Fixed64 != rhs_storage._mapInt64Fixed64 {return false}
        if _storage._mapInt64Sfixed32 != rhs_storage._mapInt64Sfixed32 {return false}
        if _storage._mapInt64Sfixed64 != rhs_storage._mapInt64Sfixed64 {return false}
        if _storage._mapInt64Float != rhs_storage._mapInt64Float {return false}
        if _storage._mapInt64Double != rhs_storage._mapInt64Double {return false}
        if _storage._mapInt64Bool != rhs_storage._mapInt64Bool {return false}
        if _storage._mapInt64String != rhs_storage._mapInt64String {return false}
        if _storage._mapInt64Bytes != rhs_storage._mapInt64Bytes {return false}
        if _storage._mapInt64AnEnum != rhs_storage._mapInt64AnEnum {return false}
        if _storage._mapInt64Message != rhs_storage._mapInt64Message {return false}
        if _storage._mapUint32Int32 != rhs_storage._mapUint32Int32 {return false}
        if _storage._mapUint32Int64 != rhs_storage._mapUint32Int64 {return false}
        if _storage._mapUint32Uint32 != rhs_storage._mapUint32Uint32 {return false}
        if _storage._mapUint32Uint64 != rhs_storage._mapUint32Uint64 {return false}
        if _storage._mapUint32Sint32 != rhs_storage._mapUint32Sint32 {return false}
        if _storage._mapUint32Sint64 != rhs_storage._mapUint32Sint64 {return false}
        if _storage._mapUint32Fixed32 != rhs_storage._mapUint32Fixed32 {return false}
        if _storage._mapUint32Fixed64 != rhs_storage._mapUint32Fixed64 {return false}
        if _storage._mapUint32Sfixed32 != rhs_storage._mapUint32Sfixed32 {return false}
        if _storage._mapUint32Sfixed64 != rhs_storage._mapUint32Sfixed64 {return false}
        if _storage._mapUint32Float != rhs_storage._mapUint32Float {return false}
        if _storage._mapUint32Double != rhs_storage._mapUint32Double {return false}
        if _storage._mapUint32Bool != rhs_storage._mapUint32Bool {return false}
        if _storage._mapUint32String != rhs_storage._mapUint32String {return false}
        if _storage._mapUint32Bytes != rhs_storage._mapUint32Bytes {return false}
        if _storage._mapUint32AnEnum != rhs_storage._mapUint32AnEnum {return false}
        if _storage._mapUint32Message != rhs_storage._mapUint32Message {return false}
        if _storage._mapUint64Int32 != rhs_storage._mapUint64Int32 {return false}
        if _storage._mapUint64Int64 != rhs_storage._mapUint64Int64 {return false}
        if _storage._mapUint64Uint32 != rhs_storage._mapUint64Uint32 {return false}
        if _storage._mapUint64Uint64 != rhs_storage._mapUint64Uint64 {return false}
        if _storage._mapUint64Sint32 != rhs_storage._mapUint64Sint32 {return false}
        if _storage._mapUint64Sint64 != rhs_storage._mapUint64Sint64 {return false}
        if _storage._mapUint64Fixed32 != rhs_storage._mapUint64Fixed32 {return false}
        if _storage._mapUint64Fixed64 != rhs_storage._mapUint64Fixed64 {return false}
        if _storage._mapUint64Sfixed32 != rhs_storage._mapUint64Sfixed32 {return false}
        if _storage._mapUint64Sfixed64 != rhs_storage._mapUint64Sfixed64 {return false}
        if _storage._mapUint64Float != rhs_storage._mapUint64Float {return false}
        if _storage._mapUint64Double != rhs_storage._mapUint64Double {return false}
        if _storage._mapUint64Bool != rhs_storage._mapUint64Bool {return false}
        if _storage._mapUint64String != rhs_storage._mapUint64String {return false}
        if _storage._mapUint64Bytes != rhs_storage._mapUint64Bytes {return false}
        if _storage._mapUint64AnEnum != rhs_storage._mapUint64AnEnum {return false}
        if _storage._mapUint64Message != rhs_storage._mapUint64Message {return false}
        if _storage._mapSint32Int32 != rhs_storage._mapSint32Int32 {return false}
        if _storage._mapSint32Int64 != rhs_storage._mapSint32Int64 {return false}
        if _storage._mapSint32Uint32 != rhs_storage._mapSint32Uint32 {return false}
        if _storage._mapSint32Uint64 != rhs_storage._mapSint32Uint64 {return false}
        if _storage._mapSint32Sint32 != rhs_storage._mapSint32Sint32 {return false}
        if _storage._mapSint32Sint64 != rhs_storage._mapSint32Sint64 {return false}
        if _storage._mapSint32Fixed32 != rhs_storage._mapSint32Fixed32 {return false}
        if _storage._mapSint32Fixed64 != rhs_storage._mapSint32Fixed64 {return false}
        if _storage._mapSint32Sfixed32 != rhs_storage._mapSint32Sfixed32 {return false}
        if _storage._mapSint32Sfixed64 != rhs_storage._mapSint32Sfixed64 {return false}
        if _storage._mapSint32Float != rhs_storage._mapSint32Float {return false}
        if _storage._mapSint32Double != rhs_storage._mapSint32Double {return false}
        if _storage._mapSint32Bool != rhs_storage._mapSint32Bool {return false}
        if _storage._mapSint32String != rhs_storage._mapSint32String {return false}
        if _storage._mapSint32Bytes != rhs_storage._mapSint32Bytes {return false}
        if _storage._mapSint32AnEnum != rhs_storage._mapSint32AnEnum {return false}
        if _storage._mapSint32Message != rhs_storage._mapSint32Message {return false}
        if _storage._mapSint64Int32 != rhs_storage._mapSint64Int32 {return false}
        if _storage._mapSint64Int64 != rhs_storage._mapSint64Int64 {return false}
        if _storage._mapSint64Uint32 != rhs_storage._mapSint64Uint32 {return false}
        if _storage._mapSint64Uint64 != rhs_storage._mapSint64Uint64 {return false}
        if _storage._mapSint64Sint32 != rhs_storage._mapSint64Sint32 {return false}
        if _storage._mapSint64Sint64 != rhs_storage._mapSint64Sint64 {return false}
        if _storage._mapSint64Fixed32 != rhs_storage._mapSint64Fixed32 {return false}
        if _storage._mapSint64Fixed64 != rhs_storage._mapSint64Fixed64 {return false}
        if _storage._mapSint64Sfixed32 != rhs_storage._mapSint64Sfixed32 {return false}
        if _storage._mapSint64Sfixed64 != rhs_storage._mapSint64Sfixed64 {return false}
        if _storage._mapSint64Float != rhs_storage._mapSint64Float {return false}
        if _storage._mapSint64Double != rhs_storage._mapSint64Double {return false}
        if _storage._mapSint64Bool != rhs_storage._mapSint64Bool {return false}
        if _storage._mapSint64String != rhs_storage._mapSint64String {return false}
        if _storage._mapSint64Bytes != rhs_storage._mapSint64Bytes {return false}
        if _storage._mapSint64AnEnum != rhs_storage._mapSint64AnEnum {return false}
        if _storage._mapSint64Message != rhs_storage._mapSint64Message {return false}
        if _storage._mapFixed32Int32 != rhs_storage._mapFixed32Int32 {return false}
        if _storage._mapFixed32Int64 != rhs_storage._mapFixed32Int64 {return false}
        if _storage._mapFixed32Uint32 != rhs_storage._mapFixed32Uint32 {return false}
        if _storage._mapFixed32Uint64 != rhs_storage._mapFixed32Uint64 {return false}
        if _storage._mapFixed32Sint32 != rhs_storage._mapFixed32Sint32 {return false}
        if _storage._mapFixed32Sint64 != rhs_storage._mapFixed32Sint64 {return false}
        if _storage._mapFixed32Fixed32 != rhs_storage._mapFixed32Fixed32 {return false}
        if _storage._mapFixed32Fixed64 != rhs_storage._mapFixed32Fixed64 {return false}
        if _storage._mapFixed32Sfixed32 != rhs_storage._mapFixed32Sfixed32 {return false}
        if _storage._mapFixed32Sfixed64 != rhs_storage._mapFixed32Sfixed64 {return false}
        if _storage._mapFixed32Float != rhs_storage._mapFixed32Float {return false}
        if _storage._mapFixed32Double != rhs_storage._mapFixed32Double {return false}
        if _storage._mapFixed32Bool != rhs_storage._mapFixed32Bool {return false}
        if _storage._mapFixed32String != rhs_storage._mapFixed32String {return false}
        if _storage._mapFixed32Bytes != rhs_storage._mapFixed32Bytes {return false}
        if _storage._mapFixed32AnEnum != rhs_storage._mapFixed32AnEnum {return false}
        if _storage._mapFixed32Message != rhs_storage._mapFixed32Message {return false}
        if _storage._mapFixed64Int32 != rhs_storage._mapFixed64Int32 {return false}
        if _storage._mapFixed64Int64 != rhs_storage._mapFixed64Int64 {return false}
        if _storage._mapFixed64Uint32 != rhs_storage._mapFixed64Uint32 {return false}
        if _storage._mapFixed64Uint64 != rhs_storage._mapFixed64Uint64 {return false}
        if _storage._mapFixed64Sint32 != rhs_storage._mapFixed64Sint32 {return false}
        if _storage._mapFixed64Sint64 != rhs_storage._mapFixed64Sint64 {return false}
        if _storage._mapFixed64Fixed32 != rhs_storage._mapFixed64Fixed32 {return false}
        if _storage._mapFixed64Fixed64 != rhs_storage._mapFixed64Fixed64 {return false}
        if _storage._mapFixed64Sfixed32 != rhs_storage._mapFixed64Sfixed32 {return false}
        if _storage._mapFixed64Sfixed64 != rhs_storage._mapFixed64Sfixed64 {return false}
        if _storage._mapFixed64Float != rhs_storage._mapFixed64Float {return false}
        if _storage._mapFixed64Double != rhs_storage._mapFixed64Double {return false}
        if _storage._mapFixed64Bool != rhs_storage._mapFixed64Bool {return false}
        if _storage._mapFixed64String != rhs_storage._mapFixed64String {return false}
        if _storage._mapFixed64Bytes != rhs_storage._mapFixed64Bytes {return false}
        if _storage._mapFixed64AnEnum != rhs_storage._mapFixed64AnEnum {return false}
        if _storage._mapFixed64Message != rhs_storage._mapFixed64Message {return false}
        if _storage._mapSfixed32Int32 != rhs_storage._mapSfixed32Int32 {return false}
        if _storage._mapSfixed32Int64 != rhs_storage._mapSfixed32Int64 {return false}
        if _storage._mapSfixed32Uint32 != rhs_storage._mapSfixed32Uint32 {return false}
        if _storage._mapSfixed32Uint64 != rhs_storage._mapSfixed32Uint64 {return false}
        if _storage._mapSfixed32Sint32 != rhs_storage._mapSfixed32Sint32 {return false}
        if _storage._mapSfixed32Sint64 != rhs_storage._mapSfixed32Sint64 {return false}
        if _storage._mapSfixed32Fixed32 != rhs_storage._mapSfixed32Fixed32 {return false}
        if _storage._mapSfixed32Fixed64 != rhs_storage._mapSfixed32Fixed64 {return false}
        if _storage._mapSfixed32Sfixed32 != rhs_storage._mapSfixed32Sfixed32 {return false}
        if _storage._mapSfixed32Sfixed64 != rhs_storage._mapSfixed32Sfixed64 {return false}
        if _storage._mapSfixed32Float != rhs_storage._mapSfixed32Float {return false}
        if _storage._mapSfixed32Double != rhs_storage._mapSfixed32Double {return false}
        if _storage._mapSfixed32Bool != rhs_storage._mapSfixed32Bool {return false}
        if _storage._mapSfixed32String != rhs_storage._mapSfixed32String {return false}
        if _storage._mapSfixed32Bytes != rhs_storage._mapSfixed32Bytes {return false}
        if _storage._mapSfixed32AnEnum != rhs_storage._mapSfixed32AnEnum {return false}
        if _storage._mapSfixed32Message != rhs_storage._mapSfixed32Message {return false}
        if _storage._mapSfixed64Int32 != rhs_storage._mapSfixed64Int32 {return false}
        if _storage._mapSfixed64Int64 != rhs_storage._mapSfixed64Int64 {return false}
        if _storage._mapSfixed64Uint32 != rhs_storage._mapSfixed64Uint32 {return false}
        if _storage._mapSfixed64Uint64 != rhs_storage._mapSfixed64Uint64 {return false}
        if _storage._mapSfixed64Sint32 != rhs_storage._mapSfixed64Sint32 {return false}
        if _storage._mapSfixed64Sint64 != rhs_storage._mapSfixed64Sint64 {return false}
        if _storage._mapSfixed64Fixed32 != rhs_storage._mapSfixed64Fixed32 {return false}
        if _storage._mapSfixed64Fixed64 != rhs_storage._mapSfixed64Fixed64 {return false}
        if _storage._mapSfixed64Sfixed32 != rhs_storage._mapSfixed64Sfixed32 {return false}
        if _storage._mapSfixed64Sfixed64 != rhs_storage._mapSfixed64Sfixed64 {return false}
        if _storage._mapSfixed64Float != rhs_storage._mapSfixed64Float {return false}
        if _storage._mapSfixed64Double != rhs_storage._mapSfixed64Double {return false}
        if _storage._mapSfixed64Bool != rhs_storage._mapSfixed64Bool {return false}
        if _storage._mapSfixed64String != rhs_storage._mapSfixed64String {return false}
        if _storage._mapSfixed64Bytes != rhs_storage._mapSfixed64Bytes {return false}
        if _storage._mapSfixed64AnEnum != rhs_storage._mapSfixed64AnEnum {return false}
        if _storage._mapSfixed64Message != rhs_storage._mapSfixed64Message {return false}
        if _storage._mapBoolInt32 != rhs_storage._mapBoolInt32 {return false}
        if _storage._mapBoolInt64 != rhs_storage._mapBoolInt64 {return false}
        if _storage._mapBoolUint32 != rhs_storage._mapBoolUint32 {return false}
        if _storage._mapBoolUint64 != rhs_storage._mapBoolUint64 {return false}
        if _storage._mapBoolSint32 != rhs_storage._mapBoolSint32 {return false}
        if _storage._mapBoolSint64 != rhs_storage._mapBoolSint64 {return false}
        if _storage._mapBoolFixed32 != rhs_storage._mapBoolFixed32 {return false}
        if _storage._mapBoolFixed64 != rhs_storage._mapBoolFixed64 {return false}
        if _storage._mapBoolSfixed32 != rhs_storage._mapBoolSfixed32 {return false}
        if _storage._mapBoolSfixed64 != rhs_storage._mapBoolSfixed64 {return false}
        if _storage._mapBoolFloat != rhs_storage._mapBoolFloat {return false}
        if _storage._mapBoolDouble != rhs_storage._mapBoolDouble {return false}
        if _storage._mapBoolBool != rhs_storage._mapBoolBool {return false}
        if _storage._mapBoolString != rhs_storage._mapBoolString {return false}
        if _storage._mapBoolBytes != rhs_storage._mapBoolBytes {return false}
        if _storage._mapBoolAnEnum != rhs_storage._mapBoolAnEnum {return false}
        if _storage._mapBoolMessage != rhs_storage._mapBoolMessage {return false}
        if _storage._wktAny != rhs_storage._wktAny {return false}
        if _storage._wktApi != rhs_storage._wktApi {return false}
        if _storage._wktDuration != rhs_storage._wktDuration {return false}
        if _storage._wktEmpty != rhs_storage._wktEmpty {return false}
        if _storage._wktFieldMask != rhs_storage._wktFieldMask {return false}
        if _storage._wktSourceContext != rhs_storage._wktSourceContext {return false}
        if _storage._wktStruct != rhs_storage._wktStruct {return false}
        if _storage._wktTimestamp != rhs_storage._wktTimestamp {return false}
        if _storage._wktType != rhs_storage._wktType {return false}
        if _storage._wktDoubleValue != rhs_storage._wktDoubleValue {return false}
        if _storage._wktFloatValue != rhs_storage._wktFloatValue {return false}
        if _storage._wktInt64Value != rhs_storage._wktInt64Value {return false}
        if _storage._wktUint64Value != rhs_storage._wktUint64Value {return false}
        if _storage._wktInt32Value != rhs_storage._wktInt32Value {return false}
        if _storage._wktUint32Value != rhs_storage._wktUint32Value {return false}
        if _storage._wktBoolValue != rhs_storage._wktBoolValue {return false}
        if _storage._wktStringValue != rhs_storage._wktStringValue {return false}
        if _storage._wktBytesValue != rhs_storage._wktBytesValue {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension Fuzz_Testing_Message.SingularGroup: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Fuzz_Testing_Message.protoMessageName + ".SingularGroup"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    18: .standard(proto: "group_field"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 18: try { try decoder.decodeSingularInt32Field(value: &self._groupField) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._groupField {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 18)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Fuzz_Testing_Message.SingularGroup, rhs: Fuzz_Testing_Message.SingularGroup) -> Bool {
    if lhs._groupField != rhs._groupField {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Fuzz_Testing_Message.RepeatedGroup: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Fuzz_Testing_Message.protoMessageName + ".RepeatedGroup"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    48: .standard(proto: "group_field"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 48: try { try decoder.decodeSingularInt32Field(value: &self._groupField) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._groupField {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 48)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Fuzz_Testing_Message.RepeatedGroup, rhs: Fuzz_Testing_Message.RepeatedGroup) -> Bool {
    if lhs._groupField != rhs._groupField {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Fuzz_Testing_Message.OneofGroup: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Fuzz_Testing_Message.protoMessageName + ".OneofGroup"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    78: .standard(proto: "group_field"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 78: try { try decoder.decodeSingularInt32Field(value: &self._groupField) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._groupField {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 78)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Fuzz_Testing_Message.OneofGroup, rhs: Fuzz_Testing_Message.OneofGroup) -> Bool {
    if lhs._groupField != rhs._groupField {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Fuzz_Testing_SingularGroup_ext: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SingularGroup_ext"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1018: .standard(proto: "group_field"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1018: try { try decoder.decodeSingularInt32Field(value: &self._groupField) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._groupField {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1018)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Fuzz_Testing_SingularGroup_ext, rhs: Fuzz_Testing_SingularGroup_ext) -> Bool {
    if lhs._groupField != rhs._groupField {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Fuzz_Testing_RepeatedGroup_ext: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RepeatedGroup_ext"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1048: .standard(proto: "group_field"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1048: try { try decoder.decodeSingularInt32Field(value: &self._groupField) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._groupField {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1048)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Fuzz_Testing_RepeatedGroup_ext, rhs: Fuzz_Testing_RepeatedGroup_ext) -> Bool {
    if lhs._groupField != rhs._groupField {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
