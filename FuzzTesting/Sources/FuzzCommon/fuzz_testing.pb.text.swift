// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: fuzz_testing.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _3: SwiftProtobuf.ProtobufAPIVersion_3 {}
  typealias Version = _3
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension Fuzz_Testing_AnEnum: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ZERO"),
    1: .same(proto: "ONE"),
    2: .same(proto: "TWO"),
    3: .same(proto: "THREE"),
  ]
}

extension Fuzz_Testing_Message: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "singular_int32"),
    2: .standard(proto: "singular_int64"),
    3: .standard(proto: "singular_uint32"),
    4: .standard(proto: "singular_uint64"),
    5: .standard(proto: "singular_sint32"),
    6: .standard(proto: "singular_sint64"),
    7: .standard(proto: "singular_fixed32"),
    8: .standard(proto: "singular_fixed64"),
    9: .standard(proto: "singular_sfixed32"),
    10: .standard(proto: "singular_sfixed64"),
    11: .standard(proto: "singular_float"),
    12: .standard(proto: "singular_double"),
    13: .standard(proto: "singular_bool"),
    14: .standard(proto: "singular_string"),
    15: .standard(proto: "singular_bytes"),
    16: .standard(proto: "singular_enum"),
    17: .unique(proto: "SingularGroup", json: "singulargroup"),
    19: .standard(proto: "singular_message"),
    31: .standard(proto: "repeated_int32"),
    32: .standard(proto: "repeated_int64"),
    33: .standard(proto: "repeated_uint32"),
    34: .standard(proto: "repeated_uint64"),
    35: .standard(proto: "repeated_sint32"),
    36: .standard(proto: "repeated_sint64"),
    37: .standard(proto: "repeated_fixed32"),
    38: .standard(proto: "repeated_fixed64"),
    39: .standard(proto: "repeated_sfixed32"),
    40: .standard(proto: "repeated_sfixed64"),
    41: .standard(proto: "repeated_float"),
    42: .standard(proto: "repeated_double"),
    43: .standard(proto: "repeated_bool"),
    44: .standard(proto: "repeated_string"),
    45: .standard(proto: "repeated_bytes"),
    46: .standard(proto: "repeated_enum"),
    47: .unique(proto: "RepeatedGroup", json: "repeatedgroup"),
    49: .standard(proto: "repeated_message"),
    61: .standard(proto: "oneof_int32"),
    62: .standard(proto: "oneof_int64"),
    63: .standard(proto: "oneof_uint32"),
    64: .standard(proto: "oneof_uint64"),
    65: .standard(proto: "oneof_sint32"),
    66: .standard(proto: "oneof_sint64"),
    67: .standard(proto: "oneof_fixed32"),
    68: .standard(proto: "oneof_fixed64"),
    69: .standard(proto: "oneof_sfixed32"),
    70: .standard(proto: "oneof_sfixed64"),
    71: .standard(proto: "oneof_float"),
    72: .standard(proto: "oneof_double"),
    73: .standard(proto: "oneof_bool"),
    74: .standard(proto: "oneof_string"),
    75: .standard(proto: "oneof_bytes"),
    76: .standard(proto: "oneof_enum"),
    77: .unique(proto: "OneofGroup", json: "oneofgroup"),
    79: .standard(proto: "oneof_message"),
    81: .standard(proto: "repeated_packed_int32"),
    82: .standard(proto: "repeated_packed_int64"),
    83: .standard(proto: "repeated_packed_uint32"),
    84: .standard(proto: "repeated_packed_uint64"),
    85: .standard(proto: "repeated_packed_sint32"),
    86: .standard(proto: "repeated_packed_sint64"),
    87: .standard(proto: "repeated_packed_fixed32"),
    88: .standard(proto: "repeated_packed_fixed64"),
    89: .standard(proto: "repeated_packed_sfixed32"),
    90: .standard(proto: "repeated_packed_sfixed64"),
    91: .standard(proto: "repeated_packed_float"),
    92: .standard(proto: "repeated_packed_double"),
    93: .standard(proto: "repeated_packed_bool"),
    94: .standard(proto: "repeated_packed_enum"),
    100: .standard(proto: "map_int32_int32"),
    101: .standard(proto: "map_int32_int64"),
    102: .standard(proto: "map_int32_uint32"),
    103: .standard(proto: "map_int32_uint64"),
    104: .standard(proto: "map_int32_sint32"),
    105: .standard(proto: "map_int32_sint64"),
    106: .standard(proto: "map_int32_fixed32"),
    107: .standard(proto: "map_int32_fixed64"),
    108: .standard(proto: "map_int32_sfixed32"),
    109: .standard(proto: "map_int32_sfixed64"),
    110: .standard(proto: "map_int32_float"),
    111: .standard(proto: "map_int32_double"),
    112: .standard(proto: "map_int32_bool"),
    113: .standard(proto: "map_int32_string"),
    114: .standard(proto: "map_int32_bytes"),
    115: .standard(proto: "map_int32_AnEnum"),
    116: .standard(proto: "map_int32_Message"),
    117: .standard(proto: "map_int64_int32"),
    118: .standard(proto: "map_int64_int64"),
    119: .standard(proto: "map_int64_uint32"),
    120: .standard(proto: "map_int64_uint64"),
    121: .standard(proto: "map_int64_sint32"),
    122: .standard(proto: "map_int64_sint64"),
    123: .standard(proto: "map_int64_fixed32"),
    124: .standard(proto: "map_int64_fixed64"),
    125: .standard(proto: "map_int64_sfixed32"),
    126: .standard(proto: "map_int64_sfixed64"),
    127: .standard(proto: "map_int64_float"),
    128: .standard(proto: "map_int64_double"),
    129: .standard(proto: "map_int64_bool"),
    130: .standard(proto: "map_int64_string"),
    131: .standard(proto: "map_int64_bytes"),
    132: .standard(proto: "map_int64_AnEnum"),
    133: .standard(proto: "map_int64_Message"),
    134: .standard(proto: "map_uint32_int32"),
    135: .standard(proto: "map_uint32_int64"),
    136: .standard(proto: "map_uint32_uint32"),
    137: .standard(proto: "map_uint32_uint64"),
    138: .standard(proto: "map_uint32_sint32"),
    139: .standard(proto: "map_uint32_sint64"),
    140: .standard(proto: "map_uint32_fixed32"),
    141: .standard(proto: "map_uint32_fixed64"),
    142: .standard(proto: "map_uint32_sfixed32"),
    143: .standard(proto: "map_uint32_sfixed64"),
    144: .standard(proto: "map_uint32_float"),
    145: .standard(proto: "map_uint32_double"),
    146: .standard(proto: "map_uint32_bool"),
    147: .standard(proto: "map_uint32_string"),
    148: .standard(proto: "map_uint32_bytes"),
    149: .standard(proto: "map_uint32_AnEnum"),
    150: .standard(proto: "map_uint32_Message"),
    151: .standard(proto: "map_uint64_int32"),
    152: .standard(proto: "map_uint64_int64"),
    153: .standard(proto: "map_uint64_uint32"),
    154: .standard(proto: "map_uint64_uint64"),
    155: .standard(proto: "map_uint64_sint32"),
    156: .standard(proto: "map_uint64_sint64"),
    157: .standard(proto: "map_uint64_fixed32"),
    158: .standard(proto: "map_uint64_fixed64"),
    159: .standard(proto: "map_uint64_sfixed32"),
    160: .standard(proto: "map_uint64_sfixed64"),
    161: .standard(proto: "map_uint64_float"),
    162: .standard(proto: "map_uint64_double"),
    163: .standard(proto: "map_uint64_bool"),
    164: .standard(proto: "map_uint64_string"),
    165: .standard(proto: "map_uint64_bytes"),
    166: .standard(proto: "map_uint64_AnEnum"),
    167: .standard(proto: "map_uint64_Message"),
    168: .standard(proto: "map_sint32_int32"),
    169: .standard(proto: "map_sint32_int64"),
    170: .standard(proto: "map_sint32_uint32"),
    171: .standard(proto: "map_sint32_uint64"),
    172: .standard(proto: "map_sint32_sint32"),
    173: .standard(proto: "map_sint32_sint64"),
    174: .standard(proto: "map_sint32_fixed32"),
    175: .standard(proto: "map_sint32_fixed64"),
    176: .standard(proto: "map_sint32_sfixed32"),
    177: .standard(proto: "map_sint32_sfixed64"),
    178: .standard(proto: "map_sint32_float"),
    179: .standard(proto: "map_sint32_double"),
    180: .standard(proto: "map_sint32_bool"),
    181: .standard(proto: "map_sint32_string"),
    182: .standard(proto: "map_sint32_bytes"),
    183: .standard(proto: "map_sint32_AnEnum"),
    184: .standard(proto: "map_sint32_Message"),
    185: .standard(proto: "map_sint64_int32"),
    186: .standard(proto: "map_sint64_int64"),
    187: .standard(proto: "map_sint64_uint32"),
    188: .standard(proto: "map_sint64_uint64"),
    189: .standard(proto: "map_sint64_sint32"),
    190: .standard(proto: "map_sint64_sint64"),
    191: .standard(proto: "map_sint64_fixed32"),
    192: .standard(proto: "map_sint64_fixed64"),
    193: .standard(proto: "map_sint64_sfixed32"),
    194: .standard(proto: "map_sint64_sfixed64"),
    195: .standard(proto: "map_sint64_float"),
    196: .standard(proto: "map_sint64_double"),
    197: .standard(proto: "map_sint64_bool"),
    198: .standard(proto: "map_sint64_string"),
    199: .standard(proto: "map_sint64_bytes"),
    200: .standard(proto: "map_sint64_AnEnum"),
    201: .standard(proto: "map_sint64_Message"),
    202: .standard(proto: "map_fixed32_int32"),
    203: .standard(proto: "map_fixed32_int64"),
    204: .standard(proto: "map_fixed32_uint32"),
    205: .standard(proto: "map_fixed32_uint64"),
    206: .standard(proto: "map_fixed32_sint32"),
    207: .standard(proto: "map_fixed32_sint64"),
    208: .standard(proto: "map_fixed32_fixed32"),
    209: .standard(proto: "map_fixed32_fixed64"),
    210: .standard(proto: "map_fixed32_sfixed32"),
    211: .standard(proto: "map_fixed32_sfixed64"),
    212: .standard(proto: "map_fixed32_float"),
    213: .standard(proto: "map_fixed32_double"),
    214: .standard(proto: "map_fixed32_bool"),
    215: .standard(proto: "map_fixed32_string"),
    216: .standard(proto: "map_fixed32_bytes"),
    217: .standard(proto: "map_fixed32_AnEnum"),
    218: .standard(proto: "map_fixed32_Message"),
    219: .standard(proto: "map_fixed64_int32"),
    220: .standard(proto: "map_fixed64_int64"),
    221: .standard(proto: "map_fixed64_uint32"),
    222: .standard(proto: "map_fixed64_uint64"),
    223: .standard(proto: "map_fixed64_sint32"),
    224: .standard(proto: "map_fixed64_sint64"),
    225: .standard(proto: "map_fixed64_fixed32"),
    226: .standard(proto: "map_fixed64_fixed64"),
    227: .standard(proto: "map_fixed64_sfixed32"),
    228: .standard(proto: "map_fixed64_sfixed64"),
    229: .standard(proto: "map_fixed64_float"),
    230: .standard(proto: "map_fixed64_double"),
    231: .standard(proto: "map_fixed64_bool"),
    232: .standard(proto: "map_fixed64_string"),
    233: .standard(proto: "map_fixed64_bytes"),
    234: .standard(proto: "map_fixed64_AnEnum"),
    235: .standard(proto: "map_fixed64_Message"),
    236: .standard(proto: "map_sfixed32_int32"),
    237: .standard(proto: "map_sfixed32_int64"),
    238: .standard(proto: "map_sfixed32_uint32"),
    239: .standard(proto: "map_sfixed32_uint64"),
    240: .standard(proto: "map_sfixed32_sint32"),
    241: .standard(proto: "map_sfixed32_sint64"),
    242: .standard(proto: "map_sfixed32_fixed32"),
    243: .standard(proto: "map_sfixed32_fixed64"),
    244: .standard(proto: "map_sfixed32_sfixed32"),
    245: .standard(proto: "map_sfixed32_sfixed64"),
    246: .standard(proto: "map_sfixed32_float"),
    247: .standard(proto: "map_sfixed32_double"),
    248: .standard(proto: "map_sfixed32_bool"),
    249: .standard(proto: "map_sfixed32_string"),
    250: .standard(proto: "map_sfixed32_bytes"),
    251: .standard(proto: "map_sfixed32_AnEnum"),
    252: .standard(proto: "map_sfixed32_Message"),
    253: .standard(proto: "map_sfixed64_int32"),
    254: .standard(proto: "map_sfixed64_int64"),
    255: .standard(proto: "map_sfixed64_uint32"),
    256: .standard(proto: "map_sfixed64_uint64"),
    257: .standard(proto: "map_sfixed64_sint32"),
    258: .standard(proto: "map_sfixed64_sint64"),
    259: .standard(proto: "map_sfixed64_fixed32"),
    260: .standard(proto: "map_sfixed64_fixed64"),
    261: .standard(proto: "map_sfixed64_sfixed32"),
    262: .standard(proto: "map_sfixed64_sfixed64"),
    263: .standard(proto: "map_sfixed64_float"),
    264: .standard(proto: "map_sfixed64_double"),
    265: .standard(proto: "map_sfixed64_bool"),
    266: .standard(proto: "map_sfixed64_string"),
    267: .standard(proto: "map_sfixed64_bytes"),
    268: .standard(proto: "map_sfixed64_AnEnum"),
    269: .standard(proto: "map_sfixed64_Message"),
    270: .standard(proto: "map_bool_int32"),
    271: .standard(proto: "map_bool_int64"),
    272: .standard(proto: "map_bool_uint32"),
    273: .standard(proto: "map_bool_uint64"),
    274: .standard(proto: "map_bool_sint32"),
    275: .standard(proto: "map_bool_sint64"),
    276: .standard(proto: "map_bool_fixed32"),
    277: .standard(proto: "map_bool_fixed64"),
    278: .standard(proto: "map_bool_sfixed32"),
    279: .standard(proto: "map_bool_sfixed64"),
    280: .standard(proto: "map_bool_float"),
    281: .standard(proto: "map_bool_double"),
    282: .standard(proto: "map_bool_bool"),
    283: .standard(proto: "map_bool_string"),
    284: .standard(proto: "map_bool_bytes"),
    285: .standard(proto: "map_bool_AnEnum"),
    286: .standard(proto: "map_bool_Message"),
    500: .standard(proto: "wkt_any"),
    501: .standard(proto: "wkt_api"),
    502: .standard(proto: "wkt_duration"),
    503: .standard(proto: "wkt_empty"),
    504: .standard(proto: "wkt_field_mask"),
    505: .standard(proto: "wkt_source_context"),
    506: .standard(proto: "wkt_struct"),
    507: .standard(proto: "wkt_timestamp"),
    508: .standard(proto: "wkt_type"),
    509: .standard(proto: "wkt_double_value"),
    510: .standard(proto: "wkt_float_value"),
    511: .standard(proto: "wkt_int64_value"),
    512: .standard(proto: "wkt_uint64_value"),
    513: .standard(proto: "wkt_int32_value"),
    514: .standard(proto: "wkt_uint32_value"),
    515: .standard(proto: "wkt_bool_value"),
    516: .standard(proto: "wkt_string_value"),
    517: .standard(proto: "wkt_bytes_value"),
    600: .standard(proto: "singular_message_set"),
    601: .standard(proto: "repeated_message_set"),
  ]
}

extension Fuzz_Testing_Message.SingularGroup: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    18: .standard(proto: "group_field"),
  ]
}

extension Fuzz_Testing_Message.RepeatedGroup: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    48: .standard(proto: "group_field"),
  ]
}

extension Fuzz_Testing_Message.OneofGroup: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    78: .standard(proto: "group_field"),
  ]
}

extension Fuzz_Testing_AMessageSetMessage: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()
}

extension Fuzz_Testing_SingularGroup_ext: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1018: .standard(proto: "group_field"),
  ]
}

extension Fuzz_Testing_RepeatedGroup_ext: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1048: .standard(proto: "group_field"),
  ]
}
