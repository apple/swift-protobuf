name: Build and Test

# NOTE: If making changes to most of the steps, please also look to update
# regular_conformance.yml also.

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  core:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        swift: ["5.7.2", "5.6.3", "5.5.3", "5.4.3", "5.3.3", "5.2.5", "5.1.5", "5.0.3"]
        include:
          - swift: 5.7.2
            ubuntu: focal
            generate_linux_main: false
          - swift: 5.6.3
            ubuntu: focal
            generate_linux_main: false
          - swift: 5.5.3
            ubuntu: focal
            generate_linux_main: false
          - swift: 5.4.3
            ubuntu: focal
            generate_linux_main: false
          - swift: 5.3.3
            ubuntu: focal
            generate_linux_main: true
          - swift: 5.2.5
            ubuntu: focal
            generate_linux_main: true
          - swift: 5.1.5
            ubuntu: bionic
            generate_linux_main: true
          - swift: 5.0.3
            ubuntu: bionic
            generate_linux_main: true
    container:
      image: swift:${{ matrix.swift }}-${{ matrix.ubuntu }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Update and install dependencies
      run: |
        set -eu
        apt-get update
        apt-get install -y make protobuf-compiler
        protoc --version
    - name: Generate LinuxMain.swift
      if: ${{ matrix.generate_linux_main }}
      run: make generate-linux-main
    - name: Build
      run: make build
    - name: Test runtime
      run: make test-runtime
    - name: Test plugin
      run: make test-plugin

  sanitizer_testing:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        sanitizer: ["address", "thread"]
        swiftpm_config: ["debug", "release"]
    container:
      # Test on the latest Swift release. https://hub.docker.com/_/swift says
      # swift:latest is still bionic, so explicitly use swift:focal.
      image: swift:focal
    steps:
    - uses: actions/checkout@v3
    - name: Test
      run: |
        set -eu
        # Trim out the generate files that are just compile tests, they take a while to compile and
        # are covered in core instead.
        rm Tests/SwiftProtobufTests/generated_swift_names*
        # On linux, the tests seem to always see leaks that don't show up on macOS. Disable the
        # leak detection and just assume it is a Linux Swift issue. This still gets validation
        # for other memory errors. Maybe https://bugs.swift.org/browse/SR-6848.
        if [ "${{ matrix.sanitizer }}" = "address" ] ; then
          export ASAN_OPTIONS=detect_leaks=0
        fi
        # 'release' doesn't support @testable, force it on.
        if [ "${{ matrix.swiftpm_config }}" = "release" ] ; then
          EXTRAS="-Xswiftc -enable-testing"
        fi
        swift test -c ${{ matrix.swiftpm_config }} --sanitize=${{ matrix.sanitizer }} ${EXTRAS:-}

  fuzzing_regressions:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        swiftpm_config: ["debug", "release"]
    container:
      # Test on the latest Swift release. https://hub.docker.com/_/swift says
      # swift:latest is still bionic, so explicitly use swift:focal.
      image: swift:focal
    steps:
    - uses: actions/checkout@v3
    - name: Build
      run: FuzzTesting/do_build.sh --${{ matrix.swiftpm_config }}-only --run-regressions
