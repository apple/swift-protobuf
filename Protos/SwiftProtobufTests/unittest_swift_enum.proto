// Protocol Buffers - Google's data interchange format
// Copyright 2015 Apple, Inc.  All Rights Reserved.
// https://developers.google.com/protocol-buffers/
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

syntax = "proto2";

package protobuf_unittest;

message SwiftEnumTest {
    enum EnumTest1 {
        ENUM_TEST_1_FIRST_VALUE = 1;
        ENUM_TEST_1_SECOND_VALUE = 2;
    }
    enum EnumTest2 {
        ENUM_TEST_2_FIRST_VALUE = 1;
        SECOND_VALUE = 2;
    }
    enum EnumTestNoStem {
        ENUM_TEST_NO_STEM_1 = 1;
        ENUM_TEST_NO_STEM_2 = 2;
    }
    enum EnumTestReservedWord {
        ENUM_TEST_RESERVED_WORD_VAR = 1;
        ENUM_TEST_RESERVED_WORD_NOT_RESERVED = 2;
    }

    repeated EnumTest1 values1 = 1;
    repeated EnumTest2 values2 = 2;
    repeated EnumTestNoStem values3 = 3;
    repeated EnumTestReservedWord values4 = 4;
}

message SwiftEnumWithAliasTest {
    enum EnumWithAlias {
        option allow_alias = true;
        FOO1 = 1;
        FOO2 = 1;
        BAZ1 = 3;  // out of value order to test allCases
        BAR1 = 2;
        BAR2 = 2;
    }
    repeated EnumWithAlias values = 1 [packed=true];
}
