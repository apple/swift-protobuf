// Protocol Buffers - Google's data interchange format
// Copyright 2008 Google Inc.  All rights reserved.
// https://developers.google.com/protocol-buffers/
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Author: kenton@google.com (Kenton Varda)
//  Based on original Protocol Buffers design by
//  Sanjay Ghemawat, Jeff Dean, and others.
//
// This file is similar to unittest_mset_wire_format.proto, but does not
// have a TestMessageSet, so it can be downgraded to proto1.

syntax = "proto2";

import "unittest_mset_wire_format.proto";

package swift_proto_testing;

message TestMessageSetContainer {
  optional swift_proto_testing.wire_format.TestMessageSet message_set = 1;
}

// A message without the message_set_wire_format option but still supports
// extensions.
message MessageEx {
  extensions 4 to max;
}

message TestMessageSetExtension1 {
  extend swift_proto_testing.wire_format.TestMessageSet {
    optional TestMessageSetExtension1 message_set_extension = 1545008;
  }
  // Also extend a non-MessageSet with the same field number. This will allow us
  // to test parsing a normal extension into a MessageSet.
  extend MessageEx {
    optional TestMessageSetExtension1 doppelganger_message_set_extension = 1545008;
  }
  optional int32 i = 15;
  optional swift_proto_testing.wire_format.TestMessageSet recursive = 16;
  optional string test_aliasing = 17 [ctype = STRING_PIECE];
}

message TestMessageSetExtension2 {
  extend swift_proto_testing.wire_format.TestMessageSet {
    optional TestMessageSetExtension2 message_set_extension = 1547769;
  }
  optional string str = 25;
}

// This isn't on swift_proto_testing.wire_format.TestMessageSet, so it will be unknown
// when parsing there.
message TestMessageSetExtension3 {
  extend MessageEx {
    optional TestMessageSetExtension3 doppelganger_message_set_extension = 1547770;
  }
  optional int32 x = 26;
}


// MessageSet wire format is equivalent to this.
message RawMessageSet {
  repeated group Item = 1 {
    required int32 type_id = 2;
    required bytes message = 3;
  }
}

// MessageSet wire format is equivalent to this but since the fields
// are repeated they can be left off or over present to testing.
message RawBreakableMessageSet {
  repeated group Item = 1 {
    repeated int32 type_id = 2;
    repeated bytes message = 3;
  }
}
