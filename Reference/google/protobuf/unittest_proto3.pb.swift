/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: google/protobuf/unittest_proto3.proto
 *
 */

//  Protocol Buffers - Google's data interchange format
//  Copyright 2008 Google Inc.  All rights reserved.
//  https://developers.google.com/protocol-buffers/
// 
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are
//  met:
// 
//      * Redistributions of source code must retain the above copyright
//  notice, this list of conditions and the following disclaimer.
//      * Redistributions in binary form must reproduce the above
//  copyright notice, this list of conditions and the following disclaimer
//  in the documentation and/or other materials provided with the
//  distribution.
//      * Neither the name of Google Inc. nor the names of its
//  contributors may be used to endorse or promote products derived from
//  this software without specific prior written permission.
// 
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
//  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
//  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
//  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
//  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
//  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
//  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

//  Author: kenton@google.com (Kenton Varda)
//   Based on original Protocol Buffers design by
//   Sanjay Ghemawat, Jeff Dean, and others.
// 
//  A proto file we will use for unit testing.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _1: SwiftProtobuf.ProtobufAPIVersion_1 {}
  typealias Version = _1
}

enum Proto3ForeignEnum: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case foreignUnspecified // = 0
  case foreignFoo // = 4
  case foreignBar // = 5
  case foreignBaz // = 6
  case UNRECOGNIZED(Int)

  init() {
    self = .foreignUnspecified
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .foreignUnspecified
    case 4: self = .foreignFoo
    case 5: self = .foreignBar
    case 6: self = .foreignBaz
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  init?(jsonName: String) {
    switch jsonName {
    case "FOREIGN_UNSPECIFIED": self = .foreignUnspecified
    case "FOREIGN_FOO": self = .foreignFoo
    case "FOREIGN_BAR": self = .foreignBar
    case "FOREIGN_BAZ": self = .foreignBaz
    default: return nil
    }
  }

  init?(protoName: String) {
    switch protoName {
    case "FOREIGN_UNSPECIFIED": self = .foreignUnspecified
    case "FOREIGN_FOO": self = .foreignFoo
    case "FOREIGN_BAR": self = .foreignBar
    case "FOREIGN_BAZ": self = .foreignBaz
    default: return nil
    }
  }

  var rawValue: Int {
    get {
      switch self {
      case .foreignUnspecified: return 0
      case .foreignFoo: return 4
      case .foreignBar: return 5
      case .foreignBaz: return 6
      case .UNRECOGNIZED(let i): return i
      }
    }
  }

  var _protobuf_jsonName: String? {
    get {
      switch self {
      case .foreignUnspecified: return "FOREIGN_UNSPECIFIED"
      case .foreignFoo: return "FOREIGN_FOO"
      case .foreignBar: return "FOREIGN_BAR"
      case .foreignBaz: return "FOREIGN_BAZ"
      case .UNRECOGNIZED: return nil
      }
    }
  }

}

///   Test an enum that has multiple values with the same number.
enum Proto3TestEnumWithDupValue: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case testEnumWithDupValueUnspecified // = 0
  case foo1 // = 1
  case bar1 // = 2
  case baz // = 3
  case foo2 // = 1
  case bar2 // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .testEnumWithDupValueUnspecified
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .testEnumWithDupValueUnspecified
    case 1: self = .foo1
    case 2: self = .bar1
    case 3: self = .baz
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  init?(jsonName: String) {
    switch jsonName {
    case "TEST_ENUM_WITH_DUP_VALUE_UNSPECIFIED": self = .testEnumWithDupValueUnspecified
    case "FOO1": self = .foo1
    case "BAR1": self = .bar1
    case "BAZ": self = .baz
    case "FOO2": self = .foo2
    case "BAR2": self = .bar2
    default: return nil
    }
  }

  init?(protoName: String) {
    switch protoName {
    case "TEST_ENUM_WITH_DUP_VALUE_UNSPECIFIED": self = .testEnumWithDupValueUnspecified
    case "FOO1": self = .foo1
    case "BAR1": self = .bar1
    case "BAZ": self = .baz
    case "FOO2": self = .foo2
    case "BAR2": self = .bar2
    default: return nil
    }
  }

  var rawValue: Int {
    get {
      switch self {
      case .testEnumWithDupValueUnspecified: return 0
      case .foo1: return 1
      case .bar1: return 2
      case .baz: return 3
      case .foo2: return 1
      case .bar2: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }
  }

  var _protobuf_jsonName: String? {
    get {
      switch self {
      case .testEnumWithDupValueUnspecified: return "TEST_ENUM_WITH_DUP_VALUE_UNSPECIFIED"
      case .foo1: return "FOO1"
      case .bar1: return "BAR1"
      case .baz: return "BAZ"
      case .foo2: return "FOO2"
      case .bar2: return "BAR2"
      case .UNRECOGNIZED: return nil
      }
    }
  }

}

///   Test an enum with large, unordered values.
enum Proto3TestSparseEnum: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case testSparseEnumUnspecified // = 0
  case sparseA // = 123
  case sparseB // = 62374
  case sparseC // = 12589234
  case sparseD // = -15
  case sparseE // = -53452

  ///   In proto3, value 0 must be the first one specified
  ///   SPARSE_F = 0;
  case sparseG // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .testSparseEnumUnspecified
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .testSparseEnumUnspecified
    case 123: self = .sparseA
    case 62374: self = .sparseB
    case 12589234: self = .sparseC
    case -15: self = .sparseD
    case -53452: self = .sparseE
    case 2: self = .sparseG
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  init?(jsonName: String) {
    switch jsonName {
    case "TEST_SPARSE_ENUM_UNSPECIFIED": self = .testSparseEnumUnspecified
    case "SPARSE_A": self = .sparseA
    case "SPARSE_B": self = .sparseB
    case "SPARSE_C": self = .sparseC
    case "SPARSE_D": self = .sparseD
    case "SPARSE_E": self = .sparseE
    case "SPARSE_G": self = .sparseG
    default: return nil
    }
  }

  init?(protoName: String) {
    switch protoName {
    case "TEST_SPARSE_ENUM_UNSPECIFIED": self = .testSparseEnumUnspecified
    case "SPARSE_A": self = .sparseA
    case "SPARSE_B": self = .sparseB
    case "SPARSE_C": self = .sparseC
    case "SPARSE_D": self = .sparseD
    case "SPARSE_E": self = .sparseE
    case "SPARSE_G": self = .sparseG
    default: return nil
    }
  }

  var rawValue: Int {
    get {
      switch self {
      case .testSparseEnumUnspecified: return 0
      case .sparseA: return 123
      case .sparseB: return 62374
      case .sparseC: return 12589234
      case .sparseD: return -15
      case .sparseE: return -53452
      case .sparseG: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }
  }

  var _protobuf_jsonName: String? {
    get {
      switch self {
      case .testSparseEnumUnspecified: return "TEST_SPARSE_ENUM_UNSPECIFIED"
      case .sparseA: return "SPARSE_A"
      case .sparseB: return "SPARSE_B"
      case .sparseC: return "SPARSE_C"
      case .sparseD: return "SPARSE_D"
      case .sparseE: return "SPARSE_E"
      case .sparseG: return "SPARSE_G"
      case .UNRECOGNIZED: return nil
      }
    }
  }

}

///   This proto includes every type of field in both singular and repeated
///   forms.
struct Proto3TestAllTypes: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  static let protoMessageName: String = "TestAllTypes"
  static let protoPackageName: String = "protobuf_unittest"
  static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "single_int32", json: "singleInt32"),
    2: .unique(proto: "single_int64", json: "singleInt64"),
    3: .unique(proto: "single_uint32", json: "singleUint32"),
    4: .unique(proto: "single_uint64", json: "singleUint64"),
    5: .unique(proto: "single_sint32", json: "singleSint32"),
    6: .unique(proto: "single_sint64", json: "singleSint64"),
    7: .unique(proto: "single_fixed32", json: "singleFixed32"),
    8: .unique(proto: "single_fixed64", json: "singleFixed64"),
    9: .unique(proto: "single_sfixed32", json: "singleSfixed32"),
    10: .unique(proto: "single_sfixed64", json: "singleSfixed64"),
    11: .unique(proto: "single_float", json: "singleFloat"),
    12: .unique(proto: "single_double", json: "singleDouble"),
    13: .unique(proto: "single_bool", json: "singleBool"),
    14: .unique(proto: "single_string", json: "singleString"),
    15: .unique(proto: "single_bytes", json: "singleBytes"),
    18: .unique(proto: "single_nested_message", json: "singleNestedMessage"),
    19: .unique(proto: "single_foreign_message", json: "singleForeignMessage"),
    20: .unique(proto: "single_import_message", json: "singleImportMessage"),
    21: .unique(proto: "single_nested_enum", json: "singleNestedEnum"),
    22: .unique(proto: "single_foreign_enum", json: "singleForeignEnum"),
    23: .unique(proto: "single_import_enum", json: "singleImportEnum"),
    26: .unique(proto: "single_public_import_message", json: "singlePublicImportMessage"),
    31: .unique(proto: "repeated_int32", json: "repeatedInt32"),
    32: .unique(proto: "repeated_int64", json: "repeatedInt64"),
    33: .unique(proto: "repeated_uint32", json: "repeatedUint32"),
    34: .unique(proto: "repeated_uint64", json: "repeatedUint64"),
    35: .unique(proto: "repeated_sint32", json: "repeatedSint32"),
    36: .unique(proto: "repeated_sint64", json: "repeatedSint64"),
    37: .unique(proto: "repeated_fixed32", json: "repeatedFixed32"),
    38: .unique(proto: "repeated_fixed64", json: "repeatedFixed64"),
    39: .unique(proto: "repeated_sfixed32", json: "repeatedSfixed32"),
    40: .unique(proto: "repeated_sfixed64", json: "repeatedSfixed64"),
    41: .unique(proto: "repeated_float", json: "repeatedFloat"),
    42: .unique(proto: "repeated_double", json: "repeatedDouble"),
    43: .unique(proto: "repeated_bool", json: "repeatedBool"),
    44: .unique(proto: "repeated_string", json: "repeatedString"),
    45: .unique(proto: "repeated_bytes", json: "repeatedBytes"),
    48: .unique(proto: "repeated_nested_message", json: "repeatedNestedMessage"),
    49: .unique(proto: "repeated_foreign_message", json: "repeatedForeignMessage"),
    50: .unique(proto: "repeated_import_message", json: "repeatedImportMessage"),
    51: .unique(proto: "repeated_nested_enum", json: "repeatedNestedEnum"),
    52: .unique(proto: "repeated_foreign_enum", json: "repeatedForeignEnum"),
    53: .unique(proto: "repeated_import_enum", json: "repeatedImportEnum"),
    54: .unique(proto: "repeated_public_import_message", json: "repeatedPublicImportMessage"),
    111: .unique(proto: "oneof_uint32", json: "oneofUint32"),
    112: .unique(proto: "oneof_nested_message", json: "oneofNestedMessage"),
    113: .unique(proto: "oneof_string", json: "oneofString"),
    114: .unique(proto: "oneof_bytes", json: "oneofBytes"),
  ]

  private class _StorageClass {
    var _singleInt32: Int32 = 0
    var _singleInt64: Int64 = 0
    var _singleUint32: UInt32 = 0
    var _singleUint64: UInt64 = 0
    var _singleSint32: Int32 = 0
    var _singleSint64: Int64 = 0
    var _singleFixed32: UInt32 = 0
    var _singleFixed64: UInt64 = 0
    var _singleSfixed32: Int32 = 0
    var _singleSfixed64: Int64 = 0
    var _singleFloat: Float = 0
    var _singleDouble: Double = 0
    var _singleBool: Bool = false
    var _singleString: String = ""
    var _singleBytes: Data = Data()
    var _singleNestedMessage: Proto3TestAllTypes.NestedMessage? = nil
    var _singleForeignMessage: Proto3ForeignMessage? = nil
    var _singleImportMessage: Proto3ImportMessage? = nil
    var _singleNestedEnum: Proto3TestAllTypes.NestedEnum = Proto3TestAllTypes.NestedEnum.nestedEnumUnspecified
    var _singleForeignEnum: Proto3ForeignEnum = Proto3ForeignEnum.foreignUnspecified
    var _singleImportEnum: Proto3ImportEnum = Proto3ImportEnum.importEnumUnspecified
    var _singlePublicImportMessage: Proto3PublicImportMessage? = nil
    var _repeatedInt32: [Int32] = []
    var _repeatedInt64: [Int64] = []
    var _repeatedUint32: [UInt32] = []
    var _repeatedUint64: [UInt64] = []
    var _repeatedSint32: [Int32] = []
    var _repeatedSint64: [Int64] = []
    var _repeatedFixed32: [UInt32] = []
    var _repeatedFixed64: [UInt64] = []
    var _repeatedSfixed32: [Int32] = []
    var _repeatedSfixed64: [Int64] = []
    var _repeatedFloat: [Float] = []
    var _repeatedDouble: [Double] = []
    var _repeatedBool: [Bool] = []
    var _repeatedString: [String] = []
    var _repeatedBytes: [Data] = []
    var _repeatedNestedMessage: [Proto3TestAllTypes.NestedMessage] = []
    var _repeatedForeignMessage: [Proto3ForeignMessage] = []
    var _repeatedImportMessage: [Proto3ImportMessage] = []
    var _repeatedNestedEnum: [Proto3TestAllTypes.NestedEnum] = []
    var _repeatedForeignEnum: [Proto3ForeignEnum] = []
    var _repeatedImportEnum: [Proto3ImportEnum] = []
    var _repeatedPublicImportMessage: [Proto3PublicImportMessage] = []
    var _oneofField: Proto3TestAllTypes.OneOf_OneofField?

    init() {}

    func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
      }
    }

    func decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &_singleInt32)
      case 2: try decoder.decodeSingularInt64Field(value: &_singleInt64)
      case 3: try decoder.decodeSingularUInt32Field(value: &_singleUint32)
      case 4: try decoder.decodeSingularUInt64Field(value: &_singleUint64)
      case 5: try decoder.decodeSingularSInt32Field(value: &_singleSint32)
      case 6: try decoder.decodeSingularSInt64Field(value: &_singleSint64)
      case 7: try decoder.decodeSingularFixed32Field(value: &_singleFixed32)
      case 8: try decoder.decodeSingularFixed64Field(value: &_singleFixed64)
      case 9: try decoder.decodeSingularSFixed32Field(value: &_singleSfixed32)
      case 10: try decoder.decodeSingularSFixed64Field(value: &_singleSfixed64)
      case 11: try decoder.decodeSingularFloatField(value: &_singleFloat)
      case 12: try decoder.decodeSingularDoubleField(value: &_singleDouble)
      case 13: try decoder.decodeSingularBoolField(value: &_singleBool)
      case 14: try decoder.decodeSingularStringField(value: &_singleString)
      case 15: try decoder.decodeSingularBytesField(value: &_singleBytes)
      case 18: try decoder.decodeSingularMessageField(value: &_singleNestedMessage)
      case 19: try decoder.decodeSingularMessageField(value: &_singleForeignMessage)
      case 20: try decoder.decodeSingularMessageField(value: &_singleImportMessage)
      case 21: try decoder.decodeSingularEnumField(value: &_singleNestedEnum)
      case 22: try decoder.decodeSingularEnumField(value: &_singleForeignEnum)
      case 23: try decoder.decodeSingularEnumField(value: &_singleImportEnum)
      case 26: try decoder.decodeSingularMessageField(value: &_singlePublicImportMessage)
      case 31: try decoder.decodeRepeatedInt32Field(value: &_repeatedInt32)
      case 32: try decoder.decodeRepeatedInt64Field(value: &_repeatedInt64)
      case 33: try decoder.decodeRepeatedUInt32Field(value: &_repeatedUint32)
      case 34: try decoder.decodeRepeatedUInt64Field(value: &_repeatedUint64)
      case 35: try decoder.decodeRepeatedSInt32Field(value: &_repeatedSint32)
      case 36: try decoder.decodeRepeatedSInt64Field(value: &_repeatedSint64)
      case 37: try decoder.decodeRepeatedFixed32Field(value: &_repeatedFixed32)
      case 38: try decoder.decodeRepeatedFixed64Field(value: &_repeatedFixed64)
      case 39: try decoder.decodeRepeatedSFixed32Field(value: &_repeatedSfixed32)
      case 40: try decoder.decodeRepeatedSFixed64Field(value: &_repeatedSfixed64)
      case 41: try decoder.decodeRepeatedFloatField(value: &_repeatedFloat)
      case 42: try decoder.decodeRepeatedDoubleField(value: &_repeatedDouble)
      case 43: try decoder.decodeRepeatedBoolField(value: &_repeatedBool)
      case 44: try decoder.decodeRepeatedStringField(value: &_repeatedString)
      case 45: try decoder.decodeRepeatedBytesField(value: &_repeatedBytes)
      case 48: try decoder.decodeRepeatedMessageField(value: &_repeatedNestedMessage)
      case 49: try decoder.decodeRepeatedMessageField(value: &_repeatedForeignMessage)
      case 50: try decoder.decodeRepeatedMessageField(value: &_repeatedImportMessage)
      case 51: try decoder.decodeRepeatedEnumField(value: &_repeatedNestedEnum)
      case 52: try decoder.decodeRepeatedEnumField(value: &_repeatedForeignEnum)
      case 53: try decoder.decodeRepeatedEnumField(value: &_repeatedImportEnum)
      case 54: try decoder.decodeRepeatedMessageField(value: &_repeatedPublicImportMessage)
      case 111, 112, 113, 114:
        if _oneofField != nil {
          try decoder.handleConflictingOneOf()
        }
        _oneofField = try Proto3TestAllTypes.OneOf_OneofField(byDecodingFrom: &decoder, fieldNumber: fieldNumber)
      default: break
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _singleInt32 != other._singleInt32 {return false}
      if _singleInt64 != other._singleInt64 {return false}
      if _singleUint32 != other._singleUint32 {return false}
      if _singleUint64 != other._singleUint64 {return false}
      if _singleSint32 != other._singleSint32 {return false}
      if _singleSint64 != other._singleSint64 {return false}
      if _singleFixed32 != other._singleFixed32 {return false}
      if _singleFixed64 != other._singleFixed64 {return false}
      if _singleSfixed32 != other._singleSfixed32 {return false}
      if _singleSfixed64 != other._singleSfixed64 {return false}
      if _singleFloat != other._singleFloat {return false}
      if _singleDouble != other._singleDouble {return false}
      if _singleBool != other._singleBool {return false}
      if _singleString != other._singleString {return false}
      if _singleBytes != other._singleBytes {return false}
      if _singleNestedMessage != other._singleNestedMessage {return false}
      if _singleForeignMessage != other._singleForeignMessage {return false}
      if _singleImportMessage != other._singleImportMessage {return false}
      if _singleNestedEnum != other._singleNestedEnum {return false}
      if _singleForeignEnum != other._singleForeignEnum {return false}
      if _singleImportEnum != other._singleImportEnum {return false}
      if _singlePublicImportMessage != other._singlePublicImportMessage {return false}
      if _repeatedInt32 != other._repeatedInt32 {return false}
      if _repeatedInt64 != other._repeatedInt64 {return false}
      if _repeatedUint32 != other._repeatedUint32 {return false}
      if _repeatedUint64 != other._repeatedUint64 {return false}
      if _repeatedSint32 != other._repeatedSint32 {return false}
      if _repeatedSint64 != other._repeatedSint64 {return false}
      if _repeatedFixed32 != other._repeatedFixed32 {return false}
      if _repeatedFixed64 != other._repeatedFixed64 {return false}
      if _repeatedSfixed32 != other._repeatedSfixed32 {return false}
      if _repeatedSfixed64 != other._repeatedSfixed64 {return false}
      if _repeatedFloat != other._repeatedFloat {return false}
      if _repeatedDouble != other._repeatedDouble {return false}
      if _repeatedBool != other._repeatedBool {return false}
      if _repeatedString != other._repeatedString {return false}
      if _repeatedBytes != other._repeatedBytes {return false}
      if _repeatedNestedMessage != other._repeatedNestedMessage {return false}
      if _repeatedForeignMessage != other._repeatedForeignMessage {return false}
      if _repeatedImportMessage != other._repeatedImportMessage {return false}
      if _repeatedNestedEnum != other._repeatedNestedEnum {return false}
      if _repeatedForeignEnum != other._repeatedForeignEnum {return false}
      if _repeatedImportEnum != other._repeatedImportEnum {return false}
      if _repeatedPublicImportMessage != other._repeatedPublicImportMessage {return false}
      if _oneofField != other._oneofField {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._singleInt32 = _singleInt32
      clone._singleInt64 = _singleInt64
      clone._singleUint32 = _singleUint32
      clone._singleUint64 = _singleUint64
      clone._singleSint32 = _singleSint32
      clone._singleSint64 = _singleSint64
      clone._singleFixed32 = _singleFixed32
      clone._singleFixed64 = _singleFixed64
      clone._singleSfixed32 = _singleSfixed32
      clone._singleSfixed64 = _singleSfixed64
      clone._singleFloat = _singleFloat
      clone._singleDouble = _singleDouble
      clone._singleBool = _singleBool
      clone._singleString = _singleString
      clone._singleBytes = _singleBytes
      clone._singleNestedMessage = _singleNestedMessage
      clone._singleForeignMessage = _singleForeignMessage
      clone._singleImportMessage = _singleImportMessage
      clone._singleNestedEnum = _singleNestedEnum
      clone._singleForeignEnum = _singleForeignEnum
      clone._singleImportEnum = _singleImportEnum
      clone._singlePublicImportMessage = _singlePublicImportMessage
      clone._repeatedInt32 = _repeatedInt32
      clone._repeatedInt64 = _repeatedInt64
      clone._repeatedUint32 = _repeatedUint32
      clone._repeatedUint64 = _repeatedUint64
      clone._repeatedSint32 = _repeatedSint32
      clone._repeatedSint64 = _repeatedSint64
      clone._repeatedFixed32 = _repeatedFixed32
      clone._repeatedFixed64 = _repeatedFixed64
      clone._repeatedSfixed32 = _repeatedSfixed32
      clone._repeatedSfixed64 = _repeatedSfixed64
      clone._repeatedFloat = _repeatedFloat
      clone._repeatedDouble = _repeatedDouble
      clone._repeatedBool = _repeatedBool
      clone._repeatedString = _repeatedString
      clone._repeatedBytes = _repeatedBytes
      clone._repeatedNestedMessage = _repeatedNestedMessage
      clone._repeatedForeignMessage = _repeatedForeignMessage
      clone._repeatedImportMessage = _repeatedImportMessage
      clone._repeatedNestedEnum = _repeatedNestedEnum
      clone._repeatedForeignEnum = _repeatedForeignEnum
      clone._repeatedImportEnum = _repeatedImportEnum
      clone._repeatedPublicImportMessage = _repeatedPublicImportMessage
      clone._oneofField = _oneofField
      return clone
    }
  }

  private var _storage = _StorageClass()


  enum OneOf_OneofField: Equatable {
    case oneofUint32(UInt32)
    case oneofNestedMessage(Proto3TestAllTypes.NestedMessage)
    case oneofString(String)
    case oneofBytes(Data)

    static func ==(lhs: Proto3TestAllTypes.OneOf_OneofField, rhs: Proto3TestAllTypes.OneOf_OneofField) -> Bool {
      switch (lhs, rhs) {
      case (.oneofUint32(let l), .oneofUint32(let r)): return l == r
      case (.oneofNestedMessage(let l), .oneofNestedMessage(let r)): return l == r
      case (.oneofString(let l), .oneofString(let r)): return l == r
      case (.oneofBytes(let l), .oneofBytes(let r)): return l == r
      default: return false
      }
    }

    fileprivate init?<T: SwiftProtobuf.Decoder>(byDecodingFrom decoder: inout T, fieldNumber: Int) throws {
      switch fieldNumber {
      case 111:
        var value = UInt32()
        try decoder.decodeSingularUInt32Field(value: &value)
        self = .oneofUint32(value)
        return
      case 112:
        var value: Proto3TestAllTypes.NestedMessage?
        try decoder.decodeSingularMessageField(value: &value)
        if let value = value {
          self = .oneofNestedMessage(value)
          return
        }
      case 113:
        var value = String()
        try decoder.decodeSingularStringField(value: &value)
        self = .oneofString(value)
        return
      case 114:
        var value = Data()
        try decoder.decodeSingularBytesField(value: &value)
        self = .oneofBytes(value)
        return
      default:
        break
      }
      return nil
    }

    fileprivate func traverse(visitor: SwiftProtobuf.Visitor, start: Int, end: Int) throws {
      switch self {
      case .oneofUint32(let v):
        if start <= 111 && 111 < end {
          try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: v, fieldNumber: 111)
        }
      case .oneofNestedMessage(let v):
        if start <= 112 && 112 < end {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 112)
        }
      case .oneofString(let v):
        if start <= 113 && 113 < end {
          try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: v, fieldNumber: 113)
        }
      case .oneofBytes(let v):
        if start <= 114 && 114 < end {
          try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: v, fieldNumber: 114)
        }
      }
    }
  }

  enum NestedEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case nestedEnumUnspecified // = 0
    case foo // = 1
    case bar // = 2
    case baz // = 3

    ///   Intentionally negative.
    case neg // = -1
    case UNRECOGNIZED(Int)

    init() {
      self = .nestedEnumUnspecified
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .nestedEnumUnspecified
      case 1: self = .foo
      case 2: self = .bar
      case 3: self = .baz
      case -1: self = .neg
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    init?(jsonName: String) {
      switch jsonName {
      case "NESTED_ENUM_UNSPECIFIED": self = .nestedEnumUnspecified
      case "FOO": self = .foo
      case "BAR": self = .bar
      case "BAZ": self = .baz
      case "NEG": self = .neg
      default: return nil
      }
    }

    init?(protoName: String) {
      switch protoName {
      case "NESTED_ENUM_UNSPECIFIED": self = .nestedEnumUnspecified
      case "FOO": self = .foo
      case "BAR": self = .bar
      case "BAZ": self = .baz
      case "NEG": self = .neg
      default: return nil
      }
    }

    var rawValue: Int {
      get {
        switch self {
        case .nestedEnumUnspecified: return 0
        case .foo: return 1
        case .bar: return 2
        case .baz: return 3
        case .neg: return -1
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    var _protobuf_jsonName: String? {
      get {
        switch self {
        case .nestedEnumUnspecified: return "NESTED_ENUM_UNSPECIFIED"
        case .foo: return "FOO"
        case .bar: return "BAR"
        case .baz: return "BAZ"
        case .neg: return "NEG"
        case .UNRECOGNIZED: return nil
        }
      }
    }

  }

  struct NestedMessage: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
    static let protoMessageName: String = "NestedMessage"
    static let protoPackageName: String = "protobuf_unittest"
    static let _protobuf_fieldNames: FieldNameMap = [
      1: .same(proto: "bb"),
    ]


    ///   The field name "b" fails to compile in proto1 because it conflicts with
    ///   a local variable named "b" in one of the generated methods.  Doh.
    ///   This file needs to compile in proto1 to test backwards-compatibility.
    var bb: Int32 = 0

    init() {}

    mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
      }
    }

    mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &bb)
      default: break
      }
    }

    func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
      if bb != 0 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: bb, fieldNumber: 1)
      }
    }

    func _protoc_generated_isEqualTo(other: Proto3TestAllTypes.NestedMessage) -> Bool {
      if bb != other.bb {return false}
      return true
    }
  }

  ///   Singular
  var singleInt32: Int32 {
    get {return _storage._singleInt32}
    set {_uniqueStorage()._singleInt32 = newValue}
  }

  var singleInt64: Int64 {
    get {return _storage._singleInt64}
    set {_uniqueStorage()._singleInt64 = newValue}
  }

  var singleUint32: UInt32 {
    get {return _storage._singleUint32}
    set {_uniqueStorage()._singleUint32 = newValue}
  }

  var singleUint64: UInt64 {
    get {return _storage._singleUint64}
    set {_uniqueStorage()._singleUint64 = newValue}
  }

  var singleSint32: Int32 {
    get {return _storage._singleSint32}
    set {_uniqueStorage()._singleSint32 = newValue}
  }

  var singleSint64: Int64 {
    get {return _storage._singleSint64}
    set {_uniqueStorage()._singleSint64 = newValue}
  }

  var singleFixed32: UInt32 {
    get {return _storage._singleFixed32}
    set {_uniqueStorage()._singleFixed32 = newValue}
  }

  var singleFixed64: UInt64 {
    get {return _storage._singleFixed64}
    set {_uniqueStorage()._singleFixed64 = newValue}
  }

  var singleSfixed32: Int32 {
    get {return _storage._singleSfixed32}
    set {_uniqueStorage()._singleSfixed32 = newValue}
  }

  var singleSfixed64: Int64 {
    get {return _storage._singleSfixed64}
    set {_uniqueStorage()._singleSfixed64 = newValue}
  }

  var singleFloat: Float {
    get {return _storage._singleFloat}
    set {_uniqueStorage()._singleFloat = newValue}
  }

  var singleDouble: Double {
    get {return _storage._singleDouble}
    set {_uniqueStorage()._singleDouble = newValue}
  }

  var singleBool: Bool {
    get {return _storage._singleBool}
    set {_uniqueStorage()._singleBool = newValue}
  }

  var singleString: String {
    get {return _storage._singleString}
    set {_uniqueStorage()._singleString = newValue}
  }

  var singleBytes: Data {
    get {return _storage._singleBytes}
    set {_uniqueStorage()._singleBytes = newValue}
  }

  var singleNestedMessage: Proto3TestAllTypes.NestedMessage {
    get {return _storage._singleNestedMessage ?? Proto3TestAllTypes.NestedMessage()}
    set {_uniqueStorage()._singleNestedMessage = newValue}
  }
  var hasSingleNestedMessage: Bool {
    return _storage._singleNestedMessage != nil
  }
  mutating func clearSingleNestedMessage() {
    return _storage._singleNestedMessage = nil
  }

  var singleForeignMessage: Proto3ForeignMessage {
    get {return _storage._singleForeignMessage ?? Proto3ForeignMessage()}
    set {_uniqueStorage()._singleForeignMessage = newValue}
  }
  var hasSingleForeignMessage: Bool {
    return _storage._singleForeignMessage != nil
  }
  mutating func clearSingleForeignMessage() {
    return _storage._singleForeignMessage = nil
  }

  var singleImportMessage: Proto3ImportMessage {
    get {return _storage._singleImportMessage ?? Proto3ImportMessage()}
    set {_uniqueStorage()._singleImportMessage = newValue}
  }
  var hasSingleImportMessage: Bool {
    return _storage._singleImportMessage != nil
  }
  mutating func clearSingleImportMessage() {
    return _storage._singleImportMessage = nil
  }

  var singleNestedEnum: Proto3TestAllTypes.NestedEnum {
    get {return _storage._singleNestedEnum}
    set {_uniqueStorage()._singleNestedEnum = newValue}
  }

  var singleForeignEnum: Proto3ForeignEnum {
    get {return _storage._singleForeignEnum}
    set {_uniqueStorage()._singleForeignEnum = newValue}
  }

  var singleImportEnum: Proto3ImportEnum {
    get {return _storage._singleImportEnum}
    set {_uniqueStorage()._singleImportEnum = newValue}
  }

  ///   Defined in unittest_import_public.proto
  var singlePublicImportMessage: Proto3PublicImportMessage {
    get {return _storage._singlePublicImportMessage ?? Proto3PublicImportMessage()}
    set {_uniqueStorage()._singlePublicImportMessage = newValue}
  }
  var hasSinglePublicImportMessage: Bool {
    return _storage._singlePublicImportMessage != nil
  }
  mutating func clearSinglePublicImportMessage() {
    return _storage._singlePublicImportMessage = nil
  }

  ///   Repeated
  var repeatedInt32: [Int32] {
    get {return _storage._repeatedInt32}
    set {_uniqueStorage()._repeatedInt32 = newValue}
  }

  var repeatedInt64: [Int64] {
    get {return _storage._repeatedInt64}
    set {_uniqueStorage()._repeatedInt64 = newValue}
  }

  var repeatedUint32: [UInt32] {
    get {return _storage._repeatedUint32}
    set {_uniqueStorage()._repeatedUint32 = newValue}
  }

  var repeatedUint64: [UInt64] {
    get {return _storage._repeatedUint64}
    set {_uniqueStorage()._repeatedUint64 = newValue}
  }

  var repeatedSint32: [Int32] {
    get {return _storage._repeatedSint32}
    set {_uniqueStorage()._repeatedSint32 = newValue}
  }

  var repeatedSint64: [Int64] {
    get {return _storage._repeatedSint64}
    set {_uniqueStorage()._repeatedSint64 = newValue}
  }

  var repeatedFixed32: [UInt32] {
    get {return _storage._repeatedFixed32}
    set {_uniqueStorage()._repeatedFixed32 = newValue}
  }

  var repeatedFixed64: [UInt64] {
    get {return _storage._repeatedFixed64}
    set {_uniqueStorage()._repeatedFixed64 = newValue}
  }

  var repeatedSfixed32: [Int32] {
    get {return _storage._repeatedSfixed32}
    set {_uniqueStorage()._repeatedSfixed32 = newValue}
  }

  var repeatedSfixed64: [Int64] {
    get {return _storage._repeatedSfixed64}
    set {_uniqueStorage()._repeatedSfixed64 = newValue}
  }

  var repeatedFloat: [Float] {
    get {return _storage._repeatedFloat}
    set {_uniqueStorage()._repeatedFloat = newValue}
  }

  var repeatedDouble: [Double] {
    get {return _storage._repeatedDouble}
    set {_uniqueStorage()._repeatedDouble = newValue}
  }

  var repeatedBool: [Bool] {
    get {return _storage._repeatedBool}
    set {_uniqueStorage()._repeatedBool = newValue}
  }

  var repeatedString: [String] {
    get {return _storage._repeatedString}
    set {_uniqueStorage()._repeatedString = newValue}
  }

  var repeatedBytes: [Data] {
    get {return _storage._repeatedBytes}
    set {_uniqueStorage()._repeatedBytes = newValue}
  }

  var repeatedNestedMessage: [Proto3TestAllTypes.NestedMessage] {
    get {return _storage._repeatedNestedMessage}
    set {_uniqueStorage()._repeatedNestedMessage = newValue}
  }

  var repeatedForeignMessage: [Proto3ForeignMessage] {
    get {return _storage._repeatedForeignMessage}
    set {_uniqueStorage()._repeatedForeignMessage = newValue}
  }

  var repeatedImportMessage: [Proto3ImportMessage] {
    get {return _storage._repeatedImportMessage}
    set {_uniqueStorage()._repeatedImportMessage = newValue}
  }

  var repeatedNestedEnum: [Proto3TestAllTypes.NestedEnum] {
    get {return _storage._repeatedNestedEnum}
    set {_uniqueStorage()._repeatedNestedEnum = newValue}
  }

  var repeatedForeignEnum: [Proto3ForeignEnum] {
    get {return _storage._repeatedForeignEnum}
    set {_uniqueStorage()._repeatedForeignEnum = newValue}
  }

  var repeatedImportEnum: [Proto3ImportEnum] {
    get {return _storage._repeatedImportEnum}
    set {_uniqueStorage()._repeatedImportEnum = newValue}
  }

  ///   Defined in unittest_import_public.proto
  var repeatedPublicImportMessage: [Proto3PublicImportMessage] {
    get {return _storage._repeatedPublicImportMessage}
    set {_uniqueStorage()._repeatedPublicImportMessage = newValue}
  }

  var oneofUint32: UInt32 {
    get {
      if case .oneofUint32(let v)? = _storage._oneofField {
        return v
      }
      return 0
    }
    set {
      _uniqueStorage()._oneofField = .oneofUint32(newValue)
    }
  }

  var oneofNestedMessage: Proto3TestAllTypes.NestedMessage {
    get {
      if case .oneofNestedMessage(let v)? = _storage._oneofField {
        return v
      }
      return Proto3TestAllTypes.NestedMessage()
    }
    set {
      _uniqueStorage()._oneofField = .oneofNestedMessage(newValue)
    }
  }

  var oneofString: String {
    get {
      if case .oneofString(let v)? = _storage._oneofField {
        return v
      }
      return ""
    }
    set {
      _uniqueStorage()._oneofField = .oneofString(newValue)
    }
  }

  var oneofBytes: Data {
    get {
      if case .oneofBytes(let v)? = _storage._oneofField {
        return v
      }
      return Data()
    }
    set {
      _uniqueStorage()._oneofField = .oneofBytes(newValue)
    }
  }

  var oneofField: OneOf_OneofField? {
    get {return _storage._oneofField}
    set {
      _uniqueStorage()._oneofField = newValue
    }
  }

  init() {}

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    try _uniqueStorage().decodeMessage(decoder: &decoder)
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    try _uniqueStorage().decodeField(decoder: &decoder, fieldNumber: fieldNumber)
  }

  func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    try withExtendedLifetime(_storage) { (storage: _StorageClass) in
      if storage._singleInt32 != 0 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: storage._singleInt32, fieldNumber: 1)
      }
      if storage._singleInt64 != 0 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: storage._singleInt64, fieldNumber: 2)
      }
      if storage._singleUint32 != 0 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: storage._singleUint32, fieldNumber: 3)
      }
      if storage._singleUint64 != 0 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt64.self, value: storage._singleUint64, fieldNumber: 4)
      }
      if storage._singleSint32 != 0 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufSInt32.self, value: storage._singleSint32, fieldNumber: 5)
      }
      if storage._singleSint64 != 0 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufSInt64.self, value: storage._singleSint64, fieldNumber: 6)
      }
      if storage._singleFixed32 != 0 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufFixed32.self, value: storage._singleFixed32, fieldNumber: 7)
      }
      if storage._singleFixed64 != 0 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufFixed64.self, value: storage._singleFixed64, fieldNumber: 8)
      }
      if storage._singleSfixed32 != 0 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufSFixed32.self, value: storage._singleSfixed32, fieldNumber: 9)
      }
      if storage._singleSfixed64 != 0 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufSFixed64.self, value: storage._singleSfixed64, fieldNumber: 10)
      }
      if storage._singleFloat != 0 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufFloat.self, value: storage._singleFloat, fieldNumber: 11)
      }
      if storage._singleDouble != 0 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufDouble.self, value: storage._singleDouble, fieldNumber: 12)
      }
      if storage._singleBool != false {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: storage._singleBool, fieldNumber: 13)
      }
      if storage._singleString != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: storage._singleString, fieldNumber: 14)
      }
      if storage._singleBytes != Data() {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: storage._singleBytes, fieldNumber: 15)
      }
      if let v = storage._singleNestedMessage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
      }
      if let v = storage._singleForeignMessage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
      }
      if let v = storage._singleImportMessage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
      }
      if storage._singleNestedEnum != Proto3TestAllTypes.NestedEnum.nestedEnumUnspecified {
        try visitor.visitSingularEnumField(value: storage._singleNestedEnum, fieldNumber: 21)
      }
      if storage._singleForeignEnum != Proto3ForeignEnum.foreignUnspecified {
        try visitor.visitSingularEnumField(value: storage._singleForeignEnum, fieldNumber: 22)
      }
      if storage._singleImportEnum != Proto3ImportEnum.importEnumUnspecified {
        try visitor.visitSingularEnumField(value: storage._singleImportEnum, fieldNumber: 23)
      }
      if let v = storage._singlePublicImportMessage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 26)
      }
      if !storage._repeatedInt32.isEmpty {
        try visitor.visitPackedField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: storage._repeatedInt32, fieldNumber: 31)
      }
      if !storage._repeatedInt64.isEmpty {
        try visitor.visitPackedField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: storage._repeatedInt64, fieldNumber: 32)
      }
      if !storage._repeatedUint32.isEmpty {
        try visitor.visitPackedField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: storage._repeatedUint32, fieldNumber: 33)
      }
      if !storage._repeatedUint64.isEmpty {
        try visitor.visitPackedField(fieldType: SwiftProtobuf.ProtobufUInt64.self, value: storage._repeatedUint64, fieldNumber: 34)
      }
      if !storage._repeatedSint32.isEmpty {
        try visitor.visitPackedField(fieldType: SwiftProtobuf.ProtobufSInt32.self, value: storage._repeatedSint32, fieldNumber: 35)
      }
      if !storage._repeatedSint64.isEmpty {
        try visitor.visitPackedField(fieldType: SwiftProtobuf.ProtobufSInt64.self, value: storage._repeatedSint64, fieldNumber: 36)
      }
      if !storage._repeatedFixed32.isEmpty {
        try visitor.visitPackedField(fieldType: SwiftProtobuf.ProtobufFixed32.self, value: storage._repeatedFixed32, fieldNumber: 37)
      }
      if !storage._repeatedFixed64.isEmpty {
        try visitor.visitPackedField(fieldType: SwiftProtobuf.ProtobufFixed64.self, value: storage._repeatedFixed64, fieldNumber: 38)
      }
      if !storage._repeatedSfixed32.isEmpty {
        try visitor.visitPackedField(fieldType: SwiftProtobuf.ProtobufSFixed32.self, value: storage._repeatedSfixed32, fieldNumber: 39)
      }
      if !storage._repeatedSfixed64.isEmpty {
        try visitor.visitPackedField(fieldType: SwiftProtobuf.ProtobufSFixed64.self, value: storage._repeatedSfixed64, fieldNumber: 40)
      }
      if !storage._repeatedFloat.isEmpty {
        try visitor.visitPackedField(fieldType: SwiftProtobuf.ProtobufFloat.self, value: storage._repeatedFloat, fieldNumber: 41)
      }
      if !storage._repeatedDouble.isEmpty {
        try visitor.visitPackedField(fieldType: SwiftProtobuf.ProtobufDouble.self, value: storage._repeatedDouble, fieldNumber: 42)
      }
      if !storage._repeatedBool.isEmpty {
        try visitor.visitPackedField(fieldType: SwiftProtobuf.ProtobufBool.self, value: storage._repeatedBool, fieldNumber: 43)
      }
      if !storage._repeatedString.isEmpty {
        try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufString.self, value: storage._repeatedString, fieldNumber: 44)
      }
      if !storage._repeatedBytes.isEmpty {
        try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: storage._repeatedBytes, fieldNumber: 45)
      }
      if !storage._repeatedNestedMessage.isEmpty {
        try visitor.visitRepeatedMessageField(value: storage._repeatedNestedMessage, fieldNumber: 48)
      }
      if !storage._repeatedForeignMessage.isEmpty {
        try visitor.visitRepeatedMessageField(value: storage._repeatedForeignMessage, fieldNumber: 49)
      }
      if !storage._repeatedImportMessage.isEmpty {
        try visitor.visitRepeatedMessageField(value: storage._repeatedImportMessage, fieldNumber: 50)
      }
      if !storage._repeatedNestedEnum.isEmpty {
        try visitor.visitPackedEnumField(value: storage._repeatedNestedEnum, fieldNumber: 51)
      }
      if !storage._repeatedForeignEnum.isEmpty {
        try visitor.visitPackedEnumField(value: storage._repeatedForeignEnum, fieldNumber: 52)
      }
      if !storage._repeatedImportEnum.isEmpty {
        try visitor.visitPackedEnumField(value: storage._repeatedImportEnum, fieldNumber: 53)
      }
      if !storage._repeatedPublicImportMessage.isEmpty {
        try visitor.visitRepeatedMessageField(value: storage._repeatedPublicImportMessage, fieldNumber: 54)
      }
      try storage._oneofField?.traverse(visitor: visitor, start: 111, end: 115)
    }
  }

  func _protoc_generated_isEqualTo(other: Proto3TestAllTypes) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

///   This proto includes a recusively nested message.
struct Proto3NestedTestAllTypes: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  static let protoMessageName: String = "NestedTestAllTypes"
  static let protoPackageName: String = "protobuf_unittest"
  static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "child"),
    2: .same(proto: "payload"),
    3: .unique(proto: "repeated_child", json: "repeatedChild"),
  ]

  private class _StorageClass {
    var _child: Proto3NestedTestAllTypes? = nil
    var _payload: Proto3TestAllTypes? = nil
    var _repeatedChild: [Proto3NestedTestAllTypes] = []

    init() {}

    func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
      }
    }

    func decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &_child)
      case 2: try decoder.decodeSingularMessageField(value: &_payload)
      case 3: try decoder.decodeRepeatedMessageField(value: &_repeatedChild)
      default: break
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _child != other._child {return false}
      if _payload != other._payload {return false}
      if _repeatedChild != other._repeatedChild {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._child = _child
      clone._payload = _payload
      clone._repeatedChild = _repeatedChild
      return clone
    }
  }

  private var _storage = _StorageClass()


  var child: Proto3NestedTestAllTypes {
    get {return _storage._child ?? Proto3NestedTestAllTypes()}
    set {_uniqueStorage()._child = newValue}
  }
  var hasChild: Bool {
    return _storage._child != nil
  }
  mutating func clearChild() {
    return _storage._child = nil
  }

  var payload: Proto3TestAllTypes {
    get {return _storage._payload ?? Proto3TestAllTypes()}
    set {_uniqueStorage()._payload = newValue}
  }
  var hasPayload: Bool {
    return _storage._payload != nil
  }
  mutating func clearPayload() {
    return _storage._payload = nil
  }

  var repeatedChild: [Proto3NestedTestAllTypes] {
    get {return _storage._repeatedChild}
    set {_uniqueStorage()._repeatedChild = newValue}
  }

  init() {}

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    try _uniqueStorage().decodeMessage(decoder: &decoder)
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    try _uniqueStorage().decodeField(decoder: &decoder, fieldNumber: fieldNumber)
  }

  func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    try withExtendedLifetime(_storage) { (storage: _StorageClass) in
      if let v = storage._child {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = storage._payload {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !storage._repeatedChild.isEmpty {
        try visitor.visitRepeatedMessageField(value: storage._repeatedChild, fieldNumber: 3)
      }
    }
  }

  func _protoc_generated_isEqualTo(other: Proto3NestedTestAllTypes) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

struct Proto3TestDeprecatedFields: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  static let protoMessageName: String = "TestDeprecatedFields"
  static let protoPackageName: String = "protobuf_unittest"
  static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "deprecated_int32", json: "deprecatedInt32"),
  ]


  var deprecatedInt32: Int32 = 0

  init() {}

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
    }
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 1: try decoder.decodeSingularInt32Field(value: &deprecatedInt32)
    default: break
    }
  }

  func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if deprecatedInt32 != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: deprecatedInt32, fieldNumber: 1)
    }
  }

  func _protoc_generated_isEqualTo(other: Proto3TestDeprecatedFields) -> Bool {
    if deprecatedInt32 != other.deprecatedInt32 {return false}
    return true
  }
}

///   Define these after TestAllTypes to make sure the compiler can handle
///   that.
struct Proto3ForeignMessage: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  static let protoMessageName: String = "ForeignMessage"
  static let protoPackageName: String = "protobuf_unittest"
  static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "c"),
  ]


  var c: Int32 = 0

  init() {}

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
    }
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 1: try decoder.decodeSingularInt32Field(value: &c)
    default: break
    }
  }

  func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if c != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: c, fieldNumber: 1)
    }
  }

  func _protoc_generated_isEqualTo(other: Proto3ForeignMessage) -> Bool {
    if c != other.c {return false}
    return true
  }
}

struct Proto3TestReservedFields: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  static let protoMessageName: String = "TestReservedFields"
  static let protoPackageName: String = "protobuf_unittest"
  static let _protobuf_fieldNames = FieldNameMap()


  init() {}

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
    }
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
  }

  func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
  }

  func _protoc_generated_isEqualTo(other: Proto3TestReservedFields) -> Bool {
    return true
  }
}

///   Test that we can use NestedMessage from outside TestAllTypes.
struct Proto3TestForeignNested: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  static let protoMessageName: String = "TestForeignNested"
  static let protoPackageName: String = "protobuf_unittest"
  static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "foreign_nested", json: "foreignNested"),
  ]

  private class _StorageClass {
    var _foreignNested: Proto3TestAllTypes.NestedMessage? = nil

    init() {}

    func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
      }
    }

    func decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &_foreignNested)
      default: break
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _foreignNested != other._foreignNested {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._foreignNested = _foreignNested
      return clone
    }
  }

  private var _storage = _StorageClass()


  var foreignNested: Proto3TestAllTypes.NestedMessage {
    get {return _storage._foreignNested ?? Proto3TestAllTypes.NestedMessage()}
    set {_uniqueStorage()._foreignNested = newValue}
  }
  var hasForeignNested: Bool {
    return _storage._foreignNested != nil
  }
  mutating func clearForeignNested() {
    return _storage._foreignNested = nil
  }

  init() {}

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    try _uniqueStorage().decodeMessage(decoder: &decoder)
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    try _uniqueStorage().decodeField(decoder: &decoder, fieldNumber: fieldNumber)
  }

  func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    try withExtendedLifetime(_storage) { (storage: _StorageClass) in
      if let v = storage._foreignNested {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
  }

  func _protoc_generated_isEqualTo(other: Proto3TestForeignNested) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

///   Test that really large tag numbers don't break anything.
struct Proto3TestReallyLargeTagNumber: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  static let protoMessageName: String = "TestReallyLargeTagNumber"
  static let protoPackageName: String = "protobuf_unittest"
  static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "a"),
    268435455: .same(proto: "bb"),
  ]


  ///   The largest possible tag number is 2^28 - 1, since the wire format uses
  ///   three bits to communicate wire type.
  var a: Int32 = 0

  var bb: Int32 = 0

  init() {}

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
    }
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 1: try decoder.decodeSingularInt32Field(value: &a)
    case 268435455: try decoder.decodeSingularInt32Field(value: &bb)
    default: break
    }
  }

  func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if a != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: a, fieldNumber: 1)
    }
    if bb != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: bb, fieldNumber: 268435455)
    }
  }

  func _protoc_generated_isEqualTo(other: Proto3TestReallyLargeTagNumber) -> Bool {
    if a != other.a {return false}
    if bb != other.bb {return false}
    return true
  }
}

struct Proto3TestRecursiveMessage: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  static let protoMessageName: String = "TestRecursiveMessage"
  static let protoPackageName: String = "protobuf_unittest"
  static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "a"),
    2: .same(proto: "i"),
  ]

  private class _StorageClass {
    var _a: Proto3TestRecursiveMessage? = nil
    var _i: Int32 = 0

    init() {}

    func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
      }
    }

    func decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &_a)
      case 2: try decoder.decodeSingularInt32Field(value: &_i)
      default: break
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _a != other._a {return false}
      if _i != other._i {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._a = _a
      clone._i = _i
      return clone
    }
  }

  private var _storage = _StorageClass()


  var a: Proto3TestRecursiveMessage {
    get {return _storage._a ?? Proto3TestRecursiveMessage()}
    set {_uniqueStorage()._a = newValue}
  }
  var hasA: Bool {
    return _storage._a != nil
  }
  mutating func clearA() {
    return _storage._a = nil
  }

  var i: Int32 {
    get {return _storage._i}
    set {_uniqueStorage()._i = newValue}
  }

  init() {}

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    try _uniqueStorage().decodeMessage(decoder: &decoder)
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    try _uniqueStorage().decodeField(decoder: &decoder, fieldNumber: fieldNumber)
  }

  func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    try withExtendedLifetime(_storage) { (storage: _StorageClass) in
      if let v = storage._a {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if storage._i != 0 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: storage._i, fieldNumber: 2)
      }
    }
  }

  func _protoc_generated_isEqualTo(other: Proto3TestRecursiveMessage) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

///   Test that mutual recursion works.
struct Proto3TestMutualRecursionA: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  static let protoMessageName: String = "TestMutualRecursionA"
  static let protoPackageName: String = "protobuf_unittest"
  static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "bb"),
  ]

  private class _StorageClass {
    var _bb: Proto3TestMutualRecursionB? = nil

    init() {}

    func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
      }
    }

    func decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &_bb)
      default: break
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _bb != other._bb {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._bb = _bb
      return clone
    }
  }

  private var _storage = _StorageClass()


  var bb: Proto3TestMutualRecursionB {
    get {return _storage._bb ?? Proto3TestMutualRecursionB()}
    set {_uniqueStorage()._bb = newValue}
  }
  var hasBb: Bool {
    return _storage._bb != nil
  }
  mutating func clearBb() {
    return _storage._bb = nil
  }

  init() {}

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    try _uniqueStorage().decodeMessage(decoder: &decoder)
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    try _uniqueStorage().decodeField(decoder: &decoder, fieldNumber: fieldNumber)
  }

  func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    try withExtendedLifetime(_storage) { (storage: _StorageClass) in
      if let v = storage._bb {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
  }

  func _protoc_generated_isEqualTo(other: Proto3TestMutualRecursionA) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

struct Proto3TestMutualRecursionB: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  static let protoMessageName: String = "TestMutualRecursionB"
  static let protoPackageName: String = "protobuf_unittest"
  static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "a"),
    2: .unique(proto: "optional_int32", json: "optionalInt32"),
  ]

  private class _StorageClass {
    var _a: Proto3TestMutualRecursionA? = nil
    var _optionalInt32: Int32 = 0

    init() {}

    func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
      }
    }

    func decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &_a)
      case 2: try decoder.decodeSingularInt32Field(value: &_optionalInt32)
      default: break
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _a != other._a {return false}
      if _optionalInt32 != other._optionalInt32 {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._a = _a
      clone._optionalInt32 = _optionalInt32
      return clone
    }
  }

  private var _storage = _StorageClass()


  var a: Proto3TestMutualRecursionA {
    get {return _storage._a ?? Proto3TestMutualRecursionA()}
    set {_uniqueStorage()._a = newValue}
  }
  var hasA: Bool {
    return _storage._a != nil
  }
  mutating func clearA() {
    return _storage._a = nil
  }

  var optionalInt32: Int32 {
    get {return _storage._optionalInt32}
    set {_uniqueStorage()._optionalInt32 = newValue}
  }

  init() {}

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    try _uniqueStorage().decodeMessage(decoder: &decoder)
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    try _uniqueStorage().decodeField(decoder: &decoder, fieldNumber: fieldNumber)
  }

  func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    try withExtendedLifetime(_storage) { (storage: _StorageClass) in
      if let v = storage._a {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if storage._optionalInt32 != 0 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: storage._optionalInt32, fieldNumber: 2)
      }
    }
  }

  func _protoc_generated_isEqualTo(other: Proto3TestMutualRecursionB) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

///   Test message with CamelCase field names.  This violates Protocol Buffer
///   standard style.
struct Proto3TestCamelCaseFieldNames: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  static let protoMessageName: String = "TestCamelCaseFieldNames"
  static let protoPackageName: String = "protobuf_unittest"
  static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "PrimitiveField"),
    2: .same(proto: "StringField"),
    3: .same(proto: "EnumField"),
    4: .same(proto: "MessageField"),
    7: .same(proto: "RepeatedPrimitiveField"),
    8: .same(proto: "RepeatedStringField"),
    9: .same(proto: "RepeatedEnumField"),
    10: .same(proto: "RepeatedMessageField"),
  ]

  private class _StorageClass {
    var _primitiveField: Int32 = 0
    var _stringField: String = ""
    var _enumField: Proto3ForeignEnum = Proto3ForeignEnum.foreignUnspecified
    var _messageField: Proto3ForeignMessage? = nil
    var _repeatedPrimitiveField: [Int32] = []
    var _repeatedStringField: [String] = []
    var _repeatedEnumField: [Proto3ForeignEnum] = []
    var _repeatedMessageField: [Proto3ForeignMessage] = []

    init() {}

    func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
      }
    }

    func decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &_primitiveField)
      case 2: try decoder.decodeSingularStringField(value: &_stringField)
      case 3: try decoder.decodeSingularEnumField(value: &_enumField)
      case 4: try decoder.decodeSingularMessageField(value: &_messageField)
      case 7: try decoder.decodeRepeatedInt32Field(value: &_repeatedPrimitiveField)
      case 8: try decoder.decodeRepeatedStringField(value: &_repeatedStringField)
      case 9: try decoder.decodeRepeatedEnumField(value: &_repeatedEnumField)
      case 10: try decoder.decodeRepeatedMessageField(value: &_repeatedMessageField)
      default: break
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _primitiveField != other._primitiveField {return false}
      if _stringField != other._stringField {return false}
      if _enumField != other._enumField {return false}
      if _messageField != other._messageField {return false}
      if _repeatedPrimitiveField != other._repeatedPrimitiveField {return false}
      if _repeatedStringField != other._repeatedStringField {return false}
      if _repeatedEnumField != other._repeatedEnumField {return false}
      if _repeatedMessageField != other._repeatedMessageField {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._primitiveField = _primitiveField
      clone._stringField = _stringField
      clone._enumField = _enumField
      clone._messageField = _messageField
      clone._repeatedPrimitiveField = _repeatedPrimitiveField
      clone._repeatedStringField = _repeatedStringField
      clone._repeatedEnumField = _repeatedEnumField
      clone._repeatedMessageField = _repeatedMessageField
      return clone
    }
  }

  private var _storage = _StorageClass()


  var primitiveField: Int32 {
    get {return _storage._primitiveField}
    set {_uniqueStorage()._primitiveField = newValue}
  }

  var stringField: String {
    get {return _storage._stringField}
    set {_uniqueStorage()._stringField = newValue}
  }

  var enumField: Proto3ForeignEnum {
    get {return _storage._enumField}
    set {_uniqueStorage()._enumField = newValue}
  }

  var messageField: Proto3ForeignMessage {
    get {return _storage._messageField ?? Proto3ForeignMessage()}
    set {_uniqueStorage()._messageField = newValue}
  }
  var hasMessageField: Bool {
    return _storage._messageField != nil
  }
  mutating func clearMessageField() {
    return _storage._messageField = nil
  }

  var repeatedPrimitiveField: [Int32] {
    get {return _storage._repeatedPrimitiveField}
    set {_uniqueStorage()._repeatedPrimitiveField = newValue}
  }

  var repeatedStringField: [String] {
    get {return _storage._repeatedStringField}
    set {_uniqueStorage()._repeatedStringField = newValue}
  }

  var repeatedEnumField: [Proto3ForeignEnum] {
    get {return _storage._repeatedEnumField}
    set {_uniqueStorage()._repeatedEnumField = newValue}
  }

  var repeatedMessageField: [Proto3ForeignMessage] {
    get {return _storage._repeatedMessageField}
    set {_uniqueStorage()._repeatedMessageField = newValue}
  }

  init() {}

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    try _uniqueStorage().decodeMessage(decoder: &decoder)
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    try _uniqueStorage().decodeField(decoder: &decoder, fieldNumber: fieldNumber)
  }

  func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    try withExtendedLifetime(_storage) { (storage: _StorageClass) in
      if storage._primitiveField != 0 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: storage._primitiveField, fieldNumber: 1)
      }
      if storage._stringField != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: storage._stringField, fieldNumber: 2)
      }
      if storage._enumField != Proto3ForeignEnum.foreignUnspecified {
        try visitor.visitSingularEnumField(value: storage._enumField, fieldNumber: 3)
      }
      if let v = storage._messageField {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if !storage._repeatedPrimitiveField.isEmpty {
        try visitor.visitPackedField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: storage._repeatedPrimitiveField, fieldNumber: 7)
      }
      if !storage._repeatedStringField.isEmpty {
        try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufString.self, value: storage._repeatedStringField, fieldNumber: 8)
      }
      if !storage._repeatedEnumField.isEmpty {
        try visitor.visitPackedEnumField(value: storage._repeatedEnumField, fieldNumber: 9)
      }
      if !storage._repeatedMessageField.isEmpty {
        try visitor.visitRepeatedMessageField(value: storage._repeatedMessageField, fieldNumber: 10)
      }
    }
  }

  func _protoc_generated_isEqualTo(other: Proto3TestCamelCaseFieldNames) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

///   We list fields out of order, to ensure that we're using field number and not
///   field index to determine serialization order.
struct Proto3TestFieldOrderings: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  static let protoMessageName: String = "TestFieldOrderings"
  static let protoPackageName: String = "protobuf_unittest"
  static let _protobuf_fieldNames: FieldNameMap = [
    11: .unique(proto: "my_string", json: "myString"),
    1: .unique(proto: "my_int", json: "myInt"),
    101: .unique(proto: "my_float", json: "myFloat"),
    200: .unique(proto: "single_nested_message", json: "singleNestedMessage"),
  ]

  private class _StorageClass {
    var _myString: String = ""
    var _myInt: Int64 = 0
    var _myFloat: Float = 0
    var _singleNestedMessage: Proto3TestFieldOrderings.NestedMessage? = nil

    init() {}

    func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
      }
    }

    func decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
      switch fieldNumber {
      case 11: try decoder.decodeSingularStringField(value: &_myString)
      case 1: try decoder.decodeSingularInt64Field(value: &_myInt)
      case 101: try decoder.decodeSingularFloatField(value: &_myFloat)
      case 200: try decoder.decodeSingularMessageField(value: &_singleNestedMessage)
      default: break
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _myString != other._myString {return false}
      if _myInt != other._myInt {return false}
      if _myFloat != other._myFloat {return false}
      if _singleNestedMessage != other._singleNestedMessage {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._myString = _myString
      clone._myInt = _myInt
      clone._myFloat = _myFloat
      clone._singleNestedMessage = _singleNestedMessage
      return clone
    }
  }

  private var _storage = _StorageClass()


  struct NestedMessage: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
    static let protoMessageName: String = "NestedMessage"
    static let protoPackageName: String = "protobuf_unittest"
    static let _protobuf_fieldNames: FieldNameMap = [
      2: .same(proto: "oo"),
      1: .same(proto: "bb"),
    ]


    var oo: Int64 = 0

    ///   The field name "b" fails to compile in proto1 because it conflicts with
    ///   a local variable named "b" in one of the generated methods.  Doh.
    ///   This file needs to compile in proto1 to test backwards-compatibility.
    var bb: Int32 = 0

    init() {}

    mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
      }
    }

    mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
      switch fieldNumber {
      case 2: try decoder.decodeSingularInt64Field(value: &oo)
      case 1: try decoder.decodeSingularInt32Field(value: &bb)
      default: break
      }
    }

    func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
      if bb != 0 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: bb, fieldNumber: 1)
      }
      if oo != 0 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: oo, fieldNumber: 2)
      }
    }

    func _protoc_generated_isEqualTo(other: Proto3TestFieldOrderings.NestedMessage) -> Bool {
      if oo != other.oo {return false}
      if bb != other.bb {return false}
      return true
    }
  }

  var myString: String {
    get {return _storage._myString}
    set {_uniqueStorage()._myString = newValue}
  }

  var myInt: Int64 {
    get {return _storage._myInt}
    set {_uniqueStorage()._myInt = newValue}
  }

  var myFloat: Float {
    get {return _storage._myFloat}
    set {_uniqueStorage()._myFloat = newValue}
  }

  var singleNestedMessage: Proto3TestFieldOrderings.NestedMessage {
    get {return _storage._singleNestedMessage ?? Proto3TestFieldOrderings.NestedMessage()}
    set {_uniqueStorage()._singleNestedMessage = newValue}
  }
  var hasSingleNestedMessage: Bool {
    return _storage._singleNestedMessage != nil
  }
  mutating func clearSingleNestedMessage() {
    return _storage._singleNestedMessage = nil
  }

  init() {}

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    try _uniqueStorage().decodeMessage(decoder: &decoder)
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    try _uniqueStorage().decodeField(decoder: &decoder, fieldNumber: fieldNumber)
  }

  func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    try withExtendedLifetime(_storage) { (storage: _StorageClass) in
      if storage._myInt != 0 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: storage._myInt, fieldNumber: 1)
      }
      if storage._myString != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: storage._myString, fieldNumber: 11)
      }
      if storage._myFloat != 0 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufFloat.self, value: storage._myFloat, fieldNumber: 101)
      }
      if let v = storage._singleNestedMessage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 200)
      }
    }
  }

  func _protoc_generated_isEqualTo(other: Proto3TestFieldOrderings) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

struct Proto3SparseEnumMessage: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  static let protoMessageName: String = "SparseEnumMessage"
  static let protoPackageName: String = "protobuf_unittest"
  static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "sparse_enum", json: "sparseEnum"),
  ]


  var sparseEnum: Proto3TestSparseEnum = Proto3TestSparseEnum.testSparseEnumUnspecified

  init() {}

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
    }
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 1: try decoder.decodeSingularEnumField(value: &sparseEnum)
    default: break
    }
  }

  func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if sparseEnum != Proto3TestSparseEnum.testSparseEnumUnspecified {
      try visitor.visitSingularEnumField(value: sparseEnum, fieldNumber: 1)
    }
  }

  func _protoc_generated_isEqualTo(other: Proto3SparseEnumMessage) -> Bool {
    if sparseEnum != other.sparseEnum {return false}
    return true
  }
}

///   Test String and Bytes: string is for valid UTF-8 strings
struct Proto3OneString: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  static let protoMessageName: String = "OneString"
  static let protoPackageName: String = "protobuf_unittest"
  static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "data"),
  ]


  var data: String = ""

  init() {}

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
    }
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 1: try decoder.decodeSingularStringField(value: &data)
    default: break
    }
  }

  func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if data != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: data, fieldNumber: 1)
    }
  }

  func _protoc_generated_isEqualTo(other: Proto3OneString) -> Bool {
    if data != other.data {return false}
    return true
  }
}

struct Proto3MoreString: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  static let protoMessageName: String = "MoreString"
  static let protoPackageName: String = "protobuf_unittest"
  static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "data"),
  ]


  var data: [String] = []

  init() {}

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
    }
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 1: try decoder.decodeRepeatedStringField(value: &data)
    default: break
    }
  }

  func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if !data.isEmpty {
      try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufString.self, value: data, fieldNumber: 1)
    }
  }

  func _protoc_generated_isEqualTo(other: Proto3MoreString) -> Bool {
    if data != other.data {return false}
    return true
  }
}

struct Proto3OneBytes: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  static let protoMessageName: String = "OneBytes"
  static let protoPackageName: String = "protobuf_unittest"
  static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "data"),
  ]


  var data: Data = Data()

  init() {}

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
    }
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 1: try decoder.decodeSingularBytesField(value: &data)
    default: break
    }
  }

  func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if data != Data() {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: data, fieldNumber: 1)
    }
  }

  func _protoc_generated_isEqualTo(other: Proto3OneBytes) -> Bool {
    if data != other.data {return false}
    return true
  }
}

struct Proto3MoreBytes: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  static let protoMessageName: String = "MoreBytes"
  static let protoPackageName: String = "protobuf_unittest"
  static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "data"),
  ]


  var data: Data = Data()

  init() {}

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
    }
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 1: try decoder.decodeSingularBytesField(value: &data)
    default: break
    }
  }

  func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if data != Data() {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: data, fieldNumber: 1)
    }
  }

  func _protoc_generated_isEqualTo(other: Proto3MoreBytes) -> Bool {
    if data != other.data {return false}
    return true
  }
}

///   Test int32, uint32, int64, uint64, and bool are all compatible
struct Proto3Int32Message: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  static let protoMessageName: String = "Int32Message"
  static let protoPackageName: String = "protobuf_unittest"
  static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "data"),
  ]


  var data: Int32 = 0

  init() {}

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
    }
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 1: try decoder.decodeSingularInt32Field(value: &data)
    default: break
    }
  }

  func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if data != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: data, fieldNumber: 1)
    }
  }

  func _protoc_generated_isEqualTo(other: Proto3Int32Message) -> Bool {
    if data != other.data {return false}
    return true
  }
}

struct Proto3Uint32Message: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  static let protoMessageName: String = "Uint32Message"
  static let protoPackageName: String = "protobuf_unittest"
  static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "data"),
  ]


  var data: UInt32 = 0

  init() {}

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
    }
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 1: try decoder.decodeSingularUInt32Field(value: &data)
    default: break
    }
  }

  func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if data != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: data, fieldNumber: 1)
    }
  }

  func _protoc_generated_isEqualTo(other: Proto3Uint32Message) -> Bool {
    if data != other.data {return false}
    return true
  }
}

struct Proto3Int64Message: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  static let protoMessageName: String = "Int64Message"
  static let protoPackageName: String = "protobuf_unittest"
  static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "data"),
  ]


  var data: Int64 = 0

  init() {}

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
    }
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 1: try decoder.decodeSingularInt64Field(value: &data)
    default: break
    }
  }

  func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if data != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: data, fieldNumber: 1)
    }
  }

  func _protoc_generated_isEqualTo(other: Proto3Int64Message) -> Bool {
    if data != other.data {return false}
    return true
  }
}

struct Proto3Uint64Message: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  static let protoMessageName: String = "Uint64Message"
  static let protoPackageName: String = "protobuf_unittest"
  static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "data"),
  ]


  var data: UInt64 = 0

  init() {}

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
    }
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 1: try decoder.decodeSingularUInt64Field(value: &data)
    default: break
    }
  }

  func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if data != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt64.self, value: data, fieldNumber: 1)
    }
  }

  func _protoc_generated_isEqualTo(other: Proto3Uint64Message) -> Bool {
    if data != other.data {return false}
    return true
  }
}

struct Proto3BoolMessage: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  static let protoMessageName: String = "BoolMessage"
  static let protoPackageName: String = "protobuf_unittest"
  static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "data"),
  ]


  var data: Bool = false

  init() {}

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
    }
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 1: try decoder.decodeSingularBoolField(value: &data)
    default: break
    }
  }

  func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if data != false {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: data, fieldNumber: 1)
    }
  }

  func _protoc_generated_isEqualTo(other: Proto3BoolMessage) -> Bool {
    if data != other.data {return false}
    return true
  }
}

///   Test oneofs.
struct Proto3TestOneof: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  static let protoMessageName: String = "TestOneof"
  static let protoPackageName: String = "protobuf_unittest"
  static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "foo_int", json: "fooInt"),
    2: .unique(proto: "foo_string", json: "fooString"),
    3: .unique(proto: "foo_message", json: "fooMessage"),
  ]

  private class _StorageClass {
    var _foo: Proto3TestOneof.OneOf_Foo?

    init() {}

    func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
      }
    }

    func decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
      switch fieldNumber {
      case 1, 2, 3:
        if _foo != nil {
          try decoder.handleConflictingOneOf()
        }
        _foo = try Proto3TestOneof.OneOf_Foo(byDecodingFrom: &decoder, fieldNumber: fieldNumber)
      default: break
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _foo != other._foo {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._foo = _foo
      return clone
    }
  }

  private var _storage = _StorageClass()


  enum OneOf_Foo: Equatable {
    case fooInt(Int32)
    case fooString(String)
    case fooMessage(Proto3TestAllTypes)

    static func ==(lhs: Proto3TestOneof.OneOf_Foo, rhs: Proto3TestOneof.OneOf_Foo) -> Bool {
      switch (lhs, rhs) {
      case (.fooInt(let l), .fooInt(let r)): return l == r
      case (.fooString(let l), .fooString(let r)): return l == r
      case (.fooMessage(let l), .fooMessage(let r)): return l == r
      default: return false
      }
    }

    fileprivate init?<T: SwiftProtobuf.Decoder>(byDecodingFrom decoder: inout T, fieldNumber: Int) throws {
      switch fieldNumber {
      case 1:
        var value = Int32()
        try decoder.decodeSingularInt32Field(value: &value)
        self = .fooInt(value)
        return
      case 2:
        var value = String()
        try decoder.decodeSingularStringField(value: &value)
        self = .fooString(value)
        return
      case 3:
        var value: Proto3TestAllTypes?
        try decoder.decodeSingularMessageField(value: &value)
        if let value = value {
          self = .fooMessage(value)
          return
        }
      default:
        break
      }
      return nil
    }

    fileprivate func traverse(visitor: SwiftProtobuf.Visitor, start: Int, end: Int) throws {
      switch self {
      case .fooInt(let v):
        if start <= 1 && 1 < end {
          try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: v, fieldNumber: 1)
        }
      case .fooString(let v):
        if start <= 2 && 2 < end {
          try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: v, fieldNumber: 2)
        }
      case .fooMessage(let v):
        if start <= 3 && 3 < end {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
        }
      }
    }
  }

  var fooInt: Int32 {
    get {
      if case .fooInt(let v)? = _storage._foo {
        return v
      }
      return 0
    }
    set {
      _uniqueStorage()._foo = .fooInt(newValue)
    }
  }

  var fooString: String {
    get {
      if case .fooString(let v)? = _storage._foo {
        return v
      }
      return ""
    }
    set {
      _uniqueStorage()._foo = .fooString(newValue)
    }
  }

  var fooMessage: Proto3TestAllTypes {
    get {
      if case .fooMessage(let v)? = _storage._foo {
        return v
      }
      return Proto3TestAllTypes()
    }
    set {
      _uniqueStorage()._foo = .fooMessage(newValue)
    }
  }

  var foo: OneOf_Foo? {
    get {return _storage._foo}
    set {
      _uniqueStorage()._foo = newValue
    }
  }

  init() {}

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    try _uniqueStorage().decodeMessage(decoder: &decoder)
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    try _uniqueStorage().decodeField(decoder: &decoder, fieldNumber: fieldNumber)
  }

  func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    try withExtendedLifetime(_storage) { (storage: _StorageClass) in
      try storage._foo?.traverse(visitor: visitor, start: 1, end: 4)
    }
  }

  func _protoc_generated_isEqualTo(other: Proto3TestOneof) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

//  Test messages for packed fields

struct Proto3TestPackedTypes: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  static let protoMessageName: String = "TestPackedTypes"
  static let protoPackageName: String = "protobuf_unittest"
  static let _protobuf_fieldNames: FieldNameMap = [
    90: .unique(proto: "packed_int32", json: "packedInt32"),
    91: .unique(proto: "packed_int64", json: "packedInt64"),
    92: .unique(proto: "packed_uint32", json: "packedUint32"),
    93: .unique(proto: "packed_uint64", json: "packedUint64"),
    94: .unique(proto: "packed_sint32", json: "packedSint32"),
    95: .unique(proto: "packed_sint64", json: "packedSint64"),
    96: .unique(proto: "packed_fixed32", json: "packedFixed32"),
    97: .unique(proto: "packed_fixed64", json: "packedFixed64"),
    98: .unique(proto: "packed_sfixed32", json: "packedSfixed32"),
    99: .unique(proto: "packed_sfixed64", json: "packedSfixed64"),
    100: .unique(proto: "packed_float", json: "packedFloat"),
    101: .unique(proto: "packed_double", json: "packedDouble"),
    102: .unique(proto: "packed_bool", json: "packedBool"),
    103: .unique(proto: "packed_enum", json: "packedEnum"),
  ]


  var packedInt32: [Int32] = []

  var packedInt64: [Int64] = []

  var packedUint32: [UInt32] = []

  var packedUint64: [UInt64] = []

  var packedSint32: [Int32] = []

  var packedSint64: [Int64] = []

  var packedFixed32: [UInt32] = []

  var packedFixed64: [UInt64] = []

  var packedSfixed32: [Int32] = []

  var packedSfixed64: [Int64] = []

  var packedFloat: [Float] = []

  var packedDouble: [Double] = []

  var packedBool: [Bool] = []

  var packedEnum: [Proto3ForeignEnum] = []

  init() {}

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
    }
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 90: try decoder.decodeRepeatedInt32Field(value: &packedInt32)
    case 91: try decoder.decodeRepeatedInt64Field(value: &packedInt64)
    case 92: try decoder.decodeRepeatedUInt32Field(value: &packedUint32)
    case 93: try decoder.decodeRepeatedUInt64Field(value: &packedUint64)
    case 94: try decoder.decodeRepeatedSInt32Field(value: &packedSint32)
    case 95: try decoder.decodeRepeatedSInt64Field(value: &packedSint64)
    case 96: try decoder.decodeRepeatedFixed32Field(value: &packedFixed32)
    case 97: try decoder.decodeRepeatedFixed64Field(value: &packedFixed64)
    case 98: try decoder.decodeRepeatedSFixed32Field(value: &packedSfixed32)
    case 99: try decoder.decodeRepeatedSFixed64Field(value: &packedSfixed64)
    case 100: try decoder.decodeRepeatedFloatField(value: &packedFloat)
    case 101: try decoder.decodeRepeatedDoubleField(value: &packedDouble)
    case 102: try decoder.decodeRepeatedBoolField(value: &packedBool)
    case 103: try decoder.decodeRepeatedEnumField(value: &packedEnum)
    default: break
    }
  }

  func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if !packedInt32.isEmpty {
      try visitor.visitPackedField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: packedInt32, fieldNumber: 90)
    }
    if !packedInt64.isEmpty {
      try visitor.visitPackedField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: packedInt64, fieldNumber: 91)
    }
    if !packedUint32.isEmpty {
      try visitor.visitPackedField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: packedUint32, fieldNumber: 92)
    }
    if !packedUint64.isEmpty {
      try visitor.visitPackedField(fieldType: SwiftProtobuf.ProtobufUInt64.self, value: packedUint64, fieldNumber: 93)
    }
    if !packedSint32.isEmpty {
      try visitor.visitPackedField(fieldType: SwiftProtobuf.ProtobufSInt32.self, value: packedSint32, fieldNumber: 94)
    }
    if !packedSint64.isEmpty {
      try visitor.visitPackedField(fieldType: SwiftProtobuf.ProtobufSInt64.self, value: packedSint64, fieldNumber: 95)
    }
    if !packedFixed32.isEmpty {
      try visitor.visitPackedField(fieldType: SwiftProtobuf.ProtobufFixed32.self, value: packedFixed32, fieldNumber: 96)
    }
    if !packedFixed64.isEmpty {
      try visitor.visitPackedField(fieldType: SwiftProtobuf.ProtobufFixed64.self, value: packedFixed64, fieldNumber: 97)
    }
    if !packedSfixed32.isEmpty {
      try visitor.visitPackedField(fieldType: SwiftProtobuf.ProtobufSFixed32.self, value: packedSfixed32, fieldNumber: 98)
    }
    if !packedSfixed64.isEmpty {
      try visitor.visitPackedField(fieldType: SwiftProtobuf.ProtobufSFixed64.self, value: packedSfixed64, fieldNumber: 99)
    }
    if !packedFloat.isEmpty {
      try visitor.visitPackedField(fieldType: SwiftProtobuf.ProtobufFloat.self, value: packedFloat, fieldNumber: 100)
    }
    if !packedDouble.isEmpty {
      try visitor.visitPackedField(fieldType: SwiftProtobuf.ProtobufDouble.self, value: packedDouble, fieldNumber: 101)
    }
    if !packedBool.isEmpty {
      try visitor.visitPackedField(fieldType: SwiftProtobuf.ProtobufBool.self, value: packedBool, fieldNumber: 102)
    }
    if !packedEnum.isEmpty {
      try visitor.visitPackedEnumField(value: packedEnum, fieldNumber: 103)
    }
  }

  func _protoc_generated_isEqualTo(other: Proto3TestPackedTypes) -> Bool {
    if packedInt32 != other.packedInt32 {return false}
    if packedInt64 != other.packedInt64 {return false}
    if packedUint32 != other.packedUint32 {return false}
    if packedUint64 != other.packedUint64 {return false}
    if packedSint32 != other.packedSint32 {return false}
    if packedSint64 != other.packedSint64 {return false}
    if packedFixed32 != other.packedFixed32 {return false}
    if packedFixed64 != other.packedFixed64 {return false}
    if packedSfixed32 != other.packedSfixed32 {return false}
    if packedSfixed64 != other.packedSfixed64 {return false}
    if packedFloat != other.packedFloat {return false}
    if packedDouble != other.packedDouble {return false}
    if packedBool != other.packedBool {return false}
    if packedEnum != other.packedEnum {return false}
    return true
  }
}

///   A message with the same fields as TestPackedTypes, but without packing. Used
///   to test packed <-> unpacked wire compatibility.
struct Proto3TestUnpackedTypes: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  static let protoMessageName: String = "TestUnpackedTypes"
  static let protoPackageName: String = "protobuf_unittest"
  static let _protobuf_fieldNames: FieldNameMap = [
    90: .unique(proto: "unpacked_int32", json: "unpackedInt32"),
    91: .unique(proto: "unpacked_int64", json: "unpackedInt64"),
    92: .unique(proto: "unpacked_uint32", json: "unpackedUint32"),
    93: .unique(proto: "unpacked_uint64", json: "unpackedUint64"),
    94: .unique(proto: "unpacked_sint32", json: "unpackedSint32"),
    95: .unique(proto: "unpacked_sint64", json: "unpackedSint64"),
    96: .unique(proto: "unpacked_fixed32", json: "unpackedFixed32"),
    97: .unique(proto: "unpacked_fixed64", json: "unpackedFixed64"),
    98: .unique(proto: "unpacked_sfixed32", json: "unpackedSfixed32"),
    99: .unique(proto: "unpacked_sfixed64", json: "unpackedSfixed64"),
    100: .unique(proto: "unpacked_float", json: "unpackedFloat"),
    101: .unique(proto: "unpacked_double", json: "unpackedDouble"),
    102: .unique(proto: "unpacked_bool", json: "unpackedBool"),
    103: .unique(proto: "unpacked_enum", json: "unpackedEnum"),
  ]


  var unpackedInt32: [Int32] = []

  var unpackedInt64: [Int64] = []

  var unpackedUint32: [UInt32] = []

  var unpackedUint64: [UInt64] = []

  var unpackedSint32: [Int32] = []

  var unpackedSint64: [Int64] = []

  var unpackedFixed32: [UInt32] = []

  var unpackedFixed64: [UInt64] = []

  var unpackedSfixed32: [Int32] = []

  var unpackedSfixed64: [Int64] = []

  var unpackedFloat: [Float] = []

  var unpackedDouble: [Double] = []

  var unpackedBool: [Bool] = []

  var unpackedEnum: [Proto3ForeignEnum] = []

  init() {}

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
    }
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 90: try decoder.decodeRepeatedInt32Field(value: &unpackedInt32)
    case 91: try decoder.decodeRepeatedInt64Field(value: &unpackedInt64)
    case 92: try decoder.decodeRepeatedUInt32Field(value: &unpackedUint32)
    case 93: try decoder.decodeRepeatedUInt64Field(value: &unpackedUint64)
    case 94: try decoder.decodeRepeatedSInt32Field(value: &unpackedSint32)
    case 95: try decoder.decodeRepeatedSInt64Field(value: &unpackedSint64)
    case 96: try decoder.decodeRepeatedFixed32Field(value: &unpackedFixed32)
    case 97: try decoder.decodeRepeatedFixed64Field(value: &unpackedFixed64)
    case 98: try decoder.decodeRepeatedSFixed32Field(value: &unpackedSfixed32)
    case 99: try decoder.decodeRepeatedSFixed64Field(value: &unpackedSfixed64)
    case 100: try decoder.decodeRepeatedFloatField(value: &unpackedFloat)
    case 101: try decoder.decodeRepeatedDoubleField(value: &unpackedDouble)
    case 102: try decoder.decodeRepeatedBoolField(value: &unpackedBool)
    case 103: try decoder.decodeRepeatedEnumField(value: &unpackedEnum)
    default: break
    }
  }

  func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if !unpackedInt32.isEmpty {
      try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: unpackedInt32, fieldNumber: 90)
    }
    if !unpackedInt64.isEmpty {
      try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: unpackedInt64, fieldNumber: 91)
    }
    if !unpackedUint32.isEmpty {
      try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: unpackedUint32, fieldNumber: 92)
    }
    if !unpackedUint64.isEmpty {
      try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufUInt64.self, value: unpackedUint64, fieldNumber: 93)
    }
    if !unpackedSint32.isEmpty {
      try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufSInt32.self, value: unpackedSint32, fieldNumber: 94)
    }
    if !unpackedSint64.isEmpty {
      try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufSInt64.self, value: unpackedSint64, fieldNumber: 95)
    }
    if !unpackedFixed32.isEmpty {
      try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufFixed32.self, value: unpackedFixed32, fieldNumber: 96)
    }
    if !unpackedFixed64.isEmpty {
      try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufFixed64.self, value: unpackedFixed64, fieldNumber: 97)
    }
    if !unpackedSfixed32.isEmpty {
      try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufSFixed32.self, value: unpackedSfixed32, fieldNumber: 98)
    }
    if !unpackedSfixed64.isEmpty {
      try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufSFixed64.self, value: unpackedSfixed64, fieldNumber: 99)
    }
    if !unpackedFloat.isEmpty {
      try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufFloat.self, value: unpackedFloat, fieldNumber: 100)
    }
    if !unpackedDouble.isEmpty {
      try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufDouble.self, value: unpackedDouble, fieldNumber: 101)
    }
    if !unpackedBool.isEmpty {
      try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufBool.self, value: unpackedBool, fieldNumber: 102)
    }
    if !unpackedEnum.isEmpty {
      try visitor.visitRepeatedEnumField(value: unpackedEnum, fieldNumber: 103)
    }
  }

  func _protoc_generated_isEqualTo(other: Proto3TestUnpackedTypes) -> Bool {
    if unpackedInt32 != other.unpackedInt32 {return false}
    if unpackedInt64 != other.unpackedInt64 {return false}
    if unpackedUint32 != other.unpackedUint32 {return false}
    if unpackedUint64 != other.unpackedUint64 {return false}
    if unpackedSint32 != other.unpackedSint32 {return false}
    if unpackedSint64 != other.unpackedSint64 {return false}
    if unpackedFixed32 != other.unpackedFixed32 {return false}
    if unpackedFixed64 != other.unpackedFixed64 {return false}
    if unpackedSfixed32 != other.unpackedSfixed32 {return false}
    if unpackedSfixed64 != other.unpackedSfixed64 {return false}
    if unpackedFloat != other.unpackedFloat {return false}
    if unpackedDouble != other.unpackedDouble {return false}
    if unpackedBool != other.unpackedBool {return false}
    if unpackedEnum != other.unpackedEnum {return false}
    return true
  }
}

struct Proto3TestRepeatedScalarDifferentTagSizes: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  static let protoMessageName: String = "TestRepeatedScalarDifferentTagSizes"
  static let protoPackageName: String = "protobuf_unittest"
  static let _protobuf_fieldNames: FieldNameMap = [
    12: .unique(proto: "repeated_fixed32", json: "repeatedFixed32"),
    13: .unique(proto: "repeated_int32", json: "repeatedInt32"),
    2046: .unique(proto: "repeated_fixed64", json: "repeatedFixed64"),
    2047: .unique(proto: "repeated_int64", json: "repeatedInt64"),
    262142: .unique(proto: "repeated_float", json: "repeatedFloat"),
    262143: .unique(proto: "repeated_uint64", json: "repeatedUint64"),
  ]


  ///   Parsing repeated fixed size values used to fail. This message needs to be
  ///   used in order to get a tag of the right size; all of the repeated fields
  ///   in TestAllTypes didn't trigger the check.
  var repeatedFixed32: [UInt32] = []

  ///   Check for a varint type, just for good measure.
  var repeatedInt32: [Int32] = []

  ///   These have two-byte tags.
  var repeatedFixed64: [UInt64] = []

  var repeatedInt64: [Int64] = []

  ///   Three byte tags.
  var repeatedFloat: [Float] = []

  var repeatedUint64: [UInt64] = []

  init() {}

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
    }
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 12: try decoder.decodeRepeatedFixed32Field(value: &repeatedFixed32)
    case 13: try decoder.decodeRepeatedInt32Field(value: &repeatedInt32)
    case 2046: try decoder.decodeRepeatedFixed64Field(value: &repeatedFixed64)
    case 2047: try decoder.decodeRepeatedInt64Field(value: &repeatedInt64)
    case 262142: try decoder.decodeRepeatedFloatField(value: &repeatedFloat)
    case 262143: try decoder.decodeRepeatedUInt64Field(value: &repeatedUint64)
    default: break
    }
  }

  func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if !repeatedFixed32.isEmpty {
      try visitor.visitPackedField(fieldType: SwiftProtobuf.ProtobufFixed32.self, value: repeatedFixed32, fieldNumber: 12)
    }
    if !repeatedInt32.isEmpty {
      try visitor.visitPackedField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: repeatedInt32, fieldNumber: 13)
    }
    if !repeatedFixed64.isEmpty {
      try visitor.visitPackedField(fieldType: SwiftProtobuf.ProtobufFixed64.self, value: repeatedFixed64, fieldNumber: 2046)
    }
    if !repeatedInt64.isEmpty {
      try visitor.visitPackedField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: repeatedInt64, fieldNumber: 2047)
    }
    if !repeatedFloat.isEmpty {
      try visitor.visitPackedField(fieldType: SwiftProtobuf.ProtobufFloat.self, value: repeatedFloat, fieldNumber: 262142)
    }
    if !repeatedUint64.isEmpty {
      try visitor.visitPackedField(fieldType: SwiftProtobuf.ProtobufUInt64.self, value: repeatedUint64, fieldNumber: 262143)
    }
  }

  func _protoc_generated_isEqualTo(other: Proto3TestRepeatedScalarDifferentTagSizes) -> Bool {
    if repeatedFixed32 != other.repeatedFixed32 {return false}
    if repeatedInt32 != other.repeatedInt32 {return false}
    if repeatedFixed64 != other.repeatedFixed64 {return false}
    if repeatedInt64 != other.repeatedInt64 {return false}
    if repeatedFloat != other.repeatedFloat {return false}
    if repeatedUint64 != other.repeatedUint64 {return false}
    return true
  }
}

struct Proto3TestCommentInjectionMessage: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  static let protoMessageName: String = "TestCommentInjectionMessage"
  static let protoPackageName: String = "protobuf_unittest"
  static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "a"),
  ]


  ///   */ <- This should not close the generated doc comment
  var a: String = ""

  init() {}

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
    }
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 1: try decoder.decodeSingularStringField(value: &a)
    default: break
    }
  }

  func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if a != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: a, fieldNumber: 1)
    }
  }

  func _protoc_generated_isEqualTo(other: Proto3TestCommentInjectionMessage) -> Bool {
    if a != other.a {return false}
    return true
  }
}

///   Test that RPC services work.
struct Proto3FooRequest: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  static let protoMessageName: String = "FooRequest"
  static let protoPackageName: String = "protobuf_unittest"
  static let _protobuf_fieldNames = FieldNameMap()


  init() {}

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
    }
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
  }

  func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
  }

  func _protoc_generated_isEqualTo(other: Proto3FooRequest) -> Bool {
    return true
  }
}

struct Proto3FooResponse: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  static let protoMessageName: String = "FooResponse"
  static let protoPackageName: String = "protobuf_unittest"
  static let _protobuf_fieldNames = FieldNameMap()


  init() {}

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
    }
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
  }

  func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
  }

  func _protoc_generated_isEqualTo(other: Proto3FooResponse) -> Bool {
    return true
  }
}

struct Proto3FooClientMessage: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  static let protoMessageName: String = "FooClientMessage"
  static let protoPackageName: String = "protobuf_unittest"
  static let _protobuf_fieldNames = FieldNameMap()


  init() {}

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
    }
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
  }

  func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
  }

  func _protoc_generated_isEqualTo(other: Proto3FooClientMessage) -> Bool {
    return true
  }
}

struct Proto3FooServerMessage: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  static let protoMessageName: String = "FooServerMessage"
  static let protoPackageName: String = "protobuf_unittest"
  static let _protobuf_fieldNames = FieldNameMap()


  init() {}

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
    }
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
  }

  func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
  }

  func _protoc_generated_isEqualTo(other: Proto3FooServerMessage) -> Bool {
    return true
  }
}

struct Proto3BarRequest: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  static let protoMessageName: String = "BarRequest"
  static let protoPackageName: String = "protobuf_unittest"
  static let _protobuf_fieldNames = FieldNameMap()


  init() {}

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
    }
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
  }

  func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
  }

  func _protoc_generated_isEqualTo(other: Proto3BarRequest) -> Bool {
    return true
  }
}

struct Proto3BarResponse: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  static let protoMessageName: String = "BarResponse"
  static let protoPackageName: String = "protobuf_unittest"
  static let _protobuf_fieldNames = FieldNameMap()


  init() {}

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
    }
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
  }

  func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
  }

  func _protoc_generated_isEqualTo(other: Proto3BarResponse) -> Bool {
    return true
  }
}
