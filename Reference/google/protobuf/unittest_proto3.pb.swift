/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: google/protobuf/unittest_proto3.proto
 *
 */

//  Protocol Buffers - Google's data interchange format
//  Copyright 2008 Google Inc.  All rights reserved.
//  https://developers.google.com/protocol-buffers/
// 
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are
//  met:
// 
//      * Redistributions of source code must retain the above copyright
//  notice, this list of conditions and the following disclaimer.
//      * Redistributions in binary form must reproduce the above
//  copyright notice, this list of conditions and the following disclaimer
//  in the documentation and/or other materials provided with the
//  distribution.
//      * Neither the name of Google Inc. nor the names of its
//  contributors may be used to endorse or promote products derived from
//  this software without specific prior written permission.
// 
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
//  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
//  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
//  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
//  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
//  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
//  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

//  Author: kenton@google.com (Kenton Varda)
//   Based on original Protocol Buffers design by
//   Sanjay Ghemawat, Jeff Dean, and others.
// 
//  A proto file we will use for unit testing.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _1: SwiftProtobuf.ProtobufAPIVersion_1 {}
  typealias Version = _1
}

fileprivate let _protobuf_package = "protobuf_unittest"

enum Proto3ForeignEnum: SwiftProtobuf.Enum, SwiftProtobuf._ProtoNameProviding {
  typealias RawValue = Int
  case foreignUnspecified // = 0
  case foreignFoo // = 4
  case foreignBar // = 5
  case foreignBaz // = 6
  case UNRECOGNIZED(Int)

  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "FOREIGN_UNSPECIFIED"),
    4: .same(proto: "FOREIGN_FOO"),
    5: .same(proto: "FOREIGN_BAR"),
    6: .same(proto: "FOREIGN_BAZ"),
  ]

  init() {
    self = .foreignUnspecified
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .foreignUnspecified
    case 4: self = .foreignFoo
    case 5: self = .foreignBar
    case 6: self = .foreignBaz
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .foreignUnspecified: return 0
    case .foreignFoo: return 4
    case .foreignBar: return 5
    case .foreignBaz: return 6
    case .UNRECOGNIZED(let i): return i
    }
  }

}

///   Test an enum that has multiple values with the same number.
enum Proto3TestEnumWithDupValue: SwiftProtobuf.Enum, SwiftProtobuf._ProtoNameProviding {
  typealias RawValue = Int
  case testEnumWithDupValueUnspecified // = 0
  case foo1 // = 1
  case bar1 // = 2
  case baz // = 3
  static let foo2 = foo1
  static let bar2 = bar1
  case UNRECOGNIZED(Int)

  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "TEST_ENUM_WITH_DUP_VALUE_UNSPECIFIED"),
    1: .aliased(proto: "FOO1", aliases: ["FOO2"]),
    2: .aliased(proto: "BAR1", aliases: ["BAR2"]),
    3: .same(proto: "BAZ"),
  ]

  init() {
    self = .testEnumWithDupValueUnspecified
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .testEnumWithDupValueUnspecified
    case 1: self = .foo1
    case 2: self = .bar1
    case 3: self = .baz
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .testEnumWithDupValueUnspecified: return 0
    case .foo1: return 1
    case .bar1: return 2
    case .baz: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

///   Test an enum with large, unordered values.
enum Proto3TestSparseEnum: SwiftProtobuf.Enum, SwiftProtobuf._ProtoNameProviding {
  typealias RawValue = Int
  case testSparseEnumUnspecified // = 0
  case sparseA // = 123
  case sparseB // = 62374
  case sparseC // = 12589234
  case sparseD // = -15
  case sparseE // = -53452

  ///   In proto3, value 0 must be the first one specified
  ///   SPARSE_F = 0;
  case sparseG // = 2
  case UNRECOGNIZED(Int)

  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    -53452: .same(proto: "SPARSE_E"),
    -15: .same(proto: "SPARSE_D"),
    0: .same(proto: "TEST_SPARSE_ENUM_UNSPECIFIED"),
    2: .same(proto: "SPARSE_G"),
    123: .same(proto: "SPARSE_A"),
    62374: .same(proto: "SPARSE_B"),
    12589234: .same(proto: "SPARSE_C"),
  ]

  init() {
    self = .testSparseEnumUnspecified
  }

  init?(rawValue: Int) {
    switch rawValue {
    case -53452: self = .sparseE
    case -15: self = .sparseD
    case 0: self = .testSparseEnumUnspecified
    case 2: self = .sparseG
    case 123: self = .sparseA
    case 62374: self = .sparseB
    case 12589234: self = .sparseC
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .sparseE: return -53452
    case .sparseD: return -15
    case .testSparseEnumUnspecified: return 0
    case .sparseG: return 2
    case .sparseA: return 123
    case .sparseB: return 62374
    case .sparseC: return 12589234
    case .UNRECOGNIZED(let i): return i
    }
  }

}

///   This proto includes every type of field in both singular and repeated
///   forms.
struct Proto3TestAllTypes: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".TestAllTypes"

  fileprivate class _StorageClass {
    var _singleInt32: Int32 = 0
    var _singleInt64: Int64 = 0
    var _singleUint32: UInt32 = 0
    var _singleUint64: UInt64 = 0
    var _singleSint32: Int32 = 0
    var _singleSint64: Int64 = 0
    var _singleFixed32: UInt32 = 0
    var _singleFixed64: UInt64 = 0
    var _singleSfixed32: Int32 = 0
    var _singleSfixed64: Int64 = 0
    var _singleFloat: Float = 0
    var _singleDouble: Double = 0
    var _singleBool: Bool = false
    var _singleString: String = ""
    var _singleBytes: Data = Data()
    var _singleNestedMessage: Proto3TestAllTypes.NestedMessage? = nil
    var _singleForeignMessage: Proto3ForeignMessage? = nil
    var _singleImportMessage: Proto3ImportMessage? = nil
    var _singleNestedEnum: Proto3TestAllTypes.NestedEnum = Proto3TestAllTypes.NestedEnum.nestedEnumUnspecified
    var _singleForeignEnum: Proto3ForeignEnum = Proto3ForeignEnum.foreignUnspecified
    var _singleImportEnum: Proto3ImportEnum = Proto3ImportEnum.importEnumUnspecified
    var _singlePublicImportMessage: Proto3PublicImportMessage? = nil
    var _repeatedInt32: [Int32] = []
    var _repeatedInt64: [Int64] = []
    var _repeatedUint32: [UInt32] = []
    var _repeatedUint64: [UInt64] = []
    var _repeatedSint32: [Int32] = []
    var _repeatedSint64: [Int64] = []
    var _repeatedFixed32: [UInt32] = []
    var _repeatedFixed64: [UInt64] = []
    var _repeatedSfixed32: [Int32] = []
    var _repeatedSfixed64: [Int64] = []
    var _repeatedFloat: [Float] = []
    var _repeatedDouble: [Double] = []
    var _repeatedBool: [Bool] = []
    var _repeatedString: [String] = []
    var _repeatedBytes: [Data] = []
    var _repeatedNestedMessage: [Proto3TestAllTypes.NestedMessage] = []
    var _repeatedForeignMessage: [Proto3ForeignMessage] = []
    var _repeatedImportMessage: [Proto3ImportMessage] = []
    var _repeatedNestedEnum: [Proto3TestAllTypes.NestedEnum] = []
    var _repeatedForeignEnum: [Proto3ForeignEnum] = []
    var _repeatedImportEnum: [Proto3ImportEnum] = []
    var _repeatedPublicImportMessage: [Proto3PublicImportMessage] = []
    var _oneofField: Proto3TestAllTypes.OneOf_OneofField?

    init() {}

    init(copying source: _StorageClass) {
      _singleInt32 = source._singleInt32
      _singleInt64 = source._singleInt64
      _singleUint32 = source._singleUint32
      _singleUint64 = source._singleUint64
      _singleSint32 = source._singleSint32
      _singleSint64 = source._singleSint64
      _singleFixed32 = source._singleFixed32
      _singleFixed64 = source._singleFixed64
      _singleSfixed32 = source._singleSfixed32
      _singleSfixed64 = source._singleSfixed64
      _singleFloat = source._singleFloat
      _singleDouble = source._singleDouble
      _singleBool = source._singleBool
      _singleString = source._singleString
      _singleBytes = source._singleBytes
      _singleNestedMessage = source._singleNestedMessage
      _singleForeignMessage = source._singleForeignMessage
      _singleImportMessage = source._singleImportMessage
      _singleNestedEnum = source._singleNestedEnum
      _singleForeignEnum = source._singleForeignEnum
      _singleImportEnum = source._singleImportEnum
      _singlePublicImportMessage = source._singlePublicImportMessage
      _repeatedInt32 = source._repeatedInt32
      _repeatedInt64 = source._repeatedInt64
      _repeatedUint32 = source._repeatedUint32
      _repeatedUint64 = source._repeatedUint64
      _repeatedSint32 = source._repeatedSint32
      _repeatedSint64 = source._repeatedSint64
      _repeatedFixed32 = source._repeatedFixed32
      _repeatedFixed64 = source._repeatedFixed64
      _repeatedSfixed32 = source._repeatedSfixed32
      _repeatedSfixed64 = source._repeatedSfixed64
      _repeatedFloat = source._repeatedFloat
      _repeatedDouble = source._repeatedDouble
      _repeatedBool = source._repeatedBool
      _repeatedString = source._repeatedString
      _repeatedBytes = source._repeatedBytes
      _repeatedNestedMessage = source._repeatedNestedMessage
      _repeatedForeignMessage = source._repeatedForeignMessage
      _repeatedImportMessage = source._repeatedImportMessage
      _repeatedNestedEnum = source._repeatedNestedEnum
      _repeatedForeignEnum = source._repeatedForeignEnum
      _repeatedImportEnum = source._repeatedImportEnum
      _repeatedPublicImportMessage = source._repeatedPublicImportMessage
      _oneofField = source._oneofField
    }
  }

  fileprivate var _storage = _StorageClass()

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  ///   Singular
  var singleInt32: Int32 {
    get {return _storage._singleInt32}
    set {_uniqueStorage()._singleInt32 = newValue}
  }

  var singleInt64: Int64 {
    get {return _storage._singleInt64}
    set {_uniqueStorage()._singleInt64 = newValue}
  }

  var singleUint32: UInt32 {
    get {return _storage._singleUint32}
    set {_uniqueStorage()._singleUint32 = newValue}
  }

  var singleUint64: UInt64 {
    get {return _storage._singleUint64}
    set {_uniqueStorage()._singleUint64 = newValue}
  }

  var singleSint32: Int32 {
    get {return _storage._singleSint32}
    set {_uniqueStorage()._singleSint32 = newValue}
  }

  var singleSint64: Int64 {
    get {return _storage._singleSint64}
    set {_uniqueStorage()._singleSint64 = newValue}
  }

  var singleFixed32: UInt32 {
    get {return _storage._singleFixed32}
    set {_uniqueStorage()._singleFixed32 = newValue}
  }

  var singleFixed64: UInt64 {
    get {return _storage._singleFixed64}
    set {_uniqueStorage()._singleFixed64 = newValue}
  }

  var singleSfixed32: Int32 {
    get {return _storage._singleSfixed32}
    set {_uniqueStorage()._singleSfixed32 = newValue}
  }

  var singleSfixed64: Int64 {
    get {return _storage._singleSfixed64}
    set {_uniqueStorage()._singleSfixed64 = newValue}
  }

  var singleFloat: Float {
    get {return _storage._singleFloat}
    set {_uniqueStorage()._singleFloat = newValue}
  }

  var singleDouble: Double {
    get {return _storage._singleDouble}
    set {_uniqueStorage()._singleDouble = newValue}
  }

  var singleBool: Bool {
    get {return _storage._singleBool}
    set {_uniqueStorage()._singleBool = newValue}
  }

  var singleString: String {
    get {return _storage._singleString}
    set {_uniqueStorage()._singleString = newValue}
  }

  var singleBytes: Data {
    get {return _storage._singleBytes}
    set {_uniqueStorage()._singleBytes = newValue}
  }

  var singleNestedMessage: Proto3TestAllTypes.NestedMessage {
    get {return _storage._singleNestedMessage ?? Proto3TestAllTypes.NestedMessage()}
    set {_uniqueStorage()._singleNestedMessage = newValue}
  }
  var hasSingleNestedMessage: Bool {
    return _storage._singleNestedMessage != nil
  }
  mutating func clearSingleNestedMessage() {
    return _storage._singleNestedMessage = nil
  }

  var singleForeignMessage: Proto3ForeignMessage {
    get {return _storage._singleForeignMessage ?? Proto3ForeignMessage()}
    set {_uniqueStorage()._singleForeignMessage = newValue}
  }
  var hasSingleForeignMessage: Bool {
    return _storage._singleForeignMessage != nil
  }
  mutating func clearSingleForeignMessage() {
    return _storage._singleForeignMessage = nil
  }

  var singleImportMessage: Proto3ImportMessage {
    get {return _storage._singleImportMessage ?? Proto3ImportMessage()}
    set {_uniqueStorage()._singleImportMessage = newValue}
  }
  var hasSingleImportMessage: Bool {
    return _storage._singleImportMessage != nil
  }
  mutating func clearSingleImportMessage() {
    return _storage._singleImportMessage = nil
  }

  var singleNestedEnum: Proto3TestAllTypes.NestedEnum {
    get {return _storage._singleNestedEnum}
    set {_uniqueStorage()._singleNestedEnum = newValue}
  }

  var singleForeignEnum: Proto3ForeignEnum {
    get {return _storage._singleForeignEnum}
    set {_uniqueStorage()._singleForeignEnum = newValue}
  }

  var singleImportEnum: Proto3ImportEnum {
    get {return _storage._singleImportEnum}
    set {_uniqueStorage()._singleImportEnum = newValue}
  }

  ///   Defined in unittest_import_public.proto
  var singlePublicImportMessage: Proto3PublicImportMessage {
    get {return _storage._singlePublicImportMessage ?? Proto3PublicImportMessage()}
    set {_uniqueStorage()._singlePublicImportMessage = newValue}
  }
  var hasSinglePublicImportMessage: Bool {
    return _storage._singlePublicImportMessage != nil
  }
  mutating func clearSinglePublicImportMessage() {
    return _storage._singlePublicImportMessage = nil
  }

  ///   Repeated
  var repeatedInt32: [Int32] {
    get {return _storage._repeatedInt32}
    set {_uniqueStorage()._repeatedInt32 = newValue}
  }

  var repeatedInt64: [Int64] {
    get {return _storage._repeatedInt64}
    set {_uniqueStorage()._repeatedInt64 = newValue}
  }

  var repeatedUint32: [UInt32] {
    get {return _storage._repeatedUint32}
    set {_uniqueStorage()._repeatedUint32 = newValue}
  }

  var repeatedUint64: [UInt64] {
    get {return _storage._repeatedUint64}
    set {_uniqueStorage()._repeatedUint64 = newValue}
  }

  var repeatedSint32: [Int32] {
    get {return _storage._repeatedSint32}
    set {_uniqueStorage()._repeatedSint32 = newValue}
  }

  var repeatedSint64: [Int64] {
    get {return _storage._repeatedSint64}
    set {_uniqueStorage()._repeatedSint64 = newValue}
  }

  var repeatedFixed32: [UInt32] {
    get {return _storage._repeatedFixed32}
    set {_uniqueStorage()._repeatedFixed32 = newValue}
  }

  var repeatedFixed64: [UInt64] {
    get {return _storage._repeatedFixed64}
    set {_uniqueStorage()._repeatedFixed64 = newValue}
  }

  var repeatedSfixed32: [Int32] {
    get {return _storage._repeatedSfixed32}
    set {_uniqueStorage()._repeatedSfixed32 = newValue}
  }

  var repeatedSfixed64: [Int64] {
    get {return _storage._repeatedSfixed64}
    set {_uniqueStorage()._repeatedSfixed64 = newValue}
  }

  var repeatedFloat: [Float] {
    get {return _storage._repeatedFloat}
    set {_uniqueStorage()._repeatedFloat = newValue}
  }

  var repeatedDouble: [Double] {
    get {return _storage._repeatedDouble}
    set {_uniqueStorage()._repeatedDouble = newValue}
  }

  var repeatedBool: [Bool] {
    get {return _storage._repeatedBool}
    set {_uniqueStorage()._repeatedBool = newValue}
  }

  var repeatedString: [String] {
    get {return _storage._repeatedString}
    set {_uniqueStorage()._repeatedString = newValue}
  }

  var repeatedBytes: [Data] {
    get {return _storage._repeatedBytes}
    set {_uniqueStorage()._repeatedBytes = newValue}
  }

  var repeatedNestedMessage: [Proto3TestAllTypes.NestedMessage] {
    get {return _storage._repeatedNestedMessage}
    set {_uniqueStorage()._repeatedNestedMessage = newValue}
  }

  var repeatedForeignMessage: [Proto3ForeignMessage] {
    get {return _storage._repeatedForeignMessage}
    set {_uniqueStorage()._repeatedForeignMessage = newValue}
  }

  var repeatedImportMessage: [Proto3ImportMessage] {
    get {return _storage._repeatedImportMessage}
    set {_uniqueStorage()._repeatedImportMessage = newValue}
  }

  var repeatedNestedEnum: [Proto3TestAllTypes.NestedEnum] {
    get {return _storage._repeatedNestedEnum}
    set {_uniqueStorage()._repeatedNestedEnum = newValue}
  }

  var repeatedForeignEnum: [Proto3ForeignEnum] {
    get {return _storage._repeatedForeignEnum}
    set {_uniqueStorage()._repeatedForeignEnum = newValue}
  }

  var repeatedImportEnum: [Proto3ImportEnum] {
    get {return _storage._repeatedImportEnum}
    set {_uniqueStorage()._repeatedImportEnum = newValue}
  }

  ///   Defined in unittest_import_public.proto
  var repeatedPublicImportMessage: [Proto3PublicImportMessage] {
    get {return _storage._repeatedPublicImportMessage}
    set {_uniqueStorage()._repeatedPublicImportMessage = newValue}
  }

  var oneofUint32: UInt32 {
    get {
      if case .oneofUint32(let v)? = _storage._oneofField {
        return v
      }
      return 0
    }
    set {
      _uniqueStorage()._oneofField = .oneofUint32(newValue)
    }
  }

  var oneofNestedMessage: Proto3TestAllTypes.NestedMessage {
    get {
      if case .oneofNestedMessage(let v)? = _storage._oneofField {
        return v
      }
      return Proto3TestAllTypes.NestedMessage()
    }
    set {
      _uniqueStorage()._oneofField = .oneofNestedMessage(newValue)
    }
  }

  var oneofString: String {
    get {
      if case .oneofString(let v)? = _storage._oneofField {
        return v
      }
      return ""
    }
    set {
      _uniqueStorage()._oneofField = .oneofString(newValue)
    }
  }

  var oneofBytes: Data {
    get {
      if case .oneofBytes(let v)? = _storage._oneofField {
        return v
      }
      return Data()
    }
    set {
      _uniqueStorage()._oneofField = .oneofBytes(newValue)
    }
  }

  var oneofField: OneOf_OneofField? {
    get {return _storage._oneofField}
    set {
      _uniqueStorage()._oneofField = newValue
    }
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_OneofField: Equatable {
    case oneofUint32(UInt32)
    case oneofNestedMessage(Proto3TestAllTypes.NestedMessage)
    case oneofString(String)
    case oneofBytes(Data)

    static func ==(lhs: Proto3TestAllTypes.OneOf_OneofField, rhs: Proto3TestAllTypes.OneOf_OneofField) -> Bool {
      switch (lhs, rhs) {
      case (.oneofUint32(let l), .oneofUint32(let r)): return l == r
      case (.oneofNestedMessage(let l), .oneofNestedMessage(let r)): return l == r
      case (.oneofString(let l), .oneofString(let r)): return l == r
      case (.oneofBytes(let l), .oneofBytes(let r)): return l == r
      default: return false
      }
    }

    fileprivate init?<T: SwiftProtobuf.Decoder>(byDecodingFrom decoder: inout T, fieldNumber: Int) throws {
      switch fieldNumber {
      case 111:
        var value = UInt32()
        try decoder.decodeSingularUInt32Field(value: &value)
        self = .oneofUint32(value)
        return
      case 112:
        var value: Proto3TestAllTypes.NestedMessage?
        try decoder.decodeSingularMessageField(value: &value)
        if let value = value {
          self = .oneofNestedMessage(value)
          return
        }
      case 113:
        var value = String()
        try decoder.decodeSingularStringField(value: &value)
        self = .oneofString(value)
        return
      case 114:
        var value = Data()
        try decoder.decodeSingularBytesField(value: &value)
        self = .oneofBytes(value)
        return
      default:
        break
      }
      return nil
    }

    fileprivate func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V, start: Int, end: Int) throws {
      switch self {
      case .oneofUint32(let v):
        if start <= 111 && 111 < end {
          try visitor.visitSingularUInt32Field(value: v, fieldNumber: 111)
        }
      case .oneofNestedMessage(let v):
        if start <= 112 && 112 < end {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 112)
        }
      case .oneofString(let v):
        if start <= 113 && 113 < end {
          try visitor.visitSingularStringField(value: v, fieldNumber: 113)
        }
      case .oneofBytes(let v):
        if start <= 114 && 114 < end {
          try visitor.visitSingularBytesField(value: v, fieldNumber: 114)
        }
      }
    }
  }

  enum NestedEnum: SwiftProtobuf.Enum, SwiftProtobuf._ProtoNameProviding {
    typealias RawValue = Int
    case nestedEnumUnspecified // = 0
    case foo // = 1
    case bar // = 2
    case baz // = 3

    ///   Intentionally negative.
    case neg // = -1
    case UNRECOGNIZED(Int)

    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
      -1: .same(proto: "NEG"),
      0: .same(proto: "NESTED_ENUM_UNSPECIFIED"),
      1: .same(proto: "FOO"),
      2: .same(proto: "BAR"),
      3: .same(proto: "BAZ"),
    ]

    init() {
      self = .nestedEnumUnspecified
    }

    init?(rawValue: Int) {
      switch rawValue {
      case -1: self = .neg
      case 0: self = .nestedEnumUnspecified
      case 1: self = .foo
      case 2: self = .bar
      case 3: self = .baz
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .neg: return -1
      case .nestedEnumUnspecified: return 0
      case .foo: return 1
      case .bar: return 2
      case .baz: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  struct NestedMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = Proto3TestAllTypes.protoMessageName + ".NestedMessage"

    ///   The field name "b" fails to compile in proto1 because it conflicts with
    ///   a local variable named "b" in one of the generated methods.  Doh.
    ///   This file needs to compile in proto1 to test backwards-compatibility.
    var bb: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &bb)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if bb != 0 {
        try visitor.visitSingularInt32Field(value: bb, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._singleInt32)
        case 2: try decoder.decodeSingularInt64Field(value: &_storage._singleInt64)
        case 3: try decoder.decodeSingularUInt32Field(value: &_storage._singleUint32)
        case 4: try decoder.decodeSingularUInt64Field(value: &_storage._singleUint64)
        case 5: try decoder.decodeSingularSInt32Field(value: &_storage._singleSint32)
        case 6: try decoder.decodeSingularSInt64Field(value: &_storage._singleSint64)
        case 7: try decoder.decodeSingularFixed32Field(value: &_storage._singleFixed32)
        case 8: try decoder.decodeSingularFixed64Field(value: &_storage._singleFixed64)
        case 9: try decoder.decodeSingularSFixed32Field(value: &_storage._singleSfixed32)
        case 10: try decoder.decodeSingularSFixed64Field(value: &_storage._singleSfixed64)
        case 11: try decoder.decodeSingularFloatField(value: &_storage._singleFloat)
        case 12: try decoder.decodeSingularDoubleField(value: &_storage._singleDouble)
        case 13: try decoder.decodeSingularBoolField(value: &_storage._singleBool)
        case 14: try decoder.decodeSingularStringField(value: &_storage._singleString)
        case 15: try decoder.decodeSingularBytesField(value: &_storage._singleBytes)
        case 18: try decoder.decodeSingularMessageField(value: &_storage._singleNestedMessage)
        case 19: try decoder.decodeSingularMessageField(value: &_storage._singleForeignMessage)
        case 20: try decoder.decodeSingularMessageField(value: &_storage._singleImportMessage)
        case 21: try decoder.decodeSingularEnumField(value: &_storage._singleNestedEnum)
        case 22: try decoder.decodeSingularEnumField(value: &_storage._singleForeignEnum)
        case 23: try decoder.decodeSingularEnumField(value: &_storage._singleImportEnum)
        case 26: try decoder.decodeSingularMessageField(value: &_storage._singlePublicImportMessage)
        case 31: try decoder.decodeRepeatedInt32Field(value: &_storage._repeatedInt32)
        case 32: try decoder.decodeRepeatedInt64Field(value: &_storage._repeatedInt64)
        case 33: try decoder.decodeRepeatedUInt32Field(value: &_storage._repeatedUint32)
        case 34: try decoder.decodeRepeatedUInt64Field(value: &_storage._repeatedUint64)
        case 35: try decoder.decodeRepeatedSInt32Field(value: &_storage._repeatedSint32)
        case 36: try decoder.decodeRepeatedSInt64Field(value: &_storage._repeatedSint64)
        case 37: try decoder.decodeRepeatedFixed32Field(value: &_storage._repeatedFixed32)
        case 38: try decoder.decodeRepeatedFixed64Field(value: &_storage._repeatedFixed64)
        case 39: try decoder.decodeRepeatedSFixed32Field(value: &_storage._repeatedSfixed32)
        case 40: try decoder.decodeRepeatedSFixed64Field(value: &_storage._repeatedSfixed64)
        case 41: try decoder.decodeRepeatedFloatField(value: &_storage._repeatedFloat)
        case 42: try decoder.decodeRepeatedDoubleField(value: &_storage._repeatedDouble)
        case 43: try decoder.decodeRepeatedBoolField(value: &_storage._repeatedBool)
        case 44: try decoder.decodeRepeatedStringField(value: &_storage._repeatedString)
        case 45: try decoder.decodeRepeatedBytesField(value: &_storage._repeatedBytes)
        case 48: try decoder.decodeRepeatedMessageField(value: &_storage._repeatedNestedMessage)
        case 49: try decoder.decodeRepeatedMessageField(value: &_storage._repeatedForeignMessage)
        case 50: try decoder.decodeRepeatedMessageField(value: &_storage._repeatedImportMessage)
        case 51: try decoder.decodeRepeatedEnumField(value: &_storage._repeatedNestedEnum)
        case 52: try decoder.decodeRepeatedEnumField(value: &_storage._repeatedForeignEnum)
        case 53: try decoder.decodeRepeatedEnumField(value: &_storage._repeatedImportEnum)
        case 54: try decoder.decodeRepeatedMessageField(value: &_storage._repeatedPublicImportMessage)
        case 111...114:
          if _storage._oneofField != nil {
            try decoder.handleConflictingOneOf()
          }
          _storage._oneofField = try Proto3TestAllTypes.OneOf_OneofField(byDecodingFrom: &decoder, fieldNumber: fieldNumber)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._singleInt32 != 0 {
        try visitor.visitSingularInt32Field(value: _storage._singleInt32, fieldNumber: 1)
      }
      if _storage._singleInt64 != 0 {
        try visitor.visitSingularInt64Field(value: _storage._singleInt64, fieldNumber: 2)
      }
      if _storage._singleUint32 != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._singleUint32, fieldNumber: 3)
      }
      if _storage._singleUint64 != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._singleUint64, fieldNumber: 4)
      }
      if _storage._singleSint32 != 0 {
        try visitor.visitSingularSInt32Field(value: _storage._singleSint32, fieldNumber: 5)
      }
      if _storage._singleSint64 != 0 {
        try visitor.visitSingularSInt64Field(value: _storage._singleSint64, fieldNumber: 6)
      }
      if _storage._singleFixed32 != 0 {
        try visitor.visitSingularFixed32Field(value: _storage._singleFixed32, fieldNumber: 7)
      }
      if _storage._singleFixed64 != 0 {
        try visitor.visitSingularFixed64Field(value: _storage._singleFixed64, fieldNumber: 8)
      }
      if _storage._singleSfixed32 != 0 {
        try visitor.visitSingularSFixed32Field(value: _storage._singleSfixed32, fieldNumber: 9)
      }
      if _storage._singleSfixed64 != 0 {
        try visitor.visitSingularSFixed64Field(value: _storage._singleSfixed64, fieldNumber: 10)
      }
      if _storage._singleFloat != 0 {
        try visitor.visitSingularFloatField(value: _storage._singleFloat, fieldNumber: 11)
      }
      if _storage._singleDouble != 0 {
        try visitor.visitSingularDoubleField(value: _storage._singleDouble, fieldNumber: 12)
      }
      if _storage._singleBool != false {
        try visitor.visitSingularBoolField(value: _storage._singleBool, fieldNumber: 13)
      }
      if !_storage._singleString.isEmpty {
        try visitor.visitSingularStringField(value: _storage._singleString, fieldNumber: 14)
      }
      if !_storage._singleBytes.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._singleBytes, fieldNumber: 15)
      }
      if let v = _storage._singleNestedMessage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
      }
      if let v = _storage._singleForeignMessage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
      }
      if let v = _storage._singleImportMessage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
      }
      if _storage._singleNestedEnum != Proto3TestAllTypes.NestedEnum.nestedEnumUnspecified {
        try visitor.visitSingularEnumField(value: _storage._singleNestedEnum, fieldNumber: 21)
      }
      if _storage._singleForeignEnum != Proto3ForeignEnum.foreignUnspecified {
        try visitor.visitSingularEnumField(value: _storage._singleForeignEnum, fieldNumber: 22)
      }
      if _storage._singleImportEnum != Proto3ImportEnum.importEnumUnspecified {
        try visitor.visitSingularEnumField(value: _storage._singleImportEnum, fieldNumber: 23)
      }
      if let v = _storage._singlePublicImportMessage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 26)
      }
      if !_storage._repeatedInt32.isEmpty {
        try visitor.visitPackedInt32Field(value: _storage._repeatedInt32, fieldNumber: 31)
      }
      if !_storage._repeatedInt64.isEmpty {
        try visitor.visitPackedInt64Field(value: _storage._repeatedInt64, fieldNumber: 32)
      }
      if !_storage._repeatedUint32.isEmpty {
        try visitor.visitPackedUInt32Field(value: _storage._repeatedUint32, fieldNumber: 33)
      }
      if !_storage._repeatedUint64.isEmpty {
        try visitor.visitPackedUInt64Field(value: _storage._repeatedUint64, fieldNumber: 34)
      }
      if !_storage._repeatedSint32.isEmpty {
        try visitor.visitPackedSInt32Field(value: _storage._repeatedSint32, fieldNumber: 35)
      }
      if !_storage._repeatedSint64.isEmpty {
        try visitor.visitPackedSInt64Field(value: _storage._repeatedSint64, fieldNumber: 36)
      }
      if !_storage._repeatedFixed32.isEmpty {
        try visitor.visitPackedFixed32Field(value: _storage._repeatedFixed32, fieldNumber: 37)
      }
      if !_storage._repeatedFixed64.isEmpty {
        try visitor.visitPackedFixed64Field(value: _storage._repeatedFixed64, fieldNumber: 38)
      }
      if !_storage._repeatedSfixed32.isEmpty {
        try visitor.visitPackedSFixed32Field(value: _storage._repeatedSfixed32, fieldNumber: 39)
      }
      if !_storage._repeatedSfixed64.isEmpty {
        try visitor.visitPackedSFixed64Field(value: _storage._repeatedSfixed64, fieldNumber: 40)
      }
      if !_storage._repeatedFloat.isEmpty {
        try visitor.visitPackedFloatField(value: _storage._repeatedFloat, fieldNumber: 41)
      }
      if !_storage._repeatedDouble.isEmpty {
        try visitor.visitPackedDoubleField(value: _storage._repeatedDouble, fieldNumber: 42)
      }
      if !_storage._repeatedBool.isEmpty {
        try visitor.visitPackedBoolField(value: _storage._repeatedBool, fieldNumber: 43)
      }
      if !_storage._repeatedString.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._repeatedString, fieldNumber: 44)
      }
      if !_storage._repeatedBytes.isEmpty {
        try visitor.visitRepeatedBytesField(value: _storage._repeatedBytes, fieldNumber: 45)
      }
      if !_storage._repeatedNestedMessage.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._repeatedNestedMessage, fieldNumber: 48)
      }
      if !_storage._repeatedForeignMessage.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._repeatedForeignMessage, fieldNumber: 49)
      }
      if !_storage._repeatedImportMessage.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._repeatedImportMessage, fieldNumber: 50)
      }
      if !_storage._repeatedNestedEnum.isEmpty {
        try visitor.visitPackedEnumField(value: _storage._repeatedNestedEnum, fieldNumber: 51)
      }
      if !_storage._repeatedForeignEnum.isEmpty {
        try visitor.visitPackedEnumField(value: _storage._repeatedForeignEnum, fieldNumber: 52)
      }
      if !_storage._repeatedImportEnum.isEmpty {
        try visitor.visitPackedEnumField(value: _storage._repeatedImportEnum, fieldNumber: 53)
      }
      if !_storage._repeatedPublicImportMessage.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._repeatedPublicImportMessage, fieldNumber: 54)
      }
      try _storage._oneofField?.traverse(visitor: &visitor, start: 111, end: 115)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///   This proto includes a recusively nested message.
struct Proto3NestedTestAllTypes: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".NestedTestAllTypes"

  fileprivate class _StorageClass {
    var _child: Proto3NestedTestAllTypes? = nil
    var _payload: Proto3TestAllTypes? = nil
    var _repeatedChild: [Proto3NestedTestAllTypes] = []

    init() {}

    init(copying source: _StorageClass) {
      _child = source._child
      _payload = source._payload
      _repeatedChild = source._repeatedChild
    }
  }

  fileprivate var _storage = _StorageClass()

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  var child: Proto3NestedTestAllTypes {
    get {return _storage._child ?? Proto3NestedTestAllTypes()}
    set {_uniqueStorage()._child = newValue}
  }
  var hasChild: Bool {
    return _storage._child != nil
  }
  mutating func clearChild() {
    return _storage._child = nil
  }

  var payload: Proto3TestAllTypes {
    get {return _storage._payload ?? Proto3TestAllTypes()}
    set {_uniqueStorage()._payload = newValue}
  }
  var hasPayload: Bool {
    return _storage._payload != nil
  }
  mutating func clearPayload() {
    return _storage._payload = nil
  }

  var repeatedChild: [Proto3NestedTestAllTypes] {
    get {return _storage._repeatedChild}
    set {_uniqueStorage()._repeatedChild = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._child)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._payload)
        case 3: try decoder.decodeRepeatedMessageField(value: &_storage._repeatedChild)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._child {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._payload {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._repeatedChild.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._repeatedChild, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Proto3TestDeprecatedFields: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".TestDeprecatedFields"

  var deprecatedInt32: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &deprecatedInt32)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if deprecatedInt32 != 0 {
      try visitor.visitSingularInt32Field(value: deprecatedInt32, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///   Define these after TestAllTypes to make sure the compiler can handle
///   that.
struct Proto3ForeignMessage: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".ForeignMessage"

  var c: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &c)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if c != 0 {
      try visitor.visitSingularInt32Field(value: c, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Proto3TestReservedFields: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".TestReservedFields"

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }
}

///   Test that we can use NestedMessage from outside TestAllTypes.
struct Proto3TestForeignNested: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".TestForeignNested"

  fileprivate class _StorageClass {
    var _foreignNested: Proto3TestAllTypes.NestedMessage? = nil

    init() {}

    init(copying source: _StorageClass) {
      _foreignNested = source._foreignNested
    }
  }

  fileprivate var _storage = _StorageClass()

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  var foreignNested: Proto3TestAllTypes.NestedMessage {
    get {return _storage._foreignNested ?? Proto3TestAllTypes.NestedMessage()}
    set {_uniqueStorage()._foreignNested = newValue}
  }
  var hasForeignNested: Bool {
    return _storage._foreignNested != nil
  }
  mutating func clearForeignNested() {
    return _storage._foreignNested = nil
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._foreignNested)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._foreignNested {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///   Test that really large tag numbers don't break anything.
struct Proto3TestReallyLargeTagNumber: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".TestReallyLargeTagNumber"

  ///   The largest possible tag number is 2^28 - 1, since the wire format uses
  ///   three bits to communicate wire type.
  var a: Int32 = 0

  var bb: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &a)
      case 268435455: try decoder.decodeSingularInt32Field(value: &bb)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if a != 0 {
      try visitor.visitSingularInt32Field(value: a, fieldNumber: 1)
    }
    if bb != 0 {
      try visitor.visitSingularInt32Field(value: bb, fieldNumber: 268435455)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Proto3TestRecursiveMessage: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".TestRecursiveMessage"

  fileprivate class _StorageClass {
    var _a: Proto3TestRecursiveMessage? = nil
    var _i: Int32 = 0

    init() {}

    init(copying source: _StorageClass) {
      _a = source._a
      _i = source._i
    }
  }

  fileprivate var _storage = _StorageClass()

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  var a: Proto3TestRecursiveMessage {
    get {return _storage._a ?? Proto3TestRecursiveMessage()}
    set {_uniqueStorage()._a = newValue}
  }
  var hasA: Bool {
    return _storage._a != nil
  }
  mutating func clearA() {
    return _storage._a = nil
  }

  var i: Int32 {
    get {return _storage._i}
    set {_uniqueStorage()._i = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._a)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._i)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._a {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if _storage._i != 0 {
        try visitor.visitSingularInt32Field(value: _storage._i, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///   Test that mutual recursion works.
struct Proto3TestMutualRecursionA: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".TestMutualRecursionA"

  fileprivate class _StorageClass {
    var _bb: Proto3TestMutualRecursionB? = nil

    init() {}

    init(copying source: _StorageClass) {
      _bb = source._bb
    }
  }

  fileprivate var _storage = _StorageClass()

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  var bb: Proto3TestMutualRecursionB {
    get {return _storage._bb ?? Proto3TestMutualRecursionB()}
    set {_uniqueStorage()._bb = newValue}
  }
  var hasBb: Bool {
    return _storage._bb != nil
  }
  mutating func clearBb() {
    return _storage._bb = nil
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._bb)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._bb {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Proto3TestMutualRecursionB: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".TestMutualRecursionB"

  fileprivate class _StorageClass {
    var _a: Proto3TestMutualRecursionA? = nil
    var _optionalInt32: Int32 = 0

    init() {}

    init(copying source: _StorageClass) {
      _a = source._a
      _optionalInt32 = source._optionalInt32
    }
  }

  fileprivate var _storage = _StorageClass()

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  var a: Proto3TestMutualRecursionA {
    get {return _storage._a ?? Proto3TestMutualRecursionA()}
    set {_uniqueStorage()._a = newValue}
  }
  var hasA: Bool {
    return _storage._a != nil
  }
  mutating func clearA() {
    return _storage._a = nil
  }

  var optionalInt32: Int32 {
    get {return _storage._optionalInt32}
    set {_uniqueStorage()._optionalInt32 = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._a)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._optionalInt32)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._a {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if _storage._optionalInt32 != 0 {
        try visitor.visitSingularInt32Field(value: _storage._optionalInt32, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Proto3TestEnumAllowAlias: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".TestEnumAllowAlias"

  var value: Proto3TestEnumWithDupValue = Proto3TestEnumWithDupValue.testEnumWithDupValueUnspecified

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &value)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if value != Proto3TestEnumWithDupValue.testEnumWithDupValueUnspecified {
      try visitor.visitSingularEnumField(value: value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///   Test message with CamelCase field names.  This violates Protocol Buffer
///   standard style.
struct Proto3TestCamelCaseFieldNames: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".TestCamelCaseFieldNames"

  fileprivate class _StorageClass {
    var _primitiveField: Int32 = 0
    var _stringField: String = ""
    var _enumField: Proto3ForeignEnum = Proto3ForeignEnum.foreignUnspecified
    var _messageField: Proto3ForeignMessage? = nil
    var _repeatedPrimitiveField: [Int32] = []
    var _repeatedStringField: [String] = []
    var _repeatedEnumField: [Proto3ForeignEnum] = []
    var _repeatedMessageField: [Proto3ForeignMessage] = []

    init() {}

    init(copying source: _StorageClass) {
      _primitiveField = source._primitiveField
      _stringField = source._stringField
      _enumField = source._enumField
      _messageField = source._messageField
      _repeatedPrimitiveField = source._repeatedPrimitiveField
      _repeatedStringField = source._repeatedStringField
      _repeatedEnumField = source._repeatedEnumField
      _repeatedMessageField = source._repeatedMessageField
    }
  }

  fileprivate var _storage = _StorageClass()

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  var primitiveField: Int32 {
    get {return _storage._primitiveField}
    set {_uniqueStorage()._primitiveField = newValue}
  }

  var stringField: String {
    get {return _storage._stringField}
    set {_uniqueStorage()._stringField = newValue}
  }

  var enumField: Proto3ForeignEnum {
    get {return _storage._enumField}
    set {_uniqueStorage()._enumField = newValue}
  }

  var messageField: Proto3ForeignMessage {
    get {return _storage._messageField ?? Proto3ForeignMessage()}
    set {_uniqueStorage()._messageField = newValue}
  }
  var hasMessageField: Bool {
    return _storage._messageField != nil
  }
  mutating func clearMessageField() {
    return _storage._messageField = nil
  }

  var repeatedPrimitiveField: [Int32] {
    get {return _storage._repeatedPrimitiveField}
    set {_uniqueStorage()._repeatedPrimitiveField = newValue}
  }

  var repeatedStringField: [String] {
    get {return _storage._repeatedStringField}
    set {_uniqueStorage()._repeatedStringField = newValue}
  }

  var repeatedEnumField: [Proto3ForeignEnum] {
    get {return _storage._repeatedEnumField}
    set {_uniqueStorage()._repeatedEnumField = newValue}
  }

  var repeatedMessageField: [Proto3ForeignMessage] {
    get {return _storage._repeatedMessageField}
    set {_uniqueStorage()._repeatedMessageField = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._primitiveField)
        case 2: try decoder.decodeSingularStringField(value: &_storage._stringField)
        case 3: try decoder.decodeSingularEnumField(value: &_storage._enumField)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._messageField)
        case 7: try decoder.decodeRepeatedInt32Field(value: &_storage._repeatedPrimitiveField)
        case 8: try decoder.decodeRepeatedStringField(value: &_storage._repeatedStringField)
        case 9: try decoder.decodeRepeatedEnumField(value: &_storage._repeatedEnumField)
        case 10: try decoder.decodeRepeatedMessageField(value: &_storage._repeatedMessageField)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._primitiveField != 0 {
        try visitor.visitSingularInt32Field(value: _storage._primitiveField, fieldNumber: 1)
      }
      if !_storage._stringField.isEmpty {
        try visitor.visitSingularStringField(value: _storage._stringField, fieldNumber: 2)
      }
      if _storage._enumField != Proto3ForeignEnum.foreignUnspecified {
        try visitor.visitSingularEnumField(value: _storage._enumField, fieldNumber: 3)
      }
      if let v = _storage._messageField {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if !_storage._repeatedPrimitiveField.isEmpty {
        try visitor.visitPackedInt32Field(value: _storage._repeatedPrimitiveField, fieldNumber: 7)
      }
      if !_storage._repeatedStringField.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._repeatedStringField, fieldNumber: 8)
      }
      if !_storage._repeatedEnumField.isEmpty {
        try visitor.visitPackedEnumField(value: _storage._repeatedEnumField, fieldNumber: 9)
      }
      if !_storage._repeatedMessageField.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._repeatedMessageField, fieldNumber: 10)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///   We list fields out of order, to ensure that we're using field number and not
///   field index to determine serialization order.
struct Proto3TestFieldOrderings: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".TestFieldOrderings"

  fileprivate class _StorageClass {
    var _myString: String = ""
    var _myInt: Int64 = 0
    var _myFloat: Float = 0
    var _singleNestedMessage: Proto3TestFieldOrderings.NestedMessage? = nil

    init() {}

    init(copying source: _StorageClass) {
      _myString = source._myString
      _myInt = source._myInt
      _myFloat = source._myFloat
      _singleNestedMessage = source._singleNestedMessage
    }
  }

  fileprivate var _storage = _StorageClass()

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  var myString: String {
    get {return _storage._myString}
    set {_uniqueStorage()._myString = newValue}
  }

  var myInt: Int64 {
    get {return _storage._myInt}
    set {_uniqueStorage()._myInt = newValue}
  }

  var myFloat: Float {
    get {return _storage._myFloat}
    set {_uniqueStorage()._myFloat = newValue}
  }

  var singleNestedMessage: Proto3TestFieldOrderings.NestedMessage {
    get {return _storage._singleNestedMessage ?? Proto3TestFieldOrderings.NestedMessage()}
    set {_uniqueStorage()._singleNestedMessage = newValue}
  }
  var hasSingleNestedMessage: Bool {
    return _storage._singleNestedMessage != nil
  }
  mutating func clearSingleNestedMessage() {
    return _storage._singleNestedMessage = nil
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct NestedMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = Proto3TestFieldOrderings.protoMessageName + ".NestedMessage"

    var oo: Int64 = 0

    ///   The field name "b" fails to compile in proto1 because it conflicts with
    ///   a local variable named "b" in one of the generated methods.  Doh.
    ///   This file needs to compile in proto1 to test backwards-compatibility.
    var bb: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 2: try decoder.decodeSingularInt64Field(value: &oo)
        case 1: try decoder.decodeSingularInt32Field(value: &bb)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if bb != 0 {
        try visitor.visitSingularInt32Field(value: bb, fieldNumber: 1)
      }
      if oo != 0 {
        try visitor.visitSingularInt64Field(value: oo, fieldNumber: 2)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 11: try decoder.decodeSingularStringField(value: &_storage._myString)
        case 1: try decoder.decodeSingularInt64Field(value: &_storage._myInt)
        case 101: try decoder.decodeSingularFloatField(value: &_storage._myFloat)
        case 200: try decoder.decodeSingularMessageField(value: &_storage._singleNestedMessage)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._myInt != 0 {
        try visitor.visitSingularInt64Field(value: _storage._myInt, fieldNumber: 1)
      }
      if !_storage._myString.isEmpty {
        try visitor.visitSingularStringField(value: _storage._myString, fieldNumber: 11)
      }
      if _storage._myFloat != 0 {
        try visitor.visitSingularFloatField(value: _storage._myFloat, fieldNumber: 101)
      }
      if let v = _storage._singleNestedMessage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 200)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Proto3SparseEnumMessage: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".SparseEnumMessage"

  var sparseEnum: Proto3TestSparseEnum = Proto3TestSparseEnum.testSparseEnumUnspecified

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &sparseEnum)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if sparseEnum != Proto3TestSparseEnum.testSparseEnumUnspecified {
      try visitor.visitSingularEnumField(value: sparseEnum, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///   Test String and Bytes: string is for valid UTF-8 strings
struct Proto3OneString: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".OneString"

  var data: String = ""

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &data)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !data.isEmpty {
      try visitor.visitSingularStringField(value: data, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Proto3MoreString: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".MoreString"

  var data: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedStringField(value: &data)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !data.isEmpty {
      try visitor.visitRepeatedStringField(value: data, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Proto3OneBytes: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".OneBytes"

  var data: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &data)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !data.isEmpty {
      try visitor.visitSingularBytesField(value: data, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Proto3MoreBytes: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".MoreBytes"

  var data: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &data)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !data.isEmpty {
      try visitor.visitSingularBytesField(value: data, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///   Test int32, uint32, int64, uint64, and bool are all compatible
struct Proto3Int32Message: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".Int32Message"

  var data: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &data)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if data != 0 {
      try visitor.visitSingularInt32Field(value: data, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Proto3Uint32Message: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".Uint32Message"

  var data: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &data)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if data != 0 {
      try visitor.visitSingularUInt32Field(value: data, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Proto3Int64Message: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".Int64Message"

  var data: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &data)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if data != 0 {
      try visitor.visitSingularInt64Field(value: data, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Proto3Uint64Message: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".Uint64Message"

  var data: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &data)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if data != 0 {
      try visitor.visitSingularUInt64Field(value: data, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Proto3BoolMessage: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".BoolMessage"

  var data: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &data)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if data != false {
      try visitor.visitSingularBoolField(value: data, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///   Test oneofs.
struct Proto3TestOneof: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".TestOneof"

  fileprivate class _StorageClass {
    var _foo: Proto3TestOneof.OneOf_Foo?

    init() {}

    init(copying source: _StorageClass) {
      _foo = source._foo
    }
  }

  fileprivate var _storage = _StorageClass()

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  var fooInt: Int32 {
    get {
      if case .fooInt(let v)? = _storage._foo {
        return v
      }
      return 0
    }
    set {
      _uniqueStorage()._foo = .fooInt(newValue)
    }
  }

  var fooString: String {
    get {
      if case .fooString(let v)? = _storage._foo {
        return v
      }
      return ""
    }
    set {
      _uniqueStorage()._foo = .fooString(newValue)
    }
  }

  var fooMessage: Proto3TestAllTypes {
    get {
      if case .fooMessage(let v)? = _storage._foo {
        return v
      }
      return Proto3TestAllTypes()
    }
    set {
      _uniqueStorage()._foo = .fooMessage(newValue)
    }
  }

  var foo: OneOf_Foo? {
    get {return _storage._foo}
    set {
      _uniqueStorage()._foo = newValue
    }
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Foo: Equatable {
    case fooInt(Int32)
    case fooString(String)
    case fooMessage(Proto3TestAllTypes)

    static func ==(lhs: Proto3TestOneof.OneOf_Foo, rhs: Proto3TestOneof.OneOf_Foo) -> Bool {
      switch (lhs, rhs) {
      case (.fooInt(let l), .fooInt(let r)): return l == r
      case (.fooString(let l), .fooString(let r)): return l == r
      case (.fooMessage(let l), .fooMessage(let r)): return l == r
      default: return false
      }
    }

    fileprivate init?<T: SwiftProtobuf.Decoder>(byDecodingFrom decoder: inout T, fieldNumber: Int) throws {
      switch fieldNumber {
      case 1:
        var value = Int32()
        try decoder.decodeSingularInt32Field(value: &value)
        self = .fooInt(value)
        return
      case 2:
        var value = String()
        try decoder.decodeSingularStringField(value: &value)
        self = .fooString(value)
        return
      case 3:
        var value: Proto3TestAllTypes?
        try decoder.decodeSingularMessageField(value: &value)
        if let value = value {
          self = .fooMessage(value)
          return
        }
      default:
        break
      }
      return nil
    }

    fileprivate func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V, start: Int, end: Int) throws {
      switch self {
      case .fooInt(let v):
        if start <= 1 && 1 < end {
          try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
        }
      case .fooString(let v):
        if start <= 2 && 2 < end {
          try visitor.visitSingularStringField(value: v, fieldNumber: 2)
        }
      case .fooMessage(let v):
        if start <= 3 && 3 < end {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
        }
      }
    }
  }

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1...3:
          if _storage._foo != nil {
            try decoder.handleConflictingOneOf()
          }
          _storage._foo = try Proto3TestOneof.OneOf_Foo(byDecodingFrom: &decoder, fieldNumber: fieldNumber)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      try _storage._foo?.traverse(visitor: &visitor, start: 1, end: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Proto3TestPackedTypes: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".TestPackedTypes"

  var packedInt32: [Int32] = []

  var packedInt64: [Int64] = []

  var packedUint32: [UInt32] = []

  var packedUint64: [UInt64] = []

  var packedSint32: [Int32] = []

  var packedSint64: [Int64] = []

  var packedFixed32: [UInt32] = []

  var packedFixed64: [UInt64] = []

  var packedSfixed32: [Int32] = []

  var packedSfixed64: [Int64] = []

  var packedFloat: [Float] = []

  var packedDouble: [Double] = []

  var packedBool: [Bool] = []

  var packedEnum: [Proto3ForeignEnum] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 90: try decoder.decodeRepeatedInt32Field(value: &packedInt32)
      case 91: try decoder.decodeRepeatedInt64Field(value: &packedInt64)
      case 92: try decoder.decodeRepeatedUInt32Field(value: &packedUint32)
      case 93: try decoder.decodeRepeatedUInt64Field(value: &packedUint64)
      case 94: try decoder.decodeRepeatedSInt32Field(value: &packedSint32)
      case 95: try decoder.decodeRepeatedSInt64Field(value: &packedSint64)
      case 96: try decoder.decodeRepeatedFixed32Field(value: &packedFixed32)
      case 97: try decoder.decodeRepeatedFixed64Field(value: &packedFixed64)
      case 98: try decoder.decodeRepeatedSFixed32Field(value: &packedSfixed32)
      case 99: try decoder.decodeRepeatedSFixed64Field(value: &packedSfixed64)
      case 100: try decoder.decodeRepeatedFloatField(value: &packedFloat)
      case 101: try decoder.decodeRepeatedDoubleField(value: &packedDouble)
      case 102: try decoder.decodeRepeatedBoolField(value: &packedBool)
      case 103: try decoder.decodeRepeatedEnumField(value: &packedEnum)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !packedInt32.isEmpty {
      try visitor.visitPackedInt32Field(value: packedInt32, fieldNumber: 90)
    }
    if !packedInt64.isEmpty {
      try visitor.visitPackedInt64Field(value: packedInt64, fieldNumber: 91)
    }
    if !packedUint32.isEmpty {
      try visitor.visitPackedUInt32Field(value: packedUint32, fieldNumber: 92)
    }
    if !packedUint64.isEmpty {
      try visitor.visitPackedUInt64Field(value: packedUint64, fieldNumber: 93)
    }
    if !packedSint32.isEmpty {
      try visitor.visitPackedSInt32Field(value: packedSint32, fieldNumber: 94)
    }
    if !packedSint64.isEmpty {
      try visitor.visitPackedSInt64Field(value: packedSint64, fieldNumber: 95)
    }
    if !packedFixed32.isEmpty {
      try visitor.visitPackedFixed32Field(value: packedFixed32, fieldNumber: 96)
    }
    if !packedFixed64.isEmpty {
      try visitor.visitPackedFixed64Field(value: packedFixed64, fieldNumber: 97)
    }
    if !packedSfixed32.isEmpty {
      try visitor.visitPackedSFixed32Field(value: packedSfixed32, fieldNumber: 98)
    }
    if !packedSfixed64.isEmpty {
      try visitor.visitPackedSFixed64Field(value: packedSfixed64, fieldNumber: 99)
    }
    if !packedFloat.isEmpty {
      try visitor.visitPackedFloatField(value: packedFloat, fieldNumber: 100)
    }
    if !packedDouble.isEmpty {
      try visitor.visitPackedDoubleField(value: packedDouble, fieldNumber: 101)
    }
    if !packedBool.isEmpty {
      try visitor.visitPackedBoolField(value: packedBool, fieldNumber: 102)
    }
    if !packedEnum.isEmpty {
      try visitor.visitPackedEnumField(value: packedEnum, fieldNumber: 103)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///   A message with the same fields as TestPackedTypes, but without packing. Used
///   to test packed <-> unpacked wire compatibility.
struct Proto3TestUnpackedTypes: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".TestUnpackedTypes"

  var unpackedInt32: [Int32] = []

  var unpackedInt64: [Int64] = []

  var unpackedUint32: [UInt32] = []

  var unpackedUint64: [UInt64] = []

  var unpackedSint32: [Int32] = []

  var unpackedSint64: [Int64] = []

  var unpackedFixed32: [UInt32] = []

  var unpackedFixed64: [UInt64] = []

  var unpackedSfixed32: [Int32] = []

  var unpackedSfixed64: [Int64] = []

  var unpackedFloat: [Float] = []

  var unpackedDouble: [Double] = []

  var unpackedBool: [Bool] = []

  var unpackedEnum: [Proto3ForeignEnum] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 90: try decoder.decodeRepeatedInt32Field(value: &unpackedInt32)
      case 91: try decoder.decodeRepeatedInt64Field(value: &unpackedInt64)
      case 92: try decoder.decodeRepeatedUInt32Field(value: &unpackedUint32)
      case 93: try decoder.decodeRepeatedUInt64Field(value: &unpackedUint64)
      case 94: try decoder.decodeRepeatedSInt32Field(value: &unpackedSint32)
      case 95: try decoder.decodeRepeatedSInt64Field(value: &unpackedSint64)
      case 96: try decoder.decodeRepeatedFixed32Field(value: &unpackedFixed32)
      case 97: try decoder.decodeRepeatedFixed64Field(value: &unpackedFixed64)
      case 98: try decoder.decodeRepeatedSFixed32Field(value: &unpackedSfixed32)
      case 99: try decoder.decodeRepeatedSFixed64Field(value: &unpackedSfixed64)
      case 100: try decoder.decodeRepeatedFloatField(value: &unpackedFloat)
      case 101: try decoder.decodeRepeatedDoubleField(value: &unpackedDouble)
      case 102: try decoder.decodeRepeatedBoolField(value: &unpackedBool)
      case 103: try decoder.decodeRepeatedEnumField(value: &unpackedEnum)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !unpackedInt32.isEmpty {
      try visitor.visitRepeatedInt32Field(value: unpackedInt32, fieldNumber: 90)
    }
    if !unpackedInt64.isEmpty {
      try visitor.visitRepeatedInt64Field(value: unpackedInt64, fieldNumber: 91)
    }
    if !unpackedUint32.isEmpty {
      try visitor.visitRepeatedUInt32Field(value: unpackedUint32, fieldNumber: 92)
    }
    if !unpackedUint64.isEmpty {
      try visitor.visitRepeatedUInt64Field(value: unpackedUint64, fieldNumber: 93)
    }
    if !unpackedSint32.isEmpty {
      try visitor.visitRepeatedSInt32Field(value: unpackedSint32, fieldNumber: 94)
    }
    if !unpackedSint64.isEmpty {
      try visitor.visitRepeatedSInt64Field(value: unpackedSint64, fieldNumber: 95)
    }
    if !unpackedFixed32.isEmpty {
      try visitor.visitRepeatedFixed32Field(value: unpackedFixed32, fieldNumber: 96)
    }
    if !unpackedFixed64.isEmpty {
      try visitor.visitRepeatedFixed64Field(value: unpackedFixed64, fieldNumber: 97)
    }
    if !unpackedSfixed32.isEmpty {
      try visitor.visitRepeatedSFixed32Field(value: unpackedSfixed32, fieldNumber: 98)
    }
    if !unpackedSfixed64.isEmpty {
      try visitor.visitRepeatedSFixed64Field(value: unpackedSfixed64, fieldNumber: 99)
    }
    if !unpackedFloat.isEmpty {
      try visitor.visitRepeatedFloatField(value: unpackedFloat, fieldNumber: 100)
    }
    if !unpackedDouble.isEmpty {
      try visitor.visitRepeatedDoubleField(value: unpackedDouble, fieldNumber: 101)
    }
    if !unpackedBool.isEmpty {
      try visitor.visitRepeatedBoolField(value: unpackedBool, fieldNumber: 102)
    }
    if !unpackedEnum.isEmpty {
      try visitor.visitRepeatedEnumField(value: unpackedEnum, fieldNumber: 103)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Proto3TestRepeatedScalarDifferentTagSizes: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".TestRepeatedScalarDifferentTagSizes"

  ///   Parsing repeated fixed size values used to fail. This message needs to be
  ///   used in order to get a tag of the right size; all of the repeated fields
  ///   in TestAllTypes didn't trigger the check.
  var repeatedFixed32: [UInt32] = []

  ///   Check for a varint type, just for good measure.
  var repeatedInt32: [Int32] = []

  ///   These have two-byte tags.
  var repeatedFixed64: [UInt64] = []

  var repeatedInt64: [Int64] = []

  ///   Three byte tags.
  var repeatedFloat: [Float] = []

  var repeatedUint64: [UInt64] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 12: try decoder.decodeRepeatedFixed32Field(value: &repeatedFixed32)
      case 13: try decoder.decodeRepeatedInt32Field(value: &repeatedInt32)
      case 2046: try decoder.decodeRepeatedFixed64Field(value: &repeatedFixed64)
      case 2047: try decoder.decodeRepeatedInt64Field(value: &repeatedInt64)
      case 262142: try decoder.decodeRepeatedFloatField(value: &repeatedFloat)
      case 262143: try decoder.decodeRepeatedUInt64Field(value: &repeatedUint64)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !repeatedFixed32.isEmpty {
      try visitor.visitPackedFixed32Field(value: repeatedFixed32, fieldNumber: 12)
    }
    if !repeatedInt32.isEmpty {
      try visitor.visitPackedInt32Field(value: repeatedInt32, fieldNumber: 13)
    }
    if !repeatedFixed64.isEmpty {
      try visitor.visitPackedFixed64Field(value: repeatedFixed64, fieldNumber: 2046)
    }
    if !repeatedInt64.isEmpty {
      try visitor.visitPackedInt64Field(value: repeatedInt64, fieldNumber: 2047)
    }
    if !repeatedFloat.isEmpty {
      try visitor.visitPackedFloatField(value: repeatedFloat, fieldNumber: 262142)
    }
    if !repeatedUint64.isEmpty {
      try visitor.visitPackedUInt64Field(value: repeatedUint64, fieldNumber: 262143)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Proto3TestCommentInjectionMessage: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".TestCommentInjectionMessage"

  ///   */ <- This should not close the generated doc comment
  var a: String = ""

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &a)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !a.isEmpty {
      try visitor.visitSingularStringField(value: a, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///   Test that RPC services work.
struct Proto3FooRequest: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".FooRequest"

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Proto3FooResponse: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".FooResponse"

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Proto3FooClientMessage: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".FooClientMessage"

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Proto3FooServerMessage: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".FooServerMessage"

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Proto3BarRequest: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".BarRequest"

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Proto3BarResponse: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".BarResponse"

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }
}

extension Proto3TestAllTypes: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "single_int32"),
    2: .standard(proto: "single_int64"),
    3: .standard(proto: "single_uint32"),
    4: .standard(proto: "single_uint64"),
    5: .standard(proto: "single_sint32"),
    6: .standard(proto: "single_sint64"),
    7: .standard(proto: "single_fixed32"),
    8: .standard(proto: "single_fixed64"),
    9: .standard(proto: "single_sfixed32"),
    10: .standard(proto: "single_sfixed64"),
    11: .standard(proto: "single_float"),
    12: .standard(proto: "single_double"),
    13: .standard(proto: "single_bool"),
    14: .standard(proto: "single_string"),
    15: .standard(proto: "single_bytes"),
    18: .standard(proto: "single_nested_message"),
    19: .standard(proto: "single_foreign_message"),
    20: .standard(proto: "single_import_message"),
    21: .standard(proto: "single_nested_enum"),
    22: .standard(proto: "single_foreign_enum"),
    23: .standard(proto: "single_import_enum"),
    26: .standard(proto: "single_public_import_message"),
    31: .standard(proto: "repeated_int32"),
    32: .standard(proto: "repeated_int64"),
    33: .standard(proto: "repeated_uint32"),
    34: .standard(proto: "repeated_uint64"),
    35: .standard(proto: "repeated_sint32"),
    36: .standard(proto: "repeated_sint64"),
    37: .standard(proto: "repeated_fixed32"),
    38: .standard(proto: "repeated_fixed64"),
    39: .standard(proto: "repeated_sfixed32"),
    40: .standard(proto: "repeated_sfixed64"),
    41: .standard(proto: "repeated_float"),
    42: .standard(proto: "repeated_double"),
    43: .standard(proto: "repeated_bool"),
    44: .standard(proto: "repeated_string"),
    45: .standard(proto: "repeated_bytes"),
    48: .standard(proto: "repeated_nested_message"),
    49: .standard(proto: "repeated_foreign_message"),
    50: .standard(proto: "repeated_import_message"),
    51: .standard(proto: "repeated_nested_enum"),
    52: .standard(proto: "repeated_foreign_enum"),
    53: .standard(proto: "repeated_import_enum"),
    54: .standard(proto: "repeated_public_import_message"),
    111: .standard(proto: "oneof_uint32"),
    112: .standard(proto: "oneof_nested_message"),
    113: .standard(proto: "oneof_string"),
    114: .standard(proto: "oneof_bytes"),
  ]

  func _protobuf_generated_isEqualTo(other: Proto3TestAllTypes) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._singleInt32 != other_storage._singleInt32 {return false}
        if _storage._singleInt64 != other_storage._singleInt64 {return false}
        if _storage._singleUint32 != other_storage._singleUint32 {return false}
        if _storage._singleUint64 != other_storage._singleUint64 {return false}
        if _storage._singleSint32 != other_storage._singleSint32 {return false}
        if _storage._singleSint64 != other_storage._singleSint64 {return false}
        if _storage._singleFixed32 != other_storage._singleFixed32 {return false}
        if _storage._singleFixed64 != other_storage._singleFixed64 {return false}
        if _storage._singleSfixed32 != other_storage._singleSfixed32 {return false}
        if _storage._singleSfixed64 != other_storage._singleSfixed64 {return false}
        if _storage._singleFloat != other_storage._singleFloat {return false}
        if _storage._singleDouble != other_storage._singleDouble {return false}
        if _storage._singleBool != other_storage._singleBool {return false}
        if _storage._singleString != other_storage._singleString {return false}
        if _storage._singleBytes != other_storage._singleBytes {return false}
        if _storage._singleNestedMessage != other_storage._singleNestedMessage {return false}
        if _storage._singleForeignMessage != other_storage._singleForeignMessage {return false}
        if _storage._singleImportMessage != other_storage._singleImportMessage {return false}
        if _storage._singleNestedEnum != other_storage._singleNestedEnum {return false}
        if _storage._singleForeignEnum != other_storage._singleForeignEnum {return false}
        if _storage._singleImportEnum != other_storage._singleImportEnum {return false}
        if _storage._singlePublicImportMessage != other_storage._singlePublicImportMessage {return false}
        if _storage._repeatedInt32 != other_storage._repeatedInt32 {return false}
        if _storage._repeatedInt64 != other_storage._repeatedInt64 {return false}
        if _storage._repeatedUint32 != other_storage._repeatedUint32 {return false}
        if _storage._repeatedUint64 != other_storage._repeatedUint64 {return false}
        if _storage._repeatedSint32 != other_storage._repeatedSint32 {return false}
        if _storage._repeatedSint64 != other_storage._repeatedSint64 {return false}
        if _storage._repeatedFixed32 != other_storage._repeatedFixed32 {return false}
        if _storage._repeatedFixed64 != other_storage._repeatedFixed64 {return false}
        if _storage._repeatedSfixed32 != other_storage._repeatedSfixed32 {return false}
        if _storage._repeatedSfixed64 != other_storage._repeatedSfixed64 {return false}
        if _storage._repeatedFloat != other_storage._repeatedFloat {return false}
        if _storage._repeatedDouble != other_storage._repeatedDouble {return false}
        if _storage._repeatedBool != other_storage._repeatedBool {return false}
        if _storage._repeatedString != other_storage._repeatedString {return false}
        if _storage._repeatedBytes != other_storage._repeatedBytes {return false}
        if _storage._repeatedNestedMessage != other_storage._repeatedNestedMessage {return false}
        if _storage._repeatedForeignMessage != other_storage._repeatedForeignMessage {return false}
        if _storage._repeatedImportMessage != other_storage._repeatedImportMessage {return false}
        if _storage._repeatedNestedEnum != other_storage._repeatedNestedEnum {return false}
        if _storage._repeatedForeignEnum != other_storage._repeatedForeignEnum {return false}
        if _storage._repeatedImportEnum != other_storage._repeatedImportEnum {return false}
        if _storage._repeatedPublicImportMessage != other_storage._repeatedPublicImportMessage {return false}
        if _storage._oneofField != other_storage._oneofField {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Proto3TestAllTypes.NestedMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bb"),
  ]

  func _protobuf_generated_isEqualTo(other: Proto3TestAllTypes.NestedMessage) -> Bool {
    if bb != other.bb {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Proto3NestedTestAllTypes: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "child"),
    2: .same(proto: "payload"),
    3: .standard(proto: "repeated_child"),
  ]

  func _protobuf_generated_isEqualTo(other: Proto3NestedTestAllTypes) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._child != other_storage._child {return false}
        if _storage._payload != other_storage._payload {return false}
        if _storage._repeatedChild != other_storage._repeatedChild {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Proto3TestDeprecatedFields: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "deprecated_int32"),
  ]

  func _protobuf_generated_isEqualTo(other: Proto3TestDeprecatedFields) -> Bool {
    if deprecatedInt32 != other.deprecatedInt32 {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Proto3ForeignMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "c"),
  ]

  func _protobuf_generated_isEqualTo(other: Proto3ForeignMessage) -> Bool {
    if c != other.c {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Proto3TestReservedFields: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  func _protobuf_generated_isEqualTo(other: Proto3TestReservedFields) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Proto3TestForeignNested: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "foreign_nested"),
  ]

  func _protobuf_generated_isEqualTo(other: Proto3TestForeignNested) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._foreignNested != other_storage._foreignNested {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Proto3TestReallyLargeTagNumber: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "a"),
    268435455: .same(proto: "bb"),
  ]

  func _protobuf_generated_isEqualTo(other: Proto3TestReallyLargeTagNumber) -> Bool {
    if a != other.a {return false}
    if bb != other.bb {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Proto3TestRecursiveMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "a"),
    2: .same(proto: "i"),
  ]

  func _protobuf_generated_isEqualTo(other: Proto3TestRecursiveMessage) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._a != other_storage._a {return false}
        if _storage._i != other_storage._i {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Proto3TestMutualRecursionA: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bb"),
  ]

  func _protobuf_generated_isEqualTo(other: Proto3TestMutualRecursionA) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._bb != other_storage._bb {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Proto3TestMutualRecursionB: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "a"),
    2: .standard(proto: "optional_int32"),
  ]

  func _protobuf_generated_isEqualTo(other: Proto3TestMutualRecursionB) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._a != other_storage._a {return false}
        if _storage._optionalInt32 != other_storage._optionalInt32 {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Proto3TestEnumAllowAlias: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  func _protobuf_generated_isEqualTo(other: Proto3TestEnumAllowAlias) -> Bool {
    if value != other.value {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Proto3TestCamelCaseFieldNames: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "PrimitiveField"),
    2: .same(proto: "StringField"),
    3: .same(proto: "EnumField"),
    4: .same(proto: "MessageField"),
    7: .same(proto: "RepeatedPrimitiveField"),
    8: .same(proto: "RepeatedStringField"),
    9: .same(proto: "RepeatedEnumField"),
    10: .same(proto: "RepeatedMessageField"),
  ]

  func _protobuf_generated_isEqualTo(other: Proto3TestCamelCaseFieldNames) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._primitiveField != other_storage._primitiveField {return false}
        if _storage._stringField != other_storage._stringField {return false}
        if _storage._enumField != other_storage._enumField {return false}
        if _storage._messageField != other_storage._messageField {return false}
        if _storage._repeatedPrimitiveField != other_storage._repeatedPrimitiveField {return false}
        if _storage._repeatedStringField != other_storage._repeatedStringField {return false}
        if _storage._repeatedEnumField != other_storage._repeatedEnumField {return false}
        if _storage._repeatedMessageField != other_storage._repeatedMessageField {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Proto3TestFieldOrderings: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    11: .standard(proto: "my_string"),
    1: .standard(proto: "my_int"),
    101: .standard(proto: "my_float"),
    200: .standard(proto: "single_nested_message"),
  ]

  func _protobuf_generated_isEqualTo(other: Proto3TestFieldOrderings) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._myString != other_storage._myString {return false}
        if _storage._myInt != other_storage._myInt {return false}
        if _storage._myFloat != other_storage._myFloat {return false}
        if _storage._singleNestedMessage != other_storage._singleNestedMessage {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Proto3TestFieldOrderings.NestedMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "oo"),
    1: .same(proto: "bb"),
  ]

  func _protobuf_generated_isEqualTo(other: Proto3TestFieldOrderings.NestedMessage) -> Bool {
    if oo != other.oo {return false}
    if bb != other.bb {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Proto3SparseEnumMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "sparse_enum"),
  ]

  func _protobuf_generated_isEqualTo(other: Proto3SparseEnumMessage) -> Bool {
    if sparseEnum != other.sparseEnum {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Proto3OneString: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]

  func _protobuf_generated_isEqualTo(other: Proto3OneString) -> Bool {
    if data != other.data {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Proto3MoreString: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]

  func _protobuf_generated_isEqualTo(other: Proto3MoreString) -> Bool {
    if data != other.data {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Proto3OneBytes: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]

  func _protobuf_generated_isEqualTo(other: Proto3OneBytes) -> Bool {
    if data != other.data {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Proto3MoreBytes: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]

  func _protobuf_generated_isEqualTo(other: Proto3MoreBytes) -> Bool {
    if data != other.data {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Proto3Int32Message: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]

  func _protobuf_generated_isEqualTo(other: Proto3Int32Message) -> Bool {
    if data != other.data {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Proto3Uint32Message: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]

  func _protobuf_generated_isEqualTo(other: Proto3Uint32Message) -> Bool {
    if data != other.data {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Proto3Int64Message: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]

  func _protobuf_generated_isEqualTo(other: Proto3Int64Message) -> Bool {
    if data != other.data {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Proto3Uint64Message: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]

  func _protobuf_generated_isEqualTo(other: Proto3Uint64Message) -> Bool {
    if data != other.data {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Proto3BoolMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]

  func _protobuf_generated_isEqualTo(other: Proto3BoolMessage) -> Bool {
    if data != other.data {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Proto3TestOneof: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "foo_int"),
    2: .standard(proto: "foo_string"),
    3: .standard(proto: "foo_message"),
  ]

  func _protobuf_generated_isEqualTo(other: Proto3TestOneof) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._foo != other_storage._foo {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Proto3TestPackedTypes: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    90: .standard(proto: "packed_int32"),
    91: .standard(proto: "packed_int64"),
    92: .standard(proto: "packed_uint32"),
    93: .standard(proto: "packed_uint64"),
    94: .standard(proto: "packed_sint32"),
    95: .standard(proto: "packed_sint64"),
    96: .standard(proto: "packed_fixed32"),
    97: .standard(proto: "packed_fixed64"),
    98: .standard(proto: "packed_sfixed32"),
    99: .standard(proto: "packed_sfixed64"),
    100: .standard(proto: "packed_float"),
    101: .standard(proto: "packed_double"),
    102: .standard(proto: "packed_bool"),
    103: .standard(proto: "packed_enum"),
  ]

  func _protobuf_generated_isEqualTo(other: Proto3TestPackedTypes) -> Bool {
    if packedInt32 != other.packedInt32 {return false}
    if packedInt64 != other.packedInt64 {return false}
    if packedUint32 != other.packedUint32 {return false}
    if packedUint64 != other.packedUint64 {return false}
    if packedSint32 != other.packedSint32 {return false}
    if packedSint64 != other.packedSint64 {return false}
    if packedFixed32 != other.packedFixed32 {return false}
    if packedFixed64 != other.packedFixed64 {return false}
    if packedSfixed32 != other.packedSfixed32 {return false}
    if packedSfixed64 != other.packedSfixed64 {return false}
    if packedFloat != other.packedFloat {return false}
    if packedDouble != other.packedDouble {return false}
    if packedBool != other.packedBool {return false}
    if packedEnum != other.packedEnum {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Proto3TestUnpackedTypes: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    90: .standard(proto: "unpacked_int32"),
    91: .standard(proto: "unpacked_int64"),
    92: .standard(proto: "unpacked_uint32"),
    93: .standard(proto: "unpacked_uint64"),
    94: .standard(proto: "unpacked_sint32"),
    95: .standard(proto: "unpacked_sint64"),
    96: .standard(proto: "unpacked_fixed32"),
    97: .standard(proto: "unpacked_fixed64"),
    98: .standard(proto: "unpacked_sfixed32"),
    99: .standard(proto: "unpacked_sfixed64"),
    100: .standard(proto: "unpacked_float"),
    101: .standard(proto: "unpacked_double"),
    102: .standard(proto: "unpacked_bool"),
    103: .standard(proto: "unpacked_enum"),
  ]

  func _protobuf_generated_isEqualTo(other: Proto3TestUnpackedTypes) -> Bool {
    if unpackedInt32 != other.unpackedInt32 {return false}
    if unpackedInt64 != other.unpackedInt64 {return false}
    if unpackedUint32 != other.unpackedUint32 {return false}
    if unpackedUint64 != other.unpackedUint64 {return false}
    if unpackedSint32 != other.unpackedSint32 {return false}
    if unpackedSint64 != other.unpackedSint64 {return false}
    if unpackedFixed32 != other.unpackedFixed32 {return false}
    if unpackedFixed64 != other.unpackedFixed64 {return false}
    if unpackedSfixed32 != other.unpackedSfixed32 {return false}
    if unpackedSfixed64 != other.unpackedSfixed64 {return false}
    if unpackedFloat != other.unpackedFloat {return false}
    if unpackedDouble != other.unpackedDouble {return false}
    if unpackedBool != other.unpackedBool {return false}
    if unpackedEnum != other.unpackedEnum {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Proto3TestRepeatedScalarDifferentTagSizes: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    12: .standard(proto: "repeated_fixed32"),
    13: .standard(proto: "repeated_int32"),
    2046: .standard(proto: "repeated_fixed64"),
    2047: .standard(proto: "repeated_int64"),
    262142: .standard(proto: "repeated_float"),
    262143: .standard(proto: "repeated_uint64"),
  ]

  func _protobuf_generated_isEqualTo(other: Proto3TestRepeatedScalarDifferentTagSizes) -> Bool {
    if repeatedFixed32 != other.repeatedFixed32 {return false}
    if repeatedInt32 != other.repeatedInt32 {return false}
    if repeatedFixed64 != other.repeatedFixed64 {return false}
    if repeatedInt64 != other.repeatedInt64 {return false}
    if repeatedFloat != other.repeatedFloat {return false}
    if repeatedUint64 != other.repeatedUint64 {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Proto3TestCommentInjectionMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "a"),
  ]

  func _protobuf_generated_isEqualTo(other: Proto3TestCommentInjectionMessage) -> Bool {
    if a != other.a {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Proto3FooRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  func _protobuf_generated_isEqualTo(other: Proto3FooRequest) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Proto3FooResponse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  func _protobuf_generated_isEqualTo(other: Proto3FooResponse) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Proto3FooClientMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  func _protobuf_generated_isEqualTo(other: Proto3FooClientMessage) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Proto3FooServerMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  func _protobuf_generated_isEqualTo(other: Proto3FooServerMessage) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Proto3BarRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  func _protobuf_generated_isEqualTo(other: Proto3BarRequest) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Proto3BarResponse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  func _protobuf_generated_isEqualTo(other: Proto3BarResponse) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
