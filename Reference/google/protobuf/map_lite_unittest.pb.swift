/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: google/protobuf/map_lite_unittest.proto
 *
 */

//  Protocol Buffers - Google's data interchange format
//  Copyright 2008 Google Inc.  All rights reserved.
//  https://developers.google.com/protocol-buffers/
// 
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are
//  met:
// 
//      * Redistributions of source code must retain the above copyright
//  notice, this list of conditions and the following disclaimer.
//      * Redistributions in binary form must reproduce the above
//  copyright notice, this list of conditions and the following disclaimer
//  in the documentation and/or other materials provided with the
//  distribution.
//      * Neither the name of Google Inc. nor the names of its
//  contributors may be used to endorse or promote products derived from
//  this software without specific prior written permission.
// 
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
//  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
//  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
//  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
//  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
//  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
//  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import Foundation
import SwiftProtobuf


public enum ProtobufUnittest_Proto2MapEnumLite: ProtobufEnum {
  public typealias RawValue = Int
  case proto2MapEnumFooLite // = 0
  case proto2MapEnumBarLite // = 1
  case proto2MapEnumBazLite // = 2

  public init() {
    self = .proto2MapEnumFooLite
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .proto2MapEnumFooLite
    case 1: self = .proto2MapEnumBarLite
    case 2: self = .proto2MapEnumBazLite
    default: return nil
    }
  }

  public init?(name: String) {
    switch name {
    case "proto2MapEnumFooLite": self = .proto2MapEnumFooLite
    case "proto2MapEnumBarLite": self = .proto2MapEnumBarLite
    case "proto2MapEnumBazLite": self = .proto2MapEnumBazLite
    default: return nil
    }
  }

  public init?(jsonName: String) {
    switch jsonName {
    case "PROTO2_MAP_ENUM_FOO_LITE": self = .proto2MapEnumFooLite
    case "PROTO2_MAP_ENUM_BAR_LITE": self = .proto2MapEnumBarLite
    case "PROTO2_MAP_ENUM_BAZ_LITE": self = .proto2MapEnumBazLite
    default: return nil
    }
  }

  public init?(protoName: String) {
    switch protoName {
    case "PROTO2_MAP_ENUM_FOO_LITE": self = .proto2MapEnumFooLite
    case "PROTO2_MAP_ENUM_BAR_LITE": self = .proto2MapEnumBarLite
    case "PROTO2_MAP_ENUM_BAZ_LITE": self = .proto2MapEnumBazLite
    default: return nil
    }
  }

  public var rawValue: Int {
    get {
      switch self {
      case .proto2MapEnumFooLite: return 0
      case .proto2MapEnumBarLite: return 1
      case .proto2MapEnumBazLite: return 2
      }
    }
  }

  public var json: String {
    get {
      switch self {
      case .proto2MapEnumFooLite: return "\"PROTO2_MAP_ENUM_FOO_LITE\""
      case .proto2MapEnumBarLite: return "\"PROTO2_MAP_ENUM_BAR_LITE\""
      case .proto2MapEnumBazLite: return "\"PROTO2_MAP_ENUM_BAZ_LITE\""
      }
    }
  }

  public var hashValue: Int { return rawValue }

  public var debugDescription: String {
    get {
      switch self {
      case .proto2MapEnumFooLite: return ".proto2MapEnumFooLite"
      case .proto2MapEnumBarLite: return ".proto2MapEnumBarLite"
      case .proto2MapEnumBazLite: return ".proto2MapEnumBazLite"
      }
    }
  }

}

public enum ProtobufUnittest_Proto2MapEnumPlusExtraLite: ProtobufEnum {
  public typealias RawValue = Int
  case eProto2MapEnumFooLite // = 0
  case eProto2MapEnumBarLite // = 1
  case eProto2MapEnumBazLite // = 2
  case eProto2MapEnumExtraLite // = 3

  public init() {
    self = .eProto2MapEnumFooLite
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .eProto2MapEnumFooLite
    case 1: self = .eProto2MapEnumBarLite
    case 2: self = .eProto2MapEnumBazLite
    case 3: self = .eProto2MapEnumExtraLite
    default: return nil
    }
  }

  public init?(name: String) {
    switch name {
    case "eProto2MapEnumFooLite": self = .eProto2MapEnumFooLite
    case "eProto2MapEnumBarLite": self = .eProto2MapEnumBarLite
    case "eProto2MapEnumBazLite": self = .eProto2MapEnumBazLite
    case "eProto2MapEnumExtraLite": self = .eProto2MapEnumExtraLite
    default: return nil
    }
  }

  public init?(jsonName: String) {
    switch jsonName {
    case "E_PROTO2_MAP_ENUM_FOO_LITE": self = .eProto2MapEnumFooLite
    case "E_PROTO2_MAP_ENUM_BAR_LITE": self = .eProto2MapEnumBarLite
    case "E_PROTO2_MAP_ENUM_BAZ_LITE": self = .eProto2MapEnumBazLite
    case "E_PROTO2_MAP_ENUM_EXTRA_LITE": self = .eProto2MapEnumExtraLite
    default: return nil
    }
  }

  public init?(protoName: String) {
    switch protoName {
    case "E_PROTO2_MAP_ENUM_FOO_LITE": self = .eProto2MapEnumFooLite
    case "E_PROTO2_MAP_ENUM_BAR_LITE": self = .eProto2MapEnumBarLite
    case "E_PROTO2_MAP_ENUM_BAZ_LITE": self = .eProto2MapEnumBazLite
    case "E_PROTO2_MAP_ENUM_EXTRA_LITE": self = .eProto2MapEnumExtraLite
    default: return nil
    }
  }

  public var rawValue: Int {
    get {
      switch self {
      case .eProto2MapEnumFooLite: return 0
      case .eProto2MapEnumBarLite: return 1
      case .eProto2MapEnumBazLite: return 2
      case .eProto2MapEnumExtraLite: return 3
      }
    }
  }

  public var json: String {
    get {
      switch self {
      case .eProto2MapEnumFooLite: return "\"E_PROTO2_MAP_ENUM_FOO_LITE\""
      case .eProto2MapEnumBarLite: return "\"E_PROTO2_MAP_ENUM_BAR_LITE\""
      case .eProto2MapEnumBazLite: return "\"E_PROTO2_MAP_ENUM_BAZ_LITE\""
      case .eProto2MapEnumExtraLite: return "\"E_PROTO2_MAP_ENUM_EXTRA_LITE\""
      }
    }
  }

  public var hashValue: Int { return rawValue }

  public var debugDescription: String {
    get {
      switch self {
      case .eProto2MapEnumFooLite: return ".eProto2MapEnumFooLite"
      case .eProto2MapEnumBarLite: return ".eProto2MapEnumBarLite"
      case .eProto2MapEnumBazLite: return ".eProto2MapEnumBazLite"
      case .eProto2MapEnumExtraLite: return ".eProto2MapEnumExtraLite"
      }
    }
  }

}

public enum ProtobufUnittest_MapEnumLite: ProtobufEnum {
  public typealias RawValue = Int
  case mapEnumFooLite // = 0
  case mapEnumBarLite // = 1
  case mapEnumBazLite // = 2

  public init() {
    self = .mapEnumFooLite
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .mapEnumFooLite
    case 1: self = .mapEnumBarLite
    case 2: self = .mapEnumBazLite
    default: return nil
    }
  }

  public init?(name: String) {
    switch name {
    case "mapEnumFooLite": self = .mapEnumFooLite
    case "mapEnumBarLite": self = .mapEnumBarLite
    case "mapEnumBazLite": self = .mapEnumBazLite
    default: return nil
    }
  }

  public init?(jsonName: String) {
    switch jsonName {
    case "MAP_ENUM_FOO_LITE": self = .mapEnumFooLite
    case "MAP_ENUM_BAR_LITE": self = .mapEnumBarLite
    case "MAP_ENUM_BAZ_LITE": self = .mapEnumBazLite
    default: return nil
    }
  }

  public init?(protoName: String) {
    switch protoName {
    case "MAP_ENUM_FOO_LITE": self = .mapEnumFooLite
    case "MAP_ENUM_BAR_LITE": self = .mapEnumBarLite
    case "MAP_ENUM_BAZ_LITE": self = .mapEnumBazLite
    default: return nil
    }
  }

  public var rawValue: Int {
    get {
      switch self {
      case .mapEnumFooLite: return 0
      case .mapEnumBarLite: return 1
      case .mapEnumBazLite: return 2
      }
    }
  }

  public var json: String {
    get {
      switch self {
      case .mapEnumFooLite: return "\"MAP_ENUM_FOO_LITE\""
      case .mapEnumBarLite: return "\"MAP_ENUM_BAR_LITE\""
      case .mapEnumBazLite: return "\"MAP_ENUM_BAZ_LITE\""
      }
    }
  }

  public var hashValue: Int { return rawValue }

  public var debugDescription: String {
    get {
      switch self {
      case .mapEnumFooLite: return ".mapEnumFooLite"
      case .mapEnumBarLite: return ".mapEnumBarLite"
      case .mapEnumBazLite: return ".mapEnumBazLite"
      }
    }
  }

}

public struct ProtobufUnittest_TestMapLite: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "ProtobufUnittest_TestMapLite"}
  public var protoMessageName: String {return "TestMapLite"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [
    "mapInt32Int32": 1,
    "mapInt64Int64": 2,
    "mapUint32Uint32": 3,
    "mapUint64Uint64": 4,
    "mapSint32Sint32": 5,
    "mapSint64Sint64": 6,
    "mapFixed32Fixed32": 7,
    "mapFixed64Fixed64": 8,
    "mapSfixed32Sfixed32": 9,
    "mapSfixed64Sfixed64": 10,
    "mapInt32Float": 11,
    "mapInt32Double": 12,
    "mapBoolBool": 13,
    "mapStringString": 14,
    "mapInt32Bytes": 15,
    "mapInt32Enum": 16,
    "mapInt32ForeignMessage": 17,
    "teboring": 18,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "map_int32_int32": 1,
    "map_int64_int64": 2,
    "map_uint32_uint32": 3,
    "map_uint64_uint64": 4,
    "map_sint32_sint32": 5,
    "map_sint64_sint64": 6,
    "map_fixed32_fixed32": 7,
    "map_fixed64_fixed64": 8,
    "map_sfixed32_sfixed32": 9,
    "map_sfixed64_sfixed64": 10,
    "map_int32_float": 11,
    "map_int32_double": 12,
    "map_bool_bool": 13,
    "map_string_string": 14,
    "map_int32_bytes": 15,
    "map_int32_enum": 16,
    "map_int32_foreign_message": 17,
    "teboring": 18,
  ]}

  private class _StorageClass {
    typealias ProtobufExtendedMessage = ProtobufUnittest_TestMapLite
    var unknown = ProtobufUnknownStorage()
    var _mapInt32Int32: Dictionary<Int32,Int32> = [:]
    var _mapInt64Int64: Dictionary<Int64,Int64> = [:]
    var _mapUint32Uint32: Dictionary<UInt32,UInt32> = [:]
    var _mapUint64Uint64: Dictionary<UInt64,UInt64> = [:]
    var _mapSint32Sint32: Dictionary<Int32,Int32> = [:]
    var _mapSint64Sint64: Dictionary<Int64,Int64> = [:]
    var _mapFixed32Fixed32: Dictionary<UInt32,UInt32> = [:]
    var _mapFixed64Fixed64: Dictionary<UInt64,UInt64> = [:]
    var _mapSfixed32Sfixed32: Dictionary<Int32,Int32> = [:]
    var _mapSfixed64Sfixed64: Dictionary<Int64,Int64> = [:]
    var _mapInt32Float: Dictionary<Int32,Float> = [:]
    var _mapInt32Double: Dictionary<Int32,Double> = [:]
    var _mapBoolBool: Dictionary<Bool,Bool> = [:]
    var _mapStringString: Dictionary<String,String> = [:]
    var _mapInt32Bytes: Dictionary<Int32,Data> = [:]
    var _mapInt32Enum: Dictionary<Int32,ProtobufUnittest_MapEnumLite> = [:]
    var _mapInt32ForeignMessage: Dictionary<Int32,ProtobufUnittest_ForeignMessageLite> = [:]
    var _teboring: Dictionary<Int32,Int32> = [:]

    init() {}

    func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufInt32,ProtobufInt32>.self, value: &_mapInt32Int32)
      case 2: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufInt64,ProtobufInt64>.self, value: &_mapInt64Int64)
      case 3: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufUInt32,ProtobufUInt32>.self, value: &_mapUint32Uint32)
      case 4: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufUInt64,ProtobufUInt64>.self, value: &_mapUint64Uint64)
      case 5: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufSInt32,ProtobufSInt32>.self, value: &_mapSint32Sint32)
      case 6: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufSInt64,ProtobufSInt64>.self, value: &_mapSint64Sint64)
      case 7: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufFixed32,ProtobufFixed32>.self, value: &_mapFixed32Fixed32)
      case 8: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufFixed64,ProtobufFixed64>.self, value: &_mapFixed64Fixed64)
      case 9: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufSFixed32,ProtobufSFixed32>.self, value: &_mapSfixed32Sfixed32)
      case 10: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufSFixed64,ProtobufSFixed64>.self, value: &_mapSfixed64Sfixed64)
      case 11: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufInt32,ProtobufFloat>.self, value: &_mapInt32Float)
      case 12: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufInt32,ProtobufDouble>.self, value: &_mapInt32Double)
      case 13: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufBool,ProtobufBool>.self, value: &_mapBoolBool)
      case 14: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufString,ProtobufString>.self, value: &_mapStringString)
      case 15: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufInt32,ProtobufBytes>.self, value: &_mapInt32Bytes)
      case 16: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufInt32,ProtobufUnittest_MapEnumLite>.self, value: &_mapInt32Enum)
      case 17: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufInt32,ProtobufUnittest_ForeignMessageLite>.self, value: &_mapInt32ForeignMessage)
      case 18: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufInt32,ProtobufInt32>.self, value: &_teboring)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    func traverse(visitor: inout ProtobufVisitor) throws {
      if !_mapInt32Int32.isEmpty {
        try visitor.visitMapField(fieldType: ProtobufMap<ProtobufInt32,ProtobufInt32>.self, value: _mapInt32Int32, protoFieldNumber: 1, protoFieldName: "map_int32_int32", jsonFieldName: "mapInt32Int32", swiftFieldName: "mapInt32Int32")
      }
      if !_mapInt64Int64.isEmpty {
        try visitor.visitMapField(fieldType: ProtobufMap<ProtobufInt64,ProtobufInt64>.self, value: _mapInt64Int64, protoFieldNumber: 2, protoFieldName: "map_int64_int64", jsonFieldName: "mapInt64Int64", swiftFieldName: "mapInt64Int64")
      }
      if !_mapUint32Uint32.isEmpty {
        try visitor.visitMapField(fieldType: ProtobufMap<ProtobufUInt32,ProtobufUInt32>.self, value: _mapUint32Uint32, protoFieldNumber: 3, protoFieldName: "map_uint32_uint32", jsonFieldName: "mapUint32Uint32", swiftFieldName: "mapUint32Uint32")
      }
      if !_mapUint64Uint64.isEmpty {
        try visitor.visitMapField(fieldType: ProtobufMap<ProtobufUInt64,ProtobufUInt64>.self, value: _mapUint64Uint64, protoFieldNumber: 4, protoFieldName: "map_uint64_uint64", jsonFieldName: "mapUint64Uint64", swiftFieldName: "mapUint64Uint64")
      }
      if !_mapSint32Sint32.isEmpty {
        try visitor.visitMapField(fieldType: ProtobufMap<ProtobufSInt32,ProtobufSInt32>.self, value: _mapSint32Sint32, protoFieldNumber: 5, protoFieldName: "map_sint32_sint32", jsonFieldName: "mapSint32Sint32", swiftFieldName: "mapSint32Sint32")
      }
      if !_mapSint64Sint64.isEmpty {
        try visitor.visitMapField(fieldType: ProtobufMap<ProtobufSInt64,ProtobufSInt64>.self, value: _mapSint64Sint64, protoFieldNumber: 6, protoFieldName: "map_sint64_sint64", jsonFieldName: "mapSint64Sint64", swiftFieldName: "mapSint64Sint64")
      }
      if !_mapFixed32Fixed32.isEmpty {
        try visitor.visitMapField(fieldType: ProtobufMap<ProtobufFixed32,ProtobufFixed32>.self, value: _mapFixed32Fixed32, protoFieldNumber: 7, protoFieldName: "map_fixed32_fixed32", jsonFieldName: "mapFixed32Fixed32", swiftFieldName: "mapFixed32Fixed32")
      }
      if !_mapFixed64Fixed64.isEmpty {
        try visitor.visitMapField(fieldType: ProtobufMap<ProtobufFixed64,ProtobufFixed64>.self, value: _mapFixed64Fixed64, protoFieldNumber: 8, protoFieldName: "map_fixed64_fixed64", jsonFieldName: "mapFixed64Fixed64", swiftFieldName: "mapFixed64Fixed64")
      }
      if !_mapSfixed32Sfixed32.isEmpty {
        try visitor.visitMapField(fieldType: ProtobufMap<ProtobufSFixed32,ProtobufSFixed32>.self, value: _mapSfixed32Sfixed32, protoFieldNumber: 9, protoFieldName: "map_sfixed32_sfixed32", jsonFieldName: "mapSfixed32Sfixed32", swiftFieldName: "mapSfixed32Sfixed32")
      }
      if !_mapSfixed64Sfixed64.isEmpty {
        try visitor.visitMapField(fieldType: ProtobufMap<ProtobufSFixed64,ProtobufSFixed64>.self, value: _mapSfixed64Sfixed64, protoFieldNumber: 10, protoFieldName: "map_sfixed64_sfixed64", jsonFieldName: "mapSfixed64Sfixed64", swiftFieldName: "mapSfixed64Sfixed64")
      }
      if !_mapInt32Float.isEmpty {
        try visitor.visitMapField(fieldType: ProtobufMap<ProtobufInt32,ProtobufFloat>.self, value: _mapInt32Float, protoFieldNumber: 11, protoFieldName: "map_int32_float", jsonFieldName: "mapInt32Float", swiftFieldName: "mapInt32Float")
      }
      if !_mapInt32Double.isEmpty {
        try visitor.visitMapField(fieldType: ProtobufMap<ProtobufInt32,ProtobufDouble>.self, value: _mapInt32Double, protoFieldNumber: 12, protoFieldName: "map_int32_double", jsonFieldName: "mapInt32Double", swiftFieldName: "mapInt32Double")
      }
      if !_mapBoolBool.isEmpty {
        try visitor.visitMapField(fieldType: ProtobufMap<ProtobufBool,ProtobufBool>.self, value: _mapBoolBool, protoFieldNumber: 13, protoFieldName: "map_bool_bool", jsonFieldName: "mapBoolBool", swiftFieldName: "mapBoolBool")
      }
      if !_mapStringString.isEmpty {
        try visitor.visitMapField(fieldType: ProtobufMap<ProtobufString,ProtobufString>.self, value: _mapStringString, protoFieldNumber: 14, protoFieldName: "map_string_string", jsonFieldName: "mapStringString", swiftFieldName: "mapStringString")
      }
      if !_mapInt32Bytes.isEmpty {
        try visitor.visitMapField(fieldType: ProtobufMap<ProtobufInt32,ProtobufBytes>.self, value: _mapInt32Bytes, protoFieldNumber: 15, protoFieldName: "map_int32_bytes", jsonFieldName: "mapInt32Bytes", swiftFieldName: "mapInt32Bytes")
      }
      if !_mapInt32Enum.isEmpty {
        try visitor.visitMapField(fieldType: ProtobufMap<ProtobufInt32,ProtobufUnittest_MapEnumLite>.self, value: _mapInt32Enum, protoFieldNumber: 16, protoFieldName: "map_int32_enum", jsonFieldName: "mapInt32Enum", swiftFieldName: "mapInt32Enum")
      }
      if !_mapInt32ForeignMessage.isEmpty {
        try visitor.visitMapField(fieldType: ProtobufMap<ProtobufInt32,ProtobufUnittest_ForeignMessageLite>.self, value: _mapInt32ForeignMessage, protoFieldNumber: 17, protoFieldName: "map_int32_foreign_message", jsonFieldName: "mapInt32ForeignMessage", swiftFieldName: "mapInt32ForeignMessage")
      }
      if !_teboring.isEmpty {
        try visitor.visitMapField(fieldType: ProtobufMap<ProtobufInt32,ProtobufInt32>.self, value: _teboring, protoFieldNumber: 18, protoFieldName: "teboring", jsonFieldName: "teboring", swiftFieldName: "teboring")
      }
      unknown.traverse(visitor: &visitor)
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _mapInt32Int32 != other._mapInt32Int32 {return false}
      if _mapInt64Int64 != other._mapInt64Int64 {return false}
      if _mapUint32Uint32 != other._mapUint32Uint32 {return false}
      if _mapUint64Uint64 != other._mapUint64Uint64 {return false}
      if _mapSint32Sint32 != other._mapSint32Sint32 {return false}
      if _mapSint64Sint64 != other._mapSint64Sint64 {return false}
      if _mapFixed32Fixed32 != other._mapFixed32Fixed32 {return false}
      if _mapFixed64Fixed64 != other._mapFixed64Fixed64 {return false}
      if _mapSfixed32Sfixed32 != other._mapSfixed32Sfixed32 {return false}
      if _mapSfixed64Sfixed64 != other._mapSfixed64Sfixed64 {return false}
      if _mapInt32Float != other._mapInt32Float {return false}
      if _mapInt32Double != other._mapInt32Double {return false}
      if _mapBoolBool != other._mapBoolBool {return false}
      if _mapStringString != other._mapStringString {return false}
      if _mapInt32Bytes != other._mapInt32Bytes {return false}
      if _mapInt32Enum != other._mapInt32Enum {return false}
      if _mapInt32ForeignMessage != other._mapInt32ForeignMessage {return false}
      if _teboring != other._teboring {return false}
      if unknown != other.unknown {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone.unknown = unknown
      clone._mapInt32Int32 = _mapInt32Int32
      clone._mapInt64Int64 = _mapInt64Int64
      clone._mapUint32Uint32 = _mapUint32Uint32
      clone._mapUint64Uint64 = _mapUint64Uint64
      clone._mapSint32Sint32 = _mapSint32Sint32
      clone._mapSint64Sint64 = _mapSint64Sint64
      clone._mapFixed32Fixed32 = _mapFixed32Fixed32
      clone._mapFixed64Fixed64 = _mapFixed64Fixed64
      clone._mapSfixed32Sfixed32 = _mapSfixed32Sfixed32
      clone._mapSfixed64Sfixed64 = _mapSfixed64Sfixed64
      clone._mapInt32Float = _mapInt32Float
      clone._mapInt32Double = _mapInt32Double
      clone._mapBoolBool = _mapBoolBool
      clone._mapStringString = _mapStringString
      clone._mapInt32Bytes = _mapInt32Bytes
      clone._mapInt32Enum = _mapInt32Enum
      clone._mapInt32ForeignMessage = _mapInt32ForeignMessage
      clone._teboring = _teboring
      return clone
    }
  }

  private var _storage = _StorageClass()

  public var mapInt32Int32: Dictionary<Int32,Int32> {
    get {return _storage._mapInt32Int32}
    set {_uniqueStorage()._mapInt32Int32 = newValue}
  }

  public var mapInt64Int64: Dictionary<Int64,Int64> {
    get {return _storage._mapInt64Int64}
    set {_uniqueStorage()._mapInt64Int64 = newValue}
  }

  public var mapUint32Uint32: Dictionary<UInt32,UInt32> {
    get {return _storage._mapUint32Uint32}
    set {_uniqueStorage()._mapUint32Uint32 = newValue}
  }

  public var mapUint64Uint64: Dictionary<UInt64,UInt64> {
    get {return _storage._mapUint64Uint64}
    set {_uniqueStorage()._mapUint64Uint64 = newValue}
  }

  public var mapSint32Sint32: Dictionary<Int32,Int32> {
    get {return _storage._mapSint32Sint32}
    set {_uniqueStorage()._mapSint32Sint32 = newValue}
  }

  public var mapSint64Sint64: Dictionary<Int64,Int64> {
    get {return _storage._mapSint64Sint64}
    set {_uniqueStorage()._mapSint64Sint64 = newValue}
  }

  public var mapFixed32Fixed32: Dictionary<UInt32,UInt32> {
    get {return _storage._mapFixed32Fixed32}
    set {_uniqueStorage()._mapFixed32Fixed32 = newValue}
  }

  public var mapFixed64Fixed64: Dictionary<UInt64,UInt64> {
    get {return _storage._mapFixed64Fixed64}
    set {_uniqueStorage()._mapFixed64Fixed64 = newValue}
  }

  public var mapSfixed32Sfixed32: Dictionary<Int32,Int32> {
    get {return _storage._mapSfixed32Sfixed32}
    set {_uniqueStorage()._mapSfixed32Sfixed32 = newValue}
  }

  public var mapSfixed64Sfixed64: Dictionary<Int64,Int64> {
    get {return _storage._mapSfixed64Sfixed64}
    set {_uniqueStorage()._mapSfixed64Sfixed64 = newValue}
  }

  public var mapInt32Float: Dictionary<Int32,Float> {
    get {return _storage._mapInt32Float}
    set {_uniqueStorage()._mapInt32Float = newValue}
  }

  public var mapInt32Double: Dictionary<Int32,Double> {
    get {return _storage._mapInt32Double}
    set {_uniqueStorage()._mapInt32Double = newValue}
  }

  public var mapBoolBool: Dictionary<Bool,Bool> {
    get {return _storage._mapBoolBool}
    set {_uniqueStorage()._mapBoolBool = newValue}
  }

  public var mapStringString: Dictionary<String,String> {
    get {return _storage._mapStringString}
    set {_uniqueStorage()._mapStringString = newValue}
  }

  public var mapInt32Bytes: Dictionary<Int32,Data> {
    get {return _storage._mapInt32Bytes}
    set {_uniqueStorage()._mapInt32Bytes = newValue}
  }

  public var mapInt32Enum: Dictionary<Int32,ProtobufUnittest_MapEnumLite> {
    get {return _storage._mapInt32Enum}
    set {_uniqueStorage()._mapInt32Enum = newValue}
  }

  public var mapInt32ForeignMessage: Dictionary<Int32,ProtobufUnittest_ForeignMessageLite> {
    get {return _storage._mapInt32ForeignMessage}
    set {_uniqueStorage()._mapInt32ForeignMessage = newValue}
  }

  public var teboring: Dictionary<Int32,Int32> {
    get {return _storage._teboring}
    set {_uniqueStorage()._teboring = newValue}
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestMapLite) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

public struct ProtobufUnittest_TestArenaMapLite: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "ProtobufUnittest_TestArenaMapLite"}
  public var protoMessageName: String {return "TestArenaMapLite"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [
    "mapInt32Int32": 1,
    "mapInt64Int64": 2,
    "mapUint32Uint32": 3,
    "mapUint64Uint64": 4,
    "mapSint32Sint32": 5,
    "mapSint64Sint64": 6,
    "mapFixed32Fixed32": 7,
    "mapFixed64Fixed64": 8,
    "mapSfixed32Sfixed32": 9,
    "mapSfixed64Sfixed64": 10,
    "mapInt32Float": 11,
    "mapInt32Double": 12,
    "mapBoolBool": 13,
    "mapStringString": 14,
    "mapInt32Bytes": 15,
    "mapInt32Enum": 16,
    "mapInt32ForeignMessage": 17,
    "mapInt32ForeignMessageNoArena": 18,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "map_int32_int32": 1,
    "map_int64_int64": 2,
    "map_uint32_uint32": 3,
    "map_uint64_uint64": 4,
    "map_sint32_sint32": 5,
    "map_sint64_sint64": 6,
    "map_fixed32_fixed32": 7,
    "map_fixed64_fixed64": 8,
    "map_sfixed32_sfixed32": 9,
    "map_sfixed64_sfixed64": 10,
    "map_int32_float": 11,
    "map_int32_double": 12,
    "map_bool_bool": 13,
    "map_string_string": 14,
    "map_int32_bytes": 15,
    "map_int32_enum": 16,
    "map_int32_foreign_message": 17,
    "map_int32_foreign_message_no_arena": 18,
  ]}

  private class _StorageClass {
    typealias ProtobufExtendedMessage = ProtobufUnittest_TestArenaMapLite
    var unknown = ProtobufUnknownStorage()
    var _mapInt32Int32: Dictionary<Int32,Int32> = [:]
    var _mapInt64Int64: Dictionary<Int64,Int64> = [:]
    var _mapUint32Uint32: Dictionary<UInt32,UInt32> = [:]
    var _mapUint64Uint64: Dictionary<UInt64,UInt64> = [:]
    var _mapSint32Sint32: Dictionary<Int32,Int32> = [:]
    var _mapSint64Sint64: Dictionary<Int64,Int64> = [:]
    var _mapFixed32Fixed32: Dictionary<UInt32,UInt32> = [:]
    var _mapFixed64Fixed64: Dictionary<UInt64,UInt64> = [:]
    var _mapSfixed32Sfixed32: Dictionary<Int32,Int32> = [:]
    var _mapSfixed64Sfixed64: Dictionary<Int64,Int64> = [:]
    var _mapInt32Float: Dictionary<Int32,Float> = [:]
    var _mapInt32Double: Dictionary<Int32,Double> = [:]
    var _mapBoolBool: Dictionary<Bool,Bool> = [:]
    var _mapStringString: Dictionary<String,String> = [:]
    var _mapInt32Bytes: Dictionary<Int32,Data> = [:]
    var _mapInt32Enum: Dictionary<Int32,ProtobufUnittest_MapEnumLite> = [:]
    var _mapInt32ForeignMessage: Dictionary<Int32,ProtobufUnittest_ForeignMessageArenaLite> = [:]
    var _mapInt32ForeignMessageNoArena: Dictionary<Int32,ProtobufUnittestNoArena_ForeignMessageLite> = [:]

    init() {}

    func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufInt32,ProtobufInt32>.self, value: &_mapInt32Int32)
      case 2: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufInt64,ProtobufInt64>.self, value: &_mapInt64Int64)
      case 3: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufUInt32,ProtobufUInt32>.self, value: &_mapUint32Uint32)
      case 4: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufUInt64,ProtobufUInt64>.self, value: &_mapUint64Uint64)
      case 5: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufSInt32,ProtobufSInt32>.self, value: &_mapSint32Sint32)
      case 6: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufSInt64,ProtobufSInt64>.self, value: &_mapSint64Sint64)
      case 7: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufFixed32,ProtobufFixed32>.self, value: &_mapFixed32Fixed32)
      case 8: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufFixed64,ProtobufFixed64>.self, value: &_mapFixed64Fixed64)
      case 9: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufSFixed32,ProtobufSFixed32>.self, value: &_mapSfixed32Sfixed32)
      case 10: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufSFixed64,ProtobufSFixed64>.self, value: &_mapSfixed64Sfixed64)
      case 11: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufInt32,ProtobufFloat>.self, value: &_mapInt32Float)
      case 12: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufInt32,ProtobufDouble>.self, value: &_mapInt32Double)
      case 13: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufBool,ProtobufBool>.self, value: &_mapBoolBool)
      case 14: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufString,ProtobufString>.self, value: &_mapStringString)
      case 15: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufInt32,ProtobufBytes>.self, value: &_mapInt32Bytes)
      case 16: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufInt32,ProtobufUnittest_MapEnumLite>.self, value: &_mapInt32Enum)
      case 17: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufInt32,ProtobufUnittest_ForeignMessageArenaLite>.self, value: &_mapInt32ForeignMessage)
      case 18: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufInt32,ProtobufUnittestNoArena_ForeignMessageLite>.self, value: &_mapInt32ForeignMessageNoArena)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    func traverse(visitor: inout ProtobufVisitor) throws {
      if !_mapInt32Int32.isEmpty {
        try visitor.visitMapField(fieldType: ProtobufMap<ProtobufInt32,ProtobufInt32>.self, value: _mapInt32Int32, protoFieldNumber: 1, protoFieldName: "map_int32_int32", jsonFieldName: "mapInt32Int32", swiftFieldName: "mapInt32Int32")
      }
      if !_mapInt64Int64.isEmpty {
        try visitor.visitMapField(fieldType: ProtobufMap<ProtobufInt64,ProtobufInt64>.self, value: _mapInt64Int64, protoFieldNumber: 2, protoFieldName: "map_int64_int64", jsonFieldName: "mapInt64Int64", swiftFieldName: "mapInt64Int64")
      }
      if !_mapUint32Uint32.isEmpty {
        try visitor.visitMapField(fieldType: ProtobufMap<ProtobufUInt32,ProtobufUInt32>.self, value: _mapUint32Uint32, protoFieldNumber: 3, protoFieldName: "map_uint32_uint32", jsonFieldName: "mapUint32Uint32", swiftFieldName: "mapUint32Uint32")
      }
      if !_mapUint64Uint64.isEmpty {
        try visitor.visitMapField(fieldType: ProtobufMap<ProtobufUInt64,ProtobufUInt64>.self, value: _mapUint64Uint64, protoFieldNumber: 4, protoFieldName: "map_uint64_uint64", jsonFieldName: "mapUint64Uint64", swiftFieldName: "mapUint64Uint64")
      }
      if !_mapSint32Sint32.isEmpty {
        try visitor.visitMapField(fieldType: ProtobufMap<ProtobufSInt32,ProtobufSInt32>.self, value: _mapSint32Sint32, protoFieldNumber: 5, protoFieldName: "map_sint32_sint32", jsonFieldName: "mapSint32Sint32", swiftFieldName: "mapSint32Sint32")
      }
      if !_mapSint64Sint64.isEmpty {
        try visitor.visitMapField(fieldType: ProtobufMap<ProtobufSInt64,ProtobufSInt64>.self, value: _mapSint64Sint64, protoFieldNumber: 6, protoFieldName: "map_sint64_sint64", jsonFieldName: "mapSint64Sint64", swiftFieldName: "mapSint64Sint64")
      }
      if !_mapFixed32Fixed32.isEmpty {
        try visitor.visitMapField(fieldType: ProtobufMap<ProtobufFixed32,ProtobufFixed32>.self, value: _mapFixed32Fixed32, protoFieldNumber: 7, protoFieldName: "map_fixed32_fixed32", jsonFieldName: "mapFixed32Fixed32", swiftFieldName: "mapFixed32Fixed32")
      }
      if !_mapFixed64Fixed64.isEmpty {
        try visitor.visitMapField(fieldType: ProtobufMap<ProtobufFixed64,ProtobufFixed64>.self, value: _mapFixed64Fixed64, protoFieldNumber: 8, protoFieldName: "map_fixed64_fixed64", jsonFieldName: "mapFixed64Fixed64", swiftFieldName: "mapFixed64Fixed64")
      }
      if !_mapSfixed32Sfixed32.isEmpty {
        try visitor.visitMapField(fieldType: ProtobufMap<ProtobufSFixed32,ProtobufSFixed32>.self, value: _mapSfixed32Sfixed32, protoFieldNumber: 9, protoFieldName: "map_sfixed32_sfixed32", jsonFieldName: "mapSfixed32Sfixed32", swiftFieldName: "mapSfixed32Sfixed32")
      }
      if !_mapSfixed64Sfixed64.isEmpty {
        try visitor.visitMapField(fieldType: ProtobufMap<ProtobufSFixed64,ProtobufSFixed64>.self, value: _mapSfixed64Sfixed64, protoFieldNumber: 10, protoFieldName: "map_sfixed64_sfixed64", jsonFieldName: "mapSfixed64Sfixed64", swiftFieldName: "mapSfixed64Sfixed64")
      }
      if !_mapInt32Float.isEmpty {
        try visitor.visitMapField(fieldType: ProtobufMap<ProtobufInt32,ProtobufFloat>.self, value: _mapInt32Float, protoFieldNumber: 11, protoFieldName: "map_int32_float", jsonFieldName: "mapInt32Float", swiftFieldName: "mapInt32Float")
      }
      if !_mapInt32Double.isEmpty {
        try visitor.visitMapField(fieldType: ProtobufMap<ProtobufInt32,ProtobufDouble>.self, value: _mapInt32Double, protoFieldNumber: 12, protoFieldName: "map_int32_double", jsonFieldName: "mapInt32Double", swiftFieldName: "mapInt32Double")
      }
      if !_mapBoolBool.isEmpty {
        try visitor.visitMapField(fieldType: ProtobufMap<ProtobufBool,ProtobufBool>.self, value: _mapBoolBool, protoFieldNumber: 13, protoFieldName: "map_bool_bool", jsonFieldName: "mapBoolBool", swiftFieldName: "mapBoolBool")
      }
      if !_mapStringString.isEmpty {
        try visitor.visitMapField(fieldType: ProtobufMap<ProtobufString,ProtobufString>.self, value: _mapStringString, protoFieldNumber: 14, protoFieldName: "map_string_string", jsonFieldName: "mapStringString", swiftFieldName: "mapStringString")
      }
      if !_mapInt32Bytes.isEmpty {
        try visitor.visitMapField(fieldType: ProtobufMap<ProtobufInt32,ProtobufBytes>.self, value: _mapInt32Bytes, protoFieldNumber: 15, protoFieldName: "map_int32_bytes", jsonFieldName: "mapInt32Bytes", swiftFieldName: "mapInt32Bytes")
      }
      if !_mapInt32Enum.isEmpty {
        try visitor.visitMapField(fieldType: ProtobufMap<ProtobufInt32,ProtobufUnittest_MapEnumLite>.self, value: _mapInt32Enum, protoFieldNumber: 16, protoFieldName: "map_int32_enum", jsonFieldName: "mapInt32Enum", swiftFieldName: "mapInt32Enum")
      }
      if !_mapInt32ForeignMessage.isEmpty {
        try visitor.visitMapField(fieldType: ProtobufMap<ProtobufInt32,ProtobufUnittest_ForeignMessageArenaLite>.self, value: _mapInt32ForeignMessage, protoFieldNumber: 17, protoFieldName: "map_int32_foreign_message", jsonFieldName: "mapInt32ForeignMessage", swiftFieldName: "mapInt32ForeignMessage")
      }
      if !_mapInt32ForeignMessageNoArena.isEmpty {
        try visitor.visitMapField(fieldType: ProtobufMap<ProtobufInt32,ProtobufUnittestNoArena_ForeignMessageLite>.self, value: _mapInt32ForeignMessageNoArena, protoFieldNumber: 18, protoFieldName: "map_int32_foreign_message_no_arena", jsonFieldName: "mapInt32ForeignMessageNoArena", swiftFieldName: "mapInt32ForeignMessageNoArena")
      }
      unknown.traverse(visitor: &visitor)
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _mapInt32Int32 != other._mapInt32Int32 {return false}
      if _mapInt64Int64 != other._mapInt64Int64 {return false}
      if _mapUint32Uint32 != other._mapUint32Uint32 {return false}
      if _mapUint64Uint64 != other._mapUint64Uint64 {return false}
      if _mapSint32Sint32 != other._mapSint32Sint32 {return false}
      if _mapSint64Sint64 != other._mapSint64Sint64 {return false}
      if _mapFixed32Fixed32 != other._mapFixed32Fixed32 {return false}
      if _mapFixed64Fixed64 != other._mapFixed64Fixed64 {return false}
      if _mapSfixed32Sfixed32 != other._mapSfixed32Sfixed32 {return false}
      if _mapSfixed64Sfixed64 != other._mapSfixed64Sfixed64 {return false}
      if _mapInt32Float != other._mapInt32Float {return false}
      if _mapInt32Double != other._mapInt32Double {return false}
      if _mapBoolBool != other._mapBoolBool {return false}
      if _mapStringString != other._mapStringString {return false}
      if _mapInt32Bytes != other._mapInt32Bytes {return false}
      if _mapInt32Enum != other._mapInt32Enum {return false}
      if _mapInt32ForeignMessage != other._mapInt32ForeignMessage {return false}
      if _mapInt32ForeignMessageNoArena != other._mapInt32ForeignMessageNoArena {return false}
      if unknown != other.unknown {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone.unknown = unknown
      clone._mapInt32Int32 = _mapInt32Int32
      clone._mapInt64Int64 = _mapInt64Int64
      clone._mapUint32Uint32 = _mapUint32Uint32
      clone._mapUint64Uint64 = _mapUint64Uint64
      clone._mapSint32Sint32 = _mapSint32Sint32
      clone._mapSint64Sint64 = _mapSint64Sint64
      clone._mapFixed32Fixed32 = _mapFixed32Fixed32
      clone._mapFixed64Fixed64 = _mapFixed64Fixed64
      clone._mapSfixed32Sfixed32 = _mapSfixed32Sfixed32
      clone._mapSfixed64Sfixed64 = _mapSfixed64Sfixed64
      clone._mapInt32Float = _mapInt32Float
      clone._mapInt32Double = _mapInt32Double
      clone._mapBoolBool = _mapBoolBool
      clone._mapStringString = _mapStringString
      clone._mapInt32Bytes = _mapInt32Bytes
      clone._mapInt32Enum = _mapInt32Enum
      clone._mapInt32ForeignMessage = _mapInt32ForeignMessage
      clone._mapInt32ForeignMessageNoArena = _mapInt32ForeignMessageNoArena
      return clone
    }
  }

  private var _storage = _StorageClass()

  public var mapInt32Int32: Dictionary<Int32,Int32> {
    get {return _storage._mapInt32Int32}
    set {_uniqueStorage()._mapInt32Int32 = newValue}
  }

  public var mapInt64Int64: Dictionary<Int64,Int64> {
    get {return _storage._mapInt64Int64}
    set {_uniqueStorage()._mapInt64Int64 = newValue}
  }

  public var mapUint32Uint32: Dictionary<UInt32,UInt32> {
    get {return _storage._mapUint32Uint32}
    set {_uniqueStorage()._mapUint32Uint32 = newValue}
  }

  public var mapUint64Uint64: Dictionary<UInt64,UInt64> {
    get {return _storage._mapUint64Uint64}
    set {_uniqueStorage()._mapUint64Uint64 = newValue}
  }

  public var mapSint32Sint32: Dictionary<Int32,Int32> {
    get {return _storage._mapSint32Sint32}
    set {_uniqueStorage()._mapSint32Sint32 = newValue}
  }

  public var mapSint64Sint64: Dictionary<Int64,Int64> {
    get {return _storage._mapSint64Sint64}
    set {_uniqueStorage()._mapSint64Sint64 = newValue}
  }

  public var mapFixed32Fixed32: Dictionary<UInt32,UInt32> {
    get {return _storage._mapFixed32Fixed32}
    set {_uniqueStorage()._mapFixed32Fixed32 = newValue}
  }

  public var mapFixed64Fixed64: Dictionary<UInt64,UInt64> {
    get {return _storage._mapFixed64Fixed64}
    set {_uniqueStorage()._mapFixed64Fixed64 = newValue}
  }

  public var mapSfixed32Sfixed32: Dictionary<Int32,Int32> {
    get {return _storage._mapSfixed32Sfixed32}
    set {_uniqueStorage()._mapSfixed32Sfixed32 = newValue}
  }

  public var mapSfixed64Sfixed64: Dictionary<Int64,Int64> {
    get {return _storage._mapSfixed64Sfixed64}
    set {_uniqueStorage()._mapSfixed64Sfixed64 = newValue}
  }

  public var mapInt32Float: Dictionary<Int32,Float> {
    get {return _storage._mapInt32Float}
    set {_uniqueStorage()._mapInt32Float = newValue}
  }

  public var mapInt32Double: Dictionary<Int32,Double> {
    get {return _storage._mapInt32Double}
    set {_uniqueStorage()._mapInt32Double = newValue}
  }

  public var mapBoolBool: Dictionary<Bool,Bool> {
    get {return _storage._mapBoolBool}
    set {_uniqueStorage()._mapBoolBool = newValue}
  }

  public var mapStringString: Dictionary<String,String> {
    get {return _storage._mapStringString}
    set {_uniqueStorage()._mapStringString = newValue}
  }

  public var mapInt32Bytes: Dictionary<Int32,Data> {
    get {return _storage._mapInt32Bytes}
    set {_uniqueStorage()._mapInt32Bytes = newValue}
  }

  public var mapInt32Enum: Dictionary<Int32,ProtobufUnittest_MapEnumLite> {
    get {return _storage._mapInt32Enum}
    set {_uniqueStorage()._mapInt32Enum = newValue}
  }

  public var mapInt32ForeignMessage: Dictionary<Int32,ProtobufUnittest_ForeignMessageArenaLite> {
    get {return _storage._mapInt32ForeignMessage}
    set {_uniqueStorage()._mapInt32ForeignMessage = newValue}
  }

  public var mapInt32ForeignMessageNoArena: Dictionary<Int32,ProtobufUnittestNoArena_ForeignMessageLite> {
    get {return _storage._mapInt32ForeignMessageNoArena}
    set {_uniqueStorage()._mapInt32ForeignMessageNoArena = newValue}
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestArenaMapLite) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

///   Test embedded message with required fields
public struct ProtobufUnittest_TestRequiredMessageMapLite: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "ProtobufUnittest_TestRequiredMessageMapLite"}
  public var protoMessageName: String {return "TestRequiredMessageMapLite"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [
    "mapField": 1,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "map_field": 1,
  ]}

  var unknown = ProtobufUnknownStorage()

  public var mapField: Dictionary<Int32,ProtobufUnittest_TestRequiredLite> = [:]

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufInt32,ProtobufUnittest_TestRequiredLite>.self, value: &mapField)
    default:
      handled = false
    }
    if handled {
        return true
    } else {
        return try unknown.decodeField(setter: &setter)
    }
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    if !mapField.isEmpty {
      try visitor.visitMapField(fieldType: ProtobufMap<ProtobufInt32,ProtobufUnittest_TestRequiredLite>.self, value: mapField, protoFieldNumber: 1, protoFieldName: "map_field", jsonFieldName: "mapField", swiftFieldName: "mapField")
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestRequiredMessageMapLite) -> Bool {
    if mapField != other.mapField {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

public struct ProtobufUnittest_TestEnumMapLite: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "ProtobufUnittest_TestEnumMapLite"}
  public var protoMessageName: String {return "TestEnumMapLite"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [
    "knownMapField": 101,
    "unknownMapField": 102,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "known_map_field": 101,
    "unknown_map_field": 102,
  ]}

  var unknown = ProtobufUnknownStorage()

  public var knownMapField: Dictionary<Int32,ProtobufUnittest_Proto2MapEnumLite> = [:]

  public var unknownMapField: Dictionary<Int32,ProtobufUnittest_Proto2MapEnumLite> = [:]

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 101: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufInt32,ProtobufUnittest_Proto2MapEnumLite>.self, value: &knownMapField)
    case 102: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufInt32,ProtobufUnittest_Proto2MapEnumLite>.self, value: &unknownMapField)
    default:
      handled = false
    }
    if handled {
        return true
    } else {
        return try unknown.decodeField(setter: &setter)
    }
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    if !knownMapField.isEmpty {
      try visitor.visitMapField(fieldType: ProtobufMap<ProtobufInt32,ProtobufUnittest_Proto2MapEnumLite>.self, value: knownMapField, protoFieldNumber: 101, protoFieldName: "known_map_field", jsonFieldName: "knownMapField", swiftFieldName: "knownMapField")
    }
    if !unknownMapField.isEmpty {
      try visitor.visitMapField(fieldType: ProtobufMap<ProtobufInt32,ProtobufUnittest_Proto2MapEnumLite>.self, value: unknownMapField, protoFieldNumber: 102, protoFieldName: "unknown_map_field", jsonFieldName: "unknownMapField", swiftFieldName: "unknownMapField")
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestEnumMapLite) -> Bool {
    if knownMapField != other.knownMapField {return false}
    if unknownMapField != other.unknownMapField {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

public struct ProtobufUnittest_TestEnumMapPlusExtraLite: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "ProtobufUnittest_TestEnumMapPlusExtraLite"}
  public var protoMessageName: String {return "TestEnumMapPlusExtraLite"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [
    "knownMapField": 101,
    "unknownMapField": 102,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "known_map_field": 101,
    "unknown_map_field": 102,
  ]}

  var unknown = ProtobufUnknownStorage()

  public var knownMapField: Dictionary<Int32,ProtobufUnittest_Proto2MapEnumPlusExtraLite> = [:]

  public var unknownMapField: Dictionary<Int32,ProtobufUnittest_Proto2MapEnumPlusExtraLite> = [:]

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 101: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufInt32,ProtobufUnittest_Proto2MapEnumPlusExtraLite>.self, value: &knownMapField)
    case 102: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufInt32,ProtobufUnittest_Proto2MapEnumPlusExtraLite>.self, value: &unknownMapField)
    default:
      handled = false
    }
    if handled {
        return true
    } else {
        return try unknown.decodeField(setter: &setter)
    }
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    if !knownMapField.isEmpty {
      try visitor.visitMapField(fieldType: ProtobufMap<ProtobufInt32,ProtobufUnittest_Proto2MapEnumPlusExtraLite>.self, value: knownMapField, protoFieldNumber: 101, protoFieldName: "known_map_field", jsonFieldName: "knownMapField", swiftFieldName: "knownMapField")
    }
    if !unknownMapField.isEmpty {
      try visitor.visitMapField(fieldType: ProtobufMap<ProtobufInt32,ProtobufUnittest_Proto2MapEnumPlusExtraLite>.self, value: unknownMapField, protoFieldNumber: 102, protoFieldName: "unknown_map_field", jsonFieldName: "unknownMapField", swiftFieldName: "unknownMapField")
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestEnumMapPlusExtraLite) -> Bool {
    if knownMapField != other.knownMapField {return false}
    if unknownMapField != other.unknownMapField {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

public struct ProtobufUnittest_TestMessageMapLite: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "ProtobufUnittest_TestMessageMapLite"}
  public var protoMessageName: String {return "TestMessageMapLite"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [
    "mapInt32Message": 1,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "map_int32_message": 1,
  ]}

  var unknown = ProtobufUnknownStorage()

  public var mapInt32Message: Dictionary<Int32,ProtobufUnittest_TestAllTypesLite> = [:]

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufInt32,ProtobufUnittest_TestAllTypesLite>.self, value: &mapInt32Message)
    default:
      handled = false
    }
    if handled {
        return true
    } else {
        return try unknown.decodeField(setter: &setter)
    }
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    if !mapInt32Message.isEmpty {
      try visitor.visitMapField(fieldType: ProtobufMap<ProtobufInt32,ProtobufUnittest_TestAllTypesLite>.self, value: mapInt32Message, protoFieldNumber: 1, protoFieldName: "map_int32_message", jsonFieldName: "mapInt32Message", swiftFieldName: "mapInt32Message")
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestMessageMapLite) -> Bool {
    if mapInt32Message != other.mapInt32Message {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

public struct ProtobufUnittest_TestRequiredLite: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "ProtobufUnittest_TestRequiredLite"}
  public var protoMessageName: String {return "TestRequiredLite"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [
    "a": 1,
    "b": 2,
    "c": 3,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "a": 1,
    "b": 2,
    "c": 3,
  ]}

  var unknown = ProtobufUnknownStorage()

  private var _a: Int32? = nil
  public var a: Int32 {
    get {return _a ?? 0}
    set {_a = newValue}
  }
  public var hasA: Bool {
    return _a != nil
  }
  public mutating func clearA() {
    return _a = nil
  }

  private var _b: Int32? = nil
  public var b: Int32 {
    get {return _b ?? 0}
    set {_b = newValue}
  }
  public var hasB: Bool {
    return _b != nil
  }
  public mutating func clearB() {
    return _b = nil
  }

  private var _c: Int32? = nil
  public var c: Int32 {
    get {return _c ?? 0}
    set {_c = newValue}
  }
  public var hasC: Bool {
    return _c != nil
  }
  public mutating func clearC() {
    return _c = nil
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_a)
    case 2: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_b)
    case 3: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_c)
    default:
      handled = false
    }
    if handled {
        return true
    } else {
        return try unknown.decodeField(setter: &setter)
    }
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _a ?? 0, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
    try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _b ?? 0, protoFieldNumber: 2, protoFieldName: "b", jsonFieldName: "b", swiftFieldName: "b")
    try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _c ?? 0, protoFieldNumber: 3, protoFieldName: "c", jsonFieldName: "c", swiftFieldName: "c")
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestRequiredLite) -> Bool {
    if (a != other.a) {return false}
    if (b != other.b) {return false}
    if (c != other.c) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

public struct ProtobufUnittest_ForeignMessageArenaLite: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "ProtobufUnittest_ForeignMessageArenaLite"}
  public var protoMessageName: String {return "ForeignMessageArenaLite"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [
    "c": 1,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "c": 1,
  ]}

  var unknown = ProtobufUnknownStorage()

  private var _c: Int32? = nil
  public var c: Int32 {
    get {return _c ?? 0}
    set {_c = newValue}
  }
  public var hasC: Bool {
    return _c != nil
  }
  public mutating func clearC() {
    return _c = nil
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_c)
    default:
      handled = false
    }
    if handled {
        return true
    } else {
        return try unknown.decodeField(setter: &setter)
    }
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    if let v = _c {
      try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: v, protoFieldNumber: 1, protoFieldName: "c", jsonFieldName: "c", swiftFieldName: "c")
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_ForeignMessageArenaLite) -> Bool {
    if (c != other.c) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}
