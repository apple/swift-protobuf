/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: google/protobuf/map_unittest_proto3.proto
 *
 */

//  Protocol Buffers - Google's data interchange format
//  Copyright 2008 Google Inc.  All rights reserved.
//  https://developers.google.com/protocol-buffers/
// 
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are
//  met:
// 
//      * Redistributions of source code must retain the above copyright
//  notice, this list of conditions and the following disclaimer.
//      * Redistributions in binary form must reproduce the above
//  copyright notice, this list of conditions and the following disclaimer
//  in the documentation and/or other materials provided with the
//  distribution.
//      * Neither the name of Google Inc. nor the names of its
//  contributors may be used to endorse or promote products derived from
//  this software without specific prior written permission.
// 
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
//  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
//  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
//  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
//  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
//  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
//  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

///   This file is mostly equivalent to map_unittest.proto, but imports
///   unittest_proto3.proto instead of unittest.proto, so that it only
///   uses proto3 messages. This makes it suitable for testing
///   implementations which only support proto3.
///   The TestRequiredMessageMap message has been removed as there are no
///   required fields in proto3.

import Foundation
import SwiftProtobuf


public enum Proto3MapEnum: ProtobufEnum {
  public typealias RawValue = Int
  case foo // = 0
  case bar // = 1
  case baz // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .foo
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .foo
    case 1: self = .bar
    case 2: self = .baz
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public init?(name: String) {
    switch name {
    case "foo": self = .foo
    case "bar": self = .bar
    case "baz": self = .baz
    default: return nil
    }
  }

  public init?(jsonName: String) {
    switch jsonName {
    case "MAP_ENUM_FOO": self = .foo
    case "MAP_ENUM_BAR": self = .bar
    case "MAP_ENUM_BAZ": self = .baz
    default: return nil
    }
  }

  public init?(protoName: String) {
    switch protoName {
    case "MAP_ENUM_FOO": self = .foo
    case "MAP_ENUM_BAR": self = .bar
    case "MAP_ENUM_BAZ": self = .baz
    default: return nil
    }
  }

  public var rawValue: Int {
    get {
      switch self {
      case .foo: return 0
      case .bar: return 1
      case .baz: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }
  }

  public var json: String {
    get {
      switch self {
      case .foo: return "\"MAP_ENUM_FOO\""
      case .bar: return "\"MAP_ENUM_BAR\""
      case .baz: return "\"MAP_ENUM_BAZ\""
      case .UNRECOGNIZED(let i): return String(i)
      }
    }
  }

  public var hashValue: Int { return rawValue }

  public var debugDescription: String {
    get {
      switch self {
      case .foo: return ".foo"
      case .bar: return ".bar"
      case .baz: return ".baz"
      case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
      }
    }
  }

}

///   Tests maps.
public struct Proto3TestMap: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Proto3TestMap"}
  public var protoMessageName: String {return "TestMap"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [
    "mapInt32Int32": 1,
    "mapInt64Int64": 2,
    "mapUint32Uint32": 3,
    "mapUint64Uint64": 4,
    "mapSint32Sint32": 5,
    "mapSint64Sint64": 6,
    "mapFixed32Fixed32": 7,
    "mapFixed64Fixed64": 8,
    "mapSfixed32Sfixed32": 9,
    "mapSfixed64Sfixed64": 10,
    "mapInt32Float": 11,
    "mapInt32Double": 12,
    "mapBoolBool": 13,
    "mapStringString": 14,
    "mapInt32Bytes": 15,
    "mapInt32Enum": 16,
    "mapInt32ForeignMessage": 17,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "map_int32_int32": 1,
    "map_int64_int64": 2,
    "map_uint32_uint32": 3,
    "map_uint64_uint64": 4,
    "map_sint32_sint32": 5,
    "map_sint64_sint64": 6,
    "map_fixed32_fixed32": 7,
    "map_fixed64_fixed64": 8,
    "map_sfixed32_sfixed32": 9,
    "map_sfixed64_sfixed64": 10,
    "map_int32_float": 11,
    "map_int32_double": 12,
    "map_bool_bool": 13,
    "map_string_string": 14,
    "map_int32_bytes": 15,
    "map_int32_enum": 16,
    "map_int32_foreign_message": 17,
  ]}

  private class _StorageClass {
    typealias ProtobufExtendedMessage = Proto3TestMap
    var _mapInt32Int32: Dictionary<Int32,Int32> = [:]
    var _mapInt64Int64: Dictionary<Int64,Int64> = [:]
    var _mapUint32Uint32: Dictionary<UInt32,UInt32> = [:]
    var _mapUint64Uint64: Dictionary<UInt64,UInt64> = [:]
    var _mapSint32Sint32: Dictionary<Int32,Int32> = [:]
    var _mapSint64Sint64: Dictionary<Int64,Int64> = [:]
    var _mapFixed32Fixed32: Dictionary<UInt32,UInt32> = [:]
    var _mapFixed64Fixed64: Dictionary<UInt64,UInt64> = [:]
    var _mapSfixed32Sfixed32: Dictionary<Int32,Int32> = [:]
    var _mapSfixed64Sfixed64: Dictionary<Int64,Int64> = [:]
    var _mapInt32Float: Dictionary<Int32,Float> = [:]
    var _mapInt32Double: Dictionary<Int32,Double> = [:]
    var _mapBoolBool: Dictionary<Bool,Bool> = [:]
    var _mapStringString: Dictionary<String,String> = [:]
    var _mapInt32Bytes: Dictionary<Int32,Data> = [:]
    var _mapInt32Enum: Dictionary<Int32,Proto3MapEnum> = [:]
    var _mapInt32ForeignMessage: Dictionary<Int32,Proto3ForeignMessage> = [:]

    init() {}

    func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufInt32,ProtobufInt32>.self, value: &_mapInt32Int32)
      case 2: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufInt64,ProtobufInt64>.self, value: &_mapInt64Int64)
      case 3: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufUInt32,ProtobufUInt32>.self, value: &_mapUint32Uint32)
      case 4: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufUInt64,ProtobufUInt64>.self, value: &_mapUint64Uint64)
      case 5: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufSInt32,ProtobufSInt32>.self, value: &_mapSint32Sint32)
      case 6: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufSInt64,ProtobufSInt64>.self, value: &_mapSint64Sint64)
      case 7: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufFixed32,ProtobufFixed32>.self, value: &_mapFixed32Fixed32)
      case 8: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufFixed64,ProtobufFixed64>.self, value: &_mapFixed64Fixed64)
      case 9: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufSFixed32,ProtobufSFixed32>.self, value: &_mapSfixed32Sfixed32)
      case 10: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufSFixed64,ProtobufSFixed64>.self, value: &_mapSfixed64Sfixed64)
      case 11: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufInt32,ProtobufFloat>.self, value: &_mapInt32Float)
      case 12: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufInt32,ProtobufDouble>.self, value: &_mapInt32Double)
      case 13: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufBool,ProtobufBool>.self, value: &_mapBoolBool)
      case 14: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufString,ProtobufString>.self, value: &_mapStringString)
      case 15: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufInt32,ProtobufBytes>.self, value: &_mapInt32Bytes)
      case 16: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufInt32,Proto3MapEnum>.self, value: &_mapInt32Enum)
      case 17: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufInt32,Proto3ForeignMessage>.self, value: &_mapInt32ForeignMessage)
      default:
        handled = false
      }
      return handled
    }

    func traverse(visitor: inout ProtobufVisitor) throws {
      if !_mapInt32Int32.isEmpty {
        try visitor.visitMapField(fieldType: ProtobufMap<ProtobufInt32,ProtobufInt32>.self, value: _mapInt32Int32, protoFieldNumber: 1, protoFieldName: "map_int32_int32", jsonFieldName: "mapInt32Int32", swiftFieldName: "mapInt32Int32")
      }
      if !_mapInt64Int64.isEmpty {
        try visitor.visitMapField(fieldType: ProtobufMap<ProtobufInt64,ProtobufInt64>.self, value: _mapInt64Int64, protoFieldNumber: 2, protoFieldName: "map_int64_int64", jsonFieldName: "mapInt64Int64", swiftFieldName: "mapInt64Int64")
      }
      if !_mapUint32Uint32.isEmpty {
        try visitor.visitMapField(fieldType: ProtobufMap<ProtobufUInt32,ProtobufUInt32>.self, value: _mapUint32Uint32, protoFieldNumber: 3, protoFieldName: "map_uint32_uint32", jsonFieldName: "mapUint32Uint32", swiftFieldName: "mapUint32Uint32")
      }
      if !_mapUint64Uint64.isEmpty {
        try visitor.visitMapField(fieldType: ProtobufMap<ProtobufUInt64,ProtobufUInt64>.self, value: _mapUint64Uint64, protoFieldNumber: 4, protoFieldName: "map_uint64_uint64", jsonFieldName: "mapUint64Uint64", swiftFieldName: "mapUint64Uint64")
      }
      if !_mapSint32Sint32.isEmpty {
        try visitor.visitMapField(fieldType: ProtobufMap<ProtobufSInt32,ProtobufSInt32>.self, value: _mapSint32Sint32, protoFieldNumber: 5, protoFieldName: "map_sint32_sint32", jsonFieldName: "mapSint32Sint32", swiftFieldName: "mapSint32Sint32")
      }
      if !_mapSint64Sint64.isEmpty {
        try visitor.visitMapField(fieldType: ProtobufMap<ProtobufSInt64,ProtobufSInt64>.self, value: _mapSint64Sint64, protoFieldNumber: 6, protoFieldName: "map_sint64_sint64", jsonFieldName: "mapSint64Sint64", swiftFieldName: "mapSint64Sint64")
      }
      if !_mapFixed32Fixed32.isEmpty {
        try visitor.visitMapField(fieldType: ProtobufMap<ProtobufFixed32,ProtobufFixed32>.self, value: _mapFixed32Fixed32, protoFieldNumber: 7, protoFieldName: "map_fixed32_fixed32", jsonFieldName: "mapFixed32Fixed32", swiftFieldName: "mapFixed32Fixed32")
      }
      if !_mapFixed64Fixed64.isEmpty {
        try visitor.visitMapField(fieldType: ProtobufMap<ProtobufFixed64,ProtobufFixed64>.self, value: _mapFixed64Fixed64, protoFieldNumber: 8, protoFieldName: "map_fixed64_fixed64", jsonFieldName: "mapFixed64Fixed64", swiftFieldName: "mapFixed64Fixed64")
      }
      if !_mapSfixed32Sfixed32.isEmpty {
        try visitor.visitMapField(fieldType: ProtobufMap<ProtobufSFixed32,ProtobufSFixed32>.self, value: _mapSfixed32Sfixed32, protoFieldNumber: 9, protoFieldName: "map_sfixed32_sfixed32", jsonFieldName: "mapSfixed32Sfixed32", swiftFieldName: "mapSfixed32Sfixed32")
      }
      if !_mapSfixed64Sfixed64.isEmpty {
        try visitor.visitMapField(fieldType: ProtobufMap<ProtobufSFixed64,ProtobufSFixed64>.self, value: _mapSfixed64Sfixed64, protoFieldNumber: 10, protoFieldName: "map_sfixed64_sfixed64", jsonFieldName: "mapSfixed64Sfixed64", swiftFieldName: "mapSfixed64Sfixed64")
      }
      if !_mapInt32Float.isEmpty {
        try visitor.visitMapField(fieldType: ProtobufMap<ProtobufInt32,ProtobufFloat>.self, value: _mapInt32Float, protoFieldNumber: 11, protoFieldName: "map_int32_float", jsonFieldName: "mapInt32Float", swiftFieldName: "mapInt32Float")
      }
      if !_mapInt32Double.isEmpty {
        try visitor.visitMapField(fieldType: ProtobufMap<ProtobufInt32,ProtobufDouble>.self, value: _mapInt32Double, protoFieldNumber: 12, protoFieldName: "map_int32_double", jsonFieldName: "mapInt32Double", swiftFieldName: "mapInt32Double")
      }
      if !_mapBoolBool.isEmpty {
        try visitor.visitMapField(fieldType: ProtobufMap<ProtobufBool,ProtobufBool>.self, value: _mapBoolBool, protoFieldNumber: 13, protoFieldName: "map_bool_bool", jsonFieldName: "mapBoolBool", swiftFieldName: "mapBoolBool")
      }
      if !_mapStringString.isEmpty {
        try visitor.visitMapField(fieldType: ProtobufMap<ProtobufString,ProtobufString>.self, value: _mapStringString, protoFieldNumber: 14, protoFieldName: "map_string_string", jsonFieldName: "mapStringString", swiftFieldName: "mapStringString")
      }
      if !_mapInt32Bytes.isEmpty {
        try visitor.visitMapField(fieldType: ProtobufMap<ProtobufInt32,ProtobufBytes>.self, value: _mapInt32Bytes, protoFieldNumber: 15, protoFieldName: "map_int32_bytes", jsonFieldName: "mapInt32Bytes", swiftFieldName: "mapInt32Bytes")
      }
      if !_mapInt32Enum.isEmpty {
        try visitor.visitMapField(fieldType: ProtobufMap<ProtobufInt32,Proto3MapEnum>.self, value: _mapInt32Enum, protoFieldNumber: 16, protoFieldName: "map_int32_enum", jsonFieldName: "mapInt32Enum", swiftFieldName: "mapInt32Enum")
      }
      if !_mapInt32ForeignMessage.isEmpty {
        try visitor.visitMapField(fieldType: ProtobufMap<ProtobufInt32,Proto3ForeignMessage>.self, value: _mapInt32ForeignMessage, protoFieldNumber: 17, protoFieldName: "map_int32_foreign_message", jsonFieldName: "mapInt32ForeignMessage", swiftFieldName: "mapInt32ForeignMessage")
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _mapInt32Int32 != other._mapInt32Int32 {return false}
      if _mapInt64Int64 != other._mapInt64Int64 {return false}
      if _mapUint32Uint32 != other._mapUint32Uint32 {return false}
      if _mapUint64Uint64 != other._mapUint64Uint64 {return false}
      if _mapSint32Sint32 != other._mapSint32Sint32 {return false}
      if _mapSint64Sint64 != other._mapSint64Sint64 {return false}
      if _mapFixed32Fixed32 != other._mapFixed32Fixed32 {return false}
      if _mapFixed64Fixed64 != other._mapFixed64Fixed64 {return false}
      if _mapSfixed32Sfixed32 != other._mapSfixed32Sfixed32 {return false}
      if _mapSfixed64Sfixed64 != other._mapSfixed64Sfixed64 {return false}
      if _mapInt32Float != other._mapInt32Float {return false}
      if _mapInt32Double != other._mapInt32Double {return false}
      if _mapBoolBool != other._mapBoolBool {return false}
      if _mapStringString != other._mapStringString {return false}
      if _mapInt32Bytes != other._mapInt32Bytes {return false}
      if _mapInt32Enum != other._mapInt32Enum {return false}
      if _mapInt32ForeignMessage != other._mapInt32ForeignMessage {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._mapInt32Int32 = _mapInt32Int32
      clone._mapInt64Int64 = _mapInt64Int64
      clone._mapUint32Uint32 = _mapUint32Uint32
      clone._mapUint64Uint64 = _mapUint64Uint64
      clone._mapSint32Sint32 = _mapSint32Sint32
      clone._mapSint64Sint64 = _mapSint64Sint64
      clone._mapFixed32Fixed32 = _mapFixed32Fixed32
      clone._mapFixed64Fixed64 = _mapFixed64Fixed64
      clone._mapSfixed32Sfixed32 = _mapSfixed32Sfixed32
      clone._mapSfixed64Sfixed64 = _mapSfixed64Sfixed64
      clone._mapInt32Float = _mapInt32Float
      clone._mapInt32Double = _mapInt32Double
      clone._mapBoolBool = _mapBoolBool
      clone._mapStringString = _mapStringString
      clone._mapInt32Bytes = _mapInt32Bytes
      clone._mapInt32Enum = _mapInt32Enum
      clone._mapInt32ForeignMessage = _mapInt32ForeignMessage
      return clone
    }
  }

  private var _storage = _StorageClass()

  public var mapInt32Int32: Dictionary<Int32,Int32> {
    get {return _storage._mapInt32Int32}
    set {_uniqueStorage()._mapInt32Int32 = newValue}
  }

  public var mapInt64Int64: Dictionary<Int64,Int64> {
    get {return _storage._mapInt64Int64}
    set {_uniqueStorage()._mapInt64Int64 = newValue}
  }

  public var mapUint32Uint32: Dictionary<UInt32,UInt32> {
    get {return _storage._mapUint32Uint32}
    set {_uniqueStorage()._mapUint32Uint32 = newValue}
  }

  public var mapUint64Uint64: Dictionary<UInt64,UInt64> {
    get {return _storage._mapUint64Uint64}
    set {_uniqueStorage()._mapUint64Uint64 = newValue}
  }

  public var mapSint32Sint32: Dictionary<Int32,Int32> {
    get {return _storage._mapSint32Sint32}
    set {_uniqueStorage()._mapSint32Sint32 = newValue}
  }

  public var mapSint64Sint64: Dictionary<Int64,Int64> {
    get {return _storage._mapSint64Sint64}
    set {_uniqueStorage()._mapSint64Sint64 = newValue}
  }

  public var mapFixed32Fixed32: Dictionary<UInt32,UInt32> {
    get {return _storage._mapFixed32Fixed32}
    set {_uniqueStorage()._mapFixed32Fixed32 = newValue}
  }

  public var mapFixed64Fixed64: Dictionary<UInt64,UInt64> {
    get {return _storage._mapFixed64Fixed64}
    set {_uniqueStorage()._mapFixed64Fixed64 = newValue}
  }

  public var mapSfixed32Sfixed32: Dictionary<Int32,Int32> {
    get {return _storage._mapSfixed32Sfixed32}
    set {_uniqueStorage()._mapSfixed32Sfixed32 = newValue}
  }

  public var mapSfixed64Sfixed64: Dictionary<Int64,Int64> {
    get {return _storage._mapSfixed64Sfixed64}
    set {_uniqueStorage()._mapSfixed64Sfixed64 = newValue}
  }

  public var mapInt32Float: Dictionary<Int32,Float> {
    get {return _storage._mapInt32Float}
    set {_uniqueStorage()._mapInt32Float = newValue}
  }

  public var mapInt32Double: Dictionary<Int32,Double> {
    get {return _storage._mapInt32Double}
    set {_uniqueStorage()._mapInt32Double = newValue}
  }

  public var mapBoolBool: Dictionary<Bool,Bool> {
    get {return _storage._mapBoolBool}
    set {_uniqueStorage()._mapBoolBool = newValue}
  }

  public var mapStringString: Dictionary<String,String> {
    get {return _storage._mapStringString}
    set {_uniqueStorage()._mapStringString = newValue}
  }

  public var mapInt32Bytes: Dictionary<Int32,Data> {
    get {return _storage._mapInt32Bytes}
    set {_uniqueStorage()._mapInt32Bytes = newValue}
  }

  public var mapInt32Enum: Dictionary<Int32,Proto3MapEnum> {
    get {return _storage._mapInt32Enum}
    set {_uniqueStorage()._mapInt32Enum = newValue}
  }

  public var mapInt32ForeignMessage: Dictionary<Int32,Proto3ForeignMessage> {
    get {return _storage._mapInt32ForeignMessage}
    set {_uniqueStorage()._mapInt32ForeignMessage = newValue}
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Proto3TestMap) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

public struct Proto3TestMapSubmessage: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Proto3TestMapSubmessage"}
  public var protoMessageName: String {return "TestMapSubmessage"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [
    "testMap": 1,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "test_map": 1,
  ]}

  private class _StorageClass {
    typealias ProtobufExtendedMessage = Proto3TestMapSubmessage
    var _testMap: Proto3TestMap? = nil

    init() {}

    func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularMessageField(fieldType: Proto3TestMap.self, value: &_testMap)
      default:
        handled = false
      }
      return handled
    }

    func traverse(visitor: inout ProtobufVisitor) throws {
      if let v = _testMap {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 1, protoFieldName: "test_map", jsonFieldName: "testMap", swiftFieldName: "testMap")
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _testMap != other._testMap {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._testMap = _testMap
      return clone
    }
  }

  private var _storage = _StorageClass()

  public var testMap: Proto3TestMap {
    get {return _storage._testMap ?? Proto3TestMap()}
    set {_uniqueStorage()._testMap = newValue}
  }
  public var hasTestMap: Bool {
    return _storage._testMap != nil
  }
  public mutating func clearTestMap() {
    return _storage._testMap = nil
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Proto3TestMapSubmessage) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

public struct Proto3TestMessageMap: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Proto3TestMessageMap"}
  public var protoMessageName: String {return "TestMessageMap"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [
    "mapInt32Message": 1,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "map_int32_message": 1,
  ]}

  public var mapInt32Message: Dictionary<Int32,Proto3TestAllTypes> = [:]

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufInt32,Proto3TestAllTypes>.self, value: &mapInt32Message)
    default:
      handled = false
    }
    return handled
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    if !mapInt32Message.isEmpty {
      try visitor.visitMapField(fieldType: ProtobufMap<ProtobufInt32,Proto3TestAllTypes>.self, value: mapInt32Message, protoFieldNumber: 1, protoFieldName: "map_int32_message", jsonFieldName: "mapInt32Message", swiftFieldName: "mapInt32Message")
    }
  }

  public func _protoc_generated_isEqualTo(other: Proto3TestMessageMap) -> Bool {
    if mapInt32Message != other.mapInt32Message {return false}
    return true
  }
}

///   Two map fields share the same entry default instance.
public struct Proto3TestSameTypeMap: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Proto3TestSameTypeMap"}
  public var protoMessageName: String {return "TestSameTypeMap"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [
    "map1": 1,
    "map2": 2,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "map1": 1,
    "map2": 2,
  ]}

  public var map1: Dictionary<Int32,Int32> = [:]

  public var map2: Dictionary<Int32,Int32> = [:]

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufInt32,ProtobufInt32>.self, value: &map1)
    case 2: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufInt32,ProtobufInt32>.self, value: &map2)
    default:
      handled = false
    }
    return handled
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    if !map1.isEmpty {
      try visitor.visitMapField(fieldType: ProtobufMap<ProtobufInt32,ProtobufInt32>.self, value: map1, protoFieldNumber: 1, protoFieldName: "map1", jsonFieldName: "map1", swiftFieldName: "map1")
    }
    if !map2.isEmpty {
      try visitor.visitMapField(fieldType: ProtobufMap<ProtobufInt32,ProtobufInt32>.self, value: map2, protoFieldNumber: 2, protoFieldName: "map2", jsonFieldName: "map2", swiftFieldName: "map2")
    }
  }

  public func _protoc_generated_isEqualTo(other: Proto3TestSameTypeMap) -> Bool {
    if map1 != other.map1 {return false}
    if map2 != other.map2 {return false}
    return true
  }
}

public struct Proto3TestArenaMap: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Proto3TestArenaMap"}
  public var protoMessageName: String {return "TestArenaMap"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [
    "mapInt32Int32": 1,
    "mapInt64Int64": 2,
    "mapUint32Uint32": 3,
    "mapUint64Uint64": 4,
    "mapSint32Sint32": 5,
    "mapSint64Sint64": 6,
    "mapFixed32Fixed32": 7,
    "mapFixed64Fixed64": 8,
    "mapSfixed32Sfixed32": 9,
    "mapSfixed64Sfixed64": 10,
    "mapInt32Float": 11,
    "mapInt32Double": 12,
    "mapBoolBool": 13,
    "mapInt32Enum": 14,
    "mapInt32ForeignMessage": 15,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "map_int32_int32": 1,
    "map_int64_int64": 2,
    "map_uint32_uint32": 3,
    "map_uint64_uint64": 4,
    "map_sint32_sint32": 5,
    "map_sint64_sint64": 6,
    "map_fixed32_fixed32": 7,
    "map_fixed64_fixed64": 8,
    "map_sfixed32_sfixed32": 9,
    "map_sfixed64_sfixed64": 10,
    "map_int32_float": 11,
    "map_int32_double": 12,
    "map_bool_bool": 13,
    "map_int32_enum": 14,
    "map_int32_foreign_message": 15,
  ]}

  public var mapInt32Int32: Dictionary<Int32,Int32> = [:]

  public var mapInt64Int64: Dictionary<Int64,Int64> = [:]

  public var mapUint32Uint32: Dictionary<UInt32,UInt32> = [:]

  public var mapUint64Uint64: Dictionary<UInt64,UInt64> = [:]

  public var mapSint32Sint32: Dictionary<Int32,Int32> = [:]

  public var mapSint64Sint64: Dictionary<Int64,Int64> = [:]

  public var mapFixed32Fixed32: Dictionary<UInt32,UInt32> = [:]

  public var mapFixed64Fixed64: Dictionary<UInt64,UInt64> = [:]

  public var mapSfixed32Sfixed32: Dictionary<Int32,Int32> = [:]

  public var mapSfixed64Sfixed64: Dictionary<Int64,Int64> = [:]

  public var mapInt32Float: Dictionary<Int32,Float> = [:]

  public var mapInt32Double: Dictionary<Int32,Double> = [:]

  public var mapBoolBool: Dictionary<Bool,Bool> = [:]

  public var mapInt32Enum: Dictionary<Int32,Proto3MapEnum> = [:]

  public var mapInt32ForeignMessage: Dictionary<Int32,Proto3ForeignMessage> = [:]

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufInt32,ProtobufInt32>.self, value: &mapInt32Int32)
    case 2: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufInt64,ProtobufInt64>.self, value: &mapInt64Int64)
    case 3: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufUInt32,ProtobufUInt32>.self, value: &mapUint32Uint32)
    case 4: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufUInt64,ProtobufUInt64>.self, value: &mapUint64Uint64)
    case 5: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufSInt32,ProtobufSInt32>.self, value: &mapSint32Sint32)
    case 6: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufSInt64,ProtobufSInt64>.self, value: &mapSint64Sint64)
    case 7: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufFixed32,ProtobufFixed32>.self, value: &mapFixed32Fixed32)
    case 8: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufFixed64,ProtobufFixed64>.self, value: &mapFixed64Fixed64)
    case 9: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufSFixed32,ProtobufSFixed32>.self, value: &mapSfixed32Sfixed32)
    case 10: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufSFixed64,ProtobufSFixed64>.self, value: &mapSfixed64Sfixed64)
    case 11: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufInt32,ProtobufFloat>.self, value: &mapInt32Float)
    case 12: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufInt32,ProtobufDouble>.self, value: &mapInt32Double)
    case 13: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufBool,ProtobufBool>.self, value: &mapBoolBool)
    case 14: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufInt32,Proto3MapEnum>.self, value: &mapInt32Enum)
    case 15: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufInt32,Proto3ForeignMessage>.self, value: &mapInt32ForeignMessage)
    default:
      handled = false
    }
    return handled
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    if !mapInt32Int32.isEmpty {
      try visitor.visitMapField(fieldType: ProtobufMap<ProtobufInt32,ProtobufInt32>.self, value: mapInt32Int32, protoFieldNumber: 1, protoFieldName: "map_int32_int32", jsonFieldName: "mapInt32Int32", swiftFieldName: "mapInt32Int32")
    }
    if !mapInt64Int64.isEmpty {
      try visitor.visitMapField(fieldType: ProtobufMap<ProtobufInt64,ProtobufInt64>.self, value: mapInt64Int64, protoFieldNumber: 2, protoFieldName: "map_int64_int64", jsonFieldName: "mapInt64Int64", swiftFieldName: "mapInt64Int64")
    }
    if !mapUint32Uint32.isEmpty {
      try visitor.visitMapField(fieldType: ProtobufMap<ProtobufUInt32,ProtobufUInt32>.self, value: mapUint32Uint32, protoFieldNumber: 3, protoFieldName: "map_uint32_uint32", jsonFieldName: "mapUint32Uint32", swiftFieldName: "mapUint32Uint32")
    }
    if !mapUint64Uint64.isEmpty {
      try visitor.visitMapField(fieldType: ProtobufMap<ProtobufUInt64,ProtobufUInt64>.self, value: mapUint64Uint64, protoFieldNumber: 4, protoFieldName: "map_uint64_uint64", jsonFieldName: "mapUint64Uint64", swiftFieldName: "mapUint64Uint64")
    }
    if !mapSint32Sint32.isEmpty {
      try visitor.visitMapField(fieldType: ProtobufMap<ProtobufSInt32,ProtobufSInt32>.self, value: mapSint32Sint32, protoFieldNumber: 5, protoFieldName: "map_sint32_sint32", jsonFieldName: "mapSint32Sint32", swiftFieldName: "mapSint32Sint32")
    }
    if !mapSint64Sint64.isEmpty {
      try visitor.visitMapField(fieldType: ProtobufMap<ProtobufSInt64,ProtobufSInt64>.self, value: mapSint64Sint64, protoFieldNumber: 6, protoFieldName: "map_sint64_sint64", jsonFieldName: "mapSint64Sint64", swiftFieldName: "mapSint64Sint64")
    }
    if !mapFixed32Fixed32.isEmpty {
      try visitor.visitMapField(fieldType: ProtobufMap<ProtobufFixed32,ProtobufFixed32>.self, value: mapFixed32Fixed32, protoFieldNumber: 7, protoFieldName: "map_fixed32_fixed32", jsonFieldName: "mapFixed32Fixed32", swiftFieldName: "mapFixed32Fixed32")
    }
    if !mapFixed64Fixed64.isEmpty {
      try visitor.visitMapField(fieldType: ProtobufMap<ProtobufFixed64,ProtobufFixed64>.self, value: mapFixed64Fixed64, protoFieldNumber: 8, protoFieldName: "map_fixed64_fixed64", jsonFieldName: "mapFixed64Fixed64", swiftFieldName: "mapFixed64Fixed64")
    }
    if !mapSfixed32Sfixed32.isEmpty {
      try visitor.visitMapField(fieldType: ProtobufMap<ProtobufSFixed32,ProtobufSFixed32>.self, value: mapSfixed32Sfixed32, protoFieldNumber: 9, protoFieldName: "map_sfixed32_sfixed32", jsonFieldName: "mapSfixed32Sfixed32", swiftFieldName: "mapSfixed32Sfixed32")
    }
    if !mapSfixed64Sfixed64.isEmpty {
      try visitor.visitMapField(fieldType: ProtobufMap<ProtobufSFixed64,ProtobufSFixed64>.self, value: mapSfixed64Sfixed64, protoFieldNumber: 10, protoFieldName: "map_sfixed64_sfixed64", jsonFieldName: "mapSfixed64Sfixed64", swiftFieldName: "mapSfixed64Sfixed64")
    }
    if !mapInt32Float.isEmpty {
      try visitor.visitMapField(fieldType: ProtobufMap<ProtobufInt32,ProtobufFloat>.self, value: mapInt32Float, protoFieldNumber: 11, protoFieldName: "map_int32_float", jsonFieldName: "mapInt32Float", swiftFieldName: "mapInt32Float")
    }
    if !mapInt32Double.isEmpty {
      try visitor.visitMapField(fieldType: ProtobufMap<ProtobufInt32,ProtobufDouble>.self, value: mapInt32Double, protoFieldNumber: 12, protoFieldName: "map_int32_double", jsonFieldName: "mapInt32Double", swiftFieldName: "mapInt32Double")
    }
    if !mapBoolBool.isEmpty {
      try visitor.visitMapField(fieldType: ProtobufMap<ProtobufBool,ProtobufBool>.self, value: mapBoolBool, protoFieldNumber: 13, protoFieldName: "map_bool_bool", jsonFieldName: "mapBoolBool", swiftFieldName: "mapBoolBool")
    }
    if !mapInt32Enum.isEmpty {
      try visitor.visitMapField(fieldType: ProtobufMap<ProtobufInt32,Proto3MapEnum>.self, value: mapInt32Enum, protoFieldNumber: 14, protoFieldName: "map_int32_enum", jsonFieldName: "mapInt32Enum", swiftFieldName: "mapInt32Enum")
    }
    if !mapInt32ForeignMessage.isEmpty {
      try visitor.visitMapField(fieldType: ProtobufMap<ProtobufInt32,Proto3ForeignMessage>.self, value: mapInt32ForeignMessage, protoFieldNumber: 15, protoFieldName: "map_int32_foreign_message", jsonFieldName: "mapInt32ForeignMessage", swiftFieldName: "mapInt32ForeignMessage")
    }
  }

  public func _protoc_generated_isEqualTo(other: Proto3TestArenaMap) -> Bool {
    if mapInt32Int32 != other.mapInt32Int32 {return false}
    if mapInt64Int64 != other.mapInt64Int64 {return false}
    if mapUint32Uint32 != other.mapUint32Uint32 {return false}
    if mapUint64Uint64 != other.mapUint64Uint64 {return false}
    if mapSint32Sint32 != other.mapSint32Sint32 {return false}
    if mapSint64Sint64 != other.mapSint64Sint64 {return false}
    if mapFixed32Fixed32 != other.mapFixed32Fixed32 {return false}
    if mapFixed64Fixed64 != other.mapFixed64Fixed64 {return false}
    if mapSfixed32Sfixed32 != other.mapSfixed32Sfixed32 {return false}
    if mapSfixed64Sfixed64 != other.mapSfixed64Sfixed64 {return false}
    if mapInt32Float != other.mapInt32Float {return false}
    if mapInt32Double != other.mapInt32Double {return false}
    if mapBoolBool != other.mapBoolBool {return false}
    if mapInt32Enum != other.mapInt32Enum {return false}
    if mapInt32ForeignMessage != other.mapInt32ForeignMessage {return false}
    return true
  }
}

///   Previously, message containing enum called Type cannot be used as value of
///   map field.
public struct Proto3MessageContainingEnumCalledType: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Proto3MessageContainingEnumCalledType"}
  public var protoMessageName: String {return "MessageContainingEnumCalledType"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [
    "type": 1,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "type": 1,
  ]}

  public enum TypeEnum: ProtobufEnum {
    public typealias RawValue = Int
    case foo // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .foo
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .foo
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "foo": self = .foo
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "TYPE_FOO": self = .foo
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "TYPE_FOO": self = .foo
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .foo: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .foo: return "\"TYPE_FOO\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .foo: return ".foo"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public var type: Dictionary<Int32,Proto3MessageContainingEnumCalledType> = [:]

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufInt32,Proto3MessageContainingEnumCalledType>.self, value: &type)
    default:
      handled = false
    }
    return handled
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    if !type.isEmpty {
      try visitor.visitMapField(fieldType: ProtobufMap<ProtobufInt32,Proto3MessageContainingEnumCalledType>.self, value: type, protoFieldNumber: 1, protoFieldName: "type", jsonFieldName: "type", swiftFieldName: "type")
    }
  }

  public func _protoc_generated_isEqualTo(other: Proto3MessageContainingEnumCalledType) -> Bool {
    if type != other.type {return false}
    return true
  }
}

///   Previously, message cannot contain map field called "entry".
public struct Proto3MessageContainingMapCalledEntry: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Proto3MessageContainingMapCalledEntry"}
  public var protoMessageName: String {return "MessageContainingMapCalledEntry"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [
    "entry": 1,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "entry": 1,
  ]}

  public var entry: Dictionary<Int32,Int32> = [:]

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufInt32,ProtobufInt32>.self, value: &entry)
    default:
      handled = false
    }
    return handled
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    if !entry.isEmpty {
      try visitor.visitMapField(fieldType: ProtobufMap<ProtobufInt32,ProtobufInt32>.self, value: entry, protoFieldNumber: 1, protoFieldName: "entry", jsonFieldName: "entry", swiftFieldName: "entry")
    }
  }

  public func _protoc_generated_isEqualTo(other: Proto3MessageContainingMapCalledEntry) -> Bool {
    if entry != other.entry {return false}
    return true
  }
}
