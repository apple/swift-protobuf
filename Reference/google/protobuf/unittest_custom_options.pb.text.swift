// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/protobuf/unittest_custom_options.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _3: SwiftProtobuf.ProtobufAPIVersion_3 {}
  typealias Version = _3
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension ProtobufUnittest_MethodOpt1: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "METHODOPT1_VAL1"),
    2: .same(proto: "METHODOPT1_VAL2"),
  ]
}

extension ProtobufUnittest_AggregateEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "VALUE"),
  ]
}

extension ProtobufUnittest_TestMessageWithCustomOptions: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "field1"),
    2: .standard(proto: "oneof_field"),
    3: .standard(proto: "map_field"),
  ]
}

extension ProtobufUnittest_TestMessageWithCustomOptions.AnEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ANENUM_VAL1"),
    2: .same(proto: "ANENUM_VAL2"),
  ]
}

extension ProtobufUnittest_CustomOptionFooRequest: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()
}

extension ProtobufUnittest_CustomOptionFooResponse: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()
}

extension ProtobufUnittest_CustomOptionFooClientMessage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()
}

extension ProtobufUnittest_CustomOptionFooServerMessage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()
}

extension ProtobufUnittest_DummyMessageContainingEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()
}

extension ProtobufUnittest_DummyMessageContainingEnum.TestEnumType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    -23: .same(proto: "TEST_OPTION_ENUM_TYPE2"),
    22: .same(proto: "TEST_OPTION_ENUM_TYPE1"),
  ]
}

extension ProtobufUnittest_DummyMessageInvalidAsOptionType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()
}

extension ProtobufUnittest_CustomOptionMinIntegerValues: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()
}

extension ProtobufUnittest_CustomOptionMaxIntegerValues: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()
}

extension ProtobufUnittest_CustomOptionOtherValues: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()
}

extension ProtobufUnittest_SettingRealsFromPositiveInts: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()
}

extension ProtobufUnittest_SettingRealsFromNegativeInts: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()
}

extension ProtobufUnittest_ComplexOptionType1: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "foo"),
    2: .same(proto: "foo2"),
    3: .same(proto: "foo3"),
    4: .same(proto: "foo4"),
  ]
}

extension ProtobufUnittest_ComplexOptionType2: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bar"),
    2: .same(proto: "baz"),
    3: .same(proto: "fred"),
    4: .same(proto: "barney"),
  ]
}

extension ProtobufUnittest_ComplexOptionType2.ComplexOptionType4: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "waldo"),
  ]
}

extension ProtobufUnittest_ComplexOptionType3: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "moo"),
    2: .unique(proto: "ComplexOptionType5", json: "complexoptiontype5"),
  ]
}

extension ProtobufUnittest_ComplexOptionType3.ComplexOptionType5: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    3: .same(proto: "plugh"),
  ]
}

extension ProtobufUnittest_ComplexOpt6: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    7593951: .same(proto: "xyzzy"),
  ]
}

extension ProtobufUnittest_VariousComplexOptions: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()
}

extension ProtobufUnittest_AggregateMessageSet: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()
}

extension ProtobufUnittest_AggregateMessageSetElement: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "s"),
  ]
}

extension ProtobufUnittest_Aggregate: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "i"),
    2: .same(proto: "s"),
    3: .same(proto: "sub"),
    4: .same(proto: "file"),
    5: .same(proto: "mset"),
    6: .same(proto: "any"),
  ]
}

extension ProtobufUnittest_AggregateMessage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "fieldname"),
  ]
}

extension ProtobufUnittest_NestedOptionType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()
}

extension ProtobufUnittest_NestedOptionType.NestedEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "NESTED_ENUM_VALUE"),
  ]
}

extension ProtobufUnittest_NestedOptionType.NestedMessage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "nested_field"),
  ]
}

extension ProtobufUnittest_OldOptionType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]
}

extension ProtobufUnittest_OldOptionType.TestEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OLD_VALUE"),
  ]
}

extension ProtobufUnittest_NewOptionType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]
}

extension ProtobufUnittest_NewOptionType.TestEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OLD_VALUE"),
    1: .same(proto: "NEW_VALUE"),
  ]
}

extension ProtobufUnittest_TestMessageWithRequiredEnumOption: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()
}
