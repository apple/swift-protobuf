// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/protobuf/test_messages_proto2.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _3: SwiftProtobuf.ProtobufAPIVersion_3 {}
  typealias Version = _3
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension ProtobufTestMessages_Proto2_ForeignEnumProto2: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "FOREIGN_FOO"),
    1: .same(proto: "FOREIGN_BAR"),
    2: .same(proto: "FOREIGN_BAZ"),
  ]
}

extension ProtobufTestMessages_Proto2_TestAllTypesProto2: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "optional_int32"),
    2: .standard(proto: "optional_int64"),
    3: .standard(proto: "optional_uint32"),
    4: .standard(proto: "optional_uint64"),
    5: .standard(proto: "optional_sint32"),
    6: .standard(proto: "optional_sint64"),
    7: .standard(proto: "optional_fixed32"),
    8: .standard(proto: "optional_fixed64"),
    9: .standard(proto: "optional_sfixed32"),
    10: .standard(proto: "optional_sfixed64"),
    11: .standard(proto: "optional_float"),
    12: .standard(proto: "optional_double"),
    13: .standard(proto: "optional_bool"),
    14: .standard(proto: "optional_string"),
    15: .standard(proto: "optional_bytes"),
    18: .standard(proto: "optional_nested_message"),
    19: .standard(proto: "optional_foreign_message"),
    21: .standard(proto: "optional_nested_enum"),
    22: .standard(proto: "optional_foreign_enum"),
    24: .standard(proto: "optional_string_piece"),
    25: .standard(proto: "optional_cord"),
    27: .standard(proto: "recursive_message"),
    31: .standard(proto: "repeated_int32"),
    32: .standard(proto: "repeated_int64"),
    33: .standard(proto: "repeated_uint32"),
    34: .standard(proto: "repeated_uint64"),
    35: .standard(proto: "repeated_sint32"),
    36: .standard(proto: "repeated_sint64"),
    37: .standard(proto: "repeated_fixed32"),
    38: .standard(proto: "repeated_fixed64"),
    39: .standard(proto: "repeated_sfixed32"),
    40: .standard(proto: "repeated_sfixed64"),
    41: .standard(proto: "repeated_float"),
    42: .standard(proto: "repeated_double"),
    43: .standard(proto: "repeated_bool"),
    44: .standard(proto: "repeated_string"),
    45: .standard(proto: "repeated_bytes"),
    48: .standard(proto: "repeated_nested_message"),
    49: .standard(proto: "repeated_foreign_message"),
    51: .standard(proto: "repeated_nested_enum"),
    52: .standard(proto: "repeated_foreign_enum"),
    54: .standard(proto: "repeated_string_piece"),
    55: .standard(proto: "repeated_cord"),
    75: .standard(proto: "packed_int32"),
    76: .standard(proto: "packed_int64"),
    77: .standard(proto: "packed_uint32"),
    78: .standard(proto: "packed_uint64"),
    79: .standard(proto: "packed_sint32"),
    80: .standard(proto: "packed_sint64"),
    81: .standard(proto: "packed_fixed32"),
    82: .standard(proto: "packed_fixed64"),
    83: .standard(proto: "packed_sfixed32"),
    84: .standard(proto: "packed_sfixed64"),
    85: .standard(proto: "packed_float"),
    86: .standard(proto: "packed_double"),
    87: .standard(proto: "packed_bool"),
    88: .standard(proto: "packed_nested_enum"),
    89: .standard(proto: "unpacked_int32"),
    90: .standard(proto: "unpacked_int64"),
    91: .standard(proto: "unpacked_uint32"),
    92: .standard(proto: "unpacked_uint64"),
    93: .standard(proto: "unpacked_sint32"),
    94: .standard(proto: "unpacked_sint64"),
    95: .standard(proto: "unpacked_fixed32"),
    96: .standard(proto: "unpacked_fixed64"),
    97: .standard(proto: "unpacked_sfixed32"),
    98: .standard(proto: "unpacked_sfixed64"),
    99: .standard(proto: "unpacked_float"),
    100: .standard(proto: "unpacked_double"),
    101: .standard(proto: "unpacked_bool"),
    102: .standard(proto: "unpacked_nested_enum"),
    56: .standard(proto: "map_int32_int32"),
    57: .standard(proto: "map_int64_int64"),
    58: .standard(proto: "map_uint32_uint32"),
    59: .standard(proto: "map_uint64_uint64"),
    60: .standard(proto: "map_sint32_sint32"),
    61: .standard(proto: "map_sint64_sint64"),
    62: .standard(proto: "map_fixed32_fixed32"),
    63: .standard(proto: "map_fixed64_fixed64"),
    64: .standard(proto: "map_sfixed32_sfixed32"),
    65: .standard(proto: "map_sfixed64_sfixed64"),
    66: .standard(proto: "map_int32_float"),
    67: .standard(proto: "map_int32_double"),
    68: .standard(proto: "map_bool_bool"),
    69: .standard(proto: "map_string_string"),
    70: .standard(proto: "map_string_bytes"),
    71: .standard(proto: "map_string_nested_message"),
    72: .standard(proto: "map_string_foreign_message"),
    73: .standard(proto: "map_string_nested_enum"),
    74: .standard(proto: "map_string_foreign_enum"),
    111: .standard(proto: "oneof_uint32"),
    112: .standard(proto: "oneof_nested_message"),
    113: .standard(proto: "oneof_string"),
    114: .standard(proto: "oneof_bytes"),
    115: .standard(proto: "oneof_bool"),
    116: .standard(proto: "oneof_uint64"),
    117: .standard(proto: "oneof_float"),
    118: .standard(proto: "oneof_double"),
    119: .standard(proto: "oneof_enum"),
    201: .unique(proto: "Data", json: "data"),
    241: .standard(proto: "default_int32"),
    242: .standard(proto: "default_int64"),
    243: .standard(proto: "default_uint32"),
    244: .standard(proto: "default_uint64"),
    245: .standard(proto: "default_sint32"),
    246: .standard(proto: "default_sint64"),
    247: .standard(proto: "default_fixed32"),
    248: .standard(proto: "default_fixed64"),
    249: .standard(proto: "default_sfixed32"),
    250: .standard(proto: "default_sfixed64"),
    251: .standard(proto: "default_float"),
    252: .standard(proto: "default_double"),
    253: .standard(proto: "default_bool"),
    254: .standard(proto: "default_string"),
    255: .standard(proto: "default_bytes"),
    401: .same(proto: "fieldname1"),
    402: .standard(proto: "field_name2"),
    403: .standard(proto: "_field_name3"),
    404: .standard(proto: "field__name4_"),
    405: .same(proto: "field0name5"),
    406: .standard(proto: "field_0_name6"),
    407: .same(proto: "fieldName7"),
    408: .same(proto: "FieldName8"),
    409: .standard(proto: "field_Name9"),
    410: .standard(proto: "Field_Name10"),
    411: .standard(proto: "FIELD_NAME11"),
    412: .standard(proto: "FIELD_name12"),
    413: .standard(proto: "__field_name13"),
    414: .standard(proto: "__Field_name14"),
    415: .standard(proto: "field__name15"),
    416: .standard(proto: "field__Name16"),
    417: .standard(proto: "field_name17__"),
    418: .standard(proto: "Field_name18__"),
  ]
}

extension ProtobufTestMessages_Proto2_TestAllTypesProto2.NestedEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    -1: .same(proto: "NEG"),
    0: .same(proto: "FOO"),
    1: .same(proto: "BAR"),
    2: .same(proto: "BAZ"),
  ]
}

extension ProtobufTestMessages_Proto2_TestAllTypesProto2.NestedMessage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "a"),
    2: .same(proto: "corecursive"),
  ]
}

extension ProtobufTestMessages_Proto2_TestAllTypesProto2.DataMessage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    202: .standard(proto: "group_int32"),
    203: .standard(proto: "group_uint32"),
  ]
}

extension ProtobufTestMessages_Proto2_TestAllTypesProto2.MessageSetCorrect: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()
}

extension ProtobufTestMessages_Proto2_TestAllTypesProto2.MessageSetCorrectExtension1: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    25: .same(proto: "str"),
  ]
}

extension ProtobufTestMessages_Proto2_TestAllTypesProto2.MessageSetCorrectExtension2: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    9: .same(proto: "i"),
  ]
}

extension ProtobufTestMessages_Proto2_ForeignMessageProto2: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "c"),
  ]
}

extension ProtobufTestMessages_Proto2_UnknownToTestAllTypes: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1001: .standard(proto: "optional_int32"),
    1002: .standard(proto: "optional_string"),
    1003: .standard(proto: "nested_message"),
    1004: .unique(proto: "OptionalGroup", json: "optionalgroup"),
    1006: .standard(proto: "optional_bool"),
    1011: .standard(proto: "repeated_int32"),
  ]
}

extension ProtobufTestMessages_Proto2_UnknownToTestAllTypes.OptionalGroup: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "a"),
  ]
}

extension ProtobufTestMessages_Proto2_NullHypothesisProto2: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()
}

extension ProtobufTestMessages_Proto2_EnumOnlyProto2: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()
}

extension ProtobufTestMessages_Proto2_EnumOnlyProto2.BoolEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "kFalse"),
    1: .same(proto: "kTrue"),
  ]
}

extension ProtobufTestMessages_Proto2_OneStringProto2: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]
}
