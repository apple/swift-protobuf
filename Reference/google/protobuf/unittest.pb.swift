/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: google/protobuf/unittest.proto
 *
 */

//  Protocol Buffers - Google's data interchange format
//  Copyright 2008 Google Inc.  All rights reserved.
//  https://developers.google.com/protocol-buffers/
// 
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are
//  met:
// 
//      * Redistributions of source code must retain the above copyright
//  notice, this list of conditions and the following disclaimer.
//      * Redistributions in binary form must reproduce the above
//  copyright notice, this list of conditions and the following disclaimer
//  in the documentation and/or other materials provided with the
//  distribution.
//      * Neither the name of Google Inc. nor the names of its
//  contributors may be used to endorse or promote products derived from
//  this software without specific prior written permission.
// 
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
//  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
//  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
//  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
//  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
//  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
//  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

//  Author: kenton@google.com (Kenton Varda)
//   Based on original Protocol Buffers design by
//   Sanjay Ghemawat, Jeff Dean, and others.
// 
//  A proto file we will use for unit testing.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _1: SwiftProtobuf.ProtobufAPIVersion_1 {}
  typealias Version = _1
}

enum ProtobufUnittest_ForeignEnum: SwiftProtobuf.Enum, SwiftProtobuf._ProtoNameProviding {
  typealias RawValue = Int
  case foreignFoo // = 4
  case foreignBar // = 5
  case foreignBaz // = 6

  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    4: .same(proto: "FOREIGN_FOO"),
    5: .same(proto: "FOREIGN_BAR"),
    6: .same(proto: "FOREIGN_BAZ"),
  ]

  init() {
    self = .foreignFoo
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 4: self = .foreignFoo
    case 5: self = .foreignBar
    case 6: self = .foreignBaz
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .foreignFoo: return 4
    case .foreignBar: return 5
    case .foreignBaz: return 6
    }
  }

}

///   Test an enum that has multiple values with the same number.
enum ProtobufUnittest_TestEnumWithDupValue: SwiftProtobuf.Enum, SwiftProtobuf._ProtoNameProviding {
  typealias RawValue = Int
  case foo1 // = 1
  case bar1 // = 2
  case baz // = 3
  case foo2 // = 1
  case bar2 // = 2

  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "FOO1"),
    2: .same(proto: "BAR1"),
    3: .same(proto: "BAZ"),
    1: .same(proto: "FOO2"),
    2: .same(proto: "BAR2"),
  ]

  init() {
    self = .foo1
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 1: self = .foo1
    case 2: self = .bar1
    case 3: self = .baz
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .foo1: return 1
    case .bar1: return 2
    case .baz: return 3
    case .foo2: return 1
    case .bar2: return 2
    }
  }

}

///   Test an enum with large, unordered values.
enum ProtobufUnittest_TestSparseEnum: SwiftProtobuf.Enum, SwiftProtobuf._ProtoNameProviding {
  typealias RawValue = Int
  case sparseA // = 123
  case sparseB // = 62374
  case sparseC // = 12589234
  case sparseD // = -15
  case sparseE // = -53452
  case sparseF // = 0
  case sparseG // = 2

  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    123: .same(proto: "SPARSE_A"),
    62374: .same(proto: "SPARSE_B"),
    12589234: .same(proto: "SPARSE_C"),
    -15: .same(proto: "SPARSE_D"),
    -53452: .same(proto: "SPARSE_E"),
    0: .same(proto: "SPARSE_F"),
    2: .same(proto: "SPARSE_G"),
  ]

  init() {
    self = .sparseA
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 123: self = .sparseA
    case 62374: self = .sparseB
    case 12589234: self = .sparseC
    case -15: self = .sparseD
    case -53452: self = .sparseE
    case 0: self = .sparseF
    case 2: self = .sparseG
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .sparseA: return 123
    case .sparseB: return 62374
    case .sparseC: return 12589234
    case .sparseD: return -15
    case .sparseE: return -53452
    case .sparseF: return 0
    case .sparseG: return 2
    }
  }

}

///   This proto includes every type of field in both singular and repeated
///   forms.
struct ProtobufUnittest_TestAllTypes: SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "TestAllTypes"
  static let protoPackageName: String = "protobuf_unittest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .unique(proto: "optional_int32", json: "optionalInt32"),
    2: .unique(proto: "optional_int64", json: "optionalInt64"),
    3: .unique(proto: "optional_uint32", json: "optionalUint32"),
    4: .unique(proto: "optional_uint64", json: "optionalUint64"),
    5: .unique(proto: "optional_sint32", json: "optionalSint32"),
    6: .unique(proto: "optional_sint64", json: "optionalSint64"),
    7: .unique(proto: "optional_fixed32", json: "optionalFixed32"),
    8: .unique(proto: "optional_fixed64", json: "optionalFixed64"),
    9: .unique(proto: "optional_sfixed32", json: "optionalSfixed32"),
    10: .unique(proto: "optional_sfixed64", json: "optionalSfixed64"),
    11: .unique(proto: "optional_float", json: "optionalFloat"),
    12: .unique(proto: "optional_double", json: "optionalDouble"),
    13: .unique(proto: "optional_bool", json: "optionalBool"),
    14: .unique(proto: "optional_string", json: "optionalString"),
    15: .unique(proto: "optional_bytes", json: "optionalBytes"),
    16: .unique(proto: "OptionalGroup", json: "optionalgroup"),
    18: .unique(proto: "optional_nested_message", json: "optionalNestedMessage"),
    19: .unique(proto: "optional_foreign_message", json: "optionalForeignMessage"),
    20: .unique(proto: "optional_import_message", json: "optionalImportMessage"),
    21: .unique(proto: "optional_nested_enum", json: "optionalNestedEnum"),
    22: .unique(proto: "optional_foreign_enum", json: "optionalForeignEnum"),
    23: .unique(proto: "optional_import_enum", json: "optionalImportEnum"),
    24: .unique(proto: "optional_string_piece", json: "optionalStringPiece"),
    25: .unique(proto: "optional_cord", json: "optionalCord"),
    26: .unique(proto: "optional_public_import_message", json: "optionalPublicImportMessage"),
    27: .unique(proto: "optional_lazy_message", json: "optionalLazyMessage"),
    31: .unique(proto: "repeated_int32", json: "repeatedInt32"),
    32: .unique(proto: "repeated_int64", json: "repeatedInt64"),
    33: .unique(proto: "repeated_uint32", json: "repeatedUint32"),
    34: .unique(proto: "repeated_uint64", json: "repeatedUint64"),
    35: .unique(proto: "repeated_sint32", json: "repeatedSint32"),
    36: .unique(proto: "repeated_sint64", json: "repeatedSint64"),
    37: .unique(proto: "repeated_fixed32", json: "repeatedFixed32"),
    38: .unique(proto: "repeated_fixed64", json: "repeatedFixed64"),
    39: .unique(proto: "repeated_sfixed32", json: "repeatedSfixed32"),
    40: .unique(proto: "repeated_sfixed64", json: "repeatedSfixed64"),
    41: .unique(proto: "repeated_float", json: "repeatedFloat"),
    42: .unique(proto: "repeated_double", json: "repeatedDouble"),
    43: .unique(proto: "repeated_bool", json: "repeatedBool"),
    44: .unique(proto: "repeated_string", json: "repeatedString"),
    45: .unique(proto: "repeated_bytes", json: "repeatedBytes"),
    46: .unique(proto: "RepeatedGroup", json: "repeatedgroup"),
    48: .unique(proto: "repeated_nested_message", json: "repeatedNestedMessage"),
    49: .unique(proto: "repeated_foreign_message", json: "repeatedForeignMessage"),
    50: .unique(proto: "repeated_import_message", json: "repeatedImportMessage"),
    51: .unique(proto: "repeated_nested_enum", json: "repeatedNestedEnum"),
    52: .unique(proto: "repeated_foreign_enum", json: "repeatedForeignEnum"),
    53: .unique(proto: "repeated_import_enum", json: "repeatedImportEnum"),
    54: .unique(proto: "repeated_string_piece", json: "repeatedStringPiece"),
    55: .unique(proto: "repeated_cord", json: "repeatedCord"),
    57: .unique(proto: "repeated_lazy_message", json: "repeatedLazyMessage"),
    61: .unique(proto: "default_int32", json: "defaultInt32"),
    62: .unique(proto: "default_int64", json: "defaultInt64"),
    63: .unique(proto: "default_uint32", json: "defaultUint32"),
    64: .unique(proto: "default_uint64", json: "defaultUint64"),
    65: .unique(proto: "default_sint32", json: "defaultSint32"),
    66: .unique(proto: "default_sint64", json: "defaultSint64"),
    67: .unique(proto: "default_fixed32", json: "defaultFixed32"),
    68: .unique(proto: "default_fixed64", json: "defaultFixed64"),
    69: .unique(proto: "default_sfixed32", json: "defaultSfixed32"),
    70: .unique(proto: "default_sfixed64", json: "defaultSfixed64"),
    71: .unique(proto: "default_float", json: "defaultFloat"),
    72: .unique(proto: "default_double", json: "defaultDouble"),
    73: .unique(proto: "default_bool", json: "defaultBool"),
    74: .unique(proto: "default_string", json: "defaultString"),
    75: .unique(proto: "default_bytes", json: "defaultBytes"),
    81: .unique(proto: "default_nested_enum", json: "defaultNestedEnum"),
    82: .unique(proto: "default_foreign_enum", json: "defaultForeignEnum"),
    83: .unique(proto: "default_import_enum", json: "defaultImportEnum"),
    84: .unique(proto: "default_string_piece", json: "defaultStringPiece"),
    85: .unique(proto: "default_cord", json: "defaultCord"),
    111: .unique(proto: "oneof_uint32", json: "oneofUint32"),
    112: .unique(proto: "oneof_nested_message", json: "oneofNestedMessage"),
    113: .unique(proto: "oneof_string", json: "oneofString"),
    114: .unique(proto: "oneof_bytes", json: "oneofBytes"),
  ]

  private class _StorageClass {
    var _optionalInt32: Int32? = nil
    var _optionalInt64: Int64? = nil
    var _optionalUint32: UInt32? = nil
    var _optionalUint64: UInt64? = nil
    var _optionalSint32: Int32? = nil
    var _optionalSint64: Int64? = nil
    var _optionalFixed32: UInt32? = nil
    var _optionalFixed64: UInt64? = nil
    var _optionalSfixed32: Int32? = nil
    var _optionalSfixed64: Int64? = nil
    var _optionalFloat: Float? = nil
    var _optionalDouble: Double? = nil
    var _optionalBool: Bool? = nil
    var _optionalString: String? = nil
    var _optionalBytes: Data? = nil
    var _optionalGroup: ProtobufUnittest_TestAllTypes.OptionalGroup? = nil
    var _optionalNestedMessage: ProtobufUnittest_TestAllTypes.NestedMessage? = nil
    var _optionalForeignMessage: ProtobufUnittest_ForeignMessage? = nil
    var _optionalImportMessage: ProtobufUnittestImport_ImportMessage? = nil
    var _optionalNestedEnum: ProtobufUnittest_TestAllTypes.NestedEnum? = nil
    var _optionalForeignEnum: ProtobufUnittest_ForeignEnum? = nil
    var _optionalImportEnum: ProtobufUnittestImport_ImportEnum? = nil
    var _optionalStringPiece: String? = nil
    var _optionalCord: String? = nil
    var _optionalPublicImportMessage: ProtobufUnittestImport_PublicImportMessage? = nil
    var _optionalLazyMessage: ProtobufUnittest_TestAllTypes.NestedMessage? = nil
    var _repeatedInt32: [Int32] = []
    var _repeatedInt64: [Int64] = []
    var _repeatedUint32: [UInt32] = []
    var _repeatedUint64: [UInt64] = []
    var _repeatedSint32: [Int32] = []
    var _repeatedSint64: [Int64] = []
    var _repeatedFixed32: [UInt32] = []
    var _repeatedFixed64: [UInt64] = []
    var _repeatedSfixed32: [Int32] = []
    var _repeatedSfixed64: [Int64] = []
    var _repeatedFloat: [Float] = []
    var _repeatedDouble: [Double] = []
    var _repeatedBool: [Bool] = []
    var _repeatedString: [String] = []
    var _repeatedBytes: [Data] = []
    var _repeatedGroup: [ProtobufUnittest_TestAllTypes.RepeatedGroup] = []
    var _repeatedNestedMessage: [ProtobufUnittest_TestAllTypes.NestedMessage] = []
    var _repeatedForeignMessage: [ProtobufUnittest_ForeignMessage] = []
    var _repeatedImportMessage: [ProtobufUnittestImport_ImportMessage] = []
    var _repeatedNestedEnum: [ProtobufUnittest_TestAllTypes.NestedEnum] = []
    var _repeatedForeignEnum: [ProtobufUnittest_ForeignEnum] = []
    var _repeatedImportEnum: [ProtobufUnittestImport_ImportEnum] = []
    var _repeatedStringPiece: [String] = []
    var _repeatedCord: [String] = []
    var _repeatedLazyMessage: [ProtobufUnittest_TestAllTypes.NestedMessage] = []
    var _defaultInt32: Int32? = nil
    var _defaultInt64: Int64? = nil
    var _defaultUint32: UInt32? = nil
    var _defaultUint64: UInt64? = nil
    var _defaultSint32: Int32? = nil
    var _defaultSint64: Int64? = nil
    var _defaultFixed32: UInt32? = nil
    var _defaultFixed64: UInt64? = nil
    var _defaultSfixed32: Int32? = nil
    var _defaultSfixed64: Int64? = nil
    var _defaultFloat: Float? = nil
    var _defaultDouble: Double? = nil
    var _defaultBool: Bool? = nil
    var _defaultString: String? = nil
    var _defaultBytes: Data? = nil
    var _defaultNestedEnum: ProtobufUnittest_TestAllTypes.NestedEnum? = nil
    var _defaultForeignEnum: ProtobufUnittest_ForeignEnum? = nil
    var _defaultImportEnum: ProtobufUnittestImport_ImportEnum? = nil
    var _defaultStringPiece: String? = nil
    var _defaultCord: String? = nil
    var _oneofField: ProtobufUnittest_TestAllTypes.OneOf_OneofField?

    init() {}

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._optionalInt32 = _optionalInt32
      clone._optionalInt64 = _optionalInt64
      clone._optionalUint32 = _optionalUint32
      clone._optionalUint64 = _optionalUint64
      clone._optionalSint32 = _optionalSint32
      clone._optionalSint64 = _optionalSint64
      clone._optionalFixed32 = _optionalFixed32
      clone._optionalFixed64 = _optionalFixed64
      clone._optionalSfixed32 = _optionalSfixed32
      clone._optionalSfixed64 = _optionalSfixed64
      clone._optionalFloat = _optionalFloat
      clone._optionalDouble = _optionalDouble
      clone._optionalBool = _optionalBool
      clone._optionalString = _optionalString
      clone._optionalBytes = _optionalBytes
      clone._optionalGroup = _optionalGroup
      clone._optionalNestedMessage = _optionalNestedMessage
      clone._optionalForeignMessage = _optionalForeignMessage
      clone._optionalImportMessage = _optionalImportMessage
      clone._optionalNestedEnum = _optionalNestedEnum
      clone._optionalForeignEnum = _optionalForeignEnum
      clone._optionalImportEnum = _optionalImportEnum
      clone._optionalStringPiece = _optionalStringPiece
      clone._optionalCord = _optionalCord
      clone._optionalPublicImportMessage = _optionalPublicImportMessage
      clone._optionalLazyMessage = _optionalLazyMessage
      clone._repeatedInt32 = _repeatedInt32
      clone._repeatedInt64 = _repeatedInt64
      clone._repeatedUint32 = _repeatedUint32
      clone._repeatedUint64 = _repeatedUint64
      clone._repeatedSint32 = _repeatedSint32
      clone._repeatedSint64 = _repeatedSint64
      clone._repeatedFixed32 = _repeatedFixed32
      clone._repeatedFixed64 = _repeatedFixed64
      clone._repeatedSfixed32 = _repeatedSfixed32
      clone._repeatedSfixed64 = _repeatedSfixed64
      clone._repeatedFloat = _repeatedFloat
      clone._repeatedDouble = _repeatedDouble
      clone._repeatedBool = _repeatedBool
      clone._repeatedString = _repeatedString
      clone._repeatedBytes = _repeatedBytes
      clone._repeatedGroup = _repeatedGroup
      clone._repeatedNestedMessage = _repeatedNestedMessage
      clone._repeatedForeignMessage = _repeatedForeignMessage
      clone._repeatedImportMessage = _repeatedImportMessage
      clone._repeatedNestedEnum = _repeatedNestedEnum
      clone._repeatedForeignEnum = _repeatedForeignEnum
      clone._repeatedImportEnum = _repeatedImportEnum
      clone._repeatedStringPiece = _repeatedStringPiece
      clone._repeatedCord = _repeatedCord
      clone._repeatedLazyMessage = _repeatedLazyMessage
      clone._defaultInt32 = _defaultInt32
      clone._defaultInt64 = _defaultInt64
      clone._defaultUint32 = _defaultUint32
      clone._defaultUint64 = _defaultUint64
      clone._defaultSint32 = _defaultSint32
      clone._defaultSint64 = _defaultSint64
      clone._defaultFixed32 = _defaultFixed32
      clone._defaultFixed64 = _defaultFixed64
      clone._defaultSfixed32 = _defaultSfixed32
      clone._defaultSfixed64 = _defaultSfixed64
      clone._defaultFloat = _defaultFloat
      clone._defaultDouble = _defaultDouble
      clone._defaultBool = _defaultBool
      clone._defaultString = _defaultString
      clone._defaultBytes = _defaultBytes
      clone._defaultNestedEnum = _defaultNestedEnum
      clone._defaultForeignEnum = _defaultForeignEnum
      clone._defaultImportEnum = _defaultImportEnum
      clone._defaultStringPiece = _defaultStringPiece
      clone._defaultCord = _defaultCord
      clone._oneofField = _oneofField
      return clone
    }
  }

  private var _storage = _StorageClass()

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }

  ///   Singular
  var optionalInt32: Int32 {
    get {return _storage._optionalInt32 ?? 0}
    set {_uniqueStorage()._optionalInt32 = newValue}
  }
  var hasOptionalInt32: Bool {
    return _storage._optionalInt32 != nil
  }
  mutating func clearOptionalInt32() {
    return _storage._optionalInt32 = nil
  }

  var optionalInt64: Int64 {
    get {return _storage._optionalInt64 ?? 0}
    set {_uniqueStorage()._optionalInt64 = newValue}
  }
  var hasOptionalInt64: Bool {
    return _storage._optionalInt64 != nil
  }
  mutating func clearOptionalInt64() {
    return _storage._optionalInt64 = nil
  }

  var optionalUint32: UInt32 {
    get {return _storage._optionalUint32 ?? 0}
    set {_uniqueStorage()._optionalUint32 = newValue}
  }
  var hasOptionalUint32: Bool {
    return _storage._optionalUint32 != nil
  }
  mutating func clearOptionalUint32() {
    return _storage._optionalUint32 = nil
  }

  var optionalUint64: UInt64 {
    get {return _storage._optionalUint64 ?? 0}
    set {_uniqueStorage()._optionalUint64 = newValue}
  }
  var hasOptionalUint64: Bool {
    return _storage._optionalUint64 != nil
  }
  mutating func clearOptionalUint64() {
    return _storage._optionalUint64 = nil
  }

  var optionalSint32: Int32 {
    get {return _storage._optionalSint32 ?? 0}
    set {_uniqueStorage()._optionalSint32 = newValue}
  }
  var hasOptionalSint32: Bool {
    return _storage._optionalSint32 != nil
  }
  mutating func clearOptionalSint32() {
    return _storage._optionalSint32 = nil
  }

  var optionalSint64: Int64 {
    get {return _storage._optionalSint64 ?? 0}
    set {_uniqueStorage()._optionalSint64 = newValue}
  }
  var hasOptionalSint64: Bool {
    return _storage._optionalSint64 != nil
  }
  mutating func clearOptionalSint64() {
    return _storage._optionalSint64 = nil
  }

  var optionalFixed32: UInt32 {
    get {return _storage._optionalFixed32 ?? 0}
    set {_uniqueStorage()._optionalFixed32 = newValue}
  }
  var hasOptionalFixed32: Bool {
    return _storage._optionalFixed32 != nil
  }
  mutating func clearOptionalFixed32() {
    return _storage._optionalFixed32 = nil
  }

  var optionalFixed64: UInt64 {
    get {return _storage._optionalFixed64 ?? 0}
    set {_uniqueStorage()._optionalFixed64 = newValue}
  }
  var hasOptionalFixed64: Bool {
    return _storage._optionalFixed64 != nil
  }
  mutating func clearOptionalFixed64() {
    return _storage._optionalFixed64 = nil
  }

  var optionalSfixed32: Int32 {
    get {return _storage._optionalSfixed32 ?? 0}
    set {_uniqueStorage()._optionalSfixed32 = newValue}
  }
  var hasOptionalSfixed32: Bool {
    return _storage._optionalSfixed32 != nil
  }
  mutating func clearOptionalSfixed32() {
    return _storage._optionalSfixed32 = nil
  }

  var optionalSfixed64: Int64 {
    get {return _storage._optionalSfixed64 ?? 0}
    set {_uniqueStorage()._optionalSfixed64 = newValue}
  }
  var hasOptionalSfixed64: Bool {
    return _storage._optionalSfixed64 != nil
  }
  mutating func clearOptionalSfixed64() {
    return _storage._optionalSfixed64 = nil
  }

  var optionalFloat: Float {
    get {return _storage._optionalFloat ?? 0}
    set {_uniqueStorage()._optionalFloat = newValue}
  }
  var hasOptionalFloat: Bool {
    return _storage._optionalFloat != nil
  }
  mutating func clearOptionalFloat() {
    return _storage._optionalFloat = nil
  }

  var optionalDouble: Double {
    get {return _storage._optionalDouble ?? 0}
    set {_uniqueStorage()._optionalDouble = newValue}
  }
  var hasOptionalDouble: Bool {
    return _storage._optionalDouble != nil
  }
  mutating func clearOptionalDouble() {
    return _storage._optionalDouble = nil
  }

  var optionalBool: Bool {
    get {return _storage._optionalBool ?? false}
    set {_uniqueStorage()._optionalBool = newValue}
  }
  var hasOptionalBool: Bool {
    return _storage._optionalBool != nil
  }
  mutating func clearOptionalBool() {
    return _storage._optionalBool = nil
  }

  var optionalString: String {
    get {return _storage._optionalString ?? ""}
    set {_uniqueStorage()._optionalString = newValue}
  }
  var hasOptionalString: Bool {
    return _storage._optionalString != nil
  }
  mutating func clearOptionalString() {
    return _storage._optionalString = nil
  }

  var optionalBytes: Data {
    get {return _storage._optionalBytes ?? Data()}
    set {_uniqueStorage()._optionalBytes = newValue}
  }
  var hasOptionalBytes: Bool {
    return _storage._optionalBytes != nil
  }
  mutating func clearOptionalBytes() {
    return _storage._optionalBytes = nil
  }

  var optionalGroup: ProtobufUnittest_TestAllTypes.OptionalGroup {
    get {return _storage._optionalGroup ?? ProtobufUnittest_TestAllTypes.OptionalGroup()}
    set {_uniqueStorage()._optionalGroup = newValue}
  }
  var hasOptionalGroup: Bool {
    return _storage._optionalGroup != nil
  }
  mutating func clearOptionalGroup() {
    return _storage._optionalGroup = nil
  }

  var optionalNestedMessage: ProtobufUnittest_TestAllTypes.NestedMessage {
    get {return _storage._optionalNestedMessage ?? ProtobufUnittest_TestAllTypes.NestedMessage()}
    set {_uniqueStorage()._optionalNestedMessage = newValue}
  }
  var hasOptionalNestedMessage: Bool {
    return _storage._optionalNestedMessage != nil
  }
  mutating func clearOptionalNestedMessage() {
    return _storage._optionalNestedMessage = nil
  }

  var optionalForeignMessage: ProtobufUnittest_ForeignMessage {
    get {return _storage._optionalForeignMessage ?? ProtobufUnittest_ForeignMessage()}
    set {_uniqueStorage()._optionalForeignMessage = newValue}
  }
  var hasOptionalForeignMessage: Bool {
    return _storage._optionalForeignMessage != nil
  }
  mutating func clearOptionalForeignMessage() {
    return _storage._optionalForeignMessage = nil
  }

  var optionalImportMessage: ProtobufUnittestImport_ImportMessage {
    get {return _storage._optionalImportMessage ?? ProtobufUnittestImport_ImportMessage()}
    set {_uniqueStorage()._optionalImportMessage = newValue}
  }
  var hasOptionalImportMessage: Bool {
    return _storage._optionalImportMessage != nil
  }
  mutating func clearOptionalImportMessage() {
    return _storage._optionalImportMessage = nil
  }

  var optionalNestedEnum: ProtobufUnittest_TestAllTypes.NestedEnum {
    get {return _storage._optionalNestedEnum ?? ProtobufUnittest_TestAllTypes.NestedEnum.foo}
    set {_uniqueStorage()._optionalNestedEnum = newValue}
  }
  var hasOptionalNestedEnum: Bool {
    return _storage._optionalNestedEnum != nil
  }
  mutating func clearOptionalNestedEnum() {
    return _storage._optionalNestedEnum = nil
  }

  var optionalForeignEnum: ProtobufUnittest_ForeignEnum {
    get {return _storage._optionalForeignEnum ?? ProtobufUnittest_ForeignEnum.foreignFoo}
    set {_uniqueStorage()._optionalForeignEnum = newValue}
  }
  var hasOptionalForeignEnum: Bool {
    return _storage._optionalForeignEnum != nil
  }
  mutating func clearOptionalForeignEnum() {
    return _storage._optionalForeignEnum = nil
  }

  var optionalImportEnum: ProtobufUnittestImport_ImportEnum {
    get {return _storage._optionalImportEnum ?? ProtobufUnittestImport_ImportEnum.importFoo}
    set {_uniqueStorage()._optionalImportEnum = newValue}
  }
  var hasOptionalImportEnum: Bool {
    return _storage._optionalImportEnum != nil
  }
  mutating func clearOptionalImportEnum() {
    return _storage._optionalImportEnum = nil
  }

  var optionalStringPiece: String {
    get {return _storage._optionalStringPiece ?? ""}
    set {_uniqueStorage()._optionalStringPiece = newValue}
  }
  var hasOptionalStringPiece: Bool {
    return _storage._optionalStringPiece != nil
  }
  mutating func clearOptionalStringPiece() {
    return _storage._optionalStringPiece = nil
  }

  var optionalCord: String {
    get {return _storage._optionalCord ?? ""}
    set {_uniqueStorage()._optionalCord = newValue}
  }
  var hasOptionalCord: Bool {
    return _storage._optionalCord != nil
  }
  mutating func clearOptionalCord() {
    return _storage._optionalCord = nil
  }

  ///   Defined in unittest_import_public.proto
  var optionalPublicImportMessage: ProtobufUnittestImport_PublicImportMessage {
    get {return _storage._optionalPublicImportMessage ?? ProtobufUnittestImport_PublicImportMessage()}
    set {_uniqueStorage()._optionalPublicImportMessage = newValue}
  }
  var hasOptionalPublicImportMessage: Bool {
    return _storage._optionalPublicImportMessage != nil
  }
  mutating func clearOptionalPublicImportMessage() {
    return _storage._optionalPublicImportMessage = nil
  }

  var optionalLazyMessage: ProtobufUnittest_TestAllTypes.NestedMessage {
    get {return _storage._optionalLazyMessage ?? ProtobufUnittest_TestAllTypes.NestedMessage()}
    set {_uniqueStorage()._optionalLazyMessage = newValue}
  }
  var hasOptionalLazyMessage: Bool {
    return _storage._optionalLazyMessage != nil
  }
  mutating func clearOptionalLazyMessage() {
    return _storage._optionalLazyMessage = nil
  }

  ///   Repeated
  var repeatedInt32: [Int32] {
    get {return _storage._repeatedInt32}
    set {_uniqueStorage()._repeatedInt32 = newValue}
  }

  var repeatedInt64: [Int64] {
    get {return _storage._repeatedInt64}
    set {_uniqueStorage()._repeatedInt64 = newValue}
  }

  var repeatedUint32: [UInt32] {
    get {return _storage._repeatedUint32}
    set {_uniqueStorage()._repeatedUint32 = newValue}
  }

  var repeatedUint64: [UInt64] {
    get {return _storage._repeatedUint64}
    set {_uniqueStorage()._repeatedUint64 = newValue}
  }

  var repeatedSint32: [Int32] {
    get {return _storage._repeatedSint32}
    set {_uniqueStorage()._repeatedSint32 = newValue}
  }

  var repeatedSint64: [Int64] {
    get {return _storage._repeatedSint64}
    set {_uniqueStorage()._repeatedSint64 = newValue}
  }

  var repeatedFixed32: [UInt32] {
    get {return _storage._repeatedFixed32}
    set {_uniqueStorage()._repeatedFixed32 = newValue}
  }

  var repeatedFixed64: [UInt64] {
    get {return _storage._repeatedFixed64}
    set {_uniqueStorage()._repeatedFixed64 = newValue}
  }

  var repeatedSfixed32: [Int32] {
    get {return _storage._repeatedSfixed32}
    set {_uniqueStorage()._repeatedSfixed32 = newValue}
  }

  var repeatedSfixed64: [Int64] {
    get {return _storage._repeatedSfixed64}
    set {_uniqueStorage()._repeatedSfixed64 = newValue}
  }

  var repeatedFloat: [Float] {
    get {return _storage._repeatedFloat}
    set {_uniqueStorage()._repeatedFloat = newValue}
  }

  var repeatedDouble: [Double] {
    get {return _storage._repeatedDouble}
    set {_uniqueStorage()._repeatedDouble = newValue}
  }

  var repeatedBool: [Bool] {
    get {return _storage._repeatedBool}
    set {_uniqueStorage()._repeatedBool = newValue}
  }

  var repeatedString: [String] {
    get {return _storage._repeatedString}
    set {_uniqueStorage()._repeatedString = newValue}
  }

  var repeatedBytes: [Data] {
    get {return _storage._repeatedBytes}
    set {_uniqueStorage()._repeatedBytes = newValue}
  }

  var repeatedGroup: [ProtobufUnittest_TestAllTypes.RepeatedGroup] {
    get {return _storage._repeatedGroup}
    set {_uniqueStorage()._repeatedGroup = newValue}
  }

  var repeatedNestedMessage: [ProtobufUnittest_TestAllTypes.NestedMessage] {
    get {return _storage._repeatedNestedMessage}
    set {_uniqueStorage()._repeatedNestedMessage = newValue}
  }

  var repeatedForeignMessage: [ProtobufUnittest_ForeignMessage] {
    get {return _storage._repeatedForeignMessage}
    set {_uniqueStorage()._repeatedForeignMessage = newValue}
  }

  var repeatedImportMessage: [ProtobufUnittestImport_ImportMessage] {
    get {return _storage._repeatedImportMessage}
    set {_uniqueStorage()._repeatedImportMessage = newValue}
  }

  var repeatedNestedEnum: [ProtobufUnittest_TestAllTypes.NestedEnum] {
    get {return _storage._repeatedNestedEnum}
    set {_uniqueStorage()._repeatedNestedEnum = newValue}
  }

  var repeatedForeignEnum: [ProtobufUnittest_ForeignEnum] {
    get {return _storage._repeatedForeignEnum}
    set {_uniqueStorage()._repeatedForeignEnum = newValue}
  }

  var repeatedImportEnum: [ProtobufUnittestImport_ImportEnum] {
    get {return _storage._repeatedImportEnum}
    set {_uniqueStorage()._repeatedImportEnum = newValue}
  }

  var repeatedStringPiece: [String] {
    get {return _storage._repeatedStringPiece}
    set {_uniqueStorage()._repeatedStringPiece = newValue}
  }

  var repeatedCord: [String] {
    get {return _storage._repeatedCord}
    set {_uniqueStorage()._repeatedCord = newValue}
  }

  var repeatedLazyMessage: [ProtobufUnittest_TestAllTypes.NestedMessage] {
    get {return _storage._repeatedLazyMessage}
    set {_uniqueStorage()._repeatedLazyMessage = newValue}
  }

  ///   Singular with defaults
  var defaultInt32: Int32 {
    get {return _storage._defaultInt32 ?? 41}
    set {_uniqueStorage()._defaultInt32 = newValue}
  }
  var hasDefaultInt32: Bool {
    return _storage._defaultInt32 != nil
  }
  mutating func clearDefaultInt32() {
    return _storage._defaultInt32 = nil
  }

  var defaultInt64: Int64 {
    get {return _storage._defaultInt64 ?? 42}
    set {_uniqueStorage()._defaultInt64 = newValue}
  }
  var hasDefaultInt64: Bool {
    return _storage._defaultInt64 != nil
  }
  mutating func clearDefaultInt64() {
    return _storage._defaultInt64 = nil
  }

  var defaultUint32: UInt32 {
    get {return _storage._defaultUint32 ?? 43}
    set {_uniqueStorage()._defaultUint32 = newValue}
  }
  var hasDefaultUint32: Bool {
    return _storage._defaultUint32 != nil
  }
  mutating func clearDefaultUint32() {
    return _storage._defaultUint32 = nil
  }

  var defaultUint64: UInt64 {
    get {return _storage._defaultUint64 ?? 44}
    set {_uniqueStorage()._defaultUint64 = newValue}
  }
  var hasDefaultUint64: Bool {
    return _storage._defaultUint64 != nil
  }
  mutating func clearDefaultUint64() {
    return _storage._defaultUint64 = nil
  }

  var defaultSint32: Int32 {
    get {return _storage._defaultSint32 ?? -45}
    set {_uniqueStorage()._defaultSint32 = newValue}
  }
  var hasDefaultSint32: Bool {
    return _storage._defaultSint32 != nil
  }
  mutating func clearDefaultSint32() {
    return _storage._defaultSint32 = nil
  }

  var defaultSint64: Int64 {
    get {return _storage._defaultSint64 ?? 46}
    set {_uniqueStorage()._defaultSint64 = newValue}
  }
  var hasDefaultSint64: Bool {
    return _storage._defaultSint64 != nil
  }
  mutating func clearDefaultSint64() {
    return _storage._defaultSint64 = nil
  }

  var defaultFixed32: UInt32 {
    get {return _storage._defaultFixed32 ?? 47}
    set {_uniqueStorage()._defaultFixed32 = newValue}
  }
  var hasDefaultFixed32: Bool {
    return _storage._defaultFixed32 != nil
  }
  mutating func clearDefaultFixed32() {
    return _storage._defaultFixed32 = nil
  }

  var defaultFixed64: UInt64 {
    get {return _storage._defaultFixed64 ?? 48}
    set {_uniqueStorage()._defaultFixed64 = newValue}
  }
  var hasDefaultFixed64: Bool {
    return _storage._defaultFixed64 != nil
  }
  mutating func clearDefaultFixed64() {
    return _storage._defaultFixed64 = nil
  }

  var defaultSfixed32: Int32 {
    get {return _storage._defaultSfixed32 ?? 49}
    set {_uniqueStorage()._defaultSfixed32 = newValue}
  }
  var hasDefaultSfixed32: Bool {
    return _storage._defaultSfixed32 != nil
  }
  mutating func clearDefaultSfixed32() {
    return _storage._defaultSfixed32 = nil
  }

  var defaultSfixed64: Int64 {
    get {return _storage._defaultSfixed64 ?? -50}
    set {_uniqueStorage()._defaultSfixed64 = newValue}
  }
  var hasDefaultSfixed64: Bool {
    return _storage._defaultSfixed64 != nil
  }
  mutating func clearDefaultSfixed64() {
    return _storage._defaultSfixed64 = nil
  }

  var defaultFloat: Float {
    get {return _storage._defaultFloat ?? 51.5}
    set {_uniqueStorage()._defaultFloat = newValue}
  }
  var hasDefaultFloat: Bool {
    return _storage._defaultFloat != nil
  }
  mutating func clearDefaultFloat() {
    return _storage._defaultFloat = nil
  }

  var defaultDouble: Double {
    get {return _storage._defaultDouble ?? 52000}
    set {_uniqueStorage()._defaultDouble = newValue}
  }
  var hasDefaultDouble: Bool {
    return _storage._defaultDouble != nil
  }
  mutating func clearDefaultDouble() {
    return _storage._defaultDouble = nil
  }

  var defaultBool: Bool {
    get {return _storage._defaultBool ?? true}
    set {_uniqueStorage()._defaultBool = newValue}
  }
  var hasDefaultBool: Bool {
    return _storage._defaultBool != nil
  }
  mutating func clearDefaultBool() {
    return _storage._defaultBool = nil
  }

  var defaultString: String {
    get {return _storage._defaultString ?? "hello"}
    set {_uniqueStorage()._defaultString = newValue}
  }
  var hasDefaultString: Bool {
    return _storage._defaultString != nil
  }
  mutating func clearDefaultString() {
    return _storage._defaultString = nil
  }

  var defaultBytes: Data {
    get {return _storage._defaultBytes ?? Data(bytes: [119, 111, 114, 108, 100])}
    set {_uniqueStorage()._defaultBytes = newValue}
  }
  var hasDefaultBytes: Bool {
    return _storage._defaultBytes != nil
  }
  mutating func clearDefaultBytes() {
    return _storage._defaultBytes = nil
  }

  var defaultNestedEnum: ProtobufUnittest_TestAllTypes.NestedEnum {
    get {return _storage._defaultNestedEnum ?? ProtobufUnittest_TestAllTypes.NestedEnum.bar}
    set {_uniqueStorage()._defaultNestedEnum = newValue}
  }
  var hasDefaultNestedEnum: Bool {
    return _storage._defaultNestedEnum != nil
  }
  mutating func clearDefaultNestedEnum() {
    return _storage._defaultNestedEnum = nil
  }

  var defaultForeignEnum: ProtobufUnittest_ForeignEnum {
    get {return _storage._defaultForeignEnum ?? ProtobufUnittest_ForeignEnum.foreignBar}
    set {_uniqueStorage()._defaultForeignEnum = newValue}
  }
  var hasDefaultForeignEnum: Bool {
    return _storage._defaultForeignEnum != nil
  }
  mutating func clearDefaultForeignEnum() {
    return _storage._defaultForeignEnum = nil
  }

  var defaultImportEnum: ProtobufUnittestImport_ImportEnum {
    get {return _storage._defaultImportEnum ?? ProtobufUnittestImport_ImportEnum.importBar}
    set {_uniqueStorage()._defaultImportEnum = newValue}
  }
  var hasDefaultImportEnum: Bool {
    return _storage._defaultImportEnum != nil
  }
  mutating func clearDefaultImportEnum() {
    return _storage._defaultImportEnum = nil
  }

  var defaultStringPiece: String {
    get {return _storage._defaultStringPiece ?? "abc"}
    set {_uniqueStorage()._defaultStringPiece = newValue}
  }
  var hasDefaultStringPiece: Bool {
    return _storage._defaultStringPiece != nil
  }
  mutating func clearDefaultStringPiece() {
    return _storage._defaultStringPiece = nil
  }

  var defaultCord: String {
    get {return _storage._defaultCord ?? "123"}
    set {_uniqueStorage()._defaultCord = newValue}
  }
  var hasDefaultCord: Bool {
    return _storage._defaultCord != nil
  }
  mutating func clearDefaultCord() {
    return _storage._defaultCord = nil
  }

  var oneofUint32: UInt32 {
    get {
      if case .oneofUint32(let v)? = _storage._oneofField {
        return v
      }
      return 0
    }
    set {
      _uniqueStorage()._oneofField = .oneofUint32(newValue)
    }
  }

  var oneofNestedMessage: ProtobufUnittest_TestAllTypes.NestedMessage {
    get {
      if case .oneofNestedMessage(let v)? = _storage._oneofField {
        return v
      }
      return ProtobufUnittest_TestAllTypes.NestedMessage()
    }
    set {
      _uniqueStorage()._oneofField = .oneofNestedMessage(newValue)
    }
  }

  var oneofString: String {
    get {
      if case .oneofString(let v)? = _storage._oneofField {
        return v
      }
      return ""
    }
    set {
      _uniqueStorage()._oneofField = .oneofString(newValue)
    }
  }

  var oneofBytes: Data {
    get {
      if case .oneofBytes(let v)? = _storage._oneofField {
        return v
      }
      return Data()
    }
    set {
      _uniqueStorage()._oneofField = .oneofBytes(newValue)
    }
  }

  var oneofField: OneOf_OneofField? {
    get {return _storage._oneofField}
    set {
      _uniqueStorage()._oneofField = newValue
    }
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_OneofField: Equatable {
    case oneofUint32(UInt32)
    case oneofNestedMessage(ProtobufUnittest_TestAllTypes.NestedMessage)
    case oneofString(String)
    case oneofBytes(Data)

    static func ==(lhs: ProtobufUnittest_TestAllTypes.OneOf_OneofField, rhs: ProtobufUnittest_TestAllTypes.OneOf_OneofField) -> Bool {
      switch (lhs, rhs) {
      case (.oneofUint32(let l), .oneofUint32(let r)): return l == r
      case (.oneofNestedMessage(let l), .oneofNestedMessage(let r)): return l == r
      case (.oneofString(let l), .oneofString(let r)): return l == r
      case (.oneofBytes(let l), .oneofBytes(let r)): return l == r
      default: return false
      }
    }

    fileprivate init?<T: SwiftProtobuf.Decoder>(byDecodingFrom decoder: inout T, fieldNumber: Int) throws {
      switch fieldNumber {
      case 111:
        var value: UInt32?
        try decoder.decodeSingularUInt32Field(value: &value)
        if let value = value {
          self = .oneofUint32(value)
          return
        }
      case 112:
        var value: ProtobufUnittest_TestAllTypes.NestedMessage?
        try decoder.decodeSingularMessageField(value: &value)
        if let value = value {
          self = .oneofNestedMessage(value)
          return
        }
      case 113:
        var value: String?
        try decoder.decodeSingularStringField(value: &value)
        if let value = value {
          self = .oneofString(value)
          return
        }
      case 114:
        var value: Data?
        try decoder.decodeSingularBytesField(value: &value)
        if let value = value {
          self = .oneofBytes(value)
          return
        }
      default:
        break
      }
      return nil
    }

    fileprivate func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V, start: Int, end: Int) throws {
      switch self {
      case .oneofUint32(let v):
        if start <= 111 && 111 < end {
          try visitor.visitSingularUInt32Field(value: v, fieldNumber: 111)
        }
      case .oneofNestedMessage(let v):
        if start <= 112 && 112 < end {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 112)
        }
      case .oneofString(let v):
        if start <= 113 && 113 < end {
          try visitor.visitSingularStringField(value: v, fieldNumber: 113)
        }
      case .oneofBytes(let v):
        if start <= 114 && 114 < end {
          try visitor.visitSingularBytesField(value: v, fieldNumber: 114)
        }
      }
    }
  }

  enum NestedEnum: SwiftProtobuf.Enum, SwiftProtobuf._ProtoNameProviding {
    typealias RawValue = Int
    case foo // = 1
    case bar // = 2
    case baz // = 3

    ///   Intentionally negative.
    case neg // = -1

    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
      1: .same(proto: "FOO"),
      2: .same(proto: "BAR"),
      3: .same(proto: "BAZ"),
      -1: .same(proto: "NEG"),
    ]

    init() {
      self = .foo
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 1: self = .foo
      case 2: self = .bar
      case 3: self = .baz
      case -1: self = .neg
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .foo: return 1
      case .bar: return 2
      case .baz: return 3
      case .neg: return -1
      }
    }

  }

  struct NestedMessage: SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = "NestedMessage"
    static let protoPackageName: String = "protobuf_unittest"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
      1: .same(proto: "bb"),
    ]

    ///   The field name "b" fails to compile in proto1 because it conflicts with
    ///   a local variable named "b" in one of the generated methods.  Doh.
    ///   This file needs to compile in proto1 to test backwards-compatibility.
    private var _bb: Int32? = nil
    var bb: Int32 {
      get {return _bb ?? 0}
      set {_bb = newValue}
    }
    var hasBb: Bool {
      return _bb != nil
    }
    mutating func clearBb() {
      return _bb = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
      }
    }

    mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &_bb)
      default: break
      }
    }

    func _protoc_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = _bb {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }

    func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestAllTypes.NestedMessage) -> Bool {
      if _bb != other._bb {return false}
      if unknownFields != other.unknownFields {return false}
      return true
    }
  }

  struct OptionalGroup: SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = "OptionalGroup"
    static let protoPackageName: String = "protobuf_unittest"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
      17: .same(proto: "a"),
    ]

    private var _a: Int32? = nil
    var a: Int32 {
      get {return _a ?? 0}
      set {_a = newValue}
    }
    var hasA: Bool {
      return _a != nil
    }
    mutating func clearA() {
      return _a = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
      }
    }

    mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
      switch fieldNumber {
      case 17: try decoder.decodeSingularInt32Field(value: &_a)
      default: break
      }
    }

    func _protoc_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = _a {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 17)
      }
      try unknownFields.traverse(visitor: &visitor)
    }

    func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestAllTypes.OptionalGroup) -> Bool {
      if _a != other._a {return false}
      if unknownFields != other.unknownFields {return false}
      return true
    }
  }

  struct RepeatedGroup: SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = "RepeatedGroup"
    static let protoPackageName: String = "protobuf_unittest"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
      47: .same(proto: "a"),
    ]

    private var _a: Int32? = nil
    var a: Int32 {
      get {return _a ?? 0}
      set {_a = newValue}
    }
    var hasA: Bool {
      return _a != nil
    }
    mutating func clearA() {
      return _a = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
      }
    }

    mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
      switch fieldNumber {
      case 47: try decoder.decodeSingularInt32Field(value: &_a)
      default: break
      }
    }

    func _protoc_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = _a {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 47)
      }
      try unknownFields.traverse(visitor: &visitor)
    }

    func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestAllTypes.RepeatedGroup) -> Bool {
      if _a != other._a {return false}
      if unknownFields != other.unknownFields {return false}
      return true
    }
  }

  init() {}

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
      }
    }
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 1: try decoder.decodeSingularInt32Field(value: &_storage._optionalInt32)
    case 2: try decoder.decodeSingularInt64Field(value: &_storage._optionalInt64)
    case 3: try decoder.decodeSingularUInt32Field(value: &_storage._optionalUint32)
    case 4: try decoder.decodeSingularUInt64Field(value: &_storage._optionalUint64)
    case 5: try decoder.decodeSingularSInt32Field(value: &_storage._optionalSint32)
    case 6: try decoder.decodeSingularSInt64Field(value: &_storage._optionalSint64)
    case 7: try decoder.decodeSingularFixed32Field(value: &_storage._optionalFixed32)
    case 8: try decoder.decodeSingularFixed64Field(value: &_storage._optionalFixed64)
    case 9: try decoder.decodeSingularSFixed32Field(value: &_storage._optionalSfixed32)
    case 10: try decoder.decodeSingularSFixed64Field(value: &_storage._optionalSfixed64)
    case 11: try decoder.decodeSingularFloatField(value: &_storage._optionalFloat)
    case 12: try decoder.decodeSingularDoubleField(value: &_storage._optionalDouble)
    case 13: try decoder.decodeSingularBoolField(value: &_storage._optionalBool)
    case 14: try decoder.decodeSingularStringField(value: &_storage._optionalString)
    case 15: try decoder.decodeSingularBytesField(value: &_storage._optionalBytes)
    case 16: try decoder.decodeSingularGroupField(value: &_storage._optionalGroup)
    case 18: try decoder.decodeSingularMessageField(value: &_storage._optionalNestedMessage)
    case 19: try decoder.decodeSingularMessageField(value: &_storage._optionalForeignMessage)
    case 20: try decoder.decodeSingularMessageField(value: &_storage._optionalImportMessage)
    case 21: try decoder.decodeSingularEnumField(value: &_storage._optionalNestedEnum)
    case 22: try decoder.decodeSingularEnumField(value: &_storage._optionalForeignEnum)
    case 23: try decoder.decodeSingularEnumField(value: &_storage._optionalImportEnum)
    case 24: try decoder.decodeSingularStringField(value: &_storage._optionalStringPiece)
    case 25: try decoder.decodeSingularStringField(value: &_storage._optionalCord)
    case 26: try decoder.decodeSingularMessageField(value: &_storage._optionalPublicImportMessage)
    case 27: try decoder.decodeSingularMessageField(value: &_storage._optionalLazyMessage)
    case 31: try decoder.decodeRepeatedInt32Field(value: &_storage._repeatedInt32)
    case 32: try decoder.decodeRepeatedInt64Field(value: &_storage._repeatedInt64)
    case 33: try decoder.decodeRepeatedUInt32Field(value: &_storage._repeatedUint32)
    case 34: try decoder.decodeRepeatedUInt64Field(value: &_storage._repeatedUint64)
    case 35: try decoder.decodeRepeatedSInt32Field(value: &_storage._repeatedSint32)
    case 36: try decoder.decodeRepeatedSInt64Field(value: &_storage._repeatedSint64)
    case 37: try decoder.decodeRepeatedFixed32Field(value: &_storage._repeatedFixed32)
    case 38: try decoder.decodeRepeatedFixed64Field(value: &_storage._repeatedFixed64)
    case 39: try decoder.decodeRepeatedSFixed32Field(value: &_storage._repeatedSfixed32)
    case 40: try decoder.decodeRepeatedSFixed64Field(value: &_storage._repeatedSfixed64)
    case 41: try decoder.decodeRepeatedFloatField(value: &_storage._repeatedFloat)
    case 42: try decoder.decodeRepeatedDoubleField(value: &_storage._repeatedDouble)
    case 43: try decoder.decodeRepeatedBoolField(value: &_storage._repeatedBool)
    case 44: try decoder.decodeRepeatedStringField(value: &_storage._repeatedString)
    case 45: try decoder.decodeRepeatedBytesField(value: &_storage._repeatedBytes)
    case 46: try decoder.decodeRepeatedGroupField(value: &_storage._repeatedGroup)
    case 48: try decoder.decodeRepeatedMessageField(value: &_storage._repeatedNestedMessage)
    case 49: try decoder.decodeRepeatedMessageField(value: &_storage._repeatedForeignMessage)
    case 50: try decoder.decodeRepeatedMessageField(value: &_storage._repeatedImportMessage)
    case 51: try decoder.decodeRepeatedEnumField(value: &_storage._repeatedNestedEnum)
    case 52: try decoder.decodeRepeatedEnumField(value: &_storage._repeatedForeignEnum)
    case 53: try decoder.decodeRepeatedEnumField(value: &_storage._repeatedImportEnum)
    case 54: try decoder.decodeRepeatedStringField(value: &_storage._repeatedStringPiece)
    case 55: try decoder.decodeRepeatedStringField(value: &_storage._repeatedCord)
    case 57: try decoder.decodeRepeatedMessageField(value: &_storage._repeatedLazyMessage)
    case 61: try decoder.decodeSingularInt32Field(value: &_storage._defaultInt32)
    case 62: try decoder.decodeSingularInt64Field(value: &_storage._defaultInt64)
    case 63: try decoder.decodeSingularUInt32Field(value: &_storage._defaultUint32)
    case 64: try decoder.decodeSingularUInt64Field(value: &_storage._defaultUint64)
    case 65: try decoder.decodeSingularSInt32Field(value: &_storage._defaultSint32)
    case 66: try decoder.decodeSingularSInt64Field(value: &_storage._defaultSint64)
    case 67: try decoder.decodeSingularFixed32Field(value: &_storage._defaultFixed32)
    case 68: try decoder.decodeSingularFixed64Field(value: &_storage._defaultFixed64)
    case 69: try decoder.decodeSingularSFixed32Field(value: &_storage._defaultSfixed32)
    case 70: try decoder.decodeSingularSFixed64Field(value: &_storage._defaultSfixed64)
    case 71: try decoder.decodeSingularFloatField(value: &_storage._defaultFloat)
    case 72: try decoder.decodeSingularDoubleField(value: &_storage._defaultDouble)
    case 73: try decoder.decodeSingularBoolField(value: &_storage._defaultBool)
    case 74: try decoder.decodeSingularStringField(value: &_storage._defaultString)
    case 75: try decoder.decodeSingularBytesField(value: &_storage._defaultBytes)
    case 81: try decoder.decodeSingularEnumField(value: &_storage._defaultNestedEnum)
    case 82: try decoder.decodeSingularEnumField(value: &_storage._defaultForeignEnum)
    case 83: try decoder.decodeSingularEnumField(value: &_storage._defaultImportEnum)
    case 84: try decoder.decodeSingularStringField(value: &_storage._defaultStringPiece)
    case 85: try decoder.decodeSingularStringField(value: &_storage._defaultCord)
    case 111, 112, 113, 114:
      if _storage._oneofField != nil {
        try decoder.handleConflictingOneOf()
      }
      _storage._oneofField = try ProtobufUnittest_TestAllTypes.OneOf_OneofField(byDecodingFrom: &decoder, fieldNumber: fieldNumber)
    default: break
    }
  }

  func _protoc_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._optionalInt32 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      if let v = _storage._optionalInt64 {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 2)
      }
      if let v = _storage._optionalUint32 {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
      }
      if let v = _storage._optionalUint64 {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 4)
      }
      if let v = _storage._optionalSint32 {
        try visitor.visitSingularSInt32Field(value: v, fieldNumber: 5)
      }
      if let v = _storage._optionalSint64 {
        try visitor.visitSingularSInt64Field(value: v, fieldNumber: 6)
      }
      if let v = _storage._optionalFixed32 {
        try visitor.visitSingularFixed32Field(value: v, fieldNumber: 7)
      }
      if let v = _storage._optionalFixed64 {
        try visitor.visitSingularFixed64Field(value: v, fieldNumber: 8)
      }
      if let v = _storage._optionalSfixed32 {
        try visitor.visitSingularSFixed32Field(value: v, fieldNumber: 9)
      }
      if let v = _storage._optionalSfixed64 {
        try visitor.visitSingularSFixed64Field(value: v, fieldNumber: 10)
      }
      if let v = _storage._optionalFloat {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 11)
      }
      if let v = _storage._optionalDouble {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 12)
      }
      if let v = _storage._optionalBool {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 13)
      }
      if let v = _storage._optionalString {
        try visitor.visitSingularStringField(value: v, fieldNumber: 14)
      }
      if let v = _storage._optionalBytes {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 15)
      }
      if let v = _storage._optionalGroup {
        try visitor.visitSingularGroupField(value: v, fieldNumber: 16)
      }
      if let v = _storage._optionalNestedMessage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
      }
      if let v = _storage._optionalForeignMessage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
      }
      if let v = _storage._optionalImportMessage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
      }
      if let v = _storage._optionalNestedEnum {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 21)
      }
      if let v = _storage._optionalForeignEnum {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 22)
      }
      if let v = _storage._optionalImportEnum {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 23)
      }
      if let v = _storage._optionalStringPiece {
        try visitor.visitSingularStringField(value: v, fieldNumber: 24)
      }
      if let v = _storage._optionalCord {
        try visitor.visitSingularStringField(value: v, fieldNumber: 25)
      }
      if let v = _storage._optionalPublicImportMessage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 26)
      }
      if let v = _storage._optionalLazyMessage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 27)
      }
      if !_storage._repeatedInt32.isEmpty {
        try visitor.visitRepeatedInt32Field(value: _storage._repeatedInt32, fieldNumber: 31)
      }
      if !_storage._repeatedInt64.isEmpty {
        try visitor.visitRepeatedInt64Field(value: _storage._repeatedInt64, fieldNumber: 32)
      }
      if !_storage._repeatedUint32.isEmpty {
        try visitor.visitRepeatedUInt32Field(value: _storage._repeatedUint32, fieldNumber: 33)
      }
      if !_storage._repeatedUint64.isEmpty {
        try visitor.visitRepeatedUInt64Field(value: _storage._repeatedUint64, fieldNumber: 34)
      }
      if !_storage._repeatedSint32.isEmpty {
        try visitor.visitRepeatedSInt32Field(value: _storage._repeatedSint32, fieldNumber: 35)
      }
      if !_storage._repeatedSint64.isEmpty {
        try visitor.visitRepeatedSInt64Field(value: _storage._repeatedSint64, fieldNumber: 36)
      }
      if !_storage._repeatedFixed32.isEmpty {
        try visitor.visitRepeatedFixed32Field(value: _storage._repeatedFixed32, fieldNumber: 37)
      }
      if !_storage._repeatedFixed64.isEmpty {
        try visitor.visitRepeatedFixed64Field(value: _storage._repeatedFixed64, fieldNumber: 38)
      }
      if !_storage._repeatedSfixed32.isEmpty {
        try visitor.visitRepeatedSFixed32Field(value: _storage._repeatedSfixed32, fieldNumber: 39)
      }
      if !_storage._repeatedSfixed64.isEmpty {
        try visitor.visitRepeatedSFixed64Field(value: _storage._repeatedSfixed64, fieldNumber: 40)
      }
      if !_storage._repeatedFloat.isEmpty {
        try visitor.visitRepeatedFloatField(value: _storage._repeatedFloat, fieldNumber: 41)
      }
      if !_storage._repeatedDouble.isEmpty {
        try visitor.visitRepeatedDoubleField(value: _storage._repeatedDouble, fieldNumber: 42)
      }
      if !_storage._repeatedBool.isEmpty {
        try visitor.visitRepeatedBoolField(value: _storage._repeatedBool, fieldNumber: 43)
      }
      if !_storage._repeatedString.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._repeatedString, fieldNumber: 44)
      }
      if !_storage._repeatedBytes.isEmpty {
        try visitor.visitRepeatedBytesField(value: _storage._repeatedBytes, fieldNumber: 45)
      }
      if !_storage._repeatedGroup.isEmpty {
        try visitor.visitRepeatedGroupField(value: _storage._repeatedGroup, fieldNumber: 46)
      }
      if !_storage._repeatedNestedMessage.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._repeatedNestedMessage, fieldNumber: 48)
      }
      if !_storage._repeatedForeignMessage.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._repeatedForeignMessage, fieldNumber: 49)
      }
      if !_storage._repeatedImportMessage.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._repeatedImportMessage, fieldNumber: 50)
      }
      if !_storage._repeatedNestedEnum.isEmpty {
        try visitor.visitRepeatedEnumField(value: _storage._repeatedNestedEnum, fieldNumber: 51)
      }
      if !_storage._repeatedForeignEnum.isEmpty {
        try visitor.visitRepeatedEnumField(value: _storage._repeatedForeignEnum, fieldNumber: 52)
      }
      if !_storage._repeatedImportEnum.isEmpty {
        try visitor.visitRepeatedEnumField(value: _storage._repeatedImportEnum, fieldNumber: 53)
      }
      if !_storage._repeatedStringPiece.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._repeatedStringPiece, fieldNumber: 54)
      }
      if !_storage._repeatedCord.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._repeatedCord, fieldNumber: 55)
      }
      if !_storage._repeatedLazyMessage.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._repeatedLazyMessage, fieldNumber: 57)
      }
      if let v = _storage._defaultInt32 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 61)
      }
      if let v = _storage._defaultInt64 {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 62)
      }
      if let v = _storage._defaultUint32 {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 63)
      }
      if let v = _storage._defaultUint64 {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 64)
      }
      if let v = _storage._defaultSint32 {
        try visitor.visitSingularSInt32Field(value: v, fieldNumber: 65)
      }
      if let v = _storage._defaultSint64 {
        try visitor.visitSingularSInt64Field(value: v, fieldNumber: 66)
      }
      if let v = _storage._defaultFixed32 {
        try visitor.visitSingularFixed32Field(value: v, fieldNumber: 67)
      }
      if let v = _storage._defaultFixed64 {
        try visitor.visitSingularFixed64Field(value: v, fieldNumber: 68)
      }
      if let v = _storage._defaultSfixed32 {
        try visitor.visitSingularSFixed32Field(value: v, fieldNumber: 69)
      }
      if let v = _storage._defaultSfixed64 {
        try visitor.visitSingularSFixed64Field(value: v, fieldNumber: 70)
      }
      if let v = _storage._defaultFloat {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 71)
      }
      if let v = _storage._defaultDouble {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 72)
      }
      if let v = _storage._defaultBool {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 73)
      }
      if let v = _storage._defaultString {
        try visitor.visitSingularStringField(value: v, fieldNumber: 74)
      }
      if let v = _storage._defaultBytes {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 75)
      }
      if let v = _storage._defaultNestedEnum {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 81)
      }
      if let v = _storage._defaultForeignEnum {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 82)
      }
      if let v = _storage._defaultImportEnum {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 83)
      }
      if let v = _storage._defaultStringPiece {
        try visitor.visitSingularStringField(value: v, fieldNumber: 84)
      }
      if let v = _storage._defaultCord {
        try visitor.visitSingularStringField(value: v, fieldNumber: 85)
      }
      try _storage._oneofField?.traverse(visitor: &visitor, start: 111, end: 115)
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestAllTypes) -> Bool {
    return withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
      if _storage !== other_storage {
        if _storage._optionalInt32 != other_storage._optionalInt32 {return false}
        if _storage._optionalInt64 != other_storage._optionalInt64 {return false}
        if _storage._optionalUint32 != other_storage._optionalUint32 {return false}
        if _storage._optionalUint64 != other_storage._optionalUint64 {return false}
        if _storage._optionalSint32 != other_storage._optionalSint32 {return false}
        if _storage._optionalSint64 != other_storage._optionalSint64 {return false}
        if _storage._optionalFixed32 != other_storage._optionalFixed32 {return false}
        if _storage._optionalFixed64 != other_storage._optionalFixed64 {return false}
        if _storage._optionalSfixed32 != other_storage._optionalSfixed32 {return false}
        if _storage._optionalSfixed64 != other_storage._optionalSfixed64 {return false}
        if _storage._optionalFloat != other_storage._optionalFloat {return false}
        if _storage._optionalDouble != other_storage._optionalDouble {return false}
        if _storage._optionalBool != other_storage._optionalBool {return false}
        if _storage._optionalString != other_storage._optionalString {return false}
        if _storage._optionalBytes != other_storage._optionalBytes {return false}
        if _storage._optionalGroup != other_storage._optionalGroup {return false}
        if _storage._optionalNestedMessage != other_storage._optionalNestedMessage {return false}
        if _storage._optionalForeignMessage != other_storage._optionalForeignMessage {return false}
        if _storage._optionalImportMessage != other_storage._optionalImportMessage {return false}
        if _storage._optionalNestedEnum != other_storage._optionalNestedEnum {return false}
        if _storage._optionalForeignEnum != other_storage._optionalForeignEnum {return false}
        if _storage._optionalImportEnum != other_storage._optionalImportEnum {return false}
        if _storage._optionalStringPiece != other_storage._optionalStringPiece {return false}
        if _storage._optionalCord != other_storage._optionalCord {return false}
        if _storage._optionalPublicImportMessage != other_storage._optionalPublicImportMessage {return false}
        if _storage._optionalLazyMessage != other_storage._optionalLazyMessage {return false}
        if _storage._repeatedInt32 != other_storage._repeatedInt32 {return false}
        if _storage._repeatedInt64 != other_storage._repeatedInt64 {return false}
        if _storage._repeatedUint32 != other_storage._repeatedUint32 {return false}
        if _storage._repeatedUint64 != other_storage._repeatedUint64 {return false}
        if _storage._repeatedSint32 != other_storage._repeatedSint32 {return false}
        if _storage._repeatedSint64 != other_storage._repeatedSint64 {return false}
        if _storage._repeatedFixed32 != other_storage._repeatedFixed32 {return false}
        if _storage._repeatedFixed64 != other_storage._repeatedFixed64 {return false}
        if _storage._repeatedSfixed32 != other_storage._repeatedSfixed32 {return false}
        if _storage._repeatedSfixed64 != other_storage._repeatedSfixed64 {return false}
        if _storage._repeatedFloat != other_storage._repeatedFloat {return false}
        if _storage._repeatedDouble != other_storage._repeatedDouble {return false}
        if _storage._repeatedBool != other_storage._repeatedBool {return false}
        if _storage._repeatedString != other_storage._repeatedString {return false}
        if _storage._repeatedBytes != other_storage._repeatedBytes {return false}
        if _storage._repeatedGroup != other_storage._repeatedGroup {return false}
        if _storage._repeatedNestedMessage != other_storage._repeatedNestedMessage {return false}
        if _storage._repeatedForeignMessage != other_storage._repeatedForeignMessage {return false}
        if _storage._repeatedImportMessage != other_storage._repeatedImportMessage {return false}
        if _storage._repeatedNestedEnum != other_storage._repeatedNestedEnum {return false}
        if _storage._repeatedForeignEnum != other_storage._repeatedForeignEnum {return false}
        if _storage._repeatedImportEnum != other_storage._repeatedImportEnum {return false}
        if _storage._repeatedStringPiece != other_storage._repeatedStringPiece {return false}
        if _storage._repeatedCord != other_storage._repeatedCord {return false}
        if _storage._repeatedLazyMessage != other_storage._repeatedLazyMessage {return false}
        if _storage._defaultInt32 != other_storage._defaultInt32 {return false}
        if _storage._defaultInt64 != other_storage._defaultInt64 {return false}
        if _storage._defaultUint32 != other_storage._defaultUint32 {return false}
        if _storage._defaultUint64 != other_storage._defaultUint64 {return false}
        if _storage._defaultSint32 != other_storage._defaultSint32 {return false}
        if _storage._defaultSint64 != other_storage._defaultSint64 {return false}
        if _storage._defaultFixed32 != other_storage._defaultFixed32 {return false}
        if _storage._defaultFixed64 != other_storage._defaultFixed64 {return false}
        if _storage._defaultSfixed32 != other_storage._defaultSfixed32 {return false}
        if _storage._defaultSfixed64 != other_storage._defaultSfixed64 {return false}
        if _storage._defaultFloat != other_storage._defaultFloat {return false}
        if _storage._defaultDouble != other_storage._defaultDouble {return false}
        if _storage._defaultBool != other_storage._defaultBool {return false}
        if _storage._defaultString != other_storage._defaultString {return false}
        if _storage._defaultBytes != other_storage._defaultBytes {return false}
        if _storage._defaultNestedEnum != other_storage._defaultNestedEnum {return false}
        if _storage._defaultForeignEnum != other_storage._defaultForeignEnum {return false}
        if _storage._defaultImportEnum != other_storage._defaultImportEnum {return false}
        if _storage._defaultStringPiece != other_storage._defaultStringPiece {return false}
        if _storage._defaultCord != other_storage._defaultCord {return false}
        if _storage._oneofField != other_storage._oneofField {return false}
      }
      if unknownFields != other.unknownFields {return false}
      return true
    }
  }
}

///   This proto includes a recusively nested message.
struct ProtobufUnittest_NestedTestAllTypes: SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "NestedTestAllTypes"
  static let protoPackageName: String = "protobuf_unittest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "child"),
    2: .same(proto: "payload"),
    3: .unique(proto: "repeated_child", json: "repeatedChild"),
  ]

  private class _StorageClass {
    var _child: ProtobufUnittest_NestedTestAllTypes? = nil
    var _payload: ProtobufUnittest_TestAllTypes? = nil
    var _repeatedChild: [ProtobufUnittest_NestedTestAllTypes] = []

    init() {}

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._child = _child
      clone._payload = _payload
      clone._repeatedChild = _repeatedChild
      return clone
    }
  }

  private var _storage = _StorageClass()

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }

  var child: ProtobufUnittest_NestedTestAllTypes {
    get {return _storage._child ?? ProtobufUnittest_NestedTestAllTypes()}
    set {_uniqueStorage()._child = newValue}
  }
  var hasChild: Bool {
    return _storage._child != nil
  }
  mutating func clearChild() {
    return _storage._child = nil
  }

  var payload: ProtobufUnittest_TestAllTypes {
    get {return _storage._payload ?? ProtobufUnittest_TestAllTypes()}
    set {_uniqueStorage()._payload = newValue}
  }
  var hasPayload: Bool {
    return _storage._payload != nil
  }
  mutating func clearPayload() {
    return _storage._payload = nil
  }

  var repeatedChild: [ProtobufUnittest_NestedTestAllTypes] {
    get {return _storage._repeatedChild}
    set {_uniqueStorage()._repeatedChild = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
      }
    }
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 1: try decoder.decodeSingularMessageField(value: &_storage._child)
    case 2: try decoder.decodeSingularMessageField(value: &_storage._payload)
    case 3: try decoder.decodeRepeatedMessageField(value: &_storage._repeatedChild)
    default: break
    }
  }

  func _protoc_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._child {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._payload {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._repeatedChild.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._repeatedChild, fieldNumber: 3)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  func _protoc_generated_isEqualTo(other: ProtobufUnittest_NestedTestAllTypes) -> Bool {
    return withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
      if _storage !== other_storage {
        if _storage._child != other_storage._child {return false}
        if _storage._payload != other_storage._payload {return false}
        if _storage._repeatedChild != other_storage._repeatedChild {return false}
      }
      if unknownFields != other.unknownFields {return false}
      return true
    }
  }
}

struct ProtobufUnittest_TestDeprecatedFields: SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "TestDeprecatedFields"
  static let protoPackageName: String = "protobuf_unittest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .unique(proto: "deprecated_int32", json: "deprecatedInt32"),
  ]

  private var _deprecatedInt32: Int32? = nil
  var deprecatedInt32: Int32 {
    get {return _deprecatedInt32 ?? 0}
    set {_deprecatedInt32 = newValue}
  }
  var hasDeprecatedInt32: Bool {
    return _deprecatedInt32 != nil
  }
  mutating func clearDeprecatedInt32() {
    return _deprecatedInt32 = nil
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
    }
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 1: try decoder.decodeSingularInt32Field(value: &_deprecatedInt32)
    default: break
    }
  }

  func _protoc_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = _deprecatedInt32 {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestDeprecatedFields) -> Bool {
    if _deprecatedInt32 != other._deprecatedInt32 {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

///   Define these after TestAllTypes to make sure the compiler can handle
///   that.
struct ProtobufUnittest_ForeignMessage: SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "ForeignMessage"
  static let protoPackageName: String = "protobuf_unittest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "c"),
    2: .same(proto: "d"),
  ]

  private var _c: Int32? = nil
  var c: Int32 {
    get {return _c ?? 0}
    set {_c = newValue}
  }
  var hasC: Bool {
    return _c != nil
  }
  mutating func clearC() {
    return _c = nil
  }

  private var _d: Int32? = nil
  var d: Int32 {
    get {return _d ?? 0}
    set {_d = newValue}
  }
  var hasD: Bool {
    return _d != nil
  }
  mutating func clearD() {
    return _d = nil
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
    }
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 1: try decoder.decodeSingularInt32Field(value: &_c)
    case 2: try decoder.decodeSingularInt32Field(value: &_d)
    default: break
    }
  }

  func _protoc_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = _c {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    }
    if let v = _d {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protoc_generated_isEqualTo(other: ProtobufUnittest_ForeignMessage) -> Bool {
    if _c != other._c {return false}
    if _d != other._d {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

struct ProtobufUnittest_TestReservedFields: SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "TestReservedFields"
  static let protoPackageName: String = "protobuf_unittest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
    }
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
  }

  func _protoc_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestReservedFields) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

struct ProtobufUnittest_TestAllExtensions: SwiftProtobuf.Proto2Message, SwiftProtobuf.ExtensibleMessage, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "TestAllExtensions"
  static let protoPackageName: String = "protobuf_unittest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  public var isInitialized: Bool {
    if !_extensionFieldValues.isInitialized {return false}
    return true
  }

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
    }
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    if (1 <= fieldNumber && fieldNumber < 536870912) {
      try decoder.decodeExtensionField(values: &_extensionFieldValues, messageType: ProtobufUnittest_TestAllExtensions.self, fieldNumber: fieldNumber)
    }
  }

  func _protoc_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try visitor.visitExtensionFields(fields: _extensionFieldValues, start: 1, end: 536870912)
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestAllExtensions) -> Bool {
    if unknownFields != other.unknownFields {return false}
    if _extensionFieldValues != other._extensionFieldValues {return false}
    return true
  }

  private var _extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()

  mutating func setExtensionValue<F: SwiftProtobuf.ExtensionField>(ext: SwiftProtobuf.MessageExtension<F, ProtobufUnittest_TestAllExtensions>, value: F.ValueType) {
    _extensionFieldValues[ext.fieldNumber] = ext.set(value: value)
  }

  mutating func clearExtensionValue<F: SwiftProtobuf.ExtensionField>(ext: SwiftProtobuf.MessageExtension<F, ProtobufUnittest_TestAllExtensions>) {
    _extensionFieldValues[ext.fieldNumber] = nil
  }

  func getExtensionValue<F: SwiftProtobuf.ExtensionField>(ext: SwiftProtobuf.MessageExtension<F, ProtobufUnittest_TestAllExtensions>) -> F.ValueType {
    if let fieldValue = _extensionFieldValues[ext.fieldNumber] as? F {
      return fieldValue.value
    }
    return ext.defaultValue
  }

  func hasExtensionValue<F: SwiftProtobuf.ExtensionField>(ext: SwiftProtobuf.MessageExtension<F, ProtobufUnittest_TestAllExtensions>) -> Bool {
    return _extensionFieldValues[ext.fieldNumber] is F
  }
  func _protobuf_names(for number: Int) -> _NameMap.Names? {
    return ProtobufUnittest_TestAllExtensions._protobuf_nameMap.names(for: number) ?? _extensionFieldValues.fieldNames(for: number)
  }
}

struct ProtobufUnittest_OptionalGroup_extension: SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "OptionalGroup_extension"
  static let protoPackageName: String = "protobuf_unittest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    17: .same(proto: "a"),
  ]

  private var _a: Int32? = nil
  var a: Int32 {
    get {return _a ?? 0}
    set {_a = newValue}
  }
  var hasA: Bool {
    return _a != nil
  }
  mutating func clearA() {
    return _a = nil
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
    }
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 17: try decoder.decodeSingularInt32Field(value: &_a)
    default: break
    }
  }

  func _protoc_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = _a {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 17)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protoc_generated_isEqualTo(other: ProtobufUnittest_OptionalGroup_extension) -> Bool {
    if _a != other._a {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

struct ProtobufUnittest_RepeatedGroup_extension: SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "RepeatedGroup_extension"
  static let protoPackageName: String = "protobuf_unittest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    47: .same(proto: "a"),
  ]

  private var _a: Int32? = nil
  var a: Int32 {
    get {return _a ?? 0}
    set {_a = newValue}
  }
  var hasA: Bool {
    return _a != nil
  }
  mutating func clearA() {
    return _a = nil
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
    }
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 47: try decoder.decodeSingularInt32Field(value: &_a)
    default: break
    }
  }

  func _protoc_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = _a {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 47)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protoc_generated_isEqualTo(other: ProtobufUnittest_RepeatedGroup_extension) -> Bool {
    if _a != other._a {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

struct ProtobufUnittest_TestNestedExtension: SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "TestNestedExtension"
  static let protoPackageName: String = "protobuf_unittest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct Extensions {

    ///   Check for bug where string extensions declared in tested scope did not
    ///   compile.
    static let test = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufString>, ProtobufUnittest_TestAllExtensions>(
      fieldNumber: 1002,
      fieldNames: .same(proto: "protobuf_unittest.TestNestedExtension.test"),
      defaultValue: "test"
    )

    ///   Used to test if generated extension name is correct when there are
    ///   underscores.
    static let nested_string_extension = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufString>, ProtobufUnittest_TestAllExtensions>(
      fieldNumber: 1003,
      fieldNames: .same(proto: "protobuf_unittest.TestNestedExtension.nested_string_extension"),
      defaultValue: ""
    )
  }

  init() {}

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
    }
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
  }

  func _protoc_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestNestedExtension) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

///   We have separate messages for testing required fields because it's
///   annoying to have to fill in required fields in TestProto in order to
///   do anything with it.  Note that we don't need to test every type of
///   required filed because the code output is basically identical to
///   optional fields for all types.
struct ProtobufUnittest_TestRequired: SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "TestRequired"
  static let protoPackageName: String = "protobuf_unittest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "a"),
    2: .same(proto: "dummy2"),
    3: .same(proto: "b"),
    4: .same(proto: "dummy4"),
    5: .same(proto: "dummy5"),
    6: .same(proto: "dummy6"),
    7: .same(proto: "dummy7"),
    8: .same(proto: "dummy8"),
    9: .same(proto: "dummy9"),
    10: .same(proto: "dummy10"),
    11: .same(proto: "dummy11"),
    12: .same(proto: "dummy12"),
    13: .same(proto: "dummy13"),
    14: .same(proto: "dummy14"),
    15: .same(proto: "dummy15"),
    16: .same(proto: "dummy16"),
    17: .same(proto: "dummy17"),
    18: .same(proto: "dummy18"),
    19: .same(proto: "dummy19"),
    20: .same(proto: "dummy20"),
    21: .same(proto: "dummy21"),
    22: .same(proto: "dummy22"),
    23: .same(proto: "dummy23"),
    24: .same(proto: "dummy24"),
    25: .same(proto: "dummy25"),
    26: .same(proto: "dummy26"),
    27: .same(proto: "dummy27"),
    28: .same(proto: "dummy28"),
    29: .same(proto: "dummy29"),
    30: .same(proto: "dummy30"),
    31: .same(proto: "dummy31"),
    32: .same(proto: "dummy32"),
    33: .same(proto: "c"),
  ]

  private class _StorageClass {
    var _a: Int32? = nil
    var _dummy2: Int32? = nil
    var _b: Int32? = nil
    var _dummy4: Int32? = nil
    var _dummy5: Int32? = nil
    var _dummy6: Int32? = nil
    var _dummy7: Int32? = nil
    var _dummy8: Int32? = nil
    var _dummy9: Int32? = nil
    var _dummy10: Int32? = nil
    var _dummy11: Int32? = nil
    var _dummy12: Int32? = nil
    var _dummy13: Int32? = nil
    var _dummy14: Int32? = nil
    var _dummy15: Int32? = nil
    var _dummy16: Int32? = nil
    var _dummy17: Int32? = nil
    var _dummy18: Int32? = nil
    var _dummy19: Int32? = nil
    var _dummy20: Int32? = nil
    var _dummy21: Int32? = nil
    var _dummy22: Int32? = nil
    var _dummy23: Int32? = nil
    var _dummy24: Int32? = nil
    var _dummy25: Int32? = nil
    var _dummy26: Int32? = nil
    var _dummy27: Int32? = nil
    var _dummy28: Int32? = nil
    var _dummy29: Int32? = nil
    var _dummy30: Int32? = nil
    var _dummy31: Int32? = nil
    var _dummy32: Int32? = nil
    var _c: Int32? = nil

    init() {}

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._a = _a
      clone._dummy2 = _dummy2
      clone._b = _b
      clone._dummy4 = _dummy4
      clone._dummy5 = _dummy5
      clone._dummy6 = _dummy6
      clone._dummy7 = _dummy7
      clone._dummy8 = _dummy8
      clone._dummy9 = _dummy9
      clone._dummy10 = _dummy10
      clone._dummy11 = _dummy11
      clone._dummy12 = _dummy12
      clone._dummy13 = _dummy13
      clone._dummy14 = _dummy14
      clone._dummy15 = _dummy15
      clone._dummy16 = _dummy16
      clone._dummy17 = _dummy17
      clone._dummy18 = _dummy18
      clone._dummy19 = _dummy19
      clone._dummy20 = _dummy20
      clone._dummy21 = _dummy21
      clone._dummy22 = _dummy22
      clone._dummy23 = _dummy23
      clone._dummy24 = _dummy24
      clone._dummy25 = _dummy25
      clone._dummy26 = _dummy26
      clone._dummy27 = _dummy27
      clone._dummy28 = _dummy28
      clone._dummy29 = _dummy29
      clone._dummy30 = _dummy30
      clone._dummy31 = _dummy31
      clone._dummy32 = _dummy32
      clone._c = _c
      return clone
    }
  }

  private var _storage = _StorageClass()

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }

  var a: Int32 {
    get {return _storage._a ?? 0}
    set {_uniqueStorage()._a = newValue}
  }
  var hasA: Bool {
    return _storage._a != nil
  }
  mutating func clearA() {
    return _storage._a = nil
  }

  var dummy2: Int32 {
    get {return _storage._dummy2 ?? 0}
    set {_uniqueStorage()._dummy2 = newValue}
  }
  var hasDummy2: Bool {
    return _storage._dummy2 != nil
  }
  mutating func clearDummy2() {
    return _storage._dummy2 = nil
  }

  var b: Int32 {
    get {return _storage._b ?? 0}
    set {_uniqueStorage()._b = newValue}
  }
  var hasB: Bool {
    return _storage._b != nil
  }
  mutating func clearB() {
    return _storage._b = nil
  }

  ///   Pad the field count to 32 so that we can test that IsInitialized()
  ///   properly checks multiple elements of has_bits_.
  var dummy4: Int32 {
    get {return _storage._dummy4 ?? 0}
    set {_uniqueStorage()._dummy4 = newValue}
  }
  var hasDummy4: Bool {
    return _storage._dummy4 != nil
  }
  mutating func clearDummy4() {
    return _storage._dummy4 = nil
  }

  var dummy5: Int32 {
    get {return _storage._dummy5 ?? 0}
    set {_uniqueStorage()._dummy5 = newValue}
  }
  var hasDummy5: Bool {
    return _storage._dummy5 != nil
  }
  mutating func clearDummy5() {
    return _storage._dummy5 = nil
  }

  var dummy6: Int32 {
    get {return _storage._dummy6 ?? 0}
    set {_uniqueStorage()._dummy6 = newValue}
  }
  var hasDummy6: Bool {
    return _storage._dummy6 != nil
  }
  mutating func clearDummy6() {
    return _storage._dummy6 = nil
  }

  var dummy7: Int32 {
    get {return _storage._dummy7 ?? 0}
    set {_uniqueStorage()._dummy7 = newValue}
  }
  var hasDummy7: Bool {
    return _storage._dummy7 != nil
  }
  mutating func clearDummy7() {
    return _storage._dummy7 = nil
  }

  var dummy8: Int32 {
    get {return _storage._dummy8 ?? 0}
    set {_uniqueStorage()._dummy8 = newValue}
  }
  var hasDummy8: Bool {
    return _storage._dummy8 != nil
  }
  mutating func clearDummy8() {
    return _storage._dummy8 = nil
  }

  var dummy9: Int32 {
    get {return _storage._dummy9 ?? 0}
    set {_uniqueStorage()._dummy9 = newValue}
  }
  var hasDummy9: Bool {
    return _storage._dummy9 != nil
  }
  mutating func clearDummy9() {
    return _storage._dummy9 = nil
  }

  var dummy10: Int32 {
    get {return _storage._dummy10 ?? 0}
    set {_uniqueStorage()._dummy10 = newValue}
  }
  var hasDummy10: Bool {
    return _storage._dummy10 != nil
  }
  mutating func clearDummy10() {
    return _storage._dummy10 = nil
  }

  var dummy11: Int32 {
    get {return _storage._dummy11 ?? 0}
    set {_uniqueStorage()._dummy11 = newValue}
  }
  var hasDummy11: Bool {
    return _storage._dummy11 != nil
  }
  mutating func clearDummy11() {
    return _storage._dummy11 = nil
  }

  var dummy12: Int32 {
    get {return _storage._dummy12 ?? 0}
    set {_uniqueStorage()._dummy12 = newValue}
  }
  var hasDummy12: Bool {
    return _storage._dummy12 != nil
  }
  mutating func clearDummy12() {
    return _storage._dummy12 = nil
  }

  var dummy13: Int32 {
    get {return _storage._dummy13 ?? 0}
    set {_uniqueStorage()._dummy13 = newValue}
  }
  var hasDummy13: Bool {
    return _storage._dummy13 != nil
  }
  mutating func clearDummy13() {
    return _storage._dummy13 = nil
  }

  var dummy14: Int32 {
    get {return _storage._dummy14 ?? 0}
    set {_uniqueStorage()._dummy14 = newValue}
  }
  var hasDummy14: Bool {
    return _storage._dummy14 != nil
  }
  mutating func clearDummy14() {
    return _storage._dummy14 = nil
  }

  var dummy15: Int32 {
    get {return _storage._dummy15 ?? 0}
    set {_uniqueStorage()._dummy15 = newValue}
  }
  var hasDummy15: Bool {
    return _storage._dummy15 != nil
  }
  mutating func clearDummy15() {
    return _storage._dummy15 = nil
  }

  var dummy16: Int32 {
    get {return _storage._dummy16 ?? 0}
    set {_uniqueStorage()._dummy16 = newValue}
  }
  var hasDummy16: Bool {
    return _storage._dummy16 != nil
  }
  mutating func clearDummy16() {
    return _storage._dummy16 = nil
  }

  var dummy17: Int32 {
    get {return _storage._dummy17 ?? 0}
    set {_uniqueStorage()._dummy17 = newValue}
  }
  var hasDummy17: Bool {
    return _storage._dummy17 != nil
  }
  mutating func clearDummy17() {
    return _storage._dummy17 = nil
  }

  var dummy18: Int32 {
    get {return _storage._dummy18 ?? 0}
    set {_uniqueStorage()._dummy18 = newValue}
  }
  var hasDummy18: Bool {
    return _storage._dummy18 != nil
  }
  mutating func clearDummy18() {
    return _storage._dummy18 = nil
  }

  var dummy19: Int32 {
    get {return _storage._dummy19 ?? 0}
    set {_uniqueStorage()._dummy19 = newValue}
  }
  var hasDummy19: Bool {
    return _storage._dummy19 != nil
  }
  mutating func clearDummy19() {
    return _storage._dummy19 = nil
  }

  var dummy20: Int32 {
    get {return _storage._dummy20 ?? 0}
    set {_uniqueStorage()._dummy20 = newValue}
  }
  var hasDummy20: Bool {
    return _storage._dummy20 != nil
  }
  mutating func clearDummy20() {
    return _storage._dummy20 = nil
  }

  var dummy21: Int32 {
    get {return _storage._dummy21 ?? 0}
    set {_uniqueStorage()._dummy21 = newValue}
  }
  var hasDummy21: Bool {
    return _storage._dummy21 != nil
  }
  mutating func clearDummy21() {
    return _storage._dummy21 = nil
  }

  var dummy22: Int32 {
    get {return _storage._dummy22 ?? 0}
    set {_uniqueStorage()._dummy22 = newValue}
  }
  var hasDummy22: Bool {
    return _storage._dummy22 != nil
  }
  mutating func clearDummy22() {
    return _storage._dummy22 = nil
  }

  var dummy23: Int32 {
    get {return _storage._dummy23 ?? 0}
    set {_uniqueStorage()._dummy23 = newValue}
  }
  var hasDummy23: Bool {
    return _storage._dummy23 != nil
  }
  mutating func clearDummy23() {
    return _storage._dummy23 = nil
  }

  var dummy24: Int32 {
    get {return _storage._dummy24 ?? 0}
    set {_uniqueStorage()._dummy24 = newValue}
  }
  var hasDummy24: Bool {
    return _storage._dummy24 != nil
  }
  mutating func clearDummy24() {
    return _storage._dummy24 = nil
  }

  var dummy25: Int32 {
    get {return _storage._dummy25 ?? 0}
    set {_uniqueStorage()._dummy25 = newValue}
  }
  var hasDummy25: Bool {
    return _storage._dummy25 != nil
  }
  mutating func clearDummy25() {
    return _storage._dummy25 = nil
  }

  var dummy26: Int32 {
    get {return _storage._dummy26 ?? 0}
    set {_uniqueStorage()._dummy26 = newValue}
  }
  var hasDummy26: Bool {
    return _storage._dummy26 != nil
  }
  mutating func clearDummy26() {
    return _storage._dummy26 = nil
  }

  var dummy27: Int32 {
    get {return _storage._dummy27 ?? 0}
    set {_uniqueStorage()._dummy27 = newValue}
  }
  var hasDummy27: Bool {
    return _storage._dummy27 != nil
  }
  mutating func clearDummy27() {
    return _storage._dummy27 = nil
  }

  var dummy28: Int32 {
    get {return _storage._dummy28 ?? 0}
    set {_uniqueStorage()._dummy28 = newValue}
  }
  var hasDummy28: Bool {
    return _storage._dummy28 != nil
  }
  mutating func clearDummy28() {
    return _storage._dummy28 = nil
  }

  var dummy29: Int32 {
    get {return _storage._dummy29 ?? 0}
    set {_uniqueStorage()._dummy29 = newValue}
  }
  var hasDummy29: Bool {
    return _storage._dummy29 != nil
  }
  mutating func clearDummy29() {
    return _storage._dummy29 = nil
  }

  var dummy30: Int32 {
    get {return _storage._dummy30 ?? 0}
    set {_uniqueStorage()._dummy30 = newValue}
  }
  var hasDummy30: Bool {
    return _storage._dummy30 != nil
  }
  mutating func clearDummy30() {
    return _storage._dummy30 = nil
  }

  var dummy31: Int32 {
    get {return _storage._dummy31 ?? 0}
    set {_uniqueStorage()._dummy31 = newValue}
  }
  var hasDummy31: Bool {
    return _storage._dummy31 != nil
  }
  mutating func clearDummy31() {
    return _storage._dummy31 = nil
  }

  var dummy32: Int32 {
    get {return _storage._dummy32 ?? 0}
    set {_uniqueStorage()._dummy32 = newValue}
  }
  var hasDummy32: Bool {
    return _storage._dummy32 != nil
  }
  mutating func clearDummy32() {
    return _storage._dummy32 = nil
  }

  var c: Int32 {
    get {return _storage._c ?? 0}
    set {_uniqueStorage()._c = newValue}
  }
  var hasC: Bool {
    return _storage._c != nil
  }
  mutating func clearC() {
    return _storage._c = nil
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct Extensions {

    static let single = SwiftProtobuf.MessageExtension<OptionalMessageExtensionField<ProtobufUnittest_TestRequired>, ProtobufUnittest_TestAllExtensions>(
      fieldNumber: 1000,
      fieldNames: .same(proto: "protobuf_unittest.TestRequired.single"),
      defaultValue: ProtobufUnittest_TestRequired()
    )

    static let multi = SwiftProtobuf.MessageExtension<RepeatedMessageExtensionField<ProtobufUnittest_TestRequired>, ProtobufUnittest_TestAllExtensions>(
      fieldNumber: 1001,
      fieldNames: .same(proto: "protobuf_unittest.TestRequired.multi"),
      defaultValue: []
    )
  }

  init() {}

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._a == nil {return false}
      if _storage._b == nil {return false}
      if _storage._c == nil {return false}
      return true
    }
  }

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
      }
    }
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 1: try decoder.decodeSingularInt32Field(value: &_storage._a)
    case 2: try decoder.decodeSingularInt32Field(value: &_storage._dummy2)
    case 3: try decoder.decodeSingularInt32Field(value: &_storage._b)
    case 4: try decoder.decodeSingularInt32Field(value: &_storage._dummy4)
    case 5: try decoder.decodeSingularInt32Field(value: &_storage._dummy5)
    case 6: try decoder.decodeSingularInt32Field(value: &_storage._dummy6)
    case 7: try decoder.decodeSingularInt32Field(value: &_storage._dummy7)
    case 8: try decoder.decodeSingularInt32Field(value: &_storage._dummy8)
    case 9: try decoder.decodeSingularInt32Field(value: &_storage._dummy9)
    case 10: try decoder.decodeSingularInt32Field(value: &_storage._dummy10)
    case 11: try decoder.decodeSingularInt32Field(value: &_storage._dummy11)
    case 12: try decoder.decodeSingularInt32Field(value: &_storage._dummy12)
    case 13: try decoder.decodeSingularInt32Field(value: &_storage._dummy13)
    case 14: try decoder.decodeSingularInt32Field(value: &_storage._dummy14)
    case 15: try decoder.decodeSingularInt32Field(value: &_storage._dummy15)
    case 16: try decoder.decodeSingularInt32Field(value: &_storage._dummy16)
    case 17: try decoder.decodeSingularInt32Field(value: &_storage._dummy17)
    case 18: try decoder.decodeSingularInt32Field(value: &_storage._dummy18)
    case 19: try decoder.decodeSingularInt32Field(value: &_storage._dummy19)
    case 20: try decoder.decodeSingularInt32Field(value: &_storage._dummy20)
    case 21: try decoder.decodeSingularInt32Field(value: &_storage._dummy21)
    case 22: try decoder.decodeSingularInt32Field(value: &_storage._dummy22)
    case 23: try decoder.decodeSingularInt32Field(value: &_storage._dummy23)
    case 24: try decoder.decodeSingularInt32Field(value: &_storage._dummy24)
    case 25: try decoder.decodeSingularInt32Field(value: &_storage._dummy25)
    case 26: try decoder.decodeSingularInt32Field(value: &_storage._dummy26)
    case 27: try decoder.decodeSingularInt32Field(value: &_storage._dummy27)
    case 28: try decoder.decodeSingularInt32Field(value: &_storage._dummy28)
    case 29: try decoder.decodeSingularInt32Field(value: &_storage._dummy29)
    case 30: try decoder.decodeSingularInt32Field(value: &_storage._dummy30)
    case 31: try decoder.decodeSingularInt32Field(value: &_storage._dummy31)
    case 32: try decoder.decodeSingularInt32Field(value: &_storage._dummy32)
    case 33: try decoder.decodeSingularInt32Field(value: &_storage._c)
    default: break
    }
  }

  func _protoc_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._a {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      if let v = _storage._dummy2 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
      }
      if let v = _storage._b {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
      }
      if let v = _storage._dummy4 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 4)
      }
      if let v = _storage._dummy5 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 5)
      }
      if let v = _storage._dummy6 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 6)
      }
      if let v = _storage._dummy7 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 7)
      }
      if let v = _storage._dummy8 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 8)
      }
      if let v = _storage._dummy9 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 9)
      }
      if let v = _storage._dummy10 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 10)
      }
      if let v = _storage._dummy11 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 11)
      }
      if let v = _storage._dummy12 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 12)
      }
      if let v = _storage._dummy13 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 13)
      }
      if let v = _storage._dummy14 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 14)
      }
      if let v = _storage._dummy15 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 15)
      }
      if let v = _storage._dummy16 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 16)
      }
      if let v = _storage._dummy17 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 17)
      }
      if let v = _storage._dummy18 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 18)
      }
      if let v = _storage._dummy19 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 19)
      }
      if let v = _storage._dummy20 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 20)
      }
      if let v = _storage._dummy21 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 21)
      }
      if let v = _storage._dummy22 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 22)
      }
      if let v = _storage._dummy23 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 23)
      }
      if let v = _storage._dummy24 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 24)
      }
      if let v = _storage._dummy25 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 25)
      }
      if let v = _storage._dummy26 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 26)
      }
      if let v = _storage._dummy27 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 27)
      }
      if let v = _storage._dummy28 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 28)
      }
      if let v = _storage._dummy29 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 29)
      }
      if let v = _storage._dummy30 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 30)
      }
      if let v = _storage._dummy31 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 31)
      }
      if let v = _storage._dummy32 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 32)
      }
      if let v = _storage._c {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 33)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestRequired) -> Bool {
    return withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
      if _storage !== other_storage {
        if _storage._a != other_storage._a {return false}
        if _storage._dummy2 != other_storage._dummy2 {return false}
        if _storage._b != other_storage._b {return false}
        if _storage._dummy4 != other_storage._dummy4 {return false}
        if _storage._dummy5 != other_storage._dummy5 {return false}
        if _storage._dummy6 != other_storage._dummy6 {return false}
        if _storage._dummy7 != other_storage._dummy7 {return false}
        if _storage._dummy8 != other_storage._dummy8 {return false}
        if _storage._dummy9 != other_storage._dummy9 {return false}
        if _storage._dummy10 != other_storage._dummy10 {return false}
        if _storage._dummy11 != other_storage._dummy11 {return false}
        if _storage._dummy12 != other_storage._dummy12 {return false}
        if _storage._dummy13 != other_storage._dummy13 {return false}
        if _storage._dummy14 != other_storage._dummy14 {return false}
        if _storage._dummy15 != other_storage._dummy15 {return false}
        if _storage._dummy16 != other_storage._dummy16 {return false}
        if _storage._dummy17 != other_storage._dummy17 {return false}
        if _storage._dummy18 != other_storage._dummy18 {return false}
        if _storage._dummy19 != other_storage._dummy19 {return false}
        if _storage._dummy20 != other_storage._dummy20 {return false}
        if _storage._dummy21 != other_storage._dummy21 {return false}
        if _storage._dummy22 != other_storage._dummy22 {return false}
        if _storage._dummy23 != other_storage._dummy23 {return false}
        if _storage._dummy24 != other_storage._dummy24 {return false}
        if _storage._dummy25 != other_storage._dummy25 {return false}
        if _storage._dummy26 != other_storage._dummy26 {return false}
        if _storage._dummy27 != other_storage._dummy27 {return false}
        if _storage._dummy28 != other_storage._dummy28 {return false}
        if _storage._dummy29 != other_storage._dummy29 {return false}
        if _storage._dummy30 != other_storage._dummy30 {return false}
        if _storage._dummy31 != other_storage._dummy31 {return false}
        if _storage._dummy32 != other_storage._dummy32 {return false}
        if _storage._c != other_storage._c {return false}
      }
      if unknownFields != other.unknownFields {return false}
      return true
    }
  }
}

struct ProtobufUnittest_TestRequiredForeign: SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "TestRequiredForeign"
  static let protoPackageName: String = "protobuf_unittest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .unique(proto: "optional_message", json: "optionalMessage"),
    2: .unique(proto: "repeated_message", json: "repeatedMessage"),
    3: .same(proto: "dummy"),
  ]

  private class _StorageClass {
    var _optionalMessage: ProtobufUnittest_TestRequired? = nil
    var _repeatedMessage: [ProtobufUnittest_TestRequired] = []
    var _dummy: Int32? = nil

    init() {}

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._optionalMessage = _optionalMessage
      clone._repeatedMessage = _repeatedMessage
      clone._dummy = _dummy
      return clone
    }
  }

  private var _storage = _StorageClass()

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }

  var optionalMessage: ProtobufUnittest_TestRequired {
    get {return _storage._optionalMessage ?? ProtobufUnittest_TestRequired()}
    set {_uniqueStorage()._optionalMessage = newValue}
  }
  var hasOptionalMessage: Bool {
    return _storage._optionalMessage != nil
  }
  mutating func clearOptionalMessage() {
    return _storage._optionalMessage = nil
  }

  var repeatedMessage: [ProtobufUnittest_TestRequired] {
    get {return _storage._repeatedMessage}
    set {_uniqueStorage()._repeatedMessage = newValue}
  }

  var dummy: Int32 {
    get {return _storage._dummy ?? 0}
    set {_uniqueStorage()._dummy = newValue}
  }
  var hasDummy: Bool {
    return _storage._dummy != nil
  }
  mutating func clearDummy() {
    return _storage._dummy = nil
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._optionalMessage, !v.isInitialized {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(repeatedMessage) {return false}
      return true
    }
  }

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
      }
    }
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 1: try decoder.decodeSingularMessageField(value: &_storage._optionalMessage)
    case 2: try decoder.decodeRepeatedMessageField(value: &_storage._repeatedMessage)
    case 3: try decoder.decodeSingularInt32Field(value: &_storage._dummy)
    default: break
    }
  }

  func _protoc_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._optionalMessage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._repeatedMessage.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._repeatedMessage, fieldNumber: 2)
      }
      if let v = _storage._dummy {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestRequiredForeign) -> Bool {
    return withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
      if _storage !== other_storage {
        if _storage._optionalMessage != other_storage._optionalMessage {return false}
        if _storage._repeatedMessage != other_storage._repeatedMessage {return false}
        if _storage._dummy != other_storage._dummy {return false}
      }
      if unknownFields != other.unknownFields {return false}
      return true
    }
  }
}

///   Test that we can use NestedMessage from outside TestAllTypes.
struct ProtobufUnittest_TestForeignNested: SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "TestForeignNested"
  static let protoPackageName: String = "protobuf_unittest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .unique(proto: "foreign_nested", json: "foreignNested"),
  ]

  private class _StorageClass {
    var _foreignNested: ProtobufUnittest_TestAllTypes.NestedMessage? = nil

    init() {}

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._foreignNested = _foreignNested
      return clone
    }
  }

  private var _storage = _StorageClass()

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }

  var foreignNested: ProtobufUnittest_TestAllTypes.NestedMessage {
    get {return _storage._foreignNested ?? ProtobufUnittest_TestAllTypes.NestedMessage()}
    set {_uniqueStorage()._foreignNested = newValue}
  }
  var hasForeignNested: Bool {
    return _storage._foreignNested != nil
  }
  mutating func clearForeignNested() {
    return _storage._foreignNested = nil
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
      }
    }
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 1: try decoder.decodeSingularMessageField(value: &_storage._foreignNested)
    default: break
    }
  }

  func _protoc_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._foreignNested {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestForeignNested) -> Bool {
    return withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
      if _storage !== other_storage {
        if _storage._foreignNested != other_storage._foreignNested {return false}
      }
      if unknownFields != other.unknownFields {return false}
      return true
    }
  }
}

///   TestEmptyMessage is used to test unknown field support.
struct ProtobufUnittest_TestEmptyMessage: SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "TestEmptyMessage"
  static let protoPackageName: String = "protobuf_unittest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
    }
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
  }

  func _protoc_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestEmptyMessage) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

///   Like above, but declare all field numbers as potential extensions.  No
///   actual extensions should ever be defined for this type.
struct ProtobufUnittest_TestEmptyMessageWithExtensions: SwiftProtobuf.Proto2Message, SwiftProtobuf.ExtensibleMessage, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "TestEmptyMessageWithExtensions"
  static let protoPackageName: String = "protobuf_unittest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  public var isInitialized: Bool {
    if !_extensionFieldValues.isInitialized {return false}
    return true
  }

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
    }
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    if (1 <= fieldNumber && fieldNumber < 536870912) {
      try decoder.decodeExtensionField(values: &_extensionFieldValues, messageType: ProtobufUnittest_TestEmptyMessageWithExtensions.self, fieldNumber: fieldNumber)
    }
  }

  func _protoc_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try visitor.visitExtensionFields(fields: _extensionFieldValues, start: 1, end: 536870912)
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestEmptyMessageWithExtensions) -> Bool {
    if unknownFields != other.unknownFields {return false}
    if _extensionFieldValues != other._extensionFieldValues {return false}
    return true
  }

  private var _extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()

  mutating func setExtensionValue<F: SwiftProtobuf.ExtensionField>(ext: SwiftProtobuf.MessageExtension<F, ProtobufUnittest_TestEmptyMessageWithExtensions>, value: F.ValueType) {
    _extensionFieldValues[ext.fieldNumber] = ext.set(value: value)
  }

  mutating func clearExtensionValue<F: SwiftProtobuf.ExtensionField>(ext: SwiftProtobuf.MessageExtension<F, ProtobufUnittest_TestEmptyMessageWithExtensions>) {
    _extensionFieldValues[ext.fieldNumber] = nil
  }

  func getExtensionValue<F: SwiftProtobuf.ExtensionField>(ext: SwiftProtobuf.MessageExtension<F, ProtobufUnittest_TestEmptyMessageWithExtensions>) -> F.ValueType {
    if let fieldValue = _extensionFieldValues[ext.fieldNumber] as? F {
      return fieldValue.value
    }
    return ext.defaultValue
  }

  func hasExtensionValue<F: SwiftProtobuf.ExtensionField>(ext: SwiftProtobuf.MessageExtension<F, ProtobufUnittest_TestEmptyMessageWithExtensions>) -> Bool {
    return _extensionFieldValues[ext.fieldNumber] is F
  }
  func _protobuf_names(for number: Int) -> _NameMap.Names? {
    return ProtobufUnittest_TestEmptyMessageWithExtensions._protobuf_nameMap.names(for: number) ?? _extensionFieldValues.fieldNames(for: number)
  }
}

struct ProtobufUnittest_TestMultipleExtensionRanges: SwiftProtobuf.Proto2Message, SwiftProtobuf.ExtensibleMessage, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "TestMultipleExtensionRanges"
  static let protoPackageName: String = "protobuf_unittest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  public var isInitialized: Bool {
    if !_extensionFieldValues.isInitialized {return false}
    return true
  }

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
    }
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    if (42 <= fieldNumber && fieldNumber < 43) || (4143 <= fieldNumber && fieldNumber < 4244) || (65536 <= fieldNumber && fieldNumber < 536870912) {
      try decoder.decodeExtensionField(values: &_extensionFieldValues, messageType: ProtobufUnittest_TestMultipleExtensionRanges.self, fieldNumber: fieldNumber)
    }
  }

  func _protoc_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try visitor.visitExtensionFields(fields: _extensionFieldValues, start: 42, end: 43)
    try visitor.visitExtensionFields(fields: _extensionFieldValues, start: 4143, end: 4244)
    try visitor.visitExtensionFields(fields: _extensionFieldValues, start: 65536, end: 536870912)
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestMultipleExtensionRanges) -> Bool {
    if unknownFields != other.unknownFields {return false}
    if _extensionFieldValues != other._extensionFieldValues {return false}
    return true
  }

  private var _extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()

  mutating func setExtensionValue<F: SwiftProtobuf.ExtensionField>(ext: SwiftProtobuf.MessageExtension<F, ProtobufUnittest_TestMultipleExtensionRanges>, value: F.ValueType) {
    _extensionFieldValues[ext.fieldNumber] = ext.set(value: value)
  }

  mutating func clearExtensionValue<F: SwiftProtobuf.ExtensionField>(ext: SwiftProtobuf.MessageExtension<F, ProtobufUnittest_TestMultipleExtensionRanges>) {
    _extensionFieldValues[ext.fieldNumber] = nil
  }

  func getExtensionValue<F: SwiftProtobuf.ExtensionField>(ext: SwiftProtobuf.MessageExtension<F, ProtobufUnittest_TestMultipleExtensionRanges>) -> F.ValueType {
    if let fieldValue = _extensionFieldValues[ext.fieldNumber] as? F {
      return fieldValue.value
    }
    return ext.defaultValue
  }

  func hasExtensionValue<F: SwiftProtobuf.ExtensionField>(ext: SwiftProtobuf.MessageExtension<F, ProtobufUnittest_TestMultipleExtensionRanges>) -> Bool {
    return _extensionFieldValues[ext.fieldNumber] is F
  }
  func _protobuf_names(for number: Int) -> _NameMap.Names? {
    return ProtobufUnittest_TestMultipleExtensionRanges._protobuf_nameMap.names(for: number) ?? _extensionFieldValues.fieldNames(for: number)
  }
}

///   Test that really large tag numbers don't break anything.
struct ProtobufUnittest_TestReallyLargeTagNumber: SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "TestReallyLargeTagNumber"
  static let protoPackageName: String = "protobuf_unittest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "a"),
    268435455: .same(proto: "bb"),
  ]

  ///   The largest possible tag number is 2^28 - 1, since the wire format uses
  ///   three bits to communicate wire type.
  private var _a: Int32? = nil
  var a: Int32 {
    get {return _a ?? 0}
    set {_a = newValue}
  }
  var hasA: Bool {
    return _a != nil
  }
  mutating func clearA() {
    return _a = nil
  }

  private var _bb: Int32? = nil
  var bb: Int32 {
    get {return _bb ?? 0}
    set {_bb = newValue}
  }
  var hasBb: Bool {
    return _bb != nil
  }
  mutating func clearBb() {
    return _bb = nil
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
    }
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 1: try decoder.decodeSingularInt32Field(value: &_a)
    case 268435455: try decoder.decodeSingularInt32Field(value: &_bb)
    default: break
    }
  }

  func _protoc_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = _a {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    }
    if let v = _bb {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 268435455)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestReallyLargeTagNumber) -> Bool {
    if _a != other._a {return false}
    if _bb != other._bb {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

struct ProtobufUnittest_TestRecursiveMessage: SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "TestRecursiveMessage"
  static let protoPackageName: String = "protobuf_unittest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "a"),
    2: .same(proto: "i"),
  ]

  private class _StorageClass {
    var _a: ProtobufUnittest_TestRecursiveMessage? = nil
    var _i: Int32? = nil

    init() {}

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._a = _a
      clone._i = _i
      return clone
    }
  }

  private var _storage = _StorageClass()

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }

  var a: ProtobufUnittest_TestRecursiveMessage {
    get {return _storage._a ?? ProtobufUnittest_TestRecursiveMessage()}
    set {_uniqueStorage()._a = newValue}
  }
  var hasA: Bool {
    return _storage._a != nil
  }
  mutating func clearA() {
    return _storage._a = nil
  }

  var i: Int32 {
    get {return _storage._i ?? 0}
    set {_uniqueStorage()._i = newValue}
  }
  var hasI: Bool {
    return _storage._i != nil
  }
  mutating func clearI() {
    return _storage._i = nil
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
      }
    }
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 1: try decoder.decodeSingularMessageField(value: &_storage._a)
    case 2: try decoder.decodeSingularInt32Field(value: &_storage._i)
    default: break
    }
  }

  func _protoc_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._a {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._i {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestRecursiveMessage) -> Bool {
    return withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
      if _storage !== other_storage {
        if _storage._a != other_storage._a {return false}
        if _storage._i != other_storage._i {return false}
      }
      if unknownFields != other.unknownFields {return false}
      return true
    }
  }
}

///   Test that mutual recursion works.
struct ProtobufUnittest_TestMutualRecursionA: SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "TestMutualRecursionA"
  static let protoPackageName: String = "protobuf_unittest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bb"),
  ]

  private class _StorageClass {
    var _bb: ProtobufUnittest_TestMutualRecursionB? = nil

    init() {}

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._bb = _bb
      return clone
    }
  }

  private var _storage = _StorageClass()

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }

  var bb: ProtobufUnittest_TestMutualRecursionB {
    get {return _storage._bb ?? ProtobufUnittest_TestMutualRecursionB()}
    set {_uniqueStorage()._bb = newValue}
  }
  var hasBb: Bool {
    return _storage._bb != nil
  }
  mutating func clearBb() {
    return _storage._bb = nil
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
      }
    }
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 1: try decoder.decodeSingularMessageField(value: &_storage._bb)
    default: break
    }
  }

  func _protoc_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._bb {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestMutualRecursionA) -> Bool {
    return withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
      if _storage !== other_storage {
        if _storage._bb != other_storage._bb {return false}
      }
      if unknownFields != other.unknownFields {return false}
      return true
    }
  }
}

struct ProtobufUnittest_TestMutualRecursionB: SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "TestMutualRecursionB"
  static let protoPackageName: String = "protobuf_unittest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "a"),
    2: .unique(proto: "optional_int32", json: "optionalInt32"),
  ]

  private class _StorageClass {
    var _a: ProtobufUnittest_TestMutualRecursionA? = nil
    var _optionalInt32: Int32? = nil

    init() {}

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._a = _a
      clone._optionalInt32 = _optionalInt32
      return clone
    }
  }

  private var _storage = _StorageClass()

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }

  var a: ProtobufUnittest_TestMutualRecursionA {
    get {return _storage._a ?? ProtobufUnittest_TestMutualRecursionA()}
    set {_uniqueStorage()._a = newValue}
  }
  var hasA: Bool {
    return _storage._a != nil
  }
  mutating func clearA() {
    return _storage._a = nil
  }

  var optionalInt32: Int32 {
    get {return _storage._optionalInt32 ?? 0}
    set {_uniqueStorage()._optionalInt32 = newValue}
  }
  var hasOptionalInt32: Bool {
    return _storage._optionalInt32 != nil
  }
  mutating func clearOptionalInt32() {
    return _storage._optionalInt32 = nil
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
      }
    }
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 1: try decoder.decodeSingularMessageField(value: &_storage._a)
    case 2: try decoder.decodeSingularInt32Field(value: &_storage._optionalInt32)
    default: break
    }
  }

  func _protoc_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._a {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._optionalInt32 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestMutualRecursionB) -> Bool {
    return withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
      if _storage !== other_storage {
        if _storage._a != other_storage._a {return false}
        if _storage._optionalInt32 != other_storage._optionalInt32 {return false}
      }
      if unknownFields != other.unknownFields {return false}
      return true
    }
  }
}

///   Test that groups have disjoint field numbers from their siblings and
///   parents.  This is NOT possible in proto1; only google.protobuf.  When attempting
///   to compile with proto1, this will emit an error; so we only include it
///   in protobuf_unittest_proto.
struct ProtobufUnittest_TestDupFieldNumber: SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "TestDupFieldNumber"
  static let protoPackageName: String = "protobuf_unittest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "a"),
    2: .unique(proto: "Foo", json: "foo"),
    3: .unique(proto: "Bar", json: "bar"),
  ]

  private class _StorageClass {
    var _a: Int32? = nil
    var _foo: ProtobufUnittest_TestDupFieldNumber.Foo? = nil
    var _bar: ProtobufUnittest_TestDupFieldNumber.Bar? = nil

    init() {}

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._a = _a
      clone._foo = _foo
      clone._bar = _bar
      return clone
    }
  }

  private var _storage = _StorageClass()

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }

  ///   NO_PROTO1
  var a: Int32 {
    get {return _storage._a ?? 0}
    set {_uniqueStorage()._a = newValue}
  }
  var hasA: Bool {
    return _storage._a != nil
  }
  mutating func clearA() {
    return _storage._a = nil
  }

  var foo: ProtobufUnittest_TestDupFieldNumber.Foo {
    get {return _storage._foo ?? ProtobufUnittest_TestDupFieldNumber.Foo()}
    set {_uniqueStorage()._foo = newValue}
  }
  var hasFoo: Bool {
    return _storage._foo != nil
  }
  mutating func clearFoo() {
    return _storage._foo = nil
  }

  var bar: ProtobufUnittest_TestDupFieldNumber.Bar {
    get {return _storage._bar ?? ProtobufUnittest_TestDupFieldNumber.Bar()}
    set {_uniqueStorage()._bar = newValue}
  }
  var hasBar: Bool {
    return _storage._bar != nil
  }
  mutating func clearBar() {
    return _storage._bar = nil
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct Foo: SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = "Foo"
    static let protoPackageName: String = "protobuf_unittest"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
      1: .same(proto: "a"),
    ]

    private var _a: Int32? = nil
    var a: Int32 {
      get {return _a ?? 0}
      set {_a = newValue}
    }
    var hasA: Bool {
      return _a != nil
    }
    mutating func clearA() {
      return _a = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
      }
    }

    mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &_a)
      default: break
      }
    }

    func _protoc_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = _a {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }

    func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestDupFieldNumber.Foo) -> Bool {
      if _a != other._a {return false}
      if unknownFields != other.unknownFields {return false}
      return true
    }
  }

  struct Bar: SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = "Bar"
    static let protoPackageName: String = "protobuf_unittest"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
      1: .same(proto: "a"),
    ]

    private var _a: Int32? = nil
    var a: Int32 {
      get {return _a ?? 0}
      set {_a = newValue}
    }
    var hasA: Bool {
      return _a != nil
    }
    mutating func clearA() {
      return _a = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
      }
    }

    mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &_a)
      default: break
      }
    }

    func _protoc_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = _a {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }

    func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestDupFieldNumber.Bar) -> Bool {
      if _a != other._a {return false}
      if unknownFields != other.unknownFields {return false}
      return true
    }
  }

  init() {}

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
      }
    }
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 1: try decoder.decodeSingularInt32Field(value: &_storage._a)
    case 2: try decoder.decodeSingularGroupField(value: &_storage._foo)
    case 3: try decoder.decodeSingularGroupField(value: &_storage._bar)
    default: break
    }
  }

  func _protoc_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._a {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      if let v = _storage._foo {
        try visitor.visitSingularGroupField(value: v, fieldNumber: 2)
      }
      if let v = _storage._bar {
        try visitor.visitSingularGroupField(value: v, fieldNumber: 3)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestDupFieldNumber) -> Bool {
    return withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
      if _storage !== other_storage {
        if _storage._a != other_storage._a {return false}
        if _storage._foo != other_storage._foo {return false}
        if _storage._bar != other_storage._bar {return false}
      }
      if unknownFields != other.unknownFields {return false}
      return true
    }
  }
}

///   Additional messages for testing lazy fields.
struct ProtobufUnittest_TestEagerMessage: SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "TestEagerMessage"
  static let protoPackageName: String = "protobuf_unittest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .unique(proto: "sub_message", json: "subMessage"),
  ]

  private class _StorageClass {
    var _subMessage: ProtobufUnittest_TestAllTypes? = nil

    init() {}

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._subMessage = _subMessage
      return clone
    }
  }

  private var _storage = _StorageClass()

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }

  var subMessage: ProtobufUnittest_TestAllTypes {
    get {return _storage._subMessage ?? ProtobufUnittest_TestAllTypes()}
    set {_uniqueStorage()._subMessage = newValue}
  }
  var hasSubMessage: Bool {
    return _storage._subMessage != nil
  }
  mutating func clearSubMessage() {
    return _storage._subMessage = nil
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
      }
    }
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 1: try decoder.decodeSingularMessageField(value: &_storage._subMessage)
    default: break
    }
  }

  func _protoc_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._subMessage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestEagerMessage) -> Bool {
    return withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
      if _storage !== other_storage {
        if _storage._subMessage != other_storage._subMessage {return false}
      }
      if unknownFields != other.unknownFields {return false}
      return true
    }
  }
}

struct ProtobufUnittest_TestLazyMessage: SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "TestLazyMessage"
  static let protoPackageName: String = "protobuf_unittest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .unique(proto: "sub_message", json: "subMessage"),
  ]

  private class _StorageClass {
    var _subMessage: ProtobufUnittest_TestAllTypes? = nil

    init() {}

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._subMessage = _subMessage
      return clone
    }
  }

  private var _storage = _StorageClass()

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }

  var subMessage: ProtobufUnittest_TestAllTypes {
    get {return _storage._subMessage ?? ProtobufUnittest_TestAllTypes()}
    set {_uniqueStorage()._subMessage = newValue}
  }
  var hasSubMessage: Bool {
    return _storage._subMessage != nil
  }
  mutating func clearSubMessage() {
    return _storage._subMessage = nil
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
      }
    }
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 1: try decoder.decodeSingularMessageField(value: &_storage._subMessage)
    default: break
    }
  }

  func _protoc_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._subMessage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestLazyMessage) -> Bool {
    return withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
      if _storage !== other_storage {
        if _storage._subMessage != other_storage._subMessage {return false}
      }
      if unknownFields != other.unknownFields {return false}
      return true
    }
  }
}

///   Needed for a Python test.
struct ProtobufUnittest_TestNestedMessageHasBits: SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "TestNestedMessageHasBits"
  static let protoPackageName: String = "protobuf_unittest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .unique(proto: "optional_nested_message", json: "optionalNestedMessage"),
  ]

  private class _StorageClass {
    var _optionalNestedMessage: ProtobufUnittest_TestNestedMessageHasBits.NestedMessage? = nil

    init() {}

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._optionalNestedMessage = _optionalNestedMessage
      return clone
    }
  }

  private var _storage = _StorageClass()

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }

  var optionalNestedMessage: ProtobufUnittest_TestNestedMessageHasBits.NestedMessage {
    get {return _storage._optionalNestedMessage ?? ProtobufUnittest_TestNestedMessageHasBits.NestedMessage()}
    set {_uniqueStorage()._optionalNestedMessage = newValue}
  }
  var hasOptionalNestedMessage: Bool {
    return _storage._optionalNestedMessage != nil
  }
  mutating func clearOptionalNestedMessage() {
    return _storage._optionalNestedMessage = nil
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct NestedMessage: SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = "NestedMessage"
    static let protoPackageName: String = "protobuf_unittest"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
      1: .unique(proto: "nestedmessage_repeated_int32", json: "nestedmessageRepeatedInt32"),
      2: .unique(proto: "nestedmessage_repeated_foreignmessage", json: "nestedmessageRepeatedForeignmessage"),
    ]

    var nestedmessageRepeatedInt32: [Int32] = []

    var nestedmessageRepeatedForeignmessage: [ProtobufUnittest_ForeignMessage] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
      }
    }

    mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedInt32Field(value: &nestedmessageRepeatedInt32)
      case 2: try decoder.decodeRepeatedMessageField(value: &nestedmessageRepeatedForeignmessage)
      default: break
      }
    }

    func _protoc_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if !nestedmessageRepeatedInt32.isEmpty {
        try visitor.visitRepeatedInt32Field(value: nestedmessageRepeatedInt32, fieldNumber: 1)
      }
      if !nestedmessageRepeatedForeignmessage.isEmpty {
        try visitor.visitRepeatedMessageField(value: nestedmessageRepeatedForeignmessage, fieldNumber: 2)
      }
      try unknownFields.traverse(visitor: &visitor)
    }

    func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestNestedMessageHasBits.NestedMessage) -> Bool {
      if nestedmessageRepeatedInt32 != other.nestedmessageRepeatedInt32 {return false}
      if nestedmessageRepeatedForeignmessage != other.nestedmessageRepeatedForeignmessage {return false}
      if unknownFields != other.unknownFields {return false}
      return true
    }
  }

  init() {}

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
      }
    }
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 1: try decoder.decodeSingularMessageField(value: &_storage._optionalNestedMessage)
    default: break
    }
  }

  func _protoc_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._optionalNestedMessage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestNestedMessageHasBits) -> Bool {
    return withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
      if _storage !== other_storage {
        if _storage._optionalNestedMessage != other_storage._optionalNestedMessage {return false}
      }
      if unknownFields != other.unknownFields {return false}
      return true
    }
  }
}

///   Test message with CamelCase field names.  This violates Protocol Buffer
///   standard style.
struct ProtobufUnittest_TestCamelCaseFieldNames: SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "TestCamelCaseFieldNames"
  static let protoPackageName: String = "protobuf_unittest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "PrimitiveField"),
    2: .same(proto: "StringField"),
    3: .same(proto: "EnumField"),
    4: .same(proto: "MessageField"),
    5: .same(proto: "StringPieceField"),
    6: .same(proto: "CordField"),
    7: .same(proto: "RepeatedPrimitiveField"),
    8: .same(proto: "RepeatedStringField"),
    9: .same(proto: "RepeatedEnumField"),
    10: .same(proto: "RepeatedMessageField"),
    11: .same(proto: "RepeatedStringPieceField"),
    12: .same(proto: "RepeatedCordField"),
  ]

  private class _StorageClass {
    var _primitiveField: Int32? = nil
    var _stringField: String? = nil
    var _enumField: ProtobufUnittest_ForeignEnum? = nil
    var _messageField: ProtobufUnittest_ForeignMessage? = nil
    var _stringPieceField: String? = nil
    var _cordField: String? = nil
    var _repeatedPrimitiveField: [Int32] = []
    var _repeatedStringField: [String] = []
    var _repeatedEnumField: [ProtobufUnittest_ForeignEnum] = []
    var _repeatedMessageField: [ProtobufUnittest_ForeignMessage] = []
    var _repeatedStringPieceField: [String] = []
    var _repeatedCordField: [String] = []

    init() {}

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._primitiveField = _primitiveField
      clone._stringField = _stringField
      clone._enumField = _enumField
      clone._messageField = _messageField
      clone._stringPieceField = _stringPieceField
      clone._cordField = _cordField
      clone._repeatedPrimitiveField = _repeatedPrimitiveField
      clone._repeatedStringField = _repeatedStringField
      clone._repeatedEnumField = _repeatedEnumField
      clone._repeatedMessageField = _repeatedMessageField
      clone._repeatedStringPieceField = _repeatedStringPieceField
      clone._repeatedCordField = _repeatedCordField
      return clone
    }
  }

  private var _storage = _StorageClass()

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }

  var primitiveField: Int32 {
    get {return _storage._primitiveField ?? 0}
    set {_uniqueStorage()._primitiveField = newValue}
  }
  var hasPrimitiveField: Bool {
    return _storage._primitiveField != nil
  }
  mutating func clearPrimitiveField() {
    return _storage._primitiveField = nil
  }

  var stringField: String {
    get {return _storage._stringField ?? ""}
    set {_uniqueStorage()._stringField = newValue}
  }
  var hasStringField: Bool {
    return _storage._stringField != nil
  }
  mutating func clearStringField() {
    return _storage._stringField = nil
  }

  var enumField: ProtobufUnittest_ForeignEnum {
    get {return _storage._enumField ?? ProtobufUnittest_ForeignEnum.foreignFoo}
    set {_uniqueStorage()._enumField = newValue}
  }
  var hasEnumField: Bool {
    return _storage._enumField != nil
  }
  mutating func clearEnumField() {
    return _storage._enumField = nil
  }

  var messageField: ProtobufUnittest_ForeignMessage {
    get {return _storage._messageField ?? ProtobufUnittest_ForeignMessage()}
    set {_uniqueStorage()._messageField = newValue}
  }
  var hasMessageField: Bool {
    return _storage._messageField != nil
  }
  mutating func clearMessageField() {
    return _storage._messageField = nil
  }

  var stringPieceField: String {
    get {return _storage._stringPieceField ?? ""}
    set {_uniqueStorage()._stringPieceField = newValue}
  }
  var hasStringPieceField: Bool {
    return _storage._stringPieceField != nil
  }
  mutating func clearStringPieceField() {
    return _storage._stringPieceField = nil
  }

  var cordField: String {
    get {return _storage._cordField ?? ""}
    set {_uniqueStorage()._cordField = newValue}
  }
  var hasCordField: Bool {
    return _storage._cordField != nil
  }
  mutating func clearCordField() {
    return _storage._cordField = nil
  }

  var repeatedPrimitiveField: [Int32] {
    get {return _storage._repeatedPrimitiveField}
    set {_uniqueStorage()._repeatedPrimitiveField = newValue}
  }

  var repeatedStringField: [String] {
    get {return _storage._repeatedStringField}
    set {_uniqueStorage()._repeatedStringField = newValue}
  }

  var repeatedEnumField: [ProtobufUnittest_ForeignEnum] {
    get {return _storage._repeatedEnumField}
    set {_uniqueStorage()._repeatedEnumField = newValue}
  }

  var repeatedMessageField: [ProtobufUnittest_ForeignMessage] {
    get {return _storage._repeatedMessageField}
    set {_uniqueStorage()._repeatedMessageField = newValue}
  }

  var repeatedStringPieceField: [String] {
    get {return _storage._repeatedStringPieceField}
    set {_uniqueStorage()._repeatedStringPieceField = newValue}
  }

  var repeatedCordField: [String] {
    get {return _storage._repeatedCordField}
    set {_uniqueStorage()._repeatedCordField = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
      }
    }
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 1: try decoder.decodeSingularInt32Field(value: &_storage._primitiveField)
    case 2: try decoder.decodeSingularStringField(value: &_storage._stringField)
    case 3: try decoder.decodeSingularEnumField(value: &_storage._enumField)
    case 4: try decoder.decodeSingularMessageField(value: &_storage._messageField)
    case 5: try decoder.decodeSingularStringField(value: &_storage._stringPieceField)
    case 6: try decoder.decodeSingularStringField(value: &_storage._cordField)
    case 7: try decoder.decodeRepeatedInt32Field(value: &_storage._repeatedPrimitiveField)
    case 8: try decoder.decodeRepeatedStringField(value: &_storage._repeatedStringField)
    case 9: try decoder.decodeRepeatedEnumField(value: &_storage._repeatedEnumField)
    case 10: try decoder.decodeRepeatedMessageField(value: &_storage._repeatedMessageField)
    case 11: try decoder.decodeRepeatedStringField(value: &_storage._repeatedStringPieceField)
    case 12: try decoder.decodeRepeatedStringField(value: &_storage._repeatedCordField)
    default: break
    }
  }

  func _protoc_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._primitiveField {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      if let v = _storage._stringField {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      }
      if let v = _storage._enumField {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
      }
      if let v = _storage._messageField {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._stringPieceField {
        try visitor.visitSingularStringField(value: v, fieldNumber: 5)
      }
      if let v = _storage._cordField {
        try visitor.visitSingularStringField(value: v, fieldNumber: 6)
      }
      if !_storage._repeatedPrimitiveField.isEmpty {
        try visitor.visitRepeatedInt32Field(value: _storage._repeatedPrimitiveField, fieldNumber: 7)
      }
      if !_storage._repeatedStringField.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._repeatedStringField, fieldNumber: 8)
      }
      if !_storage._repeatedEnumField.isEmpty {
        try visitor.visitRepeatedEnumField(value: _storage._repeatedEnumField, fieldNumber: 9)
      }
      if !_storage._repeatedMessageField.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._repeatedMessageField, fieldNumber: 10)
      }
      if !_storage._repeatedStringPieceField.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._repeatedStringPieceField, fieldNumber: 11)
      }
      if !_storage._repeatedCordField.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._repeatedCordField, fieldNumber: 12)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestCamelCaseFieldNames) -> Bool {
    return withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
      if _storage !== other_storage {
        if _storage._primitiveField != other_storage._primitiveField {return false}
        if _storage._stringField != other_storage._stringField {return false}
        if _storage._enumField != other_storage._enumField {return false}
        if _storage._messageField != other_storage._messageField {return false}
        if _storage._stringPieceField != other_storage._stringPieceField {return false}
        if _storage._cordField != other_storage._cordField {return false}
        if _storage._repeatedPrimitiveField != other_storage._repeatedPrimitiveField {return false}
        if _storage._repeatedStringField != other_storage._repeatedStringField {return false}
        if _storage._repeatedEnumField != other_storage._repeatedEnumField {return false}
        if _storage._repeatedMessageField != other_storage._repeatedMessageField {return false}
        if _storage._repeatedStringPieceField != other_storage._repeatedStringPieceField {return false}
        if _storage._repeatedCordField != other_storage._repeatedCordField {return false}
      }
      if unknownFields != other.unknownFields {return false}
      return true
    }
  }
}

///   We list fields out of order, to ensure that we're using field number and not
///   field index to determine serialization order.
struct ProtobufUnittest_TestFieldOrderings: SwiftProtobuf.Proto2Message, SwiftProtobuf.ExtensibleMessage, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "TestFieldOrderings"
  static let protoPackageName: String = "protobuf_unittest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    11: .unique(proto: "my_string", json: "myString"),
    1: .unique(proto: "my_int", json: "myInt"),
    101: .unique(proto: "my_float", json: "myFloat"),
    200: .unique(proto: "optional_nested_message", json: "optionalNestedMessage"),
  ]

  private class _StorageClass {
    var _myString: String? = nil
    var _myInt: Int64? = nil
    var _myFloat: Float? = nil
    var _optionalNestedMessage: ProtobufUnittest_TestFieldOrderings.NestedMessage? = nil

    init() {}

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._myString = _myString
      clone._myInt = _myInt
      clone._myFloat = _myFloat
      clone._optionalNestedMessage = _optionalNestedMessage
      return clone
    }
  }

  private var _storage = _StorageClass()

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }

  var myString: String {
    get {return _storage._myString ?? ""}
    set {_uniqueStorage()._myString = newValue}
  }
  var hasMyString: Bool {
    return _storage._myString != nil
  }
  mutating func clearMyString() {
    return _storage._myString = nil
  }

  var myInt: Int64 {
    get {return _storage._myInt ?? 0}
    set {_uniqueStorage()._myInt = newValue}
  }
  var hasMyInt: Bool {
    return _storage._myInt != nil
  }
  mutating func clearMyInt() {
    return _storage._myInt = nil
  }

  var myFloat: Float {
    get {return _storage._myFloat ?? 0}
    set {_uniqueStorage()._myFloat = newValue}
  }
  var hasMyFloat: Bool {
    return _storage._myFloat != nil
  }
  mutating func clearMyFloat() {
    return _storage._myFloat = nil
  }

  var optionalNestedMessage: ProtobufUnittest_TestFieldOrderings.NestedMessage {
    get {return _storage._optionalNestedMessage ?? ProtobufUnittest_TestFieldOrderings.NestedMessage()}
    set {_uniqueStorage()._optionalNestedMessage = newValue}
  }
  var hasOptionalNestedMessage: Bool {
    return _storage._optionalNestedMessage != nil
  }
  mutating func clearOptionalNestedMessage() {
    return _storage._optionalNestedMessage = nil
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct NestedMessage: SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = "NestedMessage"
    static let protoPackageName: String = "protobuf_unittest"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
      2: .same(proto: "oo"),
      1: .same(proto: "bb"),
    ]

    private var _oo: Int64? = nil
    var oo: Int64 {
      get {return _oo ?? 0}
      set {_oo = newValue}
    }
    var hasOo: Bool {
      return _oo != nil
    }
    mutating func clearOo() {
      return _oo = nil
    }

    ///   The field name "b" fails to compile in proto1 because it conflicts with
    ///   a local variable named "b" in one of the generated methods.  Doh.
    ///   This file needs to compile in proto1 to test backwards-compatibility.
    private var _bb: Int32? = nil
    var bb: Int32 {
      get {return _bb ?? 0}
      set {_bb = newValue}
    }
    var hasBb: Bool {
      return _bb != nil
    }
    mutating func clearBb() {
      return _bb = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
      }
    }

    mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
      switch fieldNumber {
      case 2: try decoder.decodeSingularInt64Field(value: &_oo)
      case 1: try decoder.decodeSingularInt32Field(value: &_bb)
      default: break
      }
    }

    func _protoc_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = _bb {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      if let v = _oo {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 2)
      }
      try unknownFields.traverse(visitor: &visitor)
    }

    func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestFieldOrderings.NestedMessage) -> Bool {
      if _oo != other._oo {return false}
      if _bb != other._bb {return false}
      if unknownFields != other.unknownFields {return false}
      return true
    }
  }

  init() {}

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_extensionFieldValues.isInitialized {return false}
      return true
    }
  }

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
      }
    }
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 11: try decoder.decodeSingularStringField(value: &_storage._myString)
    case 1: try decoder.decodeSingularInt64Field(value: &_storage._myInt)
    case 101: try decoder.decodeSingularFloatField(value: &_storage._myFloat)
    case 200: try decoder.decodeSingularMessageField(value: &_storage._optionalNestedMessage)
    default: if (2 <= fieldNumber && fieldNumber < 11) || (12 <= fieldNumber && fieldNumber < 101) {
        try decoder.decodeExtensionField(values: &_extensionFieldValues, messageType: ProtobufUnittest_TestFieldOrderings.self, fieldNumber: fieldNumber)
      }
    }
  }

  func _protoc_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._myInt {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 1)
      }
      try visitor.visitExtensionFields(fields: _extensionFieldValues, start: 2, end: 11)
      if let v = _storage._myString {
        try visitor.visitSingularStringField(value: v, fieldNumber: 11)
      }
      try visitor.visitExtensionFields(fields: _extensionFieldValues, start: 12, end: 101)
      if let v = _storage._myFloat {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 101)
      }
      if let v = _storage._optionalNestedMessage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 200)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestFieldOrderings) -> Bool {
    return withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
      if _storage !== other_storage {
        if _storage._myString != other_storage._myString {return false}
        if _storage._myInt != other_storage._myInt {return false}
        if _storage._myFloat != other_storage._myFloat {return false}
        if _storage._optionalNestedMessage != other_storage._optionalNestedMessage {return false}
      }
      if unknownFields != other.unknownFields {return false}
      if _extensionFieldValues != other._extensionFieldValues {return false}
      return true
    }
  }

  private var _extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()

  mutating func setExtensionValue<F: SwiftProtobuf.ExtensionField>(ext: SwiftProtobuf.MessageExtension<F, ProtobufUnittest_TestFieldOrderings>, value: F.ValueType) {
    _extensionFieldValues[ext.fieldNumber] = ext.set(value: value)
  }

  mutating func clearExtensionValue<F: SwiftProtobuf.ExtensionField>(ext: SwiftProtobuf.MessageExtension<F, ProtobufUnittest_TestFieldOrderings>) {
    _extensionFieldValues[ext.fieldNumber] = nil
  }

  func getExtensionValue<F: SwiftProtobuf.ExtensionField>(ext: SwiftProtobuf.MessageExtension<F, ProtobufUnittest_TestFieldOrderings>) -> F.ValueType {
    if let fieldValue = _extensionFieldValues[ext.fieldNumber] as? F {
      return fieldValue.value
    }
    return ext.defaultValue
  }

  func hasExtensionValue<F: SwiftProtobuf.ExtensionField>(ext: SwiftProtobuf.MessageExtension<F, ProtobufUnittest_TestFieldOrderings>) -> Bool {
    return _extensionFieldValues[ext.fieldNumber] is F
  }
  func _protobuf_names(for number: Int) -> _NameMap.Names? {
    return ProtobufUnittest_TestFieldOrderings._protobuf_nameMap.names(for: number) ?? _extensionFieldValues.fieldNames(for: number)
  }
}

struct ProtobufUnittest_TestExtremeDefaultValues: SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "TestExtremeDefaultValues"
  static let protoPackageName: String = "protobuf_unittest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .unique(proto: "escaped_bytes", json: "escapedBytes"),
    2: .unique(proto: "large_uint32", json: "largeUint32"),
    3: .unique(proto: "large_uint64", json: "largeUint64"),
    4: .unique(proto: "small_int32", json: "smallInt32"),
    5: .unique(proto: "small_int64", json: "smallInt64"),
    21: .unique(proto: "really_small_int32", json: "reallySmallInt32"),
    22: .unique(proto: "really_small_int64", json: "reallySmallInt64"),
    6: .unique(proto: "utf8_string", json: "utf8String"),
    7: .unique(proto: "zero_float", json: "zeroFloat"),
    8: .unique(proto: "one_float", json: "oneFloat"),
    9: .unique(proto: "small_float", json: "smallFloat"),
    10: .unique(proto: "negative_one_float", json: "negativeOneFloat"),
    11: .unique(proto: "negative_float", json: "negativeFloat"),
    12: .unique(proto: "large_float", json: "largeFloat"),
    13: .unique(proto: "small_negative_float", json: "smallNegativeFloat"),
    14: .unique(proto: "inf_double", json: "infDouble"),
    15: .unique(proto: "neg_inf_double", json: "negInfDouble"),
    16: .unique(proto: "nan_double", json: "nanDouble"),
    17: .unique(proto: "inf_float", json: "infFloat"),
    18: .unique(proto: "neg_inf_float", json: "negInfFloat"),
    19: .unique(proto: "nan_float", json: "nanFloat"),
    20: .unique(proto: "cpp_trigraph", json: "cppTrigraph"),
    23: .unique(proto: "string_with_zero", json: "stringWithZero"),
    24: .unique(proto: "bytes_with_zero", json: "bytesWithZero"),
    25: .unique(proto: "string_piece_with_zero", json: "stringPieceWithZero"),
    26: .unique(proto: "cord_with_zero", json: "cordWithZero"),
    27: .unique(proto: "replacement_string", json: "replacementString"),
  ]

  private class _StorageClass {
    var _escapedBytes: Data? = nil
    var _largeUint32: UInt32? = nil
    var _largeUint64: UInt64? = nil
    var _smallInt32: Int32? = nil
    var _smallInt64: Int64? = nil
    var _reallySmallInt32: Int32? = nil
    var _reallySmallInt64: Int64? = nil
    var _utf8String: String? = nil
    var _zeroFloat: Float? = nil
    var _oneFloat: Float? = nil
    var _smallFloat: Float? = nil
    var _negativeOneFloat: Float? = nil
    var _negativeFloat: Float? = nil
    var _largeFloat: Float? = nil
    var _smallNegativeFloat: Float? = nil
    var _infDouble: Double? = nil
    var _negInfDouble: Double? = nil
    var _nanDouble: Double? = nil
    var _infFloat: Float? = nil
    var _negInfFloat: Float? = nil
    var _nanFloat: Float? = nil
    var _cppTrigraph: String? = nil
    var _stringWithZero: String? = nil
    var _bytesWithZero: Data? = nil
    var _stringPieceWithZero: String? = nil
    var _cordWithZero: String? = nil
    var _replacementString: String? = nil

    init() {}

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._escapedBytes = _escapedBytes
      clone._largeUint32 = _largeUint32
      clone._largeUint64 = _largeUint64
      clone._smallInt32 = _smallInt32
      clone._smallInt64 = _smallInt64
      clone._reallySmallInt32 = _reallySmallInt32
      clone._reallySmallInt64 = _reallySmallInt64
      clone._utf8String = _utf8String
      clone._zeroFloat = _zeroFloat
      clone._oneFloat = _oneFloat
      clone._smallFloat = _smallFloat
      clone._negativeOneFloat = _negativeOneFloat
      clone._negativeFloat = _negativeFloat
      clone._largeFloat = _largeFloat
      clone._smallNegativeFloat = _smallNegativeFloat
      clone._infDouble = _infDouble
      clone._negInfDouble = _negInfDouble
      clone._nanDouble = _nanDouble
      clone._infFloat = _infFloat
      clone._negInfFloat = _negInfFloat
      clone._nanFloat = _nanFloat
      clone._cppTrigraph = _cppTrigraph
      clone._stringWithZero = _stringWithZero
      clone._bytesWithZero = _bytesWithZero
      clone._stringPieceWithZero = _stringPieceWithZero
      clone._cordWithZero = _cordWithZero
      clone._replacementString = _replacementString
      return clone
    }
  }

  private var _storage = _StorageClass()

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }

  var escapedBytes: Data {
    get {return _storage._escapedBytes ?? Data(bytes: [0, 1, 7, 8, 12, 10, 13, 9, 11, 92, 39, 34, 254])}
    set {_uniqueStorage()._escapedBytes = newValue}
  }
  var hasEscapedBytes: Bool {
    return _storage._escapedBytes != nil
  }
  mutating func clearEscapedBytes() {
    return _storage._escapedBytes = nil
  }

  var largeUint32: UInt32 {
    get {return _storage._largeUint32 ?? 4294967295}
    set {_uniqueStorage()._largeUint32 = newValue}
  }
  var hasLargeUint32: Bool {
    return _storage._largeUint32 != nil
  }
  mutating func clearLargeUint32() {
    return _storage._largeUint32 = nil
  }

  var largeUint64: UInt64 {
    get {return _storage._largeUint64 ?? 18446744073709551615}
    set {_uniqueStorage()._largeUint64 = newValue}
  }
  var hasLargeUint64: Bool {
    return _storage._largeUint64 != nil
  }
  mutating func clearLargeUint64() {
    return _storage._largeUint64 = nil
  }

  var smallInt32: Int32 {
    get {return _storage._smallInt32 ?? -2147483647}
    set {_uniqueStorage()._smallInt32 = newValue}
  }
  var hasSmallInt32: Bool {
    return _storage._smallInt32 != nil
  }
  mutating func clearSmallInt32() {
    return _storage._smallInt32 = nil
  }

  var smallInt64: Int64 {
    get {return _storage._smallInt64 ?? -9223372036854775807}
    set {_uniqueStorage()._smallInt64 = newValue}
  }
  var hasSmallInt64: Bool {
    return _storage._smallInt64 != nil
  }
  mutating func clearSmallInt64() {
    return _storage._smallInt64 = nil
  }

  var reallySmallInt32: Int32 {
    get {return _storage._reallySmallInt32 ?? -2147483648}
    set {_uniqueStorage()._reallySmallInt32 = newValue}
  }
  var hasReallySmallInt32: Bool {
    return _storage._reallySmallInt32 != nil
  }
  mutating func clearReallySmallInt32() {
    return _storage._reallySmallInt32 = nil
  }

  var reallySmallInt64: Int64 {
    get {return _storage._reallySmallInt64 ?? -9223372036854775808}
    set {_uniqueStorage()._reallySmallInt64 = newValue}
  }
  var hasReallySmallInt64: Bool {
    return _storage._reallySmallInt64 != nil
  }
  mutating func clearReallySmallInt64() {
    return _storage._reallySmallInt64 = nil
  }

  ///   The default value here is UTF-8 for "\u1234".  (We could also just type
  ///   the UTF-8 text directly into this text file rather than escape it, but
  ///   lots of people use editors that would be confused by this.)
  var utf8String: String {
    get {return _storage._utf8String ?? "ሴ"}
    set {_uniqueStorage()._utf8String = newValue}
  }
  var hasUtf8String: Bool {
    return _storage._utf8String != nil
  }
  mutating func clearUtf8String() {
    return _storage._utf8String = nil
  }

  ///   Tests for single-precision floating-point values.
  var zeroFloat: Float {
    get {return _storage._zeroFloat ?? 0}
    set {_uniqueStorage()._zeroFloat = newValue}
  }
  var hasZeroFloat: Bool {
    return _storage._zeroFloat != nil
  }
  mutating func clearZeroFloat() {
    return _storage._zeroFloat = nil
  }

  var oneFloat: Float {
    get {return _storage._oneFloat ?? 1}
    set {_uniqueStorage()._oneFloat = newValue}
  }
  var hasOneFloat: Bool {
    return _storage._oneFloat != nil
  }
  mutating func clearOneFloat() {
    return _storage._oneFloat = nil
  }

  var smallFloat: Float {
    get {return _storage._smallFloat ?? 1.5}
    set {_uniqueStorage()._smallFloat = newValue}
  }
  var hasSmallFloat: Bool {
    return _storage._smallFloat != nil
  }
  mutating func clearSmallFloat() {
    return _storage._smallFloat = nil
  }

  var negativeOneFloat: Float {
    get {return _storage._negativeOneFloat ?? -1}
    set {_uniqueStorage()._negativeOneFloat = newValue}
  }
  var hasNegativeOneFloat: Bool {
    return _storage._negativeOneFloat != nil
  }
  mutating func clearNegativeOneFloat() {
    return _storage._negativeOneFloat = nil
  }

  var negativeFloat: Float {
    get {return _storage._negativeFloat ?? -1.5}
    set {_uniqueStorage()._negativeFloat = newValue}
  }
  var hasNegativeFloat: Bool {
    return _storage._negativeFloat != nil
  }
  mutating func clearNegativeFloat() {
    return _storage._negativeFloat = nil
  }

  ///   Using exponents
  var largeFloat: Float {
    get {return _storage._largeFloat ?? 2e+08}
    set {_uniqueStorage()._largeFloat = newValue}
  }
  var hasLargeFloat: Bool {
    return _storage._largeFloat != nil
  }
  mutating func clearLargeFloat() {
    return _storage._largeFloat = nil
  }

  var smallNegativeFloat: Float {
    get {return _storage._smallNegativeFloat ?? -8e-28}
    set {_uniqueStorage()._smallNegativeFloat = newValue}
  }
  var hasSmallNegativeFloat: Bool {
    return _storage._smallNegativeFloat != nil
  }
  mutating func clearSmallNegativeFloat() {
    return _storage._smallNegativeFloat = nil
  }

  ///   Text for nonfinite floating-point values.
  var infDouble: Double {
    get {return _storage._infDouble ?? Double.infinity}
    set {_uniqueStorage()._infDouble = newValue}
  }
  var hasInfDouble: Bool {
    return _storage._infDouble != nil
  }
  mutating func clearInfDouble() {
    return _storage._infDouble = nil
  }

  var negInfDouble: Double {
    get {return _storage._negInfDouble ?? -Double.infinity}
    set {_uniqueStorage()._negInfDouble = newValue}
  }
  var hasNegInfDouble: Bool {
    return _storage._negInfDouble != nil
  }
  mutating func clearNegInfDouble() {
    return _storage._negInfDouble = nil
  }

  var nanDouble: Double {
    get {return _storage._nanDouble ?? Double.nan}
    set {_uniqueStorage()._nanDouble = newValue}
  }
  var hasNanDouble: Bool {
    return _storage._nanDouble != nil
  }
  mutating func clearNanDouble() {
    return _storage._nanDouble = nil
  }

  var infFloat: Float {
    get {return _storage._infFloat ?? Float.infinity}
    set {_uniqueStorage()._infFloat = newValue}
  }
  var hasInfFloat: Bool {
    return _storage._infFloat != nil
  }
  mutating func clearInfFloat() {
    return _storage._infFloat = nil
  }

  var negInfFloat: Float {
    get {return _storage._negInfFloat ?? -Float.infinity}
    set {_uniqueStorage()._negInfFloat = newValue}
  }
  var hasNegInfFloat: Bool {
    return _storage._negInfFloat != nil
  }
  mutating func clearNegInfFloat() {
    return _storage._negInfFloat = nil
  }

  var nanFloat: Float {
    get {return _storage._nanFloat ?? Float.nan}
    set {_uniqueStorage()._nanFloat = newValue}
  }
  var hasNanFloat: Bool {
    return _storage._nanFloat != nil
  }
  mutating func clearNanFloat() {
    return _storage._nanFloat = nil
  }

  ///   Tests for C++ trigraphs.
  ///   Trigraphs should be escaped in C++ generated files, but they should not be
  ///   escaped for other languages.
  ///   Note that in .proto file, "\?" is a valid way to escape ? in string
  ///   literals.
  var cppTrigraph: String {
    get {return _storage._cppTrigraph ?? "? ? ?? ?? ??? ??/ ??-"}
    set {_uniqueStorage()._cppTrigraph = newValue}
  }
  var hasCppTrigraph: Bool {
    return _storage._cppTrigraph != nil
  }
  mutating func clearCppTrigraph() {
    return _storage._cppTrigraph = nil
  }

  ///   String defaults containing the character '\000'
  var stringWithZero: String {
    get {return _storage._stringWithZero ?? "hel\0lo"}
    set {_uniqueStorage()._stringWithZero = newValue}
  }
  var hasStringWithZero: Bool {
    return _storage._stringWithZero != nil
  }
  mutating func clearStringWithZero() {
    return _storage._stringWithZero = nil
  }

  var bytesWithZero: Data {
    get {return _storage._bytesWithZero ?? Data(bytes: [119, 111, 114, 0, 108, 100])}
    set {_uniqueStorage()._bytesWithZero = newValue}
  }
  var hasBytesWithZero: Bool {
    return _storage._bytesWithZero != nil
  }
  mutating func clearBytesWithZero() {
    return _storage._bytesWithZero = nil
  }

  var stringPieceWithZero: String {
    get {return _storage._stringPieceWithZero ?? "ab\0c"}
    set {_uniqueStorage()._stringPieceWithZero = newValue}
  }
  var hasStringPieceWithZero: Bool {
    return _storage._stringPieceWithZero != nil
  }
  mutating func clearStringPieceWithZero() {
    return _storage._stringPieceWithZero = nil
  }

  var cordWithZero: String {
    get {return _storage._cordWithZero ?? "12\03"}
    set {_uniqueStorage()._cordWithZero = newValue}
  }
  var hasCordWithZero: Bool {
    return _storage._cordWithZero != nil
  }
  mutating func clearCordWithZero() {
    return _storage._cordWithZero = nil
  }

  var replacementString: String {
    get {return _storage._replacementString ?? "${unknown}"}
    set {_uniqueStorage()._replacementString = newValue}
  }
  var hasReplacementString: Bool {
    return _storage._replacementString != nil
  }
  mutating func clearReplacementString() {
    return _storage._replacementString = nil
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
      }
    }
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 1: try decoder.decodeSingularBytesField(value: &_storage._escapedBytes)
    case 2: try decoder.decodeSingularUInt32Field(value: &_storage._largeUint32)
    case 3: try decoder.decodeSingularUInt64Field(value: &_storage._largeUint64)
    case 4: try decoder.decodeSingularInt32Field(value: &_storage._smallInt32)
    case 5: try decoder.decodeSingularInt64Field(value: &_storage._smallInt64)
    case 21: try decoder.decodeSingularInt32Field(value: &_storage._reallySmallInt32)
    case 22: try decoder.decodeSingularInt64Field(value: &_storage._reallySmallInt64)
    case 6: try decoder.decodeSingularStringField(value: &_storage._utf8String)
    case 7: try decoder.decodeSingularFloatField(value: &_storage._zeroFloat)
    case 8: try decoder.decodeSingularFloatField(value: &_storage._oneFloat)
    case 9: try decoder.decodeSingularFloatField(value: &_storage._smallFloat)
    case 10: try decoder.decodeSingularFloatField(value: &_storage._negativeOneFloat)
    case 11: try decoder.decodeSingularFloatField(value: &_storage._negativeFloat)
    case 12: try decoder.decodeSingularFloatField(value: &_storage._largeFloat)
    case 13: try decoder.decodeSingularFloatField(value: &_storage._smallNegativeFloat)
    case 14: try decoder.decodeSingularDoubleField(value: &_storage._infDouble)
    case 15: try decoder.decodeSingularDoubleField(value: &_storage._negInfDouble)
    case 16: try decoder.decodeSingularDoubleField(value: &_storage._nanDouble)
    case 17: try decoder.decodeSingularFloatField(value: &_storage._infFloat)
    case 18: try decoder.decodeSingularFloatField(value: &_storage._negInfFloat)
    case 19: try decoder.decodeSingularFloatField(value: &_storage._nanFloat)
    case 20: try decoder.decodeSingularStringField(value: &_storage._cppTrigraph)
    case 23: try decoder.decodeSingularStringField(value: &_storage._stringWithZero)
    case 24: try decoder.decodeSingularBytesField(value: &_storage._bytesWithZero)
    case 25: try decoder.decodeSingularStringField(value: &_storage._stringPieceWithZero)
    case 26: try decoder.decodeSingularStringField(value: &_storage._cordWithZero)
    case 27: try decoder.decodeSingularStringField(value: &_storage._replacementString)
    default: break
    }
  }

  func _protoc_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._escapedBytes {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 1)
      }
      if let v = _storage._largeUint32 {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
      }
      if let v = _storage._largeUint64 {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 3)
      }
      if let v = _storage._smallInt32 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 4)
      }
      if let v = _storage._smallInt64 {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 5)
      }
      if let v = _storage._utf8String {
        try visitor.visitSingularStringField(value: v, fieldNumber: 6)
      }
      if let v = _storage._zeroFloat {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 7)
      }
      if let v = _storage._oneFloat {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 8)
      }
      if let v = _storage._smallFloat {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 9)
      }
      if let v = _storage._negativeOneFloat {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 10)
      }
      if let v = _storage._negativeFloat {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 11)
      }
      if let v = _storage._largeFloat {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 12)
      }
      if let v = _storage._smallNegativeFloat {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 13)
      }
      if let v = _storage._infDouble {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 14)
      }
      if let v = _storage._negInfDouble {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 15)
      }
      if let v = _storage._nanDouble {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 16)
      }
      if let v = _storage._infFloat {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 17)
      }
      if let v = _storage._negInfFloat {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 18)
      }
      if let v = _storage._nanFloat {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 19)
      }
      if let v = _storage._cppTrigraph {
        try visitor.visitSingularStringField(value: v, fieldNumber: 20)
      }
      if let v = _storage._reallySmallInt32 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 21)
      }
      if let v = _storage._reallySmallInt64 {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 22)
      }
      if let v = _storage._stringWithZero {
        try visitor.visitSingularStringField(value: v, fieldNumber: 23)
      }
      if let v = _storage._bytesWithZero {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 24)
      }
      if let v = _storage._stringPieceWithZero {
        try visitor.visitSingularStringField(value: v, fieldNumber: 25)
      }
      if let v = _storage._cordWithZero {
        try visitor.visitSingularStringField(value: v, fieldNumber: 26)
      }
      if let v = _storage._replacementString {
        try visitor.visitSingularStringField(value: v, fieldNumber: 27)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestExtremeDefaultValues) -> Bool {
    return withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
      if _storage !== other_storage {
        if _storage._escapedBytes != other_storage._escapedBytes {return false}
        if _storage._largeUint32 != other_storage._largeUint32 {return false}
        if _storage._largeUint64 != other_storage._largeUint64 {return false}
        if _storage._smallInt32 != other_storage._smallInt32 {return false}
        if _storage._smallInt64 != other_storage._smallInt64 {return false}
        if _storage._reallySmallInt32 != other_storage._reallySmallInt32 {return false}
        if _storage._reallySmallInt64 != other_storage._reallySmallInt64 {return false}
        if _storage._utf8String != other_storage._utf8String {return false}
        if _storage._zeroFloat != other_storage._zeroFloat {return false}
        if _storage._oneFloat != other_storage._oneFloat {return false}
        if _storage._smallFloat != other_storage._smallFloat {return false}
        if _storage._negativeOneFloat != other_storage._negativeOneFloat {return false}
        if _storage._negativeFloat != other_storage._negativeFloat {return false}
        if _storage._largeFloat != other_storage._largeFloat {return false}
        if _storage._smallNegativeFloat != other_storage._smallNegativeFloat {return false}
        if _storage._infDouble != other_storage._infDouble {return false}
        if _storage._negInfDouble != other_storage._negInfDouble {return false}
        if _storage._nanDouble != other_storage._nanDouble {return false}
        if _storage._infFloat != other_storage._infFloat {return false}
        if _storage._negInfFloat != other_storage._negInfFloat {return false}
        if _storage._nanFloat != other_storage._nanFloat {return false}
        if _storage._cppTrigraph != other_storage._cppTrigraph {return false}
        if _storage._stringWithZero != other_storage._stringWithZero {return false}
        if _storage._bytesWithZero != other_storage._bytesWithZero {return false}
        if _storage._stringPieceWithZero != other_storage._stringPieceWithZero {return false}
        if _storage._cordWithZero != other_storage._cordWithZero {return false}
        if _storage._replacementString != other_storage._replacementString {return false}
      }
      if unknownFields != other.unknownFields {return false}
      return true
    }
  }
}

struct ProtobufUnittest_SparseEnumMessage: SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "SparseEnumMessage"
  static let protoPackageName: String = "protobuf_unittest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .unique(proto: "sparse_enum", json: "sparseEnum"),
  ]

  private var _sparseEnum: ProtobufUnittest_TestSparseEnum? = nil
  var sparseEnum: ProtobufUnittest_TestSparseEnum {
    get {return _sparseEnum ?? ProtobufUnittest_TestSparseEnum.sparseA}
    set {_sparseEnum = newValue}
  }
  var hasSparseEnum: Bool {
    return _sparseEnum != nil
  }
  mutating func clearSparseEnum() {
    return _sparseEnum = nil
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
    }
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 1: try decoder.decodeSingularEnumField(value: &_sparseEnum)
    default: break
    }
  }

  func _protoc_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = _sparseEnum {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protoc_generated_isEqualTo(other: ProtobufUnittest_SparseEnumMessage) -> Bool {
    if _sparseEnum != other._sparseEnum {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

///   Test String and Bytes: string is for valid UTF-8 strings
struct ProtobufUnittest_OneString: SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "OneString"
  static let protoPackageName: String = "protobuf_unittest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]

  private var _data: String? = nil
  var data: String {
    get {return _data ?? ""}
    set {_data = newValue}
  }
  var hasData: Bool {
    return _data != nil
  }
  mutating func clearData() {
    return _data = nil
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
    }
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 1: try decoder.decodeSingularStringField(value: &_data)
    default: break
    }
  }

  func _protoc_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = _data {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protoc_generated_isEqualTo(other: ProtobufUnittest_OneString) -> Bool {
    if _data != other._data {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

struct ProtobufUnittest_MoreString: SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "MoreString"
  static let protoPackageName: String = "protobuf_unittest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]

  var data: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
    }
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 1: try decoder.decodeRepeatedStringField(value: &data)
    default: break
    }
  }

  func _protoc_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !data.isEmpty {
      try visitor.visitRepeatedStringField(value: data, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protoc_generated_isEqualTo(other: ProtobufUnittest_MoreString) -> Bool {
    if data != other.data {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

struct ProtobufUnittest_OneBytes: SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "OneBytes"
  static let protoPackageName: String = "protobuf_unittest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]

  private var _data: Data? = nil
  var data: Data {
    get {return _data ?? Data()}
    set {_data = newValue}
  }
  var hasData: Bool {
    return _data != nil
  }
  mutating func clearData() {
    return _data = nil
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
    }
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 1: try decoder.decodeSingularBytesField(value: &_data)
    default: break
    }
  }

  func _protoc_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = _data {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protoc_generated_isEqualTo(other: ProtobufUnittest_OneBytes) -> Bool {
    if _data != other._data {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

struct ProtobufUnittest_MoreBytes: SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "MoreBytes"
  static let protoPackageName: String = "protobuf_unittest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]

  var data: [Data] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
    }
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 1: try decoder.decodeRepeatedBytesField(value: &data)
    default: break
    }
  }

  func _protoc_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !data.isEmpty {
      try visitor.visitRepeatedBytesField(value: data, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protoc_generated_isEqualTo(other: ProtobufUnittest_MoreBytes) -> Bool {
    if data != other.data {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

///   Test int32, uint32, int64, uint64, and bool are all compatible
struct ProtobufUnittest_Int32Message: SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Int32Message"
  static let protoPackageName: String = "protobuf_unittest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]

  private var _data: Int32? = nil
  var data: Int32 {
    get {return _data ?? 0}
    set {_data = newValue}
  }
  var hasData: Bool {
    return _data != nil
  }
  mutating func clearData() {
    return _data = nil
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
    }
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 1: try decoder.decodeSingularInt32Field(value: &_data)
    default: break
    }
  }

  func _protoc_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = _data {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protoc_generated_isEqualTo(other: ProtobufUnittest_Int32Message) -> Bool {
    if _data != other._data {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

struct ProtobufUnittest_Uint32Message: SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Uint32Message"
  static let protoPackageName: String = "protobuf_unittest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]

  private var _data: UInt32? = nil
  var data: UInt32 {
    get {return _data ?? 0}
    set {_data = newValue}
  }
  var hasData: Bool {
    return _data != nil
  }
  mutating func clearData() {
    return _data = nil
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
    }
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 1: try decoder.decodeSingularUInt32Field(value: &_data)
    default: break
    }
  }

  func _protoc_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = _data {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protoc_generated_isEqualTo(other: ProtobufUnittest_Uint32Message) -> Bool {
    if _data != other._data {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

struct ProtobufUnittest_Int64Message: SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Int64Message"
  static let protoPackageName: String = "protobuf_unittest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]

  private var _data: Int64? = nil
  var data: Int64 {
    get {return _data ?? 0}
    set {_data = newValue}
  }
  var hasData: Bool {
    return _data != nil
  }
  mutating func clearData() {
    return _data = nil
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
    }
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 1: try decoder.decodeSingularInt64Field(value: &_data)
    default: break
    }
  }

  func _protoc_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = _data {
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protoc_generated_isEqualTo(other: ProtobufUnittest_Int64Message) -> Bool {
    if _data != other._data {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

struct ProtobufUnittest_Uint64Message: SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Uint64Message"
  static let protoPackageName: String = "protobuf_unittest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]

  private var _data: UInt64? = nil
  var data: UInt64 {
    get {return _data ?? 0}
    set {_data = newValue}
  }
  var hasData: Bool {
    return _data != nil
  }
  mutating func clearData() {
    return _data = nil
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
    }
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 1: try decoder.decodeSingularUInt64Field(value: &_data)
    default: break
    }
  }

  func _protoc_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = _data {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protoc_generated_isEqualTo(other: ProtobufUnittest_Uint64Message) -> Bool {
    if _data != other._data {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

struct ProtobufUnittest_BoolMessage: SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "BoolMessage"
  static let protoPackageName: String = "protobuf_unittest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]

  private var _data: Bool? = nil
  var data: Bool {
    get {return _data ?? false}
    set {_data = newValue}
  }
  var hasData: Bool {
    return _data != nil
  }
  mutating func clearData() {
    return _data = nil
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
    }
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 1: try decoder.decodeSingularBoolField(value: &_data)
    default: break
    }
  }

  func _protoc_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = _data {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protoc_generated_isEqualTo(other: ProtobufUnittest_BoolMessage) -> Bool {
    if _data != other._data {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

///   Test oneofs.
struct ProtobufUnittest_TestOneof: SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "TestOneof"
  static let protoPackageName: String = "protobuf_unittest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .unique(proto: "foo_int", json: "fooInt"),
    2: .unique(proto: "foo_string", json: "fooString"),
    3: .unique(proto: "foo_message", json: "fooMessage"),
    4: .unique(proto: "FooGroup", json: "foogroup"),
  ]

  private class _StorageClass {
    var _foo: ProtobufUnittest_TestOneof.OneOf_Foo?

    init() {}

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._foo = _foo
      return clone
    }
  }

  private var _storage = _StorageClass()

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }

  var fooInt: Int32 {
    get {
      if case .fooInt(let v)? = _storage._foo {
        return v
      }
      return 0
    }
    set {
      _uniqueStorage()._foo = .fooInt(newValue)
    }
  }

  var fooString: String {
    get {
      if case .fooString(let v)? = _storage._foo {
        return v
      }
      return ""
    }
    set {
      _uniqueStorage()._foo = .fooString(newValue)
    }
  }

  var fooMessage: ProtobufUnittest_TestAllTypes {
    get {
      if case .fooMessage(let v)? = _storage._foo {
        return v
      }
      return ProtobufUnittest_TestAllTypes()
    }
    set {
      _uniqueStorage()._foo = .fooMessage(newValue)
    }
  }

  var fooGroup: ProtobufUnittest_TestOneof.FooGroup {
    get {
      if case .fooGroup(let v)? = _storage._foo {
        return v
      }
      return ProtobufUnittest_TestOneof.FooGroup()
    }
    set {
      _uniqueStorage()._foo = .fooGroup(newValue)
    }
  }

  var foo: OneOf_Foo? {
    get {return _storage._foo}
    set {
      _uniqueStorage()._foo = newValue
    }
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Foo: Equatable {
    case fooInt(Int32)
    case fooString(String)
    case fooMessage(ProtobufUnittest_TestAllTypes)
    case fooGroup(ProtobufUnittest_TestOneof.FooGroup)

    static func ==(lhs: ProtobufUnittest_TestOneof.OneOf_Foo, rhs: ProtobufUnittest_TestOneof.OneOf_Foo) -> Bool {
      switch (lhs, rhs) {
      case (.fooInt(let l), .fooInt(let r)): return l == r
      case (.fooString(let l), .fooString(let r)): return l == r
      case (.fooMessage(let l), .fooMessage(let r)): return l == r
      case (.fooGroup(let l), .fooGroup(let r)): return l == r
      default: return false
      }
    }

    fileprivate init?<T: SwiftProtobuf.Decoder>(byDecodingFrom decoder: inout T, fieldNumber: Int) throws {
      switch fieldNumber {
      case 1:
        var value: Int32?
        try decoder.decodeSingularInt32Field(value: &value)
        if let value = value {
          self = .fooInt(value)
          return
        }
      case 2:
        var value: String?
        try decoder.decodeSingularStringField(value: &value)
        if let value = value {
          self = .fooString(value)
          return
        }
      case 3:
        var value: ProtobufUnittest_TestAllTypes?
        try decoder.decodeSingularMessageField(value: &value)
        if let value = value {
          self = .fooMessage(value)
          return
        }
      case 4:
        var value: ProtobufUnittest_TestOneof.FooGroup?
        try decoder.decodeSingularGroupField(value: &value)
        if let value = value {
          self = .fooGroup(value)
          return
        }
      default:
        break
      }
      return nil
    }

    fileprivate func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V, start: Int, end: Int) throws {
      switch self {
      case .fooInt(let v):
        if start <= 1 && 1 < end {
          try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
        }
      case .fooString(let v):
        if start <= 2 && 2 < end {
          try visitor.visitSingularStringField(value: v, fieldNumber: 2)
        }
      case .fooMessage(let v):
        if start <= 3 && 3 < end {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
        }
      case .fooGroup(let v):
        if start <= 4 && 4 < end {
          try visitor.visitSingularGroupField(value: v, fieldNumber: 4)
        }
      }
    }
  }

  struct FooGroup: SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = "FooGroup"
    static let protoPackageName: String = "protobuf_unittest"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
      5: .same(proto: "a"),
      6: .same(proto: "b"),
    ]

    private var _a: Int32? = nil
    var a: Int32 {
      get {return _a ?? 0}
      set {_a = newValue}
    }
    var hasA: Bool {
      return _a != nil
    }
    mutating func clearA() {
      return _a = nil
    }

    private var _b: String? = nil
    var b: String {
      get {return _b ?? ""}
      set {_b = newValue}
    }
    var hasB: Bool {
      return _b != nil
    }
    mutating func clearB() {
      return _b = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
      }
    }

    mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
      switch fieldNumber {
      case 5: try decoder.decodeSingularInt32Field(value: &_a)
      case 6: try decoder.decodeSingularStringField(value: &_b)
      default: break
      }
    }

    func _protoc_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = _a {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 5)
      }
      if let v = _b {
        try visitor.visitSingularStringField(value: v, fieldNumber: 6)
      }
      try unknownFields.traverse(visitor: &visitor)
    }

    func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestOneof.FooGroup) -> Bool {
      if _a != other._a {return false}
      if _b != other._b {return false}
      if unknownFields != other.unknownFields {return false}
      return true
    }
  }

  init() {}

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
      }
    }
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 1, 2, 3, 4:
      if _storage._foo != nil {
        try decoder.handleConflictingOneOf()
      }
      _storage._foo = try ProtobufUnittest_TestOneof.OneOf_Foo(byDecodingFrom: &decoder, fieldNumber: fieldNumber)
    default: break
    }
  }

  func _protoc_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      try _storage._foo?.traverse(visitor: &visitor, start: 1, end: 5)
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestOneof) -> Bool {
    return withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
      if _storage !== other_storage {
        if _storage._foo != other_storage._foo {return false}
      }
      if unknownFields != other.unknownFields {return false}
      return true
    }
  }
}

struct ProtobufUnittest_TestOneofBackwardsCompatible: SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "TestOneofBackwardsCompatible"
  static let protoPackageName: String = "protobuf_unittest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .unique(proto: "foo_int", json: "fooInt"),
    2: .unique(proto: "foo_string", json: "fooString"),
    3: .unique(proto: "foo_message", json: "fooMessage"),
    4: .unique(proto: "FooGroup", json: "foogroup"),
  ]

  private class _StorageClass {
    var _fooInt: Int32? = nil
    var _fooString: String? = nil
    var _fooMessage: ProtobufUnittest_TestAllTypes? = nil
    var _fooGroup: ProtobufUnittest_TestOneofBackwardsCompatible.FooGroup? = nil

    init() {}

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._fooInt = _fooInt
      clone._fooString = _fooString
      clone._fooMessage = _fooMessage
      clone._fooGroup = _fooGroup
      return clone
    }
  }

  private var _storage = _StorageClass()

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }

  var fooInt: Int32 {
    get {return _storage._fooInt ?? 0}
    set {_uniqueStorage()._fooInt = newValue}
  }
  var hasFooInt: Bool {
    return _storage._fooInt != nil
  }
  mutating func clearFooInt() {
    return _storage._fooInt = nil
  }

  var fooString: String {
    get {return _storage._fooString ?? ""}
    set {_uniqueStorage()._fooString = newValue}
  }
  var hasFooString: Bool {
    return _storage._fooString != nil
  }
  mutating func clearFooString() {
    return _storage._fooString = nil
  }

  var fooMessage: ProtobufUnittest_TestAllTypes {
    get {return _storage._fooMessage ?? ProtobufUnittest_TestAllTypes()}
    set {_uniqueStorage()._fooMessage = newValue}
  }
  var hasFooMessage: Bool {
    return _storage._fooMessage != nil
  }
  mutating func clearFooMessage() {
    return _storage._fooMessage = nil
  }

  var fooGroup: ProtobufUnittest_TestOneofBackwardsCompatible.FooGroup {
    get {return _storage._fooGroup ?? ProtobufUnittest_TestOneofBackwardsCompatible.FooGroup()}
    set {_uniqueStorage()._fooGroup = newValue}
  }
  var hasFooGroup: Bool {
    return _storage._fooGroup != nil
  }
  mutating func clearFooGroup() {
    return _storage._fooGroup = nil
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct FooGroup: SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = "FooGroup"
    static let protoPackageName: String = "protobuf_unittest"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
      5: .same(proto: "a"),
      6: .same(proto: "b"),
    ]

    private var _a: Int32? = nil
    var a: Int32 {
      get {return _a ?? 0}
      set {_a = newValue}
    }
    var hasA: Bool {
      return _a != nil
    }
    mutating func clearA() {
      return _a = nil
    }

    private var _b: String? = nil
    var b: String {
      get {return _b ?? ""}
      set {_b = newValue}
    }
    var hasB: Bool {
      return _b != nil
    }
    mutating func clearB() {
      return _b = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
      }
    }

    mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
      switch fieldNumber {
      case 5: try decoder.decodeSingularInt32Field(value: &_a)
      case 6: try decoder.decodeSingularStringField(value: &_b)
      default: break
      }
    }

    func _protoc_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = _a {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 5)
      }
      if let v = _b {
        try visitor.visitSingularStringField(value: v, fieldNumber: 6)
      }
      try unknownFields.traverse(visitor: &visitor)
    }

    func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestOneofBackwardsCompatible.FooGroup) -> Bool {
      if _a != other._a {return false}
      if _b != other._b {return false}
      if unknownFields != other.unknownFields {return false}
      return true
    }
  }

  init() {}

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
      }
    }
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 1: try decoder.decodeSingularInt32Field(value: &_storage._fooInt)
    case 2: try decoder.decodeSingularStringField(value: &_storage._fooString)
    case 3: try decoder.decodeSingularMessageField(value: &_storage._fooMessage)
    case 4: try decoder.decodeSingularGroupField(value: &_storage._fooGroup)
    default: break
    }
  }

  func _protoc_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._fooInt {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      if let v = _storage._fooString {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      }
      if let v = _storage._fooMessage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._fooGroup {
        try visitor.visitSingularGroupField(value: v, fieldNumber: 4)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestOneofBackwardsCompatible) -> Bool {
    return withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
      if _storage !== other_storage {
        if _storage._fooInt != other_storage._fooInt {return false}
        if _storage._fooString != other_storage._fooString {return false}
        if _storage._fooMessage != other_storage._fooMessage {return false}
        if _storage._fooGroup != other_storage._fooGroup {return false}
      }
      if unknownFields != other.unknownFields {return false}
      return true
    }
  }
}

struct ProtobufUnittest_TestOneof2: SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "TestOneof2"
  static let protoPackageName: String = "protobuf_unittest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .unique(proto: "foo_int", json: "fooInt"),
    2: .unique(proto: "foo_string", json: "fooString"),
    3: .unique(proto: "foo_cord", json: "fooCord"),
    4: .unique(proto: "foo_string_piece", json: "fooStringPiece"),
    5: .unique(proto: "foo_bytes", json: "fooBytes"),
    6: .unique(proto: "foo_enum", json: "fooEnum"),
    7: .unique(proto: "foo_message", json: "fooMessage"),
    8: .unique(proto: "FooGroup", json: "foogroup"),
    11: .unique(proto: "foo_lazy_message", json: "fooLazyMessage"),
    12: .unique(proto: "bar_int", json: "barInt"),
    13: .unique(proto: "bar_string", json: "barString"),
    14: .unique(proto: "bar_cord", json: "barCord"),
    15: .unique(proto: "bar_string_piece", json: "barStringPiece"),
    16: .unique(proto: "bar_bytes", json: "barBytes"),
    17: .unique(proto: "bar_enum", json: "barEnum"),
    18: .unique(proto: "baz_int", json: "bazInt"),
    19: .unique(proto: "baz_string", json: "bazString"),
  ]

  private class _StorageClass {
    var _foo: ProtobufUnittest_TestOneof2.OneOf_Foo?
    var _bar: ProtobufUnittest_TestOneof2.OneOf_Bar?
    var _bazInt: Int32? = nil
    var _bazString: String? = nil

    init() {}

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._foo = _foo
      clone._bar = _bar
      clone._bazInt = _bazInt
      clone._bazString = _bazString
      return clone
    }
  }

  private var _storage = _StorageClass()

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }

  var fooInt: Int32 {
    get {
      if case .fooInt(let v)? = _storage._foo {
        return v
      }
      return 0
    }
    set {
      _uniqueStorage()._foo = .fooInt(newValue)
    }
  }

  var fooString: String {
    get {
      if case .fooString(let v)? = _storage._foo {
        return v
      }
      return ""
    }
    set {
      _uniqueStorage()._foo = .fooString(newValue)
    }
  }

  var fooCord: String {
    get {
      if case .fooCord(let v)? = _storage._foo {
        return v
      }
      return ""
    }
    set {
      _uniqueStorage()._foo = .fooCord(newValue)
    }
  }

  var fooStringPiece: String {
    get {
      if case .fooStringPiece(let v)? = _storage._foo {
        return v
      }
      return ""
    }
    set {
      _uniqueStorage()._foo = .fooStringPiece(newValue)
    }
  }

  var fooBytes: Data {
    get {
      if case .fooBytes(let v)? = _storage._foo {
        return v
      }
      return Data()
    }
    set {
      _uniqueStorage()._foo = .fooBytes(newValue)
    }
  }

  var fooEnum: ProtobufUnittest_TestOneof2.NestedEnum {
    get {
      if case .fooEnum(let v)? = _storage._foo {
        return v
      }
      return ProtobufUnittest_TestOneof2.NestedEnum.foo
    }
    set {
      _uniqueStorage()._foo = .fooEnum(newValue)
    }
  }

  var fooMessage: ProtobufUnittest_TestOneof2.NestedMessage {
    get {
      if case .fooMessage(let v)? = _storage._foo {
        return v
      }
      return ProtobufUnittest_TestOneof2.NestedMessage()
    }
    set {
      _uniqueStorage()._foo = .fooMessage(newValue)
    }
  }

  var fooGroup: ProtobufUnittest_TestOneof2.FooGroup {
    get {
      if case .fooGroup(let v)? = _storage._foo {
        return v
      }
      return ProtobufUnittest_TestOneof2.FooGroup()
    }
    set {
      _uniqueStorage()._foo = .fooGroup(newValue)
    }
  }

  var fooLazyMessage: ProtobufUnittest_TestOneof2.NestedMessage {
    get {
      if case .fooLazyMessage(let v)? = _storage._foo {
        return v
      }
      return ProtobufUnittest_TestOneof2.NestedMessage()
    }
    set {
      _uniqueStorage()._foo = .fooLazyMessage(newValue)
    }
  }

  var barInt: Int32 {
    get {
      if case .barInt(let v)? = _storage._bar {
        return v
      }
      return 5
    }
    set {
      _uniqueStorage()._bar = .barInt(newValue)
    }
  }

  var barString: String {
    get {
      if case .barString(let v)? = _storage._bar {
        return v
      }
      return "STRING"
    }
    set {
      _uniqueStorage()._bar = .barString(newValue)
    }
  }

  var barCord: String {
    get {
      if case .barCord(let v)? = _storage._bar {
        return v
      }
      return "CORD"
    }
    set {
      _uniqueStorage()._bar = .barCord(newValue)
    }
  }

  var barStringPiece: String {
    get {
      if case .barStringPiece(let v)? = _storage._bar {
        return v
      }
      return "SPIECE"
    }
    set {
      _uniqueStorage()._bar = .barStringPiece(newValue)
    }
  }

  var barBytes: Data {
    get {
      if case .barBytes(let v)? = _storage._bar {
        return v
      }
      return Data(bytes: [66, 89, 84, 69, 83])
    }
    set {
      _uniqueStorage()._bar = .barBytes(newValue)
    }
  }

  var barEnum: ProtobufUnittest_TestOneof2.NestedEnum {
    get {
      if case .barEnum(let v)? = _storage._bar {
        return v
      }
      return ProtobufUnittest_TestOneof2.NestedEnum.bar
    }
    set {
      _uniqueStorage()._bar = .barEnum(newValue)
    }
  }

  var bazInt: Int32 {
    get {return _storage._bazInt ?? 0}
    set {_uniqueStorage()._bazInt = newValue}
  }
  var hasBazInt: Bool {
    return _storage._bazInt != nil
  }
  mutating func clearBazInt() {
    return _storage._bazInt = nil
  }

  var bazString: String {
    get {return _storage._bazString ?? "BAZ"}
    set {_uniqueStorage()._bazString = newValue}
  }
  var hasBazString: Bool {
    return _storage._bazString != nil
  }
  mutating func clearBazString() {
    return _storage._bazString = nil
  }

  var foo: OneOf_Foo? {
    get {return _storage._foo}
    set {
      _uniqueStorage()._foo = newValue
    }
  }

  var bar: OneOf_Bar? {
    get {return _storage._bar}
    set {
      _uniqueStorage()._bar = newValue
    }
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Foo: Equatable {
    case fooInt(Int32)
    case fooString(String)
    case fooCord(String)
    case fooStringPiece(String)
    case fooBytes(Data)
    case fooEnum(ProtobufUnittest_TestOneof2.NestedEnum)
    case fooMessage(ProtobufUnittest_TestOneof2.NestedMessage)
    case fooGroup(ProtobufUnittest_TestOneof2.FooGroup)
    case fooLazyMessage(ProtobufUnittest_TestOneof2.NestedMessage)

    static func ==(lhs: ProtobufUnittest_TestOneof2.OneOf_Foo, rhs: ProtobufUnittest_TestOneof2.OneOf_Foo) -> Bool {
      switch (lhs, rhs) {
      case (.fooInt(let l), .fooInt(let r)): return l == r
      case (.fooString(let l), .fooString(let r)): return l == r
      case (.fooCord(let l), .fooCord(let r)): return l == r
      case (.fooStringPiece(let l), .fooStringPiece(let r)): return l == r
      case (.fooBytes(let l), .fooBytes(let r)): return l == r
      case (.fooEnum(let l), .fooEnum(let r)): return l == r
      case (.fooMessage(let l), .fooMessage(let r)): return l == r
      case (.fooGroup(let l), .fooGroup(let r)): return l == r
      case (.fooLazyMessage(let l), .fooLazyMessage(let r)): return l == r
      default: return false
      }
    }

    fileprivate init?<T: SwiftProtobuf.Decoder>(byDecodingFrom decoder: inout T, fieldNumber: Int) throws {
      switch fieldNumber {
      case 1:
        var value: Int32?
        try decoder.decodeSingularInt32Field(value: &value)
        if let value = value {
          self = .fooInt(value)
          return
        }
      case 2:
        var value: String?
        try decoder.decodeSingularStringField(value: &value)
        if let value = value {
          self = .fooString(value)
          return
        }
      case 3:
        var value: String?
        try decoder.decodeSingularStringField(value: &value)
        if let value = value {
          self = .fooCord(value)
          return
        }
      case 4:
        var value: String?
        try decoder.decodeSingularStringField(value: &value)
        if let value = value {
          self = .fooStringPiece(value)
          return
        }
      case 5:
        var value: Data?
        try decoder.decodeSingularBytesField(value: &value)
        if let value = value {
          self = .fooBytes(value)
          return
        }
      case 6:
        var value: ProtobufUnittest_TestOneof2.NestedEnum?
        try decoder.decodeSingularEnumField(value: &value)
        if let value = value {
          self = .fooEnum(value)
          return
        }
      case 7:
        var value: ProtobufUnittest_TestOneof2.NestedMessage?
        try decoder.decodeSingularMessageField(value: &value)
        if let value = value {
          self = .fooMessage(value)
          return
        }
      case 8:
        var value: ProtobufUnittest_TestOneof2.FooGroup?
        try decoder.decodeSingularGroupField(value: &value)
        if let value = value {
          self = .fooGroup(value)
          return
        }
      case 11:
        var value: ProtobufUnittest_TestOneof2.NestedMessage?
        try decoder.decodeSingularMessageField(value: &value)
        if let value = value {
          self = .fooLazyMessage(value)
          return
        }
      default:
        break
      }
      return nil
    }

    fileprivate func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V, start: Int, end: Int) throws {
      switch self {
      case .fooInt(let v):
        if start <= 1 && 1 < end {
          try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
        }
      case .fooString(let v):
        if start <= 2 && 2 < end {
          try visitor.visitSingularStringField(value: v, fieldNumber: 2)
        }
      case .fooCord(let v):
        if start <= 3 && 3 < end {
          try visitor.visitSingularStringField(value: v, fieldNumber: 3)
        }
      case .fooStringPiece(let v):
        if start <= 4 && 4 < end {
          try visitor.visitSingularStringField(value: v, fieldNumber: 4)
        }
      case .fooBytes(let v):
        if start <= 5 && 5 < end {
          try visitor.visitSingularBytesField(value: v, fieldNumber: 5)
        }
      case .fooEnum(let v):
        if start <= 6 && 6 < end {
          try visitor.visitSingularEnumField(value: v, fieldNumber: 6)
        }
      case .fooMessage(let v):
        if start <= 7 && 7 < end {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
        }
      case .fooGroup(let v):
        if start <= 8 && 8 < end {
          try visitor.visitSingularGroupField(value: v, fieldNumber: 8)
        }
      case .fooLazyMessage(let v):
        if start <= 11 && 11 < end {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
        }
      }
    }
  }

  enum OneOf_Bar: Equatable {
    case barInt(Int32)
    case barString(String)
    case barCord(String)
    case barStringPiece(String)
    case barBytes(Data)
    case barEnum(ProtobufUnittest_TestOneof2.NestedEnum)

    static func ==(lhs: ProtobufUnittest_TestOneof2.OneOf_Bar, rhs: ProtobufUnittest_TestOneof2.OneOf_Bar) -> Bool {
      switch (lhs, rhs) {
      case (.barInt(let l), .barInt(let r)): return l == r
      case (.barString(let l), .barString(let r)): return l == r
      case (.barCord(let l), .barCord(let r)): return l == r
      case (.barStringPiece(let l), .barStringPiece(let r)): return l == r
      case (.barBytes(let l), .barBytes(let r)): return l == r
      case (.barEnum(let l), .barEnum(let r)): return l == r
      default: return false
      }
    }

    fileprivate init?<T: SwiftProtobuf.Decoder>(byDecodingFrom decoder: inout T, fieldNumber: Int) throws {
      switch fieldNumber {
      case 12:
        var value: Int32?
        try decoder.decodeSingularInt32Field(value: &value)
        if let value = value {
          self = .barInt(value)
          return
        }
      case 13:
        var value: String?
        try decoder.decodeSingularStringField(value: &value)
        if let value = value {
          self = .barString(value)
          return
        }
      case 14:
        var value: String?
        try decoder.decodeSingularStringField(value: &value)
        if let value = value {
          self = .barCord(value)
          return
        }
      case 15:
        var value: String?
        try decoder.decodeSingularStringField(value: &value)
        if let value = value {
          self = .barStringPiece(value)
          return
        }
      case 16:
        var value: Data?
        try decoder.decodeSingularBytesField(value: &value)
        if let value = value {
          self = .barBytes(value)
          return
        }
      case 17:
        var value: ProtobufUnittest_TestOneof2.NestedEnum?
        try decoder.decodeSingularEnumField(value: &value)
        if let value = value {
          self = .barEnum(value)
          return
        }
      default:
        break
      }
      return nil
    }

    fileprivate func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V, start: Int, end: Int) throws {
      switch self {
      case .barInt(let v):
        if start <= 12 && 12 < end {
          try visitor.visitSingularInt32Field(value: v, fieldNumber: 12)
        }
      case .barString(let v):
        if start <= 13 && 13 < end {
          try visitor.visitSingularStringField(value: v, fieldNumber: 13)
        }
      case .barCord(let v):
        if start <= 14 && 14 < end {
          try visitor.visitSingularStringField(value: v, fieldNumber: 14)
        }
      case .barStringPiece(let v):
        if start <= 15 && 15 < end {
          try visitor.visitSingularStringField(value: v, fieldNumber: 15)
        }
      case .barBytes(let v):
        if start <= 16 && 16 < end {
          try visitor.visitSingularBytesField(value: v, fieldNumber: 16)
        }
      case .barEnum(let v):
        if start <= 17 && 17 < end {
          try visitor.visitSingularEnumField(value: v, fieldNumber: 17)
        }
      }
    }
  }

  enum NestedEnum: SwiftProtobuf.Enum, SwiftProtobuf._ProtoNameProviding {
    typealias RawValue = Int
    case foo // = 1
    case bar // = 2
    case baz // = 3

    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
      1: .same(proto: "FOO"),
      2: .same(proto: "BAR"),
      3: .same(proto: "BAZ"),
    ]

    init() {
      self = .foo
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 1: self = .foo
      case 2: self = .bar
      case 3: self = .baz
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .foo: return 1
      case .bar: return 2
      case .baz: return 3
      }
    }

  }

  struct FooGroup: SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = "FooGroup"
    static let protoPackageName: String = "protobuf_unittest"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
      9: .same(proto: "a"),
      10: .same(proto: "b"),
    ]

    private var _a: Int32? = nil
    var a: Int32 {
      get {return _a ?? 0}
      set {_a = newValue}
    }
    var hasA: Bool {
      return _a != nil
    }
    mutating func clearA() {
      return _a = nil
    }

    private var _b: String? = nil
    var b: String {
      get {return _b ?? ""}
      set {_b = newValue}
    }
    var hasB: Bool {
      return _b != nil
    }
    mutating func clearB() {
      return _b = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
      }
    }

    mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
      switch fieldNumber {
      case 9: try decoder.decodeSingularInt32Field(value: &_a)
      case 10: try decoder.decodeSingularStringField(value: &_b)
      default: break
      }
    }

    func _protoc_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = _a {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 9)
      }
      if let v = _b {
        try visitor.visitSingularStringField(value: v, fieldNumber: 10)
      }
      try unknownFields.traverse(visitor: &visitor)
    }

    func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestOneof2.FooGroup) -> Bool {
      if _a != other._a {return false}
      if _b != other._b {return false}
      if unknownFields != other.unknownFields {return false}
      return true
    }
  }

  struct NestedMessage: SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = "NestedMessage"
    static let protoPackageName: String = "protobuf_unittest"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
      1: .unique(proto: "qux_int", json: "quxInt"),
      2: .unique(proto: "corge_int", json: "corgeInt"),
    ]

    private var _quxInt: Int64? = nil
    var quxInt: Int64 {
      get {return _quxInt ?? 0}
      set {_quxInt = newValue}
    }
    var hasQuxInt: Bool {
      return _quxInt != nil
    }
    mutating func clearQuxInt() {
      return _quxInt = nil
    }

    var corgeInt: [Int32] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
      }
    }

    mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &_quxInt)
      case 2: try decoder.decodeRepeatedInt32Field(value: &corgeInt)
      default: break
      }
    }

    func _protoc_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = _quxInt {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 1)
      }
      if !corgeInt.isEmpty {
        try visitor.visitRepeatedInt32Field(value: corgeInt, fieldNumber: 2)
      }
      try unknownFields.traverse(visitor: &visitor)
    }

    func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestOneof2.NestedMessage) -> Bool {
      if _quxInt != other._quxInt {return false}
      if corgeInt != other.corgeInt {return false}
      if unknownFields != other.unknownFields {return false}
      return true
    }
  }

  init() {}

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
      }
    }
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 1, 2, 3, 4, 5, 6, 7, 8, 11:
      if _storage._foo != nil {
        try decoder.handleConflictingOneOf()
      }
      _storage._foo = try ProtobufUnittest_TestOneof2.OneOf_Foo(byDecodingFrom: &decoder, fieldNumber: fieldNumber)
    case 12, 13, 14, 15, 16, 17:
      if _storage._bar != nil {
        try decoder.handleConflictingOneOf()
      }
      _storage._bar = try ProtobufUnittest_TestOneof2.OneOf_Bar(byDecodingFrom: &decoder, fieldNumber: fieldNumber)
    case 18: try decoder.decodeSingularInt32Field(value: &_storage._bazInt)
    case 19: try decoder.decodeSingularStringField(value: &_storage._bazString)
    default: break
    }
  }

  func _protoc_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      try _storage._foo?.traverse(visitor: &visitor, start: 1, end: 12)
      try _storage._bar?.traverse(visitor: &visitor, start: 12, end: 18)
      if let v = _storage._bazInt {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 18)
      }
      if let v = _storage._bazString {
        try visitor.visitSingularStringField(value: v, fieldNumber: 19)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestOneof2) -> Bool {
    return withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
      if _storage !== other_storage {
        if _storage._foo != other_storage._foo {return false}
        if _storage._bar != other_storage._bar {return false}
        if _storage._bazInt != other_storage._bazInt {return false}
        if _storage._bazString != other_storage._bazString {return false}
      }
      if unknownFields != other.unknownFields {return false}
      return true
    }
  }
}

struct ProtobufUnittest_TestRequiredOneof: SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "TestRequiredOneof"
  static let protoPackageName: String = "protobuf_unittest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .unique(proto: "foo_int", json: "fooInt"),
    2: .unique(proto: "foo_string", json: "fooString"),
    3: .unique(proto: "foo_message", json: "fooMessage"),
  ]

  private class _StorageClass {
    var _foo: ProtobufUnittest_TestRequiredOneof.OneOf_Foo?

    init() {}

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._foo = _foo
      return clone
    }
  }

  private var _storage = _StorageClass()

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }

  var fooInt: Int32 {
    get {
      if case .fooInt(let v)? = _storage._foo {
        return v
      }
      return 0
    }
    set {
      _uniqueStorage()._foo = .fooInt(newValue)
    }
  }

  var fooString: String {
    get {
      if case .fooString(let v)? = _storage._foo {
        return v
      }
      return ""
    }
    set {
      _uniqueStorage()._foo = .fooString(newValue)
    }
  }

  var fooMessage: ProtobufUnittest_TestRequiredOneof.NestedMessage {
    get {
      if case .fooMessage(let v)? = _storage._foo {
        return v
      }
      return ProtobufUnittest_TestRequiredOneof.NestedMessage()
    }
    set {
      _uniqueStorage()._foo = .fooMessage(newValue)
    }
  }

  var foo: OneOf_Foo? {
    get {return _storage._foo}
    set {
      _uniqueStorage()._foo = newValue
    }
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Foo: Equatable {
    case fooInt(Int32)
    case fooString(String)
    case fooMessage(ProtobufUnittest_TestRequiredOneof.NestedMessage)

    static func ==(lhs: ProtobufUnittest_TestRequiredOneof.OneOf_Foo, rhs: ProtobufUnittest_TestRequiredOneof.OneOf_Foo) -> Bool {
      switch (lhs, rhs) {
      case (.fooInt(let l), .fooInt(let r)): return l == r
      case (.fooString(let l), .fooString(let r)): return l == r
      case (.fooMessage(let l), .fooMessage(let r)): return l == r
      default: return false
      }
    }

    fileprivate init?<T: SwiftProtobuf.Decoder>(byDecodingFrom decoder: inout T, fieldNumber: Int) throws {
      switch fieldNumber {
      case 1:
        var value: Int32?
        try decoder.decodeSingularInt32Field(value: &value)
        if let value = value {
          self = .fooInt(value)
          return
        }
      case 2:
        var value: String?
        try decoder.decodeSingularStringField(value: &value)
        if let value = value {
          self = .fooString(value)
          return
        }
      case 3:
        var value: ProtobufUnittest_TestRequiredOneof.NestedMessage?
        try decoder.decodeSingularMessageField(value: &value)
        if let value = value {
          self = .fooMessage(value)
          return
        }
      default:
        break
      }
      return nil
    }

    fileprivate func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V, start: Int, end: Int) throws {
      switch self {
      case .fooInt(let v):
        if start <= 1 && 1 < end {
          try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
        }
      case .fooString(let v):
        if start <= 2 && 2 < end {
          try visitor.visitSingularStringField(value: v, fieldNumber: 2)
        }
      case .fooMessage(let v):
        if start <= 3 && 3 < end {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
        }
      }
    }
  }

  struct NestedMessage: SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = "NestedMessage"
    static let protoPackageName: String = "protobuf_unittest"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
      1: .unique(proto: "required_double", json: "requiredDouble"),
    ]

    private var _requiredDouble: Double? = nil
    var requiredDouble: Double {
      get {return _requiredDouble ?? 0}
      set {_requiredDouble = newValue}
    }
    var hasRequiredDouble: Bool {
      return _requiredDouble != nil
    }
    mutating func clearRequiredDouble() {
      return _requiredDouble = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    public var isInitialized: Bool {
      if _requiredDouble == nil {return false}
      return true
    }

    mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
      }
    }

    mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
      switch fieldNumber {
      case 1: try decoder.decodeSingularDoubleField(value: &_requiredDouble)
      default: break
      }
    }

    func _protoc_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = _requiredDouble {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }

    func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestRequiredOneof.NestedMessage) -> Bool {
      if _requiredDouble != other._requiredDouble {return false}
      if unknownFields != other.unknownFields {return false}
      return true
    }
  }

  init() {}

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch foo {
      case .fooMessage(let v)?:
        if !v.isInitialized {return false}
      default:
        break
      }
      return true
    }
  }

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
      }
    }
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 1, 2, 3:
      if _storage._foo != nil {
        try decoder.handleConflictingOneOf()
      }
      _storage._foo = try ProtobufUnittest_TestRequiredOneof.OneOf_Foo(byDecodingFrom: &decoder, fieldNumber: fieldNumber)
    default: break
    }
  }

  func _protoc_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      try _storage._foo?.traverse(visitor: &visitor, start: 1, end: 4)
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestRequiredOneof) -> Bool {
    return withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
      if _storage !== other_storage {
        if _storage._foo != other_storage._foo {return false}
      }
      if unknownFields != other.unknownFields {return false}
      return true
    }
  }
}

//  Test messages for packed fields

struct ProtobufUnittest_TestPackedTypes: SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "TestPackedTypes"
  static let protoPackageName: String = "protobuf_unittest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    90: .unique(proto: "packed_int32", json: "packedInt32"),
    91: .unique(proto: "packed_int64", json: "packedInt64"),
    92: .unique(proto: "packed_uint32", json: "packedUint32"),
    93: .unique(proto: "packed_uint64", json: "packedUint64"),
    94: .unique(proto: "packed_sint32", json: "packedSint32"),
    95: .unique(proto: "packed_sint64", json: "packedSint64"),
    96: .unique(proto: "packed_fixed32", json: "packedFixed32"),
    97: .unique(proto: "packed_fixed64", json: "packedFixed64"),
    98: .unique(proto: "packed_sfixed32", json: "packedSfixed32"),
    99: .unique(proto: "packed_sfixed64", json: "packedSfixed64"),
    100: .unique(proto: "packed_float", json: "packedFloat"),
    101: .unique(proto: "packed_double", json: "packedDouble"),
    102: .unique(proto: "packed_bool", json: "packedBool"),
    103: .unique(proto: "packed_enum", json: "packedEnum"),
  ]

  var packedInt32: [Int32] = []

  var packedInt64: [Int64] = []

  var packedUint32: [UInt32] = []

  var packedUint64: [UInt64] = []

  var packedSint32: [Int32] = []

  var packedSint64: [Int64] = []

  var packedFixed32: [UInt32] = []

  var packedFixed64: [UInt64] = []

  var packedSfixed32: [Int32] = []

  var packedSfixed64: [Int64] = []

  var packedFloat: [Float] = []

  var packedDouble: [Double] = []

  var packedBool: [Bool] = []

  var packedEnum: [ProtobufUnittest_ForeignEnum] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
    }
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 90: try decoder.decodeRepeatedInt32Field(value: &packedInt32)
    case 91: try decoder.decodeRepeatedInt64Field(value: &packedInt64)
    case 92: try decoder.decodeRepeatedUInt32Field(value: &packedUint32)
    case 93: try decoder.decodeRepeatedUInt64Field(value: &packedUint64)
    case 94: try decoder.decodeRepeatedSInt32Field(value: &packedSint32)
    case 95: try decoder.decodeRepeatedSInt64Field(value: &packedSint64)
    case 96: try decoder.decodeRepeatedFixed32Field(value: &packedFixed32)
    case 97: try decoder.decodeRepeatedFixed64Field(value: &packedFixed64)
    case 98: try decoder.decodeRepeatedSFixed32Field(value: &packedSfixed32)
    case 99: try decoder.decodeRepeatedSFixed64Field(value: &packedSfixed64)
    case 100: try decoder.decodeRepeatedFloatField(value: &packedFloat)
    case 101: try decoder.decodeRepeatedDoubleField(value: &packedDouble)
    case 102: try decoder.decodeRepeatedBoolField(value: &packedBool)
    case 103: try decoder.decodeRepeatedEnumField(value: &packedEnum)
    default: break
    }
  }

  func _protoc_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !packedInt32.isEmpty {
      try visitor.visitPackedInt32Field(value: packedInt32, fieldNumber: 90)
    }
    if !packedInt64.isEmpty {
      try visitor.visitPackedInt64Field(value: packedInt64, fieldNumber: 91)
    }
    if !packedUint32.isEmpty {
      try visitor.visitPackedUInt32Field(value: packedUint32, fieldNumber: 92)
    }
    if !packedUint64.isEmpty {
      try visitor.visitPackedUInt64Field(value: packedUint64, fieldNumber: 93)
    }
    if !packedSint32.isEmpty {
      try visitor.visitPackedSInt32Field(value: packedSint32, fieldNumber: 94)
    }
    if !packedSint64.isEmpty {
      try visitor.visitPackedSInt64Field(value: packedSint64, fieldNumber: 95)
    }
    if !packedFixed32.isEmpty {
      try visitor.visitPackedFixed32Field(value: packedFixed32, fieldNumber: 96)
    }
    if !packedFixed64.isEmpty {
      try visitor.visitPackedFixed64Field(value: packedFixed64, fieldNumber: 97)
    }
    if !packedSfixed32.isEmpty {
      try visitor.visitPackedSFixed32Field(value: packedSfixed32, fieldNumber: 98)
    }
    if !packedSfixed64.isEmpty {
      try visitor.visitPackedSFixed64Field(value: packedSfixed64, fieldNumber: 99)
    }
    if !packedFloat.isEmpty {
      try visitor.visitPackedFloatField(value: packedFloat, fieldNumber: 100)
    }
    if !packedDouble.isEmpty {
      try visitor.visitPackedDoubleField(value: packedDouble, fieldNumber: 101)
    }
    if !packedBool.isEmpty {
      try visitor.visitPackedBoolField(value: packedBool, fieldNumber: 102)
    }
    if !packedEnum.isEmpty {
      try visitor.visitPackedEnumField(value: packedEnum, fieldNumber: 103)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestPackedTypes) -> Bool {
    if packedInt32 != other.packedInt32 {return false}
    if packedInt64 != other.packedInt64 {return false}
    if packedUint32 != other.packedUint32 {return false}
    if packedUint64 != other.packedUint64 {return false}
    if packedSint32 != other.packedSint32 {return false}
    if packedSint64 != other.packedSint64 {return false}
    if packedFixed32 != other.packedFixed32 {return false}
    if packedFixed64 != other.packedFixed64 {return false}
    if packedSfixed32 != other.packedSfixed32 {return false}
    if packedSfixed64 != other.packedSfixed64 {return false}
    if packedFloat != other.packedFloat {return false}
    if packedDouble != other.packedDouble {return false}
    if packedBool != other.packedBool {return false}
    if packedEnum != other.packedEnum {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

///   A message with the same fields as TestPackedTypes, but without packing. Used
///   to test packed <-> unpacked wire compatibility.
struct ProtobufUnittest_TestUnpackedTypes: SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "TestUnpackedTypes"
  static let protoPackageName: String = "protobuf_unittest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    90: .unique(proto: "unpacked_int32", json: "unpackedInt32"),
    91: .unique(proto: "unpacked_int64", json: "unpackedInt64"),
    92: .unique(proto: "unpacked_uint32", json: "unpackedUint32"),
    93: .unique(proto: "unpacked_uint64", json: "unpackedUint64"),
    94: .unique(proto: "unpacked_sint32", json: "unpackedSint32"),
    95: .unique(proto: "unpacked_sint64", json: "unpackedSint64"),
    96: .unique(proto: "unpacked_fixed32", json: "unpackedFixed32"),
    97: .unique(proto: "unpacked_fixed64", json: "unpackedFixed64"),
    98: .unique(proto: "unpacked_sfixed32", json: "unpackedSfixed32"),
    99: .unique(proto: "unpacked_sfixed64", json: "unpackedSfixed64"),
    100: .unique(proto: "unpacked_float", json: "unpackedFloat"),
    101: .unique(proto: "unpacked_double", json: "unpackedDouble"),
    102: .unique(proto: "unpacked_bool", json: "unpackedBool"),
    103: .unique(proto: "unpacked_enum", json: "unpackedEnum"),
  ]

  var unpackedInt32: [Int32] = []

  var unpackedInt64: [Int64] = []

  var unpackedUint32: [UInt32] = []

  var unpackedUint64: [UInt64] = []

  var unpackedSint32: [Int32] = []

  var unpackedSint64: [Int64] = []

  var unpackedFixed32: [UInt32] = []

  var unpackedFixed64: [UInt64] = []

  var unpackedSfixed32: [Int32] = []

  var unpackedSfixed64: [Int64] = []

  var unpackedFloat: [Float] = []

  var unpackedDouble: [Double] = []

  var unpackedBool: [Bool] = []

  var unpackedEnum: [ProtobufUnittest_ForeignEnum] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
    }
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 90: try decoder.decodeRepeatedInt32Field(value: &unpackedInt32)
    case 91: try decoder.decodeRepeatedInt64Field(value: &unpackedInt64)
    case 92: try decoder.decodeRepeatedUInt32Field(value: &unpackedUint32)
    case 93: try decoder.decodeRepeatedUInt64Field(value: &unpackedUint64)
    case 94: try decoder.decodeRepeatedSInt32Field(value: &unpackedSint32)
    case 95: try decoder.decodeRepeatedSInt64Field(value: &unpackedSint64)
    case 96: try decoder.decodeRepeatedFixed32Field(value: &unpackedFixed32)
    case 97: try decoder.decodeRepeatedFixed64Field(value: &unpackedFixed64)
    case 98: try decoder.decodeRepeatedSFixed32Field(value: &unpackedSfixed32)
    case 99: try decoder.decodeRepeatedSFixed64Field(value: &unpackedSfixed64)
    case 100: try decoder.decodeRepeatedFloatField(value: &unpackedFloat)
    case 101: try decoder.decodeRepeatedDoubleField(value: &unpackedDouble)
    case 102: try decoder.decodeRepeatedBoolField(value: &unpackedBool)
    case 103: try decoder.decodeRepeatedEnumField(value: &unpackedEnum)
    default: break
    }
  }

  func _protoc_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !unpackedInt32.isEmpty {
      try visitor.visitRepeatedInt32Field(value: unpackedInt32, fieldNumber: 90)
    }
    if !unpackedInt64.isEmpty {
      try visitor.visitRepeatedInt64Field(value: unpackedInt64, fieldNumber: 91)
    }
    if !unpackedUint32.isEmpty {
      try visitor.visitRepeatedUInt32Field(value: unpackedUint32, fieldNumber: 92)
    }
    if !unpackedUint64.isEmpty {
      try visitor.visitRepeatedUInt64Field(value: unpackedUint64, fieldNumber: 93)
    }
    if !unpackedSint32.isEmpty {
      try visitor.visitRepeatedSInt32Field(value: unpackedSint32, fieldNumber: 94)
    }
    if !unpackedSint64.isEmpty {
      try visitor.visitRepeatedSInt64Field(value: unpackedSint64, fieldNumber: 95)
    }
    if !unpackedFixed32.isEmpty {
      try visitor.visitRepeatedFixed32Field(value: unpackedFixed32, fieldNumber: 96)
    }
    if !unpackedFixed64.isEmpty {
      try visitor.visitRepeatedFixed64Field(value: unpackedFixed64, fieldNumber: 97)
    }
    if !unpackedSfixed32.isEmpty {
      try visitor.visitRepeatedSFixed32Field(value: unpackedSfixed32, fieldNumber: 98)
    }
    if !unpackedSfixed64.isEmpty {
      try visitor.visitRepeatedSFixed64Field(value: unpackedSfixed64, fieldNumber: 99)
    }
    if !unpackedFloat.isEmpty {
      try visitor.visitRepeatedFloatField(value: unpackedFloat, fieldNumber: 100)
    }
    if !unpackedDouble.isEmpty {
      try visitor.visitRepeatedDoubleField(value: unpackedDouble, fieldNumber: 101)
    }
    if !unpackedBool.isEmpty {
      try visitor.visitRepeatedBoolField(value: unpackedBool, fieldNumber: 102)
    }
    if !unpackedEnum.isEmpty {
      try visitor.visitRepeatedEnumField(value: unpackedEnum, fieldNumber: 103)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestUnpackedTypes) -> Bool {
    if unpackedInt32 != other.unpackedInt32 {return false}
    if unpackedInt64 != other.unpackedInt64 {return false}
    if unpackedUint32 != other.unpackedUint32 {return false}
    if unpackedUint64 != other.unpackedUint64 {return false}
    if unpackedSint32 != other.unpackedSint32 {return false}
    if unpackedSint64 != other.unpackedSint64 {return false}
    if unpackedFixed32 != other.unpackedFixed32 {return false}
    if unpackedFixed64 != other.unpackedFixed64 {return false}
    if unpackedSfixed32 != other.unpackedSfixed32 {return false}
    if unpackedSfixed64 != other.unpackedSfixed64 {return false}
    if unpackedFloat != other.unpackedFloat {return false}
    if unpackedDouble != other.unpackedDouble {return false}
    if unpackedBool != other.unpackedBool {return false}
    if unpackedEnum != other.unpackedEnum {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

struct ProtobufUnittest_TestPackedExtensions: SwiftProtobuf.Proto2Message, SwiftProtobuf.ExtensibleMessage, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "TestPackedExtensions"
  static let protoPackageName: String = "protobuf_unittest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  public var isInitialized: Bool {
    if !_extensionFieldValues.isInitialized {return false}
    return true
  }

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
    }
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    if (1 <= fieldNumber && fieldNumber < 536870912) {
      try decoder.decodeExtensionField(values: &_extensionFieldValues, messageType: ProtobufUnittest_TestPackedExtensions.self, fieldNumber: fieldNumber)
    }
  }

  func _protoc_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try visitor.visitExtensionFields(fields: _extensionFieldValues, start: 1, end: 536870912)
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestPackedExtensions) -> Bool {
    if unknownFields != other.unknownFields {return false}
    if _extensionFieldValues != other._extensionFieldValues {return false}
    return true
  }

  private var _extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()

  mutating func setExtensionValue<F: SwiftProtobuf.ExtensionField>(ext: SwiftProtobuf.MessageExtension<F, ProtobufUnittest_TestPackedExtensions>, value: F.ValueType) {
    _extensionFieldValues[ext.fieldNumber] = ext.set(value: value)
  }

  mutating func clearExtensionValue<F: SwiftProtobuf.ExtensionField>(ext: SwiftProtobuf.MessageExtension<F, ProtobufUnittest_TestPackedExtensions>) {
    _extensionFieldValues[ext.fieldNumber] = nil
  }

  func getExtensionValue<F: SwiftProtobuf.ExtensionField>(ext: SwiftProtobuf.MessageExtension<F, ProtobufUnittest_TestPackedExtensions>) -> F.ValueType {
    if let fieldValue = _extensionFieldValues[ext.fieldNumber] as? F {
      return fieldValue.value
    }
    return ext.defaultValue
  }

  func hasExtensionValue<F: SwiftProtobuf.ExtensionField>(ext: SwiftProtobuf.MessageExtension<F, ProtobufUnittest_TestPackedExtensions>) -> Bool {
    return _extensionFieldValues[ext.fieldNumber] is F
  }
  func _protobuf_names(for number: Int) -> _NameMap.Names? {
    return ProtobufUnittest_TestPackedExtensions._protobuf_nameMap.names(for: number) ?? _extensionFieldValues.fieldNames(for: number)
  }
}

struct ProtobufUnittest_TestUnpackedExtensions: SwiftProtobuf.Proto2Message, SwiftProtobuf.ExtensibleMessage, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "TestUnpackedExtensions"
  static let protoPackageName: String = "protobuf_unittest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  public var isInitialized: Bool {
    if !_extensionFieldValues.isInitialized {return false}
    return true
  }

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
    }
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    if (1 <= fieldNumber && fieldNumber < 536870912) {
      try decoder.decodeExtensionField(values: &_extensionFieldValues, messageType: ProtobufUnittest_TestUnpackedExtensions.self, fieldNumber: fieldNumber)
    }
  }

  func _protoc_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try visitor.visitExtensionFields(fields: _extensionFieldValues, start: 1, end: 536870912)
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestUnpackedExtensions) -> Bool {
    if unknownFields != other.unknownFields {return false}
    if _extensionFieldValues != other._extensionFieldValues {return false}
    return true
  }

  private var _extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()

  mutating func setExtensionValue<F: SwiftProtobuf.ExtensionField>(ext: SwiftProtobuf.MessageExtension<F, ProtobufUnittest_TestUnpackedExtensions>, value: F.ValueType) {
    _extensionFieldValues[ext.fieldNumber] = ext.set(value: value)
  }

  mutating func clearExtensionValue<F: SwiftProtobuf.ExtensionField>(ext: SwiftProtobuf.MessageExtension<F, ProtobufUnittest_TestUnpackedExtensions>) {
    _extensionFieldValues[ext.fieldNumber] = nil
  }

  func getExtensionValue<F: SwiftProtobuf.ExtensionField>(ext: SwiftProtobuf.MessageExtension<F, ProtobufUnittest_TestUnpackedExtensions>) -> F.ValueType {
    if let fieldValue = _extensionFieldValues[ext.fieldNumber] as? F {
      return fieldValue.value
    }
    return ext.defaultValue
  }

  func hasExtensionValue<F: SwiftProtobuf.ExtensionField>(ext: SwiftProtobuf.MessageExtension<F, ProtobufUnittest_TestUnpackedExtensions>) -> Bool {
    return _extensionFieldValues[ext.fieldNumber] is F
  }
  func _protobuf_names(for number: Int) -> _NameMap.Names? {
    return ProtobufUnittest_TestUnpackedExtensions._protobuf_nameMap.names(for: number) ?? _extensionFieldValues.fieldNames(for: number)
  }
}

///   Used by ExtensionSetTest/DynamicExtensions.  The test actually builds
///   a set of extensions to TestAllExtensions dynamically, based on the fields
///   of this message type.
struct ProtobufUnittest_TestDynamicExtensions: SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "TestDynamicExtensions"
  static let protoPackageName: String = "protobuf_unittest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2000: .unique(proto: "scalar_extension", json: "scalarExtension"),
    2001: .unique(proto: "enum_extension", json: "enumExtension"),
    2002: .unique(proto: "dynamic_enum_extension", json: "dynamicEnumExtension"),
    2003: .unique(proto: "message_extension", json: "messageExtension"),
    2004: .unique(proto: "dynamic_message_extension", json: "dynamicMessageExtension"),
    2005: .unique(proto: "repeated_extension", json: "repeatedExtension"),
    2006: .unique(proto: "packed_extension", json: "packedExtension"),
  ]

  private class _StorageClass {
    var _scalarExtension: UInt32? = nil
    var _enumExtension: ProtobufUnittest_ForeignEnum? = nil
    var _dynamicEnumExtension: ProtobufUnittest_TestDynamicExtensions.DynamicEnumType? = nil
    var _messageExtension: ProtobufUnittest_ForeignMessage? = nil
    var _dynamicMessageExtension: ProtobufUnittest_TestDynamicExtensions.DynamicMessageType? = nil
    var _repeatedExtension: [String] = []
    var _packedExtension: [Int32] = []

    init() {}

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._scalarExtension = _scalarExtension
      clone._enumExtension = _enumExtension
      clone._dynamicEnumExtension = _dynamicEnumExtension
      clone._messageExtension = _messageExtension
      clone._dynamicMessageExtension = _dynamicMessageExtension
      clone._repeatedExtension = _repeatedExtension
      clone._packedExtension = _packedExtension
      return clone
    }
  }

  private var _storage = _StorageClass()

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }

  var scalarExtension: UInt32 {
    get {return _storage._scalarExtension ?? 0}
    set {_uniqueStorage()._scalarExtension = newValue}
  }
  var hasScalarExtension: Bool {
    return _storage._scalarExtension != nil
  }
  mutating func clearScalarExtension() {
    return _storage._scalarExtension = nil
  }

  var enumExtension: ProtobufUnittest_ForeignEnum {
    get {return _storage._enumExtension ?? ProtobufUnittest_ForeignEnum.foreignFoo}
    set {_uniqueStorage()._enumExtension = newValue}
  }
  var hasEnumExtension: Bool {
    return _storage._enumExtension != nil
  }
  mutating func clearEnumExtension() {
    return _storage._enumExtension = nil
  }

  var dynamicEnumExtension: ProtobufUnittest_TestDynamicExtensions.DynamicEnumType {
    get {return _storage._dynamicEnumExtension ?? ProtobufUnittest_TestDynamicExtensions.DynamicEnumType.dynamicFoo}
    set {_uniqueStorage()._dynamicEnumExtension = newValue}
  }
  var hasDynamicEnumExtension: Bool {
    return _storage._dynamicEnumExtension != nil
  }
  mutating func clearDynamicEnumExtension() {
    return _storage._dynamicEnumExtension = nil
  }

  var messageExtension: ProtobufUnittest_ForeignMessage {
    get {return _storage._messageExtension ?? ProtobufUnittest_ForeignMessage()}
    set {_uniqueStorage()._messageExtension = newValue}
  }
  var hasMessageExtension: Bool {
    return _storage._messageExtension != nil
  }
  mutating func clearMessageExtension() {
    return _storage._messageExtension = nil
  }

  var dynamicMessageExtension: ProtobufUnittest_TestDynamicExtensions.DynamicMessageType {
    get {return _storage._dynamicMessageExtension ?? ProtobufUnittest_TestDynamicExtensions.DynamicMessageType()}
    set {_uniqueStorage()._dynamicMessageExtension = newValue}
  }
  var hasDynamicMessageExtension: Bool {
    return _storage._dynamicMessageExtension != nil
  }
  mutating func clearDynamicMessageExtension() {
    return _storage._dynamicMessageExtension = nil
  }

  var repeatedExtension: [String] {
    get {return _storage._repeatedExtension}
    set {_uniqueStorage()._repeatedExtension = newValue}
  }

  var packedExtension: [Int32] {
    get {return _storage._packedExtension}
    set {_uniqueStorage()._packedExtension = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum DynamicEnumType: SwiftProtobuf.Enum, SwiftProtobuf._ProtoNameProviding {
    typealias RawValue = Int
    case dynamicFoo // = 2200
    case dynamicBar // = 2201
    case dynamicBaz // = 2202

    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
      2200: .same(proto: "DYNAMIC_FOO"),
      2201: .same(proto: "DYNAMIC_BAR"),
      2202: .same(proto: "DYNAMIC_BAZ"),
    ]

    init() {
      self = .dynamicFoo
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 2200: self = .dynamicFoo
      case 2201: self = .dynamicBar
      case 2202: self = .dynamicBaz
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .dynamicFoo: return 2200
      case .dynamicBar: return 2201
      case .dynamicBaz: return 2202
      }
    }

  }

  struct DynamicMessageType: SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = "DynamicMessageType"
    static let protoPackageName: String = "protobuf_unittest"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
      2100: .unique(proto: "dynamic_field", json: "dynamicField"),
    ]

    private var _dynamicField: Int32? = nil
    var dynamicField: Int32 {
      get {return _dynamicField ?? 0}
      set {_dynamicField = newValue}
    }
    var hasDynamicField: Bool {
      return _dynamicField != nil
    }
    mutating func clearDynamicField() {
      return _dynamicField = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
      }
    }

    mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
      switch fieldNumber {
      case 2100: try decoder.decodeSingularInt32Field(value: &_dynamicField)
      default: break
      }
    }

    func _protoc_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = _dynamicField {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 2100)
      }
      try unknownFields.traverse(visitor: &visitor)
    }

    func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestDynamicExtensions.DynamicMessageType) -> Bool {
      if _dynamicField != other._dynamicField {return false}
      if unknownFields != other.unknownFields {return false}
      return true
    }
  }

  init() {}

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
      }
    }
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 2000: try decoder.decodeSingularFixed32Field(value: &_storage._scalarExtension)
    case 2001: try decoder.decodeSingularEnumField(value: &_storage._enumExtension)
    case 2002: try decoder.decodeSingularEnumField(value: &_storage._dynamicEnumExtension)
    case 2003: try decoder.decodeSingularMessageField(value: &_storage._messageExtension)
    case 2004: try decoder.decodeSingularMessageField(value: &_storage._dynamicMessageExtension)
    case 2005: try decoder.decodeRepeatedStringField(value: &_storage._repeatedExtension)
    case 2006: try decoder.decodeRepeatedSInt32Field(value: &_storage._packedExtension)
    default: break
    }
  }

  func _protoc_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._scalarExtension {
        try visitor.visitSingularFixed32Field(value: v, fieldNumber: 2000)
      }
      if let v = _storage._enumExtension {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 2001)
      }
      if let v = _storage._dynamicEnumExtension {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 2002)
      }
      if let v = _storage._messageExtension {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2003)
      }
      if let v = _storage._dynamicMessageExtension {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2004)
      }
      if !_storage._repeatedExtension.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._repeatedExtension, fieldNumber: 2005)
      }
      if !_storage._packedExtension.isEmpty {
        try visitor.visitPackedSInt32Field(value: _storage._packedExtension, fieldNumber: 2006)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestDynamicExtensions) -> Bool {
    return withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
      if _storage !== other_storage {
        if _storage._scalarExtension != other_storage._scalarExtension {return false}
        if _storage._enumExtension != other_storage._enumExtension {return false}
        if _storage._dynamicEnumExtension != other_storage._dynamicEnumExtension {return false}
        if _storage._messageExtension != other_storage._messageExtension {return false}
        if _storage._dynamicMessageExtension != other_storage._dynamicMessageExtension {return false}
        if _storage._repeatedExtension != other_storage._repeatedExtension {return false}
        if _storage._packedExtension != other_storage._packedExtension {return false}
      }
      if unknownFields != other.unknownFields {return false}
      return true
    }
  }
}

struct ProtobufUnittest_TestRepeatedScalarDifferentTagSizes: SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "TestRepeatedScalarDifferentTagSizes"
  static let protoPackageName: String = "protobuf_unittest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    12: .unique(proto: "repeated_fixed32", json: "repeatedFixed32"),
    13: .unique(proto: "repeated_int32", json: "repeatedInt32"),
    2046: .unique(proto: "repeated_fixed64", json: "repeatedFixed64"),
    2047: .unique(proto: "repeated_int64", json: "repeatedInt64"),
    262142: .unique(proto: "repeated_float", json: "repeatedFloat"),
    262143: .unique(proto: "repeated_uint64", json: "repeatedUint64"),
  ]

  ///   Parsing repeated fixed size values used to fail. This message needs to be
  ///   used in order to get a tag of the right size; all of the repeated fields
  ///   in TestAllTypes didn't trigger the check.
  var repeatedFixed32: [UInt32] = []

  ///   Check for a varint type, just for good measure.
  var repeatedInt32: [Int32] = []

  ///   These have two-byte tags.
  var repeatedFixed64: [UInt64] = []

  var repeatedInt64: [Int64] = []

  ///   Three byte tags.
  var repeatedFloat: [Float] = []

  var repeatedUint64: [UInt64] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
    }
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 12: try decoder.decodeRepeatedFixed32Field(value: &repeatedFixed32)
    case 13: try decoder.decodeRepeatedInt32Field(value: &repeatedInt32)
    case 2046: try decoder.decodeRepeatedFixed64Field(value: &repeatedFixed64)
    case 2047: try decoder.decodeRepeatedInt64Field(value: &repeatedInt64)
    case 262142: try decoder.decodeRepeatedFloatField(value: &repeatedFloat)
    case 262143: try decoder.decodeRepeatedUInt64Field(value: &repeatedUint64)
    default: break
    }
  }

  func _protoc_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !repeatedFixed32.isEmpty {
      try visitor.visitRepeatedFixed32Field(value: repeatedFixed32, fieldNumber: 12)
    }
    if !repeatedInt32.isEmpty {
      try visitor.visitRepeatedInt32Field(value: repeatedInt32, fieldNumber: 13)
    }
    if !repeatedFixed64.isEmpty {
      try visitor.visitRepeatedFixed64Field(value: repeatedFixed64, fieldNumber: 2046)
    }
    if !repeatedInt64.isEmpty {
      try visitor.visitRepeatedInt64Field(value: repeatedInt64, fieldNumber: 2047)
    }
    if !repeatedFloat.isEmpty {
      try visitor.visitRepeatedFloatField(value: repeatedFloat, fieldNumber: 262142)
    }
    if !repeatedUint64.isEmpty {
      try visitor.visitRepeatedUInt64Field(value: repeatedUint64, fieldNumber: 262143)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestRepeatedScalarDifferentTagSizes) -> Bool {
    if repeatedFixed32 != other.repeatedFixed32 {return false}
    if repeatedInt32 != other.repeatedInt32 {return false}
    if repeatedFixed64 != other.repeatedFixed64 {return false}
    if repeatedInt64 != other.repeatedInt64 {return false}
    if repeatedFloat != other.repeatedFloat {return false}
    if repeatedUint64 != other.repeatedUint64 {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

///   Test that if an optional or required message/group field appears multiple
///   times in the input, they need to be merged.
struct ProtobufUnittest_TestParsingMerge: SwiftProtobuf.Proto2Message, SwiftProtobuf.ExtensibleMessage, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "TestParsingMerge"
  static let protoPackageName: String = "protobuf_unittest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .unique(proto: "required_all_types", json: "requiredAllTypes"),
    2: .unique(proto: "optional_all_types", json: "optionalAllTypes"),
    3: .unique(proto: "repeated_all_types", json: "repeatedAllTypes"),
    10: .unique(proto: "OptionalGroup", json: "optionalgroup"),
    20: .unique(proto: "RepeatedGroup", json: "repeatedgroup"),
  ]

  private class _StorageClass {
    var _requiredAllTypes: ProtobufUnittest_TestAllTypes? = nil
    var _optionalAllTypes: ProtobufUnittest_TestAllTypes? = nil
    var _repeatedAllTypes: [ProtobufUnittest_TestAllTypes] = []
    var _optionalGroup: ProtobufUnittest_TestParsingMerge.OptionalGroup? = nil
    var _repeatedGroup: [ProtobufUnittest_TestParsingMerge.RepeatedGroup] = []

    init() {}

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._requiredAllTypes = _requiredAllTypes
      clone._optionalAllTypes = _optionalAllTypes
      clone._repeatedAllTypes = _repeatedAllTypes
      clone._optionalGroup = _optionalGroup
      clone._repeatedGroup = _repeatedGroup
      return clone
    }
  }

  private var _storage = _StorageClass()

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }

  var requiredAllTypes: ProtobufUnittest_TestAllTypes {
    get {return _storage._requiredAllTypes ?? ProtobufUnittest_TestAllTypes()}
    set {_uniqueStorage()._requiredAllTypes = newValue}
  }
  var hasRequiredAllTypes: Bool {
    return _storage._requiredAllTypes != nil
  }
  mutating func clearRequiredAllTypes() {
    return _storage._requiredAllTypes = nil
  }

  var optionalAllTypes: ProtobufUnittest_TestAllTypes {
    get {return _storage._optionalAllTypes ?? ProtobufUnittest_TestAllTypes()}
    set {_uniqueStorage()._optionalAllTypes = newValue}
  }
  var hasOptionalAllTypes: Bool {
    return _storage._optionalAllTypes != nil
  }
  mutating func clearOptionalAllTypes() {
    return _storage._optionalAllTypes = nil
  }

  var repeatedAllTypes: [ProtobufUnittest_TestAllTypes] {
    get {return _storage._repeatedAllTypes}
    set {_uniqueStorage()._repeatedAllTypes = newValue}
  }

  var optionalGroup: ProtobufUnittest_TestParsingMerge.OptionalGroup {
    get {return _storage._optionalGroup ?? ProtobufUnittest_TestParsingMerge.OptionalGroup()}
    set {_uniqueStorage()._optionalGroup = newValue}
  }
  var hasOptionalGroup: Bool {
    return _storage._optionalGroup != nil
  }
  mutating func clearOptionalGroup() {
    return _storage._optionalGroup = nil
  }

  var repeatedGroup: [ProtobufUnittest_TestParsingMerge.RepeatedGroup] {
    get {return _storage._repeatedGroup}
    set {_uniqueStorage()._repeatedGroup = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  ///   RepeatedFieldsGenerator defines matching field types as TestParsingMerge,
  ///   except that all fields are repeated. In the tests, we will serialize the
  ///   RepeatedFieldsGenerator to bytes, and parse the bytes to TestParsingMerge.
  ///   Repeated fields in RepeatedFieldsGenerator are expected to be merged into
  ///   the corresponding required/optional fields in TestParsingMerge.
  struct RepeatedFieldsGenerator: SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = "RepeatedFieldsGenerator"
    static let protoPackageName: String = "protobuf_unittest"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
      1: .same(proto: "field1"),
      2: .same(proto: "field2"),
      3: .same(proto: "field3"),
      10: .unique(proto: "Group1", json: "group1"),
      20: .unique(proto: "Group2", json: "group2"),
      1000: .same(proto: "ext1"),
      1001: .same(proto: "ext2"),
    ]

    var field1: [ProtobufUnittest_TestAllTypes] = []

    var field2: [ProtobufUnittest_TestAllTypes] = []

    var field3: [ProtobufUnittest_TestAllTypes] = []

    var group1: [ProtobufUnittest_TestParsingMerge.RepeatedFieldsGenerator.Group1] = []

    var group2: [ProtobufUnittest_TestParsingMerge.RepeatedFieldsGenerator.Group2] = []

    var ext1: [ProtobufUnittest_TestAllTypes] = []

    var ext2: [ProtobufUnittest_TestAllTypes] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    struct Group1: SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
      static let protoMessageName: String = "Group1"
      static let protoPackageName: String = "protobuf_unittest"
      static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        11: .same(proto: "field1"),
      ]

      private class _StorageClass {
        var _field1: ProtobufUnittest_TestAllTypes? = nil

        init() {}

        func copy() -> _StorageClass {
          let clone = _StorageClass()
          clone._field1 = _field1
          return clone
        }
      }

      private var _storage = _StorageClass()

      private mutating func _uniqueStorage() -> _StorageClass {
        if !isKnownUniquelyReferenced(&_storage) {
          _storage = _storage.copy()
        }
        return _storage
      }

      var field1: ProtobufUnittest_TestAllTypes {
        get {return _storage._field1 ?? ProtobufUnittest_TestAllTypes()}
        set {_uniqueStorage()._field1 = newValue}
      }
      var hasField1: Bool {
        return _storage._field1 != nil
      }
      mutating func clearField1() {
        return _storage._field1 = nil
      }

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}

      mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
          while let fieldNumber = try decoder.nextFieldNumber() {
            try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
          }
        }
      }

      mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
        switch fieldNumber {
        case 11: try decoder.decodeSingularMessageField(value: &_storage._field1)
        default: break
        }
      }

      func _protoc_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
          if let v = _storage._field1 {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
          }
          try unknownFields.traverse(visitor: &visitor)
        }
      }

      func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestParsingMerge.RepeatedFieldsGenerator.Group1) -> Bool {
        return withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
          if _storage !== other_storage {
            if _storage._field1 != other_storage._field1 {return false}
          }
          if unknownFields != other.unknownFields {return false}
          return true
        }
      }
    }

    struct Group2: SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
      static let protoMessageName: String = "Group2"
      static let protoPackageName: String = "protobuf_unittest"
      static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        21: .same(proto: "field1"),
      ]

      private class _StorageClass {
        var _field1: ProtobufUnittest_TestAllTypes? = nil

        init() {}

        func copy() -> _StorageClass {
          let clone = _StorageClass()
          clone._field1 = _field1
          return clone
        }
      }

      private var _storage = _StorageClass()

      private mutating func _uniqueStorage() -> _StorageClass {
        if !isKnownUniquelyReferenced(&_storage) {
          _storage = _storage.copy()
        }
        return _storage
      }

      var field1: ProtobufUnittest_TestAllTypes {
        get {return _storage._field1 ?? ProtobufUnittest_TestAllTypes()}
        set {_uniqueStorage()._field1 = newValue}
      }
      var hasField1: Bool {
        return _storage._field1 != nil
      }
      mutating func clearField1() {
        return _storage._field1 = nil
      }

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}

      mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
          while let fieldNumber = try decoder.nextFieldNumber() {
            try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
          }
        }
      }

      mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
        switch fieldNumber {
        case 21: try decoder.decodeSingularMessageField(value: &_storage._field1)
        default: break
        }
      }

      func _protoc_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
          if let v = _storage._field1 {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
          }
          try unknownFields.traverse(visitor: &visitor)
        }
      }

      func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestParsingMerge.RepeatedFieldsGenerator.Group2) -> Bool {
        return withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
          if _storage !== other_storage {
            if _storage._field1 != other_storage._field1 {return false}
          }
          if unknownFields != other.unknownFields {return false}
          return true
        }
      }
    }

    init() {}

    mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
      }
    }

    mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &field1)
      case 2: try decoder.decodeRepeatedMessageField(value: &field2)
      case 3: try decoder.decodeRepeatedMessageField(value: &field3)
      case 10: try decoder.decodeRepeatedGroupField(value: &group1)
      case 20: try decoder.decodeRepeatedGroupField(value: &group2)
      case 1000: try decoder.decodeRepeatedMessageField(value: &ext1)
      case 1001: try decoder.decodeRepeatedMessageField(value: &ext2)
      default: break
      }
    }

    func _protoc_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if !field1.isEmpty {
        try visitor.visitRepeatedMessageField(value: field1, fieldNumber: 1)
      }
      if !field2.isEmpty {
        try visitor.visitRepeatedMessageField(value: field2, fieldNumber: 2)
      }
      if !field3.isEmpty {
        try visitor.visitRepeatedMessageField(value: field3, fieldNumber: 3)
      }
      if !group1.isEmpty {
        try visitor.visitRepeatedGroupField(value: group1, fieldNumber: 10)
      }
      if !group2.isEmpty {
        try visitor.visitRepeatedGroupField(value: group2, fieldNumber: 20)
      }
      if !ext1.isEmpty {
        try visitor.visitRepeatedMessageField(value: ext1, fieldNumber: 1000)
      }
      if !ext2.isEmpty {
        try visitor.visitRepeatedMessageField(value: ext2, fieldNumber: 1001)
      }
      try unknownFields.traverse(visitor: &visitor)
    }

    func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestParsingMerge.RepeatedFieldsGenerator) -> Bool {
      if field1 != other.field1 {return false}
      if field2 != other.field2 {return false}
      if field3 != other.field3 {return false}
      if group1 != other.group1 {return false}
      if group2 != other.group2 {return false}
      if ext1 != other.ext1 {return false}
      if ext2 != other.ext2 {return false}
      if unknownFields != other.unknownFields {return false}
      return true
    }
  }

  struct OptionalGroup: SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = "OptionalGroup"
    static let protoPackageName: String = "protobuf_unittest"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
      11: .unique(proto: "optional_group_all_types", json: "optionalGroupAllTypes"),
    ]

    private class _StorageClass {
      var _optionalGroupAllTypes: ProtobufUnittest_TestAllTypes? = nil

      init() {}

      func copy() -> _StorageClass {
        let clone = _StorageClass()
        clone._optionalGroupAllTypes = _optionalGroupAllTypes
        return clone
      }
    }

    private var _storage = _StorageClass()

    private mutating func _uniqueStorage() -> _StorageClass {
      if !isKnownUniquelyReferenced(&_storage) {
        _storage = _storage.copy()
      }
      return _storage
    }

    var optionalGroupAllTypes: ProtobufUnittest_TestAllTypes {
      get {return _storage._optionalGroupAllTypes ?? ProtobufUnittest_TestAllTypes()}
      set {_uniqueStorage()._optionalGroupAllTypes = newValue}
    }
    var hasOptionalGroupAllTypes: Bool {
      return _storage._optionalGroupAllTypes != nil
    }
    mutating func clearOptionalGroupAllTypes() {
      return _storage._optionalGroupAllTypes = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        while let fieldNumber = try decoder.nextFieldNumber() {
          try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
        }
      }
    }

    mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
      switch fieldNumber {
      case 11: try decoder.decodeSingularMessageField(value: &_storage._optionalGroupAllTypes)
      default: break
      }
    }

    func _protoc_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        if let v = _storage._optionalGroupAllTypes {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
        }
        try unknownFields.traverse(visitor: &visitor)
      }
    }

    func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestParsingMerge.OptionalGroup) -> Bool {
      return withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage !== other_storage {
          if _storage._optionalGroupAllTypes != other_storage._optionalGroupAllTypes {return false}
        }
        if unknownFields != other.unknownFields {return false}
        return true
      }
    }
  }

  struct RepeatedGroup: SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = "RepeatedGroup"
    static let protoPackageName: String = "protobuf_unittest"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
      21: .unique(proto: "repeated_group_all_types", json: "repeatedGroupAllTypes"),
    ]

    private class _StorageClass {
      var _repeatedGroupAllTypes: ProtobufUnittest_TestAllTypes? = nil

      init() {}

      func copy() -> _StorageClass {
        let clone = _StorageClass()
        clone._repeatedGroupAllTypes = _repeatedGroupAllTypes
        return clone
      }
    }

    private var _storage = _StorageClass()

    private mutating func _uniqueStorage() -> _StorageClass {
      if !isKnownUniquelyReferenced(&_storage) {
        _storage = _storage.copy()
      }
      return _storage
    }

    var repeatedGroupAllTypes: ProtobufUnittest_TestAllTypes {
      get {return _storage._repeatedGroupAllTypes ?? ProtobufUnittest_TestAllTypes()}
      set {_uniqueStorage()._repeatedGroupAllTypes = newValue}
    }
    var hasRepeatedGroupAllTypes: Bool {
      return _storage._repeatedGroupAllTypes != nil
    }
    mutating func clearRepeatedGroupAllTypes() {
      return _storage._repeatedGroupAllTypes = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        while let fieldNumber = try decoder.nextFieldNumber() {
          try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
        }
      }
    }

    mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
      switch fieldNumber {
      case 21: try decoder.decodeSingularMessageField(value: &_storage._repeatedGroupAllTypes)
      default: break
      }
    }

    func _protoc_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        if let v = _storage._repeatedGroupAllTypes {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
        }
        try unknownFields.traverse(visitor: &visitor)
      }
    }

    func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestParsingMerge.RepeatedGroup) -> Bool {
      return withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage !== other_storage {
          if _storage._repeatedGroupAllTypes != other_storage._repeatedGroupAllTypes {return false}
        }
        if unknownFields != other.unknownFields {return false}
        return true
      }
    }
  }

  struct Extensions {

    static let optional_ext = SwiftProtobuf.MessageExtension<OptionalMessageExtensionField<ProtobufUnittest_TestAllTypes>, ProtobufUnittest_TestParsingMerge>(
      fieldNumber: 1000,
      fieldNames: .same(proto: "protobuf_unittest.TestParsingMerge.optional_ext"),
      defaultValue: ProtobufUnittest_TestAllTypes()
    )

    static let repeated_ext = SwiftProtobuf.MessageExtension<RepeatedMessageExtensionField<ProtobufUnittest_TestAllTypes>, ProtobufUnittest_TestParsingMerge>(
      fieldNumber: 1001,
      fieldNames: .same(proto: "protobuf_unittest.TestParsingMerge.repeated_ext"),
      defaultValue: []
    )
  }

  init() {}

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_extensionFieldValues.isInitialized {return false}
      if _storage._requiredAllTypes == nil {return false}
      return true
    }
  }

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
      }
    }
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 1: try decoder.decodeSingularMessageField(value: &_storage._requiredAllTypes)
    case 2: try decoder.decodeSingularMessageField(value: &_storage._optionalAllTypes)
    case 3: try decoder.decodeRepeatedMessageField(value: &_storage._repeatedAllTypes)
    case 10: try decoder.decodeSingularGroupField(value: &_storage._optionalGroup)
    case 20: try decoder.decodeRepeatedGroupField(value: &_storage._repeatedGroup)
    default: if (1000 <= fieldNumber && fieldNumber < 536870912) {
        try decoder.decodeExtensionField(values: &_extensionFieldValues, messageType: ProtobufUnittest_TestParsingMerge.self, fieldNumber: fieldNumber)
      }
    }
  }

  func _protoc_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._requiredAllTypes {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._optionalAllTypes {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._repeatedAllTypes.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._repeatedAllTypes, fieldNumber: 3)
      }
      if let v = _storage._optionalGroup {
        try visitor.visitSingularGroupField(value: v, fieldNumber: 10)
      }
      if !_storage._repeatedGroup.isEmpty {
        try visitor.visitRepeatedGroupField(value: _storage._repeatedGroup, fieldNumber: 20)
      }
      try visitor.visitExtensionFields(fields: _extensionFieldValues, start: 1000, end: 536870912)
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestParsingMerge) -> Bool {
    return withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
      if _storage !== other_storage {
        if _storage._requiredAllTypes != other_storage._requiredAllTypes {return false}
        if _storage._optionalAllTypes != other_storage._optionalAllTypes {return false}
        if _storage._repeatedAllTypes != other_storage._repeatedAllTypes {return false}
        if _storage._optionalGroup != other_storage._optionalGroup {return false}
        if _storage._repeatedGroup != other_storage._repeatedGroup {return false}
      }
      if unknownFields != other.unknownFields {return false}
      if _extensionFieldValues != other._extensionFieldValues {return false}
      return true
    }
  }

  private var _extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()

  mutating func setExtensionValue<F: SwiftProtobuf.ExtensionField>(ext: SwiftProtobuf.MessageExtension<F, ProtobufUnittest_TestParsingMerge>, value: F.ValueType) {
    _extensionFieldValues[ext.fieldNumber] = ext.set(value: value)
  }

  mutating func clearExtensionValue<F: SwiftProtobuf.ExtensionField>(ext: SwiftProtobuf.MessageExtension<F, ProtobufUnittest_TestParsingMerge>) {
    _extensionFieldValues[ext.fieldNumber] = nil
  }

  func getExtensionValue<F: SwiftProtobuf.ExtensionField>(ext: SwiftProtobuf.MessageExtension<F, ProtobufUnittest_TestParsingMerge>) -> F.ValueType {
    if let fieldValue = _extensionFieldValues[ext.fieldNumber] as? F {
      return fieldValue.value
    }
    return ext.defaultValue
  }

  func hasExtensionValue<F: SwiftProtobuf.ExtensionField>(ext: SwiftProtobuf.MessageExtension<F, ProtobufUnittest_TestParsingMerge>) -> Bool {
    return _extensionFieldValues[ext.fieldNumber] is F
  }
  func _protobuf_names(for number: Int) -> _NameMap.Names? {
    return ProtobufUnittest_TestParsingMerge._protobuf_nameMap.names(for: number) ?? _extensionFieldValues.fieldNames(for: number)
  }
}

struct ProtobufUnittest_TestCommentInjectionMessage: SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "TestCommentInjectionMessage"
  static let protoPackageName: String = "protobuf_unittest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "a"),
  ]

  ///   */ <- This should not close the generated doc comment
  private var _a: String? = nil
  var a: String {
    get {return _a ?? "*/ <- Neither should this."}
    set {_a = newValue}
  }
  var hasA: Bool {
    return _a != nil
  }
  mutating func clearA() {
    return _a = nil
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
    }
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 1: try decoder.decodeSingularStringField(value: &_a)
    default: break
    }
  }

  func _protoc_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = _a {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestCommentInjectionMessage) -> Bool {
    if _a != other._a {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

///   Test that RPC services work.
struct ProtobufUnittest_FooRequest: SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "FooRequest"
  static let protoPackageName: String = "protobuf_unittest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
    }
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
  }

  func _protoc_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protoc_generated_isEqualTo(other: ProtobufUnittest_FooRequest) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

struct ProtobufUnittest_FooResponse: SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "FooResponse"
  static let protoPackageName: String = "protobuf_unittest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
    }
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
  }

  func _protoc_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protoc_generated_isEqualTo(other: ProtobufUnittest_FooResponse) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

struct ProtobufUnittest_FooClientMessage: SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "FooClientMessage"
  static let protoPackageName: String = "protobuf_unittest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
    }
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
  }

  func _protoc_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protoc_generated_isEqualTo(other: ProtobufUnittest_FooClientMessage) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

struct ProtobufUnittest_FooServerMessage: SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "FooServerMessage"
  static let protoPackageName: String = "protobuf_unittest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
    }
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
  }

  func _protoc_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protoc_generated_isEqualTo(other: ProtobufUnittest_FooServerMessage) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

struct ProtobufUnittest_BarRequest: SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "BarRequest"
  static let protoPackageName: String = "protobuf_unittest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
    }
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
  }

  func _protoc_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protoc_generated_isEqualTo(other: ProtobufUnittest_BarRequest) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

struct ProtobufUnittest_BarResponse: SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "BarResponse"
  static let protoPackageName: String = "protobuf_unittest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
    }
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
  }

  func _protoc_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protoc_generated_isEqualTo(other: ProtobufUnittest_BarResponse) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

struct ProtobufUnittest_TestJsonName: SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "TestJsonName"
  static let protoPackageName: String = "protobuf_unittest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .unique(proto: "field_name1", json: "fieldName1"),
    2: .same(proto: "fieldName2"),
    3: .same(proto: "FieldName3"),
    4: .unique(proto: "_field_name4", json: "FieldName4"),
    5: .unique(proto: "FIELD_NAME5", json: "FIELDNAME5"),
    6: .unique(proto: "field_name6", json: "@type"),
  ]

  private var _fieldName1: Int32? = nil
  var fieldName1: Int32 {
    get {return _fieldName1 ?? 0}
    set {_fieldName1 = newValue}
  }
  var hasFieldName1: Bool {
    return _fieldName1 != nil
  }
  mutating func clearFieldName1() {
    return _fieldName1 = nil
  }

  private var _fieldName2: Int32? = nil
  var fieldName2: Int32 {
    get {return _fieldName2 ?? 0}
    set {_fieldName2 = newValue}
  }
  var hasFieldName2: Bool {
    return _fieldName2 != nil
  }
  mutating func clearFieldName2() {
    return _fieldName2 = nil
  }

  private var _fieldName3: Int32? = nil
  var fieldName3: Int32 {
    get {return _fieldName3 ?? 0}
    set {_fieldName3 = newValue}
  }
  var hasFieldName3: Bool {
    return _fieldName3 != nil
  }
  mutating func clearFieldName3() {
    return _fieldName3 = nil
  }

  private var _fieldName4: Int32? = nil
  var fieldName4: Int32 {
    get {return _fieldName4 ?? 0}
    set {_fieldName4 = newValue}
  }
  var hasFieldName4: Bool {
    return _fieldName4 != nil
  }
  mutating func clearFieldName4() {
    return _fieldName4 = nil
  }

  private var _fieldName5: Int32? = nil
  var fieldName5: Int32 {
    get {return _fieldName5 ?? 0}
    set {_fieldName5 = newValue}
  }
  var hasFieldName5: Bool {
    return _fieldName5 != nil
  }
  mutating func clearFieldName5() {
    return _fieldName5 = nil
  }

  private var _fieldName6: Int32? = nil
  var fieldName6: Int32 {
    get {return _fieldName6 ?? 0}
    set {_fieldName6 = newValue}
  }
  var hasFieldName6: Bool {
    return _fieldName6 != nil
  }
  mutating func clearFieldName6() {
    return _fieldName6 = nil
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
    }
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 1: try decoder.decodeSingularInt32Field(value: &_fieldName1)
    case 2: try decoder.decodeSingularInt32Field(value: &_fieldName2)
    case 3: try decoder.decodeSingularInt32Field(value: &_fieldName3)
    case 4: try decoder.decodeSingularInt32Field(value: &_fieldName4)
    case 5: try decoder.decodeSingularInt32Field(value: &_fieldName5)
    case 6: try decoder.decodeSingularInt32Field(value: &_fieldName6)
    default: break
    }
  }

  func _protoc_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = _fieldName1 {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    }
    if let v = _fieldName2 {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    }
    if let v = _fieldName3 {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
    }
    if let v = _fieldName4 {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 4)
    }
    if let v = _fieldName5 {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 5)
    }
    if let v = _fieldName6 {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestJsonName) -> Bool {
    if _fieldName1 != other._fieldName1 {return false}
    if _fieldName2 != other._fieldName2 {return false}
    if _fieldName3 != other._fieldName3 {return false}
    if _fieldName4 != other._fieldName4 {return false}
    if _fieldName5 != other._fieldName5 {return false}
    if _fieldName6 != other._fieldName6 {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

struct ProtobufUnittest_TestHugeFieldNumbers: SwiftProtobuf.Proto2Message, SwiftProtobuf.ExtensibleMessage, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "TestHugeFieldNumbers"
  static let protoPackageName: String = "protobuf_unittest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    536870000: .unique(proto: "optional_int32", json: "optionalInt32"),
    536870001: .unique(proto: "fixed_32", json: "fixed32"),
    536870002: .unique(proto: "repeated_int32", json: "repeatedInt32"),
    536870003: .unique(proto: "packed_int32", json: "packedInt32"),
    536870004: .unique(proto: "optional_enum", json: "optionalEnum"),
    536870005: .unique(proto: "optional_string", json: "optionalString"),
    536870006: .unique(proto: "optional_bytes", json: "optionalBytes"),
    536870007: .unique(proto: "optional_message", json: "optionalMessage"),
    536870008: .unique(proto: "OptionalGroup", json: "optionalgroup"),
    536870010: .unique(proto: "string_string_map", json: "stringStringMap"),
    536870011: .unique(proto: "oneof_uint32", json: "oneofUint32"),
    536870012: .unique(proto: "oneof_test_all_types", json: "oneofTestAllTypes"),
    536870013: .unique(proto: "oneof_string", json: "oneofString"),
    536870014: .unique(proto: "oneof_bytes", json: "oneofBytes"),
  ]

  private class _StorageClass {
    var _optionalInt32: Int32? = nil
    var _fixed32: Int32? = nil
    var _repeatedInt32: [Int32] = []
    var _packedInt32: [Int32] = []
    var _optionalEnum: ProtobufUnittest_ForeignEnum? = nil
    var _optionalString: String? = nil
    var _optionalBytes: Data? = nil
    var _optionalMessage: ProtobufUnittest_ForeignMessage? = nil
    var _optionalGroup: ProtobufUnittest_TestHugeFieldNumbers.OptionalGroup? = nil
    var _stringStringMap: Dictionary<String,String> = [:]
    var _oneofField: ProtobufUnittest_TestHugeFieldNumbers.OneOf_OneofField?

    init() {}

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._optionalInt32 = _optionalInt32
      clone._fixed32 = _fixed32
      clone._repeatedInt32 = _repeatedInt32
      clone._packedInt32 = _packedInt32
      clone._optionalEnum = _optionalEnum
      clone._optionalString = _optionalString
      clone._optionalBytes = _optionalBytes
      clone._optionalMessage = _optionalMessage
      clone._optionalGroup = _optionalGroup
      clone._stringStringMap = _stringStringMap
      clone._oneofField = _oneofField
      return clone
    }
  }

  private var _storage = _StorageClass()

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }

  var optionalInt32: Int32 {
    get {return _storage._optionalInt32 ?? 0}
    set {_uniqueStorage()._optionalInt32 = newValue}
  }
  var hasOptionalInt32: Bool {
    return _storage._optionalInt32 != nil
  }
  mutating func clearOptionalInt32() {
    return _storage._optionalInt32 = nil
  }

  var fixed32: Int32 {
    get {return _storage._fixed32 ?? 0}
    set {_uniqueStorage()._fixed32 = newValue}
  }
  var hasFixed32: Bool {
    return _storage._fixed32 != nil
  }
  mutating func clearFixed32() {
    return _storage._fixed32 = nil
  }

  var repeatedInt32: [Int32] {
    get {return _storage._repeatedInt32}
    set {_uniqueStorage()._repeatedInt32 = newValue}
  }

  var packedInt32: [Int32] {
    get {return _storage._packedInt32}
    set {_uniqueStorage()._packedInt32 = newValue}
  }

  var optionalEnum: ProtobufUnittest_ForeignEnum {
    get {return _storage._optionalEnum ?? ProtobufUnittest_ForeignEnum.foreignFoo}
    set {_uniqueStorage()._optionalEnum = newValue}
  }
  var hasOptionalEnum: Bool {
    return _storage._optionalEnum != nil
  }
  mutating func clearOptionalEnum() {
    return _storage._optionalEnum = nil
  }

  var optionalString: String {
    get {return _storage._optionalString ?? ""}
    set {_uniqueStorage()._optionalString = newValue}
  }
  var hasOptionalString: Bool {
    return _storage._optionalString != nil
  }
  mutating func clearOptionalString() {
    return _storage._optionalString = nil
  }

  var optionalBytes: Data {
    get {return _storage._optionalBytes ?? Data()}
    set {_uniqueStorage()._optionalBytes = newValue}
  }
  var hasOptionalBytes: Bool {
    return _storage._optionalBytes != nil
  }
  mutating func clearOptionalBytes() {
    return _storage._optionalBytes = nil
  }

  var optionalMessage: ProtobufUnittest_ForeignMessage {
    get {return _storage._optionalMessage ?? ProtobufUnittest_ForeignMessage()}
    set {_uniqueStorage()._optionalMessage = newValue}
  }
  var hasOptionalMessage: Bool {
    return _storage._optionalMessage != nil
  }
  mutating func clearOptionalMessage() {
    return _storage._optionalMessage = nil
  }

  var optionalGroup: ProtobufUnittest_TestHugeFieldNumbers.OptionalGroup {
    get {return _storage._optionalGroup ?? ProtobufUnittest_TestHugeFieldNumbers.OptionalGroup()}
    set {_uniqueStorage()._optionalGroup = newValue}
  }
  var hasOptionalGroup: Bool {
    return _storage._optionalGroup != nil
  }
  mutating func clearOptionalGroup() {
    return _storage._optionalGroup = nil
  }

  var stringStringMap: Dictionary<String,String> {
    get {return _storage._stringStringMap}
    set {_uniqueStorage()._stringStringMap = newValue}
  }

  var oneofUint32: UInt32 {
    get {
      if case .oneofUint32(let v)? = _storage._oneofField {
        return v
      }
      return 0
    }
    set {
      _uniqueStorage()._oneofField = .oneofUint32(newValue)
    }
  }

  var oneofTestAllTypes: ProtobufUnittest_TestAllTypes {
    get {
      if case .oneofTestAllTypes(let v)? = _storage._oneofField {
        return v
      }
      return ProtobufUnittest_TestAllTypes()
    }
    set {
      _uniqueStorage()._oneofField = .oneofTestAllTypes(newValue)
    }
  }

  var oneofString: String {
    get {
      if case .oneofString(let v)? = _storage._oneofField {
        return v
      }
      return ""
    }
    set {
      _uniqueStorage()._oneofField = .oneofString(newValue)
    }
  }

  var oneofBytes: Data {
    get {
      if case .oneofBytes(let v)? = _storage._oneofField {
        return v
      }
      return Data()
    }
    set {
      _uniqueStorage()._oneofField = .oneofBytes(newValue)
    }
  }

  var oneofField: OneOf_OneofField? {
    get {return _storage._oneofField}
    set {
      _uniqueStorage()._oneofField = newValue
    }
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_OneofField: Equatable {
    case oneofUint32(UInt32)
    case oneofTestAllTypes(ProtobufUnittest_TestAllTypes)
    case oneofString(String)
    case oneofBytes(Data)

    static func ==(lhs: ProtobufUnittest_TestHugeFieldNumbers.OneOf_OneofField, rhs: ProtobufUnittest_TestHugeFieldNumbers.OneOf_OneofField) -> Bool {
      switch (lhs, rhs) {
      case (.oneofUint32(let l), .oneofUint32(let r)): return l == r
      case (.oneofTestAllTypes(let l), .oneofTestAllTypes(let r)): return l == r
      case (.oneofString(let l), .oneofString(let r)): return l == r
      case (.oneofBytes(let l), .oneofBytes(let r)): return l == r
      default: return false
      }
    }

    fileprivate init?<T: SwiftProtobuf.Decoder>(byDecodingFrom decoder: inout T, fieldNumber: Int) throws {
      switch fieldNumber {
      case 536870011:
        var value: UInt32?
        try decoder.decodeSingularUInt32Field(value: &value)
        if let value = value {
          self = .oneofUint32(value)
          return
        }
      case 536870012:
        var value: ProtobufUnittest_TestAllTypes?
        try decoder.decodeSingularMessageField(value: &value)
        if let value = value {
          self = .oneofTestAllTypes(value)
          return
        }
      case 536870013:
        var value: String?
        try decoder.decodeSingularStringField(value: &value)
        if let value = value {
          self = .oneofString(value)
          return
        }
      case 536870014:
        var value: Data?
        try decoder.decodeSingularBytesField(value: &value)
        if let value = value {
          self = .oneofBytes(value)
          return
        }
      default:
        break
      }
      return nil
    }

    fileprivate func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V, start: Int, end: Int) throws {
      switch self {
      case .oneofUint32(let v):
        if start <= 536870011 && 536870011 < end {
          try visitor.visitSingularUInt32Field(value: v, fieldNumber: 536870011)
        }
      case .oneofTestAllTypes(let v):
        if start <= 536870012 && 536870012 < end {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 536870012)
        }
      case .oneofString(let v):
        if start <= 536870013 && 536870013 < end {
          try visitor.visitSingularStringField(value: v, fieldNumber: 536870013)
        }
      case .oneofBytes(let v):
        if start <= 536870014 && 536870014 < end {
          try visitor.visitSingularBytesField(value: v, fieldNumber: 536870014)
        }
      }
    }
  }

  struct OptionalGroup: SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = "OptionalGroup"
    static let protoPackageName: String = "protobuf_unittest"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
      536870009: .unique(proto: "group_a", json: "groupA"),
    ]

    private var _groupA: Int32? = nil
    var groupA: Int32 {
      get {return _groupA ?? 0}
      set {_groupA = newValue}
    }
    var hasGroupA: Bool {
      return _groupA != nil
    }
    mutating func clearGroupA() {
      return _groupA = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
      }
    }

    mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
      switch fieldNumber {
      case 536870009: try decoder.decodeSingularInt32Field(value: &_groupA)
      default: break
      }
    }

    func _protoc_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = _groupA {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 536870009)
      }
      try unknownFields.traverse(visitor: &visitor)
    }

    func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestHugeFieldNumbers.OptionalGroup) -> Bool {
      if _groupA != other._groupA {return false}
      if unknownFields != other.unknownFields {return false}
      return true
    }
  }

  init() {}

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_extensionFieldValues.isInitialized {return false}
      return true
    }
  }

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
      }
    }
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 536870000: try decoder.decodeSingularInt32Field(value: &_storage._optionalInt32)
    case 536870001: try decoder.decodeSingularInt32Field(value: &_storage._fixed32)
    case 536870002: try decoder.decodeRepeatedInt32Field(value: &_storage._repeatedInt32)
    case 536870003: try decoder.decodeRepeatedInt32Field(value: &_storage._packedInt32)
    case 536870004: try decoder.decodeSingularEnumField(value: &_storage._optionalEnum)
    case 536870005: try decoder.decodeSingularStringField(value: &_storage._optionalString)
    case 536870006: try decoder.decodeSingularBytesField(value: &_storage._optionalBytes)
    case 536870007: try decoder.decodeSingularMessageField(value: &_storage._optionalMessage)
    case 536870008: try decoder.decodeSingularGroupField(value: &_storage._optionalGroup)
    case 536870010: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &_storage._stringStringMap)
    case 536870011, 536870012, 536870013, 536870014:
      if _storage._oneofField != nil {
        try decoder.handleConflictingOneOf()
      }
      _storage._oneofField = try ProtobufUnittest_TestHugeFieldNumbers.OneOf_OneofField(byDecodingFrom: &decoder, fieldNumber: fieldNumber)
    default: if (536860000 <= fieldNumber && fieldNumber < 536870000) {
        try decoder.decodeExtensionField(values: &_extensionFieldValues, messageType: ProtobufUnittest_TestHugeFieldNumbers.self, fieldNumber: fieldNumber)
      }
    }
  }

  func _protoc_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      try visitor.visitExtensionFields(fields: _extensionFieldValues, start: 536860000, end: 536870000)
      if let v = _storage._optionalInt32 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 536870000)
      }
      if let v = _storage._fixed32 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 536870001)
      }
      if !_storage._repeatedInt32.isEmpty {
        try visitor.visitRepeatedInt32Field(value: _storage._repeatedInt32, fieldNumber: 536870002)
      }
      if !_storage._packedInt32.isEmpty {
        try visitor.visitPackedInt32Field(value: _storage._packedInt32, fieldNumber: 536870003)
      }
      if let v = _storage._optionalEnum {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 536870004)
      }
      if let v = _storage._optionalString {
        try visitor.visitSingularStringField(value: v, fieldNumber: 536870005)
      }
      if let v = _storage._optionalBytes {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 536870006)
      }
      if let v = _storage._optionalMessage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 536870007)
      }
      if let v = _storage._optionalGroup {
        try visitor.visitSingularGroupField(value: v, fieldNumber: 536870008)
      }
      if !_storage._stringStringMap.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: _storage._stringStringMap, fieldNumber: 536870010)
      }
      try _storage._oneofField?.traverse(visitor: &visitor, start: 536870011, end: 536870015)
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestHugeFieldNumbers) -> Bool {
    return withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
      if _storage !== other_storage {
        if _storage._optionalInt32 != other_storage._optionalInt32 {return false}
        if _storage._fixed32 != other_storage._fixed32 {return false}
        if _storage._repeatedInt32 != other_storage._repeatedInt32 {return false}
        if _storage._packedInt32 != other_storage._packedInt32 {return false}
        if _storage._optionalEnum != other_storage._optionalEnum {return false}
        if _storage._optionalString != other_storage._optionalString {return false}
        if _storage._optionalBytes != other_storage._optionalBytes {return false}
        if _storage._optionalMessage != other_storage._optionalMessage {return false}
        if _storage._optionalGroup != other_storage._optionalGroup {return false}
        if _storage._stringStringMap != other_storage._stringStringMap {return false}
        if _storage._oneofField != other_storage._oneofField {return false}
      }
      if unknownFields != other.unknownFields {return false}
      if _extensionFieldValues != other._extensionFieldValues {return false}
      return true
    }
  }

  private var _extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()

  mutating func setExtensionValue<F: SwiftProtobuf.ExtensionField>(ext: SwiftProtobuf.MessageExtension<F, ProtobufUnittest_TestHugeFieldNumbers>, value: F.ValueType) {
    _extensionFieldValues[ext.fieldNumber] = ext.set(value: value)
  }

  mutating func clearExtensionValue<F: SwiftProtobuf.ExtensionField>(ext: SwiftProtobuf.MessageExtension<F, ProtobufUnittest_TestHugeFieldNumbers>) {
    _extensionFieldValues[ext.fieldNumber] = nil
  }

  func getExtensionValue<F: SwiftProtobuf.ExtensionField>(ext: SwiftProtobuf.MessageExtension<F, ProtobufUnittest_TestHugeFieldNumbers>) -> F.ValueType {
    if let fieldValue = _extensionFieldValues[ext.fieldNumber] as? F {
      return fieldValue.value
    }
    return ext.defaultValue
  }

  func hasExtensionValue<F: SwiftProtobuf.ExtensionField>(ext: SwiftProtobuf.MessageExtension<F, ProtobufUnittest_TestHugeFieldNumbers>) -> Bool {
    return _extensionFieldValues[ext.fieldNumber] is F
  }
  func _protobuf_names(for number: Int) -> _NameMap.Names? {
    return ProtobufUnittest_TestHugeFieldNumbers._protobuf_nameMap.names(for: number) ?? _extensionFieldValues.fieldNames(for: number)
  }
}

///   Singular
let ProtobufUnittest_Extensions_optional_int32_extension = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, ProtobufUnittest_TestAllExtensions>(
  fieldNumber: 1,
  fieldNames: .same(proto: "protobuf_unittest.optional_int32_extension"),
  defaultValue: 0
)

let ProtobufUnittest_Extensions_optional_int64_extension = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufInt64>, ProtobufUnittest_TestAllExtensions>(
  fieldNumber: 2,
  fieldNames: .same(proto: "protobuf_unittest.optional_int64_extension"),
  defaultValue: 0
)

let ProtobufUnittest_Extensions_optional_uint32_extension = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufUInt32>, ProtobufUnittest_TestAllExtensions>(
  fieldNumber: 3,
  fieldNames: .same(proto: "protobuf_unittest.optional_uint32_extension"),
  defaultValue: 0
)

let ProtobufUnittest_Extensions_optional_uint64_extension = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufUInt64>, ProtobufUnittest_TestAllExtensions>(
  fieldNumber: 4,
  fieldNames: .same(proto: "protobuf_unittest.optional_uint64_extension"),
  defaultValue: 0
)

let ProtobufUnittest_Extensions_optional_sint32_extension = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufSInt32>, ProtobufUnittest_TestAllExtensions>(
  fieldNumber: 5,
  fieldNames: .same(proto: "protobuf_unittest.optional_sint32_extension"),
  defaultValue: 0
)

let ProtobufUnittest_Extensions_optional_sint64_extension = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufSInt64>, ProtobufUnittest_TestAllExtensions>(
  fieldNumber: 6,
  fieldNames: .same(proto: "protobuf_unittest.optional_sint64_extension"),
  defaultValue: 0
)

let ProtobufUnittest_Extensions_optional_fixed32_extension = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufFixed32>, ProtobufUnittest_TestAllExtensions>(
  fieldNumber: 7,
  fieldNames: .same(proto: "protobuf_unittest.optional_fixed32_extension"),
  defaultValue: 0
)

let ProtobufUnittest_Extensions_optional_fixed64_extension = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufFixed64>, ProtobufUnittest_TestAllExtensions>(
  fieldNumber: 8,
  fieldNames: .same(proto: "protobuf_unittest.optional_fixed64_extension"),
  defaultValue: 0
)

let ProtobufUnittest_Extensions_optional_sfixed32_extension = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufSFixed32>, ProtobufUnittest_TestAllExtensions>(
  fieldNumber: 9,
  fieldNames: .same(proto: "protobuf_unittest.optional_sfixed32_extension"),
  defaultValue: 0
)

let ProtobufUnittest_Extensions_optional_sfixed64_extension = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufSFixed64>, ProtobufUnittest_TestAllExtensions>(
  fieldNumber: 10,
  fieldNames: .same(proto: "protobuf_unittest.optional_sfixed64_extension"),
  defaultValue: 0
)

let ProtobufUnittest_Extensions_optional_float_extension = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufFloat>, ProtobufUnittest_TestAllExtensions>(
  fieldNumber: 11,
  fieldNames: .same(proto: "protobuf_unittest.optional_float_extension"),
  defaultValue: 0
)

let ProtobufUnittest_Extensions_optional_double_extension = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufDouble>, ProtobufUnittest_TestAllExtensions>(
  fieldNumber: 12,
  fieldNames: .same(proto: "protobuf_unittest.optional_double_extension"),
  defaultValue: 0
)

let ProtobufUnittest_Extensions_optional_bool_extension = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufBool>, ProtobufUnittest_TestAllExtensions>(
  fieldNumber: 13,
  fieldNames: .same(proto: "protobuf_unittest.optional_bool_extension"),
  defaultValue: false
)

let ProtobufUnittest_Extensions_optional_string_extension = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufString>, ProtobufUnittest_TestAllExtensions>(
  fieldNumber: 14,
  fieldNames: .same(proto: "protobuf_unittest.optional_string_extension"),
  defaultValue: ""
)

let ProtobufUnittest_Extensions_optional_bytes_extension = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufBytes>, ProtobufUnittest_TestAllExtensions>(
  fieldNumber: 15,
  fieldNames: .same(proto: "protobuf_unittest.optional_bytes_extension"),
  defaultValue: Data()
)

let ProtobufUnittest_Extensions_OptionalGroup_extension = SwiftProtobuf.MessageExtension<OptionalGroupExtensionField<ProtobufUnittest_OptionalGroup_extension>, ProtobufUnittest_TestAllExtensions>(
  fieldNumber: 16,
  fieldNames: .same(proto: "protobuf_unittest.OptionalGroup_extension"),
  defaultValue: ProtobufUnittest_OptionalGroup_extension()
)

let ProtobufUnittest_Extensions_optional_nested_message_extension = SwiftProtobuf.MessageExtension<OptionalMessageExtensionField<ProtobufUnittest_TestAllTypes.NestedMessage>, ProtobufUnittest_TestAllExtensions>(
  fieldNumber: 18,
  fieldNames: .same(proto: "protobuf_unittest.optional_nested_message_extension"),
  defaultValue: ProtobufUnittest_TestAllTypes.NestedMessage()
)

let ProtobufUnittest_Extensions_optional_foreign_message_extension = SwiftProtobuf.MessageExtension<OptionalMessageExtensionField<ProtobufUnittest_ForeignMessage>, ProtobufUnittest_TestAllExtensions>(
  fieldNumber: 19,
  fieldNames: .same(proto: "protobuf_unittest.optional_foreign_message_extension"),
  defaultValue: ProtobufUnittest_ForeignMessage()
)

let ProtobufUnittest_Extensions_optional_import_message_extension = SwiftProtobuf.MessageExtension<OptionalMessageExtensionField<ProtobufUnittestImport_ImportMessage>, ProtobufUnittest_TestAllExtensions>(
  fieldNumber: 20,
  fieldNames: .same(proto: "protobuf_unittest.optional_import_message_extension"),
  defaultValue: ProtobufUnittestImport_ImportMessage()
)

let ProtobufUnittest_Extensions_optional_nested_enum_extension = SwiftProtobuf.MessageExtension<OptionalEnumExtensionField<ProtobufUnittest_TestAllTypes.NestedEnum>, ProtobufUnittest_TestAllExtensions>(
  fieldNumber: 21,
  fieldNames: .same(proto: "protobuf_unittest.optional_nested_enum_extension"),
  defaultValue: ProtobufUnittest_TestAllTypes.NestedEnum.foo
)

let ProtobufUnittest_Extensions_optional_foreign_enum_extension = SwiftProtobuf.MessageExtension<OptionalEnumExtensionField<ProtobufUnittest_ForeignEnum>, ProtobufUnittest_TestAllExtensions>(
  fieldNumber: 22,
  fieldNames: .same(proto: "protobuf_unittest.optional_foreign_enum_extension"),
  defaultValue: ProtobufUnittest_ForeignEnum.foreignFoo
)

let ProtobufUnittest_Extensions_optional_import_enum_extension = SwiftProtobuf.MessageExtension<OptionalEnumExtensionField<ProtobufUnittestImport_ImportEnum>, ProtobufUnittest_TestAllExtensions>(
  fieldNumber: 23,
  fieldNames: .same(proto: "protobuf_unittest.optional_import_enum_extension"),
  defaultValue: ProtobufUnittestImport_ImportEnum.importFoo
)

let ProtobufUnittest_Extensions_optional_string_piece_extension = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufString>, ProtobufUnittest_TestAllExtensions>(
  fieldNumber: 24,
  fieldNames: .same(proto: "protobuf_unittest.optional_string_piece_extension"),
  defaultValue: ""
)

let ProtobufUnittest_Extensions_optional_cord_extension = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufString>, ProtobufUnittest_TestAllExtensions>(
  fieldNumber: 25,
  fieldNames: .same(proto: "protobuf_unittest.optional_cord_extension"),
  defaultValue: ""
)

let ProtobufUnittest_Extensions_optional_public_import_message_extension = SwiftProtobuf.MessageExtension<OptionalMessageExtensionField<ProtobufUnittestImport_PublicImportMessage>, ProtobufUnittest_TestAllExtensions>(
  fieldNumber: 26,
  fieldNames: .same(proto: "protobuf_unittest.optional_public_import_message_extension"),
  defaultValue: ProtobufUnittestImport_PublicImportMessage()
)

let ProtobufUnittest_Extensions_optional_lazy_message_extension = SwiftProtobuf.MessageExtension<OptionalMessageExtensionField<ProtobufUnittest_TestAllTypes.NestedMessage>, ProtobufUnittest_TestAllExtensions>(
  fieldNumber: 27,
  fieldNames: .same(proto: "protobuf_unittest.optional_lazy_message_extension"),
  defaultValue: ProtobufUnittest_TestAllTypes.NestedMessage()
)

///   Repeated
let ProtobufUnittest_Extensions_repeated_int32_extension = SwiftProtobuf.MessageExtension<RepeatedExtensionField<SwiftProtobuf.ProtobufInt32>, ProtobufUnittest_TestAllExtensions>(
  fieldNumber: 31,
  fieldNames: .same(proto: "protobuf_unittest.repeated_int32_extension"),
  defaultValue: []
)

let ProtobufUnittest_Extensions_repeated_int64_extension = SwiftProtobuf.MessageExtension<RepeatedExtensionField<SwiftProtobuf.ProtobufInt64>, ProtobufUnittest_TestAllExtensions>(
  fieldNumber: 32,
  fieldNames: .same(proto: "protobuf_unittest.repeated_int64_extension"),
  defaultValue: []
)

let ProtobufUnittest_Extensions_repeated_uint32_extension = SwiftProtobuf.MessageExtension<RepeatedExtensionField<SwiftProtobuf.ProtobufUInt32>, ProtobufUnittest_TestAllExtensions>(
  fieldNumber: 33,
  fieldNames: .same(proto: "protobuf_unittest.repeated_uint32_extension"),
  defaultValue: []
)

let ProtobufUnittest_Extensions_repeated_uint64_extension = SwiftProtobuf.MessageExtension<RepeatedExtensionField<SwiftProtobuf.ProtobufUInt64>, ProtobufUnittest_TestAllExtensions>(
  fieldNumber: 34,
  fieldNames: .same(proto: "protobuf_unittest.repeated_uint64_extension"),
  defaultValue: []
)

let ProtobufUnittest_Extensions_repeated_sint32_extension = SwiftProtobuf.MessageExtension<RepeatedExtensionField<SwiftProtobuf.ProtobufSInt32>, ProtobufUnittest_TestAllExtensions>(
  fieldNumber: 35,
  fieldNames: .same(proto: "protobuf_unittest.repeated_sint32_extension"),
  defaultValue: []
)

let ProtobufUnittest_Extensions_repeated_sint64_extension = SwiftProtobuf.MessageExtension<RepeatedExtensionField<SwiftProtobuf.ProtobufSInt64>, ProtobufUnittest_TestAllExtensions>(
  fieldNumber: 36,
  fieldNames: .same(proto: "protobuf_unittest.repeated_sint64_extension"),
  defaultValue: []
)

let ProtobufUnittest_Extensions_repeated_fixed32_extension = SwiftProtobuf.MessageExtension<RepeatedExtensionField<SwiftProtobuf.ProtobufFixed32>, ProtobufUnittest_TestAllExtensions>(
  fieldNumber: 37,
  fieldNames: .same(proto: "protobuf_unittest.repeated_fixed32_extension"),
  defaultValue: []
)

let ProtobufUnittest_Extensions_repeated_fixed64_extension = SwiftProtobuf.MessageExtension<RepeatedExtensionField<SwiftProtobuf.ProtobufFixed64>, ProtobufUnittest_TestAllExtensions>(
  fieldNumber: 38,
  fieldNames: .same(proto: "protobuf_unittest.repeated_fixed64_extension"),
  defaultValue: []
)

let ProtobufUnittest_Extensions_repeated_sfixed32_extension = SwiftProtobuf.MessageExtension<RepeatedExtensionField<SwiftProtobuf.ProtobufSFixed32>, ProtobufUnittest_TestAllExtensions>(
  fieldNumber: 39,
  fieldNames: .same(proto: "protobuf_unittest.repeated_sfixed32_extension"),
  defaultValue: []
)

let ProtobufUnittest_Extensions_repeated_sfixed64_extension = SwiftProtobuf.MessageExtension<RepeatedExtensionField<SwiftProtobuf.ProtobufSFixed64>, ProtobufUnittest_TestAllExtensions>(
  fieldNumber: 40,
  fieldNames: .same(proto: "protobuf_unittest.repeated_sfixed64_extension"),
  defaultValue: []
)

let ProtobufUnittest_Extensions_repeated_float_extension = SwiftProtobuf.MessageExtension<RepeatedExtensionField<SwiftProtobuf.ProtobufFloat>, ProtobufUnittest_TestAllExtensions>(
  fieldNumber: 41,
  fieldNames: .same(proto: "protobuf_unittest.repeated_float_extension"),
  defaultValue: []
)

let ProtobufUnittest_Extensions_repeated_double_extension = SwiftProtobuf.MessageExtension<RepeatedExtensionField<SwiftProtobuf.ProtobufDouble>, ProtobufUnittest_TestAllExtensions>(
  fieldNumber: 42,
  fieldNames: .same(proto: "protobuf_unittest.repeated_double_extension"),
  defaultValue: []
)

let ProtobufUnittest_Extensions_repeated_bool_extension = SwiftProtobuf.MessageExtension<RepeatedExtensionField<SwiftProtobuf.ProtobufBool>, ProtobufUnittest_TestAllExtensions>(
  fieldNumber: 43,
  fieldNames: .same(proto: "protobuf_unittest.repeated_bool_extension"),
  defaultValue: []
)

let ProtobufUnittest_Extensions_repeated_string_extension = SwiftProtobuf.MessageExtension<RepeatedExtensionField<SwiftProtobuf.ProtobufString>, ProtobufUnittest_TestAllExtensions>(
  fieldNumber: 44,
  fieldNames: .same(proto: "protobuf_unittest.repeated_string_extension"),
  defaultValue: []
)

let ProtobufUnittest_Extensions_repeated_bytes_extension = SwiftProtobuf.MessageExtension<RepeatedExtensionField<SwiftProtobuf.ProtobufBytes>, ProtobufUnittest_TestAllExtensions>(
  fieldNumber: 45,
  fieldNames: .same(proto: "protobuf_unittest.repeated_bytes_extension"),
  defaultValue: []
)

let ProtobufUnittest_Extensions_RepeatedGroup_extension = SwiftProtobuf.MessageExtension<RepeatedGroupExtensionField<ProtobufUnittest_RepeatedGroup_extension>, ProtobufUnittest_TestAllExtensions>(
  fieldNumber: 46,
  fieldNames: .same(proto: "protobuf_unittest.RepeatedGroup_extension"),
  defaultValue: []
)

let ProtobufUnittest_Extensions_repeated_nested_message_extension = SwiftProtobuf.MessageExtension<RepeatedMessageExtensionField<ProtobufUnittest_TestAllTypes.NestedMessage>, ProtobufUnittest_TestAllExtensions>(
  fieldNumber: 48,
  fieldNames: .same(proto: "protobuf_unittest.repeated_nested_message_extension"),
  defaultValue: []
)

let ProtobufUnittest_Extensions_repeated_foreign_message_extension = SwiftProtobuf.MessageExtension<RepeatedMessageExtensionField<ProtobufUnittest_ForeignMessage>, ProtobufUnittest_TestAllExtensions>(
  fieldNumber: 49,
  fieldNames: .same(proto: "protobuf_unittest.repeated_foreign_message_extension"),
  defaultValue: []
)

let ProtobufUnittest_Extensions_repeated_import_message_extension = SwiftProtobuf.MessageExtension<RepeatedMessageExtensionField<ProtobufUnittestImport_ImportMessage>, ProtobufUnittest_TestAllExtensions>(
  fieldNumber: 50,
  fieldNames: .same(proto: "protobuf_unittest.repeated_import_message_extension"),
  defaultValue: []
)

let ProtobufUnittest_Extensions_repeated_nested_enum_extension = SwiftProtobuf.MessageExtension<RepeatedEnumExtensionField<ProtobufUnittest_TestAllTypes.NestedEnum>, ProtobufUnittest_TestAllExtensions>(
  fieldNumber: 51,
  fieldNames: .same(proto: "protobuf_unittest.repeated_nested_enum_extension"),
  defaultValue: []
)

let ProtobufUnittest_Extensions_repeated_foreign_enum_extension = SwiftProtobuf.MessageExtension<RepeatedEnumExtensionField<ProtobufUnittest_ForeignEnum>, ProtobufUnittest_TestAllExtensions>(
  fieldNumber: 52,
  fieldNames: .same(proto: "protobuf_unittest.repeated_foreign_enum_extension"),
  defaultValue: []
)

let ProtobufUnittest_Extensions_repeated_import_enum_extension = SwiftProtobuf.MessageExtension<RepeatedEnumExtensionField<ProtobufUnittestImport_ImportEnum>, ProtobufUnittest_TestAllExtensions>(
  fieldNumber: 53,
  fieldNames: .same(proto: "protobuf_unittest.repeated_import_enum_extension"),
  defaultValue: []
)

let ProtobufUnittest_Extensions_repeated_string_piece_extension = SwiftProtobuf.MessageExtension<RepeatedExtensionField<SwiftProtobuf.ProtobufString>, ProtobufUnittest_TestAllExtensions>(
  fieldNumber: 54,
  fieldNames: .same(proto: "protobuf_unittest.repeated_string_piece_extension"),
  defaultValue: []
)

let ProtobufUnittest_Extensions_repeated_cord_extension = SwiftProtobuf.MessageExtension<RepeatedExtensionField<SwiftProtobuf.ProtobufString>, ProtobufUnittest_TestAllExtensions>(
  fieldNumber: 55,
  fieldNames: .same(proto: "protobuf_unittest.repeated_cord_extension"),
  defaultValue: []
)

let ProtobufUnittest_Extensions_repeated_lazy_message_extension = SwiftProtobuf.MessageExtension<RepeatedMessageExtensionField<ProtobufUnittest_TestAllTypes.NestedMessage>, ProtobufUnittest_TestAllExtensions>(
  fieldNumber: 57,
  fieldNames: .same(proto: "protobuf_unittest.repeated_lazy_message_extension"),
  defaultValue: []
)

///   Singular with defaults
let ProtobufUnittest_Extensions_default_int32_extension = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, ProtobufUnittest_TestAllExtensions>(
  fieldNumber: 61,
  fieldNames: .same(proto: "protobuf_unittest.default_int32_extension"),
  defaultValue: 41
)

let ProtobufUnittest_Extensions_default_int64_extension = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufInt64>, ProtobufUnittest_TestAllExtensions>(
  fieldNumber: 62,
  fieldNames: .same(proto: "protobuf_unittest.default_int64_extension"),
  defaultValue: 42
)

let ProtobufUnittest_Extensions_default_uint32_extension = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufUInt32>, ProtobufUnittest_TestAllExtensions>(
  fieldNumber: 63,
  fieldNames: .same(proto: "protobuf_unittest.default_uint32_extension"),
  defaultValue: 43
)

let ProtobufUnittest_Extensions_default_uint64_extension = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufUInt64>, ProtobufUnittest_TestAllExtensions>(
  fieldNumber: 64,
  fieldNames: .same(proto: "protobuf_unittest.default_uint64_extension"),
  defaultValue: 44
)

let ProtobufUnittest_Extensions_default_sint32_extension = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufSInt32>, ProtobufUnittest_TestAllExtensions>(
  fieldNumber: 65,
  fieldNames: .same(proto: "protobuf_unittest.default_sint32_extension"),
  defaultValue: -45
)

let ProtobufUnittest_Extensions_default_sint64_extension = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufSInt64>, ProtobufUnittest_TestAllExtensions>(
  fieldNumber: 66,
  fieldNames: .same(proto: "protobuf_unittest.default_sint64_extension"),
  defaultValue: 46
)

let ProtobufUnittest_Extensions_default_fixed32_extension = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufFixed32>, ProtobufUnittest_TestAllExtensions>(
  fieldNumber: 67,
  fieldNames: .same(proto: "protobuf_unittest.default_fixed32_extension"),
  defaultValue: 47
)

let ProtobufUnittest_Extensions_default_fixed64_extension = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufFixed64>, ProtobufUnittest_TestAllExtensions>(
  fieldNumber: 68,
  fieldNames: .same(proto: "protobuf_unittest.default_fixed64_extension"),
  defaultValue: 48
)

let ProtobufUnittest_Extensions_default_sfixed32_extension = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufSFixed32>, ProtobufUnittest_TestAllExtensions>(
  fieldNumber: 69,
  fieldNames: .same(proto: "protobuf_unittest.default_sfixed32_extension"),
  defaultValue: 49
)

let ProtobufUnittest_Extensions_default_sfixed64_extension = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufSFixed64>, ProtobufUnittest_TestAllExtensions>(
  fieldNumber: 70,
  fieldNames: .same(proto: "protobuf_unittest.default_sfixed64_extension"),
  defaultValue: -50
)

let ProtobufUnittest_Extensions_default_float_extension = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufFloat>, ProtobufUnittest_TestAllExtensions>(
  fieldNumber: 71,
  fieldNames: .same(proto: "protobuf_unittest.default_float_extension"),
  defaultValue: 51.5
)

let ProtobufUnittest_Extensions_default_double_extension = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufDouble>, ProtobufUnittest_TestAllExtensions>(
  fieldNumber: 72,
  fieldNames: .same(proto: "protobuf_unittest.default_double_extension"),
  defaultValue: 52000
)

let ProtobufUnittest_Extensions_default_bool_extension = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufBool>, ProtobufUnittest_TestAllExtensions>(
  fieldNumber: 73,
  fieldNames: .same(proto: "protobuf_unittest.default_bool_extension"),
  defaultValue: true
)

let ProtobufUnittest_Extensions_default_string_extension = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufString>, ProtobufUnittest_TestAllExtensions>(
  fieldNumber: 74,
  fieldNames: .same(proto: "protobuf_unittest.default_string_extension"),
  defaultValue: "hello"
)

let ProtobufUnittest_Extensions_default_bytes_extension = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufBytes>, ProtobufUnittest_TestAllExtensions>(
  fieldNumber: 75,
  fieldNames: .same(proto: "protobuf_unittest.default_bytes_extension"),
  defaultValue: Data(bytes: [119, 111, 114, 108, 100])
)

let ProtobufUnittest_Extensions_default_nested_enum_extension = SwiftProtobuf.MessageExtension<OptionalEnumExtensionField<ProtobufUnittest_TestAllTypes.NestedEnum>, ProtobufUnittest_TestAllExtensions>(
  fieldNumber: 81,
  fieldNames: .same(proto: "protobuf_unittest.default_nested_enum_extension"),
  defaultValue: ProtobufUnittest_TestAllTypes.NestedEnum.bar
)

let ProtobufUnittest_Extensions_default_foreign_enum_extension = SwiftProtobuf.MessageExtension<OptionalEnumExtensionField<ProtobufUnittest_ForeignEnum>, ProtobufUnittest_TestAllExtensions>(
  fieldNumber: 82,
  fieldNames: .same(proto: "protobuf_unittest.default_foreign_enum_extension"),
  defaultValue: ProtobufUnittest_ForeignEnum.foreignBar
)

let ProtobufUnittest_Extensions_default_import_enum_extension = SwiftProtobuf.MessageExtension<OptionalEnumExtensionField<ProtobufUnittestImport_ImportEnum>, ProtobufUnittest_TestAllExtensions>(
  fieldNumber: 83,
  fieldNames: .same(proto: "protobuf_unittest.default_import_enum_extension"),
  defaultValue: ProtobufUnittestImport_ImportEnum.importBar
)

let ProtobufUnittest_Extensions_default_string_piece_extension = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufString>, ProtobufUnittest_TestAllExtensions>(
  fieldNumber: 84,
  fieldNames: .same(proto: "protobuf_unittest.default_string_piece_extension"),
  defaultValue: "abc"
)

let ProtobufUnittest_Extensions_default_cord_extension = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufString>, ProtobufUnittest_TestAllExtensions>(
  fieldNumber: 85,
  fieldNames: .same(proto: "protobuf_unittest.default_cord_extension"),
  defaultValue: "123"
)

///   For oneof test
let ProtobufUnittest_Extensions_oneof_uint32_extension = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufUInt32>, ProtobufUnittest_TestAllExtensions>(
  fieldNumber: 111,
  fieldNames: .same(proto: "protobuf_unittest.oneof_uint32_extension"),
  defaultValue: 0
)

let ProtobufUnittest_Extensions_oneof_nested_message_extension = SwiftProtobuf.MessageExtension<OptionalMessageExtensionField<ProtobufUnittest_TestAllTypes.NestedMessage>, ProtobufUnittest_TestAllExtensions>(
  fieldNumber: 112,
  fieldNames: .same(proto: "protobuf_unittest.oneof_nested_message_extension"),
  defaultValue: ProtobufUnittest_TestAllTypes.NestedMessage()
)

let ProtobufUnittest_Extensions_oneof_string_extension = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufString>, ProtobufUnittest_TestAllExtensions>(
  fieldNumber: 113,
  fieldNames: .same(proto: "protobuf_unittest.oneof_string_extension"),
  defaultValue: ""
)

let ProtobufUnittest_Extensions_oneof_bytes_extension = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufBytes>, ProtobufUnittest_TestAllExtensions>(
  fieldNumber: 114,
  fieldNames: .same(proto: "protobuf_unittest.oneof_bytes_extension"),
  defaultValue: Data()
)

let ProtobufUnittest_Extensions_my_extension_string = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufString>, ProtobufUnittest_TestFieldOrderings>(
  fieldNumber: 50,
  fieldNames: .same(proto: "protobuf_unittest.my_extension_string"),
  defaultValue: ""
)

let ProtobufUnittest_Extensions_my_extension_int = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, ProtobufUnittest_TestFieldOrderings>(
  fieldNumber: 5,
  fieldNames: .same(proto: "protobuf_unittest.my_extension_int"),
  defaultValue: 0
)

let ProtobufUnittest_Extensions_packed_int32_extension = SwiftProtobuf.MessageExtension<PackedExtensionField<SwiftProtobuf.ProtobufInt32>, ProtobufUnittest_TestPackedExtensions>(
  fieldNumber: 90,
  fieldNames: .same(proto: "protobuf_unittest.packed_int32_extension"),
  defaultValue: []
)

let ProtobufUnittest_Extensions_packed_int64_extension = SwiftProtobuf.MessageExtension<PackedExtensionField<SwiftProtobuf.ProtobufInt64>, ProtobufUnittest_TestPackedExtensions>(
  fieldNumber: 91,
  fieldNames: .same(proto: "protobuf_unittest.packed_int64_extension"),
  defaultValue: []
)

let ProtobufUnittest_Extensions_packed_uint32_extension = SwiftProtobuf.MessageExtension<PackedExtensionField<SwiftProtobuf.ProtobufUInt32>, ProtobufUnittest_TestPackedExtensions>(
  fieldNumber: 92,
  fieldNames: .same(proto: "protobuf_unittest.packed_uint32_extension"),
  defaultValue: []
)

let ProtobufUnittest_Extensions_packed_uint64_extension = SwiftProtobuf.MessageExtension<PackedExtensionField<SwiftProtobuf.ProtobufUInt64>, ProtobufUnittest_TestPackedExtensions>(
  fieldNumber: 93,
  fieldNames: .same(proto: "protobuf_unittest.packed_uint64_extension"),
  defaultValue: []
)

let ProtobufUnittest_Extensions_packed_sint32_extension = SwiftProtobuf.MessageExtension<PackedExtensionField<SwiftProtobuf.ProtobufSInt32>, ProtobufUnittest_TestPackedExtensions>(
  fieldNumber: 94,
  fieldNames: .same(proto: "protobuf_unittest.packed_sint32_extension"),
  defaultValue: []
)

let ProtobufUnittest_Extensions_packed_sint64_extension = SwiftProtobuf.MessageExtension<PackedExtensionField<SwiftProtobuf.ProtobufSInt64>, ProtobufUnittest_TestPackedExtensions>(
  fieldNumber: 95,
  fieldNames: .same(proto: "protobuf_unittest.packed_sint64_extension"),
  defaultValue: []
)

let ProtobufUnittest_Extensions_packed_fixed32_extension = SwiftProtobuf.MessageExtension<PackedExtensionField<SwiftProtobuf.ProtobufFixed32>, ProtobufUnittest_TestPackedExtensions>(
  fieldNumber: 96,
  fieldNames: .same(proto: "protobuf_unittest.packed_fixed32_extension"),
  defaultValue: []
)

let ProtobufUnittest_Extensions_packed_fixed64_extension = SwiftProtobuf.MessageExtension<PackedExtensionField<SwiftProtobuf.ProtobufFixed64>, ProtobufUnittest_TestPackedExtensions>(
  fieldNumber: 97,
  fieldNames: .same(proto: "protobuf_unittest.packed_fixed64_extension"),
  defaultValue: []
)

let ProtobufUnittest_Extensions_packed_sfixed32_extension = SwiftProtobuf.MessageExtension<PackedExtensionField<SwiftProtobuf.ProtobufSFixed32>, ProtobufUnittest_TestPackedExtensions>(
  fieldNumber: 98,
  fieldNames: .same(proto: "protobuf_unittest.packed_sfixed32_extension"),
  defaultValue: []
)

let ProtobufUnittest_Extensions_packed_sfixed64_extension = SwiftProtobuf.MessageExtension<PackedExtensionField<SwiftProtobuf.ProtobufSFixed64>, ProtobufUnittest_TestPackedExtensions>(
  fieldNumber: 99,
  fieldNames: .same(proto: "protobuf_unittest.packed_sfixed64_extension"),
  defaultValue: []
)

let ProtobufUnittest_Extensions_packed_float_extension = SwiftProtobuf.MessageExtension<PackedExtensionField<SwiftProtobuf.ProtobufFloat>, ProtobufUnittest_TestPackedExtensions>(
  fieldNumber: 100,
  fieldNames: .same(proto: "protobuf_unittest.packed_float_extension"),
  defaultValue: []
)

let ProtobufUnittest_Extensions_packed_double_extension = SwiftProtobuf.MessageExtension<PackedExtensionField<SwiftProtobuf.ProtobufDouble>, ProtobufUnittest_TestPackedExtensions>(
  fieldNumber: 101,
  fieldNames: .same(proto: "protobuf_unittest.packed_double_extension"),
  defaultValue: []
)

let ProtobufUnittest_Extensions_packed_bool_extension = SwiftProtobuf.MessageExtension<PackedExtensionField<SwiftProtobuf.ProtobufBool>, ProtobufUnittest_TestPackedExtensions>(
  fieldNumber: 102,
  fieldNames: .same(proto: "protobuf_unittest.packed_bool_extension"),
  defaultValue: []
)

let ProtobufUnittest_Extensions_packed_enum_extension = SwiftProtobuf.MessageExtension<PackedEnumExtensionField<ProtobufUnittest_ForeignEnum>, ProtobufUnittest_TestPackedExtensions>(
  fieldNumber: 103,
  fieldNames: .same(proto: "protobuf_unittest.packed_enum_extension"),
  defaultValue: []
)

let ProtobufUnittest_Extensions_unpacked_int32_extension = SwiftProtobuf.MessageExtension<RepeatedExtensionField<SwiftProtobuf.ProtobufInt32>, ProtobufUnittest_TestUnpackedExtensions>(
  fieldNumber: 90,
  fieldNames: .same(proto: "protobuf_unittest.unpacked_int32_extension"),
  defaultValue: []
)

let ProtobufUnittest_Extensions_unpacked_int64_extension = SwiftProtobuf.MessageExtension<RepeatedExtensionField<SwiftProtobuf.ProtobufInt64>, ProtobufUnittest_TestUnpackedExtensions>(
  fieldNumber: 91,
  fieldNames: .same(proto: "protobuf_unittest.unpacked_int64_extension"),
  defaultValue: []
)

let ProtobufUnittest_Extensions_unpacked_uint32_extension = SwiftProtobuf.MessageExtension<RepeatedExtensionField<SwiftProtobuf.ProtobufUInt32>, ProtobufUnittest_TestUnpackedExtensions>(
  fieldNumber: 92,
  fieldNames: .same(proto: "protobuf_unittest.unpacked_uint32_extension"),
  defaultValue: []
)

let ProtobufUnittest_Extensions_unpacked_uint64_extension = SwiftProtobuf.MessageExtension<RepeatedExtensionField<SwiftProtobuf.ProtobufUInt64>, ProtobufUnittest_TestUnpackedExtensions>(
  fieldNumber: 93,
  fieldNames: .same(proto: "protobuf_unittest.unpacked_uint64_extension"),
  defaultValue: []
)

let ProtobufUnittest_Extensions_unpacked_sint32_extension = SwiftProtobuf.MessageExtension<RepeatedExtensionField<SwiftProtobuf.ProtobufSInt32>, ProtobufUnittest_TestUnpackedExtensions>(
  fieldNumber: 94,
  fieldNames: .same(proto: "protobuf_unittest.unpacked_sint32_extension"),
  defaultValue: []
)

let ProtobufUnittest_Extensions_unpacked_sint64_extension = SwiftProtobuf.MessageExtension<RepeatedExtensionField<SwiftProtobuf.ProtobufSInt64>, ProtobufUnittest_TestUnpackedExtensions>(
  fieldNumber: 95,
  fieldNames: .same(proto: "protobuf_unittest.unpacked_sint64_extension"),
  defaultValue: []
)

let ProtobufUnittest_Extensions_unpacked_fixed32_extension = SwiftProtobuf.MessageExtension<RepeatedExtensionField<SwiftProtobuf.ProtobufFixed32>, ProtobufUnittest_TestUnpackedExtensions>(
  fieldNumber: 96,
  fieldNames: .same(proto: "protobuf_unittest.unpacked_fixed32_extension"),
  defaultValue: []
)

let ProtobufUnittest_Extensions_unpacked_fixed64_extension = SwiftProtobuf.MessageExtension<RepeatedExtensionField<SwiftProtobuf.ProtobufFixed64>, ProtobufUnittest_TestUnpackedExtensions>(
  fieldNumber: 97,
  fieldNames: .same(proto: "protobuf_unittest.unpacked_fixed64_extension"),
  defaultValue: []
)

let ProtobufUnittest_Extensions_unpacked_sfixed32_extension = SwiftProtobuf.MessageExtension<RepeatedExtensionField<SwiftProtobuf.ProtobufSFixed32>, ProtobufUnittest_TestUnpackedExtensions>(
  fieldNumber: 98,
  fieldNames: .same(proto: "protobuf_unittest.unpacked_sfixed32_extension"),
  defaultValue: []
)

let ProtobufUnittest_Extensions_unpacked_sfixed64_extension = SwiftProtobuf.MessageExtension<RepeatedExtensionField<SwiftProtobuf.ProtobufSFixed64>, ProtobufUnittest_TestUnpackedExtensions>(
  fieldNumber: 99,
  fieldNames: .same(proto: "protobuf_unittest.unpacked_sfixed64_extension"),
  defaultValue: []
)

let ProtobufUnittest_Extensions_unpacked_float_extension = SwiftProtobuf.MessageExtension<RepeatedExtensionField<SwiftProtobuf.ProtobufFloat>, ProtobufUnittest_TestUnpackedExtensions>(
  fieldNumber: 100,
  fieldNames: .same(proto: "protobuf_unittest.unpacked_float_extension"),
  defaultValue: []
)

let ProtobufUnittest_Extensions_unpacked_double_extension = SwiftProtobuf.MessageExtension<RepeatedExtensionField<SwiftProtobuf.ProtobufDouble>, ProtobufUnittest_TestUnpackedExtensions>(
  fieldNumber: 101,
  fieldNames: .same(proto: "protobuf_unittest.unpacked_double_extension"),
  defaultValue: []
)

let ProtobufUnittest_Extensions_unpacked_bool_extension = SwiftProtobuf.MessageExtension<RepeatedExtensionField<SwiftProtobuf.ProtobufBool>, ProtobufUnittest_TestUnpackedExtensions>(
  fieldNumber: 102,
  fieldNames: .same(proto: "protobuf_unittest.unpacked_bool_extension"),
  defaultValue: []
)

let ProtobufUnittest_Extensions_unpacked_enum_extension = SwiftProtobuf.MessageExtension<RepeatedEnumExtensionField<ProtobufUnittest_ForeignEnum>, ProtobufUnittest_TestUnpackedExtensions>(
  fieldNumber: 103,
  fieldNames: .same(proto: "protobuf_unittest.unpacked_enum_extension"),
  defaultValue: []
)

let ProtobufUnittest_Extensions_test_all_types = SwiftProtobuf.MessageExtension<OptionalMessageExtensionField<ProtobufUnittest_TestAllTypes>, ProtobufUnittest_TestHugeFieldNumbers>(
  fieldNumber: 536860000,
  fieldNames: .same(proto: "protobuf_unittest.test_all_types"),
  defaultValue: ProtobufUnittest_TestAllTypes()
)

extension ProtobufUnittest_TestAllExtensions {
  ///   Check for bug where string extensions declared in tested scope did not
  ///   compile.
  var ProtobufUnittest_TestNestedExtension_test: String {
    get {return getExtensionValue(ext: ProtobufUnittest_TestNestedExtension.Extensions.test) ?? "test"}
    set {setExtensionValue(ext: ProtobufUnittest_TestNestedExtension.Extensions.test, value: newValue)}
  }
  var hasProtobufUnittest_TestNestedExtension_test: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestNestedExtension.Extensions.test)
  }
  mutating func clearProtobufUnittest_TestNestedExtension_test() {
    clearExtensionValue(ext: ProtobufUnittest_TestNestedExtension.Extensions.test)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  ///   Used to test if generated extension name is correct when there are
  ///   underscores.
  var ProtobufUnittest_TestNestedExtension_nestedStringExtension: String {
    get {return getExtensionValue(ext: ProtobufUnittest_TestNestedExtension.Extensions.nested_string_extension) ?? ""}
    set {setExtensionValue(ext: ProtobufUnittest_TestNestedExtension.Extensions.nested_string_extension, value: newValue)}
  }
  var hasProtobufUnittest_TestNestedExtension_nestedStringExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestNestedExtension.Extensions.nested_string_extension)
  }
  mutating func clearProtobufUnittest_TestNestedExtension_nestedStringExtension() {
    clearExtensionValue(ext: ProtobufUnittest_TestNestedExtension.Extensions.nested_string_extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_TestRequired_single: ProtobufUnittest_TestRequired {
    get {return getExtensionValue(ext: ProtobufUnittest_TestRequired.Extensions.single) ?? ProtobufUnittest_TestRequired()}
    set {setExtensionValue(ext: ProtobufUnittest_TestRequired.Extensions.single, value: newValue)}
  }
  var hasProtobufUnittest_TestRequired_single: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestRequired.Extensions.single)
  }
  mutating func clearProtobufUnittest_TestRequired_single() {
    clearExtensionValue(ext: ProtobufUnittest_TestRequired.Extensions.single)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_TestRequired_multi: [ProtobufUnittest_TestRequired] {
    get {return getExtensionValue(ext: ProtobufUnittest_TestRequired.Extensions.multi)}
    set {setExtensionValue(ext: ProtobufUnittest_TestRequired.Extensions.multi, value: newValue)}
  }
  var hasProtobufUnittest_TestRequired_multi: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestRequired.Extensions.multi)
  }
  mutating func clearProtobufUnittest_TestRequired_multi() {
    clearExtensionValue(ext: ProtobufUnittest_TestRequired.Extensions.multi)
  }
}

extension ProtobufUnittest_TestParsingMerge {
  var ProtobufUnittest_TestParsingMerge_optionalExt: ProtobufUnittest_TestAllTypes {
    get {return getExtensionValue(ext: ProtobufUnittest_TestParsingMerge.Extensions.optional_ext) ?? ProtobufUnittest_TestAllTypes()}
    set {setExtensionValue(ext: ProtobufUnittest_TestParsingMerge.Extensions.optional_ext, value: newValue)}
  }
  var hasProtobufUnittest_TestParsingMerge_optionalExt: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestParsingMerge.Extensions.optional_ext)
  }
  mutating func clearProtobufUnittest_TestParsingMerge_optionalExt() {
    clearExtensionValue(ext: ProtobufUnittest_TestParsingMerge.Extensions.optional_ext)
  }
}

extension ProtobufUnittest_TestParsingMerge {
  var ProtobufUnittest_TestParsingMerge_repeatedExt: [ProtobufUnittest_TestAllTypes] {
    get {return getExtensionValue(ext: ProtobufUnittest_TestParsingMerge.Extensions.repeated_ext)}
    set {setExtensionValue(ext: ProtobufUnittest_TestParsingMerge.Extensions.repeated_ext, value: newValue)}
  }
  var hasProtobufUnittest_TestParsingMerge_repeatedExt: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestParsingMerge.Extensions.repeated_ext)
  }
  mutating func clearProtobufUnittest_TestParsingMerge_repeatedExt() {
    clearExtensionValue(ext: ProtobufUnittest_TestParsingMerge.Extensions.repeated_ext)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  ///   Singular
  var ProtobufUnittest_optionalInt32Extension: Int32 {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optional_int32_extension) ?? 0}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optional_int32_extension, value: newValue)}
  }
  var hasProtobufUnittest_optionalInt32Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optional_int32_extension)
  }
  mutating func clearProtobufUnittest_optionalInt32Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optional_int32_extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_optionalInt64Extension: Int64 {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optional_int64_extension) ?? 0}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optional_int64_extension, value: newValue)}
  }
  var hasProtobufUnittest_optionalInt64Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optional_int64_extension)
  }
  mutating func clearProtobufUnittest_optionalInt64Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optional_int64_extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_optionalUint32Extension: UInt32 {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optional_uint32_extension) ?? 0}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optional_uint32_extension, value: newValue)}
  }
  var hasProtobufUnittest_optionalUint32Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optional_uint32_extension)
  }
  mutating func clearProtobufUnittest_optionalUint32Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optional_uint32_extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_optionalUint64Extension: UInt64 {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optional_uint64_extension) ?? 0}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optional_uint64_extension, value: newValue)}
  }
  var hasProtobufUnittest_optionalUint64Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optional_uint64_extension)
  }
  mutating func clearProtobufUnittest_optionalUint64Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optional_uint64_extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_optionalSint32Extension: Int32 {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optional_sint32_extension) ?? 0}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optional_sint32_extension, value: newValue)}
  }
  var hasProtobufUnittest_optionalSint32Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optional_sint32_extension)
  }
  mutating func clearProtobufUnittest_optionalSint32Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optional_sint32_extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_optionalSint64Extension: Int64 {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optional_sint64_extension) ?? 0}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optional_sint64_extension, value: newValue)}
  }
  var hasProtobufUnittest_optionalSint64Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optional_sint64_extension)
  }
  mutating func clearProtobufUnittest_optionalSint64Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optional_sint64_extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_optionalFixed32Extension: UInt32 {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optional_fixed32_extension) ?? 0}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optional_fixed32_extension, value: newValue)}
  }
  var hasProtobufUnittest_optionalFixed32Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optional_fixed32_extension)
  }
  mutating func clearProtobufUnittest_optionalFixed32Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optional_fixed32_extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_optionalFixed64Extension: UInt64 {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optional_fixed64_extension) ?? 0}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optional_fixed64_extension, value: newValue)}
  }
  var hasProtobufUnittest_optionalFixed64Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optional_fixed64_extension)
  }
  mutating func clearProtobufUnittest_optionalFixed64Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optional_fixed64_extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_optionalSfixed32Extension: Int32 {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optional_sfixed32_extension) ?? 0}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optional_sfixed32_extension, value: newValue)}
  }
  var hasProtobufUnittest_optionalSfixed32Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optional_sfixed32_extension)
  }
  mutating func clearProtobufUnittest_optionalSfixed32Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optional_sfixed32_extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_optionalSfixed64Extension: Int64 {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optional_sfixed64_extension) ?? 0}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optional_sfixed64_extension, value: newValue)}
  }
  var hasProtobufUnittest_optionalSfixed64Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optional_sfixed64_extension)
  }
  mutating func clearProtobufUnittest_optionalSfixed64Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optional_sfixed64_extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_optionalFloatExtension: Float {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optional_float_extension) ?? 0}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optional_float_extension, value: newValue)}
  }
  var hasProtobufUnittest_optionalFloatExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optional_float_extension)
  }
  mutating func clearProtobufUnittest_optionalFloatExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optional_float_extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_optionalDoubleExtension: Double {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optional_double_extension) ?? 0}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optional_double_extension, value: newValue)}
  }
  var hasProtobufUnittest_optionalDoubleExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optional_double_extension)
  }
  mutating func clearProtobufUnittest_optionalDoubleExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optional_double_extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_optionalBoolExtension: Bool {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optional_bool_extension) ?? false}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optional_bool_extension, value: newValue)}
  }
  var hasProtobufUnittest_optionalBoolExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optional_bool_extension)
  }
  mutating func clearProtobufUnittest_optionalBoolExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optional_bool_extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_optionalStringExtension: String {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optional_string_extension) ?? ""}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optional_string_extension, value: newValue)}
  }
  var hasProtobufUnittest_optionalStringExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optional_string_extension)
  }
  mutating func clearProtobufUnittest_optionalStringExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optional_string_extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_optionalBytesExtension: Data {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optional_bytes_extension) ?? Data()}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optional_bytes_extension, value: newValue)}
  }
  var hasProtobufUnittest_optionalBytesExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optional_bytes_extension)
  }
  mutating func clearProtobufUnittest_optionalBytesExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optional_bytes_extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_optionalGroupExtension: ProtobufUnittest_OptionalGroup_extension {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_OptionalGroup_extension) ?? ProtobufUnittest_OptionalGroup_extension()}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_OptionalGroup_extension, value: newValue)}
  }
  var hasProtobufUnittest_optionalGroupExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_OptionalGroup_extension)
  }
  mutating func clearProtobufUnittest_optionalGroupExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_OptionalGroup_extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_optionalNestedMessageExtension: ProtobufUnittest_TestAllTypes.NestedMessage {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optional_nested_message_extension) ?? ProtobufUnittest_TestAllTypes.NestedMessage()}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optional_nested_message_extension, value: newValue)}
  }
  var hasProtobufUnittest_optionalNestedMessageExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optional_nested_message_extension)
  }
  mutating func clearProtobufUnittest_optionalNestedMessageExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optional_nested_message_extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_optionalForeignMessageExtension: ProtobufUnittest_ForeignMessage {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optional_foreign_message_extension) ?? ProtobufUnittest_ForeignMessage()}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optional_foreign_message_extension, value: newValue)}
  }
  var hasProtobufUnittest_optionalForeignMessageExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optional_foreign_message_extension)
  }
  mutating func clearProtobufUnittest_optionalForeignMessageExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optional_foreign_message_extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_optionalImportMessageExtension: ProtobufUnittestImport_ImportMessage {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optional_import_message_extension) ?? ProtobufUnittestImport_ImportMessage()}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optional_import_message_extension, value: newValue)}
  }
  var hasProtobufUnittest_optionalImportMessageExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optional_import_message_extension)
  }
  mutating func clearProtobufUnittest_optionalImportMessageExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optional_import_message_extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_optionalNestedEnumExtension: ProtobufUnittest_TestAllTypes.NestedEnum {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optional_nested_enum_extension) ?? ProtobufUnittest_TestAllTypes.NestedEnum.foo}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optional_nested_enum_extension, value: newValue)}
  }
  var hasProtobufUnittest_optionalNestedEnumExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optional_nested_enum_extension)
  }
  mutating func clearProtobufUnittest_optionalNestedEnumExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optional_nested_enum_extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_optionalForeignEnumExtension: ProtobufUnittest_ForeignEnum {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optional_foreign_enum_extension) ?? ProtobufUnittest_ForeignEnum.foreignFoo}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optional_foreign_enum_extension, value: newValue)}
  }
  var hasProtobufUnittest_optionalForeignEnumExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optional_foreign_enum_extension)
  }
  mutating func clearProtobufUnittest_optionalForeignEnumExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optional_foreign_enum_extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_optionalImportEnumExtension: ProtobufUnittestImport_ImportEnum {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optional_import_enum_extension) ?? ProtobufUnittestImport_ImportEnum.importFoo}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optional_import_enum_extension, value: newValue)}
  }
  var hasProtobufUnittest_optionalImportEnumExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optional_import_enum_extension)
  }
  mutating func clearProtobufUnittest_optionalImportEnumExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optional_import_enum_extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_optionalStringPieceExtension: String {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optional_string_piece_extension) ?? ""}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optional_string_piece_extension, value: newValue)}
  }
  var hasProtobufUnittest_optionalStringPieceExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optional_string_piece_extension)
  }
  mutating func clearProtobufUnittest_optionalStringPieceExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optional_string_piece_extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_optionalCordExtension: String {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optional_cord_extension) ?? ""}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optional_cord_extension, value: newValue)}
  }
  var hasProtobufUnittest_optionalCordExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optional_cord_extension)
  }
  mutating func clearProtobufUnittest_optionalCordExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optional_cord_extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_optionalPublicImportMessageExtension: ProtobufUnittestImport_PublicImportMessage {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optional_public_import_message_extension) ?? ProtobufUnittestImport_PublicImportMessage()}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optional_public_import_message_extension, value: newValue)}
  }
  var hasProtobufUnittest_optionalPublicImportMessageExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optional_public_import_message_extension)
  }
  mutating func clearProtobufUnittest_optionalPublicImportMessageExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optional_public_import_message_extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_optionalLazyMessageExtension: ProtobufUnittest_TestAllTypes.NestedMessage {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optional_lazy_message_extension) ?? ProtobufUnittest_TestAllTypes.NestedMessage()}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optional_lazy_message_extension, value: newValue)}
  }
  var hasProtobufUnittest_optionalLazyMessageExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optional_lazy_message_extension)
  }
  mutating func clearProtobufUnittest_optionalLazyMessageExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optional_lazy_message_extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  ///   Repeated
  var ProtobufUnittest_repeatedInt32Extension: [Int32] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeated_int32_extension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeated_int32_extension, value: newValue)}
  }
  var hasProtobufUnittest_repeatedInt32Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_repeated_int32_extension)
  }
  mutating func clearProtobufUnittest_repeatedInt32Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_repeated_int32_extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_repeatedInt64Extension: [Int64] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeated_int64_extension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeated_int64_extension, value: newValue)}
  }
  var hasProtobufUnittest_repeatedInt64Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_repeated_int64_extension)
  }
  mutating func clearProtobufUnittest_repeatedInt64Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_repeated_int64_extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_repeatedUint32Extension: [UInt32] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeated_uint32_extension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeated_uint32_extension, value: newValue)}
  }
  var hasProtobufUnittest_repeatedUint32Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_repeated_uint32_extension)
  }
  mutating func clearProtobufUnittest_repeatedUint32Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_repeated_uint32_extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_repeatedUint64Extension: [UInt64] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeated_uint64_extension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeated_uint64_extension, value: newValue)}
  }
  var hasProtobufUnittest_repeatedUint64Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_repeated_uint64_extension)
  }
  mutating func clearProtobufUnittest_repeatedUint64Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_repeated_uint64_extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_repeatedSint32Extension: [Int32] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeated_sint32_extension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeated_sint32_extension, value: newValue)}
  }
  var hasProtobufUnittest_repeatedSint32Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_repeated_sint32_extension)
  }
  mutating func clearProtobufUnittest_repeatedSint32Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_repeated_sint32_extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_repeatedSint64Extension: [Int64] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeated_sint64_extension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeated_sint64_extension, value: newValue)}
  }
  var hasProtobufUnittest_repeatedSint64Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_repeated_sint64_extension)
  }
  mutating func clearProtobufUnittest_repeatedSint64Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_repeated_sint64_extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_repeatedFixed32Extension: [UInt32] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeated_fixed32_extension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeated_fixed32_extension, value: newValue)}
  }
  var hasProtobufUnittest_repeatedFixed32Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_repeated_fixed32_extension)
  }
  mutating func clearProtobufUnittest_repeatedFixed32Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_repeated_fixed32_extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_repeatedFixed64Extension: [UInt64] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeated_fixed64_extension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeated_fixed64_extension, value: newValue)}
  }
  var hasProtobufUnittest_repeatedFixed64Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_repeated_fixed64_extension)
  }
  mutating func clearProtobufUnittest_repeatedFixed64Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_repeated_fixed64_extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_repeatedSfixed32Extension: [Int32] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeated_sfixed32_extension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeated_sfixed32_extension, value: newValue)}
  }
  var hasProtobufUnittest_repeatedSfixed32Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_repeated_sfixed32_extension)
  }
  mutating func clearProtobufUnittest_repeatedSfixed32Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_repeated_sfixed32_extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_repeatedSfixed64Extension: [Int64] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeated_sfixed64_extension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeated_sfixed64_extension, value: newValue)}
  }
  var hasProtobufUnittest_repeatedSfixed64Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_repeated_sfixed64_extension)
  }
  mutating func clearProtobufUnittest_repeatedSfixed64Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_repeated_sfixed64_extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_repeatedFloatExtension: [Float] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeated_float_extension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeated_float_extension, value: newValue)}
  }
  var hasProtobufUnittest_repeatedFloatExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_repeated_float_extension)
  }
  mutating func clearProtobufUnittest_repeatedFloatExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_repeated_float_extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_repeatedDoubleExtension: [Double] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeated_double_extension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeated_double_extension, value: newValue)}
  }
  var hasProtobufUnittest_repeatedDoubleExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_repeated_double_extension)
  }
  mutating func clearProtobufUnittest_repeatedDoubleExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_repeated_double_extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_repeatedBoolExtension: [Bool] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeated_bool_extension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeated_bool_extension, value: newValue)}
  }
  var hasProtobufUnittest_repeatedBoolExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_repeated_bool_extension)
  }
  mutating func clearProtobufUnittest_repeatedBoolExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_repeated_bool_extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_repeatedStringExtension: [String] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeated_string_extension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeated_string_extension, value: newValue)}
  }
  var hasProtobufUnittest_repeatedStringExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_repeated_string_extension)
  }
  mutating func clearProtobufUnittest_repeatedStringExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_repeated_string_extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_repeatedBytesExtension: [Data] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeated_bytes_extension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeated_bytes_extension, value: newValue)}
  }
  var hasProtobufUnittest_repeatedBytesExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_repeated_bytes_extension)
  }
  mutating func clearProtobufUnittest_repeatedBytesExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_repeated_bytes_extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_repeatedGroupExtension: [ProtobufUnittest_RepeatedGroup_extension] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_RepeatedGroup_extension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_RepeatedGroup_extension, value: newValue)}
  }
  var hasProtobufUnittest_repeatedGroupExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_RepeatedGroup_extension)
  }
  mutating func clearProtobufUnittest_repeatedGroupExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_RepeatedGroup_extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_repeatedNestedMessageExtension: [ProtobufUnittest_TestAllTypes.NestedMessage] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeated_nested_message_extension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeated_nested_message_extension, value: newValue)}
  }
  var hasProtobufUnittest_repeatedNestedMessageExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_repeated_nested_message_extension)
  }
  mutating func clearProtobufUnittest_repeatedNestedMessageExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_repeated_nested_message_extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_repeatedForeignMessageExtension: [ProtobufUnittest_ForeignMessage] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeated_foreign_message_extension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeated_foreign_message_extension, value: newValue)}
  }
  var hasProtobufUnittest_repeatedForeignMessageExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_repeated_foreign_message_extension)
  }
  mutating func clearProtobufUnittest_repeatedForeignMessageExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_repeated_foreign_message_extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_repeatedImportMessageExtension: [ProtobufUnittestImport_ImportMessage] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeated_import_message_extension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeated_import_message_extension, value: newValue)}
  }
  var hasProtobufUnittest_repeatedImportMessageExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_repeated_import_message_extension)
  }
  mutating func clearProtobufUnittest_repeatedImportMessageExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_repeated_import_message_extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_repeatedNestedEnumExtension: [ProtobufUnittest_TestAllTypes.NestedEnum] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeated_nested_enum_extension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeated_nested_enum_extension, value: newValue)}
  }
  var hasProtobufUnittest_repeatedNestedEnumExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_repeated_nested_enum_extension)
  }
  mutating func clearProtobufUnittest_repeatedNestedEnumExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_repeated_nested_enum_extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_repeatedForeignEnumExtension: [ProtobufUnittest_ForeignEnum] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeated_foreign_enum_extension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeated_foreign_enum_extension, value: newValue)}
  }
  var hasProtobufUnittest_repeatedForeignEnumExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_repeated_foreign_enum_extension)
  }
  mutating func clearProtobufUnittest_repeatedForeignEnumExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_repeated_foreign_enum_extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_repeatedImportEnumExtension: [ProtobufUnittestImport_ImportEnum] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeated_import_enum_extension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeated_import_enum_extension, value: newValue)}
  }
  var hasProtobufUnittest_repeatedImportEnumExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_repeated_import_enum_extension)
  }
  mutating func clearProtobufUnittest_repeatedImportEnumExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_repeated_import_enum_extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_repeatedStringPieceExtension: [String] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeated_string_piece_extension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeated_string_piece_extension, value: newValue)}
  }
  var hasProtobufUnittest_repeatedStringPieceExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_repeated_string_piece_extension)
  }
  mutating func clearProtobufUnittest_repeatedStringPieceExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_repeated_string_piece_extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_repeatedCordExtension: [String] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeated_cord_extension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeated_cord_extension, value: newValue)}
  }
  var hasProtobufUnittest_repeatedCordExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_repeated_cord_extension)
  }
  mutating func clearProtobufUnittest_repeatedCordExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_repeated_cord_extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_repeatedLazyMessageExtension: [ProtobufUnittest_TestAllTypes.NestedMessage] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeated_lazy_message_extension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeated_lazy_message_extension, value: newValue)}
  }
  var hasProtobufUnittest_repeatedLazyMessageExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_repeated_lazy_message_extension)
  }
  mutating func clearProtobufUnittest_repeatedLazyMessageExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_repeated_lazy_message_extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  ///   Singular with defaults
  var ProtobufUnittest_defaultInt32Extension: Int32 {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_default_int32_extension) ?? 41}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_default_int32_extension, value: newValue)}
  }
  var hasProtobufUnittest_defaultInt32Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_default_int32_extension)
  }
  mutating func clearProtobufUnittest_defaultInt32Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_default_int32_extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_defaultInt64Extension: Int64 {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_default_int64_extension) ?? 42}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_default_int64_extension, value: newValue)}
  }
  var hasProtobufUnittest_defaultInt64Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_default_int64_extension)
  }
  mutating func clearProtobufUnittest_defaultInt64Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_default_int64_extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_defaultUint32Extension: UInt32 {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_default_uint32_extension) ?? 43}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_default_uint32_extension, value: newValue)}
  }
  var hasProtobufUnittest_defaultUint32Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_default_uint32_extension)
  }
  mutating func clearProtobufUnittest_defaultUint32Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_default_uint32_extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_defaultUint64Extension: UInt64 {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_default_uint64_extension) ?? 44}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_default_uint64_extension, value: newValue)}
  }
  var hasProtobufUnittest_defaultUint64Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_default_uint64_extension)
  }
  mutating func clearProtobufUnittest_defaultUint64Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_default_uint64_extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_defaultSint32Extension: Int32 {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_default_sint32_extension) ?? -45}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_default_sint32_extension, value: newValue)}
  }
  var hasProtobufUnittest_defaultSint32Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_default_sint32_extension)
  }
  mutating func clearProtobufUnittest_defaultSint32Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_default_sint32_extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_defaultSint64Extension: Int64 {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_default_sint64_extension) ?? 46}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_default_sint64_extension, value: newValue)}
  }
  var hasProtobufUnittest_defaultSint64Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_default_sint64_extension)
  }
  mutating func clearProtobufUnittest_defaultSint64Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_default_sint64_extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_defaultFixed32Extension: UInt32 {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_default_fixed32_extension) ?? 47}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_default_fixed32_extension, value: newValue)}
  }
  var hasProtobufUnittest_defaultFixed32Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_default_fixed32_extension)
  }
  mutating func clearProtobufUnittest_defaultFixed32Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_default_fixed32_extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_defaultFixed64Extension: UInt64 {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_default_fixed64_extension) ?? 48}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_default_fixed64_extension, value: newValue)}
  }
  var hasProtobufUnittest_defaultFixed64Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_default_fixed64_extension)
  }
  mutating func clearProtobufUnittest_defaultFixed64Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_default_fixed64_extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_defaultSfixed32Extension: Int32 {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_default_sfixed32_extension) ?? 49}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_default_sfixed32_extension, value: newValue)}
  }
  var hasProtobufUnittest_defaultSfixed32Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_default_sfixed32_extension)
  }
  mutating func clearProtobufUnittest_defaultSfixed32Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_default_sfixed32_extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_defaultSfixed64Extension: Int64 {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_default_sfixed64_extension) ?? -50}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_default_sfixed64_extension, value: newValue)}
  }
  var hasProtobufUnittest_defaultSfixed64Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_default_sfixed64_extension)
  }
  mutating func clearProtobufUnittest_defaultSfixed64Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_default_sfixed64_extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_defaultFloatExtension: Float {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_default_float_extension) ?? 51.5}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_default_float_extension, value: newValue)}
  }
  var hasProtobufUnittest_defaultFloatExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_default_float_extension)
  }
  mutating func clearProtobufUnittest_defaultFloatExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_default_float_extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_defaultDoubleExtension: Double {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_default_double_extension) ?? 52000}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_default_double_extension, value: newValue)}
  }
  var hasProtobufUnittest_defaultDoubleExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_default_double_extension)
  }
  mutating func clearProtobufUnittest_defaultDoubleExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_default_double_extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_defaultBoolExtension: Bool {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_default_bool_extension) ?? true}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_default_bool_extension, value: newValue)}
  }
  var hasProtobufUnittest_defaultBoolExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_default_bool_extension)
  }
  mutating func clearProtobufUnittest_defaultBoolExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_default_bool_extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_defaultStringExtension: String {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_default_string_extension) ?? "hello"}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_default_string_extension, value: newValue)}
  }
  var hasProtobufUnittest_defaultStringExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_default_string_extension)
  }
  mutating func clearProtobufUnittest_defaultStringExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_default_string_extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_defaultBytesExtension: Data {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_default_bytes_extension) ?? Data(bytes: [119, 111, 114, 108, 100])}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_default_bytes_extension, value: newValue)}
  }
  var hasProtobufUnittest_defaultBytesExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_default_bytes_extension)
  }
  mutating func clearProtobufUnittest_defaultBytesExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_default_bytes_extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_defaultNestedEnumExtension: ProtobufUnittest_TestAllTypes.NestedEnum {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_default_nested_enum_extension) ?? ProtobufUnittest_TestAllTypes.NestedEnum.bar}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_default_nested_enum_extension, value: newValue)}
  }
  var hasProtobufUnittest_defaultNestedEnumExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_default_nested_enum_extension)
  }
  mutating func clearProtobufUnittest_defaultNestedEnumExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_default_nested_enum_extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_defaultForeignEnumExtension: ProtobufUnittest_ForeignEnum {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_default_foreign_enum_extension) ?? ProtobufUnittest_ForeignEnum.foreignBar}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_default_foreign_enum_extension, value: newValue)}
  }
  var hasProtobufUnittest_defaultForeignEnumExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_default_foreign_enum_extension)
  }
  mutating func clearProtobufUnittest_defaultForeignEnumExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_default_foreign_enum_extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_defaultImportEnumExtension: ProtobufUnittestImport_ImportEnum {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_default_import_enum_extension) ?? ProtobufUnittestImport_ImportEnum.importBar}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_default_import_enum_extension, value: newValue)}
  }
  var hasProtobufUnittest_defaultImportEnumExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_default_import_enum_extension)
  }
  mutating func clearProtobufUnittest_defaultImportEnumExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_default_import_enum_extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_defaultStringPieceExtension: String {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_default_string_piece_extension) ?? "abc"}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_default_string_piece_extension, value: newValue)}
  }
  var hasProtobufUnittest_defaultStringPieceExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_default_string_piece_extension)
  }
  mutating func clearProtobufUnittest_defaultStringPieceExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_default_string_piece_extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_defaultCordExtension: String {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_default_cord_extension) ?? "123"}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_default_cord_extension, value: newValue)}
  }
  var hasProtobufUnittest_defaultCordExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_default_cord_extension)
  }
  mutating func clearProtobufUnittest_defaultCordExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_default_cord_extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  ///   For oneof test
  var ProtobufUnittest_oneofUint32Extension: UInt32 {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_oneof_uint32_extension) ?? 0}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_oneof_uint32_extension, value: newValue)}
  }
  var hasProtobufUnittest_oneofUint32Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_oneof_uint32_extension)
  }
  mutating func clearProtobufUnittest_oneofUint32Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_oneof_uint32_extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_oneofNestedMessageExtension: ProtobufUnittest_TestAllTypes.NestedMessage {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_oneof_nested_message_extension) ?? ProtobufUnittest_TestAllTypes.NestedMessage()}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_oneof_nested_message_extension, value: newValue)}
  }
  var hasProtobufUnittest_oneofNestedMessageExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_oneof_nested_message_extension)
  }
  mutating func clearProtobufUnittest_oneofNestedMessageExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_oneof_nested_message_extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_oneofStringExtension: String {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_oneof_string_extension) ?? ""}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_oneof_string_extension, value: newValue)}
  }
  var hasProtobufUnittest_oneofStringExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_oneof_string_extension)
  }
  mutating func clearProtobufUnittest_oneofStringExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_oneof_string_extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_oneofBytesExtension: Data {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_oneof_bytes_extension) ?? Data()}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_oneof_bytes_extension, value: newValue)}
  }
  var hasProtobufUnittest_oneofBytesExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_oneof_bytes_extension)
  }
  mutating func clearProtobufUnittest_oneofBytesExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_oneof_bytes_extension)
  }
}

extension ProtobufUnittest_TestFieldOrderings {
  var ProtobufUnittest_myExtensionString: String {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_my_extension_string) ?? ""}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_my_extension_string, value: newValue)}
  }
  var hasProtobufUnittest_myExtensionString: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_my_extension_string)
  }
  mutating func clearProtobufUnittest_myExtensionString() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_my_extension_string)
  }
}

extension ProtobufUnittest_TestFieldOrderings {
  var ProtobufUnittest_myExtensionInt: Int32 {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_my_extension_int) ?? 0}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_my_extension_int, value: newValue)}
  }
  var hasProtobufUnittest_myExtensionInt: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_my_extension_int)
  }
  mutating func clearProtobufUnittest_myExtensionInt() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_my_extension_int)
  }
}

extension ProtobufUnittest_TestPackedExtensions {
  var ProtobufUnittest_packedInt32Extension: [Int32] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_packed_int32_extension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_packed_int32_extension, value: newValue)}
  }
  var hasProtobufUnittest_packedInt32Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_packed_int32_extension)
  }
  mutating func clearProtobufUnittest_packedInt32Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_packed_int32_extension)
  }
}

extension ProtobufUnittest_TestPackedExtensions {
  var ProtobufUnittest_packedInt64Extension: [Int64] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_packed_int64_extension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_packed_int64_extension, value: newValue)}
  }
  var hasProtobufUnittest_packedInt64Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_packed_int64_extension)
  }
  mutating func clearProtobufUnittest_packedInt64Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_packed_int64_extension)
  }
}

extension ProtobufUnittest_TestPackedExtensions {
  var ProtobufUnittest_packedUint32Extension: [UInt32] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_packed_uint32_extension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_packed_uint32_extension, value: newValue)}
  }
  var hasProtobufUnittest_packedUint32Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_packed_uint32_extension)
  }
  mutating func clearProtobufUnittest_packedUint32Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_packed_uint32_extension)
  }
}

extension ProtobufUnittest_TestPackedExtensions {
  var ProtobufUnittest_packedUint64Extension: [UInt64] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_packed_uint64_extension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_packed_uint64_extension, value: newValue)}
  }
  var hasProtobufUnittest_packedUint64Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_packed_uint64_extension)
  }
  mutating func clearProtobufUnittest_packedUint64Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_packed_uint64_extension)
  }
}

extension ProtobufUnittest_TestPackedExtensions {
  var ProtobufUnittest_packedSint32Extension: [Int32] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_packed_sint32_extension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_packed_sint32_extension, value: newValue)}
  }
  var hasProtobufUnittest_packedSint32Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_packed_sint32_extension)
  }
  mutating func clearProtobufUnittest_packedSint32Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_packed_sint32_extension)
  }
}

extension ProtobufUnittest_TestPackedExtensions {
  var ProtobufUnittest_packedSint64Extension: [Int64] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_packed_sint64_extension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_packed_sint64_extension, value: newValue)}
  }
  var hasProtobufUnittest_packedSint64Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_packed_sint64_extension)
  }
  mutating func clearProtobufUnittest_packedSint64Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_packed_sint64_extension)
  }
}

extension ProtobufUnittest_TestPackedExtensions {
  var ProtobufUnittest_packedFixed32Extension: [UInt32] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_packed_fixed32_extension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_packed_fixed32_extension, value: newValue)}
  }
  var hasProtobufUnittest_packedFixed32Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_packed_fixed32_extension)
  }
  mutating func clearProtobufUnittest_packedFixed32Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_packed_fixed32_extension)
  }
}

extension ProtobufUnittest_TestPackedExtensions {
  var ProtobufUnittest_packedFixed64Extension: [UInt64] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_packed_fixed64_extension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_packed_fixed64_extension, value: newValue)}
  }
  var hasProtobufUnittest_packedFixed64Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_packed_fixed64_extension)
  }
  mutating func clearProtobufUnittest_packedFixed64Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_packed_fixed64_extension)
  }
}

extension ProtobufUnittest_TestPackedExtensions {
  var ProtobufUnittest_packedSfixed32Extension: [Int32] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_packed_sfixed32_extension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_packed_sfixed32_extension, value: newValue)}
  }
  var hasProtobufUnittest_packedSfixed32Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_packed_sfixed32_extension)
  }
  mutating func clearProtobufUnittest_packedSfixed32Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_packed_sfixed32_extension)
  }
}

extension ProtobufUnittest_TestPackedExtensions {
  var ProtobufUnittest_packedSfixed64Extension: [Int64] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_packed_sfixed64_extension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_packed_sfixed64_extension, value: newValue)}
  }
  var hasProtobufUnittest_packedSfixed64Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_packed_sfixed64_extension)
  }
  mutating func clearProtobufUnittest_packedSfixed64Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_packed_sfixed64_extension)
  }
}

extension ProtobufUnittest_TestPackedExtensions {
  var ProtobufUnittest_packedFloatExtension: [Float] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_packed_float_extension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_packed_float_extension, value: newValue)}
  }
  var hasProtobufUnittest_packedFloatExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_packed_float_extension)
  }
  mutating func clearProtobufUnittest_packedFloatExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_packed_float_extension)
  }
}

extension ProtobufUnittest_TestPackedExtensions {
  var ProtobufUnittest_packedDoubleExtension: [Double] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_packed_double_extension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_packed_double_extension, value: newValue)}
  }
  var hasProtobufUnittest_packedDoubleExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_packed_double_extension)
  }
  mutating func clearProtobufUnittest_packedDoubleExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_packed_double_extension)
  }
}

extension ProtobufUnittest_TestPackedExtensions {
  var ProtobufUnittest_packedBoolExtension: [Bool] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_packed_bool_extension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_packed_bool_extension, value: newValue)}
  }
  var hasProtobufUnittest_packedBoolExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_packed_bool_extension)
  }
  mutating func clearProtobufUnittest_packedBoolExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_packed_bool_extension)
  }
}

extension ProtobufUnittest_TestPackedExtensions {
  var ProtobufUnittest_packedEnumExtension: [ProtobufUnittest_ForeignEnum] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_packed_enum_extension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_packed_enum_extension, value: newValue)}
  }
  var hasProtobufUnittest_packedEnumExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_packed_enum_extension)
  }
  mutating func clearProtobufUnittest_packedEnumExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_packed_enum_extension)
  }
}

extension ProtobufUnittest_TestUnpackedExtensions {
  var ProtobufUnittest_unpackedInt32Extension: [Int32] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_unpacked_int32_extension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_unpacked_int32_extension, value: newValue)}
  }
  var hasProtobufUnittest_unpackedInt32Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_unpacked_int32_extension)
  }
  mutating func clearProtobufUnittest_unpackedInt32Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_unpacked_int32_extension)
  }
}

extension ProtobufUnittest_TestUnpackedExtensions {
  var ProtobufUnittest_unpackedInt64Extension: [Int64] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_unpacked_int64_extension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_unpacked_int64_extension, value: newValue)}
  }
  var hasProtobufUnittest_unpackedInt64Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_unpacked_int64_extension)
  }
  mutating func clearProtobufUnittest_unpackedInt64Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_unpacked_int64_extension)
  }
}

extension ProtobufUnittest_TestUnpackedExtensions {
  var ProtobufUnittest_unpackedUint32Extension: [UInt32] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_unpacked_uint32_extension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_unpacked_uint32_extension, value: newValue)}
  }
  var hasProtobufUnittest_unpackedUint32Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_unpacked_uint32_extension)
  }
  mutating func clearProtobufUnittest_unpackedUint32Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_unpacked_uint32_extension)
  }
}

extension ProtobufUnittest_TestUnpackedExtensions {
  var ProtobufUnittest_unpackedUint64Extension: [UInt64] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_unpacked_uint64_extension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_unpacked_uint64_extension, value: newValue)}
  }
  var hasProtobufUnittest_unpackedUint64Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_unpacked_uint64_extension)
  }
  mutating func clearProtobufUnittest_unpackedUint64Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_unpacked_uint64_extension)
  }
}

extension ProtobufUnittest_TestUnpackedExtensions {
  var ProtobufUnittest_unpackedSint32Extension: [Int32] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_unpacked_sint32_extension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_unpacked_sint32_extension, value: newValue)}
  }
  var hasProtobufUnittest_unpackedSint32Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_unpacked_sint32_extension)
  }
  mutating func clearProtobufUnittest_unpackedSint32Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_unpacked_sint32_extension)
  }
}

extension ProtobufUnittest_TestUnpackedExtensions {
  var ProtobufUnittest_unpackedSint64Extension: [Int64] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_unpacked_sint64_extension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_unpacked_sint64_extension, value: newValue)}
  }
  var hasProtobufUnittest_unpackedSint64Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_unpacked_sint64_extension)
  }
  mutating func clearProtobufUnittest_unpackedSint64Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_unpacked_sint64_extension)
  }
}

extension ProtobufUnittest_TestUnpackedExtensions {
  var ProtobufUnittest_unpackedFixed32Extension: [UInt32] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_unpacked_fixed32_extension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_unpacked_fixed32_extension, value: newValue)}
  }
  var hasProtobufUnittest_unpackedFixed32Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_unpacked_fixed32_extension)
  }
  mutating func clearProtobufUnittest_unpackedFixed32Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_unpacked_fixed32_extension)
  }
}

extension ProtobufUnittest_TestUnpackedExtensions {
  var ProtobufUnittest_unpackedFixed64Extension: [UInt64] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_unpacked_fixed64_extension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_unpacked_fixed64_extension, value: newValue)}
  }
  var hasProtobufUnittest_unpackedFixed64Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_unpacked_fixed64_extension)
  }
  mutating func clearProtobufUnittest_unpackedFixed64Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_unpacked_fixed64_extension)
  }
}

extension ProtobufUnittest_TestUnpackedExtensions {
  var ProtobufUnittest_unpackedSfixed32Extension: [Int32] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_unpacked_sfixed32_extension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_unpacked_sfixed32_extension, value: newValue)}
  }
  var hasProtobufUnittest_unpackedSfixed32Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_unpacked_sfixed32_extension)
  }
  mutating func clearProtobufUnittest_unpackedSfixed32Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_unpacked_sfixed32_extension)
  }
}

extension ProtobufUnittest_TestUnpackedExtensions {
  var ProtobufUnittest_unpackedSfixed64Extension: [Int64] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_unpacked_sfixed64_extension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_unpacked_sfixed64_extension, value: newValue)}
  }
  var hasProtobufUnittest_unpackedSfixed64Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_unpacked_sfixed64_extension)
  }
  mutating func clearProtobufUnittest_unpackedSfixed64Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_unpacked_sfixed64_extension)
  }
}

extension ProtobufUnittest_TestUnpackedExtensions {
  var ProtobufUnittest_unpackedFloatExtension: [Float] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_unpacked_float_extension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_unpacked_float_extension, value: newValue)}
  }
  var hasProtobufUnittest_unpackedFloatExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_unpacked_float_extension)
  }
  mutating func clearProtobufUnittest_unpackedFloatExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_unpacked_float_extension)
  }
}

extension ProtobufUnittest_TestUnpackedExtensions {
  var ProtobufUnittest_unpackedDoubleExtension: [Double] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_unpacked_double_extension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_unpacked_double_extension, value: newValue)}
  }
  var hasProtobufUnittest_unpackedDoubleExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_unpacked_double_extension)
  }
  mutating func clearProtobufUnittest_unpackedDoubleExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_unpacked_double_extension)
  }
}

extension ProtobufUnittest_TestUnpackedExtensions {
  var ProtobufUnittest_unpackedBoolExtension: [Bool] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_unpacked_bool_extension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_unpacked_bool_extension, value: newValue)}
  }
  var hasProtobufUnittest_unpackedBoolExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_unpacked_bool_extension)
  }
  mutating func clearProtobufUnittest_unpackedBoolExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_unpacked_bool_extension)
  }
}

extension ProtobufUnittest_TestUnpackedExtensions {
  var ProtobufUnittest_unpackedEnumExtension: [ProtobufUnittest_ForeignEnum] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_unpacked_enum_extension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_unpacked_enum_extension, value: newValue)}
  }
  var hasProtobufUnittest_unpackedEnumExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_unpacked_enum_extension)
  }
  mutating func clearProtobufUnittest_unpackedEnumExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_unpacked_enum_extension)
  }
}

extension ProtobufUnittest_TestHugeFieldNumbers {
  var ProtobufUnittest_testAllTypes: ProtobufUnittest_TestAllTypes {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_test_all_types) ?? ProtobufUnittest_TestAllTypes()}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_test_all_types, value: newValue)}
  }
  var hasProtobufUnittest_testAllTypes: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_test_all_types)
  }
  mutating func clearProtobufUnittest_testAllTypes() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_test_all_types)
  }
}

let ProtobufUnittest_Unittest_Extensions: SwiftProtobuf.ExtensionSet = [
  ProtobufUnittest_Extensions_optional_int32_extension,
  ProtobufUnittest_Extensions_optional_int64_extension,
  ProtobufUnittest_Extensions_optional_uint32_extension,
  ProtobufUnittest_Extensions_optional_uint64_extension,
  ProtobufUnittest_Extensions_optional_sint32_extension,
  ProtobufUnittest_Extensions_optional_sint64_extension,
  ProtobufUnittest_Extensions_optional_fixed32_extension,
  ProtobufUnittest_Extensions_optional_fixed64_extension,
  ProtobufUnittest_Extensions_optional_sfixed32_extension,
  ProtobufUnittest_Extensions_optional_sfixed64_extension,
  ProtobufUnittest_Extensions_optional_float_extension,
  ProtobufUnittest_Extensions_optional_double_extension,
  ProtobufUnittest_Extensions_optional_bool_extension,
  ProtobufUnittest_Extensions_optional_string_extension,
  ProtobufUnittest_Extensions_optional_bytes_extension,
  ProtobufUnittest_Extensions_OptionalGroup_extension,
  ProtobufUnittest_Extensions_optional_nested_message_extension,
  ProtobufUnittest_Extensions_optional_foreign_message_extension,
  ProtobufUnittest_Extensions_optional_import_message_extension,
  ProtobufUnittest_Extensions_optional_nested_enum_extension,
  ProtobufUnittest_Extensions_optional_foreign_enum_extension,
  ProtobufUnittest_Extensions_optional_import_enum_extension,
  ProtobufUnittest_Extensions_optional_string_piece_extension,
  ProtobufUnittest_Extensions_optional_cord_extension,
  ProtobufUnittest_Extensions_optional_public_import_message_extension,
  ProtobufUnittest_Extensions_optional_lazy_message_extension,
  ProtobufUnittest_Extensions_repeated_int32_extension,
  ProtobufUnittest_Extensions_repeated_int64_extension,
  ProtobufUnittest_Extensions_repeated_uint32_extension,
  ProtobufUnittest_Extensions_repeated_uint64_extension,
  ProtobufUnittest_Extensions_repeated_sint32_extension,
  ProtobufUnittest_Extensions_repeated_sint64_extension,
  ProtobufUnittest_Extensions_repeated_fixed32_extension,
  ProtobufUnittest_Extensions_repeated_fixed64_extension,
  ProtobufUnittest_Extensions_repeated_sfixed32_extension,
  ProtobufUnittest_Extensions_repeated_sfixed64_extension,
  ProtobufUnittest_Extensions_repeated_float_extension,
  ProtobufUnittest_Extensions_repeated_double_extension,
  ProtobufUnittest_Extensions_repeated_bool_extension,
  ProtobufUnittest_Extensions_repeated_string_extension,
  ProtobufUnittest_Extensions_repeated_bytes_extension,
  ProtobufUnittest_Extensions_RepeatedGroup_extension,
  ProtobufUnittest_Extensions_repeated_nested_message_extension,
  ProtobufUnittest_Extensions_repeated_foreign_message_extension,
  ProtobufUnittest_Extensions_repeated_import_message_extension,
  ProtobufUnittest_Extensions_repeated_nested_enum_extension,
  ProtobufUnittest_Extensions_repeated_foreign_enum_extension,
  ProtobufUnittest_Extensions_repeated_import_enum_extension,
  ProtobufUnittest_Extensions_repeated_string_piece_extension,
  ProtobufUnittest_Extensions_repeated_cord_extension,
  ProtobufUnittest_Extensions_repeated_lazy_message_extension,
  ProtobufUnittest_Extensions_default_int32_extension,
  ProtobufUnittest_Extensions_default_int64_extension,
  ProtobufUnittest_Extensions_default_uint32_extension,
  ProtobufUnittest_Extensions_default_uint64_extension,
  ProtobufUnittest_Extensions_default_sint32_extension,
  ProtobufUnittest_Extensions_default_sint64_extension,
  ProtobufUnittest_Extensions_default_fixed32_extension,
  ProtobufUnittest_Extensions_default_fixed64_extension,
  ProtobufUnittest_Extensions_default_sfixed32_extension,
  ProtobufUnittest_Extensions_default_sfixed64_extension,
  ProtobufUnittest_Extensions_default_float_extension,
  ProtobufUnittest_Extensions_default_double_extension,
  ProtobufUnittest_Extensions_default_bool_extension,
  ProtobufUnittest_Extensions_default_string_extension,
  ProtobufUnittest_Extensions_default_bytes_extension,
  ProtobufUnittest_Extensions_default_nested_enum_extension,
  ProtobufUnittest_Extensions_default_foreign_enum_extension,
  ProtobufUnittest_Extensions_default_import_enum_extension,
  ProtobufUnittest_Extensions_default_string_piece_extension,
  ProtobufUnittest_Extensions_default_cord_extension,
  ProtobufUnittest_Extensions_oneof_uint32_extension,
  ProtobufUnittest_Extensions_oneof_nested_message_extension,
  ProtobufUnittest_Extensions_oneof_string_extension,
  ProtobufUnittest_Extensions_oneof_bytes_extension,
  ProtobufUnittest_Extensions_my_extension_string,
  ProtobufUnittest_Extensions_my_extension_int,
  ProtobufUnittest_Extensions_packed_int32_extension,
  ProtobufUnittest_Extensions_packed_int64_extension,
  ProtobufUnittest_Extensions_packed_uint32_extension,
  ProtobufUnittest_Extensions_packed_uint64_extension,
  ProtobufUnittest_Extensions_packed_sint32_extension,
  ProtobufUnittest_Extensions_packed_sint64_extension,
  ProtobufUnittest_Extensions_packed_fixed32_extension,
  ProtobufUnittest_Extensions_packed_fixed64_extension,
  ProtobufUnittest_Extensions_packed_sfixed32_extension,
  ProtobufUnittest_Extensions_packed_sfixed64_extension,
  ProtobufUnittest_Extensions_packed_float_extension,
  ProtobufUnittest_Extensions_packed_double_extension,
  ProtobufUnittest_Extensions_packed_bool_extension,
  ProtobufUnittest_Extensions_packed_enum_extension,
  ProtobufUnittest_Extensions_unpacked_int32_extension,
  ProtobufUnittest_Extensions_unpacked_int64_extension,
  ProtobufUnittest_Extensions_unpacked_uint32_extension,
  ProtobufUnittest_Extensions_unpacked_uint64_extension,
  ProtobufUnittest_Extensions_unpacked_sint32_extension,
  ProtobufUnittest_Extensions_unpacked_sint64_extension,
  ProtobufUnittest_Extensions_unpacked_fixed32_extension,
  ProtobufUnittest_Extensions_unpacked_fixed64_extension,
  ProtobufUnittest_Extensions_unpacked_sfixed32_extension,
  ProtobufUnittest_Extensions_unpacked_sfixed64_extension,
  ProtobufUnittest_Extensions_unpacked_float_extension,
  ProtobufUnittest_Extensions_unpacked_double_extension,
  ProtobufUnittest_Extensions_unpacked_bool_extension,
  ProtobufUnittest_Extensions_unpacked_enum_extension,
  ProtobufUnittest_Extensions_test_all_types,
  ProtobufUnittest_TestNestedExtension.Extensions.test,
  ProtobufUnittest_TestNestedExtension.Extensions.nested_string_extension,
  ProtobufUnittest_TestRequired.Extensions.single,
  ProtobufUnittest_TestRequired.Extensions.multi,
  ProtobufUnittest_TestParsingMerge.Extensions.optional_ext,
  ProtobufUnittest_TestParsingMerge.Extensions.repeated_ext
]
