/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: google/protobuf/unittest_no_field_presence.proto
 *
 */

//  Protocol Buffers - Google's data interchange format
//  Copyright 2008 Google Inc.  All rights reserved.
//  https://developers.google.com/protocol-buffers/
// 
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are
//  met:
// 
//      * Redistributions of source code must retain the above copyright
//  notice, this list of conditions and the following disclaimer.
//      * Redistributions in binary form must reproduce the above
//  copyright notice, this list of conditions and the following disclaimer
//  in the documentation and/or other materials provided with the
//  distribution.
//      * Neither the name of Google Inc. nor the names of its
//  contributors may be used to endorse or promote products derived from
//  this software without specific prior written permission.
// 
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
//  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
//  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
//  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
//  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
//  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
//  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

//  A proto file used to test a message type with no explicit field presence.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _1: SwiftProtobuf.ProtobufAPIVersion_1 {}
  typealias Version = _1
}

enum Proto2NofieldpresenceUnittest_ForeignEnum: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case foreignFoo // = 0
  case foreignBar // = 1
  case foreignBaz // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .foreignFoo
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .foreignFoo
    case 1: self = .foreignBar
    case 2: self = .foreignBaz
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  init?(jsonName: String) {
    switch jsonName {
    case "FOREIGN_FOO": self = .foreignFoo
    case "FOREIGN_BAR": self = .foreignBar
    case "FOREIGN_BAZ": self = .foreignBaz
    default: return nil
    }
  }

  init?(protoName: String) {
    switch protoName {
    case "FOREIGN_FOO": self = .foreignFoo
    case "FOREIGN_BAR": self = .foreignBar
    case "FOREIGN_BAZ": self = .foreignBaz
    default: return nil
    }
  }

  var rawValue: Int {
    get {
      switch self {
      case .foreignFoo: return 0
      case .foreignBar: return 1
      case .foreignBaz: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }
  }

  var json: String {
    get {
      switch self {
      case .foreignFoo: return "\"FOREIGN_FOO\""
      case .foreignBar: return "\"FOREIGN_BAR\""
      case .foreignBaz: return "\"FOREIGN_BAZ\""
      case .UNRECOGNIZED(let i): return String(i)
      }
    }
  }

  var hashValue: Int { return rawValue }

}

///   This proto includes every type of field in both singular and repeated
///   forms.
struct Proto2NofieldpresenceUnittest_TestAllTypes: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var protoMessageName: String {return "TestAllTypes"}
  public var protoPackageName: String {return "proto2_nofieldpresence_unittest"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "optional_int32", json: "optionalInt32"),
    2: .unique(proto: "optional_int64", json: "optionalInt64"),
    3: .unique(proto: "optional_uint32", json: "optionalUint32"),
    4: .unique(proto: "optional_uint64", json: "optionalUint64"),
    5: .unique(proto: "optional_sint32", json: "optionalSint32"),
    6: .unique(proto: "optional_sint64", json: "optionalSint64"),
    7: .unique(proto: "optional_fixed32", json: "optionalFixed32"),
    8: .unique(proto: "optional_fixed64", json: "optionalFixed64"),
    9: .unique(proto: "optional_sfixed32", json: "optionalSfixed32"),
    10: .unique(proto: "optional_sfixed64", json: "optionalSfixed64"),
    11: .unique(proto: "optional_float", json: "optionalFloat"),
    12: .unique(proto: "optional_double", json: "optionalDouble"),
    13: .unique(proto: "optional_bool", json: "optionalBool"),
    14: .unique(proto: "optional_string", json: "optionalString"),
    15: .unique(proto: "optional_bytes", json: "optionalBytes"),
    18: .unique(proto: "optional_nested_message", json: "optionalNestedMessage"),
    19: .unique(proto: "optional_foreign_message", json: "optionalForeignMessage"),
    20: .unique(proto: "optional_proto2_message", json: "optionalProto2Message"),
    21: .unique(proto: "optional_nested_enum", json: "optionalNestedEnum"),
    22: .unique(proto: "optional_foreign_enum", json: "optionalForeignEnum"),
    24: .unique(proto: "optional_string_piece", json: "optionalStringPiece"),
    25: .unique(proto: "optional_cord", json: "optionalCord"),
    30: .unique(proto: "optional_lazy_message", json: "optionalLazyMessage"),
    31: .unique(proto: "repeated_int32", json: "repeatedInt32"),
    32: .unique(proto: "repeated_int64", json: "repeatedInt64"),
    33: .unique(proto: "repeated_uint32", json: "repeatedUint32"),
    34: .unique(proto: "repeated_uint64", json: "repeatedUint64"),
    35: .unique(proto: "repeated_sint32", json: "repeatedSint32"),
    36: .unique(proto: "repeated_sint64", json: "repeatedSint64"),
    37: .unique(proto: "repeated_fixed32", json: "repeatedFixed32"),
    38: .unique(proto: "repeated_fixed64", json: "repeatedFixed64"),
    39: .unique(proto: "repeated_sfixed32", json: "repeatedSfixed32"),
    40: .unique(proto: "repeated_sfixed64", json: "repeatedSfixed64"),
    41: .unique(proto: "repeated_float", json: "repeatedFloat"),
    42: .unique(proto: "repeated_double", json: "repeatedDouble"),
    43: .unique(proto: "repeated_bool", json: "repeatedBool"),
    44: .unique(proto: "repeated_string", json: "repeatedString"),
    45: .unique(proto: "repeated_bytes", json: "repeatedBytes"),
    48: .unique(proto: "repeated_nested_message", json: "repeatedNestedMessage"),
    49: .unique(proto: "repeated_foreign_message", json: "repeatedForeignMessage"),
    50: .unique(proto: "repeated_proto2_message", json: "repeatedProto2Message"),
    51: .unique(proto: "repeated_nested_enum", json: "repeatedNestedEnum"),
    52: .unique(proto: "repeated_foreign_enum", json: "repeatedForeignEnum"),
    54: .unique(proto: "repeated_string_piece", json: "repeatedStringPiece"),
    55: .unique(proto: "repeated_cord", json: "repeatedCord"),
    57: .unique(proto: "repeated_lazy_message", json: "repeatedLazyMessage"),
    111: .unique(proto: "oneof_uint32", json: "oneofUint32"),
    112: .unique(proto: "oneof_nested_message", json: "oneofNestedMessage"),
    113: .unique(proto: "oneof_string", json: "oneofString"),
    114: .unique(proto: "oneof_enum", json: "oneofEnum"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = Proto2NofieldpresenceUnittest_TestAllTypes
    var _optionalInt32: Int32 = 0
    var _optionalInt64: Int64 = 0
    var _optionalUint32: UInt32 = 0
    var _optionalUint64: UInt64 = 0
    var _optionalSint32: Int32 = 0
    var _optionalSint64: Int64 = 0
    var _optionalFixed32: UInt32 = 0
    var _optionalFixed64: UInt64 = 0
    var _optionalSfixed32: Int32 = 0
    var _optionalSfixed64: Int64 = 0
    var _optionalFloat: Float = 0
    var _optionalDouble: Double = 0
    var _optionalBool: Bool = false
    var _optionalString: String = ""
    var _optionalBytes: Data = Data()
    var _optionalNestedMessage: Proto2NofieldpresenceUnittest_TestAllTypes.NestedMessage? = nil
    var _optionalForeignMessage: Proto2NofieldpresenceUnittest_ForeignMessage? = nil
    var _optionalProto2Message: ProtobufUnittest_TestAllTypes? = nil
    var _optionalNestedEnum: Proto2NofieldpresenceUnittest_TestAllTypes.NestedEnum = Proto2NofieldpresenceUnittest_TestAllTypes.NestedEnum.foo
    var _optionalForeignEnum: Proto2NofieldpresenceUnittest_ForeignEnum = Proto2NofieldpresenceUnittest_ForeignEnum.foreignFoo
    var _optionalStringPiece: String = ""
    var _optionalCord: String = ""
    var _optionalLazyMessage: Proto2NofieldpresenceUnittest_TestAllTypes.NestedMessage? = nil
    var _repeatedInt32: [Int32] = []
    var _repeatedInt64: [Int64] = []
    var _repeatedUint32: [UInt32] = []
    var _repeatedUint64: [UInt64] = []
    var _repeatedSint32: [Int32] = []
    var _repeatedSint64: [Int64] = []
    var _repeatedFixed32: [UInt32] = []
    var _repeatedFixed64: [UInt64] = []
    var _repeatedSfixed32: [Int32] = []
    var _repeatedSfixed64: [Int64] = []
    var _repeatedFloat: [Float] = []
    var _repeatedDouble: [Double] = []
    var _repeatedBool: [Bool] = []
    var _repeatedString: [String] = []
    var _repeatedBytes: [Data] = []
    var _repeatedNestedMessage: [Proto2NofieldpresenceUnittest_TestAllTypes.NestedMessage] = []
    var _repeatedForeignMessage: [Proto2NofieldpresenceUnittest_ForeignMessage] = []
    var _repeatedProto2Message: [ProtobufUnittest_TestAllTypes] = []
    var _repeatedNestedEnum: [Proto2NofieldpresenceUnittest_TestAllTypes.NestedEnum] = []
    var _repeatedForeignEnum: [Proto2NofieldpresenceUnittest_ForeignEnum] = []
    var _repeatedStringPiece: [String] = []
    var _repeatedCord: [String] = []
    var _repeatedLazyMessage: [Proto2NofieldpresenceUnittest_TestAllTypes.NestedMessage] = []
    var _oneofField = Proto2NofieldpresenceUnittest_TestAllTypes.OneOf_OneofField()

    init() {}

    func decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_optionalInt32)
      case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: &_optionalInt64)
      case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_optionalUint32)
      case 4: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt64.self, value: &_optionalUint64)
      case 5: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufSInt32.self, value: &_optionalSint32)
      case 6: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufSInt64.self, value: &_optionalSint64)
      case 7: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufFixed32.self, value: &_optionalFixed32)
      case 8: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufFixed64.self, value: &_optionalFixed64)
      case 9: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufSFixed32.self, value: &_optionalSfixed32)
      case 10: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufSFixed64.self, value: &_optionalSfixed64)
      case 11: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufFloat.self, value: &_optionalFloat)
      case 12: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufDouble.self, value: &_optionalDouble)
      case 13: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: &_optionalBool)
      case 14: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_optionalString)
      case 15: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: &_optionalBytes)
      case 18: try setter.decodeSingularMessageField(fieldType: Proto2NofieldpresenceUnittest_TestAllTypes.NestedMessage.self, value: &_optionalNestedMessage)
      case 19: try setter.decodeSingularMessageField(fieldType: Proto2NofieldpresenceUnittest_ForeignMessage.self, value: &_optionalForeignMessage)
      case 20: try setter.decodeSingularMessageField(fieldType: ProtobufUnittest_TestAllTypes.self, value: &_optionalProto2Message)
      case 21: try setter.decodeSingularField(fieldType: Proto2NofieldpresenceUnittest_TestAllTypes.NestedEnum.self, value: &_optionalNestedEnum)
      case 22: try setter.decodeSingularField(fieldType: Proto2NofieldpresenceUnittest_ForeignEnum.self, value: &_optionalForeignEnum)
      case 24: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_optionalStringPiece)
      case 25: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_optionalCord)
      case 30: try setter.decodeSingularMessageField(fieldType: Proto2NofieldpresenceUnittest_TestAllTypes.NestedMessage.self, value: &_optionalLazyMessage)
      case 31: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_repeatedInt32)
      case 32: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: &_repeatedInt64)
      case 33: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_repeatedUint32)
      case 34: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufUInt64.self, value: &_repeatedUint64)
      case 35: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufSInt32.self, value: &_repeatedSint32)
      case 36: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufSInt64.self, value: &_repeatedSint64)
      case 37: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufFixed32.self, value: &_repeatedFixed32)
      case 38: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufFixed64.self, value: &_repeatedFixed64)
      case 39: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufSFixed32.self, value: &_repeatedSfixed32)
      case 40: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufSFixed64.self, value: &_repeatedSfixed64)
      case 41: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufFloat.self, value: &_repeatedFloat)
      case 42: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufDouble.self, value: &_repeatedDouble)
      case 43: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufBool.self, value: &_repeatedBool)
      case 44: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_repeatedString)
      case 45: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: &_repeatedBytes)
      case 48: try setter.decodeRepeatedMessageField(fieldType: Proto2NofieldpresenceUnittest_TestAllTypes.NestedMessage.self, value: &_repeatedNestedMessage)
      case 49: try setter.decodeRepeatedMessageField(fieldType: Proto2NofieldpresenceUnittest_ForeignMessage.self, value: &_repeatedForeignMessage)
      case 50: try setter.decodeRepeatedMessageField(fieldType: ProtobufUnittest_TestAllTypes.self, value: &_repeatedProto2Message)
      case 51: try setter.decodeRepeatedField(fieldType: Proto2NofieldpresenceUnittest_TestAllTypes.NestedEnum.self, value: &_repeatedNestedEnum)
      case 52: try setter.decodeRepeatedField(fieldType: Proto2NofieldpresenceUnittest_ForeignEnum.self, value: &_repeatedForeignEnum)
      case 54: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_repeatedStringPiece)
      case 55: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_repeatedCord)
      case 57: try setter.decodeRepeatedMessageField(fieldType: Proto2NofieldpresenceUnittest_TestAllTypes.NestedMessage.self, value: &_repeatedLazyMessage)
      case 111, 112, 113, 114: try _oneofField.decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
      default: break
      }
    }

    func traverse(visitor: SwiftProtobuf.Visitor) throws {
      if _optionalInt32 != 0 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: _optionalInt32, fieldNumber: 1)
      }
      if _optionalInt64 != 0 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: _optionalInt64, fieldNumber: 2)
      }
      if _optionalUint32 != 0 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _optionalUint32, fieldNumber: 3)
      }
      if _optionalUint64 != 0 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt64.self, value: _optionalUint64, fieldNumber: 4)
      }
      if _optionalSint32 != 0 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufSInt32.self, value: _optionalSint32, fieldNumber: 5)
      }
      if _optionalSint64 != 0 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufSInt64.self, value: _optionalSint64, fieldNumber: 6)
      }
      if _optionalFixed32 != 0 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufFixed32.self, value: _optionalFixed32, fieldNumber: 7)
      }
      if _optionalFixed64 != 0 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufFixed64.self, value: _optionalFixed64, fieldNumber: 8)
      }
      if _optionalSfixed32 != 0 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufSFixed32.self, value: _optionalSfixed32, fieldNumber: 9)
      }
      if _optionalSfixed64 != 0 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufSFixed64.self, value: _optionalSfixed64, fieldNumber: 10)
      }
      if _optionalFloat != 0 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufFloat.self, value: _optionalFloat, fieldNumber: 11)
      }
      if _optionalDouble != 0 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufDouble.self, value: _optionalDouble, fieldNumber: 12)
      }
      if _optionalBool != false {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: _optionalBool, fieldNumber: 13)
      }
      if _optionalString != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _optionalString, fieldNumber: 14)
      }
      if _optionalBytes != Data() {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: _optionalBytes, fieldNumber: 15)
      }
      if let v = _optionalNestedMessage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
      }
      if let v = _optionalForeignMessage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
      }
      if let v = _optionalProto2Message {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
      }
      if _optionalNestedEnum != Proto2NofieldpresenceUnittest_TestAllTypes.NestedEnum.foo {
        try visitor.visitSingularField(fieldType: Proto2NofieldpresenceUnittest_TestAllTypes.NestedEnum.self, value: _optionalNestedEnum, fieldNumber: 21)
      }
      if _optionalForeignEnum != Proto2NofieldpresenceUnittest_ForeignEnum.foreignFoo {
        try visitor.visitSingularField(fieldType: Proto2NofieldpresenceUnittest_ForeignEnum.self, value: _optionalForeignEnum, fieldNumber: 22)
      }
      if _optionalStringPiece != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _optionalStringPiece, fieldNumber: 24)
      }
      if _optionalCord != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _optionalCord, fieldNumber: 25)
      }
      if let v = _optionalLazyMessage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 30)
      }
      if !_repeatedInt32.isEmpty {
        try visitor.visitPackedField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: _repeatedInt32, fieldNumber: 31)
      }
      if !_repeatedInt64.isEmpty {
        try visitor.visitPackedField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: _repeatedInt64, fieldNumber: 32)
      }
      if !_repeatedUint32.isEmpty {
        try visitor.visitPackedField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _repeatedUint32, fieldNumber: 33)
      }
      if !_repeatedUint64.isEmpty {
        try visitor.visitPackedField(fieldType: SwiftProtobuf.ProtobufUInt64.self, value: _repeatedUint64, fieldNumber: 34)
      }
      if !_repeatedSint32.isEmpty {
        try visitor.visitPackedField(fieldType: SwiftProtobuf.ProtobufSInt32.self, value: _repeatedSint32, fieldNumber: 35)
      }
      if !_repeatedSint64.isEmpty {
        try visitor.visitPackedField(fieldType: SwiftProtobuf.ProtobufSInt64.self, value: _repeatedSint64, fieldNumber: 36)
      }
      if !_repeatedFixed32.isEmpty {
        try visitor.visitPackedField(fieldType: SwiftProtobuf.ProtobufFixed32.self, value: _repeatedFixed32, fieldNumber: 37)
      }
      if !_repeatedFixed64.isEmpty {
        try visitor.visitPackedField(fieldType: SwiftProtobuf.ProtobufFixed64.self, value: _repeatedFixed64, fieldNumber: 38)
      }
      if !_repeatedSfixed32.isEmpty {
        try visitor.visitPackedField(fieldType: SwiftProtobuf.ProtobufSFixed32.self, value: _repeatedSfixed32, fieldNumber: 39)
      }
      if !_repeatedSfixed64.isEmpty {
        try visitor.visitPackedField(fieldType: SwiftProtobuf.ProtobufSFixed64.self, value: _repeatedSfixed64, fieldNumber: 40)
      }
      if !_repeatedFloat.isEmpty {
        try visitor.visitPackedField(fieldType: SwiftProtobuf.ProtobufFloat.self, value: _repeatedFloat, fieldNumber: 41)
      }
      if !_repeatedDouble.isEmpty {
        try visitor.visitPackedField(fieldType: SwiftProtobuf.ProtobufDouble.self, value: _repeatedDouble, fieldNumber: 42)
      }
      if !_repeatedBool.isEmpty {
        try visitor.visitPackedField(fieldType: SwiftProtobuf.ProtobufBool.self, value: _repeatedBool, fieldNumber: 43)
      }
      if !_repeatedString.isEmpty {
        try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufString.self, value: _repeatedString, fieldNumber: 44)
      }
      if !_repeatedBytes.isEmpty {
        try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: _repeatedBytes, fieldNumber: 45)
      }
      if !_repeatedNestedMessage.isEmpty {
        try visitor.visitRepeatedMessageField(value: _repeatedNestedMessage, fieldNumber: 48)
      }
      if !_repeatedForeignMessage.isEmpty {
        try visitor.visitRepeatedMessageField(value: _repeatedForeignMessage, fieldNumber: 49)
      }
      if !_repeatedProto2Message.isEmpty {
        try visitor.visitRepeatedMessageField(value: _repeatedProto2Message, fieldNumber: 50)
      }
      if !_repeatedNestedEnum.isEmpty {
        try visitor.visitPackedField(fieldType: Proto2NofieldpresenceUnittest_TestAllTypes.NestedEnum.self, value: _repeatedNestedEnum, fieldNumber: 51)
      }
      if !_repeatedForeignEnum.isEmpty {
        try visitor.visitPackedField(fieldType: Proto2NofieldpresenceUnittest_ForeignEnum.self, value: _repeatedForeignEnum, fieldNumber: 52)
      }
      if !_repeatedStringPiece.isEmpty {
        try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufString.self, value: _repeatedStringPiece, fieldNumber: 54)
      }
      if !_repeatedCord.isEmpty {
        try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufString.self, value: _repeatedCord, fieldNumber: 55)
      }
      if !_repeatedLazyMessage.isEmpty {
        try visitor.visitRepeatedMessageField(value: _repeatedLazyMessage, fieldNumber: 57)
      }
      try _oneofField.traverse(visitor: visitor, start: 111, end: 115)
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _optionalInt32 != other._optionalInt32 {return false}
      if _optionalInt64 != other._optionalInt64 {return false}
      if _optionalUint32 != other._optionalUint32 {return false}
      if _optionalUint64 != other._optionalUint64 {return false}
      if _optionalSint32 != other._optionalSint32 {return false}
      if _optionalSint64 != other._optionalSint64 {return false}
      if _optionalFixed32 != other._optionalFixed32 {return false}
      if _optionalFixed64 != other._optionalFixed64 {return false}
      if _optionalSfixed32 != other._optionalSfixed32 {return false}
      if _optionalSfixed64 != other._optionalSfixed64 {return false}
      if _optionalFloat != other._optionalFloat {return false}
      if _optionalDouble != other._optionalDouble {return false}
      if _optionalBool != other._optionalBool {return false}
      if _optionalString != other._optionalString {return false}
      if _optionalBytes != other._optionalBytes {return false}
      if _optionalNestedMessage != other._optionalNestedMessage {return false}
      if _optionalForeignMessage != other._optionalForeignMessage {return false}
      if _optionalProto2Message != other._optionalProto2Message {return false}
      if _optionalNestedEnum != other._optionalNestedEnum {return false}
      if _optionalForeignEnum != other._optionalForeignEnum {return false}
      if _optionalStringPiece != other._optionalStringPiece {return false}
      if _optionalCord != other._optionalCord {return false}
      if _optionalLazyMessage != other._optionalLazyMessage {return false}
      if _repeatedInt32 != other._repeatedInt32 {return false}
      if _repeatedInt64 != other._repeatedInt64 {return false}
      if _repeatedUint32 != other._repeatedUint32 {return false}
      if _repeatedUint64 != other._repeatedUint64 {return false}
      if _repeatedSint32 != other._repeatedSint32 {return false}
      if _repeatedSint64 != other._repeatedSint64 {return false}
      if _repeatedFixed32 != other._repeatedFixed32 {return false}
      if _repeatedFixed64 != other._repeatedFixed64 {return false}
      if _repeatedSfixed32 != other._repeatedSfixed32 {return false}
      if _repeatedSfixed64 != other._repeatedSfixed64 {return false}
      if _repeatedFloat != other._repeatedFloat {return false}
      if _repeatedDouble != other._repeatedDouble {return false}
      if _repeatedBool != other._repeatedBool {return false}
      if _repeatedString != other._repeatedString {return false}
      if _repeatedBytes != other._repeatedBytes {return false}
      if _repeatedNestedMessage != other._repeatedNestedMessage {return false}
      if _repeatedForeignMessage != other._repeatedForeignMessage {return false}
      if _repeatedProto2Message != other._repeatedProto2Message {return false}
      if _repeatedNestedEnum != other._repeatedNestedEnum {return false}
      if _repeatedForeignEnum != other._repeatedForeignEnum {return false}
      if _repeatedStringPiece != other._repeatedStringPiece {return false}
      if _repeatedCord != other._repeatedCord {return false}
      if _repeatedLazyMessage != other._repeatedLazyMessage {return false}
      if _oneofField != other._oneofField {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._optionalInt32 = _optionalInt32
      clone._optionalInt64 = _optionalInt64
      clone._optionalUint32 = _optionalUint32
      clone._optionalUint64 = _optionalUint64
      clone._optionalSint32 = _optionalSint32
      clone._optionalSint64 = _optionalSint64
      clone._optionalFixed32 = _optionalFixed32
      clone._optionalFixed64 = _optionalFixed64
      clone._optionalSfixed32 = _optionalSfixed32
      clone._optionalSfixed64 = _optionalSfixed64
      clone._optionalFloat = _optionalFloat
      clone._optionalDouble = _optionalDouble
      clone._optionalBool = _optionalBool
      clone._optionalString = _optionalString
      clone._optionalBytes = _optionalBytes
      clone._optionalNestedMessage = _optionalNestedMessage
      clone._optionalForeignMessage = _optionalForeignMessage
      clone._optionalProto2Message = _optionalProto2Message
      clone._optionalNestedEnum = _optionalNestedEnum
      clone._optionalForeignEnum = _optionalForeignEnum
      clone._optionalStringPiece = _optionalStringPiece
      clone._optionalCord = _optionalCord
      clone._optionalLazyMessage = _optionalLazyMessage
      clone._repeatedInt32 = _repeatedInt32
      clone._repeatedInt64 = _repeatedInt64
      clone._repeatedUint32 = _repeatedUint32
      clone._repeatedUint64 = _repeatedUint64
      clone._repeatedSint32 = _repeatedSint32
      clone._repeatedSint64 = _repeatedSint64
      clone._repeatedFixed32 = _repeatedFixed32
      clone._repeatedFixed64 = _repeatedFixed64
      clone._repeatedSfixed32 = _repeatedSfixed32
      clone._repeatedSfixed64 = _repeatedSfixed64
      clone._repeatedFloat = _repeatedFloat
      clone._repeatedDouble = _repeatedDouble
      clone._repeatedBool = _repeatedBool
      clone._repeatedString = _repeatedString
      clone._repeatedBytes = _repeatedBytes
      clone._repeatedNestedMessage = _repeatedNestedMessage
      clone._repeatedForeignMessage = _repeatedForeignMessage
      clone._repeatedProto2Message = _repeatedProto2Message
      clone._repeatedNestedEnum = _repeatedNestedEnum
      clone._repeatedForeignEnum = _repeatedForeignEnum
      clone._repeatedStringPiece = _repeatedStringPiece
      clone._repeatedCord = _repeatedCord
      clone._repeatedLazyMessage = _repeatedLazyMessage
      clone._oneofField = _oneofField
      return clone
    }
  }

  private var _storage = _StorageClass()


  enum OneOf_OneofField: ExpressibleByNilLiteral, SwiftProtobuf.OneofEnum {
    case oneofUint32(UInt32)
    case oneofNestedMessage(Proto2NofieldpresenceUnittest_TestAllTypes.NestedMessage)
    case oneofString(String)
    case oneofEnum(Proto2NofieldpresenceUnittest_TestAllTypes.NestedEnum)
    case None

    static func ==(lhs: Proto2NofieldpresenceUnittest_TestAllTypes.OneOf_OneofField, rhs: Proto2NofieldpresenceUnittest_TestAllTypes.OneOf_OneofField) -> Bool {
      switch (lhs, rhs) {
      case (.oneofUint32(let l), .oneofUint32(let r)): return l == r
      case (.oneofNestedMessage(let l), .oneofNestedMessage(let r)): return l == r
      case (.oneofString(let l), .oneofString(let r)): return l == r
      case (.oneofEnum(let l), .oneofEnum(let r)): return l == r
      case (.None, .None): return true
      default: return false
      }
    }

    public init(nilLiteral: ()) {
      self = .None
    }

    public init() {
      self = .None
    }

    public mutating func decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
      if self != .None && setter.rejectConflictingOneof {
        throw SwiftProtobuf.DecodingError.duplicatedOneOf
      }
      switch protoFieldNumber {
      case 111:
        var value = UInt32()
        try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &value)
        self = .oneofUint32(value)
      case 112:
        var value: Proto2NofieldpresenceUnittest_TestAllTypes.NestedMessage?
        try setter.decodeSingularMessageField(fieldType: Proto2NofieldpresenceUnittest_TestAllTypes.NestedMessage.self, value: &value)
        if let value = value {
          self = .oneofNestedMessage(value)
        }
      case 113:
        var value = String()
        try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &value)
        self = .oneofString(value)
      case 114:
        var value = Proto2NofieldpresenceUnittest_TestAllTypes.NestedEnum()
        try setter.decodeSingularField(fieldType: Proto2NofieldpresenceUnittest_TestAllTypes.NestedEnum.self, value: &value)
        self = .oneofEnum(value)
      default:
        self = .None
      }
    }

    public func traverse(visitor: SwiftProtobuf.Visitor, start: Int, end: Int) throws {
      switch self {
      case .oneofUint32(let v):
        if start <= 111 && 111 < end {
          try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: v, fieldNumber: 111)
        }
      case .oneofNestedMessage(let v):
        if start <= 112 && 112 < end {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 112)
        }
      case .oneofString(let v):
        if start <= 113 && 113 < end {
          try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: v, fieldNumber: 113)
        }
      case .oneofEnum(let v):
        if start <= 114 && 114 < end {
          try visitor.visitSingularField(fieldType: Proto2NofieldpresenceUnittest_TestAllTypes.NestedEnum.self, value: v, fieldNumber: 114)
        }
      case .None:
        break
      }
    }
  }

  enum NestedEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case foo // = 0
    case bar // = 1
    case baz // = 2
    case UNRECOGNIZED(Int)

    init() {
      self = .foo
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .foo
      case 1: self = .bar
      case 2: self = .baz
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    init?(jsonName: String) {
      switch jsonName {
      case "FOO": self = .foo
      case "BAR": self = .bar
      case "BAZ": self = .baz
      default: return nil
      }
    }

    init?(protoName: String) {
      switch protoName {
      case "FOO": self = .foo
      case "BAR": self = .bar
      case "BAZ": self = .baz
      default: return nil
      }
    }

    var rawValue: Int {
      get {
        switch self {
        case .foo: return 0
        case .bar: return 1
        case .baz: return 2
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    var json: String {
      get {
        switch self {
        case .foo: return "\"FOO\""
        case .bar: return "\"BAR\""
        case .baz: return "\"BAZ\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    var hashValue: Int { return rawValue }

  }

  struct NestedMessage: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
    public var protoMessageName: String {return "NestedMessage"}
    public var protoPackageName: String {return "proto2_nofieldpresence_unittest"}
    public static let _protobuf_fieldNames: FieldNameMap = [
      1: .same(proto: "bb"),
    ]


    var bb: Int32 = 0

    init() {}

    public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &bb)
      default: break
      }
    }

    public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
      if bb != 0 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: bb, fieldNumber: 1)
      }
    }

    public func _protoc_generated_isEqualTo(other: Proto2NofieldpresenceUnittest_TestAllTypes.NestedMessage) -> Bool {
      if bb != other.bb {return false}
      return true
    }
  }

  ///   Singular
  ///   TODO: remove 'optional' labels as soon as CL 69188077 is LGTM'd to make
  ///   'optional' optional.
  var optionalInt32: Int32 {
    get {return _storage._optionalInt32}
    set {_uniqueStorage()._optionalInt32 = newValue}
  }

  var optionalInt64: Int64 {
    get {return _storage._optionalInt64}
    set {_uniqueStorage()._optionalInt64 = newValue}
  }

  var optionalUint32: UInt32 {
    get {return _storage._optionalUint32}
    set {_uniqueStorage()._optionalUint32 = newValue}
  }

  var optionalUint64: UInt64 {
    get {return _storage._optionalUint64}
    set {_uniqueStorage()._optionalUint64 = newValue}
  }

  var optionalSint32: Int32 {
    get {return _storage._optionalSint32}
    set {_uniqueStorage()._optionalSint32 = newValue}
  }

  var optionalSint64: Int64 {
    get {return _storage._optionalSint64}
    set {_uniqueStorage()._optionalSint64 = newValue}
  }

  var optionalFixed32: UInt32 {
    get {return _storage._optionalFixed32}
    set {_uniqueStorage()._optionalFixed32 = newValue}
  }

  var optionalFixed64: UInt64 {
    get {return _storage._optionalFixed64}
    set {_uniqueStorage()._optionalFixed64 = newValue}
  }

  var optionalSfixed32: Int32 {
    get {return _storage._optionalSfixed32}
    set {_uniqueStorage()._optionalSfixed32 = newValue}
  }

  var optionalSfixed64: Int64 {
    get {return _storage._optionalSfixed64}
    set {_uniqueStorage()._optionalSfixed64 = newValue}
  }

  var optionalFloat: Float {
    get {return _storage._optionalFloat}
    set {_uniqueStorage()._optionalFloat = newValue}
  }

  var optionalDouble: Double {
    get {return _storage._optionalDouble}
    set {_uniqueStorage()._optionalDouble = newValue}
  }

  var optionalBool: Bool {
    get {return _storage._optionalBool}
    set {_uniqueStorage()._optionalBool = newValue}
  }

  var optionalString: String {
    get {return _storage._optionalString}
    set {_uniqueStorage()._optionalString = newValue}
  }

  var optionalBytes: Data {
    get {return _storage._optionalBytes}
    set {_uniqueStorage()._optionalBytes = newValue}
  }

  var optionalNestedMessage: Proto2NofieldpresenceUnittest_TestAllTypes.NestedMessage {
    get {return _storage._optionalNestedMessage ?? Proto2NofieldpresenceUnittest_TestAllTypes.NestedMessage()}
    set {_uniqueStorage()._optionalNestedMessage = newValue}
  }
  public var hasOptionalNestedMessage: Bool {
    return _storage._optionalNestedMessage != nil
  }
  public mutating func clearOptionalNestedMessage() {
    return _storage._optionalNestedMessage = nil
  }

  var optionalForeignMessage: Proto2NofieldpresenceUnittest_ForeignMessage {
    get {return _storage._optionalForeignMessage ?? Proto2NofieldpresenceUnittest_ForeignMessage()}
    set {_uniqueStorage()._optionalForeignMessage = newValue}
  }
  public var hasOptionalForeignMessage: Bool {
    return _storage._optionalForeignMessage != nil
  }
  public mutating func clearOptionalForeignMessage() {
    return _storage._optionalForeignMessage = nil
  }

  var optionalProto2Message: ProtobufUnittest_TestAllTypes {
    get {return _storage._optionalProto2Message ?? ProtobufUnittest_TestAllTypes()}
    set {_uniqueStorage()._optionalProto2Message = newValue}
  }
  public var hasOptionalProto2Message: Bool {
    return _storage._optionalProto2Message != nil
  }
  public mutating func clearOptionalProto2Message() {
    return _storage._optionalProto2Message = nil
  }

  var optionalNestedEnum: Proto2NofieldpresenceUnittest_TestAllTypes.NestedEnum {
    get {return _storage._optionalNestedEnum}
    set {_uniqueStorage()._optionalNestedEnum = newValue}
  }

  ///   N.B.: proto2-enum-type fields not allowed, because their default values
  ///   might not be zero.
  ///  optional protobuf_unittest.ForeignEnum          optional_proto2_enum     = 23;
  var optionalForeignEnum: Proto2NofieldpresenceUnittest_ForeignEnum {
    get {return _storage._optionalForeignEnum}
    set {_uniqueStorage()._optionalForeignEnum = newValue}
  }

  var optionalStringPiece: String {
    get {return _storage._optionalStringPiece}
    set {_uniqueStorage()._optionalStringPiece = newValue}
  }

  var optionalCord: String {
    get {return _storage._optionalCord}
    set {_uniqueStorage()._optionalCord = newValue}
  }

  var optionalLazyMessage: Proto2NofieldpresenceUnittest_TestAllTypes.NestedMessage {
    get {return _storage._optionalLazyMessage ?? Proto2NofieldpresenceUnittest_TestAllTypes.NestedMessage()}
    set {_uniqueStorage()._optionalLazyMessage = newValue}
  }
  public var hasOptionalLazyMessage: Bool {
    return _storage._optionalLazyMessage != nil
  }
  public mutating func clearOptionalLazyMessage() {
    return _storage._optionalLazyMessage = nil
  }

  ///   Repeated
  var repeatedInt32: [Int32] {
    get {return _storage._repeatedInt32}
    set {_uniqueStorage()._repeatedInt32 = newValue}
  }

  var repeatedInt64: [Int64] {
    get {return _storage._repeatedInt64}
    set {_uniqueStorage()._repeatedInt64 = newValue}
  }

  var repeatedUint32: [UInt32] {
    get {return _storage._repeatedUint32}
    set {_uniqueStorage()._repeatedUint32 = newValue}
  }

  var repeatedUint64: [UInt64] {
    get {return _storage._repeatedUint64}
    set {_uniqueStorage()._repeatedUint64 = newValue}
  }

  var repeatedSint32: [Int32] {
    get {return _storage._repeatedSint32}
    set {_uniqueStorage()._repeatedSint32 = newValue}
  }

  var repeatedSint64: [Int64] {
    get {return _storage._repeatedSint64}
    set {_uniqueStorage()._repeatedSint64 = newValue}
  }

  var repeatedFixed32: [UInt32] {
    get {return _storage._repeatedFixed32}
    set {_uniqueStorage()._repeatedFixed32 = newValue}
  }

  var repeatedFixed64: [UInt64] {
    get {return _storage._repeatedFixed64}
    set {_uniqueStorage()._repeatedFixed64 = newValue}
  }

  var repeatedSfixed32: [Int32] {
    get {return _storage._repeatedSfixed32}
    set {_uniqueStorage()._repeatedSfixed32 = newValue}
  }

  var repeatedSfixed64: [Int64] {
    get {return _storage._repeatedSfixed64}
    set {_uniqueStorage()._repeatedSfixed64 = newValue}
  }

  var repeatedFloat: [Float] {
    get {return _storage._repeatedFloat}
    set {_uniqueStorage()._repeatedFloat = newValue}
  }

  var repeatedDouble: [Double] {
    get {return _storage._repeatedDouble}
    set {_uniqueStorage()._repeatedDouble = newValue}
  }

  var repeatedBool: [Bool] {
    get {return _storage._repeatedBool}
    set {_uniqueStorage()._repeatedBool = newValue}
  }

  var repeatedString: [String] {
    get {return _storage._repeatedString}
    set {_uniqueStorage()._repeatedString = newValue}
  }

  var repeatedBytes: [Data] {
    get {return _storage._repeatedBytes}
    set {_uniqueStorage()._repeatedBytes = newValue}
  }

  var repeatedNestedMessage: [Proto2NofieldpresenceUnittest_TestAllTypes.NestedMessage] {
    get {return _storage._repeatedNestedMessage}
    set {_uniqueStorage()._repeatedNestedMessage = newValue}
  }

  var repeatedForeignMessage: [Proto2NofieldpresenceUnittest_ForeignMessage] {
    get {return _storage._repeatedForeignMessage}
    set {_uniqueStorage()._repeatedForeignMessage = newValue}
  }

  var repeatedProto2Message: [ProtobufUnittest_TestAllTypes] {
    get {return _storage._repeatedProto2Message}
    set {_uniqueStorage()._repeatedProto2Message = newValue}
  }

  var repeatedNestedEnum: [Proto2NofieldpresenceUnittest_TestAllTypes.NestedEnum] {
    get {return _storage._repeatedNestedEnum}
    set {_uniqueStorage()._repeatedNestedEnum = newValue}
  }

  var repeatedForeignEnum: [Proto2NofieldpresenceUnittest_ForeignEnum] {
    get {return _storage._repeatedForeignEnum}
    set {_uniqueStorage()._repeatedForeignEnum = newValue}
  }

  var repeatedStringPiece: [String] {
    get {return _storage._repeatedStringPiece}
    set {_uniqueStorage()._repeatedStringPiece = newValue}
  }

  var repeatedCord: [String] {
    get {return _storage._repeatedCord}
    set {_uniqueStorage()._repeatedCord = newValue}
  }

  var repeatedLazyMessage: [Proto2NofieldpresenceUnittest_TestAllTypes.NestedMessage] {
    get {return _storage._repeatedLazyMessage}
    set {_uniqueStorage()._repeatedLazyMessage = newValue}
  }

  var oneofUint32: UInt32 {
    get {
      if case .oneofUint32(let v) = _storage._oneofField {
        return v
      }
      return 0
    }
    set {
      _uniqueStorage()._oneofField = .oneofUint32(newValue)
    }
  }

  var oneofNestedMessage: Proto2NofieldpresenceUnittest_TestAllTypes.NestedMessage {
    get {
      if case .oneofNestedMessage(let v) = _storage._oneofField {
        return v
      }
      return Proto2NofieldpresenceUnittest_TestAllTypes.NestedMessage()
    }
    set {
      _uniqueStorage()._oneofField = .oneofNestedMessage(newValue)
    }
  }

  var oneofString: String {
    get {
      if case .oneofString(let v) = _storage._oneofField {
        return v
      }
      return ""
    }
    set {
      _uniqueStorage()._oneofField = .oneofString(newValue)
    }
  }

  var oneofEnum: Proto2NofieldpresenceUnittest_TestAllTypes.NestedEnum {
    get {
      if case .oneofEnum(let v) = _storage._oneofField {
        return v
      }
      return Proto2NofieldpresenceUnittest_TestAllTypes.NestedEnum.foo
    }
    set {
      _uniqueStorage()._oneofField = .oneofEnum(newValue)
    }
  }

  public var oneofField: OneOf_OneofField {
    get {return _storage._oneofField}
    set {
      _uniqueStorage()._oneofField = newValue
    }
  }

  init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: visitor)
  }

  public func _protoc_generated_isEqualTo(other: Proto2NofieldpresenceUnittest_TestAllTypes) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

struct Proto2NofieldpresenceUnittest_TestProto2Required: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var protoMessageName: String {return "TestProto2Required"}
  public var protoPackageName: String {return "proto2_nofieldpresence_unittest"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "proto2"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = Proto2NofieldpresenceUnittest_TestProto2Required
    var _proto2: ProtobufUnittest_TestRequired? = nil

    init() {}

    func decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularMessageField(fieldType: ProtobufUnittest_TestRequired.self, value: &_proto2)
      default: break
      }
    }

    func traverse(visitor: SwiftProtobuf.Visitor) throws {
      if let v = _proto2 {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _proto2 != other._proto2 {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._proto2 = _proto2
      return clone
    }
  }

  private var _storage = _StorageClass()


  var proto2: ProtobufUnittest_TestRequired {
    get {return _storage._proto2 ?? ProtobufUnittest_TestRequired()}
    set {_uniqueStorage()._proto2 = newValue}
  }
  public var hasProto2: Bool {
    return _storage._proto2 != nil
  }
  public mutating func clearProto2() {
    return _storage._proto2 = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: visitor)
  }

  public func _protoc_generated_isEqualTo(other: Proto2NofieldpresenceUnittest_TestProto2Required) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

///   Define these after TestAllTypes to make sure the compiler can handle
///   that.
struct Proto2NofieldpresenceUnittest_ForeignMessage: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var protoMessageName: String {return "ForeignMessage"}
  public var protoPackageName: String {return "proto2_nofieldpresence_unittest"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "c"),
  ]


  var c: Int32 = 0

  init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &c)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if c != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: c, fieldNumber: 1)
    }
  }

  public func _protoc_generated_isEqualTo(other: Proto2NofieldpresenceUnittest_ForeignMessage) -> Bool {
    if c != other.c {return false}
    return true
  }
}
