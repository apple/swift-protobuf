// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: unittest_swift_all_required_types.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Protocol Buffers - Google's data interchange format
// Copyright 2008 Google Inc.  All rights reserved.
// https://developers.google.com/protocol-buffers/
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/// An addition to unittest.proto

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct ProtobufUnittest_TestAllRequiredTypes {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Singular
  var requiredInt32: Int32 {
    get {return _storage._requiredInt32 ?? 0}
    set {_uniqueStorage()._requiredInt32 = newValue}
  }
  /// Returns true if `requiredInt32` has been explicitly set.
  var hasRequiredInt32: Bool {return _storage._requiredInt32 != nil}
  /// Clears the value of `requiredInt32`. Subsequent reads from it will return its default value.
  mutating func clearRequiredInt32() {_uniqueStorage()._requiredInt32 = nil}

  var requiredInt64: Int64 {
    get {return _storage._requiredInt64 ?? 0}
    set {_uniqueStorage()._requiredInt64 = newValue}
  }
  /// Returns true if `requiredInt64` has been explicitly set.
  var hasRequiredInt64: Bool {return _storage._requiredInt64 != nil}
  /// Clears the value of `requiredInt64`. Subsequent reads from it will return its default value.
  mutating func clearRequiredInt64() {_uniqueStorage()._requiredInt64 = nil}

  var requiredUint32: UInt32 {
    get {return _storage._requiredUint32 ?? 0}
    set {_uniqueStorage()._requiredUint32 = newValue}
  }
  /// Returns true if `requiredUint32` has been explicitly set.
  var hasRequiredUint32: Bool {return _storage._requiredUint32 != nil}
  /// Clears the value of `requiredUint32`. Subsequent reads from it will return its default value.
  mutating func clearRequiredUint32() {_uniqueStorage()._requiredUint32 = nil}

  var requiredUint64: UInt64 {
    get {return _storage._requiredUint64 ?? 0}
    set {_uniqueStorage()._requiredUint64 = newValue}
  }
  /// Returns true if `requiredUint64` has been explicitly set.
  var hasRequiredUint64: Bool {return _storage._requiredUint64 != nil}
  /// Clears the value of `requiredUint64`. Subsequent reads from it will return its default value.
  mutating func clearRequiredUint64() {_uniqueStorage()._requiredUint64 = nil}

  var requiredSint32: Int32 {
    get {return _storage._requiredSint32 ?? 0}
    set {_uniqueStorage()._requiredSint32 = newValue}
  }
  /// Returns true if `requiredSint32` has been explicitly set.
  var hasRequiredSint32: Bool {return _storage._requiredSint32 != nil}
  /// Clears the value of `requiredSint32`. Subsequent reads from it will return its default value.
  mutating func clearRequiredSint32() {_uniqueStorage()._requiredSint32 = nil}

  var requiredSint64: Int64 {
    get {return _storage._requiredSint64 ?? 0}
    set {_uniqueStorage()._requiredSint64 = newValue}
  }
  /// Returns true if `requiredSint64` has been explicitly set.
  var hasRequiredSint64: Bool {return _storage._requiredSint64 != nil}
  /// Clears the value of `requiredSint64`. Subsequent reads from it will return its default value.
  mutating func clearRequiredSint64() {_uniqueStorage()._requiredSint64 = nil}

  var requiredFixed32: UInt32 {
    get {return _storage._requiredFixed32 ?? 0}
    set {_uniqueStorage()._requiredFixed32 = newValue}
  }
  /// Returns true if `requiredFixed32` has been explicitly set.
  var hasRequiredFixed32: Bool {return _storage._requiredFixed32 != nil}
  /// Clears the value of `requiredFixed32`. Subsequent reads from it will return its default value.
  mutating func clearRequiredFixed32() {_uniqueStorage()._requiredFixed32 = nil}

  var requiredFixed64: UInt64 {
    get {return _storage._requiredFixed64 ?? 0}
    set {_uniqueStorage()._requiredFixed64 = newValue}
  }
  /// Returns true if `requiredFixed64` has been explicitly set.
  var hasRequiredFixed64: Bool {return _storage._requiredFixed64 != nil}
  /// Clears the value of `requiredFixed64`. Subsequent reads from it will return its default value.
  mutating func clearRequiredFixed64() {_uniqueStorage()._requiredFixed64 = nil}

  var requiredSfixed32: Int32 {
    get {return _storage._requiredSfixed32 ?? 0}
    set {_uniqueStorage()._requiredSfixed32 = newValue}
  }
  /// Returns true if `requiredSfixed32` has been explicitly set.
  var hasRequiredSfixed32: Bool {return _storage._requiredSfixed32 != nil}
  /// Clears the value of `requiredSfixed32`. Subsequent reads from it will return its default value.
  mutating func clearRequiredSfixed32() {_uniqueStorage()._requiredSfixed32 = nil}

  var requiredSfixed64: Int64 {
    get {return _storage._requiredSfixed64 ?? 0}
    set {_uniqueStorage()._requiredSfixed64 = newValue}
  }
  /// Returns true if `requiredSfixed64` has been explicitly set.
  var hasRequiredSfixed64: Bool {return _storage._requiredSfixed64 != nil}
  /// Clears the value of `requiredSfixed64`. Subsequent reads from it will return its default value.
  mutating func clearRequiredSfixed64() {_uniqueStorage()._requiredSfixed64 = nil}

  var requiredFloat: Float {
    get {return _storage._requiredFloat ?? 0}
    set {_uniqueStorage()._requiredFloat = newValue}
  }
  /// Returns true if `requiredFloat` has been explicitly set.
  var hasRequiredFloat: Bool {return _storage._requiredFloat != nil}
  /// Clears the value of `requiredFloat`. Subsequent reads from it will return its default value.
  mutating func clearRequiredFloat() {_uniqueStorage()._requiredFloat = nil}

  var requiredDouble: Double {
    get {return _storage._requiredDouble ?? 0}
    set {_uniqueStorage()._requiredDouble = newValue}
  }
  /// Returns true if `requiredDouble` has been explicitly set.
  var hasRequiredDouble: Bool {return _storage._requiredDouble != nil}
  /// Clears the value of `requiredDouble`. Subsequent reads from it will return its default value.
  mutating func clearRequiredDouble() {_uniqueStorage()._requiredDouble = nil}

  var requiredBool: Bool {
    get {return _storage._requiredBool ?? false}
    set {_uniqueStorage()._requiredBool = newValue}
  }
  /// Returns true if `requiredBool` has been explicitly set.
  var hasRequiredBool: Bool {return _storage._requiredBool != nil}
  /// Clears the value of `requiredBool`. Subsequent reads from it will return its default value.
  mutating func clearRequiredBool() {_uniqueStorage()._requiredBool = nil}

  var requiredString: String {
    get {return _storage._requiredString ?? String()}
    set {_uniqueStorage()._requiredString = newValue}
  }
  /// Returns true if `requiredString` has been explicitly set.
  var hasRequiredString: Bool {return _storage._requiredString != nil}
  /// Clears the value of `requiredString`. Subsequent reads from it will return its default value.
  mutating func clearRequiredString() {_uniqueStorage()._requiredString = nil}

  var requiredBytes: Data {
    get {return _storage._requiredBytes ?? Data()}
    set {_uniqueStorage()._requiredBytes = newValue}
  }
  /// Returns true if `requiredBytes` has been explicitly set.
  var hasRequiredBytes: Bool {return _storage._requiredBytes != nil}
  /// Clears the value of `requiredBytes`. Subsequent reads from it will return its default value.
  mutating func clearRequiredBytes() {_uniqueStorage()._requiredBytes = nil}

  var requiredGroup: ProtobufUnittest_TestAllRequiredTypes.RequiredGroup {
    get {return _storage._requiredGroup ?? ProtobufUnittest_TestAllRequiredTypes.RequiredGroup()}
    set {_uniqueStorage()._requiredGroup = newValue}
  }
  /// Returns true if `requiredGroup` has been explicitly set.
  var hasRequiredGroup: Bool {return _storage._requiredGroup != nil}
  /// Clears the value of `requiredGroup`. Subsequent reads from it will return its default value.
  mutating func clearRequiredGroup() {_uniqueStorage()._requiredGroup = nil}

  var requiredNestedMessage: ProtobufUnittest_TestAllRequiredTypes.NestedMessage {
    get {return _storage._requiredNestedMessage ?? ProtobufUnittest_TestAllRequiredTypes.NestedMessage()}
    set {_uniqueStorage()._requiredNestedMessage = newValue}
  }
  /// Returns true if `requiredNestedMessage` has been explicitly set.
  var hasRequiredNestedMessage: Bool {return _storage._requiredNestedMessage != nil}
  /// Clears the value of `requiredNestedMessage`. Subsequent reads from it will return its default value.
  mutating func clearRequiredNestedMessage() {_uniqueStorage()._requiredNestedMessage = nil}

  var requiredForeignMessage: ProtobufUnittest_ForeignMessage {
    get {return _storage._requiredForeignMessage ?? ProtobufUnittest_ForeignMessage()}
    set {_uniqueStorage()._requiredForeignMessage = newValue}
  }
  /// Returns true if `requiredForeignMessage` has been explicitly set.
  var hasRequiredForeignMessage: Bool {return _storage._requiredForeignMessage != nil}
  /// Clears the value of `requiredForeignMessage`. Subsequent reads from it will return its default value.
  mutating func clearRequiredForeignMessage() {_uniqueStorage()._requiredForeignMessage = nil}

  var requiredImportMessage: ProtobufUnittestImport_ImportMessage {
    get {return _storage._requiredImportMessage ?? ProtobufUnittestImport_ImportMessage()}
    set {_uniqueStorage()._requiredImportMessage = newValue}
  }
  /// Returns true if `requiredImportMessage` has been explicitly set.
  var hasRequiredImportMessage: Bool {return _storage._requiredImportMessage != nil}
  /// Clears the value of `requiredImportMessage`. Subsequent reads from it will return its default value.
  mutating func clearRequiredImportMessage() {_uniqueStorage()._requiredImportMessage = nil}

  var requiredNestedEnum: ProtobufUnittest_TestAllRequiredTypes.NestedEnum {
    get {return _storage._requiredNestedEnum ?? .foo}
    set {_uniqueStorage()._requiredNestedEnum = newValue}
  }
  /// Returns true if `requiredNestedEnum` has been explicitly set.
  var hasRequiredNestedEnum: Bool {return _storage._requiredNestedEnum != nil}
  /// Clears the value of `requiredNestedEnum`. Subsequent reads from it will return its default value.
  mutating func clearRequiredNestedEnum() {_uniqueStorage()._requiredNestedEnum = nil}

  var requiredForeignEnum: ProtobufUnittest_ForeignEnum {
    get {return _storage._requiredForeignEnum ?? .foreignFoo}
    set {_uniqueStorage()._requiredForeignEnum = newValue}
  }
  /// Returns true if `requiredForeignEnum` has been explicitly set.
  var hasRequiredForeignEnum: Bool {return _storage._requiredForeignEnum != nil}
  /// Clears the value of `requiredForeignEnum`. Subsequent reads from it will return its default value.
  mutating func clearRequiredForeignEnum() {_uniqueStorage()._requiredForeignEnum = nil}

  var requiredImportEnum: ProtobufUnittestImport_ImportEnum {
    get {return _storage._requiredImportEnum ?? .importFoo}
    set {_uniqueStorage()._requiredImportEnum = newValue}
  }
  /// Returns true if `requiredImportEnum` has been explicitly set.
  var hasRequiredImportEnum: Bool {return _storage._requiredImportEnum != nil}
  /// Clears the value of `requiredImportEnum`. Subsequent reads from it will return its default value.
  mutating func clearRequiredImportEnum() {_uniqueStorage()._requiredImportEnum = nil}

  var requiredStringPiece: String {
    get {return _storage._requiredStringPiece ?? String()}
    set {_uniqueStorage()._requiredStringPiece = newValue}
  }
  /// Returns true if `requiredStringPiece` has been explicitly set.
  var hasRequiredStringPiece: Bool {return _storage._requiredStringPiece != nil}
  /// Clears the value of `requiredStringPiece`. Subsequent reads from it will return its default value.
  mutating func clearRequiredStringPiece() {_uniqueStorage()._requiredStringPiece = nil}

  var requiredCord: String {
    get {return _storage._requiredCord ?? String()}
    set {_uniqueStorage()._requiredCord = newValue}
  }
  /// Returns true if `requiredCord` has been explicitly set.
  var hasRequiredCord: Bool {return _storage._requiredCord != nil}
  /// Clears the value of `requiredCord`. Subsequent reads from it will return its default value.
  mutating func clearRequiredCord() {_uniqueStorage()._requiredCord = nil}

  /// Defined in unittest_import_public.proto
  var requiredPublicImportMessage: ProtobufUnittestImport_PublicImportMessage {
    get {return _storage._requiredPublicImportMessage ?? ProtobufUnittestImport_PublicImportMessage()}
    set {_uniqueStorage()._requiredPublicImportMessage = newValue}
  }
  /// Returns true if `requiredPublicImportMessage` has been explicitly set.
  var hasRequiredPublicImportMessage: Bool {return _storage._requiredPublicImportMessage != nil}
  /// Clears the value of `requiredPublicImportMessage`. Subsequent reads from it will return its default value.
  mutating func clearRequiredPublicImportMessage() {_uniqueStorage()._requiredPublicImportMessage = nil}

  var requiredLazyMessage: ProtobufUnittest_TestAllRequiredTypes.NestedMessage {
    get {return _storage._requiredLazyMessage ?? ProtobufUnittest_TestAllRequiredTypes.NestedMessage()}
    set {_uniqueStorage()._requiredLazyMessage = newValue}
  }
  /// Returns true if `requiredLazyMessage` has been explicitly set.
  var hasRequiredLazyMessage: Bool {return _storage._requiredLazyMessage != nil}
  /// Clears the value of `requiredLazyMessage`. Subsequent reads from it will return its default value.
  mutating func clearRequiredLazyMessage() {_uniqueStorage()._requiredLazyMessage = nil}

  /// Singular with defaults
  var defaultInt32: Int32 {
    get {return _storage._defaultInt32 ?? 41}
    set {_uniqueStorage()._defaultInt32 = newValue}
  }
  /// Returns true if `defaultInt32` has been explicitly set.
  var hasDefaultInt32: Bool {return _storage._defaultInt32 != nil}
  /// Clears the value of `defaultInt32`. Subsequent reads from it will return its default value.
  mutating func clearDefaultInt32() {_uniqueStorage()._defaultInt32 = nil}

  var defaultInt64: Int64 {
    get {return _storage._defaultInt64 ?? 42}
    set {_uniqueStorage()._defaultInt64 = newValue}
  }
  /// Returns true if `defaultInt64` has been explicitly set.
  var hasDefaultInt64: Bool {return _storage._defaultInt64 != nil}
  /// Clears the value of `defaultInt64`. Subsequent reads from it will return its default value.
  mutating func clearDefaultInt64() {_uniqueStorage()._defaultInt64 = nil}

  var defaultUint32: UInt32 {
    get {return _storage._defaultUint32 ?? 43}
    set {_uniqueStorage()._defaultUint32 = newValue}
  }
  /// Returns true if `defaultUint32` has been explicitly set.
  var hasDefaultUint32: Bool {return _storage._defaultUint32 != nil}
  /// Clears the value of `defaultUint32`. Subsequent reads from it will return its default value.
  mutating func clearDefaultUint32() {_uniqueStorage()._defaultUint32 = nil}

  var defaultUint64: UInt64 {
    get {return _storage._defaultUint64 ?? 44}
    set {_uniqueStorage()._defaultUint64 = newValue}
  }
  /// Returns true if `defaultUint64` has been explicitly set.
  var hasDefaultUint64: Bool {return _storage._defaultUint64 != nil}
  /// Clears the value of `defaultUint64`. Subsequent reads from it will return its default value.
  mutating func clearDefaultUint64() {_uniqueStorage()._defaultUint64 = nil}

  var defaultSint32: Int32 {
    get {return _storage._defaultSint32 ?? -45}
    set {_uniqueStorage()._defaultSint32 = newValue}
  }
  /// Returns true if `defaultSint32` has been explicitly set.
  var hasDefaultSint32: Bool {return _storage._defaultSint32 != nil}
  /// Clears the value of `defaultSint32`. Subsequent reads from it will return its default value.
  mutating func clearDefaultSint32() {_uniqueStorage()._defaultSint32 = nil}

  var defaultSint64: Int64 {
    get {return _storage._defaultSint64 ?? 46}
    set {_uniqueStorage()._defaultSint64 = newValue}
  }
  /// Returns true if `defaultSint64` has been explicitly set.
  var hasDefaultSint64: Bool {return _storage._defaultSint64 != nil}
  /// Clears the value of `defaultSint64`. Subsequent reads from it will return its default value.
  mutating func clearDefaultSint64() {_uniqueStorage()._defaultSint64 = nil}

  var defaultFixed32: UInt32 {
    get {return _storage._defaultFixed32 ?? 47}
    set {_uniqueStorage()._defaultFixed32 = newValue}
  }
  /// Returns true if `defaultFixed32` has been explicitly set.
  var hasDefaultFixed32: Bool {return _storage._defaultFixed32 != nil}
  /// Clears the value of `defaultFixed32`. Subsequent reads from it will return its default value.
  mutating func clearDefaultFixed32() {_uniqueStorage()._defaultFixed32 = nil}

  var defaultFixed64: UInt64 {
    get {return _storage._defaultFixed64 ?? 48}
    set {_uniqueStorage()._defaultFixed64 = newValue}
  }
  /// Returns true if `defaultFixed64` has been explicitly set.
  var hasDefaultFixed64: Bool {return _storage._defaultFixed64 != nil}
  /// Clears the value of `defaultFixed64`. Subsequent reads from it will return its default value.
  mutating func clearDefaultFixed64() {_uniqueStorage()._defaultFixed64 = nil}

  var defaultSfixed32: Int32 {
    get {return _storage._defaultSfixed32 ?? 49}
    set {_uniqueStorage()._defaultSfixed32 = newValue}
  }
  /// Returns true if `defaultSfixed32` has been explicitly set.
  var hasDefaultSfixed32: Bool {return _storage._defaultSfixed32 != nil}
  /// Clears the value of `defaultSfixed32`. Subsequent reads from it will return its default value.
  mutating func clearDefaultSfixed32() {_uniqueStorage()._defaultSfixed32 = nil}

  var defaultSfixed64: Int64 {
    get {return _storage._defaultSfixed64 ?? -50}
    set {_uniqueStorage()._defaultSfixed64 = newValue}
  }
  /// Returns true if `defaultSfixed64` has been explicitly set.
  var hasDefaultSfixed64: Bool {return _storage._defaultSfixed64 != nil}
  /// Clears the value of `defaultSfixed64`. Subsequent reads from it will return its default value.
  mutating func clearDefaultSfixed64() {_uniqueStorage()._defaultSfixed64 = nil}

  var defaultFloat: Float {
    get {return _storage._defaultFloat ?? 51.5}
    set {_uniqueStorage()._defaultFloat = newValue}
  }
  /// Returns true if `defaultFloat` has been explicitly set.
  var hasDefaultFloat: Bool {return _storage._defaultFloat != nil}
  /// Clears the value of `defaultFloat`. Subsequent reads from it will return its default value.
  mutating func clearDefaultFloat() {_uniqueStorage()._defaultFloat = nil}

  var defaultDouble: Double {
    get {return _storage._defaultDouble ?? 52000}
    set {_uniqueStorage()._defaultDouble = newValue}
  }
  /// Returns true if `defaultDouble` has been explicitly set.
  var hasDefaultDouble: Bool {return _storage._defaultDouble != nil}
  /// Clears the value of `defaultDouble`. Subsequent reads from it will return its default value.
  mutating func clearDefaultDouble() {_uniqueStorage()._defaultDouble = nil}

  var defaultBool: Bool {
    get {return _storage._defaultBool ?? true}
    set {_uniqueStorage()._defaultBool = newValue}
  }
  /// Returns true if `defaultBool` has been explicitly set.
  var hasDefaultBool: Bool {return _storage._defaultBool != nil}
  /// Clears the value of `defaultBool`. Subsequent reads from it will return its default value.
  mutating func clearDefaultBool() {_uniqueStorage()._defaultBool = nil}

  var defaultString: String {
    get {return _storage._defaultString ?? "hello"}
    set {_uniqueStorage()._defaultString = newValue}
  }
  /// Returns true if `defaultString` has been explicitly set.
  var hasDefaultString: Bool {return _storage._defaultString != nil}
  /// Clears the value of `defaultString`. Subsequent reads from it will return its default value.
  mutating func clearDefaultString() {_uniqueStorage()._defaultString = nil}

  var defaultBytes: Data {
    get {return _storage._defaultBytes ?? Data([119, 111, 114, 108, 100])}
    set {_uniqueStorage()._defaultBytes = newValue}
  }
  /// Returns true if `defaultBytes` has been explicitly set.
  var hasDefaultBytes: Bool {return _storage._defaultBytes != nil}
  /// Clears the value of `defaultBytes`. Subsequent reads from it will return its default value.
  mutating func clearDefaultBytes() {_uniqueStorage()._defaultBytes = nil}

  var defaultNestedEnum: ProtobufUnittest_TestAllRequiredTypes.NestedEnum {
    get {return _storage._defaultNestedEnum ?? .bar}
    set {_uniqueStorage()._defaultNestedEnum = newValue}
  }
  /// Returns true if `defaultNestedEnum` has been explicitly set.
  var hasDefaultNestedEnum: Bool {return _storage._defaultNestedEnum != nil}
  /// Clears the value of `defaultNestedEnum`. Subsequent reads from it will return its default value.
  mutating func clearDefaultNestedEnum() {_uniqueStorage()._defaultNestedEnum = nil}

  var defaultForeignEnum: ProtobufUnittest_ForeignEnum {
    get {return _storage._defaultForeignEnum ?? .foreignBar}
    set {_uniqueStorage()._defaultForeignEnum = newValue}
  }
  /// Returns true if `defaultForeignEnum` has been explicitly set.
  var hasDefaultForeignEnum: Bool {return _storage._defaultForeignEnum != nil}
  /// Clears the value of `defaultForeignEnum`. Subsequent reads from it will return its default value.
  mutating func clearDefaultForeignEnum() {_uniqueStorage()._defaultForeignEnum = nil}

  var defaultImportEnum: ProtobufUnittestImport_ImportEnum {
    get {return _storage._defaultImportEnum ?? .importBar}
    set {_uniqueStorage()._defaultImportEnum = newValue}
  }
  /// Returns true if `defaultImportEnum` has been explicitly set.
  var hasDefaultImportEnum: Bool {return _storage._defaultImportEnum != nil}
  /// Clears the value of `defaultImportEnum`. Subsequent reads from it will return its default value.
  mutating func clearDefaultImportEnum() {_uniqueStorage()._defaultImportEnum = nil}

  var defaultStringPiece: String {
    get {return _storage._defaultStringPiece ?? "abc"}
    set {_uniqueStorage()._defaultStringPiece = newValue}
  }
  /// Returns true if `defaultStringPiece` has been explicitly set.
  var hasDefaultStringPiece: Bool {return _storage._defaultStringPiece != nil}
  /// Clears the value of `defaultStringPiece`. Subsequent reads from it will return its default value.
  mutating func clearDefaultStringPiece() {_uniqueStorage()._defaultStringPiece = nil}

  var defaultCord: String {
    get {return _storage._defaultCord ?? "123"}
    set {_uniqueStorage()._defaultCord = newValue}
  }
  /// Returns true if `defaultCord` has been explicitly set.
  var hasDefaultCord: Bool {return _storage._defaultCord != nil}
  /// Clears the value of `defaultCord`. Subsequent reads from it will return its default value.
  mutating func clearDefaultCord() {_uniqueStorage()._defaultCord = nil}

  /// For oneof test
  var oneofField: OneOf_OneofField? {
    get {return _storage._oneofField}
    set {_uniqueStorage()._oneofField = newValue}
  }

  var oneofUint32: UInt32 {
    get {
      if case .oneofUint32(let v)? = _storage._oneofField {return v}
      return 0
    }
    set {_uniqueStorage()._oneofField = .oneofUint32(newValue)}
  }

  var oneofNestedMessage: ProtobufUnittest_TestAllRequiredTypes.NestedMessage {
    get {
      if case .oneofNestedMessage(let v)? = _storage._oneofField {return v}
      return ProtobufUnittest_TestAllRequiredTypes.NestedMessage()
    }
    set {_uniqueStorage()._oneofField = .oneofNestedMessage(newValue)}
  }

  var oneofString: String {
    get {
      if case .oneofString(let v)? = _storage._oneofField {return v}
      return String()
    }
    set {_uniqueStorage()._oneofField = .oneofString(newValue)}
  }

  var oneofBytes: Data {
    get {
      if case .oneofBytes(let v)? = _storage._oneofField {return v}
      return Data()
    }
    set {_uniqueStorage()._oneofField = .oneofBytes(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  /// For oneof test
  enum OneOf_OneofField: Equatable {
    case oneofUint32(UInt32)
    case oneofNestedMessage(ProtobufUnittest_TestAllRequiredTypes.NestedMessage)
    case oneofString(String)
    case oneofBytes(Data)

    fileprivate var isInitialized: Bool {
      guard case .oneofNestedMessage(let v) = self else {return true}
      return v.isInitialized
    }

  #if !swift(>=4.1)
    static func ==(lhs: ProtobufUnittest_TestAllRequiredTypes.OneOf_OneofField, rhs: ProtobufUnittest_TestAllRequiredTypes.OneOf_OneofField) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.oneofUint32, .oneofUint32): return {
        guard case .oneofUint32(let l) = lhs, case .oneofUint32(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.oneofNestedMessage, .oneofNestedMessage): return {
        guard case .oneofNestedMessage(let l) = lhs, case .oneofNestedMessage(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.oneofString, .oneofString): return {
        guard case .oneofString(let l) = lhs, case .oneofString(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.oneofBytes, .oneofBytes): return {
        guard case .oneofBytes(let l) = lhs, case .oneofBytes(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  enum NestedEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case foo // = 1
    case bar // = 2
    case baz // = 3

    /// Intentionally negative.
    case neg // = -1

    init() {
      self = .foo
    }

    init?(rawValue: Int) {
      switch rawValue {
      case -1: self = .neg
      case 1: self = .foo
      case 2: self = .bar
      case 3: self = .baz
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .neg: return -1
      case .foo: return 1
      case .bar: return 2
      case .baz: return 3
      }
    }

  }

  struct NestedMessage {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The field name "b" fails to compile in proto1 because it conflicts with
    /// a local variable named "b" in one of the generated methods.  Doh.
    /// This file needs to compile in proto1 to test backwards-compatibility.
    var bb: Int32 {
      get {return _bb ?? 0}
      set {_bb = newValue}
    }
    /// Returns true if `bb` has been explicitly set.
    var hasBb: Bool {return self._bb != nil}
    /// Clears the value of `bb`. Subsequent reads from it will return its default value.
    mutating func clearBb() {self._bb = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _bb: Int32? = nil
  }

  struct RequiredGroup {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var a: Int32 {
      get {return _a ?? 0}
      set {_a = newValue}
    }
    /// Returns true if `a` has been explicitly set.
    var hasA: Bool {return self._a != nil}
    /// Clears the value of `a`. Subsequent reads from it will return its default value.
    mutating func clearA() {self._a = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _a: Int32? = nil
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension ProtobufUnittest_TestAllRequiredTypes.NestedEnum: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct ProtobufUnittest_TestSomeRequiredTypes {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Singular
  var requiredInt32: Int32 {
    get {return _requiredInt32 ?? 0}
    set {_requiredInt32 = newValue}
  }
  /// Returns true if `requiredInt32` has been explicitly set.
  var hasRequiredInt32: Bool {return self._requiredInt32 != nil}
  /// Clears the value of `requiredInt32`. Subsequent reads from it will return its default value.
  mutating func clearRequiredInt32() {self._requiredInt32 = nil}

  var requiredFloat: Float {
    get {return _requiredFloat ?? 0}
    set {_requiredFloat = newValue}
  }
  /// Returns true if `requiredFloat` has been explicitly set.
  var hasRequiredFloat: Bool {return self._requiredFloat != nil}
  /// Clears the value of `requiredFloat`. Subsequent reads from it will return its default value.
  mutating func clearRequiredFloat() {self._requiredFloat = nil}

  var requiredBool: Bool {
    get {return _requiredBool ?? false}
    set {_requiredBool = newValue}
  }
  /// Returns true if `requiredBool` has been explicitly set.
  var hasRequiredBool: Bool {return self._requiredBool != nil}
  /// Clears the value of `requiredBool`. Subsequent reads from it will return its default value.
  mutating func clearRequiredBool() {self._requiredBool = nil}

  var requiredString: String {
    get {return _requiredString ?? String()}
    set {_requiredString = newValue}
  }
  /// Returns true if `requiredString` has been explicitly set.
  var hasRequiredString: Bool {return self._requiredString != nil}
  /// Clears the value of `requiredString`. Subsequent reads from it will return its default value.
  mutating func clearRequiredString() {self._requiredString = nil}

  var requiredBytes: Data {
    get {return _requiredBytes ?? Data()}
    set {_requiredBytes = newValue}
  }
  /// Returns true if `requiredBytes` has been explicitly set.
  var hasRequiredBytes: Bool {return self._requiredBytes != nil}
  /// Clears the value of `requiredBytes`. Subsequent reads from it will return its default value.
  mutating func clearRequiredBytes() {self._requiredBytes = nil}

  var requiredNestedEnum: ProtobufUnittest_TestSomeRequiredTypes.NestedEnum {
    get {return _requiredNestedEnum ?? .foo}
    set {_requiredNestedEnum = newValue}
  }
  /// Returns true if `requiredNestedEnum` has been explicitly set.
  var hasRequiredNestedEnum: Bool {return self._requiredNestedEnum != nil}
  /// Clears the value of `requiredNestedEnum`. Subsequent reads from it will return its default value.
  mutating func clearRequiredNestedEnum() {self._requiredNestedEnum = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum NestedEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case foo // = 1

    init() {
      self = .foo
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 1: self = .foo
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .foo: return 1
      }
    }

  }

  init() {}

  fileprivate var _requiredInt32: Int32? = nil
  fileprivate var _requiredFloat: Float? = nil
  fileprivate var _requiredBool: Bool? = nil
  fileprivate var _requiredString: String? = nil
  fileprivate var _requiredBytes: Data? = nil
  fileprivate var _requiredNestedEnum: ProtobufUnittest_TestSomeRequiredTypes.NestedEnum? = nil
}

#if swift(>=4.2)

extension ProtobufUnittest_TestSomeRequiredTypes.NestedEnum: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "protobuf_unittest"

extension ProtobufUnittest_TestAllRequiredTypes: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TestAllRequiredTypes"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "required_int32"),
    2: .standard(proto: "required_int64"),
    3: .standard(proto: "required_uint32"),
    4: .standard(proto: "required_uint64"),
    5: .standard(proto: "required_sint32"),
    6: .standard(proto: "required_sint64"),
    7: .standard(proto: "required_fixed32"),
    8: .standard(proto: "required_fixed64"),
    9: .standard(proto: "required_sfixed32"),
    10: .standard(proto: "required_sfixed64"),
    11: .standard(proto: "required_float"),
    12: .standard(proto: "required_double"),
    13: .standard(proto: "required_bool"),
    14: .standard(proto: "required_string"),
    15: .standard(proto: "required_bytes"),
    16: .unique(proto: "RequiredGroup", json: "requiredgroup"),
    18: .standard(proto: "required_nested_message"),
    19: .standard(proto: "required_foreign_message"),
    20: .standard(proto: "required_import_message"),
    21: .standard(proto: "required_nested_enum"),
    22: .standard(proto: "required_foreign_enum"),
    23: .standard(proto: "required_import_enum"),
    24: .standard(proto: "required_string_piece"),
    25: .standard(proto: "required_cord"),
    26: .standard(proto: "required_public_import_message"),
    27: .standard(proto: "required_lazy_message"),
    61: .standard(proto: "default_int32"),
    62: .standard(proto: "default_int64"),
    63: .standard(proto: "default_uint32"),
    64: .standard(proto: "default_uint64"),
    65: .standard(proto: "default_sint32"),
    66: .standard(proto: "default_sint64"),
    67: .standard(proto: "default_fixed32"),
    68: .standard(proto: "default_fixed64"),
    69: .standard(proto: "default_sfixed32"),
    70: .standard(proto: "default_sfixed64"),
    71: .standard(proto: "default_float"),
    72: .standard(proto: "default_double"),
    73: .standard(proto: "default_bool"),
    74: .standard(proto: "default_string"),
    75: .standard(proto: "default_bytes"),
    81: .standard(proto: "default_nested_enum"),
    82: .standard(proto: "default_foreign_enum"),
    83: .standard(proto: "default_import_enum"),
    84: .standard(proto: "default_string_piece"),
    85: .standard(proto: "default_cord"),
    111: .standard(proto: "oneof_uint32"),
    112: .standard(proto: "oneof_nested_message"),
    113: .standard(proto: "oneof_string"),
    114: .standard(proto: "oneof_bytes"),
  ]

  fileprivate class _StorageClass {
    var _requiredInt32: Int32? = nil
    var _requiredInt64: Int64? = nil
    var _requiredUint32: UInt32? = nil
    var _requiredUint64: UInt64? = nil
    var _requiredSint32: Int32? = nil
    var _requiredSint64: Int64? = nil
    var _requiredFixed32: UInt32? = nil
    var _requiredFixed64: UInt64? = nil
    var _requiredSfixed32: Int32? = nil
    var _requiredSfixed64: Int64? = nil
    var _requiredFloat: Float? = nil
    var _requiredDouble: Double? = nil
    var _requiredBool: Bool? = nil
    var _requiredString: String? = nil
    var _requiredBytes: Data? = nil
    var _requiredGroup: ProtobufUnittest_TestAllRequiredTypes.RequiredGroup? = nil
    var _requiredNestedMessage: ProtobufUnittest_TestAllRequiredTypes.NestedMessage? = nil
    var _requiredForeignMessage: ProtobufUnittest_ForeignMessage? = nil
    var _requiredImportMessage: ProtobufUnittestImport_ImportMessage? = nil
    var _requiredNestedEnum: ProtobufUnittest_TestAllRequiredTypes.NestedEnum? = nil
    var _requiredForeignEnum: ProtobufUnittest_ForeignEnum? = nil
    var _requiredImportEnum: ProtobufUnittestImport_ImportEnum? = nil
    var _requiredStringPiece: String? = nil
    var _requiredCord: String? = nil
    var _requiredPublicImportMessage: ProtobufUnittestImport_PublicImportMessage? = nil
    var _requiredLazyMessage: ProtobufUnittest_TestAllRequiredTypes.NestedMessage? = nil
    var _defaultInt32: Int32? = nil
    var _defaultInt64: Int64? = nil
    var _defaultUint32: UInt32? = nil
    var _defaultUint64: UInt64? = nil
    var _defaultSint32: Int32? = nil
    var _defaultSint64: Int64? = nil
    var _defaultFixed32: UInt32? = nil
    var _defaultFixed64: UInt64? = nil
    var _defaultSfixed32: Int32? = nil
    var _defaultSfixed64: Int64? = nil
    var _defaultFloat: Float? = nil
    var _defaultDouble: Double? = nil
    var _defaultBool: Bool? = nil
    var _defaultString: String? = nil
    var _defaultBytes: Data? = nil
    var _defaultNestedEnum: ProtobufUnittest_TestAllRequiredTypes.NestedEnum? = nil
    var _defaultForeignEnum: ProtobufUnittest_ForeignEnum? = nil
    var _defaultImportEnum: ProtobufUnittestImport_ImportEnum? = nil
    var _defaultStringPiece: String? = nil
    var _defaultCord: String? = nil
    var _oneofField: ProtobufUnittest_TestAllRequiredTypes.OneOf_OneofField?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _requiredInt32 = source._requiredInt32
      _requiredInt64 = source._requiredInt64
      _requiredUint32 = source._requiredUint32
      _requiredUint64 = source._requiredUint64
      _requiredSint32 = source._requiredSint32
      _requiredSint64 = source._requiredSint64
      _requiredFixed32 = source._requiredFixed32
      _requiredFixed64 = source._requiredFixed64
      _requiredSfixed32 = source._requiredSfixed32
      _requiredSfixed64 = source._requiredSfixed64
      _requiredFloat = source._requiredFloat
      _requiredDouble = source._requiredDouble
      _requiredBool = source._requiredBool
      _requiredString = source._requiredString
      _requiredBytes = source._requiredBytes
      _requiredGroup = source._requiredGroup
      _requiredNestedMessage = source._requiredNestedMessage
      _requiredForeignMessage = source._requiredForeignMessage
      _requiredImportMessage = source._requiredImportMessage
      _requiredNestedEnum = source._requiredNestedEnum
      _requiredForeignEnum = source._requiredForeignEnum
      _requiredImportEnum = source._requiredImportEnum
      _requiredStringPiece = source._requiredStringPiece
      _requiredCord = source._requiredCord
      _requiredPublicImportMessage = source._requiredPublicImportMessage
      _requiredLazyMessage = source._requiredLazyMessage
      _defaultInt32 = source._defaultInt32
      _defaultInt64 = source._defaultInt64
      _defaultUint32 = source._defaultUint32
      _defaultUint64 = source._defaultUint64
      _defaultSint32 = source._defaultSint32
      _defaultSint64 = source._defaultSint64
      _defaultFixed32 = source._defaultFixed32
      _defaultFixed64 = source._defaultFixed64
      _defaultSfixed32 = source._defaultSfixed32
      _defaultSfixed64 = source._defaultSfixed64
      _defaultFloat = source._defaultFloat
      _defaultDouble = source._defaultDouble
      _defaultBool = source._defaultBool
      _defaultString = source._defaultString
      _defaultBytes = source._defaultBytes
      _defaultNestedEnum = source._defaultNestedEnum
      _defaultForeignEnum = source._defaultForeignEnum
      _defaultImportEnum = source._defaultImportEnum
      _defaultStringPiece = source._defaultStringPiece
      _defaultCord = source._defaultCord
      _oneofField = source._oneofField
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._requiredInt32 == nil {return false}
      if _storage._requiredInt64 == nil {return false}
      if _storage._requiredUint32 == nil {return false}
      if _storage._requiredUint64 == nil {return false}
      if _storage._requiredSint32 == nil {return false}
      if _storage._requiredSint64 == nil {return false}
      if _storage._requiredFixed32 == nil {return false}
      if _storage._requiredFixed64 == nil {return false}
      if _storage._requiredSfixed32 == nil {return false}
      if _storage._requiredSfixed64 == nil {return false}
      if _storage._requiredFloat == nil {return false}
      if _storage._requiredDouble == nil {return false}
      if _storage._requiredBool == nil {return false}
      if _storage._requiredString == nil {return false}
      if _storage._requiredBytes == nil {return false}
      if _storage._requiredGroup == nil {return false}
      if _storage._requiredNestedMessage == nil {return false}
      if _storage._requiredForeignMessage == nil {return false}
      if _storage._requiredImportMessage == nil {return false}
      if _storage._requiredNestedEnum == nil {return false}
      if _storage._requiredForeignEnum == nil {return false}
      if _storage._requiredImportEnum == nil {return false}
      if _storage._requiredStringPiece == nil {return false}
      if _storage._requiredCord == nil {return false}
      if _storage._requiredPublicImportMessage == nil {return false}
      if _storage._requiredLazyMessage == nil {return false}
      if _storage._defaultInt32 == nil {return false}
      if _storage._defaultInt64 == nil {return false}
      if _storage._defaultUint32 == nil {return false}
      if _storage._defaultUint64 == nil {return false}
      if _storage._defaultSint32 == nil {return false}
      if _storage._defaultSint64 == nil {return false}
      if _storage._defaultFixed32 == nil {return false}
      if _storage._defaultFixed64 == nil {return false}
      if _storage._defaultSfixed32 == nil {return false}
      if _storage._defaultSfixed64 == nil {return false}
      if _storage._defaultFloat == nil {return false}
      if _storage._defaultDouble == nil {return false}
      if _storage._defaultBool == nil {return false}
      if _storage._defaultString == nil {return false}
      if _storage._defaultBytes == nil {return false}
      if _storage._defaultNestedEnum == nil {return false}
      if _storage._defaultForeignEnum == nil {return false}
      if _storage._defaultImportEnum == nil {return false}
      if _storage._defaultStringPiece == nil {return false}
      if _storage._defaultCord == nil {return false}
      if let v = _storage._requiredGroup, !v.isInitialized {return false}
      if let v = _storage._requiredNestedMessage, !v.isInitialized {return false}
      if let v = _storage._requiredLazyMessage, !v.isInitialized {return false}
      if let v = _storage._oneofField, !v.isInitialized {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularInt32Field(value: &_storage._requiredInt32) }()
        case 2: try { try decoder.decodeSingularInt64Field(value: &_storage._requiredInt64) }()
        case 3: try { try decoder.decodeSingularUInt32Field(value: &_storage._requiredUint32) }()
        case 4: try { try decoder.decodeSingularUInt64Field(value: &_storage._requiredUint64) }()
        case 5: try { try decoder.decodeSingularSInt32Field(value: &_storage._requiredSint32) }()
        case 6: try { try decoder.decodeSingularSInt64Field(value: &_storage._requiredSint64) }()
        case 7: try { try decoder.decodeSingularFixed32Field(value: &_storage._requiredFixed32) }()
        case 8: try { try decoder.decodeSingularFixed64Field(value: &_storage._requiredFixed64) }()
        case 9: try { try decoder.decodeSingularSFixed32Field(value: &_storage._requiredSfixed32) }()
        case 10: try { try decoder.decodeSingularSFixed64Field(value: &_storage._requiredSfixed64) }()
        case 11: try { try decoder.decodeSingularFloatField(value: &_storage._requiredFloat) }()
        case 12: try { try decoder.decodeSingularDoubleField(value: &_storage._requiredDouble) }()
        case 13: try { try decoder.decodeSingularBoolField(value: &_storage._requiredBool) }()
        case 14: try { try decoder.decodeSingularStringField(value: &_storage._requiredString) }()
        case 15: try { try decoder.decodeSingularBytesField(value: &_storage._requiredBytes) }()
        case 16: try { try decoder.decodeSingularGroupField(value: &_storage._requiredGroup) }()
        case 18: try { try decoder.decodeSingularMessageField(value: &_storage._requiredNestedMessage) }()
        case 19: try { try decoder.decodeSingularMessageField(value: &_storage._requiredForeignMessage) }()
        case 20: try { try decoder.decodeSingularMessageField(value: &_storage._requiredImportMessage) }()
        case 21: try { try decoder.decodeSingularEnumField(value: &_storage._requiredNestedEnum) }()
        case 22: try { try decoder.decodeSingularEnumField(value: &_storage._requiredForeignEnum) }()
        case 23: try { try decoder.decodeSingularEnumField(value: &_storage._requiredImportEnum) }()
        case 24: try { try decoder.decodeSingularStringField(value: &_storage._requiredStringPiece) }()
        case 25: try { try decoder.decodeSingularStringField(value: &_storage._requiredCord) }()
        case 26: try { try decoder.decodeSingularMessageField(value: &_storage._requiredPublicImportMessage) }()
        case 27: try { try decoder.decodeSingularMessageField(value: &_storage._requiredLazyMessage) }()
        case 61: try { try decoder.decodeSingularInt32Field(value: &_storage._defaultInt32) }()
        case 62: try { try decoder.decodeSingularInt64Field(value: &_storage._defaultInt64) }()
        case 63: try { try decoder.decodeSingularUInt32Field(value: &_storage._defaultUint32) }()
        case 64: try { try decoder.decodeSingularUInt64Field(value: &_storage._defaultUint64) }()
        case 65: try { try decoder.decodeSingularSInt32Field(value: &_storage._defaultSint32) }()
        case 66: try { try decoder.decodeSingularSInt64Field(value: &_storage._defaultSint64) }()
        case 67: try { try decoder.decodeSingularFixed32Field(value: &_storage._defaultFixed32) }()
        case 68: try { try decoder.decodeSingularFixed64Field(value: &_storage._defaultFixed64) }()
        case 69: try { try decoder.decodeSingularSFixed32Field(value: &_storage._defaultSfixed32) }()
        case 70: try { try decoder.decodeSingularSFixed64Field(value: &_storage._defaultSfixed64) }()
        case 71: try { try decoder.decodeSingularFloatField(value: &_storage._defaultFloat) }()
        case 72: try { try decoder.decodeSingularDoubleField(value: &_storage._defaultDouble) }()
        case 73: try { try decoder.decodeSingularBoolField(value: &_storage._defaultBool) }()
        case 74: try { try decoder.decodeSingularStringField(value: &_storage._defaultString) }()
        case 75: try { try decoder.decodeSingularBytesField(value: &_storage._defaultBytes) }()
        case 81: try { try decoder.decodeSingularEnumField(value: &_storage._defaultNestedEnum) }()
        case 82: try { try decoder.decodeSingularEnumField(value: &_storage._defaultForeignEnum) }()
        case 83: try { try decoder.decodeSingularEnumField(value: &_storage._defaultImportEnum) }()
        case 84: try { try decoder.decodeSingularStringField(value: &_storage._defaultStringPiece) }()
        case 85: try { try decoder.decodeSingularStringField(value: &_storage._defaultCord) }()
        case 111: try {
          var v: UInt32?
          try decoder.decodeSingularUInt32Field(value: &v)
          if let v = v {
            if _storage._oneofField != nil {try decoder.handleConflictingOneOf()}
            _storage._oneofField = .oneofUint32(v)
          }
        }()
        case 112: try {
          var v: ProtobufUnittest_TestAllRequiredTypes.NestedMessage?
          var hadOneofValue = false
          if let current = _storage._oneofField {
            hadOneofValue = true
            if case .oneofNestedMessage(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._oneofField = .oneofNestedMessage(v)
          }
        }()
        case 113: try {
          var v: String?
          try decoder.decodeSingularStringField(value: &v)
          if let v = v {
            if _storage._oneofField != nil {try decoder.handleConflictingOneOf()}
            _storage._oneofField = .oneofString(v)
          }
        }()
        case 114: try {
          var v: Data?
          try decoder.decodeSingularBytesField(value: &v)
          if let v = v {
            if _storage._oneofField != nil {try decoder.handleConflictingOneOf()}
            _storage._oneofField = .oneofBytes(v)
          }
        }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._requiredInt32 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      if let v = _storage._requiredInt64 {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 2)
      }
      if let v = _storage._requiredUint32 {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
      }
      if let v = _storage._requiredUint64 {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 4)
      }
      if let v = _storage._requiredSint32 {
        try visitor.visitSingularSInt32Field(value: v, fieldNumber: 5)
      }
      if let v = _storage._requiredSint64 {
        try visitor.visitSingularSInt64Field(value: v, fieldNumber: 6)
      }
      if let v = _storage._requiredFixed32 {
        try visitor.visitSingularFixed32Field(value: v, fieldNumber: 7)
      }
      if let v = _storage._requiredFixed64 {
        try visitor.visitSingularFixed64Field(value: v, fieldNumber: 8)
      }
      if let v = _storage._requiredSfixed32 {
        try visitor.visitSingularSFixed32Field(value: v, fieldNumber: 9)
      }
      if let v = _storage._requiredSfixed64 {
        try visitor.visitSingularSFixed64Field(value: v, fieldNumber: 10)
      }
      if let v = _storage._requiredFloat {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 11)
      }
      if let v = _storage._requiredDouble {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 12)
      }
      if let v = _storage._requiredBool {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 13)
      }
      if let v = _storage._requiredString {
        try visitor.visitSingularStringField(value: v, fieldNumber: 14)
      }
      if let v = _storage._requiredBytes {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 15)
      }
      if let v = _storage._requiredGroup {
        try visitor.visitSingularGroupField(value: v, fieldNumber: 16)
      }
      if let v = _storage._requiredNestedMessage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
      }
      if let v = _storage._requiredForeignMessage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
      }
      if let v = _storage._requiredImportMessage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
      }
      if let v = _storage._requiredNestedEnum {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 21)
      }
      if let v = _storage._requiredForeignEnum {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 22)
      }
      if let v = _storage._requiredImportEnum {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 23)
      }
      if let v = _storage._requiredStringPiece {
        try visitor.visitSingularStringField(value: v, fieldNumber: 24)
      }
      if let v = _storage._requiredCord {
        try visitor.visitSingularStringField(value: v, fieldNumber: 25)
      }
      if let v = _storage._requiredPublicImportMessage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 26)
      }
      if let v = _storage._requiredLazyMessage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 27)
      }
      if let v = _storage._defaultInt32 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 61)
      }
      if let v = _storage._defaultInt64 {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 62)
      }
      if let v = _storage._defaultUint32 {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 63)
      }
      if let v = _storage._defaultUint64 {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 64)
      }
      if let v = _storage._defaultSint32 {
        try visitor.visitSingularSInt32Field(value: v, fieldNumber: 65)
      }
      if let v = _storage._defaultSint64 {
        try visitor.visitSingularSInt64Field(value: v, fieldNumber: 66)
      }
      if let v = _storage._defaultFixed32 {
        try visitor.visitSingularFixed32Field(value: v, fieldNumber: 67)
      }
      if let v = _storage._defaultFixed64 {
        try visitor.visitSingularFixed64Field(value: v, fieldNumber: 68)
      }
      if let v = _storage._defaultSfixed32 {
        try visitor.visitSingularSFixed32Field(value: v, fieldNumber: 69)
      }
      if let v = _storage._defaultSfixed64 {
        try visitor.visitSingularSFixed64Field(value: v, fieldNumber: 70)
      }
      if let v = _storage._defaultFloat {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 71)
      }
      if let v = _storage._defaultDouble {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 72)
      }
      if let v = _storage._defaultBool {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 73)
      }
      if let v = _storage._defaultString {
        try visitor.visitSingularStringField(value: v, fieldNumber: 74)
      }
      if let v = _storage._defaultBytes {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 75)
      }
      if let v = _storage._defaultNestedEnum {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 81)
      }
      if let v = _storage._defaultForeignEnum {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 82)
      }
      if let v = _storage._defaultImportEnum {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 83)
      }
      if let v = _storage._defaultStringPiece {
        try visitor.visitSingularStringField(value: v, fieldNumber: 84)
      }
      if let v = _storage._defaultCord {
        try visitor.visitSingularStringField(value: v, fieldNumber: 85)
      }
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch _storage._oneofField {
      case .oneofUint32?: try {
        guard case .oneofUint32(let v)? = _storage._oneofField else { preconditionFailure() }
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 111)
      }()
      case .oneofNestedMessage?: try {
        guard case .oneofNestedMessage(let v)? = _storage._oneofField else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 112)
      }()
      case .oneofString?: try {
        guard case .oneofString(let v)? = _storage._oneofField else { preconditionFailure() }
        try visitor.visitSingularStringField(value: v, fieldNumber: 113)
      }()
      case .oneofBytes?: try {
        guard case .oneofBytes(let v)? = _storage._oneofField else { preconditionFailure() }
        try visitor.visitSingularBytesField(value: v, fieldNumber: 114)
      }()
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittest_TestAllRequiredTypes, rhs: ProtobufUnittest_TestAllRequiredTypes) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._requiredInt32 != rhs_storage._requiredInt32 {return false}
        if _storage._requiredInt64 != rhs_storage._requiredInt64 {return false}
        if _storage._requiredUint32 != rhs_storage._requiredUint32 {return false}
        if _storage._requiredUint64 != rhs_storage._requiredUint64 {return false}
        if _storage._requiredSint32 != rhs_storage._requiredSint32 {return false}
        if _storage._requiredSint64 != rhs_storage._requiredSint64 {return false}
        if _storage._requiredFixed32 != rhs_storage._requiredFixed32 {return false}
        if _storage._requiredFixed64 != rhs_storage._requiredFixed64 {return false}
        if _storage._requiredSfixed32 != rhs_storage._requiredSfixed32 {return false}
        if _storage._requiredSfixed64 != rhs_storage._requiredSfixed64 {return false}
        if _storage._requiredFloat != rhs_storage._requiredFloat {return false}
        if _storage._requiredDouble != rhs_storage._requiredDouble {return false}
        if _storage._requiredBool != rhs_storage._requiredBool {return false}
        if _storage._requiredString != rhs_storage._requiredString {return false}
        if _storage._requiredBytes != rhs_storage._requiredBytes {return false}
        if _storage._requiredGroup != rhs_storage._requiredGroup {return false}
        if _storage._requiredNestedMessage != rhs_storage._requiredNestedMessage {return false}
        if _storage._requiredForeignMessage != rhs_storage._requiredForeignMessage {return false}
        if _storage._requiredImportMessage != rhs_storage._requiredImportMessage {return false}
        if _storage._requiredNestedEnum != rhs_storage._requiredNestedEnum {return false}
        if _storage._requiredForeignEnum != rhs_storage._requiredForeignEnum {return false}
        if _storage._requiredImportEnum != rhs_storage._requiredImportEnum {return false}
        if _storage._requiredStringPiece != rhs_storage._requiredStringPiece {return false}
        if _storage._requiredCord != rhs_storage._requiredCord {return false}
        if _storage._requiredPublicImportMessage != rhs_storage._requiredPublicImportMessage {return false}
        if _storage._requiredLazyMessage != rhs_storage._requiredLazyMessage {return false}
        if _storage._defaultInt32 != rhs_storage._defaultInt32 {return false}
        if _storage._defaultInt64 != rhs_storage._defaultInt64 {return false}
        if _storage._defaultUint32 != rhs_storage._defaultUint32 {return false}
        if _storage._defaultUint64 != rhs_storage._defaultUint64 {return false}
        if _storage._defaultSint32 != rhs_storage._defaultSint32 {return false}
        if _storage._defaultSint64 != rhs_storage._defaultSint64 {return false}
        if _storage._defaultFixed32 != rhs_storage._defaultFixed32 {return false}
        if _storage._defaultFixed64 != rhs_storage._defaultFixed64 {return false}
        if _storage._defaultSfixed32 != rhs_storage._defaultSfixed32 {return false}
        if _storage._defaultSfixed64 != rhs_storage._defaultSfixed64 {return false}
        if _storage._defaultFloat != rhs_storage._defaultFloat {return false}
        if _storage._defaultDouble != rhs_storage._defaultDouble {return false}
        if _storage._defaultBool != rhs_storage._defaultBool {return false}
        if _storage._defaultString != rhs_storage._defaultString {return false}
        if _storage._defaultBytes != rhs_storage._defaultBytes {return false}
        if _storage._defaultNestedEnum != rhs_storage._defaultNestedEnum {return false}
        if _storage._defaultForeignEnum != rhs_storage._defaultForeignEnum {return false}
        if _storage._defaultImportEnum != rhs_storage._defaultImportEnum {return false}
        if _storage._defaultStringPiece != rhs_storage._defaultStringPiece {return false}
        if _storage._defaultCord != rhs_storage._defaultCord {return false}
        if _storage._oneofField != rhs_storage._oneofField {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestAllRequiredTypes.NestedEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    -1: .same(proto: "NEG"),
    1: .same(proto: "FOO"),
    2: .same(proto: "BAR"),
    3: .same(proto: "BAZ"),
  ]
}

extension ProtobufUnittest_TestAllRequiredTypes.NestedMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittest_TestAllRequiredTypes.protoMessageName + ".NestedMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bb"),
  ]

  public var isInitialized: Bool {
    if self._bb == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self._bb) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._bb {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittest_TestAllRequiredTypes.NestedMessage, rhs: ProtobufUnittest_TestAllRequiredTypes.NestedMessage) -> Bool {
    if lhs._bb != rhs._bb {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestAllRequiredTypes.RequiredGroup: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittest_TestAllRequiredTypes.protoMessageName + ".RequiredGroup"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    17: .same(proto: "a"),
  ]

  public var isInitialized: Bool {
    if self._a == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 17: try { try decoder.decodeSingularInt32Field(value: &self._a) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._a {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 17)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittest_TestAllRequiredTypes.RequiredGroup, rhs: ProtobufUnittest_TestAllRequiredTypes.RequiredGroup) -> Bool {
    if lhs._a != rhs._a {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestSomeRequiredTypes: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TestSomeRequiredTypes"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "required_int32"),
    2: .standard(proto: "required_float"),
    3: .standard(proto: "required_bool"),
    4: .standard(proto: "required_string"),
    5: .standard(proto: "required_bytes"),
    6: .standard(proto: "required_nested_enum"),
  ]

  public var isInitialized: Bool {
    if self._requiredInt32 == nil {return false}
    if self._requiredFloat == nil {return false}
    if self._requiredBool == nil {return false}
    if self._requiredString == nil {return false}
    if self._requiredBytes == nil {return false}
    if self._requiredNestedEnum == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self._requiredInt32) }()
      case 2: try { try decoder.decodeSingularFloatField(value: &self._requiredFloat) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self._requiredBool) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._requiredString) }()
      case 5: try { try decoder.decodeSingularBytesField(value: &self._requiredBytes) }()
      case 6: try { try decoder.decodeSingularEnumField(value: &self._requiredNestedEnum) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._requiredInt32 {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._requiredFloat {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 2)
    }
    if let v = self._requiredBool {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    }
    if let v = self._requiredString {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    }
    if let v = self._requiredBytes {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 5)
    }
    if let v = self._requiredNestedEnum {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittest_TestSomeRequiredTypes, rhs: ProtobufUnittest_TestSomeRequiredTypes) -> Bool {
    if lhs._requiredInt32 != rhs._requiredInt32 {return false}
    if lhs._requiredFloat != rhs._requiredFloat {return false}
    if lhs._requiredBool != rhs._requiredBool {return false}
    if lhs._requiredString != rhs._requiredString {return false}
    if lhs._requiredBytes != rhs._requiredBytes {return false}
    if lhs._requiredNestedEnum != rhs._requiredNestedEnum {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestSomeRequiredTypes.NestedEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "FOO"),
  ]
}
