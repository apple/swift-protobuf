/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: unittest_swift_all_required_types.proto
 *
 */

//  Protocol Buffers - Google's data interchange format
//  Copyright 2008 Google Inc.  All rights reserved.
//  https://developers.google.com/protocol-buffers/
// 
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are
//  met:
// 
//      * Redistributions of source code must retain the above copyright
//  notice, this list of conditions and the following disclaimer.
//      * Redistributions in binary form must reproduce the above
//  copyright notice, this list of conditions and the following disclaimer
//  in the documentation and/or other materials provided with the
//  distribution.
//      * Neither the name of Google Inc. nor the names of its
//  contributors may be used to endorse or promote products derived from
//  this software without specific prior written permission.
// 
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
//  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
//  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
//  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
//  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
//  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
//  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

///   An addition to unittest.proto

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _1: SwiftProtobuf.ProtobufAPIVersion_1 {}
  typealias Version = _1
}

struct ProtobufUnittest_TestAllRequiredTypes: SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "TestAllRequiredTypes"
  static let protoPackageName: String = "protobuf_unittest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .unique(proto: "required_int32", json: "requiredInt32"),
    2: .unique(proto: "required_int64", json: "requiredInt64"),
    3: .unique(proto: "required_uint32", json: "requiredUint32"),
    4: .unique(proto: "required_uint64", json: "requiredUint64"),
    5: .unique(proto: "required_sint32", json: "requiredSint32"),
    6: .unique(proto: "required_sint64", json: "requiredSint64"),
    7: .unique(proto: "required_fixed32", json: "requiredFixed32"),
    8: .unique(proto: "required_fixed64", json: "requiredFixed64"),
    9: .unique(proto: "required_sfixed32", json: "requiredSfixed32"),
    10: .unique(proto: "required_sfixed64", json: "requiredSfixed64"),
    11: .unique(proto: "required_float", json: "requiredFloat"),
    12: .unique(proto: "required_double", json: "requiredDouble"),
    13: .unique(proto: "required_bool", json: "requiredBool"),
    14: .unique(proto: "required_string", json: "requiredString"),
    15: .unique(proto: "required_bytes", json: "requiredBytes"),
    16: .unique(proto: "RequiredGroup", json: "requiredgroup"),
    18: .unique(proto: "required_nested_message", json: "requiredNestedMessage"),
    19: .unique(proto: "required_foreign_message", json: "requiredForeignMessage"),
    20: .unique(proto: "required_import_message", json: "requiredImportMessage"),
    21: .unique(proto: "required_nested_enum", json: "requiredNestedEnum"),
    22: .unique(proto: "required_foreign_enum", json: "requiredForeignEnum"),
    23: .unique(proto: "required_import_enum", json: "requiredImportEnum"),
    24: .unique(proto: "required_string_piece", json: "requiredStringPiece"),
    25: .unique(proto: "required_cord", json: "requiredCord"),
    26: .unique(proto: "required_public_import_message", json: "requiredPublicImportMessage"),
    27: .unique(proto: "required_lazy_message", json: "requiredLazyMessage"),
    61: .unique(proto: "default_int32", json: "defaultInt32"),
    62: .unique(proto: "default_int64", json: "defaultInt64"),
    63: .unique(proto: "default_uint32", json: "defaultUint32"),
    64: .unique(proto: "default_uint64", json: "defaultUint64"),
    65: .unique(proto: "default_sint32", json: "defaultSint32"),
    66: .unique(proto: "default_sint64", json: "defaultSint64"),
    67: .unique(proto: "default_fixed32", json: "defaultFixed32"),
    68: .unique(proto: "default_fixed64", json: "defaultFixed64"),
    69: .unique(proto: "default_sfixed32", json: "defaultSfixed32"),
    70: .unique(proto: "default_sfixed64", json: "defaultSfixed64"),
    71: .unique(proto: "default_float", json: "defaultFloat"),
    72: .unique(proto: "default_double", json: "defaultDouble"),
    73: .unique(proto: "default_bool", json: "defaultBool"),
    74: .unique(proto: "default_string", json: "defaultString"),
    75: .unique(proto: "default_bytes", json: "defaultBytes"),
    81: .unique(proto: "default_nested_enum", json: "defaultNestedEnum"),
    82: .unique(proto: "default_foreign_enum", json: "defaultForeignEnum"),
    83: .unique(proto: "default_import_enum", json: "defaultImportEnum"),
    84: .unique(proto: "default_string_piece", json: "defaultStringPiece"),
    85: .unique(proto: "default_cord", json: "defaultCord"),
    111: .unique(proto: "oneof_uint32", json: "oneofUint32"),
    112: .unique(proto: "oneof_nested_message", json: "oneofNestedMessage"),
    113: .unique(proto: "oneof_string", json: "oneofString"),
    114: .unique(proto: "oneof_bytes", json: "oneofBytes"),
  ]

  private class _StorageClass {
    var _requiredInt32: Int32? = nil
    var _requiredInt64: Int64? = nil
    var _requiredUint32: UInt32? = nil
    var _requiredUint64: UInt64? = nil
    var _requiredSint32: Int32? = nil
    var _requiredSint64: Int64? = nil
    var _requiredFixed32: UInt32? = nil
    var _requiredFixed64: UInt64? = nil
    var _requiredSfixed32: Int32? = nil
    var _requiredSfixed64: Int64? = nil
    var _requiredFloat: Float? = nil
    var _requiredDouble: Double? = nil
    var _requiredBool: Bool? = nil
    var _requiredString: String? = nil
    var _requiredBytes: Data? = nil
    var _requiredGroup: ProtobufUnittest_TestAllRequiredTypes.RequiredGroup? = nil
    var _requiredNestedMessage: ProtobufUnittest_TestAllRequiredTypes.NestedMessage? = nil
    var _requiredForeignMessage: ProtobufUnittest_ForeignMessage? = nil
    var _requiredImportMessage: ProtobufUnittestImport_ImportMessage? = nil
    var _requiredNestedEnum: ProtobufUnittest_TestAllRequiredTypes.NestedEnum? = nil
    var _requiredForeignEnum: ProtobufUnittest_ForeignEnum? = nil
    var _requiredImportEnum: ProtobufUnittestImport_ImportEnum? = nil
    var _requiredStringPiece: String? = nil
    var _requiredCord: String? = nil
    var _requiredPublicImportMessage: ProtobufUnittestImport_PublicImportMessage? = nil
    var _requiredLazyMessage: ProtobufUnittest_TestAllRequiredTypes.NestedMessage? = nil
    var _defaultInt32: Int32? = nil
    var _defaultInt64: Int64? = nil
    var _defaultUint32: UInt32? = nil
    var _defaultUint64: UInt64? = nil
    var _defaultSint32: Int32? = nil
    var _defaultSint64: Int64? = nil
    var _defaultFixed32: UInt32? = nil
    var _defaultFixed64: UInt64? = nil
    var _defaultSfixed32: Int32? = nil
    var _defaultSfixed64: Int64? = nil
    var _defaultFloat: Float? = nil
    var _defaultDouble: Double? = nil
    var _defaultBool: Bool? = nil
    var _defaultString: String? = nil
    var _defaultBytes: Data? = nil
    var _defaultNestedEnum: ProtobufUnittest_TestAllRequiredTypes.NestedEnum? = nil
    var _defaultForeignEnum: ProtobufUnittest_ForeignEnum? = nil
    var _defaultImportEnum: ProtobufUnittestImport_ImportEnum? = nil
    var _defaultStringPiece: String? = nil
    var _defaultCord: String? = nil
    var _oneofField: ProtobufUnittest_TestAllRequiredTypes.OneOf_OneofField?

    init() {}

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._requiredInt32 = _requiredInt32
      clone._requiredInt64 = _requiredInt64
      clone._requiredUint32 = _requiredUint32
      clone._requiredUint64 = _requiredUint64
      clone._requiredSint32 = _requiredSint32
      clone._requiredSint64 = _requiredSint64
      clone._requiredFixed32 = _requiredFixed32
      clone._requiredFixed64 = _requiredFixed64
      clone._requiredSfixed32 = _requiredSfixed32
      clone._requiredSfixed64 = _requiredSfixed64
      clone._requiredFloat = _requiredFloat
      clone._requiredDouble = _requiredDouble
      clone._requiredBool = _requiredBool
      clone._requiredString = _requiredString
      clone._requiredBytes = _requiredBytes
      clone._requiredGroup = _requiredGroup
      clone._requiredNestedMessage = _requiredNestedMessage
      clone._requiredForeignMessage = _requiredForeignMessage
      clone._requiredImportMessage = _requiredImportMessage
      clone._requiredNestedEnum = _requiredNestedEnum
      clone._requiredForeignEnum = _requiredForeignEnum
      clone._requiredImportEnum = _requiredImportEnum
      clone._requiredStringPiece = _requiredStringPiece
      clone._requiredCord = _requiredCord
      clone._requiredPublicImportMessage = _requiredPublicImportMessage
      clone._requiredLazyMessage = _requiredLazyMessage
      clone._defaultInt32 = _defaultInt32
      clone._defaultInt64 = _defaultInt64
      clone._defaultUint32 = _defaultUint32
      clone._defaultUint64 = _defaultUint64
      clone._defaultSint32 = _defaultSint32
      clone._defaultSint64 = _defaultSint64
      clone._defaultFixed32 = _defaultFixed32
      clone._defaultFixed64 = _defaultFixed64
      clone._defaultSfixed32 = _defaultSfixed32
      clone._defaultSfixed64 = _defaultSfixed64
      clone._defaultFloat = _defaultFloat
      clone._defaultDouble = _defaultDouble
      clone._defaultBool = _defaultBool
      clone._defaultString = _defaultString
      clone._defaultBytes = _defaultBytes
      clone._defaultNestedEnum = _defaultNestedEnum
      clone._defaultForeignEnum = _defaultForeignEnum
      clone._defaultImportEnum = _defaultImportEnum
      clone._defaultStringPiece = _defaultStringPiece
      clone._defaultCord = _defaultCord
      clone._oneofField = _oneofField
      return clone
    }
  }

  private var _storage = _StorageClass()

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }

  ///   Singular
  var requiredInt32: Int32 {
    get {return _storage._requiredInt32 ?? 0}
    set {_uniqueStorage()._requiredInt32 = newValue}
  }
  var hasRequiredInt32: Bool {
    return _storage._requiredInt32 != nil
  }
  mutating func clearRequiredInt32() {
    return _storage._requiredInt32 = nil
  }

  var requiredInt64: Int64 {
    get {return _storage._requiredInt64 ?? 0}
    set {_uniqueStorage()._requiredInt64 = newValue}
  }
  var hasRequiredInt64: Bool {
    return _storage._requiredInt64 != nil
  }
  mutating func clearRequiredInt64() {
    return _storage._requiredInt64 = nil
  }

  var requiredUint32: UInt32 {
    get {return _storage._requiredUint32 ?? 0}
    set {_uniqueStorage()._requiredUint32 = newValue}
  }
  var hasRequiredUint32: Bool {
    return _storage._requiredUint32 != nil
  }
  mutating func clearRequiredUint32() {
    return _storage._requiredUint32 = nil
  }

  var requiredUint64: UInt64 {
    get {return _storage._requiredUint64 ?? 0}
    set {_uniqueStorage()._requiredUint64 = newValue}
  }
  var hasRequiredUint64: Bool {
    return _storage._requiredUint64 != nil
  }
  mutating func clearRequiredUint64() {
    return _storage._requiredUint64 = nil
  }

  var requiredSint32: Int32 {
    get {return _storage._requiredSint32 ?? 0}
    set {_uniqueStorage()._requiredSint32 = newValue}
  }
  var hasRequiredSint32: Bool {
    return _storage._requiredSint32 != nil
  }
  mutating func clearRequiredSint32() {
    return _storage._requiredSint32 = nil
  }

  var requiredSint64: Int64 {
    get {return _storage._requiredSint64 ?? 0}
    set {_uniqueStorage()._requiredSint64 = newValue}
  }
  var hasRequiredSint64: Bool {
    return _storage._requiredSint64 != nil
  }
  mutating func clearRequiredSint64() {
    return _storage._requiredSint64 = nil
  }

  var requiredFixed32: UInt32 {
    get {return _storage._requiredFixed32 ?? 0}
    set {_uniqueStorage()._requiredFixed32 = newValue}
  }
  var hasRequiredFixed32: Bool {
    return _storage._requiredFixed32 != nil
  }
  mutating func clearRequiredFixed32() {
    return _storage._requiredFixed32 = nil
  }

  var requiredFixed64: UInt64 {
    get {return _storage._requiredFixed64 ?? 0}
    set {_uniqueStorage()._requiredFixed64 = newValue}
  }
  var hasRequiredFixed64: Bool {
    return _storage._requiredFixed64 != nil
  }
  mutating func clearRequiredFixed64() {
    return _storage._requiredFixed64 = nil
  }

  var requiredSfixed32: Int32 {
    get {return _storage._requiredSfixed32 ?? 0}
    set {_uniqueStorage()._requiredSfixed32 = newValue}
  }
  var hasRequiredSfixed32: Bool {
    return _storage._requiredSfixed32 != nil
  }
  mutating func clearRequiredSfixed32() {
    return _storage._requiredSfixed32 = nil
  }

  var requiredSfixed64: Int64 {
    get {return _storage._requiredSfixed64 ?? 0}
    set {_uniqueStorage()._requiredSfixed64 = newValue}
  }
  var hasRequiredSfixed64: Bool {
    return _storage._requiredSfixed64 != nil
  }
  mutating func clearRequiredSfixed64() {
    return _storage._requiredSfixed64 = nil
  }

  var requiredFloat: Float {
    get {return _storage._requiredFloat ?? 0}
    set {_uniqueStorage()._requiredFloat = newValue}
  }
  var hasRequiredFloat: Bool {
    return _storage._requiredFloat != nil
  }
  mutating func clearRequiredFloat() {
    return _storage._requiredFloat = nil
  }

  var requiredDouble: Double {
    get {return _storage._requiredDouble ?? 0}
    set {_uniqueStorage()._requiredDouble = newValue}
  }
  var hasRequiredDouble: Bool {
    return _storage._requiredDouble != nil
  }
  mutating func clearRequiredDouble() {
    return _storage._requiredDouble = nil
  }

  var requiredBool: Bool {
    get {return _storage._requiredBool ?? false}
    set {_uniqueStorage()._requiredBool = newValue}
  }
  var hasRequiredBool: Bool {
    return _storage._requiredBool != nil
  }
  mutating func clearRequiredBool() {
    return _storage._requiredBool = nil
  }

  var requiredString: String {
    get {return _storage._requiredString ?? ""}
    set {_uniqueStorage()._requiredString = newValue}
  }
  var hasRequiredString: Bool {
    return _storage._requiredString != nil
  }
  mutating func clearRequiredString() {
    return _storage._requiredString = nil
  }

  var requiredBytes: Data {
    get {return _storage._requiredBytes ?? Data()}
    set {_uniqueStorage()._requiredBytes = newValue}
  }
  var hasRequiredBytes: Bool {
    return _storage._requiredBytes != nil
  }
  mutating func clearRequiredBytes() {
    return _storage._requiredBytes = nil
  }

  var requiredGroup: ProtobufUnittest_TestAllRequiredTypes.RequiredGroup {
    get {return _storage._requiredGroup ?? ProtobufUnittest_TestAllRequiredTypes.RequiredGroup()}
    set {_uniqueStorage()._requiredGroup = newValue}
  }
  var hasRequiredGroup: Bool {
    return _storage._requiredGroup != nil
  }
  mutating func clearRequiredGroup() {
    return _storage._requiredGroup = nil
  }

  var requiredNestedMessage: ProtobufUnittest_TestAllRequiredTypes.NestedMessage {
    get {return _storage._requiredNestedMessage ?? ProtobufUnittest_TestAllRequiredTypes.NestedMessage()}
    set {_uniqueStorage()._requiredNestedMessage = newValue}
  }
  var hasRequiredNestedMessage: Bool {
    return _storage._requiredNestedMessage != nil
  }
  mutating func clearRequiredNestedMessage() {
    return _storage._requiredNestedMessage = nil
  }

  var requiredForeignMessage: ProtobufUnittest_ForeignMessage {
    get {return _storage._requiredForeignMessage ?? ProtobufUnittest_ForeignMessage()}
    set {_uniqueStorage()._requiredForeignMessage = newValue}
  }
  var hasRequiredForeignMessage: Bool {
    return _storage._requiredForeignMessage != nil
  }
  mutating func clearRequiredForeignMessage() {
    return _storage._requiredForeignMessage = nil
  }

  var requiredImportMessage: ProtobufUnittestImport_ImportMessage {
    get {return _storage._requiredImportMessage ?? ProtobufUnittestImport_ImportMessage()}
    set {_uniqueStorage()._requiredImportMessage = newValue}
  }
  var hasRequiredImportMessage: Bool {
    return _storage._requiredImportMessage != nil
  }
  mutating func clearRequiredImportMessage() {
    return _storage._requiredImportMessage = nil
  }

  var requiredNestedEnum: ProtobufUnittest_TestAllRequiredTypes.NestedEnum {
    get {return _storage._requiredNestedEnum ?? ProtobufUnittest_TestAllRequiredTypes.NestedEnum.foo}
    set {_uniqueStorage()._requiredNestedEnum = newValue}
  }
  var hasRequiredNestedEnum: Bool {
    return _storage._requiredNestedEnum != nil
  }
  mutating func clearRequiredNestedEnum() {
    return _storage._requiredNestedEnum = nil
  }

  var requiredForeignEnum: ProtobufUnittest_ForeignEnum {
    get {return _storage._requiredForeignEnum ?? ProtobufUnittest_ForeignEnum.foreignFoo}
    set {_uniqueStorage()._requiredForeignEnum = newValue}
  }
  var hasRequiredForeignEnum: Bool {
    return _storage._requiredForeignEnum != nil
  }
  mutating func clearRequiredForeignEnum() {
    return _storage._requiredForeignEnum = nil
  }

  var requiredImportEnum: ProtobufUnittestImport_ImportEnum {
    get {return _storage._requiredImportEnum ?? ProtobufUnittestImport_ImportEnum.importFoo}
    set {_uniqueStorage()._requiredImportEnum = newValue}
  }
  var hasRequiredImportEnum: Bool {
    return _storage._requiredImportEnum != nil
  }
  mutating func clearRequiredImportEnum() {
    return _storage._requiredImportEnum = nil
  }

  var requiredStringPiece: String {
    get {return _storage._requiredStringPiece ?? ""}
    set {_uniqueStorage()._requiredStringPiece = newValue}
  }
  var hasRequiredStringPiece: Bool {
    return _storage._requiredStringPiece != nil
  }
  mutating func clearRequiredStringPiece() {
    return _storage._requiredStringPiece = nil
  }

  var requiredCord: String {
    get {return _storage._requiredCord ?? ""}
    set {_uniqueStorage()._requiredCord = newValue}
  }
  var hasRequiredCord: Bool {
    return _storage._requiredCord != nil
  }
  mutating func clearRequiredCord() {
    return _storage._requiredCord = nil
  }

  ///   Defined in unittest_import_public.proto
  var requiredPublicImportMessage: ProtobufUnittestImport_PublicImportMessage {
    get {return _storage._requiredPublicImportMessage ?? ProtobufUnittestImport_PublicImportMessage()}
    set {_uniqueStorage()._requiredPublicImportMessage = newValue}
  }
  var hasRequiredPublicImportMessage: Bool {
    return _storage._requiredPublicImportMessage != nil
  }
  mutating func clearRequiredPublicImportMessage() {
    return _storage._requiredPublicImportMessage = nil
  }

  var requiredLazyMessage: ProtobufUnittest_TestAllRequiredTypes.NestedMessage {
    get {return _storage._requiredLazyMessage ?? ProtobufUnittest_TestAllRequiredTypes.NestedMessage()}
    set {_uniqueStorage()._requiredLazyMessage = newValue}
  }
  var hasRequiredLazyMessage: Bool {
    return _storage._requiredLazyMessage != nil
  }
  mutating func clearRequiredLazyMessage() {
    return _storage._requiredLazyMessage = nil
  }

  ///   Singular with defaults
  var defaultInt32: Int32 {
    get {return _storage._defaultInt32 ?? 41}
    set {_uniqueStorage()._defaultInt32 = newValue}
  }
  var hasDefaultInt32: Bool {
    return _storage._defaultInt32 != nil
  }
  mutating func clearDefaultInt32() {
    return _storage._defaultInt32 = nil
  }

  var defaultInt64: Int64 {
    get {return _storage._defaultInt64 ?? 42}
    set {_uniqueStorage()._defaultInt64 = newValue}
  }
  var hasDefaultInt64: Bool {
    return _storage._defaultInt64 != nil
  }
  mutating func clearDefaultInt64() {
    return _storage._defaultInt64 = nil
  }

  var defaultUint32: UInt32 {
    get {return _storage._defaultUint32 ?? 43}
    set {_uniqueStorage()._defaultUint32 = newValue}
  }
  var hasDefaultUint32: Bool {
    return _storage._defaultUint32 != nil
  }
  mutating func clearDefaultUint32() {
    return _storage._defaultUint32 = nil
  }

  var defaultUint64: UInt64 {
    get {return _storage._defaultUint64 ?? 44}
    set {_uniqueStorage()._defaultUint64 = newValue}
  }
  var hasDefaultUint64: Bool {
    return _storage._defaultUint64 != nil
  }
  mutating func clearDefaultUint64() {
    return _storage._defaultUint64 = nil
  }

  var defaultSint32: Int32 {
    get {return _storage._defaultSint32 ?? -45}
    set {_uniqueStorage()._defaultSint32 = newValue}
  }
  var hasDefaultSint32: Bool {
    return _storage._defaultSint32 != nil
  }
  mutating func clearDefaultSint32() {
    return _storage._defaultSint32 = nil
  }

  var defaultSint64: Int64 {
    get {return _storage._defaultSint64 ?? 46}
    set {_uniqueStorage()._defaultSint64 = newValue}
  }
  var hasDefaultSint64: Bool {
    return _storage._defaultSint64 != nil
  }
  mutating func clearDefaultSint64() {
    return _storage._defaultSint64 = nil
  }

  var defaultFixed32: UInt32 {
    get {return _storage._defaultFixed32 ?? 47}
    set {_uniqueStorage()._defaultFixed32 = newValue}
  }
  var hasDefaultFixed32: Bool {
    return _storage._defaultFixed32 != nil
  }
  mutating func clearDefaultFixed32() {
    return _storage._defaultFixed32 = nil
  }

  var defaultFixed64: UInt64 {
    get {return _storage._defaultFixed64 ?? 48}
    set {_uniqueStorage()._defaultFixed64 = newValue}
  }
  var hasDefaultFixed64: Bool {
    return _storage._defaultFixed64 != nil
  }
  mutating func clearDefaultFixed64() {
    return _storage._defaultFixed64 = nil
  }

  var defaultSfixed32: Int32 {
    get {return _storage._defaultSfixed32 ?? 49}
    set {_uniqueStorage()._defaultSfixed32 = newValue}
  }
  var hasDefaultSfixed32: Bool {
    return _storage._defaultSfixed32 != nil
  }
  mutating func clearDefaultSfixed32() {
    return _storage._defaultSfixed32 = nil
  }

  var defaultSfixed64: Int64 {
    get {return _storage._defaultSfixed64 ?? -50}
    set {_uniqueStorage()._defaultSfixed64 = newValue}
  }
  var hasDefaultSfixed64: Bool {
    return _storage._defaultSfixed64 != nil
  }
  mutating func clearDefaultSfixed64() {
    return _storage._defaultSfixed64 = nil
  }

  var defaultFloat: Float {
    get {return _storage._defaultFloat ?? 51.5}
    set {_uniqueStorage()._defaultFloat = newValue}
  }
  var hasDefaultFloat: Bool {
    return _storage._defaultFloat != nil
  }
  mutating func clearDefaultFloat() {
    return _storage._defaultFloat = nil
  }

  var defaultDouble: Double {
    get {return _storage._defaultDouble ?? 52000}
    set {_uniqueStorage()._defaultDouble = newValue}
  }
  var hasDefaultDouble: Bool {
    return _storage._defaultDouble != nil
  }
  mutating func clearDefaultDouble() {
    return _storage._defaultDouble = nil
  }

  var defaultBool: Bool {
    get {return _storage._defaultBool ?? true}
    set {_uniqueStorage()._defaultBool = newValue}
  }
  var hasDefaultBool: Bool {
    return _storage._defaultBool != nil
  }
  mutating func clearDefaultBool() {
    return _storage._defaultBool = nil
  }

  var defaultString: String {
    get {return _storage._defaultString ?? "hello"}
    set {_uniqueStorage()._defaultString = newValue}
  }
  var hasDefaultString: Bool {
    return _storage._defaultString != nil
  }
  mutating func clearDefaultString() {
    return _storage._defaultString = nil
  }

  var defaultBytes: Data {
    get {return _storage._defaultBytes ?? Data(bytes: [119, 111, 114, 108, 100])}
    set {_uniqueStorage()._defaultBytes = newValue}
  }
  var hasDefaultBytes: Bool {
    return _storage._defaultBytes != nil
  }
  mutating func clearDefaultBytes() {
    return _storage._defaultBytes = nil
  }

  var defaultNestedEnum: ProtobufUnittest_TestAllRequiredTypes.NestedEnum {
    get {return _storage._defaultNestedEnum ?? ProtobufUnittest_TestAllRequiredTypes.NestedEnum.bar}
    set {_uniqueStorage()._defaultNestedEnum = newValue}
  }
  var hasDefaultNestedEnum: Bool {
    return _storage._defaultNestedEnum != nil
  }
  mutating func clearDefaultNestedEnum() {
    return _storage._defaultNestedEnum = nil
  }

  var defaultForeignEnum: ProtobufUnittest_ForeignEnum {
    get {return _storage._defaultForeignEnum ?? ProtobufUnittest_ForeignEnum.foreignBar}
    set {_uniqueStorage()._defaultForeignEnum = newValue}
  }
  var hasDefaultForeignEnum: Bool {
    return _storage._defaultForeignEnum != nil
  }
  mutating func clearDefaultForeignEnum() {
    return _storage._defaultForeignEnum = nil
  }

  var defaultImportEnum: ProtobufUnittestImport_ImportEnum {
    get {return _storage._defaultImportEnum ?? ProtobufUnittestImport_ImportEnum.importBar}
    set {_uniqueStorage()._defaultImportEnum = newValue}
  }
  var hasDefaultImportEnum: Bool {
    return _storage._defaultImportEnum != nil
  }
  mutating func clearDefaultImportEnum() {
    return _storage._defaultImportEnum = nil
  }

  var defaultStringPiece: String {
    get {return _storage._defaultStringPiece ?? "abc"}
    set {_uniqueStorage()._defaultStringPiece = newValue}
  }
  var hasDefaultStringPiece: Bool {
    return _storage._defaultStringPiece != nil
  }
  mutating func clearDefaultStringPiece() {
    return _storage._defaultStringPiece = nil
  }

  var defaultCord: String {
    get {return _storage._defaultCord ?? "123"}
    set {_uniqueStorage()._defaultCord = newValue}
  }
  var hasDefaultCord: Bool {
    return _storage._defaultCord != nil
  }
  mutating func clearDefaultCord() {
    return _storage._defaultCord = nil
  }

  var oneofUint32: UInt32 {
    get {
      if case .oneofUint32(let v)? = _storage._oneofField {
        return v
      }
      return 0
    }
    set {
      _uniqueStorage()._oneofField = .oneofUint32(newValue)
    }
  }

  var oneofNestedMessage: ProtobufUnittest_TestAllRequiredTypes.NestedMessage {
    get {
      if case .oneofNestedMessage(let v)? = _storage._oneofField {
        return v
      }
      return ProtobufUnittest_TestAllRequiredTypes.NestedMessage()
    }
    set {
      _uniqueStorage()._oneofField = .oneofNestedMessage(newValue)
    }
  }

  var oneofString: String {
    get {
      if case .oneofString(let v)? = _storage._oneofField {
        return v
      }
      return ""
    }
    set {
      _uniqueStorage()._oneofField = .oneofString(newValue)
    }
  }

  var oneofBytes: Data {
    get {
      if case .oneofBytes(let v)? = _storage._oneofField {
        return v
      }
      return Data()
    }
    set {
      _uniqueStorage()._oneofField = .oneofBytes(newValue)
    }
  }

  var oneofField: OneOf_OneofField? {
    get {return _storage._oneofField}
    set {
      _uniqueStorage()._oneofField = newValue
    }
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_OneofField: Equatable {
    case oneofUint32(UInt32)
    case oneofNestedMessage(ProtobufUnittest_TestAllRequiredTypes.NestedMessage)
    case oneofString(String)
    case oneofBytes(Data)

    static func ==(lhs: ProtobufUnittest_TestAllRequiredTypes.OneOf_OneofField, rhs: ProtobufUnittest_TestAllRequiredTypes.OneOf_OneofField) -> Bool {
      switch (lhs, rhs) {
      case (.oneofUint32(let l), .oneofUint32(let r)): return l == r
      case (.oneofNestedMessage(let l), .oneofNestedMessage(let r)): return l == r
      case (.oneofString(let l), .oneofString(let r)): return l == r
      case (.oneofBytes(let l), .oneofBytes(let r)): return l == r
      default: return false
      }
    }

    fileprivate init?<T: SwiftProtobuf.Decoder>(byDecodingFrom decoder: inout T, fieldNumber: Int) throws {
      switch fieldNumber {
      case 111:
        var value: UInt32?
        try decoder.decodeSingularUInt32Field(value: &value)
        if let value = value {
          self = .oneofUint32(value)
          return
        }
      case 112:
        var value: ProtobufUnittest_TestAllRequiredTypes.NestedMessage?
        try decoder.decodeSingularMessageField(value: &value)
        if let value = value {
          self = .oneofNestedMessage(value)
          return
        }
      case 113:
        var value: String?
        try decoder.decodeSingularStringField(value: &value)
        if let value = value {
          self = .oneofString(value)
          return
        }
      case 114:
        var value: Data?
        try decoder.decodeSingularBytesField(value: &value)
        if let value = value {
          self = .oneofBytes(value)
          return
        }
      default:
        break
      }
      return nil
    }

    fileprivate func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V, start: Int, end: Int) throws {
      switch self {
      case .oneofUint32(let v):
        if start <= 111 && 111 < end {
          try visitor.visitSingularUInt32Field(value: v, fieldNumber: 111)
        }
      case .oneofNestedMessage(let v):
        if start <= 112 && 112 < end {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 112)
        }
      case .oneofString(let v):
        if start <= 113 && 113 < end {
          try visitor.visitSingularStringField(value: v, fieldNumber: 113)
        }
      case .oneofBytes(let v):
        if start <= 114 && 114 < end {
          try visitor.visitSingularBytesField(value: v, fieldNumber: 114)
        }
      }
    }
  }

  enum NestedEnum: SwiftProtobuf.Enum, SwiftProtobuf._ProtoNameProviding {
    typealias RawValue = Int
    case foo // = 1
    case bar // = 2
    case baz // = 3

    ///   Intentionally negative.
    case neg // = -1

    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
      1: .same(proto: "FOO"),
      2: .same(proto: "BAR"),
      3: .same(proto: "BAZ"),
      -1: .same(proto: "NEG"),
    ]

    init() {
      self = .foo
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 1: self = .foo
      case 2: self = .bar
      case 3: self = .baz
      case -1: self = .neg
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .foo: return 1
      case .bar: return 2
      case .baz: return 3
      case .neg: return -1
      }
    }

  }

  struct NestedMessage: SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = "NestedMessage"
    static let protoPackageName: String = "protobuf_unittest"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
      1: .same(proto: "bb"),
    ]

    ///   The field name "b" fails to compile in proto1 because it conflicts with
    ///   a local variable named "b" in one of the generated methods.  Doh.
    ///   This file needs to compile in proto1 to test backwards-compatibility.
    private var _bb: Int32? = nil
    var bb: Int32 {
      get {return _bb ?? 0}
      set {_bb = newValue}
    }
    var hasBb: Bool {
      return _bb != nil
    }
    mutating func clearBb() {
      return _bb = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    public var isInitialized: Bool {
      if _bb == nil {return false}
      return true
    }

    mutating func _protobuf_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
      }
    }

    mutating func _protobuf_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &_bb)
      default: break
      }
    }

    func _protobuf_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = _bb {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }

    func _protobuf_generated_isEqualTo(other: ProtobufUnittest_TestAllRequiredTypes.NestedMessage) -> Bool {
      if _bb != other._bb {return false}
      if unknownFields != other.unknownFields {return false}
      return true
    }
  }

  struct RequiredGroup: SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = "RequiredGroup"
    static let protoPackageName: String = "protobuf_unittest"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
      17: .same(proto: "a"),
    ]

    private var _a: Int32? = nil
    var a: Int32 {
      get {return _a ?? 0}
      set {_a = newValue}
    }
    var hasA: Bool {
      return _a != nil
    }
    mutating func clearA() {
      return _a = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    public var isInitialized: Bool {
      if _a == nil {return false}
      return true
    }

    mutating func _protobuf_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
      }
    }

    mutating func _protobuf_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
      switch fieldNumber {
      case 17: try decoder.decodeSingularInt32Field(value: &_a)
      default: break
      }
    }

    func _protobuf_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = _a {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 17)
      }
      try unknownFields.traverse(visitor: &visitor)
    }

    func _protobuf_generated_isEqualTo(other: ProtobufUnittest_TestAllRequiredTypes.RequiredGroup) -> Bool {
      if _a != other._a {return false}
      if unknownFields != other.unknownFields {return false}
      return true
    }
  }

  init() {}

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._requiredInt32 == nil {return false}
      if _storage._requiredInt64 == nil {return false}
      if _storage._requiredUint32 == nil {return false}
      if _storage._requiredUint64 == nil {return false}
      if _storage._requiredSint32 == nil {return false}
      if _storage._requiredSint64 == nil {return false}
      if _storage._requiredFixed32 == nil {return false}
      if _storage._requiredFixed64 == nil {return false}
      if _storage._requiredSfixed32 == nil {return false}
      if _storage._requiredSfixed64 == nil {return false}
      if _storage._requiredFloat == nil {return false}
      if _storage._requiredDouble == nil {return false}
      if _storage._requiredBool == nil {return false}
      if _storage._requiredString == nil {return false}
      if _storage._requiredBytes == nil {return false}
      if _storage._requiredGroup == nil {return false}
      if _storage._requiredNestedMessage == nil {return false}
      if _storage._requiredForeignMessage == nil {return false}
      if _storage._requiredImportMessage == nil {return false}
      if _storage._requiredNestedEnum == nil {return false}
      if _storage._requiredForeignEnum == nil {return false}
      if _storage._requiredImportEnum == nil {return false}
      if _storage._requiredStringPiece == nil {return false}
      if _storage._requiredCord == nil {return false}
      if _storage._requiredPublicImportMessage == nil {return false}
      if _storage._requiredLazyMessage == nil {return false}
      if _storage._defaultInt32 == nil {return false}
      if _storage._defaultInt64 == nil {return false}
      if _storage._defaultUint32 == nil {return false}
      if _storage._defaultUint64 == nil {return false}
      if _storage._defaultSint32 == nil {return false}
      if _storage._defaultSint64 == nil {return false}
      if _storage._defaultFixed32 == nil {return false}
      if _storage._defaultFixed64 == nil {return false}
      if _storage._defaultSfixed32 == nil {return false}
      if _storage._defaultSfixed64 == nil {return false}
      if _storage._defaultFloat == nil {return false}
      if _storage._defaultDouble == nil {return false}
      if _storage._defaultBool == nil {return false}
      if _storage._defaultString == nil {return false}
      if _storage._defaultBytes == nil {return false}
      if _storage._defaultNestedEnum == nil {return false}
      if _storage._defaultForeignEnum == nil {return false}
      if _storage._defaultImportEnum == nil {return false}
      if _storage._defaultStringPiece == nil {return false}
      if _storage._defaultCord == nil {return false}
      if let v = _storage._requiredGroup, !v.isInitialized {return false}
      if let v = _storage._requiredNestedMessage, !v.isInitialized {return false}
      if let v = _storage._requiredLazyMessage, !v.isInitialized {return false}
      switch oneofField {
      case .oneofNestedMessage(let v)?:
        if !v.isInitialized {return false}
      default:
        break
      }
      return true
    }
  }

  mutating func _protobuf_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
      }
    }
  }

  mutating func _protobuf_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 1: try decoder.decodeSingularInt32Field(value: &_storage._requiredInt32)
    case 2: try decoder.decodeSingularInt64Field(value: &_storage._requiredInt64)
    case 3: try decoder.decodeSingularUInt32Field(value: &_storage._requiredUint32)
    case 4: try decoder.decodeSingularUInt64Field(value: &_storage._requiredUint64)
    case 5: try decoder.decodeSingularSInt32Field(value: &_storage._requiredSint32)
    case 6: try decoder.decodeSingularSInt64Field(value: &_storage._requiredSint64)
    case 7: try decoder.decodeSingularFixed32Field(value: &_storage._requiredFixed32)
    case 8: try decoder.decodeSingularFixed64Field(value: &_storage._requiredFixed64)
    case 9: try decoder.decodeSingularSFixed32Field(value: &_storage._requiredSfixed32)
    case 10: try decoder.decodeSingularSFixed64Field(value: &_storage._requiredSfixed64)
    case 11: try decoder.decodeSingularFloatField(value: &_storage._requiredFloat)
    case 12: try decoder.decodeSingularDoubleField(value: &_storage._requiredDouble)
    case 13: try decoder.decodeSingularBoolField(value: &_storage._requiredBool)
    case 14: try decoder.decodeSingularStringField(value: &_storage._requiredString)
    case 15: try decoder.decodeSingularBytesField(value: &_storage._requiredBytes)
    case 16: try decoder.decodeSingularGroupField(value: &_storage._requiredGroup)
    case 18: try decoder.decodeSingularMessageField(value: &_storage._requiredNestedMessage)
    case 19: try decoder.decodeSingularMessageField(value: &_storage._requiredForeignMessage)
    case 20: try decoder.decodeSingularMessageField(value: &_storage._requiredImportMessage)
    case 21: try decoder.decodeSingularEnumField(value: &_storage._requiredNestedEnum)
    case 22: try decoder.decodeSingularEnumField(value: &_storage._requiredForeignEnum)
    case 23: try decoder.decodeSingularEnumField(value: &_storage._requiredImportEnum)
    case 24: try decoder.decodeSingularStringField(value: &_storage._requiredStringPiece)
    case 25: try decoder.decodeSingularStringField(value: &_storage._requiredCord)
    case 26: try decoder.decodeSingularMessageField(value: &_storage._requiredPublicImportMessage)
    case 27: try decoder.decodeSingularMessageField(value: &_storage._requiredLazyMessage)
    case 61: try decoder.decodeSingularInt32Field(value: &_storage._defaultInt32)
    case 62: try decoder.decodeSingularInt64Field(value: &_storage._defaultInt64)
    case 63: try decoder.decodeSingularUInt32Field(value: &_storage._defaultUint32)
    case 64: try decoder.decodeSingularUInt64Field(value: &_storage._defaultUint64)
    case 65: try decoder.decodeSingularSInt32Field(value: &_storage._defaultSint32)
    case 66: try decoder.decodeSingularSInt64Field(value: &_storage._defaultSint64)
    case 67: try decoder.decodeSingularFixed32Field(value: &_storage._defaultFixed32)
    case 68: try decoder.decodeSingularFixed64Field(value: &_storage._defaultFixed64)
    case 69: try decoder.decodeSingularSFixed32Field(value: &_storage._defaultSfixed32)
    case 70: try decoder.decodeSingularSFixed64Field(value: &_storage._defaultSfixed64)
    case 71: try decoder.decodeSingularFloatField(value: &_storage._defaultFloat)
    case 72: try decoder.decodeSingularDoubleField(value: &_storage._defaultDouble)
    case 73: try decoder.decodeSingularBoolField(value: &_storage._defaultBool)
    case 74: try decoder.decodeSingularStringField(value: &_storage._defaultString)
    case 75: try decoder.decodeSingularBytesField(value: &_storage._defaultBytes)
    case 81: try decoder.decodeSingularEnumField(value: &_storage._defaultNestedEnum)
    case 82: try decoder.decodeSingularEnumField(value: &_storage._defaultForeignEnum)
    case 83: try decoder.decodeSingularEnumField(value: &_storage._defaultImportEnum)
    case 84: try decoder.decodeSingularStringField(value: &_storage._defaultStringPiece)
    case 85: try decoder.decodeSingularStringField(value: &_storage._defaultCord)
    case 111, 112, 113, 114:
      if _storage._oneofField != nil {
        try decoder.handleConflictingOneOf()
      }
      _storage._oneofField = try ProtobufUnittest_TestAllRequiredTypes.OneOf_OneofField(byDecodingFrom: &decoder, fieldNumber: fieldNumber)
    default: break
    }
  }

  func _protobuf_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._requiredInt32 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      if let v = _storage._requiredInt64 {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 2)
      }
      if let v = _storage._requiredUint32 {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
      }
      if let v = _storage._requiredUint64 {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 4)
      }
      if let v = _storage._requiredSint32 {
        try visitor.visitSingularSInt32Field(value: v, fieldNumber: 5)
      }
      if let v = _storage._requiredSint64 {
        try visitor.visitSingularSInt64Field(value: v, fieldNumber: 6)
      }
      if let v = _storage._requiredFixed32 {
        try visitor.visitSingularFixed32Field(value: v, fieldNumber: 7)
      }
      if let v = _storage._requiredFixed64 {
        try visitor.visitSingularFixed64Field(value: v, fieldNumber: 8)
      }
      if let v = _storage._requiredSfixed32 {
        try visitor.visitSingularSFixed32Field(value: v, fieldNumber: 9)
      }
      if let v = _storage._requiredSfixed64 {
        try visitor.visitSingularSFixed64Field(value: v, fieldNumber: 10)
      }
      if let v = _storage._requiredFloat {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 11)
      }
      if let v = _storage._requiredDouble {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 12)
      }
      if let v = _storage._requiredBool {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 13)
      }
      if let v = _storage._requiredString {
        try visitor.visitSingularStringField(value: v, fieldNumber: 14)
      }
      if let v = _storage._requiredBytes {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 15)
      }
      if let v = _storage._requiredGroup {
        try visitor.visitSingularGroupField(value: v, fieldNumber: 16)
      }
      if let v = _storage._requiredNestedMessage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
      }
      if let v = _storage._requiredForeignMessage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
      }
      if let v = _storage._requiredImportMessage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
      }
      if let v = _storage._requiredNestedEnum {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 21)
      }
      if let v = _storage._requiredForeignEnum {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 22)
      }
      if let v = _storage._requiredImportEnum {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 23)
      }
      if let v = _storage._requiredStringPiece {
        try visitor.visitSingularStringField(value: v, fieldNumber: 24)
      }
      if let v = _storage._requiredCord {
        try visitor.visitSingularStringField(value: v, fieldNumber: 25)
      }
      if let v = _storage._requiredPublicImportMessage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 26)
      }
      if let v = _storage._requiredLazyMessage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 27)
      }
      if let v = _storage._defaultInt32 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 61)
      }
      if let v = _storage._defaultInt64 {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 62)
      }
      if let v = _storage._defaultUint32 {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 63)
      }
      if let v = _storage._defaultUint64 {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 64)
      }
      if let v = _storage._defaultSint32 {
        try visitor.visitSingularSInt32Field(value: v, fieldNumber: 65)
      }
      if let v = _storage._defaultSint64 {
        try visitor.visitSingularSInt64Field(value: v, fieldNumber: 66)
      }
      if let v = _storage._defaultFixed32 {
        try visitor.visitSingularFixed32Field(value: v, fieldNumber: 67)
      }
      if let v = _storage._defaultFixed64 {
        try visitor.visitSingularFixed64Field(value: v, fieldNumber: 68)
      }
      if let v = _storage._defaultSfixed32 {
        try visitor.visitSingularSFixed32Field(value: v, fieldNumber: 69)
      }
      if let v = _storage._defaultSfixed64 {
        try visitor.visitSingularSFixed64Field(value: v, fieldNumber: 70)
      }
      if let v = _storage._defaultFloat {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 71)
      }
      if let v = _storage._defaultDouble {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 72)
      }
      if let v = _storage._defaultBool {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 73)
      }
      if let v = _storage._defaultString {
        try visitor.visitSingularStringField(value: v, fieldNumber: 74)
      }
      if let v = _storage._defaultBytes {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 75)
      }
      if let v = _storage._defaultNestedEnum {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 81)
      }
      if let v = _storage._defaultForeignEnum {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 82)
      }
      if let v = _storage._defaultImportEnum {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 83)
      }
      if let v = _storage._defaultStringPiece {
        try visitor.visitSingularStringField(value: v, fieldNumber: 84)
      }
      if let v = _storage._defaultCord {
        try visitor.visitSingularStringField(value: v, fieldNumber: 85)
      }
      try _storage._oneofField?.traverse(visitor: &visitor, start: 111, end: 115)
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_TestAllRequiredTypes) -> Bool {
    return withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
      if _storage !== other_storage {
        if _storage._requiredInt32 != other_storage._requiredInt32 {return false}
        if _storage._requiredInt64 != other_storage._requiredInt64 {return false}
        if _storage._requiredUint32 != other_storage._requiredUint32 {return false}
        if _storage._requiredUint64 != other_storage._requiredUint64 {return false}
        if _storage._requiredSint32 != other_storage._requiredSint32 {return false}
        if _storage._requiredSint64 != other_storage._requiredSint64 {return false}
        if _storage._requiredFixed32 != other_storage._requiredFixed32 {return false}
        if _storage._requiredFixed64 != other_storage._requiredFixed64 {return false}
        if _storage._requiredSfixed32 != other_storage._requiredSfixed32 {return false}
        if _storage._requiredSfixed64 != other_storage._requiredSfixed64 {return false}
        if _storage._requiredFloat != other_storage._requiredFloat {return false}
        if _storage._requiredDouble != other_storage._requiredDouble {return false}
        if _storage._requiredBool != other_storage._requiredBool {return false}
        if _storage._requiredString != other_storage._requiredString {return false}
        if _storage._requiredBytes != other_storage._requiredBytes {return false}
        if _storage._requiredGroup != other_storage._requiredGroup {return false}
        if _storage._requiredNestedMessage != other_storage._requiredNestedMessage {return false}
        if _storage._requiredForeignMessage != other_storage._requiredForeignMessage {return false}
        if _storage._requiredImportMessage != other_storage._requiredImportMessage {return false}
        if _storage._requiredNestedEnum != other_storage._requiredNestedEnum {return false}
        if _storage._requiredForeignEnum != other_storage._requiredForeignEnum {return false}
        if _storage._requiredImportEnum != other_storage._requiredImportEnum {return false}
        if _storage._requiredStringPiece != other_storage._requiredStringPiece {return false}
        if _storage._requiredCord != other_storage._requiredCord {return false}
        if _storage._requiredPublicImportMessage != other_storage._requiredPublicImportMessage {return false}
        if _storage._requiredLazyMessage != other_storage._requiredLazyMessage {return false}
        if _storage._defaultInt32 != other_storage._defaultInt32 {return false}
        if _storage._defaultInt64 != other_storage._defaultInt64 {return false}
        if _storage._defaultUint32 != other_storage._defaultUint32 {return false}
        if _storage._defaultUint64 != other_storage._defaultUint64 {return false}
        if _storage._defaultSint32 != other_storage._defaultSint32 {return false}
        if _storage._defaultSint64 != other_storage._defaultSint64 {return false}
        if _storage._defaultFixed32 != other_storage._defaultFixed32 {return false}
        if _storage._defaultFixed64 != other_storage._defaultFixed64 {return false}
        if _storage._defaultSfixed32 != other_storage._defaultSfixed32 {return false}
        if _storage._defaultSfixed64 != other_storage._defaultSfixed64 {return false}
        if _storage._defaultFloat != other_storage._defaultFloat {return false}
        if _storage._defaultDouble != other_storage._defaultDouble {return false}
        if _storage._defaultBool != other_storage._defaultBool {return false}
        if _storage._defaultString != other_storage._defaultString {return false}
        if _storage._defaultBytes != other_storage._defaultBytes {return false}
        if _storage._defaultNestedEnum != other_storage._defaultNestedEnum {return false}
        if _storage._defaultForeignEnum != other_storage._defaultForeignEnum {return false}
        if _storage._defaultImportEnum != other_storage._defaultImportEnum {return false}
        if _storage._defaultStringPiece != other_storage._defaultStringPiece {return false}
        if _storage._defaultCord != other_storage._defaultCord {return false}
        if _storage._oneofField != other_storage._oneofField {return false}
      }
      if unknownFields != other.unknownFields {return false}
      return true
    }
  }
}

struct ProtobufUnittest_TestSomeRequiredTypes: SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "TestSomeRequiredTypes"
  static let protoPackageName: String = "protobuf_unittest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .unique(proto: "required_int32", json: "requiredInt32"),
    2: .unique(proto: "required_float", json: "requiredFloat"),
    3: .unique(proto: "required_bool", json: "requiredBool"),
    4: .unique(proto: "required_string", json: "requiredString"),
    5: .unique(proto: "required_bytes", json: "requiredBytes"),
    6: .unique(proto: "required_nested_enum", json: "requiredNestedEnum"),
  ]

  ///   Singular
  private var _requiredInt32: Int32? = nil
  var requiredInt32: Int32 {
    get {return _requiredInt32 ?? 0}
    set {_requiredInt32 = newValue}
  }
  var hasRequiredInt32: Bool {
    return _requiredInt32 != nil
  }
  mutating func clearRequiredInt32() {
    return _requiredInt32 = nil
  }

  private var _requiredFloat: Float? = nil
  var requiredFloat: Float {
    get {return _requiredFloat ?? 0}
    set {_requiredFloat = newValue}
  }
  var hasRequiredFloat: Bool {
    return _requiredFloat != nil
  }
  mutating func clearRequiredFloat() {
    return _requiredFloat = nil
  }

  private var _requiredBool: Bool? = nil
  var requiredBool: Bool {
    get {return _requiredBool ?? false}
    set {_requiredBool = newValue}
  }
  var hasRequiredBool: Bool {
    return _requiredBool != nil
  }
  mutating func clearRequiredBool() {
    return _requiredBool = nil
  }

  private var _requiredString: String? = nil
  var requiredString: String {
    get {return _requiredString ?? ""}
    set {_requiredString = newValue}
  }
  var hasRequiredString: Bool {
    return _requiredString != nil
  }
  mutating func clearRequiredString() {
    return _requiredString = nil
  }

  private var _requiredBytes: Data? = nil
  var requiredBytes: Data {
    get {return _requiredBytes ?? Data()}
    set {_requiredBytes = newValue}
  }
  var hasRequiredBytes: Bool {
    return _requiredBytes != nil
  }
  mutating func clearRequiredBytes() {
    return _requiredBytes = nil
  }

  private var _requiredNestedEnum: ProtobufUnittest_TestSomeRequiredTypes.NestedEnum? = nil
  var requiredNestedEnum: ProtobufUnittest_TestSomeRequiredTypes.NestedEnum {
    get {return _requiredNestedEnum ?? ProtobufUnittest_TestSomeRequiredTypes.NestedEnum.foo}
    set {_requiredNestedEnum = newValue}
  }
  var hasRequiredNestedEnum: Bool {
    return _requiredNestedEnum != nil
  }
  mutating func clearRequiredNestedEnum() {
    return _requiredNestedEnum = nil
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum NestedEnum: SwiftProtobuf.Enum, SwiftProtobuf._ProtoNameProviding {
    typealias RawValue = Int
    case foo // = 1

    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
      1: .same(proto: "FOO"),
    ]

    init() {
      self = .foo
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 1: self = .foo
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .foo: return 1
      }
    }

  }

  init() {}

  public var isInitialized: Bool {
    if _requiredInt32 == nil {return false}
    if _requiredFloat == nil {return false}
    if _requiredBool == nil {return false}
    if _requiredString == nil {return false}
    if _requiredBytes == nil {return false}
    if _requiredNestedEnum == nil {return false}
    return true
  }

  mutating func _protobuf_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
    }
  }

  mutating func _protobuf_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 1: try decoder.decodeSingularInt32Field(value: &_requiredInt32)
    case 2: try decoder.decodeSingularFloatField(value: &_requiredFloat)
    case 3: try decoder.decodeSingularBoolField(value: &_requiredBool)
    case 4: try decoder.decodeSingularStringField(value: &_requiredString)
    case 5: try decoder.decodeSingularBytesField(value: &_requiredBytes)
    case 6: try decoder.decodeSingularEnumField(value: &_requiredNestedEnum)
    default: break
    }
  }

  func _protobuf_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = _requiredInt32 {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    }
    if let v = _requiredFloat {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 2)
    }
    if let v = _requiredBool {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    }
    if let v = _requiredString {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    }
    if let v = _requiredBytes {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 5)
    }
    if let v = _requiredNestedEnum {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_TestSomeRequiredTypes) -> Bool {
    if _requiredInt32 != other._requiredInt32 {return false}
    if _requiredFloat != other._requiredFloat {return false}
    if _requiredBool != other._requiredBool {return false}
    if _requiredString != other._requiredString {return false}
    if _requiredBytes != other._requiredBytes {return false}
    if _requiredNestedEnum != other._requiredNestedEnum {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
