// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: proto3_simple_optional.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

/// Simple file used to test that we can use both optional and non-optional fields
/// in proto3, and that the optional field is represented as a Swift Optional.
/// This is a simple test case that does not use any imports, so it should not
/// generate any imports in the Swift file, and should not require any special
/// handling in the compiler plugin.

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct SwiftProtoTesting_Proto3_SimpleOptional: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var nonOptional: String = String()

  var optional: String? = nil
  /// Returns true if `optional` has been explicitly set.
  var hasOptional: Bool {return self.optional != nil}
  /// Clears the value of `optional`. Subsequent reads from it will return its default value.
  mutating func clearOptional() {self.optional = nil}

  var nestedMessage: SwiftProtoTesting_Proto3_SimpleOptional.NestedMessage {
    get {return _nestedMessage ?? SwiftProtoTesting_Proto3_SimpleOptional.NestedMessage()}
    set {_nestedMessage = newValue}
  }
  /// Returns true if `nestedMessage` has been explicitly set.
  var hasNestedMessage: Bool {return self._nestedMessage != nil}
  /// Clears the value of `nestedMessage`. Subsequent reads from it will return its default value.
  mutating func clearNestedMessage() {self._nestedMessage = nil}

  var optionalNestedMessage: SwiftProtoTesting_Proto3_SimpleOptional.NestedMessage? = nil
  /// Returns true if `optionalNestedMessage` has been explicitly set.
  var hasOptionalNestedMessage: Bool {return self.optionalNestedMessage != nil}
  /// Clears the value of `optionalNestedMessage`. Subsequent reads from it will return its default value.
  mutating func clearOptionalNestedMessage() {self.optionalNestedMessage = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct NestedMessage: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var nestedNonOptional: String = String()

    var nestedOptional: String? = nil
    /// Returns true if `nestedOptional` has been explicitly set.
    var hasNestedOptional: Bool {return self.nestedOptional != nil}
    /// Clears the value of `nestedOptional`. Subsequent reads from it will return its default value.
    mutating func clearNestedOptional() {self.nestedOptional = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}

  fileprivate var _nestedMessage: SwiftProtoTesting_Proto3_SimpleOptional.NestedMessage? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "swift_proto_testing.proto3"

extension SwiftProtoTesting_Proto3_SimpleOptional: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SimpleOptional"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "non_optional"),
    2: .same(proto: "optional"),
    3: .standard(proto: "nested_message"),
    4: .standard(proto: "optional_nested_message"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.nonOptional) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.optional) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._nestedMessage) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self.optionalNestedMessage) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.nonOptional.isEmpty {
      try visitor.visitSingularStringField(value: self.nonOptional, fieldNumber: 1)
    }
    try { if let v = self.optional {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._nestedMessage {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self.optionalNestedMessage {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SwiftProtoTesting_Proto3_SimpleOptional, rhs: SwiftProtoTesting_Proto3_SimpleOptional) -> Bool {
    if lhs.nonOptional != rhs.nonOptional {return false}
    if lhs.optional != rhs.optional {return false}
    if lhs._nestedMessage != rhs._nestedMessage {return false}
    if lhs.optionalNestedMessage != rhs.optionalNestedMessage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SwiftProtoTesting_Proto3_SimpleOptional.NestedMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = SwiftProtoTesting_Proto3_SimpleOptional.protoMessageName + ".NestedMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "nested_non_optional"),
    2: .standard(proto: "nested_optional"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.nestedNonOptional) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.nestedOptional) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.nestedNonOptional.isEmpty {
      try visitor.visitSingularStringField(value: self.nestedNonOptional, fieldNumber: 1)
    }
    try { if let v = self.nestedOptional {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SwiftProtoTesting_Proto3_SimpleOptional.NestedMessage, rhs: SwiftProtoTesting_Proto3_SimpleOptional.NestedMessage) -> Bool {
    if lhs.nestedNonOptional != rhs.nestedNonOptional {return false}
    if lhs.nestedOptional != rhs.nestedOptional {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
