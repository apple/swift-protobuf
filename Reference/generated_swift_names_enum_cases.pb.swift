// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: generated_swift_names_enum_cases.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

/// See Makefile for the logic that generates this
/// Protoc errors imply this file is being generated incorrectly
/// Swift compile errors are probably bugs in protoc-gen-swift

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum ProtobufUnittestGenerated_GeneratedSwiftReservedEnum: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case none // = 0
  case adjusted // = 1
  case aggregateValue // = 2
  case allCases_ // = 3
  case allowAlias // = 4
  case alwaysPrintEnumsAsInts // = 5
  case annotation // = 6
  case any // = 7
  case anyExtensionField // = 8
  case anyMessageExtension // = 9
  case anyMessageStorage // = 10
  case anyUnpackError // = 11
  case api // = 12
  case appended // = 13
  case appendUintHex // = 14
  case appendUnknown // = 15
  case areAllInitialized // = 16
  case array // = 17
  case arrayDepth // = 18
  case arrayLiteral // = 19
  case arraySeparator // = 20
  case `as` // = 21
  case asciiOpenCurlyBracket // = 22
  case asciiZero // = 23
  case available // = 24
  case b // = 25
  case base64Values // = 26
  case baseAddress // = 27
  case baseType // = 28
  case begin // = 29
  case binary // = 30
  case binaryDecoder // = 31
  case binaryDecodingError // = 32
  case binaryDecodingOptions // = 33
  case binaryDelimited // = 34
  case binaryEncoder // = 35
  case binaryEncodingError // = 36
  case binaryEncodingMessageSetSizeVisitor // = 37
  case binaryEncodingMessageSetVisitor // = 38
  case binaryEncodingSizeVisitor // = 39
  case binaryEncodingVisitor // = 40
  case binaryOptions // = 41
  case body // = 42
  case bool // = 43
  case booleanLiteral // = 44
  case booleanLiteralType // = 45
  case boolValue // = 46
  case bytes // = 47
  case bytesInGroup // = 48
  case bytesRead // = 49
  case bytesValue // = 50
  case c // = 51
  case capitalizeNext // = 52
  case cardinality // = 53
  case ccEnableArenas // = 54
  case ccGenericServices // = 55
  case character // = 56
  case chars // = 57
  case `class` // = 58
  case clearAggregateValue // = 59
  case clearAllowAlias // = 60
  case clearBegin // = 61
  case clearCcEnableArenas // = 62
  case clearCcGenericServices // = 63
  case clearClientStreaming // = 64
  case clearCsharpNamespace // = 65
  case clearCtype // = 66
  case clearDefaultValue // = 67
  case clearDeprecated // = 68
  case clearDoubleValue // = 69
  case clearEnd // = 70
  case clearExtendee // = 71
  case clearExtensionValue // = 72
  case clearGoPackage // = 73
  case clearIdempotencyLevel // = 74
  case clearIdentifierValue // = 75
  case clearInputType // = 76
  case clearIsExtension // = 77
  case clearJavaGenerateEqualsAndHash // = 78
  case clearJavaGenericServices // = 79
  case clearJavaMultipleFiles // = 80
  case clearJavaOuterClassname // = 81
  case clearJavaPackage // = 82
  case clearJavaStringCheckUtf8 // = 83
  case clearJsonName // = 84
  case clearJstype // = 85
  case clearLabel // = 86
  case clearLazy // = 87
  case clearLeadingComments // = 88
  case clearMapEntry // = 89
  case clearMessageSetWireFormat // = 90
  case clearName // = 91
  case clearNamePart // = 92
  case clearNegativeIntValue // = 93
  case clearNoStandardDescriptorAccessor // = 94
  case clearNumber // = 95
  case clearObjcClassPrefix // = 96
  case clearOneofIndex // = 97
  case clearOptimizeFor // = 98
  case clearOptions // = 99
  case clearOutputType // = 100
  case clearPackage // = 101
  case clearPacked // = 102
  case clearPhpClassPrefix // = 103
  case clearPhpGenericServices // = 104
  case clearPhpMetadataNamespace // = 105
  case clearPhpNamespace // = 106
  case clearPositiveIntValue // = 107
  case clearProto3Optional // = 108
  case clearPyGenericServices // = 109
  case clearRubyPackage // = 110
  case clearServerStreaming // = 111
  case clearSourceCodeInfo // = 112
  case clearSourceContext // = 113
  case clearSourceFile // = 114
  case clearStart // = 115
  case clearStringValue // = 116
  case clearSwiftPrefix // = 117
  case clearSyntax // = 118
  case clearTrailingComments // = 119
  case clearType // = 120
  case clearTypeName // = 121
  case clearValue // = 122
  case clearWeak // = 123
  case clientStreaming // = 124
  case codePoint // = 125
  case codeUnits // = 126
  case collection // = 127
  case com // = 128
  case comma // = 129
  case contentsOf // = 130
  case contiguousBytes // = 131
  case count // = 132
  case countVarintsInBuffer // = 133
  case csharpNamespace // = 134
  case ctype // = 135
  case customCodable // = 136
  case customDebugStringConvertible // = 137
  case d // = 138
  case data // = 139
  case dataResult // = 140
  case date // = 141
  case daySec // = 142
  case daysSinceEpoch // = 143
  case debugDescription_ // = 144
  case decoded // = 145
  case decodedFromJsonnull // = 146
  case decodeExtensionField // = 147
  case decodeExtensionFieldsAsMessageSet // = 148
  case decodeJson // = 149
  case decodeMapField // = 150
  case decodeMessage // = 151
  case decoder // = 152
  case decodeRepeated // = 153
  case decodeRepeatedBoolField // = 154
  case decodeRepeatedBytesField // = 155
  case decodeRepeatedDoubleField // = 156
  case decodeRepeatedEnumField // = 157
  case decodeRepeatedFixed32Field // = 158
  case decodeRepeatedFixed64Field // = 159
  case decodeRepeatedFloatField // = 160
  case decodeRepeatedGroupField // = 161
  case decodeRepeatedInt32Field // = 162
  case decodeRepeatedInt64Field // = 163
  case decodeRepeatedMessageField // = 164
  case decodeRepeatedSfixed32Field // = 165
  case decodeRepeatedSfixed64Field // = 166
  case decodeRepeatedSint32Field // = 167
  case decodeRepeatedSint64Field // = 168
  case decodeRepeatedStringField // = 169
  case decodeRepeatedUint32Field // = 170
  case decodeRepeatedUint64Field // = 171
  case decodeSingular // = 172
  case decodeSingularBoolField // = 173
  case decodeSingularBytesField // = 174
  case decodeSingularDoubleField // = 175
  case decodeSingularEnumField // = 176
  case decodeSingularFixed32Field // = 177
  case decodeSingularFixed64Field // = 178
  case decodeSingularFloatField // = 179
  case decodeSingularGroupField // = 180
  case decodeSingularInt32Field // = 181
  case decodeSingularInt64Field // = 182
  case decodeSingularMessageField // = 183
  case decodeSingularSfixed32Field // = 184
  case decodeSingularSfixed64Field // = 185
  case decodeSingularSint32Field // = 186
  case decodeSingularSint64Field // = 187
  case decodeSingularStringField // = 188
  case decodeSingularUint32Field // = 189
  case decodeSingularUint64Field // = 190
  case decodeTextFormat // = 191
  case defaultAnyTypeUrlprefix // = 192
  case defaultValue // = 193
  case dependency // = 194
  case deprecated // = 195
  case description_ // = 196
  case descriptorProto // = 197
  case dictionary // = 198
  case dictionaryLiteral // = 199
  case digit // = 200
  case digit0 // = 201
  case digit1 // = 202
  case digitCount // = 203
  case digits // = 204
  case digitValue // = 205
  case discardableResult // = 206
  case discardUnknownFields // = 207
  case distance // = 208
  case double // = 209
  case doubleValue // = 210
  case duration // = 211
  case e // = 212
  case element // = 213
  case elements // = 214
  case emitExtensionFieldName // = 215
  case emitFieldName // = 216
  case emitFieldNumber // = 217
  case empty // = 218
  case emptyData // = 219
  case encodeAsBytes // = 220
  case encoded // = 221
  case encodedJsonstring // = 222
  case encodedSize // = 223
  case encodeField // = 224
  case encoder // = 225
  case end // = 226
  case endArray // = 227
  case endMessageField // = 228
  case endObject // = 229
  case endRegularField // = 230
  case `enum` // = 231
  case enumDescriptorProto // = 232
  case enumOptions // = 233
  case enumReservedRange // = 234
  case enumType // = 235
  case enumvalue // = 236
  case enumValueDescriptorProto // = 237
  case enumValueOptions // = 238
  case equatable // = 239
  case error // = 240
  case expressibleByArrayLiteral // = 241
  case expressibleByDictionaryLiteral // = 242
  case ext // = 243
  case extDecoder // = 244
  case extendedGraphemeClusterLiteral // = 245
  case extendedGraphemeClusterLiteralType // = 246
  case extendee // = 247
  case extensibleMessage // = 248
  case `extension` // = 249
  case extensionField // = 250
  case extensionFieldNumber // = 251
  case extensionFieldValueSet // = 252
  case extensionMap // = 253
  case extensionRange // = 254
  case extensionRangeOptions // = 255
  case extensions // = 256
  case extras // = 257
  case f // = 258
  case `false` // = 259
  case field // = 260
  case fieldData // = 261
  case fieldDescriptorProto // = 262
  case fieldMask // = 263
  case fieldName // = 264
  case fieldNameCount // = 265
  case fieldNum // = 266
  case fieldNumber // = 267
  case fieldNumberForProto // = 268
  case fieldOptions // = 269
  case fields // = 270
  case fieldSize // = 271
  case fieldTag // = 272
  case fieldType // = 273
  case file // = 274
  case fileDescriptorProto // = 275
  case fileDescriptorSet // = 276
  case fileName // = 277
  case fileOptions // = 278
  case filter // = 279
  case first // = 280
  case firstItem // = 281
  case float // = 282
  case floatLiteral // = 283
  case floatLiteralType // = 284
  case floatValue // = 285
  case forMessageName // = 286
  case formUnion // = 287
  case forReadingFrom // = 288
  case forTypeURL // = 289
  case forwardParser // = 290
  case forWritingInto // = 291
  case from // = 292
  case fromAscii2 // = 293
  case fromAscii4 // = 294
  case fromByteOffset // = 295
  case fromHexDigit // = 296
  case `func` // = 297
  case g // = 298
  case generatedCodeInfo // = 299
  case get // = 300
  case getExtensionValue // = 301
  case googleapis // = 302
  case googleProtobufAny // = 303
  case googleProtobufApi // = 304
  case googleProtobufBoolValue // = 305
  case googleProtobufBytesValue // = 306
  case googleProtobufDescriptorProto // = 307
  case googleProtobufDoubleValue // = 308
  case googleProtobufDuration // = 309
  case googleProtobufEmpty // = 310
  case googleProtobufEnum // = 311
  case googleProtobufEnumDescriptorProto // = 312
  case googleProtobufEnumOptions // = 313
  case googleProtobufEnumValue // = 314
  case googleProtobufEnumValueDescriptorProto // = 315
  case googleProtobufEnumValueOptions // = 316
  case googleProtobufExtensionRangeOptions // = 317
  case googleProtobufField // = 318
  case googleProtobufFieldDescriptorProto // = 319
  case googleProtobufFieldMask // = 320
  case googleProtobufFieldOptions // = 321
  case googleProtobufFileDescriptorProto // = 322
  case googleProtobufFileDescriptorSet // = 323
  case googleProtobufFileOptions // = 324
  case googleProtobufFloatValue // = 325
  case googleProtobufGeneratedCodeInfo // = 326
  case googleProtobufInt32Value // = 327
  case googleProtobufInt64Value // = 328
  case googleProtobufListValue // = 329
  case googleProtobufMessageOptions // = 330
  case googleProtobufMethod // = 331
  case googleProtobufMethodDescriptorProto // = 332
  case googleProtobufMethodOptions // = 333
  case googleProtobufMixin // = 334
  case googleProtobufNullValue // = 335
  case googleProtobufOneofDescriptorProto // = 336
  case googleProtobufOneofOptions // = 337
  case googleProtobufOption // = 338
  case googleProtobufServiceDescriptorProto // = 339
  case googleProtobufServiceOptions // = 340
  case googleProtobufSourceCodeInfo // = 341
  case googleProtobufSourceContext // = 342
  case googleProtobufStringValue // = 343
  case googleProtobufStruct // = 344
  case googleProtobufSyntax // = 345
  case googleProtobufTimestamp // = 346
  case googleProtobufType // = 347
  case googleProtobufUint32Value // = 348
  case googleProtobufUint64Value // = 349
  case googleProtobufUninterpretedOption // = 350
  case googleProtobufValue // = 351
  case goPackage // = 352
  case group // = 353
  case groupFieldNumberStack // = 354
  case groupSize // = 355
  case h // = 356
  case hadOneofValue // = 357
  case handleConflictingOneOf // = 358
  case hasAggregateValue // = 359
  case hasAllowAlias // = 360
  case hasBegin // = 361
  case hasCcEnableArenas // = 362
  case hasCcGenericServices // = 363
  case hasClientStreaming // = 364
  case hasCsharpNamespace // = 365
  case hasCtype // = 366
  case hasDefaultValue // = 367
  case hasDeprecated // = 368
  case hasDoubleValue // = 369
  case hasEnd // = 370
  case hasExtendee // = 371
  case hasExtensionValue // = 372
  case hasGoPackage // = 373
  case hash // = 374
  case hashable // = 375
  case hasher // = 376
  case hashValue_ // = 377
  case hashVisitor // = 378
  case hasIdempotencyLevel // = 379
  case hasIdentifierValue // = 380
  case hasInputType // = 381
  case hasIsExtension // = 382
  case hasJavaGenerateEqualsAndHash // = 383
  case hasJavaGenericServices // = 384
  case hasJavaMultipleFiles // = 385
  case hasJavaOuterClassname // = 386
  case hasJavaPackage // = 387
  case hasJavaStringCheckUtf8 // = 388
  case hasJsonName // = 389
  case hasJstype // = 390
  case hasLabel // = 391
  case hasLazy // = 392
  case hasLeadingComments // = 393
  case hasMapEntry // = 394
  case hasMessageSetWireFormat // = 395
  case hasName // = 396
  case hasNamePart // = 397
  case hasNegativeIntValue // = 398
  case hasNoStandardDescriptorAccessor // = 399
  case hasNumber // = 400
  case hasObjcClassPrefix // = 401
  case hasOneofIndex // = 402
  case hasOptimizeFor // = 403
  case hasOptions // = 404
  case hasOutputType // = 405
  case hasPackage // = 406
  case hasPacked // = 407
  case hasPhpClassPrefix // = 408
  case hasPhpGenericServices // = 409
  case hasPhpMetadataNamespace // = 410
  case hasPhpNamespace // = 411
  case hasPositiveIntValue // = 412
  case hasProto3Optional // = 413
  case hasPyGenericServices // = 414
  case hasRubyPackage // = 415
  case hasServerStreaming // = 416
  case hasSourceCodeInfo // = 417
  case hasSourceContext // = 418
  case hasSourceFile // = 419
  case hasStart // = 420
  case hasStringValue // = 421
  case hasSwiftPrefix // = 422
  case hasSyntax // = 423
  case hasTrailingComments // = 424
  case hasType // = 425
  case hasTypeName // = 426
  case hasValue // = 427
  case hasWeak // = 428
  case hour // = 429
  case i // = 430
  case idempotencyLevel // = 431
  case identifierValue // = 432
  case `if` // = 433
  case ignoreUnknownFields // = 434
  case index // = 435
  case init_ // = 436
  case `inout` // = 437
  case inputType // = 438
  case insert // = 439
  case int // = 440
  case int32 // = 441
  case int32Value // = 442
  case int64 // = 443
  case int64Value // = 444
  case int8 // = 445
  case integerLiteral // = 446
  case integerLiteralType // = 447
  case intern // = 448
  case `internal` // = 449
  case internalState // = 450
  case into // = 451
  case ints // = 452
  case isA // = 453
  case isEqual // = 454
  case isEqualTo // = 455
  case isExtension // = 456
  case isInitialized // = 457
  case itemTagsEncodedSize // = 458
  case iterator // = 459
  case i2166136261 // = 460
  case javaGenerateEqualsAndHash // = 461
  case javaGenericServices // = 462
  case javaMultipleFiles // = 463
  case javaOuterClassname // = 464
  case javaPackage // = 465
  case javaStringCheckUtf8 // = 466
  case jsondecoder // = 467
  case jsondecodingError // = 468
  case jsondecodingOptions // = 469
  case jsonEncoder // = 470
  case jsonencodingError // = 471
  case jsonencodingOptions // = 472
  case jsonencodingVisitor // = 473
  case jsonmapEncodingVisitor // = 474
  case jsonName // = 475
  case jsonPath // = 476
  case jsonPaths // = 477
  case jsonscanner // = 478
  case jsonString // = 479
  case jsonText // = 480
  case jsonUtf8Data // = 481
  case jstype // = 482
  case k // = 483
  case key // = 484
  case keyField // = 485
  case keyType // = 486
  case kind // = 487
  case l // = 488
  case label // = 489
  case lazy // = 490
  case leadingComments // = 491
  case leadingDetachedComments // = 492
  case length // = 493
  case lessThan // = 494
  case `let` // = 495
  case lhs // = 496
  case list // = 497
  case listOfMessages // = 498
  case listValue // = 499
  case littleEndian // = 500
  case littleEndianBytes // = 501
  case load // = 502
  case localHasher // = 503
  case location // = 504
  case m // = 505
  case major // = 506
  case makeIterator // = 507
  case mapEntry // = 508
  case mapHash // = 509
  case mapKeyType // = 510
  case mapNameResolver // = 511
  case mapToMessages // = 512
  case mapValueType // = 513
  case mapVisitor // = 514
  case mdayStart // = 515
  case merge // = 516
  case message // = 517
  case messageDepthLimit // = 518
  case messageExtension // = 519
  case messageImplementationBase // = 520
  case messageOptions // = 521
  case messageSet // = 522
  case messageSetWireFormat // = 523
  case messageType // = 524
  case method // = 525
  case methodDescriptorProto // = 526
  case methodOptions // = 527
  case methods // = 528
  case minor // = 529
  case mixin // = 530
  case mixins // = 531
  case modifier // = 532
  case modify // = 533
  case month // = 534
  case msgExtension // = 535
  case mutating // = 536
  case n // = 537
  case name // = 538
  case nameDescription // = 539
  case nameMap // = 540
  case namePart // = 541
  case nameResolver // = 542
  case names // = 543
  case nanos // = 544
  case nativeBytes // = 545
  case nativeEndianBytes // = 546
  case negativeIntValue // = 547
  case nestedType // = 548
  case newL // = 549
  case newList // = 550
  case newValue // = 551
  case nextByte // = 552
  case nextFieldNumber // = 553
  case `nil` // = 554
  case nilLiteral // = 555
  case noStandardDescriptorAccessor // = 556
  case nullValue // = 557
  case number // = 558
  case numberValue // = 559
  case objcClassPrefix // = 560
  case of // = 561
  case oneofDecl // = 562
  case oneofDescriptorProto // = 563
  case oneofIndex // = 564
  case oneofOptions // = 565
  case oneofs // = 566
  case oneOfKind // = 567
  case optimizeFor // = 568
  case optimizeMode // = 569
  case option // = 570
  case optionalEnumExtensionField // = 571
  case optionalExtensionField // = 572
  case optionalGroupExtensionField // = 573
  case optionalMessageExtensionField // = 574
  case options // = 575
  case other // = 576
  case others // = 577
  case out // = 578
  case outputType // = 579
  case p // = 580
  case package // = 581
  case packed // = 582
  case packedEnumExtensionField // = 583
  case packedExtensionField // = 584
  case padding // = 585
  case parent // = 586
  case parse // = 587
  case partial // = 588
  case path // = 589
  case paths // = 590
  case payload // = 591
  case payloadSize // = 592
  case phpClassPrefix // = 593
  case phpGenericServices // = 594
  case phpMetadataNamespace // = 595
  case phpNamespace // = 596
  case pointer // = 597
  case pos // = 598
  case positiveIntValue // = 599
  case prefix // = 600
  case preserveProtoFieldNames // = 601
  case preTraverse // = 602
  case printUnknownFields // = 603
  case proto2 // = 604
  case proto3DefaultValue // = 605
  case proto3Optional // = 606
  case protobufApiversionCheck // = 607
  case protobufApiversion2 // = 608
  case protobufBool // = 609
  case protobufBytes // = 610
  case protobufDouble // = 611
  case protobufEnumMap // = 612
  case protobufExtension // = 613
  case protobufFixed32 // = 614
  case protobufFixed64 // = 615
  case protobufFloat // = 616
  case protobufInt32 // = 617
  case protobufInt64 // = 618
  case protobufMap // = 619
  case protobufMessageMap // = 620
  case protobufSfixed32 // = 621
  case protobufSfixed64 // = 622
  case protobufSint32 // = 623
  case protobufSint64 // = 624
  case protobufString // = 625
  case protobufUint32 // = 626
  case protobufUint64 // = 627
  case protobufExtensionFieldValues // = 628
  case protobufFieldNumber // = 629
  case protobufGeneratedIsEqualTo // = 630
  case protobufNameMap // = 631
  case protobufNewField // = 632
  case protobufPackage // = 633
  case `protocol` // = 634
  case protoFieldName // = 635
  case protoMessageName // = 636
  case protoNameProviding // = 637
  case protoPaths // = 638
  case protoSendable // = 639
  case `public` // = 640
  case publicDependency // = 641
  case putBoolValue // = 642
  case putBytesValue // = 643
  case putDoubleValue // = 644
  case putEnumValue // = 645
  case putFixedUint32 // = 646
  case putFixedUint64 // = 647
  case putFloatValue // = 648
  case putInt64 // = 649
  case putStringValue // = 650
  case putUint64 // = 651
  case putUint64Hex // = 652
  case putVarInt // = 653
  case putZigZagVarInt // = 654
  case pyGenericServices // = 655
  case rawChars // = 656
  case rawRepresentable // = 657
  case rawValue_ // = 658
  case read4HexDigits // = 659
  case register // = 660
  case repeatedEnumExtensionField // = 661
  case repeatedExtensionField // = 662
  case repeatedGroupExtensionField // = 663
  case repeatedMessageExtensionField // = 664
  case requestStreaming // = 665
  case requestTypeURL // = 666
  case requiredSize // = 667
  case reservedName // = 668
  case reservedRange // = 669
  case responseStreaming // = 670
  case responseTypeURL // = 671
  case result // = 672
  case `rethrows` // = 673
  case `return` // = 674
  case returnType // = 675
  case revision // = 676
  case rhs // = 677
  case root // = 678
  case rubyPackage // = 679
  case s // = 680
  case sawBackslash // = 681
  case sawSection4Characters // = 682
  case sawSection5Characters // = 683
  case scanner // = 684
  case seconds // = 685
  case self_ // = 686
  case sendable // = 687
  case separator // = 688
  case serialize // = 689
  case serializedData // = 690
  case serializedSize // = 691
  case serverStreaming // = 692
  case service // = 693
  case serviceDescriptorProto // = 694
  case serviceOptions // = 695
  case set // = 696
  case setExtensionValue // = 697
  case shift // = 698
  case simpleExtensionMap // = 699
  case sizer // = 700
  case source // = 701
  case sourceCodeInfo // = 702
  case sourceContext // = 703
  case sourceEncoding // = 704
  case sourceFile // = 705
  case span // = 706
  case split // = 707
  case start // = 708
  case startArray // = 709
  case startArrayObject // = 710
  case startField // = 711
  case startIndex // = 712
  case startMessageField // = 713
  case startObject // = 714
  case startRegularField // = 715
  case state // = 716
  case `static` // = 717
  case staticString // = 718
  case storage // = 719
  case string // = 720
  case stringLiteral // = 721
  case stringLiteralType // = 722
  case stringResult // = 723
  case stringValue // = 724
  case `struct` // = 725
  case structValue // = 726
  case subDecoder // = 727
  case `subscript` // = 728
  case subVisitor // = 729
  case swift // = 730
  case swiftPrefix // = 731
  case swiftProtobuf // = 732
  case syntax // = 733
  case t // = 734
  case tag // = 735
  case terminator // = 736
  case testDecoder // = 737
  case text // = 738
  case textDecoder // = 739
  case textFormatDecoder // = 740
  case textFormatDecodingError // = 741
  case textFormatDecodingOptions // = 742
  case textFormatEncodingOptions // = 743
  case textFormatEncodingVisitor // = 744
  case textFormatString // = 745
  case `throws` // = 746
  case timeInterval // = 747
  case timeIntervalSince1970 // = 748
  case timeIntervalSinceReferenceDate // = 749
  case timestamp // = 750
  case total // = 751
  case totalArrayDepth // = 752
  case totalSize // = 753
  case trailingComments // = 754
  case traverse // = 755
  case `true` // = 756
  case `try` // = 757
  case type // = 758
  case `typealias` // = 759
  case typeEnum // = 760
  case typeName // = 761
  case typePrefix // = 762
  case typeStart // = 763
  case typeUnknown // = 764
  case typeURL // = 765
  case uint32 // = 766
  case uint32Value // = 767
  case uint64 // = 768
  case uint64Value // = 769
  case uint8 // = 770
  case unicodeScalarLiteral // = 771
  case unicodeScalarLiteralType // = 772
  case unicodeScalars // = 773
  case unicodeScalarView // = 774
  case uninterpretedOption // = 775
  case union // = 776
  case uniqueStorage // = 777
  case unknown // = 778
  case unknownFields // = 779
  case unknownStorage // = 780
  case unpackTo // = 781
  case unsafeBufferPointer // = 782
  case unsafeMutablePointer // = 783
  case unsafeMutableRawBufferPointer // = 784
  case unsafeMutableRawPointer // = 785
  case unsafeRawBufferPointer // = 786
  case unsafeRawPointer // = 787
  case updatedOptions // = 788
  case url // = 789
  case utf8 // = 790
  case utf8Ptr // = 791
  case utf8ToDouble // = 792
  case utf8View // = 793
  case v // = 794
  case value // = 795
  case valueField // = 796
  case values // = 797
  case valueType // = 798
  case `var` // = 799
  case version // = 800
  case versionString // = 801
  case visitExtensionFields // = 802
  case visitExtensionFieldsAsMessageSet // = 803
  case visitMapField // = 804
  case visitor // = 805
  case visitPacked // = 806
  case visitPackedBoolField // = 807
  case visitPackedDoubleField // = 808
  case visitPackedEnumField // = 809
  case visitPackedFixed32Field // = 810
  case visitPackedFixed64Field // = 811
  case visitPackedFloatField // = 812
  case visitPackedInt32Field // = 813
  case visitPackedInt64Field // = 814
  case visitPackedSfixed32Field // = 815
  case visitPackedSfixed64Field // = 816
  case visitPackedSint32Field // = 817
  case visitPackedSint64Field // = 818
  case visitPackedUint32Field // = 819
  case visitPackedUint64Field // = 820
  case visitRepeated // = 821
  case visitRepeatedBoolField // = 822
  case visitRepeatedBytesField // = 823
  case visitRepeatedDoubleField // = 824
  case visitRepeatedEnumField // = 825
  case visitRepeatedFixed32Field // = 826
  case visitRepeatedFixed64Field // = 827
  case visitRepeatedFloatField // = 828
  case visitRepeatedGroupField // = 829
  case visitRepeatedInt32Field // = 830
  case visitRepeatedInt64Field // = 831
  case visitRepeatedMessageField // = 832
  case visitRepeatedSfixed32Field // = 833
  case visitRepeatedSfixed64Field // = 834
  case visitRepeatedSint32Field // = 835
  case visitRepeatedSint64Field // = 836
  case visitRepeatedStringField // = 837
  case visitRepeatedUint32Field // = 838
  case visitRepeatedUint64Field // = 839
  case visitSingular // = 840
  case visitSingularBoolField // = 841
  case visitSingularBytesField // = 842
  case visitSingularDoubleField // = 843
  case visitSingularEnumField // = 844
  case visitSingularFixed32Field // = 845
  case visitSingularFixed64Field // = 846
  case visitSingularFloatField // = 847
  case visitSingularGroupField // = 848
  case visitSingularInt32Field // = 849
  case visitSingularInt64Field // = 850
  case visitSingularMessageField // = 851
  case visitSingularSfixed32Field // = 852
  case visitSingularSfixed64Field // = 853
  case visitSingularSint32Field // = 854
  case visitSingularSint64Field // = 855
  case visitSingularStringField // = 856
  case visitSingularUint32Field // = 857
  case visitSingularUint64Field // = 858
  case visitUnknown // = 859
  case wasDecoded // = 860
  case weak // = 861
  case weakDependency // = 862
  case `where` // = 863
  case wireFormat // = 864
  case with // = 865
  case withUnsafeBytes // = 866
  case withUnsafeMutableBytes // = 867
  case work // = 868
  case wrappedType // = 869
  case written // = 870
  case yday // = 871
  case UNRECOGNIZED(Int)

  init() {
    self = .none
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .none
    case 1: self = .adjusted
    case 2: self = .aggregateValue
    case 3: self = .allCases_
    case 4: self = .allowAlias
    case 5: self = .alwaysPrintEnumsAsInts
    case 6: self = .annotation
    case 7: self = .any
    case 8: self = .anyExtensionField
    case 9: self = .anyMessageExtension
    case 10: self = .anyMessageStorage
    case 11: self = .anyUnpackError
    case 12: self = .api
    case 13: self = .appended
    case 14: self = .appendUintHex
    case 15: self = .appendUnknown
    case 16: self = .areAllInitialized
    case 17: self = .array
    case 18: self = .arrayDepth
    case 19: self = .arrayLiteral
    case 20: self = .arraySeparator
    case 21: self = .as
    case 22: self = .asciiOpenCurlyBracket
    case 23: self = .asciiZero
    case 24: self = .available
    case 25: self = .b
    case 26: self = .base64Values
    case 27: self = .baseAddress
    case 28: self = .baseType
    case 29: self = .begin
    case 30: self = .binary
    case 31: self = .binaryDecoder
    case 32: self = .binaryDecodingError
    case 33: self = .binaryDecodingOptions
    case 34: self = .binaryDelimited
    case 35: self = .binaryEncoder
    case 36: self = .binaryEncodingError
    case 37: self = .binaryEncodingMessageSetSizeVisitor
    case 38: self = .binaryEncodingMessageSetVisitor
    case 39: self = .binaryEncodingSizeVisitor
    case 40: self = .binaryEncodingVisitor
    case 41: self = .binaryOptions
    case 42: self = .body
    case 43: self = .bool
    case 44: self = .booleanLiteral
    case 45: self = .booleanLiteralType
    case 46: self = .boolValue
    case 47: self = .bytes
    case 48: self = .bytesInGroup
    case 49: self = .bytesRead
    case 50: self = .bytesValue
    case 51: self = .c
    case 52: self = .capitalizeNext
    case 53: self = .cardinality
    case 54: self = .ccEnableArenas
    case 55: self = .ccGenericServices
    case 56: self = .character
    case 57: self = .chars
    case 58: self = .class
    case 59: self = .clearAggregateValue
    case 60: self = .clearAllowAlias
    case 61: self = .clearBegin
    case 62: self = .clearCcEnableArenas
    case 63: self = .clearCcGenericServices
    case 64: self = .clearClientStreaming
    case 65: self = .clearCsharpNamespace
    case 66: self = .clearCtype
    case 67: self = .clearDefaultValue
    case 68: self = .clearDeprecated
    case 69: self = .clearDoubleValue
    case 70: self = .clearEnd
    case 71: self = .clearExtendee
    case 72: self = .clearExtensionValue
    case 73: self = .clearGoPackage
    case 74: self = .clearIdempotencyLevel
    case 75: self = .clearIdentifierValue
    case 76: self = .clearInputType
    case 77: self = .clearIsExtension
    case 78: self = .clearJavaGenerateEqualsAndHash
    case 79: self = .clearJavaGenericServices
    case 80: self = .clearJavaMultipleFiles
    case 81: self = .clearJavaOuterClassname
    case 82: self = .clearJavaPackage
    case 83: self = .clearJavaStringCheckUtf8
    case 84: self = .clearJsonName
    case 85: self = .clearJstype
    case 86: self = .clearLabel
    case 87: self = .clearLazy
    case 88: self = .clearLeadingComments
    case 89: self = .clearMapEntry
    case 90: self = .clearMessageSetWireFormat
    case 91: self = .clearName
    case 92: self = .clearNamePart
    case 93: self = .clearNegativeIntValue
    case 94: self = .clearNoStandardDescriptorAccessor
    case 95: self = .clearNumber
    case 96: self = .clearObjcClassPrefix
    case 97: self = .clearOneofIndex
    case 98: self = .clearOptimizeFor
    case 99: self = .clearOptions
    case 100: self = .clearOutputType
    case 101: self = .clearPackage
    case 102: self = .clearPacked
    case 103: self = .clearPhpClassPrefix
    case 104: self = .clearPhpGenericServices
    case 105: self = .clearPhpMetadataNamespace
    case 106: self = .clearPhpNamespace
    case 107: self = .clearPositiveIntValue
    case 108: self = .clearProto3Optional
    case 109: self = .clearPyGenericServices
    case 110: self = .clearRubyPackage
    case 111: self = .clearServerStreaming
    case 112: self = .clearSourceCodeInfo
    case 113: self = .clearSourceContext
    case 114: self = .clearSourceFile
    case 115: self = .clearStart
    case 116: self = .clearStringValue
    case 117: self = .clearSwiftPrefix
    case 118: self = .clearSyntax
    case 119: self = .clearTrailingComments
    case 120: self = .clearType
    case 121: self = .clearTypeName
    case 122: self = .clearValue
    case 123: self = .clearWeak
    case 124: self = .clientStreaming
    case 125: self = .codePoint
    case 126: self = .codeUnits
    case 127: self = .collection
    case 128: self = .com
    case 129: self = .comma
    case 130: self = .contentsOf
    case 131: self = .contiguousBytes
    case 132: self = .count
    case 133: self = .countVarintsInBuffer
    case 134: self = .csharpNamespace
    case 135: self = .ctype
    case 136: self = .customCodable
    case 137: self = .customDebugStringConvertible
    case 138: self = .d
    case 139: self = .data
    case 140: self = .dataResult
    case 141: self = .date
    case 142: self = .daySec
    case 143: self = .daysSinceEpoch
    case 144: self = .debugDescription_
    case 145: self = .decoded
    case 146: self = .decodedFromJsonnull
    case 147: self = .decodeExtensionField
    case 148: self = .decodeExtensionFieldsAsMessageSet
    case 149: self = .decodeJson
    case 150: self = .decodeMapField
    case 151: self = .decodeMessage
    case 152: self = .decoder
    case 153: self = .decodeRepeated
    case 154: self = .decodeRepeatedBoolField
    case 155: self = .decodeRepeatedBytesField
    case 156: self = .decodeRepeatedDoubleField
    case 157: self = .decodeRepeatedEnumField
    case 158: self = .decodeRepeatedFixed32Field
    case 159: self = .decodeRepeatedFixed64Field
    case 160: self = .decodeRepeatedFloatField
    case 161: self = .decodeRepeatedGroupField
    case 162: self = .decodeRepeatedInt32Field
    case 163: self = .decodeRepeatedInt64Field
    case 164: self = .decodeRepeatedMessageField
    case 165: self = .decodeRepeatedSfixed32Field
    case 166: self = .decodeRepeatedSfixed64Field
    case 167: self = .decodeRepeatedSint32Field
    case 168: self = .decodeRepeatedSint64Field
    case 169: self = .decodeRepeatedStringField
    case 170: self = .decodeRepeatedUint32Field
    case 171: self = .decodeRepeatedUint64Field
    case 172: self = .decodeSingular
    case 173: self = .decodeSingularBoolField
    case 174: self = .decodeSingularBytesField
    case 175: self = .decodeSingularDoubleField
    case 176: self = .decodeSingularEnumField
    case 177: self = .decodeSingularFixed32Field
    case 178: self = .decodeSingularFixed64Field
    case 179: self = .decodeSingularFloatField
    case 180: self = .decodeSingularGroupField
    case 181: self = .decodeSingularInt32Field
    case 182: self = .decodeSingularInt64Field
    case 183: self = .decodeSingularMessageField
    case 184: self = .decodeSingularSfixed32Field
    case 185: self = .decodeSingularSfixed64Field
    case 186: self = .decodeSingularSint32Field
    case 187: self = .decodeSingularSint64Field
    case 188: self = .decodeSingularStringField
    case 189: self = .decodeSingularUint32Field
    case 190: self = .decodeSingularUint64Field
    case 191: self = .decodeTextFormat
    case 192: self = .defaultAnyTypeUrlprefix
    case 193: self = .defaultValue
    case 194: self = .dependency
    case 195: self = .deprecated
    case 196: self = .description_
    case 197: self = .descriptorProto
    case 198: self = .dictionary
    case 199: self = .dictionaryLiteral
    case 200: self = .digit
    case 201: self = .digit0
    case 202: self = .digit1
    case 203: self = .digitCount
    case 204: self = .digits
    case 205: self = .digitValue
    case 206: self = .discardableResult
    case 207: self = .discardUnknownFields
    case 208: self = .distance
    case 209: self = .double
    case 210: self = .doubleValue
    case 211: self = .duration
    case 212: self = .e
    case 213: self = .element
    case 214: self = .elements
    case 215: self = .emitExtensionFieldName
    case 216: self = .emitFieldName
    case 217: self = .emitFieldNumber
    case 218: self = .empty
    case 219: self = .emptyData
    case 220: self = .encodeAsBytes
    case 221: self = .encoded
    case 222: self = .encodedJsonstring
    case 223: self = .encodedSize
    case 224: self = .encodeField
    case 225: self = .encoder
    case 226: self = .end
    case 227: self = .endArray
    case 228: self = .endMessageField
    case 229: self = .endObject
    case 230: self = .endRegularField
    case 231: self = .enum
    case 232: self = .enumDescriptorProto
    case 233: self = .enumOptions
    case 234: self = .enumReservedRange
    case 235: self = .enumType
    case 236: self = .enumvalue
    case 237: self = .enumValueDescriptorProto
    case 238: self = .enumValueOptions
    case 239: self = .equatable
    case 240: self = .error
    case 241: self = .expressibleByArrayLiteral
    case 242: self = .expressibleByDictionaryLiteral
    case 243: self = .ext
    case 244: self = .extDecoder
    case 245: self = .extendedGraphemeClusterLiteral
    case 246: self = .extendedGraphemeClusterLiteralType
    case 247: self = .extendee
    case 248: self = .extensibleMessage
    case 249: self = .extension
    case 250: self = .extensionField
    case 251: self = .extensionFieldNumber
    case 252: self = .extensionFieldValueSet
    case 253: self = .extensionMap
    case 254: self = .extensionRange
    case 255: self = .extensionRangeOptions
    case 256: self = .extensions
    case 257: self = .extras
    case 258: self = .f
    case 259: self = .false
    case 260: self = .field
    case 261: self = .fieldData
    case 262: self = .fieldDescriptorProto
    case 263: self = .fieldMask
    case 264: self = .fieldName
    case 265: self = .fieldNameCount
    case 266: self = .fieldNum
    case 267: self = .fieldNumber
    case 268: self = .fieldNumberForProto
    case 269: self = .fieldOptions
    case 270: self = .fields
    case 271: self = .fieldSize
    case 272: self = .fieldTag
    case 273: self = .fieldType
    case 274: self = .file
    case 275: self = .fileDescriptorProto
    case 276: self = .fileDescriptorSet
    case 277: self = .fileName
    case 278: self = .fileOptions
    case 279: self = .filter
    case 280: self = .first
    case 281: self = .firstItem
    case 282: self = .float
    case 283: self = .floatLiteral
    case 284: self = .floatLiteralType
    case 285: self = .floatValue
    case 286: self = .forMessageName
    case 287: self = .formUnion
    case 288: self = .forReadingFrom
    case 289: self = .forTypeURL
    case 290: self = .forwardParser
    case 291: self = .forWritingInto
    case 292: self = .from
    case 293: self = .fromAscii2
    case 294: self = .fromAscii4
    case 295: self = .fromByteOffset
    case 296: self = .fromHexDigit
    case 297: self = .func
    case 298: self = .g
    case 299: self = .generatedCodeInfo
    case 300: self = .get
    case 301: self = .getExtensionValue
    case 302: self = .googleapis
    case 303: self = .googleProtobufAny
    case 304: self = .googleProtobufApi
    case 305: self = .googleProtobufBoolValue
    case 306: self = .googleProtobufBytesValue
    case 307: self = .googleProtobufDescriptorProto
    case 308: self = .googleProtobufDoubleValue
    case 309: self = .googleProtobufDuration
    case 310: self = .googleProtobufEmpty
    case 311: self = .googleProtobufEnum
    case 312: self = .googleProtobufEnumDescriptorProto
    case 313: self = .googleProtobufEnumOptions
    case 314: self = .googleProtobufEnumValue
    case 315: self = .googleProtobufEnumValueDescriptorProto
    case 316: self = .googleProtobufEnumValueOptions
    case 317: self = .googleProtobufExtensionRangeOptions
    case 318: self = .googleProtobufField
    case 319: self = .googleProtobufFieldDescriptorProto
    case 320: self = .googleProtobufFieldMask
    case 321: self = .googleProtobufFieldOptions
    case 322: self = .googleProtobufFileDescriptorProto
    case 323: self = .googleProtobufFileDescriptorSet
    case 324: self = .googleProtobufFileOptions
    case 325: self = .googleProtobufFloatValue
    case 326: self = .googleProtobufGeneratedCodeInfo
    case 327: self = .googleProtobufInt32Value
    case 328: self = .googleProtobufInt64Value
    case 329: self = .googleProtobufListValue
    case 330: self = .googleProtobufMessageOptions
    case 331: self = .googleProtobufMethod
    case 332: self = .googleProtobufMethodDescriptorProto
    case 333: self = .googleProtobufMethodOptions
    case 334: self = .googleProtobufMixin
    case 335: self = .googleProtobufNullValue
    case 336: self = .googleProtobufOneofDescriptorProto
    case 337: self = .googleProtobufOneofOptions
    case 338: self = .googleProtobufOption
    case 339: self = .googleProtobufServiceDescriptorProto
    case 340: self = .googleProtobufServiceOptions
    case 341: self = .googleProtobufSourceCodeInfo
    case 342: self = .googleProtobufSourceContext
    case 343: self = .googleProtobufStringValue
    case 344: self = .googleProtobufStruct
    case 345: self = .googleProtobufSyntax
    case 346: self = .googleProtobufTimestamp
    case 347: self = .googleProtobufType
    case 348: self = .googleProtobufUint32Value
    case 349: self = .googleProtobufUint64Value
    case 350: self = .googleProtobufUninterpretedOption
    case 351: self = .googleProtobufValue
    case 352: self = .goPackage
    case 353: self = .group
    case 354: self = .groupFieldNumberStack
    case 355: self = .groupSize
    case 356: self = .h
    case 357: self = .hadOneofValue
    case 358: self = .handleConflictingOneOf
    case 359: self = .hasAggregateValue
    case 360: self = .hasAllowAlias
    case 361: self = .hasBegin
    case 362: self = .hasCcEnableArenas
    case 363: self = .hasCcGenericServices
    case 364: self = .hasClientStreaming
    case 365: self = .hasCsharpNamespace
    case 366: self = .hasCtype
    case 367: self = .hasDefaultValue
    case 368: self = .hasDeprecated
    case 369: self = .hasDoubleValue
    case 370: self = .hasEnd
    case 371: self = .hasExtendee
    case 372: self = .hasExtensionValue
    case 373: self = .hasGoPackage
    case 374: self = .hash
    case 375: self = .hashable
    case 376: self = .hasher
    case 377: self = .hashValue_
    case 378: self = .hashVisitor
    case 379: self = .hasIdempotencyLevel
    case 380: self = .hasIdentifierValue
    case 381: self = .hasInputType
    case 382: self = .hasIsExtension
    case 383: self = .hasJavaGenerateEqualsAndHash
    case 384: self = .hasJavaGenericServices
    case 385: self = .hasJavaMultipleFiles
    case 386: self = .hasJavaOuterClassname
    case 387: self = .hasJavaPackage
    case 388: self = .hasJavaStringCheckUtf8
    case 389: self = .hasJsonName
    case 390: self = .hasJstype
    case 391: self = .hasLabel
    case 392: self = .hasLazy
    case 393: self = .hasLeadingComments
    case 394: self = .hasMapEntry
    case 395: self = .hasMessageSetWireFormat
    case 396: self = .hasName
    case 397: self = .hasNamePart
    case 398: self = .hasNegativeIntValue
    case 399: self = .hasNoStandardDescriptorAccessor
    case 400: self = .hasNumber
    case 401: self = .hasObjcClassPrefix
    case 402: self = .hasOneofIndex
    case 403: self = .hasOptimizeFor
    case 404: self = .hasOptions
    case 405: self = .hasOutputType
    case 406: self = .hasPackage
    case 407: self = .hasPacked
    case 408: self = .hasPhpClassPrefix
    case 409: self = .hasPhpGenericServices
    case 410: self = .hasPhpMetadataNamespace
    case 411: self = .hasPhpNamespace
    case 412: self = .hasPositiveIntValue
    case 413: self = .hasProto3Optional
    case 414: self = .hasPyGenericServices
    case 415: self = .hasRubyPackage
    case 416: self = .hasServerStreaming
    case 417: self = .hasSourceCodeInfo
    case 418: self = .hasSourceContext
    case 419: self = .hasSourceFile
    case 420: self = .hasStart
    case 421: self = .hasStringValue
    case 422: self = .hasSwiftPrefix
    case 423: self = .hasSyntax
    case 424: self = .hasTrailingComments
    case 425: self = .hasType
    case 426: self = .hasTypeName
    case 427: self = .hasValue
    case 428: self = .hasWeak
    case 429: self = .hour
    case 430: self = .i
    case 431: self = .idempotencyLevel
    case 432: self = .identifierValue
    case 433: self = .if
    case 434: self = .ignoreUnknownFields
    case 435: self = .index
    case 436: self = .init_
    case 437: self = .inout
    case 438: self = .inputType
    case 439: self = .insert
    case 440: self = .int
    case 441: self = .int32
    case 442: self = .int32Value
    case 443: self = .int64
    case 444: self = .int64Value
    case 445: self = .int8
    case 446: self = .integerLiteral
    case 447: self = .integerLiteralType
    case 448: self = .intern
    case 449: self = .internal
    case 450: self = .internalState
    case 451: self = .into
    case 452: self = .ints
    case 453: self = .isA
    case 454: self = .isEqual
    case 455: self = .isEqualTo
    case 456: self = .isExtension
    case 457: self = .isInitialized
    case 458: self = .itemTagsEncodedSize
    case 459: self = .iterator
    case 460: self = .i2166136261
    case 461: self = .javaGenerateEqualsAndHash
    case 462: self = .javaGenericServices
    case 463: self = .javaMultipleFiles
    case 464: self = .javaOuterClassname
    case 465: self = .javaPackage
    case 466: self = .javaStringCheckUtf8
    case 467: self = .jsondecoder
    case 468: self = .jsondecodingError
    case 469: self = .jsondecodingOptions
    case 470: self = .jsonEncoder
    case 471: self = .jsonencodingError
    case 472: self = .jsonencodingOptions
    case 473: self = .jsonencodingVisitor
    case 474: self = .jsonmapEncodingVisitor
    case 475: self = .jsonName
    case 476: self = .jsonPath
    case 477: self = .jsonPaths
    case 478: self = .jsonscanner
    case 479: self = .jsonString
    case 480: self = .jsonText
    case 481: self = .jsonUtf8Data
    case 482: self = .jstype
    case 483: self = .k
    case 484: self = .key
    case 485: self = .keyField
    case 486: self = .keyType
    case 487: self = .kind
    case 488: self = .l
    case 489: self = .label
    case 490: self = .lazy
    case 491: self = .leadingComments
    case 492: self = .leadingDetachedComments
    case 493: self = .length
    case 494: self = .lessThan
    case 495: self = .let
    case 496: self = .lhs
    case 497: self = .list
    case 498: self = .listOfMessages
    case 499: self = .listValue
    case 500: self = .littleEndian
    case 501: self = .littleEndianBytes
    case 502: self = .load
    case 503: self = .localHasher
    case 504: self = .location
    case 505: self = .m
    case 506: self = .major
    case 507: self = .makeIterator
    case 508: self = .mapEntry
    case 509: self = .mapHash
    case 510: self = .mapKeyType
    case 511: self = .mapNameResolver
    case 512: self = .mapToMessages
    case 513: self = .mapValueType
    case 514: self = .mapVisitor
    case 515: self = .mdayStart
    case 516: self = .merge
    case 517: self = .message
    case 518: self = .messageDepthLimit
    case 519: self = .messageExtension
    case 520: self = .messageImplementationBase
    case 521: self = .messageOptions
    case 522: self = .messageSet
    case 523: self = .messageSetWireFormat
    case 524: self = .messageType
    case 525: self = .method
    case 526: self = .methodDescriptorProto
    case 527: self = .methodOptions
    case 528: self = .methods
    case 529: self = .minor
    case 530: self = .mixin
    case 531: self = .mixins
    case 532: self = .modifier
    case 533: self = .modify
    case 534: self = .month
    case 535: self = .msgExtension
    case 536: self = .mutating
    case 537: self = .n
    case 538: self = .name
    case 539: self = .nameDescription
    case 540: self = .nameMap
    case 541: self = .namePart
    case 542: self = .nameResolver
    case 543: self = .names
    case 544: self = .nanos
    case 545: self = .nativeBytes
    case 546: self = .nativeEndianBytes
    case 547: self = .negativeIntValue
    case 548: self = .nestedType
    case 549: self = .newL
    case 550: self = .newList
    case 551: self = .newValue
    case 552: self = .nextByte
    case 553: self = .nextFieldNumber
    case 554: self = .nil
    case 555: self = .nilLiteral
    case 556: self = .noStandardDescriptorAccessor
    case 557: self = .nullValue
    case 558: self = .number
    case 559: self = .numberValue
    case 560: self = .objcClassPrefix
    case 561: self = .of
    case 562: self = .oneofDecl
    case 563: self = .oneofDescriptorProto
    case 564: self = .oneofIndex
    case 565: self = .oneofOptions
    case 566: self = .oneofs
    case 567: self = .oneOfKind
    case 568: self = .optimizeFor
    case 569: self = .optimizeMode
    case 570: self = .option
    case 571: self = .optionalEnumExtensionField
    case 572: self = .optionalExtensionField
    case 573: self = .optionalGroupExtensionField
    case 574: self = .optionalMessageExtensionField
    case 575: self = .options
    case 576: self = .other
    case 577: self = .others
    case 578: self = .out
    case 579: self = .outputType
    case 580: self = .p
    case 581: self = .package
    case 582: self = .packed
    case 583: self = .packedEnumExtensionField
    case 584: self = .packedExtensionField
    case 585: self = .padding
    case 586: self = .parent
    case 587: self = .parse
    case 588: self = .partial
    case 589: self = .path
    case 590: self = .paths
    case 591: self = .payload
    case 592: self = .payloadSize
    case 593: self = .phpClassPrefix
    case 594: self = .phpGenericServices
    case 595: self = .phpMetadataNamespace
    case 596: self = .phpNamespace
    case 597: self = .pointer
    case 598: self = .pos
    case 599: self = .positiveIntValue
    case 600: self = .prefix
    case 601: self = .preserveProtoFieldNames
    case 602: self = .preTraverse
    case 603: self = .printUnknownFields
    case 604: self = .proto2
    case 605: self = .proto3DefaultValue
    case 606: self = .proto3Optional
    case 607: self = .protobufApiversionCheck
    case 608: self = .protobufApiversion2
    case 609: self = .protobufBool
    case 610: self = .protobufBytes
    case 611: self = .protobufDouble
    case 612: self = .protobufEnumMap
    case 613: self = .protobufExtension
    case 614: self = .protobufFixed32
    case 615: self = .protobufFixed64
    case 616: self = .protobufFloat
    case 617: self = .protobufInt32
    case 618: self = .protobufInt64
    case 619: self = .protobufMap
    case 620: self = .protobufMessageMap
    case 621: self = .protobufSfixed32
    case 622: self = .protobufSfixed64
    case 623: self = .protobufSint32
    case 624: self = .protobufSint64
    case 625: self = .protobufString
    case 626: self = .protobufUint32
    case 627: self = .protobufUint64
    case 628: self = .protobufExtensionFieldValues
    case 629: self = .protobufFieldNumber
    case 630: self = .protobufGeneratedIsEqualTo
    case 631: self = .protobufNameMap
    case 632: self = .protobufNewField
    case 633: self = .protobufPackage
    case 634: self = .protocol
    case 635: self = .protoFieldName
    case 636: self = .protoMessageName
    case 637: self = .protoNameProviding
    case 638: self = .protoPaths
    case 639: self = .protoSendable
    case 640: self = .public
    case 641: self = .publicDependency
    case 642: self = .putBoolValue
    case 643: self = .putBytesValue
    case 644: self = .putDoubleValue
    case 645: self = .putEnumValue
    case 646: self = .putFixedUint32
    case 647: self = .putFixedUint64
    case 648: self = .putFloatValue
    case 649: self = .putInt64
    case 650: self = .putStringValue
    case 651: self = .putUint64
    case 652: self = .putUint64Hex
    case 653: self = .putVarInt
    case 654: self = .putZigZagVarInt
    case 655: self = .pyGenericServices
    case 656: self = .rawChars
    case 657: self = .rawRepresentable
    case 658: self = .rawValue_
    case 659: self = .read4HexDigits
    case 660: self = .register
    case 661: self = .repeatedEnumExtensionField
    case 662: self = .repeatedExtensionField
    case 663: self = .repeatedGroupExtensionField
    case 664: self = .repeatedMessageExtensionField
    case 665: self = .requestStreaming
    case 666: self = .requestTypeURL
    case 667: self = .requiredSize
    case 668: self = .reservedName
    case 669: self = .reservedRange
    case 670: self = .responseStreaming
    case 671: self = .responseTypeURL
    case 672: self = .result
    case 673: self = .rethrows
    case 674: self = .return
    case 675: self = .returnType
    case 676: self = .revision
    case 677: self = .rhs
    case 678: self = .root
    case 679: self = .rubyPackage
    case 680: self = .s
    case 681: self = .sawBackslash
    case 682: self = .sawSection4Characters
    case 683: self = .sawSection5Characters
    case 684: self = .scanner
    case 685: self = .seconds
    case 686: self = .self_
    case 687: self = .sendable
    case 688: self = .separator
    case 689: self = .serialize
    case 690: self = .serializedData
    case 691: self = .serializedSize
    case 692: self = .serverStreaming
    case 693: self = .service
    case 694: self = .serviceDescriptorProto
    case 695: self = .serviceOptions
    case 696: self = .set
    case 697: self = .setExtensionValue
    case 698: self = .shift
    case 699: self = .simpleExtensionMap
    case 700: self = .sizer
    case 701: self = .source
    case 702: self = .sourceCodeInfo
    case 703: self = .sourceContext
    case 704: self = .sourceEncoding
    case 705: self = .sourceFile
    case 706: self = .span
    case 707: self = .split
    case 708: self = .start
    case 709: self = .startArray
    case 710: self = .startArrayObject
    case 711: self = .startField
    case 712: self = .startIndex
    case 713: self = .startMessageField
    case 714: self = .startObject
    case 715: self = .startRegularField
    case 716: self = .state
    case 717: self = .static
    case 718: self = .staticString
    case 719: self = .storage
    case 720: self = .string
    case 721: self = .stringLiteral
    case 722: self = .stringLiteralType
    case 723: self = .stringResult
    case 724: self = .stringValue
    case 725: self = .struct
    case 726: self = .structValue
    case 727: self = .subDecoder
    case 728: self = .subscript
    case 729: self = .subVisitor
    case 730: self = .swift
    case 731: self = .swiftPrefix
    case 732: self = .swiftProtobuf
    case 733: self = .syntax
    case 734: self = .t
    case 735: self = .tag
    case 736: self = .terminator
    case 737: self = .testDecoder
    case 738: self = .text
    case 739: self = .textDecoder
    case 740: self = .textFormatDecoder
    case 741: self = .textFormatDecodingError
    case 742: self = .textFormatDecodingOptions
    case 743: self = .textFormatEncodingOptions
    case 744: self = .textFormatEncodingVisitor
    case 745: self = .textFormatString
    case 746: self = .throws
    case 747: self = .timeInterval
    case 748: self = .timeIntervalSince1970
    case 749: self = .timeIntervalSinceReferenceDate
    case 750: self = .timestamp
    case 751: self = .total
    case 752: self = .totalArrayDepth
    case 753: self = .totalSize
    case 754: self = .trailingComments
    case 755: self = .traverse
    case 756: self = .true
    case 757: self = .try
    case 758: self = .type
    case 759: self = .typealias
    case 760: self = .typeEnum
    case 761: self = .typeName
    case 762: self = .typePrefix
    case 763: self = .typeStart
    case 764: self = .typeUnknown
    case 765: self = .typeURL
    case 766: self = .uint32
    case 767: self = .uint32Value
    case 768: self = .uint64
    case 769: self = .uint64Value
    case 770: self = .uint8
    case 771: self = .unicodeScalarLiteral
    case 772: self = .unicodeScalarLiteralType
    case 773: self = .unicodeScalars
    case 774: self = .unicodeScalarView
    case 775: self = .uninterpretedOption
    case 776: self = .union
    case 777: self = .uniqueStorage
    case 778: self = .unknown
    case 779: self = .unknownFields
    case 780: self = .unknownStorage
    case 781: self = .unpackTo
    case 782: self = .unsafeBufferPointer
    case 783: self = .unsafeMutablePointer
    case 784: self = .unsafeMutableRawBufferPointer
    case 785: self = .unsafeMutableRawPointer
    case 786: self = .unsafeRawBufferPointer
    case 787: self = .unsafeRawPointer
    case 788: self = .updatedOptions
    case 789: self = .url
    case 790: self = .utf8
    case 791: self = .utf8Ptr
    case 792: self = .utf8ToDouble
    case 793: self = .utf8View
    case 794: self = .v
    case 795: self = .value
    case 796: self = .valueField
    case 797: self = .values
    case 798: self = .valueType
    case 799: self = .var
    case 800: self = .version
    case 801: self = .versionString
    case 802: self = .visitExtensionFields
    case 803: self = .visitExtensionFieldsAsMessageSet
    case 804: self = .visitMapField
    case 805: self = .visitor
    case 806: self = .visitPacked
    case 807: self = .visitPackedBoolField
    case 808: self = .visitPackedDoubleField
    case 809: self = .visitPackedEnumField
    case 810: self = .visitPackedFixed32Field
    case 811: self = .visitPackedFixed64Field
    case 812: self = .visitPackedFloatField
    case 813: self = .visitPackedInt32Field
    case 814: self = .visitPackedInt64Field
    case 815: self = .visitPackedSfixed32Field
    case 816: self = .visitPackedSfixed64Field
    case 817: self = .visitPackedSint32Field
    case 818: self = .visitPackedSint64Field
    case 819: self = .visitPackedUint32Field
    case 820: self = .visitPackedUint64Field
    case 821: self = .visitRepeated
    case 822: self = .visitRepeatedBoolField
    case 823: self = .visitRepeatedBytesField
    case 824: self = .visitRepeatedDoubleField
    case 825: self = .visitRepeatedEnumField
    case 826: self = .visitRepeatedFixed32Field
    case 827: self = .visitRepeatedFixed64Field
    case 828: self = .visitRepeatedFloatField
    case 829: self = .visitRepeatedGroupField
    case 830: self = .visitRepeatedInt32Field
    case 831: self = .visitRepeatedInt64Field
    case 832: self = .visitRepeatedMessageField
    case 833: self = .visitRepeatedSfixed32Field
    case 834: self = .visitRepeatedSfixed64Field
    case 835: self = .visitRepeatedSint32Field
    case 836: self = .visitRepeatedSint64Field
    case 837: self = .visitRepeatedStringField
    case 838: self = .visitRepeatedUint32Field
    case 839: self = .visitRepeatedUint64Field
    case 840: self = .visitSingular
    case 841: self = .visitSingularBoolField
    case 842: self = .visitSingularBytesField
    case 843: self = .visitSingularDoubleField
    case 844: self = .visitSingularEnumField
    case 845: self = .visitSingularFixed32Field
    case 846: self = .visitSingularFixed64Field
    case 847: self = .visitSingularFloatField
    case 848: self = .visitSingularGroupField
    case 849: self = .visitSingularInt32Field
    case 850: self = .visitSingularInt64Field
    case 851: self = .visitSingularMessageField
    case 852: self = .visitSingularSfixed32Field
    case 853: self = .visitSingularSfixed64Field
    case 854: self = .visitSingularSint32Field
    case 855: self = .visitSingularSint64Field
    case 856: self = .visitSingularStringField
    case 857: self = .visitSingularUint32Field
    case 858: self = .visitSingularUint64Field
    case 859: self = .visitUnknown
    case 860: self = .wasDecoded
    case 861: self = .weak
    case 862: self = .weakDependency
    case 863: self = .where
    case 864: self = .wireFormat
    case 865: self = .with
    case 866: self = .withUnsafeBytes
    case 867: self = .withUnsafeMutableBytes
    case 868: self = .work
    case 869: self = .wrappedType
    case 870: self = .written
    case 871: self = .yday
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .none: return 0
    case .adjusted: return 1
    case .aggregateValue: return 2
    case .allCases_: return 3
    case .allowAlias: return 4
    case .alwaysPrintEnumsAsInts: return 5
    case .annotation: return 6
    case .any: return 7
    case .anyExtensionField: return 8
    case .anyMessageExtension: return 9
    case .anyMessageStorage: return 10
    case .anyUnpackError: return 11
    case .api: return 12
    case .appended: return 13
    case .appendUintHex: return 14
    case .appendUnknown: return 15
    case .areAllInitialized: return 16
    case .array: return 17
    case .arrayDepth: return 18
    case .arrayLiteral: return 19
    case .arraySeparator: return 20
    case .as: return 21
    case .asciiOpenCurlyBracket: return 22
    case .asciiZero: return 23
    case .available: return 24
    case .b: return 25
    case .base64Values: return 26
    case .baseAddress: return 27
    case .baseType: return 28
    case .begin: return 29
    case .binary: return 30
    case .binaryDecoder: return 31
    case .binaryDecodingError: return 32
    case .binaryDecodingOptions: return 33
    case .binaryDelimited: return 34
    case .binaryEncoder: return 35
    case .binaryEncodingError: return 36
    case .binaryEncodingMessageSetSizeVisitor: return 37
    case .binaryEncodingMessageSetVisitor: return 38
    case .binaryEncodingSizeVisitor: return 39
    case .binaryEncodingVisitor: return 40
    case .binaryOptions: return 41
    case .body: return 42
    case .bool: return 43
    case .booleanLiteral: return 44
    case .booleanLiteralType: return 45
    case .boolValue: return 46
    case .bytes: return 47
    case .bytesInGroup: return 48
    case .bytesRead: return 49
    case .bytesValue: return 50
    case .c: return 51
    case .capitalizeNext: return 52
    case .cardinality: return 53
    case .ccEnableArenas: return 54
    case .ccGenericServices: return 55
    case .character: return 56
    case .chars: return 57
    case .class: return 58
    case .clearAggregateValue: return 59
    case .clearAllowAlias: return 60
    case .clearBegin: return 61
    case .clearCcEnableArenas: return 62
    case .clearCcGenericServices: return 63
    case .clearClientStreaming: return 64
    case .clearCsharpNamespace: return 65
    case .clearCtype: return 66
    case .clearDefaultValue: return 67
    case .clearDeprecated: return 68
    case .clearDoubleValue: return 69
    case .clearEnd: return 70
    case .clearExtendee: return 71
    case .clearExtensionValue: return 72
    case .clearGoPackage: return 73
    case .clearIdempotencyLevel: return 74
    case .clearIdentifierValue: return 75
    case .clearInputType: return 76
    case .clearIsExtension: return 77
    case .clearJavaGenerateEqualsAndHash: return 78
    case .clearJavaGenericServices: return 79
    case .clearJavaMultipleFiles: return 80
    case .clearJavaOuterClassname: return 81
    case .clearJavaPackage: return 82
    case .clearJavaStringCheckUtf8: return 83
    case .clearJsonName: return 84
    case .clearJstype: return 85
    case .clearLabel: return 86
    case .clearLazy: return 87
    case .clearLeadingComments: return 88
    case .clearMapEntry: return 89
    case .clearMessageSetWireFormat: return 90
    case .clearName: return 91
    case .clearNamePart: return 92
    case .clearNegativeIntValue: return 93
    case .clearNoStandardDescriptorAccessor: return 94
    case .clearNumber: return 95
    case .clearObjcClassPrefix: return 96
    case .clearOneofIndex: return 97
    case .clearOptimizeFor: return 98
    case .clearOptions: return 99
    case .clearOutputType: return 100
    case .clearPackage: return 101
    case .clearPacked: return 102
    case .clearPhpClassPrefix: return 103
    case .clearPhpGenericServices: return 104
    case .clearPhpMetadataNamespace: return 105
    case .clearPhpNamespace: return 106
    case .clearPositiveIntValue: return 107
    case .clearProto3Optional: return 108
    case .clearPyGenericServices: return 109
    case .clearRubyPackage: return 110
    case .clearServerStreaming: return 111
    case .clearSourceCodeInfo: return 112
    case .clearSourceContext: return 113
    case .clearSourceFile: return 114
    case .clearStart: return 115
    case .clearStringValue: return 116
    case .clearSwiftPrefix: return 117
    case .clearSyntax: return 118
    case .clearTrailingComments: return 119
    case .clearType: return 120
    case .clearTypeName: return 121
    case .clearValue: return 122
    case .clearWeak: return 123
    case .clientStreaming: return 124
    case .codePoint: return 125
    case .codeUnits: return 126
    case .collection: return 127
    case .com: return 128
    case .comma: return 129
    case .contentsOf: return 130
    case .contiguousBytes: return 131
    case .count: return 132
    case .countVarintsInBuffer: return 133
    case .csharpNamespace: return 134
    case .ctype: return 135
    case .customCodable: return 136
    case .customDebugStringConvertible: return 137
    case .d: return 138
    case .data: return 139
    case .dataResult: return 140
    case .date: return 141
    case .daySec: return 142
    case .daysSinceEpoch: return 143
    case .debugDescription_: return 144
    case .decoded: return 145
    case .decodedFromJsonnull: return 146
    case .decodeExtensionField: return 147
    case .decodeExtensionFieldsAsMessageSet: return 148
    case .decodeJson: return 149
    case .decodeMapField: return 150
    case .decodeMessage: return 151
    case .decoder: return 152
    case .decodeRepeated: return 153
    case .decodeRepeatedBoolField: return 154
    case .decodeRepeatedBytesField: return 155
    case .decodeRepeatedDoubleField: return 156
    case .decodeRepeatedEnumField: return 157
    case .decodeRepeatedFixed32Field: return 158
    case .decodeRepeatedFixed64Field: return 159
    case .decodeRepeatedFloatField: return 160
    case .decodeRepeatedGroupField: return 161
    case .decodeRepeatedInt32Field: return 162
    case .decodeRepeatedInt64Field: return 163
    case .decodeRepeatedMessageField: return 164
    case .decodeRepeatedSfixed32Field: return 165
    case .decodeRepeatedSfixed64Field: return 166
    case .decodeRepeatedSint32Field: return 167
    case .decodeRepeatedSint64Field: return 168
    case .decodeRepeatedStringField: return 169
    case .decodeRepeatedUint32Field: return 170
    case .decodeRepeatedUint64Field: return 171
    case .decodeSingular: return 172
    case .decodeSingularBoolField: return 173
    case .decodeSingularBytesField: return 174
    case .decodeSingularDoubleField: return 175
    case .decodeSingularEnumField: return 176
    case .decodeSingularFixed32Field: return 177
    case .decodeSingularFixed64Field: return 178
    case .decodeSingularFloatField: return 179
    case .decodeSingularGroupField: return 180
    case .decodeSingularInt32Field: return 181
    case .decodeSingularInt64Field: return 182
    case .decodeSingularMessageField: return 183
    case .decodeSingularSfixed32Field: return 184
    case .decodeSingularSfixed64Field: return 185
    case .decodeSingularSint32Field: return 186
    case .decodeSingularSint64Field: return 187
    case .decodeSingularStringField: return 188
    case .decodeSingularUint32Field: return 189
    case .decodeSingularUint64Field: return 190
    case .decodeTextFormat: return 191
    case .defaultAnyTypeUrlprefix: return 192
    case .defaultValue: return 193
    case .dependency: return 194
    case .deprecated: return 195
    case .description_: return 196
    case .descriptorProto: return 197
    case .dictionary: return 198
    case .dictionaryLiteral: return 199
    case .digit: return 200
    case .digit0: return 201
    case .digit1: return 202
    case .digitCount: return 203
    case .digits: return 204
    case .digitValue: return 205
    case .discardableResult: return 206
    case .discardUnknownFields: return 207
    case .distance: return 208
    case .double: return 209
    case .doubleValue: return 210
    case .duration: return 211
    case .e: return 212
    case .element: return 213
    case .elements: return 214
    case .emitExtensionFieldName: return 215
    case .emitFieldName: return 216
    case .emitFieldNumber: return 217
    case .empty: return 218
    case .emptyData: return 219
    case .encodeAsBytes: return 220
    case .encoded: return 221
    case .encodedJsonstring: return 222
    case .encodedSize: return 223
    case .encodeField: return 224
    case .encoder: return 225
    case .end: return 226
    case .endArray: return 227
    case .endMessageField: return 228
    case .endObject: return 229
    case .endRegularField: return 230
    case .enum: return 231
    case .enumDescriptorProto: return 232
    case .enumOptions: return 233
    case .enumReservedRange: return 234
    case .enumType: return 235
    case .enumvalue: return 236
    case .enumValueDescriptorProto: return 237
    case .enumValueOptions: return 238
    case .equatable: return 239
    case .error: return 240
    case .expressibleByArrayLiteral: return 241
    case .expressibleByDictionaryLiteral: return 242
    case .ext: return 243
    case .extDecoder: return 244
    case .extendedGraphemeClusterLiteral: return 245
    case .extendedGraphemeClusterLiteralType: return 246
    case .extendee: return 247
    case .extensibleMessage: return 248
    case .extension: return 249
    case .extensionField: return 250
    case .extensionFieldNumber: return 251
    case .extensionFieldValueSet: return 252
    case .extensionMap: return 253
    case .extensionRange: return 254
    case .extensionRangeOptions: return 255
    case .extensions: return 256
    case .extras: return 257
    case .f: return 258
    case .false: return 259
    case .field: return 260
    case .fieldData: return 261
    case .fieldDescriptorProto: return 262
    case .fieldMask: return 263
    case .fieldName: return 264
    case .fieldNameCount: return 265
    case .fieldNum: return 266
    case .fieldNumber: return 267
    case .fieldNumberForProto: return 268
    case .fieldOptions: return 269
    case .fields: return 270
    case .fieldSize: return 271
    case .fieldTag: return 272
    case .fieldType: return 273
    case .file: return 274
    case .fileDescriptorProto: return 275
    case .fileDescriptorSet: return 276
    case .fileName: return 277
    case .fileOptions: return 278
    case .filter: return 279
    case .first: return 280
    case .firstItem: return 281
    case .float: return 282
    case .floatLiteral: return 283
    case .floatLiteralType: return 284
    case .floatValue: return 285
    case .forMessageName: return 286
    case .formUnion: return 287
    case .forReadingFrom: return 288
    case .forTypeURL: return 289
    case .forwardParser: return 290
    case .forWritingInto: return 291
    case .from: return 292
    case .fromAscii2: return 293
    case .fromAscii4: return 294
    case .fromByteOffset: return 295
    case .fromHexDigit: return 296
    case .func: return 297
    case .g: return 298
    case .generatedCodeInfo: return 299
    case .get: return 300
    case .getExtensionValue: return 301
    case .googleapis: return 302
    case .googleProtobufAny: return 303
    case .googleProtobufApi: return 304
    case .googleProtobufBoolValue: return 305
    case .googleProtobufBytesValue: return 306
    case .googleProtobufDescriptorProto: return 307
    case .googleProtobufDoubleValue: return 308
    case .googleProtobufDuration: return 309
    case .googleProtobufEmpty: return 310
    case .googleProtobufEnum: return 311
    case .googleProtobufEnumDescriptorProto: return 312
    case .googleProtobufEnumOptions: return 313
    case .googleProtobufEnumValue: return 314
    case .googleProtobufEnumValueDescriptorProto: return 315
    case .googleProtobufEnumValueOptions: return 316
    case .googleProtobufExtensionRangeOptions: return 317
    case .googleProtobufField: return 318
    case .googleProtobufFieldDescriptorProto: return 319
    case .googleProtobufFieldMask: return 320
    case .googleProtobufFieldOptions: return 321
    case .googleProtobufFileDescriptorProto: return 322
    case .googleProtobufFileDescriptorSet: return 323
    case .googleProtobufFileOptions: return 324
    case .googleProtobufFloatValue: return 325
    case .googleProtobufGeneratedCodeInfo: return 326
    case .googleProtobufInt32Value: return 327
    case .googleProtobufInt64Value: return 328
    case .googleProtobufListValue: return 329
    case .googleProtobufMessageOptions: return 330
    case .googleProtobufMethod: return 331
    case .googleProtobufMethodDescriptorProto: return 332
    case .googleProtobufMethodOptions: return 333
    case .googleProtobufMixin: return 334
    case .googleProtobufNullValue: return 335
    case .googleProtobufOneofDescriptorProto: return 336
    case .googleProtobufOneofOptions: return 337
    case .googleProtobufOption: return 338
    case .googleProtobufServiceDescriptorProto: return 339
    case .googleProtobufServiceOptions: return 340
    case .googleProtobufSourceCodeInfo: return 341
    case .googleProtobufSourceContext: return 342
    case .googleProtobufStringValue: return 343
    case .googleProtobufStruct: return 344
    case .googleProtobufSyntax: return 345
    case .googleProtobufTimestamp: return 346
    case .googleProtobufType: return 347
    case .googleProtobufUint32Value: return 348
    case .googleProtobufUint64Value: return 349
    case .googleProtobufUninterpretedOption: return 350
    case .googleProtobufValue: return 351
    case .goPackage: return 352
    case .group: return 353
    case .groupFieldNumberStack: return 354
    case .groupSize: return 355
    case .h: return 356
    case .hadOneofValue: return 357
    case .handleConflictingOneOf: return 358
    case .hasAggregateValue: return 359
    case .hasAllowAlias: return 360
    case .hasBegin: return 361
    case .hasCcEnableArenas: return 362
    case .hasCcGenericServices: return 363
    case .hasClientStreaming: return 364
    case .hasCsharpNamespace: return 365
    case .hasCtype: return 366
    case .hasDefaultValue: return 367
    case .hasDeprecated: return 368
    case .hasDoubleValue: return 369
    case .hasEnd: return 370
    case .hasExtendee: return 371
    case .hasExtensionValue: return 372
    case .hasGoPackage: return 373
    case .hash: return 374
    case .hashable: return 375
    case .hasher: return 376
    case .hashValue_: return 377
    case .hashVisitor: return 378
    case .hasIdempotencyLevel: return 379
    case .hasIdentifierValue: return 380
    case .hasInputType: return 381
    case .hasIsExtension: return 382
    case .hasJavaGenerateEqualsAndHash: return 383
    case .hasJavaGenericServices: return 384
    case .hasJavaMultipleFiles: return 385
    case .hasJavaOuterClassname: return 386
    case .hasJavaPackage: return 387
    case .hasJavaStringCheckUtf8: return 388
    case .hasJsonName: return 389
    case .hasJstype: return 390
    case .hasLabel: return 391
    case .hasLazy: return 392
    case .hasLeadingComments: return 393
    case .hasMapEntry: return 394
    case .hasMessageSetWireFormat: return 395
    case .hasName: return 396
    case .hasNamePart: return 397
    case .hasNegativeIntValue: return 398
    case .hasNoStandardDescriptorAccessor: return 399
    case .hasNumber: return 400
    case .hasObjcClassPrefix: return 401
    case .hasOneofIndex: return 402
    case .hasOptimizeFor: return 403
    case .hasOptions: return 404
    case .hasOutputType: return 405
    case .hasPackage: return 406
    case .hasPacked: return 407
    case .hasPhpClassPrefix: return 408
    case .hasPhpGenericServices: return 409
    case .hasPhpMetadataNamespace: return 410
    case .hasPhpNamespace: return 411
    case .hasPositiveIntValue: return 412
    case .hasProto3Optional: return 413
    case .hasPyGenericServices: return 414
    case .hasRubyPackage: return 415
    case .hasServerStreaming: return 416
    case .hasSourceCodeInfo: return 417
    case .hasSourceContext: return 418
    case .hasSourceFile: return 419
    case .hasStart: return 420
    case .hasStringValue: return 421
    case .hasSwiftPrefix: return 422
    case .hasSyntax: return 423
    case .hasTrailingComments: return 424
    case .hasType: return 425
    case .hasTypeName: return 426
    case .hasValue: return 427
    case .hasWeak: return 428
    case .hour: return 429
    case .i: return 430
    case .idempotencyLevel: return 431
    case .identifierValue: return 432
    case .if: return 433
    case .ignoreUnknownFields: return 434
    case .index: return 435
    case .init_: return 436
    case .inout: return 437
    case .inputType: return 438
    case .insert: return 439
    case .int: return 440
    case .int32: return 441
    case .int32Value: return 442
    case .int64: return 443
    case .int64Value: return 444
    case .int8: return 445
    case .integerLiteral: return 446
    case .integerLiteralType: return 447
    case .intern: return 448
    case .internal: return 449
    case .internalState: return 450
    case .into: return 451
    case .ints: return 452
    case .isA: return 453
    case .isEqual: return 454
    case .isEqualTo: return 455
    case .isExtension: return 456
    case .isInitialized: return 457
    case .itemTagsEncodedSize: return 458
    case .iterator: return 459
    case .i2166136261: return 460
    case .javaGenerateEqualsAndHash: return 461
    case .javaGenericServices: return 462
    case .javaMultipleFiles: return 463
    case .javaOuterClassname: return 464
    case .javaPackage: return 465
    case .javaStringCheckUtf8: return 466
    case .jsondecoder: return 467
    case .jsondecodingError: return 468
    case .jsondecodingOptions: return 469
    case .jsonEncoder: return 470
    case .jsonencodingError: return 471
    case .jsonencodingOptions: return 472
    case .jsonencodingVisitor: return 473
    case .jsonmapEncodingVisitor: return 474
    case .jsonName: return 475
    case .jsonPath: return 476
    case .jsonPaths: return 477
    case .jsonscanner: return 478
    case .jsonString: return 479
    case .jsonText: return 480
    case .jsonUtf8Data: return 481
    case .jstype: return 482
    case .k: return 483
    case .key: return 484
    case .keyField: return 485
    case .keyType: return 486
    case .kind: return 487
    case .l: return 488
    case .label: return 489
    case .lazy: return 490
    case .leadingComments: return 491
    case .leadingDetachedComments: return 492
    case .length: return 493
    case .lessThan: return 494
    case .let: return 495
    case .lhs: return 496
    case .list: return 497
    case .listOfMessages: return 498
    case .listValue: return 499
    default: break
    }
    switch self {
    case .littleEndian: return 500
    case .littleEndianBytes: return 501
    case .load: return 502
    case .localHasher: return 503
    case .location: return 504
    case .m: return 505
    case .major: return 506
    case .makeIterator: return 507
    case .mapEntry: return 508
    case .mapHash: return 509
    case .mapKeyType: return 510
    case .mapNameResolver: return 511
    case .mapToMessages: return 512
    case .mapValueType: return 513
    case .mapVisitor: return 514
    case .mdayStart: return 515
    case .merge: return 516
    case .message: return 517
    case .messageDepthLimit: return 518
    case .messageExtension: return 519
    case .messageImplementationBase: return 520
    case .messageOptions: return 521
    case .messageSet: return 522
    case .messageSetWireFormat: return 523
    case .messageType: return 524
    case .method: return 525
    case .methodDescriptorProto: return 526
    case .methodOptions: return 527
    case .methods: return 528
    case .minor: return 529
    case .mixin: return 530
    case .mixins: return 531
    case .modifier: return 532
    case .modify: return 533
    case .month: return 534
    case .msgExtension: return 535
    case .mutating: return 536
    case .n: return 537
    case .name: return 538
    case .nameDescription: return 539
    case .nameMap: return 540
    case .namePart: return 541
    case .nameResolver: return 542
    case .names: return 543
    case .nanos: return 544
    case .nativeBytes: return 545
    case .nativeEndianBytes: return 546
    case .negativeIntValue: return 547
    case .nestedType: return 548
    case .newL: return 549
    case .newList: return 550
    case .newValue: return 551
    case .nextByte: return 552
    case .nextFieldNumber: return 553
    case .nil: return 554
    case .nilLiteral: return 555
    case .noStandardDescriptorAccessor: return 556
    case .nullValue: return 557
    case .number: return 558
    case .numberValue: return 559
    case .objcClassPrefix: return 560
    case .of: return 561
    case .oneofDecl: return 562
    case .oneofDescriptorProto: return 563
    case .oneofIndex: return 564
    case .oneofOptions: return 565
    case .oneofs: return 566
    case .oneOfKind: return 567
    case .optimizeFor: return 568
    case .optimizeMode: return 569
    case .option: return 570
    case .optionalEnumExtensionField: return 571
    case .optionalExtensionField: return 572
    case .optionalGroupExtensionField: return 573
    case .optionalMessageExtensionField: return 574
    case .options: return 575
    case .other: return 576
    case .others: return 577
    case .out: return 578
    case .outputType: return 579
    case .p: return 580
    case .package: return 581
    case .packed: return 582
    case .packedEnumExtensionField: return 583
    case .packedExtensionField: return 584
    case .padding: return 585
    case .parent: return 586
    case .parse: return 587
    case .partial: return 588
    case .path: return 589
    case .paths: return 590
    case .payload: return 591
    case .payloadSize: return 592
    case .phpClassPrefix: return 593
    case .phpGenericServices: return 594
    case .phpMetadataNamespace: return 595
    case .phpNamespace: return 596
    case .pointer: return 597
    case .pos: return 598
    case .positiveIntValue: return 599
    case .prefix: return 600
    case .preserveProtoFieldNames: return 601
    case .preTraverse: return 602
    case .printUnknownFields: return 603
    case .proto2: return 604
    case .proto3DefaultValue: return 605
    case .proto3Optional: return 606
    case .protobufApiversionCheck: return 607
    case .protobufApiversion2: return 608
    case .protobufBool: return 609
    case .protobufBytes: return 610
    case .protobufDouble: return 611
    case .protobufEnumMap: return 612
    case .protobufExtension: return 613
    case .protobufFixed32: return 614
    case .protobufFixed64: return 615
    case .protobufFloat: return 616
    case .protobufInt32: return 617
    case .protobufInt64: return 618
    case .protobufMap: return 619
    case .protobufMessageMap: return 620
    case .protobufSfixed32: return 621
    case .protobufSfixed64: return 622
    case .protobufSint32: return 623
    case .protobufSint64: return 624
    case .protobufString: return 625
    case .protobufUint32: return 626
    case .protobufUint64: return 627
    case .protobufExtensionFieldValues: return 628
    case .protobufFieldNumber: return 629
    case .protobufGeneratedIsEqualTo: return 630
    case .protobufNameMap: return 631
    case .protobufNewField: return 632
    case .protobufPackage: return 633
    case .protocol: return 634
    case .protoFieldName: return 635
    case .protoMessageName: return 636
    case .protoNameProviding: return 637
    case .protoPaths: return 638
    case .protoSendable: return 639
    case .public: return 640
    case .publicDependency: return 641
    case .putBoolValue: return 642
    case .putBytesValue: return 643
    case .putDoubleValue: return 644
    case .putEnumValue: return 645
    case .putFixedUint32: return 646
    case .putFixedUint64: return 647
    case .putFloatValue: return 648
    case .putInt64: return 649
    case .putStringValue: return 650
    case .putUint64: return 651
    case .putUint64Hex: return 652
    case .putVarInt: return 653
    case .putZigZagVarInt: return 654
    case .pyGenericServices: return 655
    case .rawChars: return 656
    case .rawRepresentable: return 657
    case .rawValue_: return 658
    case .read4HexDigits: return 659
    case .register: return 660
    case .repeatedEnumExtensionField: return 661
    case .repeatedExtensionField: return 662
    case .repeatedGroupExtensionField: return 663
    case .repeatedMessageExtensionField: return 664
    case .requestStreaming: return 665
    case .requestTypeURL: return 666
    case .requiredSize: return 667
    case .reservedName: return 668
    case .reservedRange: return 669
    case .responseStreaming: return 670
    case .responseTypeURL: return 671
    case .result: return 672
    case .rethrows: return 673
    case .return: return 674
    case .returnType: return 675
    case .revision: return 676
    case .rhs: return 677
    case .root: return 678
    case .rubyPackage: return 679
    case .s: return 680
    case .sawBackslash: return 681
    case .sawSection4Characters: return 682
    case .sawSection5Characters: return 683
    case .scanner: return 684
    case .seconds: return 685
    case .self_: return 686
    case .sendable: return 687
    case .separator: return 688
    case .serialize: return 689
    case .serializedData: return 690
    case .serializedSize: return 691
    case .serverStreaming: return 692
    case .service: return 693
    case .serviceDescriptorProto: return 694
    case .serviceOptions: return 695
    case .set: return 696
    case .setExtensionValue: return 697
    case .shift: return 698
    case .simpleExtensionMap: return 699
    case .sizer: return 700
    case .source: return 701
    case .sourceCodeInfo: return 702
    case .sourceContext: return 703
    case .sourceEncoding: return 704
    case .sourceFile: return 705
    case .span: return 706
    case .split: return 707
    case .start: return 708
    case .startArray: return 709
    case .startArrayObject: return 710
    case .startField: return 711
    case .startIndex: return 712
    case .startMessageField: return 713
    case .startObject: return 714
    case .startRegularField: return 715
    case .state: return 716
    case .static: return 717
    case .staticString: return 718
    case .storage: return 719
    case .string: return 720
    case .stringLiteral: return 721
    case .stringLiteralType: return 722
    case .stringResult: return 723
    case .stringValue: return 724
    case .struct: return 725
    case .structValue: return 726
    case .subDecoder: return 727
    case .subscript: return 728
    case .subVisitor: return 729
    case .swift: return 730
    case .swiftPrefix: return 731
    case .swiftProtobuf: return 732
    case .syntax: return 733
    case .t: return 734
    case .tag: return 735
    case .terminator: return 736
    case .testDecoder: return 737
    case .text: return 738
    case .textDecoder: return 739
    case .textFormatDecoder: return 740
    case .textFormatDecodingError: return 741
    case .textFormatDecodingOptions: return 742
    case .textFormatEncodingOptions: return 743
    case .textFormatEncodingVisitor: return 744
    case .textFormatString: return 745
    case .throws: return 746
    case .timeInterval: return 747
    case .timeIntervalSince1970: return 748
    case .timeIntervalSinceReferenceDate: return 749
    case .timestamp: return 750
    case .total: return 751
    case .totalArrayDepth: return 752
    case .totalSize: return 753
    case .trailingComments: return 754
    case .traverse: return 755
    case .true: return 756
    case .try: return 757
    case .type: return 758
    case .typealias: return 759
    case .typeEnum: return 760
    case .typeName: return 761
    case .typePrefix: return 762
    case .typeStart: return 763
    case .typeUnknown: return 764
    case .typeURL: return 765
    case .uint32: return 766
    case .uint32Value: return 767
    case .uint64: return 768
    case .uint64Value: return 769
    case .uint8: return 770
    case .unicodeScalarLiteral: return 771
    case .unicodeScalarLiteralType: return 772
    case .unicodeScalars: return 773
    case .unicodeScalarView: return 774
    case .uninterpretedOption: return 775
    case .union: return 776
    case .uniqueStorage: return 777
    case .unknown: return 778
    case .unknownFields: return 779
    case .unknownStorage: return 780
    case .unpackTo: return 781
    case .unsafeBufferPointer: return 782
    case .unsafeMutablePointer: return 783
    case .unsafeMutableRawBufferPointer: return 784
    case .unsafeMutableRawPointer: return 785
    case .unsafeRawBufferPointer: return 786
    case .unsafeRawPointer: return 787
    case .updatedOptions: return 788
    case .url: return 789
    case .utf8: return 790
    case .utf8Ptr: return 791
    case .utf8ToDouble: return 792
    case .utf8View: return 793
    case .v: return 794
    case .value: return 795
    case .valueField: return 796
    case .values: return 797
    case .valueType: return 798
    case .var: return 799
    case .version: return 800
    case .versionString: return 801
    case .visitExtensionFields: return 802
    case .visitExtensionFieldsAsMessageSet: return 803
    case .visitMapField: return 804
    case .visitor: return 805
    case .visitPacked: return 806
    case .visitPackedBoolField: return 807
    case .visitPackedDoubleField: return 808
    case .visitPackedEnumField: return 809
    case .visitPackedFixed32Field: return 810
    case .visitPackedFixed64Field: return 811
    case .visitPackedFloatField: return 812
    case .visitPackedInt32Field: return 813
    case .visitPackedInt64Field: return 814
    case .visitPackedSfixed32Field: return 815
    case .visitPackedSfixed64Field: return 816
    case .visitPackedSint32Field: return 817
    case .visitPackedSint64Field: return 818
    case .visitPackedUint32Field: return 819
    case .visitPackedUint64Field: return 820
    case .visitRepeated: return 821
    case .visitRepeatedBoolField: return 822
    case .visitRepeatedBytesField: return 823
    case .visitRepeatedDoubleField: return 824
    case .visitRepeatedEnumField: return 825
    case .visitRepeatedFixed32Field: return 826
    case .visitRepeatedFixed64Field: return 827
    case .visitRepeatedFloatField: return 828
    case .visitRepeatedGroupField: return 829
    case .visitRepeatedInt32Field: return 830
    case .visitRepeatedInt64Field: return 831
    case .visitRepeatedMessageField: return 832
    case .visitRepeatedSfixed32Field: return 833
    case .visitRepeatedSfixed64Field: return 834
    case .visitRepeatedSint32Field: return 835
    case .visitRepeatedSint64Field: return 836
    case .visitRepeatedStringField: return 837
    case .visitRepeatedUint32Field: return 838
    case .visitRepeatedUint64Field: return 839
    case .visitSingular: return 840
    case .visitSingularBoolField: return 841
    case .visitSingularBytesField: return 842
    case .visitSingularDoubleField: return 843
    case .visitSingularEnumField: return 844
    case .visitSingularFixed32Field: return 845
    case .visitSingularFixed64Field: return 846
    case .visitSingularFloatField: return 847
    case .visitSingularGroupField: return 848
    case .visitSingularInt32Field: return 849
    case .visitSingularInt64Field: return 850
    case .visitSingularMessageField: return 851
    case .visitSingularSfixed32Field: return 852
    case .visitSingularSfixed64Field: return 853
    case .visitSingularSint32Field: return 854
    case .visitSingularSint64Field: return 855
    case .visitSingularStringField: return 856
    case .visitSingularUint32Field: return 857
    case .visitSingularUint64Field: return 858
    case .visitUnknown: return 859
    case .wasDecoded: return 860
    case .weak: return 861
    case .weakDependency: return 862
    case .where: return 863
    case .wireFormat: return 864
    case .with: return 865
    case .withUnsafeBytes: return 866
    case .withUnsafeMutableBytes: return 867
    case .work: return 868
    case .wrappedType: return 869
    case .written: return 870
    case .yday: return 871
    case .UNRECOGNIZED(let i): return i
    default: break
    }

    // Can't get here, all the cases are listed in the above switches.
    // See https://github.com/apple/swift-protobuf/issues/904 for more details.
    fatalError()
  }

}

#if swift(>=4.2)

extension ProtobufUnittestGenerated_GeneratedSwiftReservedEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [ProtobufUnittestGenerated_GeneratedSwiftReservedEnum] = [
    .none,
    .adjusted,
    .aggregateValue,
    .allCases_,
    .allowAlias,
    .alwaysPrintEnumsAsInts,
    .annotation,
    .any,
    .anyExtensionField,
    .anyMessageExtension,
    .anyMessageStorage,
    .anyUnpackError,
    .api,
    .appended,
    .appendUintHex,
    .appendUnknown,
    .areAllInitialized,
    .array,
    .arrayDepth,
    .arrayLiteral,
    .arraySeparator,
    .as,
    .asciiOpenCurlyBracket,
    .asciiZero,
    .available,
    .b,
    .base64Values,
    .baseAddress,
    .baseType,
    .begin,
    .binary,
    .binaryDecoder,
    .binaryDecodingError,
    .binaryDecodingOptions,
    .binaryDelimited,
    .binaryEncoder,
    .binaryEncodingError,
    .binaryEncodingMessageSetSizeVisitor,
    .binaryEncodingMessageSetVisitor,
    .binaryEncodingSizeVisitor,
    .binaryEncodingVisitor,
    .binaryOptions,
    .body,
    .bool,
    .booleanLiteral,
    .booleanLiteralType,
    .boolValue,
    .bytes,
    .bytesInGroup,
    .bytesRead,
    .bytesValue,
    .c,
    .capitalizeNext,
    .cardinality,
    .ccEnableArenas,
    .ccGenericServices,
    .character,
    .chars,
    .class,
    .clearAggregateValue,
    .clearAllowAlias,
    .clearBegin,
    .clearCcEnableArenas,
    .clearCcGenericServices,
    .clearClientStreaming,
    .clearCsharpNamespace,
    .clearCtype,
    .clearDefaultValue,
    .clearDeprecated,
    .clearDoubleValue,
    .clearEnd,
    .clearExtendee,
    .clearExtensionValue,
    .clearGoPackage,
    .clearIdempotencyLevel,
    .clearIdentifierValue,
    .clearInputType,
    .clearIsExtension,
    .clearJavaGenerateEqualsAndHash,
    .clearJavaGenericServices,
    .clearJavaMultipleFiles,
    .clearJavaOuterClassname,
    .clearJavaPackage,
    .clearJavaStringCheckUtf8,
    .clearJsonName,
    .clearJstype,
    .clearLabel,
    .clearLazy,
    .clearLeadingComments,
    .clearMapEntry,
    .clearMessageSetWireFormat,
    .clearName,
    .clearNamePart,
    .clearNegativeIntValue,
    .clearNoStandardDescriptorAccessor,
    .clearNumber,
    .clearObjcClassPrefix,
    .clearOneofIndex,
    .clearOptimizeFor,
    .clearOptions,
    .clearOutputType,
    .clearPackage,
    .clearPacked,
    .clearPhpClassPrefix,
    .clearPhpGenericServices,
    .clearPhpMetadataNamespace,
    .clearPhpNamespace,
    .clearPositiveIntValue,
    .clearProto3Optional,
    .clearPyGenericServices,
    .clearRubyPackage,
    .clearServerStreaming,
    .clearSourceCodeInfo,
    .clearSourceContext,
    .clearSourceFile,
    .clearStart,
    .clearStringValue,
    .clearSwiftPrefix,
    .clearSyntax,
    .clearTrailingComments,
    .clearType,
    .clearTypeName,
    .clearValue,
    .clearWeak,
    .clientStreaming,
    .codePoint,
    .codeUnits,
    .collection,
    .com,
    .comma,
    .contentsOf,
    .contiguousBytes,
    .count,
    .countVarintsInBuffer,
    .csharpNamespace,
    .ctype,
    .customCodable,
    .customDebugStringConvertible,
    .d,
    .data,
    .dataResult,
    .date,
    .daySec,
    .daysSinceEpoch,
    .debugDescription_,
    .decoded,
    .decodedFromJsonnull,
    .decodeExtensionField,
    .decodeExtensionFieldsAsMessageSet,
    .decodeJson,
    .decodeMapField,
    .decodeMessage,
    .decoder,
    .decodeRepeated,
    .decodeRepeatedBoolField,
    .decodeRepeatedBytesField,
    .decodeRepeatedDoubleField,
    .decodeRepeatedEnumField,
    .decodeRepeatedFixed32Field,
    .decodeRepeatedFixed64Field,
    .decodeRepeatedFloatField,
    .decodeRepeatedGroupField,
    .decodeRepeatedInt32Field,
    .decodeRepeatedInt64Field,
    .decodeRepeatedMessageField,
    .decodeRepeatedSfixed32Field,
    .decodeRepeatedSfixed64Field,
    .decodeRepeatedSint32Field,
    .decodeRepeatedSint64Field,
    .decodeRepeatedStringField,
    .decodeRepeatedUint32Field,
    .decodeRepeatedUint64Field,
    .decodeSingular,
    .decodeSingularBoolField,
    .decodeSingularBytesField,
    .decodeSingularDoubleField,
    .decodeSingularEnumField,
    .decodeSingularFixed32Field,
    .decodeSingularFixed64Field,
    .decodeSingularFloatField,
    .decodeSingularGroupField,
    .decodeSingularInt32Field,
    .decodeSingularInt64Field,
    .decodeSingularMessageField,
    .decodeSingularSfixed32Field,
    .decodeSingularSfixed64Field,
    .decodeSingularSint32Field,
    .decodeSingularSint64Field,
    .decodeSingularStringField,
    .decodeSingularUint32Field,
    .decodeSingularUint64Field,
    .decodeTextFormat,
    .defaultAnyTypeUrlprefix,
    .defaultValue,
    .dependency,
    .deprecated,
    .description_,
    .descriptorProto,
    .dictionary,
    .dictionaryLiteral,
    .digit,
    .digit0,
    .digit1,
    .digitCount,
    .digits,
    .digitValue,
    .discardableResult,
    .discardUnknownFields,
    .distance,
    .double,
    .doubleValue,
    .duration,
    .e,
    .element,
    .elements,
    .emitExtensionFieldName,
    .emitFieldName,
    .emitFieldNumber,
    .empty,
    .emptyData,
    .encodeAsBytes,
    .encoded,
    .encodedJsonstring,
    .encodedSize,
    .encodeField,
    .encoder,
    .end,
    .endArray,
    .endMessageField,
    .endObject,
    .endRegularField,
    .enum,
    .enumDescriptorProto,
    .enumOptions,
    .enumReservedRange,
    .enumType,
    .enumvalue,
    .enumValueDescriptorProto,
    .enumValueOptions,
    .equatable,
    .error,
    .expressibleByArrayLiteral,
    .expressibleByDictionaryLiteral,
    .ext,
    .extDecoder,
    .extendedGraphemeClusterLiteral,
    .extendedGraphemeClusterLiteralType,
    .extendee,
    .extensibleMessage,
    .extension,
    .extensionField,
    .extensionFieldNumber,
    .extensionFieldValueSet,
    .extensionMap,
    .extensionRange,
    .extensionRangeOptions,
    .extensions,
    .extras,
    .f,
    .false,
    .field,
    .fieldData,
    .fieldDescriptorProto,
    .fieldMask,
    .fieldName,
    .fieldNameCount,
    .fieldNum,
    .fieldNumber,
    .fieldNumberForProto,
    .fieldOptions,
    .fields,
    .fieldSize,
    .fieldTag,
    .fieldType,
    .file,
    .fileDescriptorProto,
    .fileDescriptorSet,
    .fileName,
    .fileOptions,
    .filter,
    .first,
    .firstItem,
    .float,
    .floatLiteral,
    .floatLiteralType,
    .floatValue,
    .forMessageName,
    .formUnion,
    .forReadingFrom,
    .forTypeURL,
    .forwardParser,
    .forWritingInto,
    .from,
    .fromAscii2,
    .fromAscii4,
    .fromByteOffset,
    .fromHexDigit,
    .func,
    .g,
    .generatedCodeInfo,
    .get,
    .getExtensionValue,
    .googleapis,
    .googleProtobufAny,
    .googleProtobufApi,
    .googleProtobufBoolValue,
    .googleProtobufBytesValue,
    .googleProtobufDescriptorProto,
    .googleProtobufDoubleValue,
    .googleProtobufDuration,
    .googleProtobufEmpty,
    .googleProtobufEnum,
    .googleProtobufEnumDescriptorProto,
    .googleProtobufEnumOptions,
    .googleProtobufEnumValue,
    .googleProtobufEnumValueDescriptorProto,
    .googleProtobufEnumValueOptions,
    .googleProtobufExtensionRangeOptions,
    .googleProtobufField,
    .googleProtobufFieldDescriptorProto,
    .googleProtobufFieldMask,
    .googleProtobufFieldOptions,
    .googleProtobufFileDescriptorProto,
    .googleProtobufFileDescriptorSet,
    .googleProtobufFileOptions,
    .googleProtobufFloatValue,
    .googleProtobufGeneratedCodeInfo,
    .googleProtobufInt32Value,
    .googleProtobufInt64Value,
    .googleProtobufListValue,
    .googleProtobufMessageOptions,
    .googleProtobufMethod,
    .googleProtobufMethodDescriptorProto,
    .googleProtobufMethodOptions,
    .googleProtobufMixin,
    .googleProtobufNullValue,
    .googleProtobufOneofDescriptorProto,
    .googleProtobufOneofOptions,
    .googleProtobufOption,
    .googleProtobufServiceDescriptorProto,
    .googleProtobufServiceOptions,
    .googleProtobufSourceCodeInfo,
    .googleProtobufSourceContext,
    .googleProtobufStringValue,
    .googleProtobufStruct,
    .googleProtobufSyntax,
    .googleProtobufTimestamp,
    .googleProtobufType,
    .googleProtobufUint32Value,
    .googleProtobufUint64Value,
    .googleProtobufUninterpretedOption,
    .googleProtobufValue,
    .goPackage,
    .group,
    .groupFieldNumberStack,
    .groupSize,
    .h,
    .hadOneofValue,
    .handleConflictingOneOf,
    .hasAggregateValue,
    .hasAllowAlias,
    .hasBegin,
    .hasCcEnableArenas,
    .hasCcGenericServices,
    .hasClientStreaming,
    .hasCsharpNamespace,
    .hasCtype,
    .hasDefaultValue,
    .hasDeprecated,
    .hasDoubleValue,
    .hasEnd,
    .hasExtendee,
    .hasExtensionValue,
    .hasGoPackage,
    .hash,
    .hashable,
    .hasher,
    .hashValue_,
    .hashVisitor,
    .hasIdempotencyLevel,
    .hasIdentifierValue,
    .hasInputType,
    .hasIsExtension,
    .hasJavaGenerateEqualsAndHash,
    .hasJavaGenericServices,
    .hasJavaMultipleFiles,
    .hasJavaOuterClassname,
    .hasJavaPackage,
    .hasJavaStringCheckUtf8,
    .hasJsonName,
    .hasJstype,
    .hasLabel,
    .hasLazy,
    .hasLeadingComments,
    .hasMapEntry,
    .hasMessageSetWireFormat,
    .hasName,
    .hasNamePart,
    .hasNegativeIntValue,
    .hasNoStandardDescriptorAccessor,
    .hasNumber,
    .hasObjcClassPrefix,
    .hasOneofIndex,
    .hasOptimizeFor,
    .hasOptions,
    .hasOutputType,
    .hasPackage,
    .hasPacked,
    .hasPhpClassPrefix,
    .hasPhpGenericServices,
    .hasPhpMetadataNamespace,
    .hasPhpNamespace,
    .hasPositiveIntValue,
    .hasProto3Optional,
    .hasPyGenericServices,
    .hasRubyPackage,
    .hasServerStreaming,
    .hasSourceCodeInfo,
    .hasSourceContext,
    .hasSourceFile,
    .hasStart,
    .hasStringValue,
    .hasSwiftPrefix,
    .hasSyntax,
    .hasTrailingComments,
    .hasType,
    .hasTypeName,
    .hasValue,
    .hasWeak,
    .hour,
    .i,
    .idempotencyLevel,
    .identifierValue,
    .if,
    .ignoreUnknownFields,
    .index,
    .init_,
    .inout,
    .inputType,
    .insert,
    .int,
    .int32,
    .int32Value,
    .int64,
    .int64Value,
    .int8,
    .integerLiteral,
    .integerLiteralType,
    .intern,
    .internal,
    .internalState,
    .into,
    .ints,
    .isA,
    .isEqual,
    .isEqualTo,
    .isExtension,
    .isInitialized,
    .itemTagsEncodedSize,
    .iterator,
    .i2166136261,
    .javaGenerateEqualsAndHash,
    .javaGenericServices,
    .javaMultipleFiles,
    .javaOuterClassname,
    .javaPackage,
    .javaStringCheckUtf8,
    .jsondecoder,
    .jsondecodingError,
    .jsondecodingOptions,
    .jsonEncoder,
    .jsonencodingError,
    .jsonencodingOptions,
    .jsonencodingVisitor,
    .jsonmapEncodingVisitor,
    .jsonName,
    .jsonPath,
    .jsonPaths,
    .jsonscanner,
    .jsonString,
    .jsonText,
    .jsonUtf8Data,
    .jstype,
    .k,
    .key,
    .keyField,
    .keyType,
    .kind,
    .l,
    .label,
    .lazy,
    .leadingComments,
    .leadingDetachedComments,
    .length,
    .lessThan,
    .let,
    .lhs,
    .list,
    .listOfMessages,
    .listValue,
    .littleEndian,
    .littleEndianBytes,
    .load,
    .localHasher,
    .location,
    .m,
    .major,
    .makeIterator,
    .mapEntry,
    .mapHash,
    .mapKeyType,
    .mapNameResolver,
    .mapToMessages,
    .mapValueType,
    .mapVisitor,
    .mdayStart,
    .merge,
    .message,
    .messageDepthLimit,
    .messageExtension,
    .messageImplementationBase,
    .messageOptions,
    .messageSet,
    .messageSetWireFormat,
    .messageType,
    .method,
    .methodDescriptorProto,
    .methodOptions,
    .methods,
    .minor,
    .mixin,
    .mixins,
    .modifier,
    .modify,
    .month,
    .msgExtension,
    .mutating,
    .n,
    .name,
    .nameDescription,
    .nameMap,
    .namePart,
    .nameResolver,
    .names,
    .nanos,
    .nativeBytes,
    .nativeEndianBytes,
    .negativeIntValue,
    .nestedType,
    .newL,
    .newList,
    .newValue,
    .nextByte,
    .nextFieldNumber,
    .nil,
    .nilLiteral,
    .noStandardDescriptorAccessor,
    .nullValue,
    .number,
    .numberValue,
    .objcClassPrefix,
    .of,
    .oneofDecl,
    .oneofDescriptorProto,
    .oneofIndex,
    .oneofOptions,
    .oneofs,
    .oneOfKind,
    .optimizeFor,
    .optimizeMode,
    .option,
    .optionalEnumExtensionField,
    .optionalExtensionField,
    .optionalGroupExtensionField,
    .optionalMessageExtensionField,
    .options,
    .other,
    .others,
    .out,
    .outputType,
    .p,
    .package,
    .packed,
    .packedEnumExtensionField,
    .packedExtensionField,
    .padding,
    .parent,
    .parse,
    .partial,
    .path,
    .paths,
    .payload,
    .payloadSize,
    .phpClassPrefix,
    .phpGenericServices,
    .phpMetadataNamespace,
    .phpNamespace,
    .pointer,
    .pos,
    .positiveIntValue,
    .prefix,
    .preserveProtoFieldNames,
    .preTraverse,
    .printUnknownFields,
    .proto2,
    .proto3DefaultValue,
    .proto3Optional,
    .protobufApiversionCheck,
    .protobufApiversion2,
    .protobufBool,
    .protobufBytes,
    .protobufDouble,
    .protobufEnumMap,
    .protobufExtension,
    .protobufFixed32,
    .protobufFixed64,
    .protobufFloat,
    .protobufInt32,
    .protobufInt64,
    .protobufMap,
    .protobufMessageMap,
    .protobufSfixed32,
    .protobufSfixed64,
    .protobufSint32,
    .protobufSint64,
    .protobufString,
    .protobufUint32,
    .protobufUint64,
    .protobufExtensionFieldValues,
    .protobufFieldNumber,
    .protobufGeneratedIsEqualTo,
    .protobufNameMap,
    .protobufNewField,
    .protobufPackage,
    .protocol,
    .protoFieldName,
    .protoMessageName,
    .protoNameProviding,
    .protoPaths,
    .protoSendable,
    .public,
    .publicDependency,
    .putBoolValue,
    .putBytesValue,
    .putDoubleValue,
    .putEnumValue,
    .putFixedUint32,
    .putFixedUint64,
    .putFloatValue,
    .putInt64,
    .putStringValue,
    .putUint64,
    .putUint64Hex,
    .putVarInt,
    .putZigZagVarInt,
    .pyGenericServices,
    .rawChars,
    .rawRepresentable,
    .rawValue_,
    .read4HexDigits,
    .register,
    .repeatedEnumExtensionField,
    .repeatedExtensionField,
    .repeatedGroupExtensionField,
    .repeatedMessageExtensionField,
    .requestStreaming,
    .requestTypeURL,
    .requiredSize,
    .reservedName,
    .reservedRange,
    .responseStreaming,
    .responseTypeURL,
    .result,
    .rethrows,
    .return,
    .returnType,
    .revision,
    .rhs,
    .root,
    .rubyPackage,
    .s,
    .sawBackslash,
    .sawSection4Characters,
    .sawSection5Characters,
    .scanner,
    .seconds,
    .self_,
    .sendable,
    .separator,
    .serialize,
    .serializedData,
    .serializedSize,
    .serverStreaming,
    .service,
    .serviceDescriptorProto,
    .serviceOptions,
    .set,
    .setExtensionValue,
    .shift,
    .simpleExtensionMap,
    .sizer,
    .source,
    .sourceCodeInfo,
    .sourceContext,
    .sourceEncoding,
    .sourceFile,
    .span,
    .split,
    .start,
    .startArray,
    .startArrayObject,
    .startField,
    .startIndex,
    .startMessageField,
    .startObject,
    .startRegularField,
    .state,
    .static,
    .staticString,
    .storage,
    .string,
    .stringLiteral,
    .stringLiteralType,
    .stringResult,
    .stringValue,
    .struct,
    .structValue,
    .subDecoder,
    .subscript,
    .subVisitor,
    .swift,
    .swiftPrefix,
    .swiftProtobuf,
    .syntax,
    .t,
    .tag,
    .terminator,
    .testDecoder,
    .text,
    .textDecoder,
    .textFormatDecoder,
    .textFormatDecodingError,
    .textFormatDecodingOptions,
    .textFormatEncodingOptions,
    .textFormatEncodingVisitor,
    .textFormatString,
    .throws,
    .timeInterval,
    .timeIntervalSince1970,
    .timeIntervalSinceReferenceDate,
    .timestamp,
    .total,
    .totalArrayDepth,
    .totalSize,
    .trailingComments,
    .traverse,
    .true,
    .try,
    .type,
    .typealias,
    .typeEnum,
    .typeName,
    .typePrefix,
    .typeStart,
    .typeUnknown,
    .typeURL,
    .uint32,
    .uint32Value,
    .uint64,
    .uint64Value,
    .uint8,
    .unicodeScalarLiteral,
    .unicodeScalarLiteralType,
    .unicodeScalars,
    .unicodeScalarView,
    .uninterpretedOption,
    .union,
    .uniqueStorage,
    .unknown,
    .unknownFields,
    .unknownStorage,
    .unpackTo,
    .unsafeBufferPointer,
    .unsafeMutablePointer,
    .unsafeMutableRawBufferPointer,
    .unsafeMutableRawPointer,
    .unsafeRawBufferPointer,
    .unsafeRawPointer,
    .updatedOptions,
    .url,
    .utf8,
    .utf8Ptr,
    .utf8ToDouble,
    .utf8View,
    .v,
    .value,
    .valueField,
    .values,
    .valueType,
    .var,
    .version,
    .versionString,
    .visitExtensionFields,
    .visitExtensionFieldsAsMessageSet,
    .visitMapField,
    .visitor,
    .visitPacked,
    .visitPackedBoolField,
    .visitPackedDoubleField,
    .visitPackedEnumField,
    .visitPackedFixed32Field,
    .visitPackedFixed64Field,
    .visitPackedFloatField,
    .visitPackedInt32Field,
    .visitPackedInt64Field,
    .visitPackedSfixed32Field,
    .visitPackedSfixed64Field,
    .visitPackedSint32Field,
    .visitPackedSint64Field,
    .visitPackedUint32Field,
    .visitPackedUint64Field,
    .visitRepeated,
    .visitRepeatedBoolField,
    .visitRepeatedBytesField,
    .visitRepeatedDoubleField,
    .visitRepeatedEnumField,
    .visitRepeatedFixed32Field,
    .visitRepeatedFixed64Field,
    .visitRepeatedFloatField,
    .visitRepeatedGroupField,
    .visitRepeatedInt32Field,
    .visitRepeatedInt64Field,
    .visitRepeatedMessageField,
    .visitRepeatedSfixed32Field,
    .visitRepeatedSfixed64Field,
    .visitRepeatedSint32Field,
    .visitRepeatedSint64Field,
    .visitRepeatedStringField,
    .visitRepeatedUint32Field,
    .visitRepeatedUint64Field,
    .visitSingular,
    .visitSingularBoolField,
    .visitSingularBytesField,
    .visitSingularDoubleField,
    .visitSingularEnumField,
    .visitSingularFixed32Field,
    .visitSingularFixed64Field,
    .visitSingularFloatField,
    .visitSingularGroupField,
    .visitSingularInt32Field,
    .visitSingularInt64Field,
    .visitSingularMessageField,
    .visitSingularSfixed32Field,
    .visitSingularSfixed64Field,
    .visitSingularSint32Field,
    .visitSingularSint64Field,
    .visitSingularStringField,
    .visitSingularUint32Field,
    .visitSingularUint64Field,
    .visitUnknown,
    .wasDecoded,
    .weak,
    .weakDependency,
    .where,
    .wireFormat,
    .with,
    .withUnsafeBytes,
    .withUnsafeMutableBytes,
    .work,
    .wrappedType,
    .written,
    .yday,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension ProtobufUnittestGenerated_GeneratedSwiftReservedEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NONE"),
    1: .same(proto: "adjusted"),
    2: .same(proto: "aggregateValue"),
    3: .same(proto: "allCases"),
    4: .same(proto: "allowAlias"),
    5: .same(proto: "alwaysPrintEnumsAsInts"),
    6: .same(proto: "annotation"),
    7: .same(proto: "any"),
    8: .same(proto: "AnyExtensionField"),
    9: .same(proto: "AnyMessageExtension"),
    10: .same(proto: "AnyMessageStorage"),
    11: .same(proto: "AnyUnpackError"),
    12: .same(proto: "Api"),
    13: .same(proto: "appended"),
    14: .same(proto: "appendUIntHex"),
    15: .same(proto: "appendUnknown"),
    16: .same(proto: "areAllInitialized"),
    17: .same(proto: "array"),
    18: .same(proto: "arrayDepth"),
    19: .same(proto: "arrayLiteral"),
    20: .same(proto: "arraySeparator"),
    21: .same(proto: "as"),
    22: .same(proto: "asciiOpenCurlyBracket"),
    23: .same(proto: "asciiZero"),
    24: .same(proto: "available"),
    25: .same(proto: "b"),
    26: .same(proto: "base64Values"),
    27: .same(proto: "baseAddress"),
    28: .same(proto: "BaseType"),
    29: .same(proto: "begin"),
    30: .same(proto: "binary"),
    31: .same(proto: "BinaryDecoder"),
    32: .same(proto: "BinaryDecodingError"),
    33: .same(proto: "BinaryDecodingOptions"),
    34: .same(proto: "BinaryDelimited"),
    35: .same(proto: "BinaryEncoder"),
    36: .same(proto: "BinaryEncodingError"),
    37: .same(proto: "BinaryEncodingMessageSetSizeVisitor"),
    38: .same(proto: "BinaryEncodingMessageSetVisitor"),
    39: .same(proto: "BinaryEncodingSizeVisitor"),
    40: .same(proto: "BinaryEncodingVisitor"),
    41: .same(proto: "binaryOptions"),
    42: .same(proto: "body"),
    43: .same(proto: "Bool"),
    44: .same(proto: "booleanLiteral"),
    45: .same(proto: "BooleanLiteralType"),
    46: .same(proto: "boolValue"),
    47: .same(proto: "bytes"),
    48: .same(proto: "bytesInGroup"),
    49: .same(proto: "bytesRead"),
    50: .same(proto: "BytesValue"),
    51: .same(proto: "c"),
    52: .same(proto: "capitalizeNext"),
    53: .same(proto: "cardinality"),
    54: .same(proto: "ccEnableArenas"),
    55: .same(proto: "ccGenericServices"),
    56: .same(proto: "Character"),
    57: .same(proto: "chars"),
    58: .same(proto: "class"),
    59: .same(proto: "clearAggregateValue"),
    60: .same(proto: "clearAllowAlias"),
    61: .same(proto: "clearBegin"),
    62: .same(proto: "clearCcEnableArenas"),
    63: .same(proto: "clearCcGenericServices"),
    64: .same(proto: "clearClientStreaming"),
    65: .same(proto: "clearCsharpNamespace"),
    66: .same(proto: "clearCtype"),
    67: .same(proto: "clearDefaultValue"),
    68: .same(proto: "clearDeprecated"),
    69: .same(proto: "clearDoubleValue"),
    70: .same(proto: "clearEnd"),
    71: .same(proto: "clearExtendee"),
    72: .same(proto: "clearExtensionValue"),
    73: .same(proto: "clearGoPackage"),
    74: .same(proto: "clearIdempotencyLevel"),
    75: .same(proto: "clearIdentifierValue"),
    76: .same(proto: "clearInputType"),
    77: .same(proto: "clearIsExtension"),
    78: .same(proto: "clearJavaGenerateEqualsAndHash"),
    79: .same(proto: "clearJavaGenericServices"),
    80: .same(proto: "clearJavaMultipleFiles"),
    81: .same(proto: "clearJavaOuterClassname"),
    82: .same(proto: "clearJavaPackage"),
    83: .same(proto: "clearJavaStringCheckUtf8"),
    84: .same(proto: "clearJsonName"),
    85: .same(proto: "clearJstype"),
    86: .same(proto: "clearLabel"),
    87: .same(proto: "clearLazy"),
    88: .same(proto: "clearLeadingComments"),
    89: .same(proto: "clearMapEntry"),
    90: .same(proto: "clearMessageSetWireFormat"),
    91: .same(proto: "clearName"),
    92: .same(proto: "clearNamePart"),
    93: .same(proto: "clearNegativeIntValue"),
    94: .same(proto: "clearNoStandardDescriptorAccessor"),
    95: .same(proto: "clearNumber"),
    96: .same(proto: "clearObjcClassPrefix"),
    97: .same(proto: "clearOneofIndex"),
    98: .same(proto: "clearOptimizeFor"),
    99: .same(proto: "clearOptions"),
    100: .same(proto: "clearOutputType"),
    101: .same(proto: "clearPackage"),
    102: .same(proto: "clearPacked"),
    103: .same(proto: "clearPhpClassPrefix"),
    104: .same(proto: "clearPhpGenericServices"),
    105: .same(proto: "clearPhpMetadataNamespace"),
    106: .same(proto: "clearPhpNamespace"),
    107: .same(proto: "clearPositiveIntValue"),
    108: .same(proto: "clearProto3Optional"),
    109: .same(proto: "clearPyGenericServices"),
    110: .same(proto: "clearRubyPackage"),
    111: .same(proto: "clearServerStreaming"),
    112: .same(proto: "clearSourceCodeInfo"),
    113: .same(proto: "clearSourceContext"),
    114: .same(proto: "clearSourceFile"),
    115: .same(proto: "clearStart"),
    116: .same(proto: "clearStringValue"),
    117: .same(proto: "clearSwiftPrefix"),
    118: .same(proto: "clearSyntax"),
    119: .same(proto: "clearTrailingComments"),
    120: .same(proto: "clearType"),
    121: .same(proto: "clearTypeName"),
    122: .same(proto: "clearValue"),
    123: .same(proto: "clearWeak"),
    124: .same(proto: "clientStreaming"),
    125: .same(proto: "codePoint"),
    126: .same(proto: "codeUnits"),
    127: .same(proto: "Collection"),
    128: .same(proto: "com"),
    129: .same(proto: "comma"),
    130: .same(proto: "contentsOf"),
    131: .same(proto: "ContiguousBytes"),
    132: .same(proto: "count"),
    133: .same(proto: "countVarintsInBuffer"),
    134: .same(proto: "csharpNamespace"),
    135: .same(proto: "ctype"),
    136: .same(proto: "customCodable"),
    137: .same(proto: "CustomDebugStringConvertible"),
    138: .same(proto: "d"),
    139: .same(proto: "Data"),
    140: .same(proto: "dataResult"),
    141: .same(proto: "date"),
    142: .same(proto: "daySec"),
    143: .same(proto: "daysSinceEpoch"),
    144: .same(proto: "debugDescription"),
    145: .same(proto: "decoded"),
    146: .same(proto: "decodedFromJSONNull"),
    147: .same(proto: "decodeExtensionField"),
    148: .same(proto: "decodeExtensionFieldsAsMessageSet"),
    149: .same(proto: "decodeJSON"),
    150: .same(proto: "decodeMapField"),
    151: .same(proto: "decodeMessage"),
    152: .same(proto: "decoder"),
    153: .same(proto: "decodeRepeated"),
    154: .same(proto: "decodeRepeatedBoolField"),
    155: .same(proto: "decodeRepeatedBytesField"),
    156: .same(proto: "decodeRepeatedDoubleField"),
    157: .same(proto: "decodeRepeatedEnumField"),
    158: .same(proto: "decodeRepeatedFixed32Field"),
    159: .same(proto: "decodeRepeatedFixed64Field"),
    160: .same(proto: "decodeRepeatedFloatField"),
    161: .same(proto: "decodeRepeatedGroupField"),
    162: .same(proto: "decodeRepeatedInt32Field"),
    163: .same(proto: "decodeRepeatedInt64Field"),
    164: .same(proto: "decodeRepeatedMessageField"),
    165: .same(proto: "decodeRepeatedSFixed32Field"),
    166: .same(proto: "decodeRepeatedSFixed64Field"),
    167: .same(proto: "decodeRepeatedSInt32Field"),
    168: .same(proto: "decodeRepeatedSInt64Field"),
    169: .same(proto: "decodeRepeatedStringField"),
    170: .same(proto: "decodeRepeatedUInt32Field"),
    171: .same(proto: "decodeRepeatedUInt64Field"),
    172: .same(proto: "decodeSingular"),
    173: .same(proto: "decodeSingularBoolField"),
    174: .same(proto: "decodeSingularBytesField"),
    175: .same(proto: "decodeSingularDoubleField"),
    176: .same(proto: "decodeSingularEnumField"),
    177: .same(proto: "decodeSingularFixed32Field"),
    178: .same(proto: "decodeSingularFixed64Field"),
    179: .same(proto: "decodeSingularFloatField"),
    180: .same(proto: "decodeSingularGroupField"),
    181: .same(proto: "decodeSingularInt32Field"),
    182: .same(proto: "decodeSingularInt64Field"),
    183: .same(proto: "decodeSingularMessageField"),
    184: .same(proto: "decodeSingularSFixed32Field"),
    185: .same(proto: "decodeSingularSFixed64Field"),
    186: .same(proto: "decodeSingularSInt32Field"),
    187: .same(proto: "decodeSingularSInt64Field"),
    188: .same(proto: "decodeSingularStringField"),
    189: .same(proto: "decodeSingularUInt32Field"),
    190: .same(proto: "decodeSingularUInt64Field"),
    191: .same(proto: "decodeTextFormat"),
    192: .same(proto: "defaultAnyTypeURLPrefix"),
    193: .same(proto: "defaultValue"),
    194: .same(proto: "dependency"),
    195: .same(proto: "deprecated"),
    196: .same(proto: "description"),
    197: .same(proto: "DescriptorProto"),
    198: .same(proto: "Dictionary"),
    199: .same(proto: "dictionaryLiteral"),
    200: .same(proto: "digit"),
    201: .same(proto: "digit0"),
    202: .same(proto: "digit1"),
    203: .same(proto: "digitCount"),
    204: .same(proto: "digits"),
    205: .same(proto: "digitValue"),
    206: .same(proto: "discardableResult"),
    207: .same(proto: "discardUnknownFields"),
    208: .same(proto: "distance"),
    209: .same(proto: "double"),
    210: .same(proto: "doubleValue"),
    211: .same(proto: "Duration"),
    212: .same(proto: "E"),
    213: .same(proto: "Element"),
    214: .same(proto: "elements"),
    215: .same(proto: "emitExtensionFieldName"),
    216: .same(proto: "emitFieldName"),
    217: .same(proto: "emitFieldNumber"),
    218: .same(proto: "Empty"),
    219: .same(proto: "emptyData"),
    220: .same(proto: "encodeAsBytes"),
    221: .same(proto: "encoded"),
    222: .same(proto: "encodedJSONString"),
    223: .same(proto: "encodedSize"),
    224: .same(proto: "encodeField"),
    225: .same(proto: "encoder"),
    226: .same(proto: "end"),
    227: .same(proto: "endArray"),
    228: .same(proto: "endMessageField"),
    229: .same(proto: "endObject"),
    230: .same(proto: "endRegularField"),
    231: .same(proto: "enum"),
    232: .same(proto: "EnumDescriptorProto"),
    233: .same(proto: "EnumOptions"),
    234: .same(proto: "EnumReservedRange"),
    235: .same(proto: "enumType"),
    236: .same(proto: "enumvalue"),
    237: .same(proto: "EnumValueDescriptorProto"),
    238: .same(proto: "EnumValueOptions"),
    239: .same(proto: "Equatable"),
    240: .same(proto: "Error"),
    241: .same(proto: "ExpressibleByArrayLiteral"),
    242: .same(proto: "ExpressibleByDictionaryLiteral"),
    243: .same(proto: "ext"),
    244: .same(proto: "extDecoder"),
    245: .same(proto: "extendedGraphemeClusterLiteral"),
    246: .same(proto: "ExtendedGraphemeClusterLiteralType"),
    247: .same(proto: "extendee"),
    248: .same(proto: "ExtensibleMessage"),
    249: .same(proto: "extension"),
    250: .same(proto: "ExtensionField"),
    251: .same(proto: "extensionFieldNumber"),
    252: .same(proto: "ExtensionFieldValueSet"),
    253: .same(proto: "ExtensionMap"),
    254: .same(proto: "extensionRange"),
    255: .same(proto: "ExtensionRangeOptions"),
    256: .same(proto: "extensions"),
    257: .same(proto: "extras"),
    258: .same(proto: "F"),
    259: .same(proto: "false"),
    260: .same(proto: "field"),
    261: .same(proto: "fieldData"),
    262: .same(proto: "FieldDescriptorProto"),
    263: .same(proto: "FieldMask"),
    264: .same(proto: "fieldName"),
    265: .same(proto: "fieldNameCount"),
    266: .same(proto: "fieldNum"),
    267: .same(proto: "fieldNumber"),
    268: .same(proto: "fieldNumberForProto"),
    269: .same(proto: "FieldOptions"),
    270: .same(proto: "fields"),
    271: .same(proto: "fieldSize"),
    272: .same(proto: "FieldTag"),
    273: .same(proto: "fieldType"),
    274: .same(proto: "file"),
    275: .same(proto: "FileDescriptorProto"),
    276: .same(proto: "FileDescriptorSet"),
    277: .same(proto: "fileName"),
    278: .same(proto: "FileOptions"),
    279: .same(proto: "filter"),
    280: .same(proto: "first"),
    281: .same(proto: "firstItem"),
    282: .same(proto: "float"),
    283: .same(proto: "floatLiteral"),
    284: .same(proto: "FloatLiteralType"),
    285: .same(proto: "FloatValue"),
    286: .same(proto: "forMessageName"),
    287: .same(proto: "formUnion"),
    288: .same(proto: "forReadingFrom"),
    289: .same(proto: "forTypeURL"),
    290: .same(proto: "ForwardParser"),
    291: .same(proto: "forWritingInto"),
    292: .same(proto: "from"),
    293: .same(proto: "fromAscii2"),
    294: .same(proto: "fromAscii4"),
    295: .same(proto: "fromByteOffset"),
    296: .same(proto: "fromHexDigit"),
    297: .same(proto: "func"),
    298: .same(proto: "G"),
    299: .same(proto: "GeneratedCodeInfo"),
    300: .same(proto: "get"),
    301: .same(proto: "getExtensionValue"),
    302: .same(proto: "googleapis"),
    303: .same(proto: "Google_Protobuf_Any"),
    304: .same(proto: "Google_Protobuf_Api"),
    305: .same(proto: "Google_Protobuf_BoolValue"),
    306: .same(proto: "Google_Protobuf_BytesValue"),
    307: .same(proto: "Google_Protobuf_DescriptorProto"),
    308: .same(proto: "Google_Protobuf_DoubleValue"),
    309: .same(proto: "Google_Protobuf_Duration"),
    310: .same(proto: "Google_Protobuf_Empty"),
    311: .same(proto: "Google_Protobuf_Enum"),
    312: .same(proto: "Google_Protobuf_EnumDescriptorProto"),
    313: .same(proto: "Google_Protobuf_EnumOptions"),
    314: .same(proto: "Google_Protobuf_EnumValue"),
    315: .same(proto: "Google_Protobuf_EnumValueDescriptorProto"),
    316: .same(proto: "Google_Protobuf_EnumValueOptions"),
    317: .same(proto: "Google_Protobuf_ExtensionRangeOptions"),
    318: .same(proto: "Google_Protobuf_Field"),
    319: .same(proto: "Google_Protobuf_FieldDescriptorProto"),
    320: .same(proto: "Google_Protobuf_FieldMask"),
    321: .same(proto: "Google_Protobuf_FieldOptions"),
    322: .same(proto: "Google_Protobuf_FileDescriptorProto"),
    323: .same(proto: "Google_Protobuf_FileDescriptorSet"),
    324: .same(proto: "Google_Protobuf_FileOptions"),
    325: .same(proto: "Google_Protobuf_FloatValue"),
    326: .same(proto: "Google_Protobuf_GeneratedCodeInfo"),
    327: .same(proto: "Google_Protobuf_Int32Value"),
    328: .same(proto: "Google_Protobuf_Int64Value"),
    329: .same(proto: "Google_Protobuf_ListValue"),
    330: .same(proto: "Google_Protobuf_MessageOptions"),
    331: .same(proto: "Google_Protobuf_Method"),
    332: .same(proto: "Google_Protobuf_MethodDescriptorProto"),
    333: .same(proto: "Google_Protobuf_MethodOptions"),
    334: .same(proto: "Google_Protobuf_Mixin"),
    335: .same(proto: "Google_Protobuf_NullValue"),
    336: .same(proto: "Google_Protobuf_OneofDescriptorProto"),
    337: .same(proto: "Google_Protobuf_OneofOptions"),
    338: .same(proto: "Google_Protobuf_Option"),
    339: .same(proto: "Google_Protobuf_ServiceDescriptorProto"),
    340: .same(proto: "Google_Protobuf_ServiceOptions"),
    341: .same(proto: "Google_Protobuf_SourceCodeInfo"),
    342: .same(proto: "Google_Protobuf_SourceContext"),
    343: .same(proto: "Google_Protobuf_StringValue"),
    344: .same(proto: "Google_Protobuf_Struct"),
    345: .same(proto: "Google_Protobuf_Syntax"),
    346: .same(proto: "Google_Protobuf_Timestamp"),
    347: .same(proto: "Google_Protobuf_Type"),
    348: .same(proto: "Google_Protobuf_UInt32Value"),
    349: .same(proto: "Google_Protobuf_UInt64Value"),
    350: .same(proto: "Google_Protobuf_UninterpretedOption"),
    351: .same(proto: "Google_Protobuf_Value"),
    352: .same(proto: "goPackage"),
    353: .same(proto: "group"),
    354: .same(proto: "groupFieldNumberStack"),
    355: .same(proto: "groupSize"),
    356: .same(proto: "h"),
    357: .same(proto: "hadOneofValue"),
    358: .same(proto: "handleConflictingOneOf"),
    359: .same(proto: "hasAggregateValue"),
    360: .same(proto: "hasAllowAlias"),
    361: .same(proto: "hasBegin"),
    362: .same(proto: "hasCcEnableArenas"),
    363: .same(proto: "hasCcGenericServices"),
    364: .same(proto: "hasClientStreaming"),
    365: .same(proto: "hasCsharpNamespace"),
    366: .same(proto: "hasCtype"),
    367: .same(proto: "hasDefaultValue"),
    368: .same(proto: "hasDeprecated"),
    369: .same(proto: "hasDoubleValue"),
    370: .same(proto: "hasEnd"),
    371: .same(proto: "hasExtendee"),
    372: .same(proto: "hasExtensionValue"),
    373: .same(proto: "hasGoPackage"),
    374: .same(proto: "hash"),
    375: .same(proto: "Hashable"),
    376: .same(proto: "hasher"),
    377: .same(proto: "hashValue"),
    378: .same(proto: "HashVisitor"),
    379: .same(proto: "hasIdempotencyLevel"),
    380: .same(proto: "hasIdentifierValue"),
    381: .same(proto: "hasInputType"),
    382: .same(proto: "hasIsExtension"),
    383: .same(proto: "hasJavaGenerateEqualsAndHash"),
    384: .same(proto: "hasJavaGenericServices"),
    385: .same(proto: "hasJavaMultipleFiles"),
    386: .same(proto: "hasJavaOuterClassname"),
    387: .same(proto: "hasJavaPackage"),
    388: .same(proto: "hasJavaStringCheckUtf8"),
    389: .same(proto: "hasJsonName"),
    390: .same(proto: "hasJstype"),
    391: .same(proto: "hasLabel"),
    392: .same(proto: "hasLazy"),
    393: .same(proto: "hasLeadingComments"),
    394: .same(proto: "hasMapEntry"),
    395: .same(proto: "hasMessageSetWireFormat"),
    396: .same(proto: "hasName"),
    397: .same(proto: "hasNamePart"),
    398: .same(proto: "hasNegativeIntValue"),
    399: .same(proto: "hasNoStandardDescriptorAccessor"),
    400: .same(proto: "hasNumber"),
    401: .same(proto: "hasObjcClassPrefix"),
    402: .same(proto: "hasOneofIndex"),
    403: .same(proto: "hasOptimizeFor"),
    404: .same(proto: "hasOptions"),
    405: .same(proto: "hasOutputType"),
    406: .same(proto: "hasPackage"),
    407: .same(proto: "hasPacked"),
    408: .same(proto: "hasPhpClassPrefix"),
    409: .same(proto: "hasPhpGenericServices"),
    410: .same(proto: "hasPhpMetadataNamespace"),
    411: .same(proto: "hasPhpNamespace"),
    412: .same(proto: "hasPositiveIntValue"),
    413: .same(proto: "hasProto3Optional"),
    414: .same(proto: "hasPyGenericServices"),
    415: .same(proto: "hasRubyPackage"),
    416: .same(proto: "hasServerStreaming"),
    417: .same(proto: "hasSourceCodeInfo"),
    418: .same(proto: "hasSourceContext"),
    419: .same(proto: "hasSourceFile"),
    420: .same(proto: "hasStart"),
    421: .same(proto: "hasStringValue"),
    422: .same(proto: "hasSwiftPrefix"),
    423: .same(proto: "hasSyntax"),
    424: .same(proto: "hasTrailingComments"),
    425: .same(proto: "hasType"),
    426: .same(proto: "hasTypeName"),
    427: .same(proto: "hasValue"),
    428: .same(proto: "hasWeak"),
    429: .same(proto: "hour"),
    430: .same(proto: "i"),
    431: .same(proto: "idempotencyLevel"),
    432: .same(proto: "identifierValue"),
    433: .same(proto: "if"),
    434: .same(proto: "ignoreUnknownFields"),
    435: .same(proto: "index"),
    436: .same(proto: "init"),
    437: .same(proto: "inout"),
    438: .same(proto: "inputType"),
    439: .same(proto: "insert"),
    440: .same(proto: "Int"),
    441: .same(proto: "Int32"),
    442: .same(proto: "Int32Value"),
    443: .same(proto: "Int64"),
    444: .same(proto: "Int64Value"),
    445: .same(proto: "Int8"),
    446: .same(proto: "integerLiteral"),
    447: .same(proto: "IntegerLiteralType"),
    448: .same(proto: "intern"),
    449: .same(proto: "Internal"),
    450: .same(proto: "InternalState"),
    451: .same(proto: "into"),
    452: .same(proto: "ints"),
    453: .same(proto: "isA"),
    454: .same(proto: "isEqual"),
    455: .same(proto: "isEqualTo"),
    456: .same(proto: "isExtension"),
    457: .same(proto: "isInitialized"),
    458: .same(proto: "itemTagsEncodedSize"),
    459: .same(proto: "Iterator"),
    460: .same(proto: "i_2166136261"),
    461: .same(proto: "javaGenerateEqualsAndHash"),
    462: .same(proto: "javaGenericServices"),
    463: .same(proto: "javaMultipleFiles"),
    464: .same(proto: "javaOuterClassname"),
    465: .same(proto: "javaPackage"),
    466: .same(proto: "javaStringCheckUtf8"),
    467: .same(proto: "JSONDecoder"),
    468: .same(proto: "JSONDecodingError"),
    469: .same(proto: "JSONDecodingOptions"),
    470: .same(proto: "jsonEncoder"),
    471: .same(proto: "JSONEncodingError"),
    472: .same(proto: "JSONEncodingOptions"),
    473: .same(proto: "JSONEncodingVisitor"),
    474: .same(proto: "JSONMapEncodingVisitor"),
    475: .same(proto: "jsonName"),
    476: .same(proto: "jsonPath"),
    477: .same(proto: "jsonPaths"),
    478: .same(proto: "JSONScanner"),
    479: .same(proto: "jsonString"),
    480: .same(proto: "jsonText"),
    481: .same(proto: "jsonUTF8Data"),
    482: .same(proto: "jstype"),
    483: .same(proto: "k"),
    484: .same(proto: "Key"),
    485: .same(proto: "keyField"),
    486: .same(proto: "KeyType"),
    487: .same(proto: "kind"),
    488: .same(proto: "l"),
    489: .same(proto: "label"),
    490: .same(proto: "lazy"),
    491: .same(proto: "leadingComments"),
    492: .same(proto: "leadingDetachedComments"),
    493: .same(proto: "length"),
    494: .same(proto: "lessThan"),
    495: .same(proto: "let"),
    496: .same(proto: "lhs"),
    497: .same(proto: "list"),
    498: .same(proto: "listOfMessages"),
    499: .same(proto: "listValue"),
    500: .same(proto: "littleEndian"),
    501: .same(proto: "littleEndianBytes"),
    502: .same(proto: "load"),
    503: .same(proto: "localHasher"),
    504: .same(proto: "location"),
    505: .same(proto: "M"),
    506: .same(proto: "major"),
    507: .same(proto: "makeIterator"),
    508: .same(proto: "mapEntry"),
    509: .same(proto: "mapHash"),
    510: .same(proto: "MapKeyType"),
    511: .same(proto: "mapNameResolver"),
    512: .same(proto: "mapToMessages"),
    513: .same(proto: "MapValueType"),
    514: .same(proto: "mapVisitor"),
    515: .same(proto: "mdayStart"),
    516: .same(proto: "merge"),
    517: .same(proto: "message"),
    518: .same(proto: "messageDepthLimit"),
    519: .same(proto: "MessageExtension"),
    520: .same(proto: "MessageImplementationBase"),
    521: .same(proto: "MessageOptions"),
    522: .same(proto: "MessageSet"),
    523: .same(proto: "messageSetWireFormat"),
    524: .same(proto: "messageType"),
    525: .same(proto: "Method"),
    526: .same(proto: "MethodDescriptorProto"),
    527: .same(proto: "MethodOptions"),
    528: .same(proto: "methods"),
    529: .same(proto: "minor"),
    530: .same(proto: "Mixin"),
    531: .same(proto: "mixins"),
    532: .same(proto: "modifier"),
    533: .same(proto: "modify"),
    534: .same(proto: "month"),
    535: .same(proto: "msgExtension"),
    536: .same(proto: "mutating"),
    537: .same(proto: "n"),
    538: .same(proto: "name"),
    539: .same(proto: "NameDescription"),
    540: .same(proto: "NameMap"),
    541: .same(proto: "NamePart"),
    542: .same(proto: "nameResolver"),
    543: .same(proto: "names"),
    544: .same(proto: "nanos"),
    545: .same(proto: "nativeBytes"),
    546: .same(proto: "nativeEndianBytes"),
    547: .same(proto: "negativeIntValue"),
    548: .same(proto: "nestedType"),
    549: .same(proto: "newL"),
    550: .same(proto: "newList"),
    551: .same(proto: "newValue"),
    552: .same(proto: "nextByte"),
    553: .same(proto: "nextFieldNumber"),
    554: .same(proto: "nil"),
    555: .same(proto: "nilLiteral"),
    556: .same(proto: "noStandardDescriptorAccessor"),
    557: .same(proto: "nullValue"),
    558: .same(proto: "number"),
    559: .same(proto: "numberValue"),
    560: .same(proto: "objcClassPrefix"),
    561: .same(proto: "of"),
    562: .same(proto: "oneofDecl"),
    563: .same(proto: "OneofDescriptorProto"),
    564: .same(proto: "oneofIndex"),
    565: .same(proto: "OneofOptions"),
    566: .same(proto: "oneofs"),
    567: .same(proto: "OneOf_Kind"),
    568: .same(proto: "optimizeFor"),
    569: .same(proto: "OptimizeMode"),
    570: .same(proto: "Option"),
    571: .same(proto: "OptionalEnumExtensionField"),
    572: .same(proto: "OptionalExtensionField"),
    573: .same(proto: "OptionalGroupExtensionField"),
    574: .same(proto: "OptionalMessageExtensionField"),
    575: .same(proto: "options"),
    576: .same(proto: "other"),
    577: .same(proto: "others"),
    578: .same(proto: "out"),
    579: .same(proto: "outputType"),
    580: .same(proto: "p"),
    581: .same(proto: "package"),
    582: .same(proto: "packed"),
    583: .same(proto: "PackedEnumExtensionField"),
    584: .same(proto: "PackedExtensionField"),
    585: .same(proto: "padding"),
    586: .same(proto: "parent"),
    587: .same(proto: "parse"),
    588: .same(proto: "partial"),
    589: .same(proto: "path"),
    590: .same(proto: "paths"),
    591: .same(proto: "payload"),
    592: .same(proto: "payloadSize"),
    593: .same(proto: "phpClassPrefix"),
    594: .same(proto: "phpGenericServices"),
    595: .same(proto: "phpMetadataNamespace"),
    596: .same(proto: "phpNamespace"),
    597: .same(proto: "pointer"),
    598: .same(proto: "pos"),
    599: .same(proto: "positiveIntValue"),
    600: .same(proto: "prefix"),
    601: .same(proto: "preserveProtoFieldNames"),
    602: .same(proto: "preTraverse"),
    603: .same(proto: "printUnknownFields"),
    604: .same(proto: "proto2"),
    605: .same(proto: "proto3DefaultValue"),
    606: .same(proto: "proto3Optional"),
    607: .same(proto: "ProtobufAPIVersionCheck"),
    608: .same(proto: "ProtobufAPIVersion_2"),
    609: .same(proto: "ProtobufBool"),
    610: .same(proto: "ProtobufBytes"),
    611: .same(proto: "ProtobufDouble"),
    612: .same(proto: "ProtobufEnumMap"),
    613: .same(proto: "protobufExtension"),
    614: .same(proto: "ProtobufFixed32"),
    615: .same(proto: "ProtobufFixed64"),
    616: .same(proto: "ProtobufFloat"),
    617: .same(proto: "ProtobufInt32"),
    618: .same(proto: "ProtobufInt64"),
    619: .same(proto: "ProtobufMap"),
    620: .same(proto: "ProtobufMessageMap"),
    621: .same(proto: "ProtobufSFixed32"),
    622: .same(proto: "ProtobufSFixed64"),
    623: .same(proto: "ProtobufSInt32"),
    624: .same(proto: "ProtobufSInt64"),
    625: .same(proto: "ProtobufString"),
    626: .same(proto: "ProtobufUInt32"),
    627: .same(proto: "ProtobufUInt64"),
    628: .same(proto: "protobuf_extensionFieldValues"),
    629: .same(proto: "protobuf_fieldNumber"),
    630: .same(proto: "protobuf_generated_isEqualTo"),
    631: .same(proto: "protobuf_nameMap"),
    632: .same(proto: "protobuf_newField"),
    633: .same(proto: "protobuf_package"),
    634: .same(proto: "protocol"),
    635: .same(proto: "protoFieldName"),
    636: .same(proto: "protoMessageName"),
    637: .same(proto: "ProtoNameProviding"),
    638: .same(proto: "protoPaths"),
    639: .same(proto: "ProtoSendable"),
    640: .same(proto: "public"),
    641: .same(proto: "publicDependency"),
    642: .same(proto: "putBoolValue"),
    643: .same(proto: "putBytesValue"),
    644: .same(proto: "putDoubleValue"),
    645: .same(proto: "putEnumValue"),
    646: .same(proto: "putFixedUInt32"),
    647: .same(proto: "putFixedUInt64"),
    648: .same(proto: "putFloatValue"),
    649: .same(proto: "putInt64"),
    650: .same(proto: "putStringValue"),
    651: .same(proto: "putUInt64"),
    652: .same(proto: "putUInt64Hex"),
    653: .same(proto: "putVarInt"),
    654: .same(proto: "putZigZagVarInt"),
    655: .same(proto: "pyGenericServices"),
    656: .same(proto: "rawChars"),
    657: .same(proto: "RawRepresentable"),
    658: .same(proto: "RawValue"),
    659: .same(proto: "read4HexDigits"),
    660: .same(proto: "register"),
    661: .same(proto: "RepeatedEnumExtensionField"),
    662: .same(proto: "RepeatedExtensionField"),
    663: .same(proto: "RepeatedGroupExtensionField"),
    664: .same(proto: "RepeatedMessageExtensionField"),
    665: .same(proto: "requestStreaming"),
    666: .same(proto: "requestTypeURL"),
    667: .same(proto: "requiredSize"),
    668: .same(proto: "reservedName"),
    669: .same(proto: "reservedRange"),
    670: .same(proto: "responseStreaming"),
    671: .same(proto: "responseTypeURL"),
    672: .same(proto: "result"),
    673: .same(proto: "rethrows"),
    674: .same(proto: "return"),
    675: .same(proto: "ReturnType"),
    676: .same(proto: "revision"),
    677: .same(proto: "rhs"),
    678: .same(proto: "root"),
    679: .same(proto: "rubyPackage"),
    680: .same(proto: "s"),
    681: .same(proto: "sawBackslash"),
    682: .same(proto: "sawSection4Characters"),
    683: .same(proto: "sawSection5Characters"),
    684: .same(proto: "scanner"),
    685: .same(proto: "seconds"),
    686: .same(proto: "self"),
    687: .same(proto: "Sendable"),
    688: .same(proto: "separator"),
    689: .same(proto: "serialize"),
    690: .same(proto: "serializedData"),
    691: .same(proto: "serializedSize"),
    692: .same(proto: "serverStreaming"),
    693: .same(proto: "service"),
    694: .same(proto: "ServiceDescriptorProto"),
    695: .same(proto: "ServiceOptions"),
    696: .same(proto: "set"),
    697: .same(proto: "setExtensionValue"),
    698: .same(proto: "shift"),
    699: .same(proto: "SimpleExtensionMap"),
    700: .same(proto: "sizer"),
    701: .same(proto: "source"),
    702: .same(proto: "sourceCodeInfo"),
    703: .same(proto: "sourceContext"),
    704: .same(proto: "sourceEncoding"),
    705: .same(proto: "sourceFile"),
    706: .same(proto: "span"),
    707: .same(proto: "split"),
    708: .same(proto: "start"),
    709: .same(proto: "startArray"),
    710: .same(proto: "startArrayObject"),
    711: .same(proto: "startField"),
    712: .same(proto: "startIndex"),
    713: .same(proto: "startMessageField"),
    714: .same(proto: "startObject"),
    715: .same(proto: "startRegularField"),
    716: .same(proto: "state"),
    717: .same(proto: "static"),
    718: .same(proto: "StaticString"),
    719: .same(proto: "storage"),
    720: .same(proto: "String"),
    721: .same(proto: "stringLiteral"),
    722: .same(proto: "StringLiteralType"),
    723: .same(proto: "stringResult"),
    724: .same(proto: "stringValue"),
    725: .same(proto: "struct"),
    726: .same(proto: "structValue"),
    727: .same(proto: "subDecoder"),
    728: .same(proto: "subscript"),
    729: .same(proto: "subVisitor"),
    730: .same(proto: "Swift"),
    731: .same(proto: "swiftPrefix"),
    732: .same(proto: "SwiftProtobuf"),
    733: .same(proto: "syntax"),
    734: .same(proto: "T"),
    735: .same(proto: "tag"),
    736: .same(proto: "terminator"),
    737: .same(proto: "testDecoder"),
    738: .same(proto: "text"),
    739: .same(proto: "textDecoder"),
    740: .same(proto: "TextFormatDecoder"),
    741: .same(proto: "TextFormatDecodingError"),
    742: .same(proto: "TextFormatDecodingOptions"),
    743: .same(proto: "TextFormatEncodingOptions"),
    744: .same(proto: "TextFormatEncodingVisitor"),
    745: .same(proto: "textFormatString"),
    746: .same(proto: "throws"),
    747: .same(proto: "timeInterval"),
    748: .same(proto: "timeIntervalSince1970"),
    749: .same(proto: "timeIntervalSinceReferenceDate"),
    750: .same(proto: "Timestamp"),
    751: .same(proto: "total"),
    752: .same(proto: "totalArrayDepth"),
    753: .same(proto: "totalSize"),
    754: .same(proto: "trailingComments"),
    755: .same(proto: "traverse"),
    756: .same(proto: "true"),
    757: .same(proto: "try"),
    758: .same(proto: "type"),
    759: .same(proto: "typealias"),
    760: .same(proto: "TypeEnum"),
    761: .same(proto: "typeName"),
    762: .same(proto: "typePrefix"),
    763: .same(proto: "typeStart"),
    764: .same(proto: "typeUnknown"),
    765: .same(proto: "typeURL"),
    766: .same(proto: "UInt32"),
    767: .same(proto: "UInt32Value"),
    768: .same(proto: "UInt64"),
    769: .same(proto: "UInt64Value"),
    770: .same(proto: "UInt8"),
    771: .same(proto: "unicodeScalarLiteral"),
    772: .same(proto: "UnicodeScalarLiteralType"),
    773: .same(proto: "unicodeScalars"),
    774: .same(proto: "UnicodeScalarView"),
    775: .same(proto: "uninterpretedOption"),
    776: .same(proto: "union"),
    777: .same(proto: "uniqueStorage"),
    778: .same(proto: "unknown"),
    779: .same(proto: "unknownFields"),
    780: .same(proto: "UnknownStorage"),
    781: .same(proto: "unpackTo"),
    782: .same(proto: "UnsafeBufferPointer"),
    783: .same(proto: "UnsafeMutablePointer"),
    784: .same(proto: "UnsafeMutableRawBufferPointer"),
    785: .same(proto: "UnsafeMutableRawPointer"),
    786: .same(proto: "UnsafeRawBufferPointer"),
    787: .same(proto: "UnsafeRawPointer"),
    788: .same(proto: "updatedOptions"),
    789: .same(proto: "url"),
    790: .same(proto: "utf8"),
    791: .same(proto: "utf8Ptr"),
    792: .same(proto: "utf8ToDouble"),
    793: .same(proto: "UTF8View"),
    794: .same(proto: "v"),
    795: .same(proto: "value"),
    796: .same(proto: "valueField"),
    797: .same(proto: "values"),
    798: .same(proto: "ValueType"),
    799: .same(proto: "var"),
    800: .same(proto: "Version"),
    801: .same(proto: "versionString"),
    802: .same(proto: "visitExtensionFields"),
    803: .same(proto: "visitExtensionFieldsAsMessageSet"),
    804: .same(proto: "visitMapField"),
    805: .same(proto: "visitor"),
    806: .same(proto: "visitPacked"),
    807: .same(proto: "visitPackedBoolField"),
    808: .same(proto: "visitPackedDoubleField"),
    809: .same(proto: "visitPackedEnumField"),
    810: .same(proto: "visitPackedFixed32Field"),
    811: .same(proto: "visitPackedFixed64Field"),
    812: .same(proto: "visitPackedFloatField"),
    813: .same(proto: "visitPackedInt32Field"),
    814: .same(proto: "visitPackedInt64Field"),
    815: .same(proto: "visitPackedSFixed32Field"),
    816: .same(proto: "visitPackedSFixed64Field"),
    817: .same(proto: "visitPackedSInt32Field"),
    818: .same(proto: "visitPackedSInt64Field"),
    819: .same(proto: "visitPackedUInt32Field"),
    820: .same(proto: "visitPackedUInt64Field"),
    821: .same(proto: "visitRepeated"),
    822: .same(proto: "visitRepeatedBoolField"),
    823: .same(proto: "visitRepeatedBytesField"),
    824: .same(proto: "visitRepeatedDoubleField"),
    825: .same(proto: "visitRepeatedEnumField"),
    826: .same(proto: "visitRepeatedFixed32Field"),
    827: .same(proto: "visitRepeatedFixed64Field"),
    828: .same(proto: "visitRepeatedFloatField"),
    829: .same(proto: "visitRepeatedGroupField"),
    830: .same(proto: "visitRepeatedInt32Field"),
    831: .same(proto: "visitRepeatedInt64Field"),
    832: .same(proto: "visitRepeatedMessageField"),
    833: .same(proto: "visitRepeatedSFixed32Field"),
    834: .same(proto: "visitRepeatedSFixed64Field"),
    835: .same(proto: "visitRepeatedSInt32Field"),
    836: .same(proto: "visitRepeatedSInt64Field"),
    837: .same(proto: "visitRepeatedStringField"),
    838: .same(proto: "visitRepeatedUInt32Field"),
    839: .same(proto: "visitRepeatedUInt64Field"),
    840: .same(proto: "visitSingular"),
    841: .same(proto: "visitSingularBoolField"),
    842: .same(proto: "visitSingularBytesField"),
    843: .same(proto: "visitSingularDoubleField"),
    844: .same(proto: "visitSingularEnumField"),
    845: .same(proto: "visitSingularFixed32Field"),
    846: .same(proto: "visitSingularFixed64Field"),
    847: .same(proto: "visitSingularFloatField"),
    848: .same(proto: "visitSingularGroupField"),
    849: .same(proto: "visitSingularInt32Field"),
    850: .same(proto: "visitSingularInt64Field"),
    851: .same(proto: "visitSingularMessageField"),
    852: .same(proto: "visitSingularSFixed32Field"),
    853: .same(proto: "visitSingularSFixed64Field"),
    854: .same(proto: "visitSingularSInt32Field"),
    855: .same(proto: "visitSingularSInt64Field"),
    856: .same(proto: "visitSingularStringField"),
    857: .same(proto: "visitSingularUInt32Field"),
    858: .same(proto: "visitSingularUInt64Field"),
    859: .same(proto: "visitUnknown"),
    860: .same(proto: "wasDecoded"),
    861: .same(proto: "weak"),
    862: .same(proto: "weakDependency"),
    863: .same(proto: "where"),
    864: .same(proto: "wireFormat"),
    865: .same(proto: "with"),
    866: .same(proto: "withUnsafeBytes"),
    867: .same(proto: "withUnsafeMutableBytes"),
    868: .same(proto: "work"),
    869: .same(proto: "WrappedType"),
    870: .same(proto: "written"),
    871: .same(proto: "yday"),
  ]
}
