/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: unittest_swift_enum_optional_default.proto
 *
 */

//  Protos/unittest_swift_enum_optional_default.proto - test proto
// 
//  This source file is part of the Swift.org open source project
// 
//  Copyright (c) 2014 - 2016 Apple Inc. and the Swift project authors
//  Licensed under Apache License v2.0 with Runtime Library Exception
// 
//  See http://swift.org/LICENSE.txt for license information
//  See http://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
// 
//  -----------------------------------------------------------------------------
// /
// / Test handling of enum fields with specified defaults
// /
//  -----------------------------------------------------------------------------

import Foundation
import SwiftProtobuf


public struct ProtobufUnittest_Extend_EnumOptionalDefault: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "ProtobufUnittest_Extend_EnumOptionalDefault"}
  public var protoMessageName: String {return "EnumOptionalDefault"}
  public var protoPackageName: String {return "protobuf_unittest.extend"}
  public var jsonFieldNames: [String: Int] {return [:]}
  public var protoFieldNames: [String: Int] {return [:]}

  var unknown = ProtobufUnknownStorage()

  public struct NestedMessage: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "ProtobufUnittest_Extend_EnumOptionalDefault.NestedMessage"}
    public var protoMessageName: String {return "NestedMessage"}
    public var protoPackageName: String {return "protobuf_unittest.extend"}
    public var jsonFieldNames: [String: Int] {return [
      "message": 1,
      "optionalEnum": 17,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "message": 1,
      "optional_enum": 17,
    ]}

    private class _StorageClass {
      typealias ProtobufExtendedMessage = ProtobufUnittest_Extend_EnumOptionalDefault.NestedMessage
      var unknown = ProtobufUnknownStorage()
      var _message: ProtobufUnittest_Extend_EnumOptionalDefault.NestedMessage? = nil
      var _optionalEnum: ProtobufUnittest_Extend_EnumOptionalDefault.NestedMessage.Enum? = nil

      init() {}

      func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
        let handled: Bool
        switch protoFieldNumber {
        case 1: handled = try setter.decodeOptionalMessageField(fieldType: ProtobufUnittest_Extend_EnumOptionalDefault.NestedMessage.self, value: &_message)
        case 17: handled = try setter.decodeOptionalField(fieldType: ProtobufUnittest_Extend_EnumOptionalDefault.NestedMessage.Enum.self, value: &_optionalEnum)
        default:
          handled = false
        }
        if handled {
            return true
        } else {
            return try unknown.decodeField(setter: &setter)
        }
      }

      func traverse(visitor: inout ProtobufVisitor) throws {
        if let v = _message {
          try visitor.visitSingularMessageField(value: v, protoFieldNumber: 1, protoFieldName: "message", jsonFieldName: "message", swiftFieldName: "message")
        }
        if let v = _optionalEnum {
          try visitor.visitSingularField(fieldType: ProtobufUnittest_Extend_EnumOptionalDefault.NestedMessage.Enum.self, value: v, protoFieldNumber: 17, protoFieldName: "optional_enum", jsonFieldName: "optionalEnum", swiftFieldName: "optionalEnum")
        }
        unknown.traverse(visitor: &visitor)
      }

      func isEqualTo(other: _StorageClass) -> Bool {
        if ((_message != nil || other._message != nil) && (_message == nil || other._message == nil || _message! != other._message!)) {return false}
        if (((_optionalEnum != nil && _optionalEnum! != ProtobufUnittest_Extend_EnumOptionalDefault.NestedMessage.Enum.foo) || (other._optionalEnum != nil && other._optionalEnum! != ProtobufUnittest_Extend_EnumOptionalDefault.NestedMessage.Enum.foo)) && (_optionalEnum == nil || other._optionalEnum == nil || _optionalEnum! != other._optionalEnum!)) {return false}
        if unknown != other.unknown {return false}
        return true
      }

      func copy() -> _StorageClass {
        let clone = _StorageClass()
        clone.unknown = unknown
        clone._message = _message
        clone._optionalEnum = _optionalEnum
        return clone
      }
    }

    private var _storage = _StorageClass()

    public enum Enum: ProtobufEnum {
      public typealias RawValue = Int
      case foo // = 0

      public init() {
        self = .foo
      }

      public init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .foo
        default: return nil
        }
      }

      public init?(name: String) {
        switch name {
        case "foo": self = .foo
        default: return nil
        }
      }

      public init?(jsonName: String) {
        switch jsonName {
        case "FOO": self = .foo
        default: return nil
        }
      }

      public init?(protoName: String) {
        switch protoName {
        case "FOO": self = .foo
        default: return nil
        }
      }

      public var rawValue: Int {
        get {
          switch self {
          case .foo: return 0
          }
        }
      }

      public var json: String {
        get {
          switch self {
          case .foo: return "\"FOO\""
          }
        }
      }

      public var hashValue: Int { return rawValue }

      public var debugDescription: String {
        get {
          switch self {
          case .foo: return ".foo"
          }
        }
      }

    }

    ///   The circular reference here forces the generator to
    ///   implement heap-backed storage.
    public var message: ProtobufUnittest_Extend_EnumOptionalDefault.NestedMessage {
      get {return _storage._message ?? ProtobufUnittest_Extend_EnumOptionalDefault.NestedMessage()}
      set {_uniqueStorage()._message = newValue}
    }
    public var hasMessage: Bool {
      return _storage._message != nil
    }
    public mutating func clearMessage() {
      return _storage._message = nil
    }

    public var optionalEnum: ProtobufUnittest_Extend_EnumOptionalDefault.NestedMessage.Enum {
      get {return _storage._optionalEnum ?? ProtobufUnittest_Extend_EnumOptionalDefault.NestedMessage.Enum.foo}
      set {_uniqueStorage()._optionalEnum = newValue}
    }
    public var hasOptionalEnum: Bool {
      return _storage._optionalEnum != nil
    }
    public mutating func clearOptionalEnum() {
      return _storage._optionalEnum = nil
    }

    public init() {}

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      return try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      try _storage.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: ProtobufUnittest_Extend_EnumOptionalDefault.NestedMessage) -> Bool {
      return _storage === other._storage || _storage.isEqualTo(other: other._storage)
    }

    private mutating func _uniqueStorage() -> _StorageClass {
      if !isKnownUniquelyReferenced(&_storage) {
        _storage = _storage.copy()
      }
      return _storage
    }
  }

  public struct NestedMessage2: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "ProtobufUnittest_Extend_EnumOptionalDefault.NestedMessage2"}
    public var protoMessageName: String {return "NestedMessage2"}
    public var protoPackageName: String {return "protobuf_unittest.extend"}
    public var jsonFieldNames: [String: Int] {return [
      "optionalEnum": 17,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "optional_enum": 17,
    ]}

    var unknown = ProtobufUnknownStorage()

    public enum Enum: ProtobufEnum {
      public typealias RawValue = Int
      case foo // = 0

      public init() {
        self = .foo
      }

      public init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .foo
        default: return nil
        }
      }

      public init?(name: String) {
        switch name {
        case "foo": self = .foo
        default: return nil
        }
      }

      public init?(jsonName: String) {
        switch jsonName {
        case "FOO": self = .foo
        default: return nil
        }
      }

      public init?(protoName: String) {
        switch protoName {
        case "FOO": self = .foo
        default: return nil
        }
      }

      public var rawValue: Int {
        get {
          switch self {
          case .foo: return 0
          }
        }
      }

      public var json: String {
        get {
          switch self {
          case .foo: return "\"FOO\""
          }
        }
      }

      public var hashValue: Int { return rawValue }

      public var debugDescription: String {
        get {
          switch self {
          case .foo: return ".foo"
          }
        }
      }

    }

    private var _optionalEnum: ProtobufUnittest_Extend_EnumOptionalDefault.NestedMessage2.Enum? = nil
    public var optionalEnum: ProtobufUnittest_Extend_EnumOptionalDefault.NestedMessage2.Enum {
      get {return _optionalEnum ?? ProtobufUnittest_Extend_EnumOptionalDefault.NestedMessage2.Enum.foo}
      set {_optionalEnum = newValue}
    }
    public var hasOptionalEnum: Bool {
      return _optionalEnum != nil
    }
    public mutating func clearOptionalEnum() {
      return _optionalEnum = nil
    }

    public init() {}

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 17: handled = try setter.decodeOptionalField(fieldType: ProtobufUnittest_Extend_EnumOptionalDefault.NestedMessage2.Enum.self, value: &_optionalEnum)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if let v = _optionalEnum {
        try visitor.visitSingularField(fieldType: ProtobufUnittest_Extend_EnumOptionalDefault.NestedMessage2.Enum.self, value: v, protoFieldNumber: 17, protoFieldName: "optional_enum", jsonFieldName: "optionalEnum", swiftFieldName: "optionalEnum")
      }
      unknown.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: ProtobufUnittest_Extend_EnumOptionalDefault.NestedMessage2) -> Bool {
      if (((_optionalEnum != nil && _optionalEnum! != ProtobufUnittest_Extend_EnumOptionalDefault.NestedMessage2.Enum.foo) || (other._optionalEnum != nil && other._optionalEnum! != ProtobufUnittest_Extend_EnumOptionalDefault.NestedMessage2.Enum.foo)) && (_optionalEnum == nil || other._optionalEnum == nil || _optionalEnum! != other._optionalEnum!)) {return false}
      if unknown != other.unknown {return false}
      return true
    }
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try unknown.decodeField(setter: &setter)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_Extend_EnumOptionalDefault) -> Bool {
    if unknown != other.unknown {return false}
    return true
  }
}
