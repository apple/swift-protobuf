// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/protobuf/unittest_redaction.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

/// Test proto for redaction

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Proto2Unittest_MetaAnnotatedEnum: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int
  case testNull // = 0
  case testRedactable // = 1
  case testNoRedact // = 2
  case testNoRedactAgain // = 3
  case testRedactableFalse // = 4
  case UNRECOGNIZED(Int)

  init() {
    self = .testNull
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .testNull
    case 1: self = .testRedactable
    case 2: self = .testNoRedact
    case 3: self = .testNoRedactAgain
    case 4: self = .testRedactableFalse
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .testNull: return 0
    case .testRedactable: return 1
    case .testNoRedact: return 2
    case .testNoRedactAgain: return 3
    case .testRedactableFalse: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [Proto2Unittest_MetaAnnotatedEnum] = [
    .testNull,
    .testRedactable,
    .testNoRedact,
    .testNoRedactAgain,
    .testRedactableFalse,
  ]

}

struct Proto2Unittest_TestRedactedNestMessage: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var foo: String {
    get {return _foo ?? String()}
    set {_foo = newValue}
  }
  /// Returns true if `foo` has been explicitly set.
  var hasFoo: Bool {return self._foo != nil}
  /// Clears the value of `foo`. Subsequent reads from it will return its default value.
  mutating func clearFoo() {self._foo = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _foo: String? = nil
}

struct Proto2Unittest_TestRepeatedRedactedNestMessage: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var bar: String {
    get {return _bar ?? String()}
    set {_bar = newValue}
  }
  /// Returns true if `bar` has been explicitly set.
  var hasBar: Bool {return self._bar != nil}
  /// Clears the value of `bar`. Subsequent reads from it will return its default value.
  mutating func clearBar() {self._bar = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _bar: String? = nil
}

struct Proto2Unittest_TestMessageEnum: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var redactableEnum: [Proto2Unittest_MetaAnnotatedEnum] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Proto2Unittest_TestNestedMessageEnum: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var directEnum: [Proto2Unittest_MetaAnnotatedEnum] = []

  var nestedEnum: Proto2Unittest_TestMessageEnum {
    get {return _nestedEnum ?? Proto2Unittest_TestMessageEnum()}
    set {_nestedEnum = newValue}
  }
  /// Returns true if `nestedEnum` has been explicitly set.
  var hasNestedEnum: Bool {return self._nestedEnum != nil}
  /// Clears the value of `nestedEnum`. Subsequent reads from it will return its default value.
  mutating func clearNestedEnum() {self._nestedEnum = nil}

  var redactedString: String {
    get {return _redactedString ?? String()}
    set {_redactedString = newValue}
  }
  /// Returns true if `redactedString` has been explicitly set.
  var hasRedactedString: Bool {return self._redactedString != nil}
  /// Clears the value of `redactedString`. Subsequent reads from it will return its default value.
  mutating func clearRedactedString() {self._redactedString = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _nestedEnum: Proto2Unittest_TestMessageEnum? = nil
  fileprivate var _redactedString: String? = nil
}

struct Proto2Unittest_TestRedactedMessage: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// NOTE: This field was marked as deprecated in the .proto file.
  var textField: String {
    get {return _textField ?? String()}
    set {_textField = newValue}
  }
  /// Returns true if `textField` has been explicitly set.
  var hasTextField: Bool {return self._textField != nil}
  /// Clears the value of `textField`. Subsequent reads from it will return its default value.
  mutating func clearTextField() {self._textField = nil}

  var metaAnnotated: String {
    get {return _metaAnnotated ?? String()}
    set {_metaAnnotated = newValue}
  }
  /// Returns true if `metaAnnotated` has been explicitly set.
  var hasMetaAnnotated: Bool {return self._metaAnnotated != nil}
  /// Clears the value of `metaAnnotated`. Subsequent reads from it will return its default value.
  mutating func clearMetaAnnotated() {self._metaAnnotated = nil}

  var repeatedMetaAnnotated: String {
    get {return _repeatedMetaAnnotated ?? String()}
    set {_repeatedMetaAnnotated = newValue}
  }
  /// Returns true if `repeatedMetaAnnotated` has been explicitly set.
  var hasRepeatedMetaAnnotated: Bool {return self._repeatedMetaAnnotated != nil}
  /// Clears the value of `repeatedMetaAnnotated`. Subsequent reads from it will return its default value.
  mutating func clearRepeatedMetaAnnotated() {self._repeatedMetaAnnotated = nil}

  var unredactedRepeatedAnnotations: String {
    get {return _unredactedRepeatedAnnotations ?? String()}
    set {_unredactedRepeatedAnnotations = newValue}
  }
  /// Returns true if `unredactedRepeatedAnnotations` has been explicitly set.
  var hasUnredactedRepeatedAnnotations: Bool {return self._unredactedRepeatedAnnotations != nil}
  /// Clears the value of `unredactedRepeatedAnnotations`. Subsequent reads from it will return its default value.
  mutating func clearUnredactedRepeatedAnnotations() {self._unredactedRepeatedAnnotations = nil}

  var unreportedNonMetaDebugRedactField: String {
    get {return _unreportedNonMetaDebugRedactField ?? String()}
    set {_unreportedNonMetaDebugRedactField = newValue}
  }
  /// Returns true if `unreportedNonMetaDebugRedactField` has been explicitly set.
  var hasUnreportedNonMetaDebugRedactField: Bool {return self._unreportedNonMetaDebugRedactField != nil}
  /// Clears the value of `unreportedNonMetaDebugRedactField`. Subsequent reads from it will return its default value.
  mutating func clearUnreportedNonMetaDebugRedactField() {self._unreportedNonMetaDebugRedactField = nil}

  var anyField: SwiftProtobuf.Google_Protobuf_Any {
    get {return _anyField ?? SwiftProtobuf.Google_Protobuf_Any()}
    set {_anyField = newValue}
  }
  /// Returns true if `anyField` has been explicitly set.
  var hasAnyField: Bool {return self._anyField != nil}
  /// Clears the value of `anyField`. Subsequent reads from it will return its default value.
  mutating func clearAnyField() {self._anyField = nil}

  var redactableFalse: String {
    get {return _redactableFalse ?? String()}
    set {_redactableFalse = newValue}
  }
  /// Returns true if `redactableFalse` has been explicitly set.
  var hasRedactableFalse: Bool {return self._redactableFalse != nil}
  /// Clears the value of `redactableFalse`. Subsequent reads from it will return its default value.
  mutating func clearRedactableFalse() {self._redactableFalse = nil}

  var testDirectMessageEnum: String {
    get {return _testDirectMessageEnum ?? String()}
    set {_testDirectMessageEnum = newValue}
  }
  /// Returns true if `testDirectMessageEnum` has been explicitly set.
  var hasTestDirectMessageEnum: Bool {return self._testDirectMessageEnum != nil}
  /// Clears the value of `testDirectMessageEnum`. Subsequent reads from it will return its default value.
  mutating func clearTestDirectMessageEnum() {self._testDirectMessageEnum = nil}

  var testNestedMessageEnum: String {
    get {return _testNestedMessageEnum ?? String()}
    set {_testNestedMessageEnum = newValue}
  }
  /// Returns true if `testNestedMessageEnum` has been explicitly set.
  var hasTestNestedMessageEnum: Bool {return self._testNestedMessageEnum != nil}
  /// Clears the value of `testNestedMessageEnum`. Subsequent reads from it will return its default value.
  mutating func clearTestNestedMessageEnum() {self._testNestedMessageEnum = nil}

  var testRedactedMessageEnum: String {
    get {return _testRedactedMessageEnum ?? String()}
    set {_testRedactedMessageEnum = newValue}
  }
  /// Returns true if `testRedactedMessageEnum` has been explicitly set.
  var hasTestRedactedMessageEnum: Bool {return self._testRedactedMessageEnum != nil}
  /// Clears the value of `testRedactedMessageEnum`. Subsequent reads from it will return its default value.
  mutating func clearTestRedactedMessageEnum() {self._testRedactedMessageEnum = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _textField: String? = nil
  fileprivate var _metaAnnotated: String? = nil
  fileprivate var _repeatedMetaAnnotated: String? = nil
  fileprivate var _unredactedRepeatedAnnotations: String? = nil
  fileprivate var _unreportedNonMetaDebugRedactField: String? = nil
  fileprivate var _anyField: SwiftProtobuf.Google_Protobuf_Any? = nil
  fileprivate var _redactableFalse: String? = nil
  fileprivate var _testDirectMessageEnum: String? = nil
  fileprivate var _testNestedMessageEnum: String? = nil
  fileprivate var _testRedactedMessageEnum: String? = nil
}

// MARK: - Extension support defined in unittest_redaction.proto.

// MARK: - Extension Properties

// Swift Extensions on the extended Messages to add easy access to the declared
// extension fields. The names are based on the extension field name from the proto
// declaration. To avoid naming collisions, the names are prefixed with the name of
// the scope where the extend directive occurs.

extension SwiftProtobuf.Google_Protobuf_FieldOptions {

  var Proto2Unittest_metaAnnotatedEnum: Proto2Unittest_MetaAnnotatedEnum {
    get {return getExtensionValue(ext: Proto2Unittest_Extensions_meta_annotated_enum) ?? .testNull}
    set {setExtensionValue(ext: Proto2Unittest_Extensions_meta_annotated_enum, value: newValue)}
  }
  /// Returns true if extension `Proto2Unittest_Extensions_meta_annotated_enum`
  /// has been explicitly set.
  var hasProto2Unittest_metaAnnotatedEnum: Bool {
    return hasExtensionValue(ext: Proto2Unittest_Extensions_meta_annotated_enum)
  }
  /// Clears the value of extension `Proto2Unittest_Extensions_meta_annotated_enum`.
  /// Subsequent reads from it will return its default value.
  mutating func clearProto2Unittest_metaAnnotatedEnum() {
    clearExtensionValue(ext: Proto2Unittest_Extensions_meta_annotated_enum)
  }

  var Proto2Unittest_repeatedMetaAnnotatedEnum: [Proto2Unittest_MetaAnnotatedEnum] {
    get {return getExtensionValue(ext: Proto2Unittest_Extensions_repeated_meta_annotated_enum) ?? []}
    set {setExtensionValue(ext: Proto2Unittest_Extensions_repeated_meta_annotated_enum, value: newValue)}
  }

  var Proto2Unittest_testNestedMessageEnum: Proto2Unittest_TestNestedMessageEnum {
    get {return getExtensionValue(ext: Proto2Unittest_Extensions_test_nested_message_enum) ?? Proto2Unittest_TestNestedMessageEnum()}
    set {setExtensionValue(ext: Proto2Unittest_Extensions_test_nested_message_enum, value: newValue)}
  }
  /// Returns true if extension `Proto2Unittest_Extensions_test_nested_message_enum`
  /// has been explicitly set.
  var hasProto2Unittest_testNestedMessageEnum: Bool {
    return hasExtensionValue(ext: Proto2Unittest_Extensions_test_nested_message_enum)
  }
  /// Clears the value of extension `Proto2Unittest_Extensions_test_nested_message_enum`.
  /// Subsequent reads from it will return its default value.
  mutating func clearProto2Unittest_testNestedMessageEnum() {
    clearExtensionValue(ext: Proto2Unittest_Extensions_test_nested_message_enum)
  }

}

// MARK: - File's ExtensionMap: Proto2Unittest_UnittestRedaction_Extensions

/// A `SwiftProtobuf.SimpleExtensionMap` that includes all of the extensions defined by
/// this .proto file. It can be used any place an `SwiftProtobuf.ExtensionMap` is needed
/// in parsing, or it can be combined with other `SwiftProtobuf.SimpleExtensionMap`s to create
/// a larger `SwiftProtobuf.SimpleExtensionMap`.
let Proto2Unittest_UnittestRedaction_Extensions: SwiftProtobuf.SimpleExtensionMap = [
  Proto2Unittest_Extensions_meta_annotated_enum,
  Proto2Unittest_Extensions_repeated_meta_annotated_enum,
  Proto2Unittest_Extensions_test_nested_message_enum
]

// Extension Objects - The only reason these might be needed is when manually
// constructing a `SimpleExtensionMap`, otherwise, use the above _Extension Properties_
// accessors for the extension fields on the messages directly.

let Proto2Unittest_Extensions_meta_annotated_enum = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalEnumExtensionField<Proto2Unittest_MetaAnnotatedEnum>, SwiftProtobuf.Google_Protobuf_FieldOptions>(
  _protobuf_fieldNumber: 535801413,
  fieldName: "proto2_unittest.meta_annotated_enum"
)

let Proto2Unittest_Extensions_repeated_meta_annotated_enum = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedEnumExtensionField<Proto2Unittest_MetaAnnotatedEnum>, SwiftProtobuf.Google_Protobuf_FieldOptions>(
  _protobuf_fieldNumber: 535801414,
  fieldName: "proto2_unittest.repeated_meta_annotated_enum"
)

let Proto2Unittest_Extensions_test_nested_message_enum = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Proto2Unittest_TestNestedMessageEnum>, SwiftProtobuf.Google_Protobuf_FieldOptions>(
  _protobuf_fieldNumber: 535801415,
  fieldName: "proto2_unittest.test_nested_message_enum"
)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "proto2_unittest"

extension Proto2Unittest_MetaAnnotatedEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "TEST_NULL"),
    1: .same(proto: "TEST_REDACTABLE"),
    2: .same(proto: "TEST_NO_REDACT"),
    3: .same(proto: "TEST_NO_REDACT_AGAIN"),
    4: .same(proto: "TEST_REDACTABLE_FALSE"),
  ]
}

extension Proto2Unittest_TestRedactedNestMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TestRedactedNestMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "foo"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._foo) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._foo {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Proto2Unittest_TestRedactedNestMessage, rhs: Proto2Unittest_TestRedactedNestMessage) -> Bool {
    if lhs._foo != rhs._foo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto2Unittest_TestRepeatedRedactedNestMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TestRepeatedRedactedNestMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bar"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._bar) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._bar {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Proto2Unittest_TestRepeatedRedactedNestMessage, rhs: Proto2Unittest_TestRepeatedRedactedNestMessage) -> Bool {
    if lhs._bar != rhs._bar {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto2Unittest_TestMessageEnum: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TestMessageEnum"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "redactable_enum"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedEnumField(value: &self.redactableEnum) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.redactableEnum.isEmpty {
      try visitor.visitRepeatedEnumField(value: self.redactableEnum, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Proto2Unittest_TestMessageEnum, rhs: Proto2Unittest_TestMessageEnum) -> Bool {
    if lhs.redactableEnum != rhs.redactableEnum {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto2Unittest_TestNestedMessageEnum: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TestNestedMessageEnum"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "direct_enum"),
    2: .standard(proto: "nested_enum"),
    3: .standard(proto: "redacted_string"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedEnumField(value: &self.directEnum) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._nestedEnum) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._redactedString) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.directEnum.isEmpty {
      try visitor.visitRepeatedEnumField(value: self.directEnum, fieldNumber: 1)
    }
    try { if let v = self._nestedEnum {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._redactedString {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Proto2Unittest_TestNestedMessageEnum, rhs: Proto2Unittest_TestNestedMessageEnum) -> Bool {
    if lhs.directEnum != rhs.directEnum {return false}
    if lhs._nestedEnum != rhs._nestedEnum {return false}
    if lhs._redactedString != rhs._redactedString {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto2Unittest_TestRedactedMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TestRedactedMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "text_field"),
    8: .standard(proto: "meta_annotated"),
    9: .standard(proto: "repeated_meta_annotated"),
    10: .standard(proto: "unredacted_repeated_annotations"),
    17: .standard(proto: "unreported_non_meta_debug_redact_field"),
    18: .standard(proto: "any_field"),
    19: .standard(proto: "redactable_false"),
    22: .standard(proto: "test_direct_message_enum"),
    23: .standard(proto: "test_nested_message_enum"),
    24: .standard(proto: "test_redacted_message_enum"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._textField) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self._metaAnnotated) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self._repeatedMetaAnnotated) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self._unredactedRepeatedAnnotations) }()
      case 17: try { try decoder.decodeSingularStringField(value: &self._unreportedNonMetaDebugRedactField) }()
      case 18: try { try decoder.decodeSingularMessageField(value: &self._anyField) }()
      case 19: try { try decoder.decodeSingularStringField(value: &self._redactableFalse) }()
      case 22: try { try decoder.decodeSingularStringField(value: &self._testDirectMessageEnum) }()
      case 23: try { try decoder.decodeSingularStringField(value: &self._testNestedMessageEnum) }()
      case 24: try { try decoder.decodeSingularStringField(value: &self._testRedactedMessageEnum) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._textField {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._metaAnnotated {
      try visitor.visitSingularStringField(value: v, fieldNumber: 8)
    } }()
    try { if let v = self._repeatedMetaAnnotated {
      try visitor.visitSingularStringField(value: v, fieldNumber: 9)
    } }()
    try { if let v = self._unredactedRepeatedAnnotations {
      try visitor.visitSingularStringField(value: v, fieldNumber: 10)
    } }()
    try { if let v = self._unreportedNonMetaDebugRedactField {
      try visitor.visitSingularStringField(value: v, fieldNumber: 17)
    } }()
    try { if let v = self._anyField {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
    } }()
    try { if let v = self._redactableFalse {
      try visitor.visitSingularStringField(value: v, fieldNumber: 19)
    } }()
    try { if let v = self._testDirectMessageEnum {
      try visitor.visitSingularStringField(value: v, fieldNumber: 22)
    } }()
    try { if let v = self._testNestedMessageEnum {
      try visitor.visitSingularStringField(value: v, fieldNumber: 23)
    } }()
    try { if let v = self._testRedactedMessageEnum {
      try visitor.visitSingularStringField(value: v, fieldNumber: 24)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Proto2Unittest_TestRedactedMessage, rhs: Proto2Unittest_TestRedactedMessage) -> Bool {
    if lhs._textField != rhs._textField {return false}
    if lhs._metaAnnotated != rhs._metaAnnotated {return false}
    if lhs._repeatedMetaAnnotated != rhs._repeatedMetaAnnotated {return false}
    if lhs._unredactedRepeatedAnnotations != rhs._unredactedRepeatedAnnotations {return false}
    if lhs._unreportedNonMetaDebugRedactField != rhs._unreportedNonMetaDebugRedactField {return false}
    if lhs._anyField != rhs._anyField {return false}
    if lhs._redactableFalse != rhs._redactableFalse {return false}
    if lhs._testDirectMessageEnum != rhs._testDirectMessageEnum {return false}
    if lhs._testNestedMessageEnum != rhs._testNestedMessageEnum {return false}
    if lhs._testRedactedMessageEnum != rhs._testRedactedMessageEnum {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
