// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/protobuf/map_proto2_unittest.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Protocol Buffers - Google's data interchange format
// Copyright 2008 Google Inc.  All rights reserved.
// https://developers.google.com/protocol-buffers/
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum ProtobufUnittest_Proto2MapEnum: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case foo // = 0
  case bar // = 1
  case baz // = 2

  init() {
    self = .foo
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .foo
    case 1: self = .bar
    case 2: self = .baz
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .foo: return 0
    case .bar: return 1
    case .baz: return 2
    }
  }

}

#if swift(>=4.2)

extension ProtobufUnittest_Proto2MapEnum: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

enum ProtobufUnittest_Proto2MapEnumPlusExtra: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case eProto2MapEnumFoo // = 0
  case eProto2MapEnumBar // = 1
  case eProto2MapEnumBaz // = 2
  case eProto2MapEnumExtra // = 3

  init() {
    self = .eProto2MapEnumFoo
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .eProto2MapEnumFoo
    case 1: self = .eProto2MapEnumBar
    case 2: self = .eProto2MapEnumBaz
    case 3: self = .eProto2MapEnumExtra
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .eProto2MapEnumFoo: return 0
    case .eProto2MapEnumBar: return 1
    case .eProto2MapEnumBaz: return 2
    case .eProto2MapEnumExtra: return 3
    }
  }

}

#if swift(>=4.2)

extension ProtobufUnittest_Proto2MapEnumPlusExtra: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct ProtobufUnittest_TestEnumMap {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var knownMapField: Dictionary<Int32,ProtobufUnittest_Proto2MapEnum> = [:]

  var unknownMapField: Dictionary<Int32,ProtobufUnittest_Proto2MapEnum> = [:]

  /// Other maps with all key types to test the unknown entry serialization
  var unknownMapFieldInt64: Dictionary<Int64,ProtobufUnittest_Proto2MapEnum> = [:]

  var unknownMapFieldUint64: Dictionary<UInt64,ProtobufUnittest_Proto2MapEnum> = [:]

  var unknownMapFieldInt32: Dictionary<Int32,ProtobufUnittest_Proto2MapEnum> = [:]

  var unknownMapFieldUint32: Dictionary<UInt32,ProtobufUnittest_Proto2MapEnum> = [:]

  var unknownMapFieldFixed32: Dictionary<UInt32,ProtobufUnittest_Proto2MapEnum> = [:]

  var unknownMapFieldFixed64: Dictionary<UInt64,ProtobufUnittest_Proto2MapEnum> = [:]

  var unknownMapFieldBool: Dictionary<Bool,ProtobufUnittest_Proto2MapEnum> = [:]

  var unknownMapFieldString: Dictionary<String,ProtobufUnittest_Proto2MapEnum> = [:]

  var unknownMapFieldSint32: Dictionary<Int32,ProtobufUnittest_Proto2MapEnum> = [:]

  var unknownMapFieldSint64: Dictionary<Int64,ProtobufUnittest_Proto2MapEnum> = [:]

  var unknownMapFieldSfixed32: Dictionary<Int32,ProtobufUnittest_Proto2MapEnum> = [:]

  var unknownMapFieldSfixed64: Dictionary<Int64,ProtobufUnittest_Proto2MapEnum> = [:]

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct ProtobufUnittest_TestEnumMapPlusExtra {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var knownMapField: Dictionary<Int32,ProtobufUnittest_Proto2MapEnumPlusExtra> = [:]

  var unknownMapField: Dictionary<Int32,ProtobufUnittest_Proto2MapEnumPlusExtra> = [:]

  /// Other maps with all key types to test the unknown entry serialization
  var unknownMapFieldInt64: Dictionary<Int64,ProtobufUnittest_Proto2MapEnumPlusExtra> = [:]

  var unknownMapFieldUint64: Dictionary<UInt64,ProtobufUnittest_Proto2MapEnumPlusExtra> = [:]

  var unknownMapFieldInt32: Dictionary<Int32,ProtobufUnittest_Proto2MapEnumPlusExtra> = [:]

  var unknownMapFieldUint32: Dictionary<UInt32,ProtobufUnittest_Proto2MapEnumPlusExtra> = [:]

  var unknownMapFieldFixed32: Dictionary<UInt32,ProtobufUnittest_Proto2MapEnumPlusExtra> = [:]

  var unknownMapFieldFixed64: Dictionary<UInt64,ProtobufUnittest_Proto2MapEnumPlusExtra> = [:]

  var unknownMapFieldBool: Dictionary<Bool,ProtobufUnittest_Proto2MapEnumPlusExtra> = [:]

  var unknownMapFieldString: Dictionary<String,ProtobufUnittest_Proto2MapEnumPlusExtra> = [:]

  var unknownMapFieldSint32: Dictionary<Int32,ProtobufUnittest_Proto2MapEnumPlusExtra> = [:]

  var unknownMapFieldSint64: Dictionary<Int64,ProtobufUnittest_Proto2MapEnumPlusExtra> = [:]

  var unknownMapFieldSfixed32: Dictionary<Int32,ProtobufUnittest_Proto2MapEnumPlusExtra> = [:]

  var unknownMapFieldSfixed64: Dictionary<Int64,ProtobufUnittest_Proto2MapEnumPlusExtra> = [:]

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct ProtobufUnittest_TestImportEnumMap {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var importEnumAmp: Dictionary<Int32,ProtobufUnittestImport_ImportEnumForMap> = [:]

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct ProtobufUnittest_TestIntIntMap {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var m: Dictionary<Int32,Int32> = [:]

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Test all key types: string, plus the non-floating-point scalars.
struct ProtobufUnittest_TestMaps {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var mInt32: Dictionary<Int32,ProtobufUnittest_TestIntIntMap> = [:]

  var mInt64: Dictionary<Int64,ProtobufUnittest_TestIntIntMap> = [:]

  var mUint32: Dictionary<UInt32,ProtobufUnittest_TestIntIntMap> = [:]

  var mUint64: Dictionary<UInt64,ProtobufUnittest_TestIntIntMap> = [:]

  var mSint32: Dictionary<Int32,ProtobufUnittest_TestIntIntMap> = [:]

  var mSint64: Dictionary<Int64,ProtobufUnittest_TestIntIntMap> = [:]

  var mFixed32: Dictionary<UInt32,ProtobufUnittest_TestIntIntMap> = [:]

  var mFixed64: Dictionary<UInt64,ProtobufUnittest_TestIntIntMap> = [:]

  var mSfixed32: Dictionary<Int32,ProtobufUnittest_TestIntIntMap> = [:]

  var mSfixed64: Dictionary<Int64,ProtobufUnittest_TestIntIntMap> = [:]

  var mBool: Dictionary<Bool,ProtobufUnittest_TestIntIntMap> = [:]

  var mString: Dictionary<String,ProtobufUnittest_TestIntIntMap> = [:]

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Test maps in submessages.
struct ProtobufUnittest_TestSubmessageMaps {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var m: ProtobufUnittest_TestMaps {
    get {return _m ?? ProtobufUnittest_TestMaps()}
    set {_m = newValue}
  }
  /// Returns true if `m` has been explicitly set.
  var hasM: Bool {return self._m != nil}
  /// Clears the value of `m`. Subsequent reads from it will return its default value.
  mutating func clearM() {self._m = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _m: ProtobufUnittest_TestMaps? = nil
}

struct ProtobufUnittest_TestProto2BytesMap {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var mapBytes: Dictionary<Int32,Data> = [:]

  var mapString: Dictionary<Int32,String> = [:]

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension ProtobufUnittest_Proto2MapEnum: @unchecked Sendable {}
extension ProtobufUnittest_Proto2MapEnumPlusExtra: @unchecked Sendable {}
extension ProtobufUnittest_TestEnumMap: @unchecked Sendable {}
extension ProtobufUnittest_TestEnumMapPlusExtra: @unchecked Sendable {}
extension ProtobufUnittest_TestImportEnumMap: @unchecked Sendable {}
extension ProtobufUnittest_TestIntIntMap: @unchecked Sendable {}
extension ProtobufUnittest_TestMaps: @unchecked Sendable {}
extension ProtobufUnittest_TestSubmessageMaps: @unchecked Sendable {}
extension ProtobufUnittest_TestProto2BytesMap: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "protobuf_unittest"

extension ProtobufUnittest_Proto2MapEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PROTO2_MAP_ENUM_FOO"),
    1: .same(proto: "PROTO2_MAP_ENUM_BAR"),
    2: .same(proto: "PROTO2_MAP_ENUM_BAZ"),
  ]
}

extension ProtobufUnittest_Proto2MapEnumPlusExtra: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "E_PROTO2_MAP_ENUM_FOO"),
    1: .same(proto: "E_PROTO2_MAP_ENUM_BAR"),
    2: .same(proto: "E_PROTO2_MAP_ENUM_BAZ"),
    3: .same(proto: "E_PROTO2_MAP_ENUM_EXTRA"),
  ]
}

extension ProtobufUnittest_TestEnumMap: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TestEnumMap"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    101: .standard(proto: "known_map_field"),
    102: .standard(proto: "unknown_map_field"),
    200: .standard(proto: "unknown_map_field_int64"),
    201: .standard(proto: "unknown_map_field_uint64"),
    202: .standard(proto: "unknown_map_field_int32"),
    203: .standard(proto: "unknown_map_field_uint32"),
    204: .standard(proto: "unknown_map_field_fixed32"),
    205: .standard(proto: "unknown_map_field_fixed64"),
    206: .standard(proto: "unknown_map_field_bool"),
    207: .standard(proto: "unknown_map_field_string"),
    208: .standard(proto: "unknown_map_field_sint32"),
    209: .standard(proto: "unknown_map_field_sint64"),
    210: .standard(proto: "unknown_map_field_sfixed32"),
    211: .standard(proto: "unknown_map_field_sfixed64"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 101: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufEnumMap<SwiftProtobuf.ProtobufInt32,ProtobufUnittest_Proto2MapEnum>.self, value: &self.knownMapField) }()
      case 102: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufEnumMap<SwiftProtobuf.ProtobufInt32,ProtobufUnittest_Proto2MapEnum>.self, value: &self.unknownMapField) }()
      case 200: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufEnumMap<SwiftProtobuf.ProtobufInt64,ProtobufUnittest_Proto2MapEnum>.self, value: &self.unknownMapFieldInt64) }()
      case 201: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufEnumMap<SwiftProtobuf.ProtobufUInt64,ProtobufUnittest_Proto2MapEnum>.self, value: &self.unknownMapFieldUint64) }()
      case 202: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufEnumMap<SwiftProtobuf.ProtobufInt32,ProtobufUnittest_Proto2MapEnum>.self, value: &self.unknownMapFieldInt32) }()
      case 203: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufEnumMap<SwiftProtobuf.ProtobufUInt32,ProtobufUnittest_Proto2MapEnum>.self, value: &self.unknownMapFieldUint32) }()
      case 204: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufEnumMap<SwiftProtobuf.ProtobufFixed32,ProtobufUnittest_Proto2MapEnum>.self, value: &self.unknownMapFieldFixed32) }()
      case 205: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufEnumMap<SwiftProtobuf.ProtobufFixed64,ProtobufUnittest_Proto2MapEnum>.self, value: &self.unknownMapFieldFixed64) }()
      case 206: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufEnumMap<SwiftProtobuf.ProtobufBool,ProtobufUnittest_Proto2MapEnum>.self, value: &self.unknownMapFieldBool) }()
      case 207: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufEnumMap<SwiftProtobuf.ProtobufString,ProtobufUnittest_Proto2MapEnum>.self, value: &self.unknownMapFieldString) }()
      case 208: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufEnumMap<SwiftProtobuf.ProtobufSInt32,ProtobufUnittest_Proto2MapEnum>.self, value: &self.unknownMapFieldSint32) }()
      case 209: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufEnumMap<SwiftProtobuf.ProtobufSInt64,ProtobufUnittest_Proto2MapEnum>.self, value: &self.unknownMapFieldSint64) }()
      case 210: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufEnumMap<SwiftProtobuf.ProtobufSFixed32,ProtobufUnittest_Proto2MapEnum>.self, value: &self.unknownMapFieldSfixed32) }()
      case 211: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufEnumMap<SwiftProtobuf.ProtobufSFixed64,ProtobufUnittest_Proto2MapEnum>.self, value: &self.unknownMapFieldSfixed64) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.knownMapField.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufEnumMap<SwiftProtobuf.ProtobufInt32,ProtobufUnittest_Proto2MapEnum>.self, value: self.knownMapField, fieldNumber: 101)
    }
    if !self.unknownMapField.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufEnumMap<SwiftProtobuf.ProtobufInt32,ProtobufUnittest_Proto2MapEnum>.self, value: self.unknownMapField, fieldNumber: 102)
    }
    if !self.unknownMapFieldInt64.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufEnumMap<SwiftProtobuf.ProtobufInt64,ProtobufUnittest_Proto2MapEnum>.self, value: self.unknownMapFieldInt64, fieldNumber: 200)
    }
    if !self.unknownMapFieldUint64.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufEnumMap<SwiftProtobuf.ProtobufUInt64,ProtobufUnittest_Proto2MapEnum>.self, value: self.unknownMapFieldUint64, fieldNumber: 201)
    }
    if !self.unknownMapFieldInt32.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufEnumMap<SwiftProtobuf.ProtobufInt32,ProtobufUnittest_Proto2MapEnum>.self, value: self.unknownMapFieldInt32, fieldNumber: 202)
    }
    if !self.unknownMapFieldUint32.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufEnumMap<SwiftProtobuf.ProtobufUInt32,ProtobufUnittest_Proto2MapEnum>.self, value: self.unknownMapFieldUint32, fieldNumber: 203)
    }
    if !self.unknownMapFieldFixed32.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufEnumMap<SwiftProtobuf.ProtobufFixed32,ProtobufUnittest_Proto2MapEnum>.self, value: self.unknownMapFieldFixed32, fieldNumber: 204)
    }
    if !self.unknownMapFieldFixed64.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufEnumMap<SwiftProtobuf.ProtobufFixed64,ProtobufUnittest_Proto2MapEnum>.self, value: self.unknownMapFieldFixed64, fieldNumber: 205)
    }
    if !self.unknownMapFieldBool.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufEnumMap<SwiftProtobuf.ProtobufBool,ProtobufUnittest_Proto2MapEnum>.self, value: self.unknownMapFieldBool, fieldNumber: 206)
    }
    if !self.unknownMapFieldString.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufEnumMap<SwiftProtobuf.ProtobufString,ProtobufUnittest_Proto2MapEnum>.self, value: self.unknownMapFieldString, fieldNumber: 207)
    }
    if !self.unknownMapFieldSint32.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufEnumMap<SwiftProtobuf.ProtobufSInt32,ProtobufUnittest_Proto2MapEnum>.self, value: self.unknownMapFieldSint32, fieldNumber: 208)
    }
    if !self.unknownMapFieldSint64.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufEnumMap<SwiftProtobuf.ProtobufSInt64,ProtobufUnittest_Proto2MapEnum>.self, value: self.unknownMapFieldSint64, fieldNumber: 209)
    }
    if !self.unknownMapFieldSfixed32.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufEnumMap<SwiftProtobuf.ProtobufSFixed32,ProtobufUnittest_Proto2MapEnum>.self, value: self.unknownMapFieldSfixed32, fieldNumber: 210)
    }
    if !self.unknownMapFieldSfixed64.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufEnumMap<SwiftProtobuf.ProtobufSFixed64,ProtobufUnittest_Proto2MapEnum>.self, value: self.unknownMapFieldSfixed64, fieldNumber: 211)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittest_TestEnumMap, rhs: ProtobufUnittest_TestEnumMap) -> Bool {
    if lhs.knownMapField != rhs.knownMapField {return false}
    if lhs.unknownMapField != rhs.unknownMapField {return false}
    if lhs.unknownMapFieldInt64 != rhs.unknownMapFieldInt64 {return false}
    if lhs.unknownMapFieldUint64 != rhs.unknownMapFieldUint64 {return false}
    if lhs.unknownMapFieldInt32 != rhs.unknownMapFieldInt32 {return false}
    if lhs.unknownMapFieldUint32 != rhs.unknownMapFieldUint32 {return false}
    if lhs.unknownMapFieldFixed32 != rhs.unknownMapFieldFixed32 {return false}
    if lhs.unknownMapFieldFixed64 != rhs.unknownMapFieldFixed64 {return false}
    if lhs.unknownMapFieldBool != rhs.unknownMapFieldBool {return false}
    if lhs.unknownMapFieldString != rhs.unknownMapFieldString {return false}
    if lhs.unknownMapFieldSint32 != rhs.unknownMapFieldSint32 {return false}
    if lhs.unknownMapFieldSint64 != rhs.unknownMapFieldSint64 {return false}
    if lhs.unknownMapFieldSfixed32 != rhs.unknownMapFieldSfixed32 {return false}
    if lhs.unknownMapFieldSfixed64 != rhs.unknownMapFieldSfixed64 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestEnumMapPlusExtra: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TestEnumMapPlusExtra"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    101: .standard(proto: "known_map_field"),
    102: .standard(proto: "unknown_map_field"),
    200: .standard(proto: "unknown_map_field_int64"),
    201: .standard(proto: "unknown_map_field_uint64"),
    202: .standard(proto: "unknown_map_field_int32"),
    203: .standard(proto: "unknown_map_field_uint32"),
    204: .standard(proto: "unknown_map_field_fixed32"),
    205: .standard(proto: "unknown_map_field_fixed64"),
    206: .standard(proto: "unknown_map_field_bool"),
    207: .standard(proto: "unknown_map_field_string"),
    208: .standard(proto: "unknown_map_field_sint32"),
    209: .standard(proto: "unknown_map_field_sint64"),
    210: .standard(proto: "unknown_map_field_sfixed32"),
    211: .standard(proto: "unknown_map_field_sfixed64"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 101: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufEnumMap<SwiftProtobuf.ProtobufInt32,ProtobufUnittest_Proto2MapEnumPlusExtra>.self, value: &self.knownMapField) }()
      case 102: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufEnumMap<SwiftProtobuf.ProtobufInt32,ProtobufUnittest_Proto2MapEnumPlusExtra>.self, value: &self.unknownMapField) }()
      case 200: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufEnumMap<SwiftProtobuf.ProtobufInt64,ProtobufUnittest_Proto2MapEnumPlusExtra>.self, value: &self.unknownMapFieldInt64) }()
      case 201: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufEnumMap<SwiftProtobuf.ProtobufUInt64,ProtobufUnittest_Proto2MapEnumPlusExtra>.self, value: &self.unknownMapFieldUint64) }()
      case 202: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufEnumMap<SwiftProtobuf.ProtobufInt32,ProtobufUnittest_Proto2MapEnumPlusExtra>.self, value: &self.unknownMapFieldInt32) }()
      case 203: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufEnumMap<SwiftProtobuf.ProtobufUInt32,ProtobufUnittest_Proto2MapEnumPlusExtra>.self, value: &self.unknownMapFieldUint32) }()
      case 204: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufEnumMap<SwiftProtobuf.ProtobufFixed32,ProtobufUnittest_Proto2MapEnumPlusExtra>.self, value: &self.unknownMapFieldFixed32) }()
      case 205: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufEnumMap<SwiftProtobuf.ProtobufFixed64,ProtobufUnittest_Proto2MapEnumPlusExtra>.self, value: &self.unknownMapFieldFixed64) }()
      case 206: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufEnumMap<SwiftProtobuf.ProtobufBool,ProtobufUnittest_Proto2MapEnumPlusExtra>.self, value: &self.unknownMapFieldBool) }()
      case 207: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufEnumMap<SwiftProtobuf.ProtobufString,ProtobufUnittest_Proto2MapEnumPlusExtra>.self, value: &self.unknownMapFieldString) }()
      case 208: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufEnumMap<SwiftProtobuf.ProtobufSInt32,ProtobufUnittest_Proto2MapEnumPlusExtra>.self, value: &self.unknownMapFieldSint32) }()
      case 209: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufEnumMap<SwiftProtobuf.ProtobufSInt64,ProtobufUnittest_Proto2MapEnumPlusExtra>.self, value: &self.unknownMapFieldSint64) }()
      case 210: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufEnumMap<SwiftProtobuf.ProtobufSFixed32,ProtobufUnittest_Proto2MapEnumPlusExtra>.self, value: &self.unknownMapFieldSfixed32) }()
      case 211: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufEnumMap<SwiftProtobuf.ProtobufSFixed64,ProtobufUnittest_Proto2MapEnumPlusExtra>.self, value: &self.unknownMapFieldSfixed64) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.knownMapField.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufEnumMap<SwiftProtobuf.ProtobufInt32,ProtobufUnittest_Proto2MapEnumPlusExtra>.self, value: self.knownMapField, fieldNumber: 101)
    }
    if !self.unknownMapField.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufEnumMap<SwiftProtobuf.ProtobufInt32,ProtobufUnittest_Proto2MapEnumPlusExtra>.self, value: self.unknownMapField, fieldNumber: 102)
    }
    if !self.unknownMapFieldInt64.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufEnumMap<SwiftProtobuf.ProtobufInt64,ProtobufUnittest_Proto2MapEnumPlusExtra>.self, value: self.unknownMapFieldInt64, fieldNumber: 200)
    }
    if !self.unknownMapFieldUint64.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufEnumMap<SwiftProtobuf.ProtobufUInt64,ProtobufUnittest_Proto2MapEnumPlusExtra>.self, value: self.unknownMapFieldUint64, fieldNumber: 201)
    }
    if !self.unknownMapFieldInt32.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufEnumMap<SwiftProtobuf.ProtobufInt32,ProtobufUnittest_Proto2MapEnumPlusExtra>.self, value: self.unknownMapFieldInt32, fieldNumber: 202)
    }
    if !self.unknownMapFieldUint32.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufEnumMap<SwiftProtobuf.ProtobufUInt32,ProtobufUnittest_Proto2MapEnumPlusExtra>.self, value: self.unknownMapFieldUint32, fieldNumber: 203)
    }
    if !self.unknownMapFieldFixed32.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufEnumMap<SwiftProtobuf.ProtobufFixed32,ProtobufUnittest_Proto2MapEnumPlusExtra>.self, value: self.unknownMapFieldFixed32, fieldNumber: 204)
    }
    if !self.unknownMapFieldFixed64.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufEnumMap<SwiftProtobuf.ProtobufFixed64,ProtobufUnittest_Proto2MapEnumPlusExtra>.self, value: self.unknownMapFieldFixed64, fieldNumber: 205)
    }
    if !self.unknownMapFieldBool.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufEnumMap<SwiftProtobuf.ProtobufBool,ProtobufUnittest_Proto2MapEnumPlusExtra>.self, value: self.unknownMapFieldBool, fieldNumber: 206)
    }
    if !self.unknownMapFieldString.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufEnumMap<SwiftProtobuf.ProtobufString,ProtobufUnittest_Proto2MapEnumPlusExtra>.self, value: self.unknownMapFieldString, fieldNumber: 207)
    }
    if !self.unknownMapFieldSint32.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufEnumMap<SwiftProtobuf.ProtobufSInt32,ProtobufUnittest_Proto2MapEnumPlusExtra>.self, value: self.unknownMapFieldSint32, fieldNumber: 208)
    }
    if !self.unknownMapFieldSint64.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufEnumMap<SwiftProtobuf.ProtobufSInt64,ProtobufUnittest_Proto2MapEnumPlusExtra>.self, value: self.unknownMapFieldSint64, fieldNumber: 209)
    }
    if !self.unknownMapFieldSfixed32.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufEnumMap<SwiftProtobuf.ProtobufSFixed32,ProtobufUnittest_Proto2MapEnumPlusExtra>.self, value: self.unknownMapFieldSfixed32, fieldNumber: 210)
    }
    if !self.unknownMapFieldSfixed64.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufEnumMap<SwiftProtobuf.ProtobufSFixed64,ProtobufUnittest_Proto2MapEnumPlusExtra>.self, value: self.unknownMapFieldSfixed64, fieldNumber: 211)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittest_TestEnumMapPlusExtra, rhs: ProtobufUnittest_TestEnumMapPlusExtra) -> Bool {
    if lhs.knownMapField != rhs.knownMapField {return false}
    if lhs.unknownMapField != rhs.unknownMapField {return false}
    if lhs.unknownMapFieldInt64 != rhs.unknownMapFieldInt64 {return false}
    if lhs.unknownMapFieldUint64 != rhs.unknownMapFieldUint64 {return false}
    if lhs.unknownMapFieldInt32 != rhs.unknownMapFieldInt32 {return false}
    if lhs.unknownMapFieldUint32 != rhs.unknownMapFieldUint32 {return false}
    if lhs.unknownMapFieldFixed32 != rhs.unknownMapFieldFixed32 {return false}
    if lhs.unknownMapFieldFixed64 != rhs.unknownMapFieldFixed64 {return false}
    if lhs.unknownMapFieldBool != rhs.unknownMapFieldBool {return false}
    if lhs.unknownMapFieldString != rhs.unknownMapFieldString {return false}
    if lhs.unknownMapFieldSint32 != rhs.unknownMapFieldSint32 {return false}
    if lhs.unknownMapFieldSint64 != rhs.unknownMapFieldSint64 {return false}
    if lhs.unknownMapFieldSfixed32 != rhs.unknownMapFieldSfixed32 {return false}
    if lhs.unknownMapFieldSfixed64 != rhs.unknownMapFieldSfixed64 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestImportEnumMap: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TestImportEnumMap"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "import_enum_amp"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufEnumMap<SwiftProtobuf.ProtobufInt32,ProtobufUnittestImport_ImportEnumForMap>.self, value: &self.importEnumAmp) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.importEnumAmp.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufEnumMap<SwiftProtobuf.ProtobufInt32,ProtobufUnittestImport_ImportEnumForMap>.self, value: self.importEnumAmp, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittest_TestImportEnumMap, rhs: ProtobufUnittest_TestImportEnumMap) -> Bool {
    if lhs.importEnumAmp != rhs.importEnumAmp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestIntIntMap: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TestIntIntMap"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "m"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt32,SwiftProtobuf.ProtobufInt32>.self, value: &self.m) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.m.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt32,SwiftProtobuf.ProtobufInt32>.self, value: self.m, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittest_TestIntIntMap, rhs: ProtobufUnittest_TestIntIntMap) -> Bool {
    if lhs.m != rhs.m {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestMaps: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TestMaps"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "m_int32"),
    2: .standard(proto: "m_int64"),
    3: .standard(proto: "m_uint32"),
    4: .standard(proto: "m_uint64"),
    5: .standard(proto: "m_sint32"),
    6: .standard(proto: "m_sint64"),
    7: .standard(proto: "m_fixed32"),
    8: .standard(proto: "m_fixed64"),
    9: .standard(proto: "m_sfixed32"),
    10: .standard(proto: "m_sfixed64"),
    11: .standard(proto: "m_bool"),
    12: .standard(proto: "m_string"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufInt32,ProtobufUnittest_TestIntIntMap>.self, value: &self.mInt32) }()
      case 2: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufInt64,ProtobufUnittest_TestIntIntMap>.self, value: &self.mInt64) }()
      case 3: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufUInt32,ProtobufUnittest_TestIntIntMap>.self, value: &self.mUint32) }()
      case 4: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufUInt64,ProtobufUnittest_TestIntIntMap>.self, value: &self.mUint64) }()
      case 5: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufSInt32,ProtobufUnittest_TestIntIntMap>.self, value: &self.mSint32) }()
      case 6: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufSInt64,ProtobufUnittest_TestIntIntMap>.self, value: &self.mSint64) }()
      case 7: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufFixed32,ProtobufUnittest_TestIntIntMap>.self, value: &self.mFixed32) }()
      case 8: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufFixed64,ProtobufUnittest_TestIntIntMap>.self, value: &self.mFixed64) }()
      case 9: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufSFixed32,ProtobufUnittest_TestIntIntMap>.self, value: &self.mSfixed32) }()
      case 10: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufSFixed64,ProtobufUnittest_TestIntIntMap>.self, value: &self.mSfixed64) }()
      case 11: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufBool,ProtobufUnittest_TestIntIntMap>.self, value: &self.mBool) }()
      case 12: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,ProtobufUnittest_TestIntIntMap>.self, value: &self.mString) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.mInt32.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufInt32,ProtobufUnittest_TestIntIntMap>.self, value: self.mInt32, fieldNumber: 1)
    }
    if !self.mInt64.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufInt64,ProtobufUnittest_TestIntIntMap>.self, value: self.mInt64, fieldNumber: 2)
    }
    if !self.mUint32.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufUInt32,ProtobufUnittest_TestIntIntMap>.self, value: self.mUint32, fieldNumber: 3)
    }
    if !self.mUint64.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufUInt64,ProtobufUnittest_TestIntIntMap>.self, value: self.mUint64, fieldNumber: 4)
    }
    if !self.mSint32.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufSInt32,ProtobufUnittest_TestIntIntMap>.self, value: self.mSint32, fieldNumber: 5)
    }
    if !self.mSint64.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufSInt64,ProtobufUnittest_TestIntIntMap>.self, value: self.mSint64, fieldNumber: 6)
    }
    if !self.mFixed32.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufFixed32,ProtobufUnittest_TestIntIntMap>.self, value: self.mFixed32, fieldNumber: 7)
    }
    if !self.mFixed64.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufFixed64,ProtobufUnittest_TestIntIntMap>.self, value: self.mFixed64, fieldNumber: 8)
    }
    if !self.mSfixed32.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufSFixed32,ProtobufUnittest_TestIntIntMap>.self, value: self.mSfixed32, fieldNumber: 9)
    }
    if !self.mSfixed64.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufSFixed64,ProtobufUnittest_TestIntIntMap>.self, value: self.mSfixed64, fieldNumber: 10)
    }
    if !self.mBool.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufBool,ProtobufUnittest_TestIntIntMap>.self, value: self.mBool, fieldNumber: 11)
    }
    if !self.mString.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,ProtobufUnittest_TestIntIntMap>.self, value: self.mString, fieldNumber: 12)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittest_TestMaps, rhs: ProtobufUnittest_TestMaps) -> Bool {
    if lhs.mInt32 != rhs.mInt32 {return false}
    if lhs.mInt64 != rhs.mInt64 {return false}
    if lhs.mUint32 != rhs.mUint32 {return false}
    if lhs.mUint64 != rhs.mUint64 {return false}
    if lhs.mSint32 != rhs.mSint32 {return false}
    if lhs.mSint64 != rhs.mSint64 {return false}
    if lhs.mFixed32 != rhs.mFixed32 {return false}
    if lhs.mFixed64 != rhs.mFixed64 {return false}
    if lhs.mSfixed32 != rhs.mSfixed32 {return false}
    if lhs.mSfixed64 != rhs.mSfixed64 {return false}
    if lhs.mBool != rhs.mBool {return false}
    if lhs.mString != rhs.mString {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestSubmessageMaps: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TestSubmessageMaps"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "m"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._m) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._m {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittest_TestSubmessageMaps, rhs: ProtobufUnittest_TestSubmessageMaps) -> Bool {
    if lhs._m != rhs._m {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestProto2BytesMap: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TestProto2BytesMap"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "map_bytes"),
    2: .standard(proto: "map_string"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt32,SwiftProtobuf.ProtobufBytes>.self, value: &self.mapBytes) }()
      case 2: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt32,SwiftProtobuf.ProtobufString>.self, value: &self.mapString) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.mapBytes.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt32,SwiftProtobuf.ProtobufBytes>.self, value: self.mapBytes, fieldNumber: 1)
    }
    if !self.mapString.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt32,SwiftProtobuf.ProtobufString>.self, value: self.mapString, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittest_TestProto2BytesMap, rhs: ProtobufUnittest_TestProto2BytesMap) -> Bool {
    if lhs.mapBytes != rhs.mapBytes {return false}
    if lhs.mapString != rhs.mapString {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
