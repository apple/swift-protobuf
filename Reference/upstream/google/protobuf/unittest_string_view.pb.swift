// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/protobuf/unittest_string_view.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _3: SwiftProtobuf.ProtobufAPIVersion_3 {}
  typealias Version = _3
}

/// NEXT_TAG = 5;
struct ProtobufUnittest_TestStringView: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var singularString: String {
    get {return _singularString ?? String()}
    set {_singularString = newValue}
  }
  /// Returns true if `singularString` has been explicitly set.
  var hasSingularString: Bool {return self._singularString != nil}
  /// Clears the value of `singularString`. Subsequent reads from it will return its default value.
  mutating func clearSingularString() {self._singularString = nil}

  var singularBytes: Data {
    get {return _singularBytes ?? Data()}
    set {_singularBytes = newValue}
  }
  /// Returns true if `singularBytes` has been explicitly set.
  var hasSingularBytes: Bool {return self._singularBytes != nil}
  /// Clears the value of `singularBytes`. Subsequent reads from it will return its default value.
  mutating func clearSingularBytes() {self._singularBytes = nil}

  var repeatedString: [String] = []

  var repeatedBytes: [Data] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _singularString: String? = nil
  fileprivate var _singularBytes: Data? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "protobuf_unittest"

extension ProtobufUnittest_TestStringView: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TestStringView"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "singular_string"),
    2: .standard(proto: "singular_bytes"),
    3: .standard(proto: "repeated_string"),
    4: .standard(proto: "repeated_bytes"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._singularString) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self._singularBytes) }()
      case 3: try { try decoder.decodeRepeatedStringField(value: &self.repeatedString) }()
      case 4: try { try decoder.decodeRepeatedBytesField(value: &self.repeatedBytes) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._singularString {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._singularBytes {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 2)
    } }()
    if !self.repeatedString.isEmpty {
      try visitor.visitRepeatedStringField(value: self.repeatedString, fieldNumber: 3)
    }
    if !self.repeatedBytes.isEmpty {
      try visitor.visitRepeatedBytesField(value: self.repeatedBytes, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittest_TestStringView, rhs: ProtobufUnittest_TestStringView) -> Bool {
    if lhs._singularString != rhs._singularString {return false}
    if lhs._singularBytes != rhs._singularBytes {return false}
    if lhs.repeatedString != rhs.repeatedString {return false}
    if lhs.repeatedBytes != rhs.repeatedBytes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
