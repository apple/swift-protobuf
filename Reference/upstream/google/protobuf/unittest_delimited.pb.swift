// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/protobuf/unittest_delimited.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _3: SwiftProtobuf.ProtobufAPIVersion_3 {}
  typealias Version = _3
}

struct EditionsUnittest_NotGroupLikeScope: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var a: Int32 {
    get {return _a ?? 0}
    set {_a = newValue}
  }
  /// Returns true if `a` has been explicitly set.
  var hasA: Bool {return self._a != nil}
  /// Clears the value of `a`. Subsequent reads from it will return its default value.
  mutating func clearA() {self._a = nil}

  var b: Int32 {
    get {return _b ?? 0}
    set {_b = newValue}
  }
  /// Returns true if `b` has been explicitly set.
  var hasB: Bool {return self._b != nil}
  /// Clears the value of `b`. Subsequent reads from it will return its default value.
  mutating func clearB() {self._b = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _a: Int32? = nil
  fileprivate var _b: Int32? = nil
}

struct EditionsUnittest_GroupLikeFileScope: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var a: Int32 {
    get {return _a ?? 0}
    set {_a = newValue}
  }
  /// Returns true if `a` has been explicitly set.
  var hasA: Bool {return self._a != nil}
  /// Clears the value of `a`. Subsequent reads from it will return its default value.
  mutating func clearA() {self._a = nil}

  var b: Int32 {
    get {return _b ?? 0}
    set {_b = newValue}
  }
  /// Returns true if `b` has been explicitly set.
  var hasB: Bool {return self._b != nil}
  /// Clears the value of `b`. Subsequent reads from it will return its default value.
  mutating func clearB() {self._b = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _a: Int32? = nil
  fileprivate var _b: Int32? = nil
}

struct EditionsUnittest_TestDelimited: SwiftProtobuf.ExtensibleMessage, @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Non-delimited field that otherwise looks group-like.
  var lengthprefixed: EditionsUnittest_TestDelimited.LengthPrefixed {
    get {return _storage._lengthprefixed ?? EditionsUnittest_TestDelimited.LengthPrefixed()}
    set {_uniqueStorage()._lengthprefixed = newValue}
  }
  /// Returns true if `lengthprefixed` has been explicitly set.
  var hasLengthprefixed: Bool {return _storage._lengthprefixed != nil}
  /// Clears the value of `lengthprefixed`. Subsequent reads from it will return its default value.
  mutating func clearLengthprefixed() {_uniqueStorage()._lengthprefixed = nil}

  /// Nested field for nested tests.
  var testDelimited: EditionsUnittest_TestDelimited {
    get {return _storage._testDelimited ?? EditionsUnittest_TestDelimited()}
    set {_uniqueStorage()._testDelimited = newValue}
  }
  /// Returns true if `testDelimited` has been explicitly set.
  var hasTestDelimited: Bool {return _storage._testDelimited != nil}
  /// Clears the value of `testDelimited`. Subsequent reads from it will return its default value.
  mutating func clearTestDelimited() {_uniqueStorage()._testDelimited = nil}

  /// Truly group-like field.
  var groupLike: EditionsUnittest_TestDelimited.GroupLike {
    get {return _storage._groupLike ?? EditionsUnittest_TestDelimited.GroupLike()}
    set {_uniqueStorage()._groupLike = newValue}
  }
  /// Returns true if `groupLike` has been explicitly set.
  var hasGroupLike: Bool {return _storage._groupLike != nil}
  /// Clears the value of `groupLike`. Subsequent reads from it will return its default value.
  mutating func clearGroupLike() {_uniqueStorage()._groupLike = nil}

  /// Delimited field that isn't group-like solely because of its name.
  var groupLike: EditionsUnittest_TestDelimited.GroupLike {
    get {return _storage._groupLike ?? EditionsUnittest_TestDelimited.GroupLike()}
    set {_uniqueStorage()._groupLike = newValue}
  }
  /// Returns true if `groupLike` has been explicitly set.
  var hasGroupLike: Bool {return _storage._groupLike != nil}
  /// Clears the value of `groupLike`. Subsequent reads from it will return its default value.
  mutating func clearGroupLike() {_uniqueStorage()._groupLike = nil}

  /// Delimited field that isn't group-like because of the scope of its type.
  var notGroupLikeScope: EditionsUnittest_NotGroupLikeScope {
    get {return _storage._notGroupLikeScope ?? EditionsUnittest_NotGroupLikeScope()}
    set {_uniqueStorage()._notGroupLikeScope = newValue}
  }
  /// Returns true if `notGroupLikeScope` has been explicitly set.
  var hasNotGroupLikeScope: Bool {return _storage._notGroupLikeScope != nil}
  /// Clears the value of `notGroupLikeScope`. Subsequent reads from it will return its default value.
  mutating func clearNotGroupLikeScope() {_uniqueStorage()._notGroupLikeScope = nil}

  /// Delimited field that's grouplike except that it's an imported type.
  var messageImport: EditionsUnittest_MessageImport {
    get {return _storage._messageImport ?? EditionsUnittest_MessageImport()}
    set {_uniqueStorage()._messageImport = newValue}
  }
  /// Returns true if `messageImport` has been explicitly set.
  var hasMessageImport: Bool {return _storage._messageImport != nil}
  /// Clears the value of `messageImport`. Subsequent reads from it will return its default value.
  mutating func clearMessageImport() {_uniqueStorage()._messageImport = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct LengthPrefixed: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var a: Int32 {
      get {return _a ?? 0}
      set {_a = newValue}
    }
    /// Returns true if `a` has been explicitly set.
    var hasA: Bool {return self._a != nil}
    /// Clears the value of `a`. Subsequent reads from it will return its default value.
    mutating func clearA() {self._a = nil}

    var b: Int32 {
      get {return _b ?? 0}
      set {_b = newValue}
    }
    /// Returns true if `b` has been explicitly set.
    var hasB: Bool {return self._b != nil}
    /// Clears the value of `b`. Subsequent reads from it will return its default value.
    mutating func clearB() {self._b = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _a: Int32? = nil
    fileprivate var _b: Int32? = nil
  }

  struct GroupLike: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var a: Int32 {
      get {return _a ?? 0}
      set {_a = newValue}
    }
    /// Returns true if `a` has been explicitly set.
    var hasA: Bool {return self._a != nil}
    /// Clears the value of `a`. Subsequent reads from it will return its default value.
    mutating func clearA() {self._a = nil}

    var b: Int32 {
      get {return _b ?? 0}
      set {_b = newValue}
    }
    /// Returns true if `b` has been explicitly set.
    var hasB: Bool {return self._b != nil}
    /// Clears the value of `b`. Subsequent reads from it will return its default value.
    mutating func clearB() {self._b = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _a: Int32? = nil
    fileprivate var _b: Int32? = nil
  }

  init() {}

  var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Extension support defined in unittest_delimited.proto.

// MARK: - Extension Properties

// Swift Extensions on the extended Messages to add easy access to the declared
// extension fields. The names are based on the extension field name from the proto
// declaration. To avoid naming collisions, the names are prefixed with the name of
// the scope where the extend directive occurs.

extension EditionsUnittest_TestDelimited {

  /// Truly group-like extension.
  var EditionsUnittest_groupLikeFileScope: EditionsUnittest_GroupLikeFileScope {
    get {return getExtensionValue(ext: EditionsUnittest_Extensions_GroupLikeFileScope) ?? EditionsUnittest_GroupLikeFileScope()}
    set {setExtensionValue(ext: EditionsUnittest_Extensions_GroupLikeFileScope, value: newValue)}
  }
  /// Returns true if extension `EditionsUnittest_Extensions_GroupLikeFileScope`
  /// has been explicitly set.
  var hasEditionsUnittest_groupLikeFileScope: Bool {
    return hasExtensionValue(ext: EditionsUnittest_Extensions_GroupLikeFileScope)
  }
  /// Clears the value of extension `EditionsUnittest_Extensions_GroupLikeFileScope`.
  /// Subsequent reads from it will return its default value.
  mutating func clearEditionsUnittest_groupLikeFileScope() {
    clearExtensionValue(ext: EditionsUnittest_Extensions_GroupLikeFileScope)
  }

  /// Delimited extension that isn't group-like because of its name.
  var EditionsUnittest_notGroupLikeScope: EditionsUnittest_NotGroupLikeScope {
    get {return getExtensionValue(ext: EditionsUnittest_Extensions_NotGroupLikeScope) ?? EditionsUnittest_NotGroupLikeScope()}
    set {setExtensionValue(ext: EditionsUnittest_Extensions_NotGroupLikeScope, value: newValue)}
  }
  /// Returns true if extension `EditionsUnittest_Extensions_NotGroupLikeScope`
  /// has been explicitly set.
  var hasEditionsUnittest_notGroupLikeScope: Bool {
    return hasExtensionValue(ext: EditionsUnittest_Extensions_NotGroupLikeScope)
  }
  /// Clears the value of extension `EditionsUnittest_Extensions_NotGroupLikeScope`.
  /// Subsequent reads from it will return its default value.
  mutating func clearEditionsUnittest_notGroupLikeScope() {
    clearExtensionValue(ext: EditionsUnittest_Extensions_NotGroupLikeScope)
  }

  /// Delimited extension that isn't group-like because of the scope of its type.
  var EditionsUnittest_groupLike: EditionsUnittest_TestDelimited.GroupLike {
    get {return getExtensionValue(ext: EditionsUnittest_Extensions_GroupLike) ?? EditionsUnittest_TestDelimited.GroupLike()}
    set {setExtensionValue(ext: EditionsUnittest_Extensions_GroupLike, value: newValue)}
  }
  /// Returns true if extension `EditionsUnittest_Extensions_GroupLike`
  /// has been explicitly set.
  var hasEditionsUnittest_groupLike: Bool {
    return hasExtensionValue(ext: EditionsUnittest_Extensions_GroupLike)
  }
  /// Clears the value of extension `EditionsUnittest_Extensions_GroupLike`.
  /// Subsequent reads from it will return its default value.
  mutating func clearEditionsUnittest_groupLike() {
    clearExtensionValue(ext: EditionsUnittest_Extensions_GroupLike)
  }

}

// MARK: - File's ExtensionMap: EditionsUnittest_UnittestDelimited_Extensions

/// A `SwiftProtobuf.SimpleExtensionMap` that includes all of the extensions defined by
/// this .proto file. It can be used any place an `SwiftProtobuf.ExtensionMap` is needed
/// in parsing, or it can be combined with other `SwiftProtobuf.SimpleExtensionMap`s to create
/// a larger `SwiftProtobuf.SimpleExtensionMap`.
let EditionsUnittest_UnittestDelimited_Extensions: SwiftProtobuf.SimpleExtensionMap = [
  EditionsUnittest_Extensions_GroupLikeFileScope,
  EditionsUnittest_Extensions_NotGroupLikeScope,
  EditionsUnittest_Extensions_GroupLike
]

// Extension Objects - The only reason these might be needed is when manually
// constructing a `SimpleExtensionMap`, otherwise, use the above _Extension Properties_
// accessors for the extension fields on the messages directly.

/// Truly group-like extension.
let EditionsUnittest_Extensions_GroupLikeFileScope = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalGroupExtensionField<EditionsUnittest_GroupLikeFileScope>, EditionsUnittest_TestDelimited>(
  _protobuf_fieldNumber: 1000,
  fieldName: "editions_unittest.grouplikefilescope"
)

/// Delimited extension that isn't group-like because of its name.
let EditionsUnittest_Extensions_NotGroupLikeScope = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalGroupExtensionField<EditionsUnittest_NotGroupLikeScope>, EditionsUnittest_TestDelimited>(
  _protobuf_fieldNumber: 1001,
  fieldName: "editions_unittest.not_group_like_scope"
)

/// Delimited extension that isn't group-like because of the scope of its type.
let EditionsUnittest_Extensions_GroupLike = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalGroupExtensionField<EditionsUnittest_TestDelimited.GroupLike>, EditionsUnittest_TestDelimited>(
  _protobuf_fieldNumber: 1002,
  fieldName: "editions_unittest.grouplike"
)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "editions_unittest"

extension EditionsUnittest_NotGroupLikeScope: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".NotGroupLikeScope"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "a"),
    2: .same(proto: "b"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self._a) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self._b) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._a {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._b {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: EditionsUnittest_NotGroupLikeScope, rhs: EditionsUnittest_NotGroupLikeScope) -> Bool {
    if lhs._a != rhs._a {return false}
    if lhs._b != rhs._b {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension EditionsUnittest_GroupLikeFileScope: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GroupLikeFileScope"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "a"),
    2: .same(proto: "b"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self._a) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self._b) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._a {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._b {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: EditionsUnittest_GroupLikeFileScope, rhs: EditionsUnittest_GroupLikeFileScope) -> Bool {
    if lhs._a != rhs._a {return false}
    if lhs._b != rhs._b {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension EditionsUnittest_TestDelimited: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TestDelimited"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "lengthprefixed"),
    2: .unique(proto: "TestDelimited", json: "nested"),
    3: .unique(proto: "GroupLike", json: "grouplike"),
    4: .unique(proto: "GroupLike", json: "notgrouplike"),
    5: .unique(proto: "NotGroupLikeScope", json: "notgrouplikescope"),
    6: .unique(proto: "MessageImport", json: "messageimport"),
  ]

  fileprivate class _StorageClass {
    var _lengthprefixed: EditionsUnittest_TestDelimited.LengthPrefixed? = nil
    var _testDelimited: EditionsUnittest_TestDelimited? = nil
    var _groupLike: EditionsUnittest_TestDelimited.GroupLike? = nil
    var _groupLike: EditionsUnittest_TestDelimited.GroupLike? = nil
    var _notGroupLikeScope: EditionsUnittest_NotGroupLikeScope? = nil
    var _messageImport: EditionsUnittest_MessageImport? = nil

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _lengthprefixed = source._lengthprefixed
      _testDelimited = source._testDelimited
      _groupLike = source._groupLike
      _groupLike = source._groupLike
      _notGroupLikeScope = source._notGroupLikeScope
      _messageImport = source._messageImport
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._testDelimited, !v.isInitialized {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._lengthprefixed) }()
        case 2: try { try decoder.decodeSingularGroupField(value: &_storage._testDelimited) }()
        case 3: try { try decoder.decodeSingularGroupField(value: &_storage._groupLike) }()
        case 4: try { try decoder.decodeSingularGroupField(value: &_storage._groupLike) }()
        case 5: try { try decoder.decodeSingularGroupField(value: &_storage._notGroupLikeScope) }()
        case 6: try { try decoder.decodeSingularGroupField(value: &_storage._messageImport) }()
        case 1000..<536870912:
          try { try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: EditionsUnittest_TestDelimited.self, fieldNumber: fieldNumber) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._lengthprefixed {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._testDelimited {
        try visitor.visitSingularGroupField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._groupLike {
        try visitor.visitSingularGroupField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._groupLike {
        try visitor.visitSingularGroupField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._notGroupLikeScope {
        try visitor.visitSingularGroupField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._messageImport {
        try visitor.visitSingularGroupField(value: v, fieldNumber: 6)
      } }()
      try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 1000, end: 536870912)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: EditionsUnittest_TestDelimited, rhs: EditionsUnittest_TestDelimited) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._lengthprefixed != rhs_storage._lengthprefixed {return false}
        if _storage._testDelimited != rhs_storage._testDelimited {return false}
        if _storage._groupLike != rhs_storage._groupLike {return false}
        if _storage._groupLike != rhs_storage._groupLike {return false}
        if _storage._notGroupLikeScope != rhs_storage._notGroupLikeScope {return false}
        if _storage._messageImport != rhs_storage._messageImport {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension EditionsUnittest_TestDelimited.LengthPrefixed: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = EditionsUnittest_TestDelimited.protoMessageName + ".LengthPrefixed"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "a"),
    2: .same(proto: "b"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self._a) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self._b) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._a {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._b {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: EditionsUnittest_TestDelimited.LengthPrefixed, rhs: EditionsUnittest_TestDelimited.LengthPrefixed) -> Bool {
    if lhs._a != rhs._a {return false}
    if lhs._b != rhs._b {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension EditionsUnittest_TestDelimited.GroupLike: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = EditionsUnittest_TestDelimited.protoMessageName + ".GroupLike"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "a"),
    2: .same(proto: "b"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self._a) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self._b) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._a {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._b {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: EditionsUnittest_TestDelimited.GroupLike, rhs: EditionsUnittest_TestDelimited.GroupLike) -> Bool {
    if lhs._a != rhs._a {return false}
    if lhs._b != rhs._b {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
