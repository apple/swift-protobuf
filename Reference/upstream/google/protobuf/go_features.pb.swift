// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/protobuf/go_features.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Protocol Buffers - Google's data interchange format
// Copyright 2023 Google Inc.  All rights reserved.
//
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file or at
// https://developers.google.com/open-source/licenses/bsd

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Pb_GoFeatures: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Whether or not to generate the deprecated UnmarshalJSON method for enums.
  /// Can only be true for proto using the Open Struct api.
  var legacyUnmarshalJsonEnum: Bool {
    get {return _legacyUnmarshalJsonEnum ?? false}
    set {_legacyUnmarshalJsonEnum = newValue}
  }
  /// Returns true if `legacyUnmarshalJsonEnum` has been explicitly set.
  var hasLegacyUnmarshalJsonEnum: Bool {return self._legacyUnmarshalJsonEnum != nil}
  /// Clears the value of `legacyUnmarshalJsonEnum`. Subsequent reads from it will return its default value.
  mutating func clearLegacyUnmarshalJsonEnum() {self._legacyUnmarshalJsonEnum = nil}

  /// One of OPEN, HYBRID or OPAQUE.
  var apiLevel: Pb_GoFeatures.APILevel {
    get {return _apiLevel ?? .unspecified}
    set {_apiLevel = newValue}
  }
  /// Returns true if `apiLevel` has been explicitly set.
  var hasApiLevel: Bool {return self._apiLevel != nil}
  /// Clears the value of `apiLevel`. Subsequent reads from it will return its default value.
  mutating func clearApiLevel() {self._apiLevel = nil}

  var stripEnumPrefix: Pb_GoFeatures.StripEnumPrefix {
    get {return _stripEnumPrefix ?? .unspecified}
    set {_stripEnumPrefix = newValue}
  }
  /// Returns true if `stripEnumPrefix` has been explicitly set.
  var hasStripEnumPrefix: Bool {return self._stripEnumPrefix != nil}
  /// Clears the value of `stripEnumPrefix`. Subsequent reads from it will return its default value.
  mutating func clearStripEnumPrefix() {self._stripEnumPrefix = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum APILevel: Int, SwiftProtobuf.Enum, Swift.CaseIterable {

    /// API_LEVEL_UNSPECIFIED results in selecting the OPEN API,
    /// but needs to be a separate value to distinguish between
    /// an explicitly set api level or a missing api level.
    case unspecified = 0
    case apiOpen = 1
    case apiHybrid = 2
    case apiOpaque = 3

    init() {
      self = .unspecified
    }

  }

  enum StripEnumPrefix: Int, SwiftProtobuf.Enum, Swift.CaseIterable {
    case unspecified = 0
    case keep = 1
    case generateBoth = 2
    case strip = 3

    init() {
      self = .unspecified
    }

  }

  init() {}

  fileprivate var _legacyUnmarshalJsonEnum: Bool? = nil
  fileprivate var _apiLevel: Pb_GoFeatures.APILevel? = nil
  fileprivate var _stripEnumPrefix: Pb_GoFeatures.StripEnumPrefix? = nil
}

// MARK: - Extension support defined in go_features.proto.

// MARK: - Extension Properties

// Swift Extensions on the extended Messages to add easy access to the declared
// extension fields. The names are based on the extension field name from the proto
// declaration. To avoid naming collisions, the names are prefixed with the name of
// the scope where the extend directive occurs.

extension SwiftProtobuf.Google_Protobuf_FeatureSet {

  var Pb_go: Pb_GoFeatures {
    get {return getExtensionValue(ext: Pb_Extensions_go) ?? Pb_GoFeatures()}
    set {setExtensionValue(ext: Pb_Extensions_go, value: newValue)}
  }
  /// Returns true if extension `Pb_Extensions_go`
  /// has been explicitly set.
  var hasPb_go: Bool {
    return hasExtensionValue(ext: Pb_Extensions_go)
  }
  /// Clears the value of extension `Pb_Extensions_go`.
  /// Subsequent reads from it will return its default value.
  mutating func clearPb_go() {
    clearExtensionValue(ext: Pb_Extensions_go)
  }

}

// MARK: - File's ExtensionMap: Pb_GoFeatures_Extensions

/// A `SwiftProtobuf.SimpleExtensionMap` that includes all of the extensions defined by
/// this .proto file. It can be used any place an `SwiftProtobuf.ExtensionMap` is needed
/// in parsing, or it can be combined with other `SwiftProtobuf.SimpleExtensionMap`s to create
/// a larger `SwiftProtobuf.SimpleExtensionMap`.
let Pb_GoFeatures_Extensions: SwiftProtobuf.SimpleExtensionMap = [
  Pb_Extensions_go
]

// Extension Objects - The only reason these might be needed is when manually
// constructing a `SimpleExtensionMap`, otherwise, use the above _Extension Properties_
// accessors for the extension fields on the messages directly.

let Pb_Extensions_go = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Pb_GoFeatures>, SwiftProtobuf.Google_Protobuf_FeatureSet>(
  _protobuf_fieldNumber: 1002,
  fieldName: "pb.go"
)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "pb"

extension Pb_GoFeatures: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GoFeatures"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}legacy_unmarshal_json_enum\0\u{3}api_level\0\u{3}strip_enum_prefix\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self._legacyUnmarshalJsonEnum) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self._apiLevel) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self._stripEnumPrefix) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._legacyUnmarshalJsonEnum {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._apiLevel {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._stripEnumPrefix {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pb_GoFeatures, rhs: Pb_GoFeatures) -> Bool {
    if lhs._legacyUnmarshalJsonEnum != rhs._legacyUnmarshalJsonEnum {return false}
    if lhs._apiLevel != rhs._apiLevel {return false}
    if lhs._stripEnumPrefix != rhs._stripEnumPrefix {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Pb_GoFeatures.APILevel: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0API_LEVEL_UNSPECIFIED\0\u{1}API_OPEN\0\u{1}API_HYBRID\0\u{1}API_OPAQUE\0")
}

extension Pb_GoFeatures.StripEnumPrefix: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0STRIP_ENUM_PREFIX_UNSPECIFIED\0\u{1}STRIP_ENUM_PREFIX_KEEP\0\u{1}STRIP_ENUM_PREFIX_GENERATE_BOTH\0\u{1}STRIP_ENUM_PREFIX_STRIP\0")
}
