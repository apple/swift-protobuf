// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/protobuf/unittest_proto3.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Protocol Buffers - Google's data interchange format
// Copyright 2008 Google Inc.  All rights reserved.
//
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file or at
// https://developers.google.com/open-source/licenses/bsd

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Proto3Unittest_ForeignEnum: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int
  case foreignZero // = 0
  case foreignFoo // = 4
  case foreignBar // = 5
  case foreignBaz // = 6

  /// Large enough to escape the Boxed Integer cache.
  case foreignLarge // = 123456
  case UNRECOGNIZED(Int)

  init() {
    self = .foreignZero
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .foreignZero
    case 4: self = .foreignFoo
    case 5: self = .foreignBar
    case 6: self = .foreignBaz
    case 123456: self = .foreignLarge
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .foreignZero: return 0
    case .foreignFoo: return 4
    case .foreignBar: return 5
    case .foreignBaz: return 6
    case .foreignLarge: return 123456
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [Proto3Unittest_ForeignEnum] = [
    .foreignZero,
    .foreignFoo,
    .foreignBar,
    .foreignBaz,
    .foreignLarge,
  ]

}

/// This proto includes every type of field in both singular and repeated
/// forms.
struct Proto3Unittest_TestAllTypes: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Singular
  var optionalInt32: Int32 {
    get {return _storage._optionalInt32}
    set {_uniqueStorage()._optionalInt32 = newValue}
  }

  var optionalInt64: Int64 {
    get {return _storage._optionalInt64}
    set {_uniqueStorage()._optionalInt64 = newValue}
  }

  var optionalUint32: UInt32 {
    get {return _storage._optionalUint32}
    set {_uniqueStorage()._optionalUint32 = newValue}
  }

  var optionalUint64: UInt64 {
    get {return _storage._optionalUint64}
    set {_uniqueStorage()._optionalUint64 = newValue}
  }

  var optionalSint32: Int32 {
    get {return _storage._optionalSint32}
    set {_uniqueStorage()._optionalSint32 = newValue}
  }

  var optionalSint64: Int64 {
    get {return _storage._optionalSint64}
    set {_uniqueStorage()._optionalSint64 = newValue}
  }

  var optionalFixed32: UInt32 {
    get {return _storage._optionalFixed32}
    set {_uniqueStorage()._optionalFixed32 = newValue}
  }

  var optionalFixed64: UInt64 {
    get {return _storage._optionalFixed64}
    set {_uniqueStorage()._optionalFixed64 = newValue}
  }

  var optionalSfixed32: Int32 {
    get {return _storage._optionalSfixed32}
    set {_uniqueStorage()._optionalSfixed32 = newValue}
  }

  var optionalSfixed64: Int64 {
    get {return _storage._optionalSfixed64}
    set {_uniqueStorage()._optionalSfixed64 = newValue}
  }

  var optionalFloat: Float {
    get {return _storage._optionalFloat}
    set {_uniqueStorage()._optionalFloat = newValue}
  }

  var optionalDouble: Double {
    get {return _storage._optionalDouble}
    set {_uniqueStorage()._optionalDouble = newValue}
  }

  var optionalBool: Bool {
    get {return _storage._optionalBool}
    set {_uniqueStorage()._optionalBool = newValue}
  }

  var optionalString: String {
    get {return _storage._optionalString}
    set {_uniqueStorage()._optionalString = newValue}
  }

  var optionalBytes: Data {
    get {return _storage._optionalBytes}
    set {_uniqueStorage()._optionalBytes = newValue}
  }

  var optionalNestedMessage: Proto3Unittest_TestAllTypes.NestedMessage {
    get {return _storage._optionalNestedMessage ?? Proto3Unittest_TestAllTypes.NestedMessage()}
    set {_uniqueStorage()._optionalNestedMessage = newValue}
  }
  /// Returns true if `optionalNestedMessage` has been explicitly set.
  var hasOptionalNestedMessage: Bool {return _storage._optionalNestedMessage != nil}
  /// Clears the value of `optionalNestedMessage`. Subsequent reads from it will return its default value.
  mutating func clearOptionalNestedMessage() {_uniqueStorage()._optionalNestedMessage = nil}

  var optionalForeignMessage: Proto3Unittest_ForeignMessage {
    get {return _storage._optionalForeignMessage ?? Proto3Unittest_ForeignMessage()}
    set {_uniqueStorage()._optionalForeignMessage = newValue}
  }
  /// Returns true if `optionalForeignMessage` has been explicitly set.
  var hasOptionalForeignMessage: Bool {return _storage._optionalForeignMessage != nil}
  /// Clears the value of `optionalForeignMessage`. Subsequent reads from it will return its default value.
  mutating func clearOptionalForeignMessage() {_uniqueStorage()._optionalForeignMessage = nil}

  var optionalImportMessage: Proto2UnittestImport_ImportMessage {
    get {return _storage._optionalImportMessage ?? Proto2UnittestImport_ImportMessage()}
    set {_uniqueStorage()._optionalImportMessage = newValue}
  }
  /// Returns true if `optionalImportMessage` has been explicitly set.
  var hasOptionalImportMessage: Bool {return _storage._optionalImportMessage != nil}
  /// Clears the value of `optionalImportMessage`. Subsequent reads from it will return its default value.
  mutating func clearOptionalImportMessage() {_uniqueStorage()._optionalImportMessage = nil}

  var optionalNestedEnum: Proto3Unittest_TestAllTypes.NestedEnum {
    get {return _storage._optionalNestedEnum}
    set {_uniqueStorage()._optionalNestedEnum = newValue}
  }

  var optionalForeignEnum: Proto3Unittest_ForeignEnum {
    get {return _storage._optionalForeignEnum}
    set {_uniqueStorage()._optionalForeignEnum = newValue}
  }

  var optionalStringPiece: String {
    get {return _storage._optionalStringPiece}
    set {_uniqueStorage()._optionalStringPiece = newValue}
  }

  var optionalCord: String {
    get {return _storage._optionalCord}
    set {_uniqueStorage()._optionalCord = newValue}
  }

  /// Defined in unittest_import_public.proto
  var optionalPublicImportMessage: Proto2UnittestImport_PublicImportMessage {
    get {return _storage._optionalPublicImportMessage ?? Proto2UnittestImport_PublicImportMessage()}
    set {_uniqueStorage()._optionalPublicImportMessage = newValue}
  }
  /// Returns true if `optionalPublicImportMessage` has been explicitly set.
  var hasOptionalPublicImportMessage: Bool {return _storage._optionalPublicImportMessage != nil}
  /// Clears the value of `optionalPublicImportMessage`. Subsequent reads from it will return its default value.
  mutating func clearOptionalPublicImportMessage() {_uniqueStorage()._optionalPublicImportMessage = nil}

  var optionalLazyMessage: Proto3Unittest_TestAllTypes.NestedMessage {
    get {return _storage._optionalLazyMessage ?? Proto3Unittest_TestAllTypes.NestedMessage()}
    set {_uniqueStorage()._optionalLazyMessage = newValue}
  }
  /// Returns true if `optionalLazyMessage` has been explicitly set.
  var hasOptionalLazyMessage: Bool {return _storage._optionalLazyMessage != nil}
  /// Clears the value of `optionalLazyMessage`. Subsequent reads from it will return its default value.
  mutating func clearOptionalLazyMessage() {_uniqueStorage()._optionalLazyMessage = nil}

  var optionalUnverifiedLazyMessage: Proto3Unittest_TestAllTypes.NestedMessage {
    get {return _storage._optionalUnverifiedLazyMessage ?? Proto3Unittest_TestAllTypes.NestedMessage()}
    set {_uniqueStorage()._optionalUnverifiedLazyMessage = newValue}
  }
  /// Returns true if `optionalUnverifiedLazyMessage` has been explicitly set.
  var hasOptionalUnverifiedLazyMessage: Bool {return _storage._optionalUnverifiedLazyMessage != nil}
  /// Clears the value of `optionalUnverifiedLazyMessage`. Subsequent reads from it will return its default value.
  mutating func clearOptionalUnverifiedLazyMessage() {_uniqueStorage()._optionalUnverifiedLazyMessage = nil}

  var optionalLazyImportMessage: Proto2UnittestImport_ImportMessage {
    get {return _storage._optionalLazyImportMessage ?? Proto2UnittestImport_ImportMessage()}
    set {_uniqueStorage()._optionalLazyImportMessage = newValue}
  }
  /// Returns true if `optionalLazyImportMessage` has been explicitly set.
  var hasOptionalLazyImportMessage: Bool {return _storage._optionalLazyImportMessage != nil}
  /// Clears the value of `optionalLazyImportMessage`. Subsequent reads from it will return its default value.
  mutating func clearOptionalLazyImportMessage() {_uniqueStorage()._optionalLazyImportMessage = nil}

  /// Repeated
  var repeatedInt32: [Int32] {
    get {return _storage._repeatedInt32}
    set {_uniqueStorage()._repeatedInt32 = newValue}
  }

  var repeatedInt64: [Int64] {
    get {return _storage._repeatedInt64}
    set {_uniqueStorage()._repeatedInt64 = newValue}
  }

  var repeatedUint32: [UInt32] {
    get {return _storage._repeatedUint32}
    set {_uniqueStorage()._repeatedUint32 = newValue}
  }

  var repeatedUint64: [UInt64] {
    get {return _storage._repeatedUint64}
    set {_uniqueStorage()._repeatedUint64 = newValue}
  }

  var repeatedSint32: [Int32] {
    get {return _storage._repeatedSint32}
    set {_uniqueStorage()._repeatedSint32 = newValue}
  }

  var repeatedSint64: [Int64] {
    get {return _storage._repeatedSint64}
    set {_uniqueStorage()._repeatedSint64 = newValue}
  }

  var repeatedFixed32: [UInt32] {
    get {return _storage._repeatedFixed32}
    set {_uniqueStorage()._repeatedFixed32 = newValue}
  }

  var repeatedFixed64: [UInt64] {
    get {return _storage._repeatedFixed64}
    set {_uniqueStorage()._repeatedFixed64 = newValue}
  }

  var repeatedSfixed32: [Int32] {
    get {return _storage._repeatedSfixed32}
    set {_uniqueStorage()._repeatedSfixed32 = newValue}
  }

  var repeatedSfixed64: [Int64] {
    get {return _storage._repeatedSfixed64}
    set {_uniqueStorage()._repeatedSfixed64 = newValue}
  }

  var repeatedFloat: [Float] {
    get {return _storage._repeatedFloat}
    set {_uniqueStorage()._repeatedFloat = newValue}
  }

  var repeatedDouble: [Double] {
    get {return _storage._repeatedDouble}
    set {_uniqueStorage()._repeatedDouble = newValue}
  }

  var repeatedBool: [Bool] {
    get {return _storage._repeatedBool}
    set {_uniqueStorage()._repeatedBool = newValue}
  }

  var repeatedString: [String] {
    get {return _storage._repeatedString}
    set {_uniqueStorage()._repeatedString = newValue}
  }

  var repeatedBytes: [Data] {
    get {return _storage._repeatedBytes}
    set {_uniqueStorage()._repeatedBytes = newValue}
  }

  var repeatedNestedMessage: [Proto3Unittest_TestAllTypes.NestedMessage] {
    get {return _storage._repeatedNestedMessage}
    set {_uniqueStorage()._repeatedNestedMessage = newValue}
  }

  var repeatedForeignMessage: [Proto3Unittest_ForeignMessage] {
    get {return _storage._repeatedForeignMessage}
    set {_uniqueStorage()._repeatedForeignMessage = newValue}
  }

  var repeatedImportMessage: [Proto2UnittestImport_ImportMessage] {
    get {return _storage._repeatedImportMessage}
    set {_uniqueStorage()._repeatedImportMessage = newValue}
  }

  var repeatedNestedEnum: [Proto3Unittest_TestAllTypes.NestedEnum] {
    get {return _storage._repeatedNestedEnum}
    set {_uniqueStorage()._repeatedNestedEnum = newValue}
  }

  var repeatedForeignEnum: [Proto3Unittest_ForeignEnum] {
    get {return _storage._repeatedForeignEnum}
    set {_uniqueStorage()._repeatedForeignEnum = newValue}
  }

  var repeatedStringPiece: [String] {
    get {return _storage._repeatedStringPiece}
    set {_uniqueStorage()._repeatedStringPiece = newValue}
  }

  var repeatedCord: [String] {
    get {return _storage._repeatedCord}
    set {_uniqueStorage()._repeatedCord = newValue}
  }

  var repeatedLazyMessage: [Proto3Unittest_TestAllTypes.NestedMessage] {
    get {return _storage._repeatedLazyMessage}
    set {_uniqueStorage()._repeatedLazyMessage = newValue}
  }

  var oneofField: OneOf_OneofField? {
    get {return _storage._oneofField}
    set {_uniqueStorage()._oneofField = newValue}
  }

  var oneofUint32: UInt32 {
    get {
      if case .oneofUint32(let v)? = _storage._oneofField {return v}
      return 0
    }
    set {_uniqueStorage()._oneofField = .oneofUint32(newValue)}
  }

  var oneofNestedMessage: Proto3Unittest_TestAllTypes.NestedMessage {
    get {
      if case .oneofNestedMessage(let v)? = _storage._oneofField {return v}
      return Proto3Unittest_TestAllTypes.NestedMessage()
    }
    set {_uniqueStorage()._oneofField = .oneofNestedMessage(newValue)}
  }

  var oneofString: String {
    get {
      if case .oneofString(let v)? = _storage._oneofField {return v}
      return String()
    }
    set {_uniqueStorage()._oneofField = .oneofString(newValue)}
  }

  var oneofBytes: Data {
    get {
      if case .oneofBytes(let v)? = _storage._oneofField {return v}
      return Data()
    }
    set {_uniqueStorage()._oneofField = .oneofBytes(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_OneofField: Equatable, @unchecked Sendable {
    case oneofUint32(UInt32)
    case oneofNestedMessage(Proto3Unittest_TestAllTypes.NestedMessage)
    case oneofString(String)
    case oneofBytes(Data)

  }

  enum NestedEnum: SwiftProtobuf.Enum, Swift.CaseIterable {
    typealias RawValue = Int
    case zero // = 0
    case foo // = 1
    case bar // = 2
    case baz // = 3

    /// Intentionally negative.
    case neg // = -1
    case UNRECOGNIZED(Int)

    init() {
      self = .zero
    }

    init?(rawValue: Int) {
      switch rawValue {
      case -1: self = .neg
      case 0: self = .zero
      case 1: self = .foo
      case 2: self = .bar
      case 3: self = .baz
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .neg: return -1
      case .zero: return 0
      case .foo: return 1
      case .bar: return 2
      case .baz: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

    // The compiler won't synthesize support with the UNRECOGNIZED case.
    static let allCases: [Proto3Unittest_TestAllTypes.NestedEnum] = [
      .zero,
      .foo,
      .bar,
      .baz,
      .neg,
    ]

  }

  struct NestedMessage: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The field name "b" fails to compile in proto1 because it conflicts with
    /// a local variable named "b" in one of the generated methods.  Doh.
    /// This file needs to compile in proto1 to test backwards-compatibility.
    var bb: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Proto3Unittest_TestPackedTypes: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var packedInt32: [Int32] = []

  var packedInt64: [Int64] = []

  var packedUint32: [UInt32] = []

  var packedUint64: [UInt64] = []

  var packedSint32: [Int32] = []

  var packedSint64: [Int64] = []

  var packedFixed32: [UInt32] = []

  var packedFixed64: [UInt64] = []

  var packedSfixed32: [Int32] = []

  var packedSfixed64: [Int64] = []

  var packedFloat: [Float] = []

  var packedDouble: [Double] = []

  var packedBool: [Bool] = []

  var packedEnum: [Proto3Unittest_ForeignEnum] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Explicitly set packed to false
struct Proto3Unittest_TestUnpackedTypes: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var repeatedInt32: [Int32] = []

  var repeatedInt64: [Int64] = []

  var repeatedUint32: [UInt32] = []

  var repeatedUint64: [UInt64] = []

  var repeatedSint32: [Int32] = []

  var repeatedSint64: [Int64] = []

  var repeatedFixed32: [UInt32] = []

  var repeatedFixed64: [UInt64] = []

  var repeatedSfixed32: [Int32] = []

  var repeatedSfixed64: [Int64] = []

  var repeatedFloat: [Float] = []

  var repeatedDouble: [Double] = []

  var repeatedBool: [Bool] = []

  var repeatedNestedEnum: [Proto3Unittest_TestAllTypes.NestedEnum] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// This proto includes a recursively nested message.
struct Proto3Unittest_NestedTestAllTypes: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var child: Proto3Unittest_NestedTestAllTypes {
    get {return _storage._child ?? Proto3Unittest_NestedTestAllTypes()}
    set {_uniqueStorage()._child = newValue}
  }
  /// Returns true if `child` has been explicitly set.
  var hasChild: Bool {return _storage._child != nil}
  /// Clears the value of `child`. Subsequent reads from it will return its default value.
  mutating func clearChild() {_uniqueStorage()._child = nil}

  var payload: Proto3Unittest_TestAllTypes {
    get {return _storage._payload ?? Proto3Unittest_TestAllTypes()}
    set {_uniqueStorage()._payload = newValue}
  }
  /// Returns true if `payload` has been explicitly set.
  var hasPayload: Bool {return _storage._payload != nil}
  /// Clears the value of `payload`. Subsequent reads from it will return its default value.
  mutating func clearPayload() {_uniqueStorage()._payload = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Define these after TestAllTypes to make sure the compiler can handle
/// that.
struct Proto3Unittest_ForeignMessage: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var c: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// TestEmptyMessage is used to test behavior of unknown fields.
struct Proto3Unittest_TestEmptyMessage: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// TestMessageWithDummy is also used to test behavior of unknown fields.
struct Proto3Unittest_TestMessageWithDummy: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// This field is only here for triggering copy-on-write; it's not intended to
  /// be serialized.
  var dummy: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Same layout as TestOneof2 in unittest.proto to test unknown enum value
/// parsing behavior in oneof.
struct Proto3Unittest_TestOneof2: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var foo: Proto3Unittest_TestOneof2.OneOf_Foo? = nil

  var fooEnum: Proto3Unittest_TestOneof2.NestedEnum {
    get {
      if case .fooEnum(let v)? = foo {return v}
      return .unknown
    }
    set {foo = .fooEnum(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Foo: Equatable, Sendable {
    case fooEnum(Proto3Unittest_TestOneof2.NestedEnum)

  }

  enum NestedEnum: SwiftProtobuf.Enum, Swift.CaseIterable {
    typealias RawValue = Int
    case unknown // = 0
    case foo // = 1
    case bar // = 2
    case baz // = 3
    case UNRECOGNIZED(Int)

    init() {
      self = .unknown
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .foo
      case 2: self = .bar
      case 3: self = .baz
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .foo: return 1
      case .bar: return 2
      case .baz: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

    // The compiler won't synthesize support with the UNRECOGNIZED case.
    static let allCases: [Proto3Unittest_TestOneof2.NestedEnum] = [
      .unknown,
      .foo,
      .bar,
      .baz,
    ]

  }

  init() {}
}

/// If bool fields are incorrectly assumed to have hasbits, InternalSwap would
/// result in swapping N more 32bit hasbits incorrectly. Considering padding, we
/// need many bool fields to stress this.
struct Proto3Unittest_TestHasbits: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var b1: Bool {
    get {return _storage._b1}
    set {_uniqueStorage()._b1 = newValue}
  }

  var b2: Bool {
    get {return _storage._b2}
    set {_uniqueStorage()._b2 = newValue}
  }

  var b3: Bool {
    get {return _storage._b3}
    set {_uniqueStorage()._b3 = newValue}
  }

  var b4: Bool {
    get {return _storage._b4}
    set {_uniqueStorage()._b4 = newValue}
  }

  var b5: Bool {
    get {return _storage._b5}
    set {_uniqueStorage()._b5 = newValue}
  }

  var b6: Bool {
    get {return _storage._b6}
    set {_uniqueStorage()._b6 = newValue}
  }

  var b7: Bool {
    get {return _storage._b7}
    set {_uniqueStorage()._b7 = newValue}
  }

  var b8: Bool {
    get {return _storage._b8}
    set {_uniqueStorage()._b8 = newValue}
  }

  var b9: Bool {
    get {return _storage._b9}
    set {_uniqueStorage()._b9 = newValue}
  }

  var b10: Bool {
    get {return _storage._b10}
    set {_uniqueStorage()._b10 = newValue}
  }

  var b11: Bool {
    get {return _storage._b11}
    set {_uniqueStorage()._b11 = newValue}
  }

  var b12: Bool {
    get {return _storage._b12}
    set {_uniqueStorage()._b12 = newValue}
  }

  var b13: Bool {
    get {return _storage._b13}
    set {_uniqueStorage()._b13 = newValue}
  }

  var b14: Bool {
    get {return _storage._b14}
    set {_uniqueStorage()._b14 = newValue}
  }

  var b15: Bool {
    get {return _storage._b15}
    set {_uniqueStorage()._b15 = newValue}
  }

  var b16: Bool {
    get {return _storage._b16}
    set {_uniqueStorage()._b16 = newValue}
  }

  var b17: Bool {
    get {return _storage._b17}
    set {_uniqueStorage()._b17 = newValue}
  }

  var b18: Bool {
    get {return _storage._b18}
    set {_uniqueStorage()._b18 = newValue}
  }

  var b19: Bool {
    get {return _storage._b19}
    set {_uniqueStorage()._b19 = newValue}
  }

  var b20: Bool {
    get {return _storage._b20}
    set {_uniqueStorage()._b20 = newValue}
  }

  var b21: Bool {
    get {return _storage._b21}
    set {_uniqueStorage()._b21 = newValue}
  }

  var b22: Bool {
    get {return _storage._b22}
    set {_uniqueStorage()._b22 = newValue}
  }

  var b23: Bool {
    get {return _storage._b23}
    set {_uniqueStorage()._b23 = newValue}
  }

  var b24: Bool {
    get {return _storage._b24}
    set {_uniqueStorage()._b24 = newValue}
  }

  var b25: Bool {
    get {return _storage._b25}
    set {_uniqueStorage()._b25 = newValue}
  }

  var b26: Bool {
    get {return _storage._b26}
    set {_uniqueStorage()._b26 = newValue}
  }

  var b27: Bool {
    get {return _storage._b27}
    set {_uniqueStorage()._b27 = newValue}
  }

  var b28: Bool {
    get {return _storage._b28}
    set {_uniqueStorage()._b28 = newValue}
  }

  var b29: Bool {
    get {return _storage._b29}
    set {_uniqueStorage()._b29 = newValue}
  }

  var b30: Bool {
    get {return _storage._b30}
    set {_uniqueStorage()._b30 = newValue}
  }

  var b31: Bool {
    get {return _storage._b31}
    set {_uniqueStorage()._b31 = newValue}
  }

  var b32: Bool {
    get {return _storage._b32}
    set {_uniqueStorage()._b32 = newValue}
  }

  var b33: Bool {
    get {return _storage._b33}
    set {_uniqueStorage()._b33 = newValue}
  }

  var b34: Bool {
    get {return _storage._b34}
    set {_uniqueStorage()._b34 = newValue}
  }

  var b35: Bool {
    get {return _storage._b35}
    set {_uniqueStorage()._b35 = newValue}
  }

  var b36: Bool {
    get {return _storage._b36}
    set {_uniqueStorage()._b36 = newValue}
  }

  var b37: Bool {
    get {return _storage._b37}
    set {_uniqueStorage()._b37 = newValue}
  }

  var b38: Bool {
    get {return _storage._b38}
    set {_uniqueStorage()._b38 = newValue}
  }

  var b39: Bool {
    get {return _storage._b39}
    set {_uniqueStorage()._b39 = newValue}
  }

  var b40: Bool {
    get {return _storage._b40}
    set {_uniqueStorage()._b40 = newValue}
  }

  var b41: Bool {
    get {return _storage._b41}
    set {_uniqueStorage()._b41 = newValue}
  }

  var b42: Bool {
    get {return _storage._b42}
    set {_uniqueStorage()._b42 = newValue}
  }

  var b43: Bool {
    get {return _storage._b43}
    set {_uniqueStorage()._b43 = newValue}
  }

  var b44: Bool {
    get {return _storage._b44}
    set {_uniqueStorage()._b44 = newValue}
  }

  var b45: Bool {
    get {return _storage._b45}
    set {_uniqueStorage()._b45 = newValue}
  }

  var b46: Bool {
    get {return _storage._b46}
    set {_uniqueStorage()._b46 = newValue}
  }

  var b47: Bool {
    get {return _storage._b47}
    set {_uniqueStorage()._b47 = newValue}
  }

  var b48: Bool {
    get {return _storage._b48}
    set {_uniqueStorage()._b48 = newValue}
  }

  var b49: Bool {
    get {return _storage._b49}
    set {_uniqueStorage()._b49 = newValue}
  }

  var b50: Bool {
    get {return _storage._b50}
    set {_uniqueStorage()._b50 = newValue}
  }

  var b51: Bool {
    get {return _storage._b51}
    set {_uniqueStorage()._b51 = newValue}
  }

  var b52: Bool {
    get {return _storage._b52}
    set {_uniqueStorage()._b52 = newValue}
  }

  var b53: Bool {
    get {return _storage._b53}
    set {_uniqueStorage()._b53 = newValue}
  }

  var b54: Bool {
    get {return _storage._b54}
    set {_uniqueStorage()._b54 = newValue}
  }

  var b55: Bool {
    get {return _storage._b55}
    set {_uniqueStorage()._b55 = newValue}
  }

  var b56: Bool {
    get {return _storage._b56}
    set {_uniqueStorage()._b56 = newValue}
  }

  var b57: Bool {
    get {return _storage._b57}
    set {_uniqueStorage()._b57 = newValue}
  }

  var b58: Bool {
    get {return _storage._b58}
    set {_uniqueStorage()._b58 = newValue}
  }

  var b59: Bool {
    get {return _storage._b59}
    set {_uniqueStorage()._b59 = newValue}
  }

  var b60: Bool {
    get {return _storage._b60}
    set {_uniqueStorage()._b60 = newValue}
  }

  var b61: Bool {
    get {return _storage._b61}
    set {_uniqueStorage()._b61 = newValue}
  }

  var b62: Bool {
    get {return _storage._b62}
    set {_uniqueStorage()._b62 = newValue}
  }

  var b63: Bool {
    get {return _storage._b63}
    set {_uniqueStorage()._b63 = newValue}
  }

  var b64: Bool {
    get {return _storage._b64}
    set {_uniqueStorage()._b64 = newValue}
  }

  var b65: Bool {
    get {return _storage._b65}
    set {_uniqueStorage()._b65 = newValue}
  }

  var b66: Bool {
    get {return _storage._b66}
    set {_uniqueStorage()._b66 = newValue}
  }

  var b67: Bool {
    get {return _storage._b67}
    set {_uniqueStorage()._b67 = newValue}
  }

  var b68: Bool {
    get {return _storage._b68}
    set {_uniqueStorage()._b68 = newValue}
  }

  var b69: Bool {
    get {return _storage._b69}
    set {_uniqueStorage()._b69 = newValue}
  }

  var child: Proto3Unittest_TestAllTypes {
    get {return _storage._child ?? Proto3Unittest_TestAllTypes()}
    set {_uniqueStorage()._child = newValue}
  }
  /// Returns true if `child` has been explicitly set.
  var hasChild: Bool {return _storage._child != nil}
  /// Clears the value of `child`. Subsequent reads from it will return its default value.
  mutating func clearChild() {_uniqueStorage()._child = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "proto3_unittest"

extension Proto3Unittest_ForeignEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "FOREIGN_ZERO"),
    4: .same(proto: "FOREIGN_FOO"),
    5: .same(proto: "FOREIGN_BAR"),
    6: .same(proto: "FOREIGN_BAZ"),
    123456: .same(proto: "FOREIGN_LARGE"),
  ]
}

extension Proto3Unittest_TestAllTypes: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TestAllTypes"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "optional_int32"),
    2: .standard(proto: "optional_int64"),
    3: .standard(proto: "optional_uint32"),
    4: .standard(proto: "optional_uint64"),
    5: .standard(proto: "optional_sint32"),
    6: .standard(proto: "optional_sint64"),
    7: .standard(proto: "optional_fixed32"),
    8: .standard(proto: "optional_fixed64"),
    9: .standard(proto: "optional_sfixed32"),
    10: .standard(proto: "optional_sfixed64"),
    11: .standard(proto: "optional_float"),
    12: .standard(proto: "optional_double"),
    13: .standard(proto: "optional_bool"),
    14: .standard(proto: "optional_string"),
    15: .standard(proto: "optional_bytes"),
    18: .standard(proto: "optional_nested_message"),
    19: .standard(proto: "optional_foreign_message"),
    20: .standard(proto: "optional_import_message"),
    21: .standard(proto: "optional_nested_enum"),
    22: .standard(proto: "optional_foreign_enum"),
    24: .standard(proto: "optional_string_piece"),
    25: .standard(proto: "optional_cord"),
    26: .standard(proto: "optional_public_import_message"),
    27: .standard(proto: "optional_lazy_message"),
    28: .standard(proto: "optional_unverified_lazy_message"),
    115: .standard(proto: "optional_lazy_import_message"),
    31: .standard(proto: "repeated_int32"),
    32: .standard(proto: "repeated_int64"),
    33: .standard(proto: "repeated_uint32"),
    34: .standard(proto: "repeated_uint64"),
    35: .standard(proto: "repeated_sint32"),
    36: .standard(proto: "repeated_sint64"),
    37: .standard(proto: "repeated_fixed32"),
    38: .standard(proto: "repeated_fixed64"),
    39: .standard(proto: "repeated_sfixed32"),
    40: .standard(proto: "repeated_sfixed64"),
    41: .standard(proto: "repeated_float"),
    42: .standard(proto: "repeated_double"),
    43: .standard(proto: "repeated_bool"),
    44: .standard(proto: "repeated_string"),
    45: .standard(proto: "repeated_bytes"),
    48: .standard(proto: "repeated_nested_message"),
    49: .standard(proto: "repeated_foreign_message"),
    50: .standard(proto: "repeated_import_message"),
    51: .standard(proto: "repeated_nested_enum"),
    52: .standard(proto: "repeated_foreign_enum"),
    54: .standard(proto: "repeated_string_piece"),
    55: .standard(proto: "repeated_cord"),
    57: .standard(proto: "repeated_lazy_message"),
    111: .standard(proto: "oneof_uint32"),
    112: .standard(proto: "oneof_nested_message"),
    113: .standard(proto: "oneof_string"),
    114: .standard(proto: "oneof_bytes"),
  ]

  fileprivate class _StorageClass {
    var _optionalInt32: Int32 = 0
    var _optionalInt64: Int64 = 0
    var _optionalUint32: UInt32 = 0
    var _optionalUint64: UInt64 = 0
    var _optionalSint32: Int32 = 0
    var _optionalSint64: Int64 = 0
    var _optionalFixed32: UInt32 = 0
    var _optionalFixed64: UInt64 = 0
    var _optionalSfixed32: Int32 = 0
    var _optionalSfixed64: Int64 = 0
    var _optionalFloat: Float = 0
    var _optionalDouble: Double = 0
    var _optionalBool: Bool = false
    var _optionalString: String = String()
    var _optionalBytes: Data = Data()
    var _optionalNestedMessage: Proto3Unittest_TestAllTypes.NestedMessage? = nil
    var _optionalForeignMessage: Proto3Unittest_ForeignMessage? = nil
    var _optionalImportMessage: Proto2UnittestImport_ImportMessage? = nil
    var _optionalNestedEnum: Proto3Unittest_TestAllTypes.NestedEnum = .zero
    var _optionalForeignEnum: Proto3Unittest_ForeignEnum = .foreignZero
    var _optionalStringPiece: String = String()
    var _optionalCord: String = String()
    var _optionalPublicImportMessage: Proto2UnittestImport_PublicImportMessage? = nil
    var _optionalLazyMessage: Proto3Unittest_TestAllTypes.NestedMessage? = nil
    var _optionalUnverifiedLazyMessage: Proto3Unittest_TestAllTypes.NestedMessage? = nil
    var _optionalLazyImportMessage: Proto2UnittestImport_ImportMessage? = nil
    var _repeatedInt32: [Int32] = []
    var _repeatedInt64: [Int64] = []
    var _repeatedUint32: [UInt32] = []
    var _repeatedUint64: [UInt64] = []
    var _repeatedSint32: [Int32] = []
    var _repeatedSint64: [Int64] = []
    var _repeatedFixed32: [UInt32] = []
    var _repeatedFixed64: [UInt64] = []
    var _repeatedSfixed32: [Int32] = []
    var _repeatedSfixed64: [Int64] = []
    var _repeatedFloat: [Float] = []
    var _repeatedDouble: [Double] = []
    var _repeatedBool: [Bool] = []
    var _repeatedString: [String] = []
    var _repeatedBytes: [Data] = []
    var _repeatedNestedMessage: [Proto3Unittest_TestAllTypes.NestedMessage] = []
    var _repeatedForeignMessage: [Proto3Unittest_ForeignMessage] = []
    var _repeatedImportMessage: [Proto2UnittestImport_ImportMessage] = []
    var _repeatedNestedEnum: [Proto3Unittest_TestAllTypes.NestedEnum] = []
    var _repeatedForeignEnum: [Proto3Unittest_ForeignEnum] = []
    var _repeatedStringPiece: [String] = []
    var _repeatedCord: [String] = []
    var _repeatedLazyMessage: [Proto3Unittest_TestAllTypes.NestedMessage] = []
    var _oneofField: Proto3Unittest_TestAllTypes.OneOf_OneofField?

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _optionalInt32 = source._optionalInt32
      _optionalInt64 = source._optionalInt64
      _optionalUint32 = source._optionalUint32
      _optionalUint64 = source._optionalUint64
      _optionalSint32 = source._optionalSint32
      _optionalSint64 = source._optionalSint64
      _optionalFixed32 = source._optionalFixed32
      _optionalFixed64 = source._optionalFixed64
      _optionalSfixed32 = source._optionalSfixed32
      _optionalSfixed64 = source._optionalSfixed64
      _optionalFloat = source._optionalFloat
      _optionalDouble = source._optionalDouble
      _optionalBool = source._optionalBool
      _optionalString = source._optionalString
      _optionalBytes = source._optionalBytes
      _optionalNestedMessage = source._optionalNestedMessage
      _optionalForeignMessage = source._optionalForeignMessage
      _optionalImportMessage = source._optionalImportMessage
      _optionalNestedEnum = source._optionalNestedEnum
      _optionalForeignEnum = source._optionalForeignEnum
      _optionalStringPiece = source._optionalStringPiece
      _optionalCord = source._optionalCord
      _optionalPublicImportMessage = source._optionalPublicImportMessage
      _optionalLazyMessage = source._optionalLazyMessage
      _optionalUnverifiedLazyMessage = source._optionalUnverifiedLazyMessage
      _optionalLazyImportMessage = source._optionalLazyImportMessage
      _repeatedInt32 = source._repeatedInt32
      _repeatedInt64 = source._repeatedInt64
      _repeatedUint32 = source._repeatedUint32
      _repeatedUint64 = source._repeatedUint64
      _repeatedSint32 = source._repeatedSint32
      _repeatedSint64 = source._repeatedSint64
      _repeatedFixed32 = source._repeatedFixed32
      _repeatedFixed64 = source._repeatedFixed64
      _repeatedSfixed32 = source._repeatedSfixed32
      _repeatedSfixed64 = source._repeatedSfixed64
      _repeatedFloat = source._repeatedFloat
      _repeatedDouble = source._repeatedDouble
      _repeatedBool = source._repeatedBool
      _repeatedString = source._repeatedString
      _repeatedBytes = source._repeatedBytes
      _repeatedNestedMessage = source._repeatedNestedMessage
      _repeatedForeignMessage = source._repeatedForeignMessage
      _repeatedImportMessage = source._repeatedImportMessage
      _repeatedNestedEnum = source._repeatedNestedEnum
      _repeatedForeignEnum = source._repeatedForeignEnum
      _repeatedStringPiece = source._repeatedStringPiece
      _repeatedCord = source._repeatedCord
      _repeatedLazyMessage = source._repeatedLazyMessage
      _oneofField = source._oneofField
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularInt32Field(value: &_storage._optionalInt32) }()
        case 2: try { try decoder.decodeSingularInt64Field(value: &_storage._optionalInt64) }()
        case 3: try { try decoder.decodeSingularUInt32Field(value: &_storage._optionalUint32) }()
        case 4: try { try decoder.decodeSingularUInt64Field(value: &_storage._optionalUint64) }()
        case 5: try { try decoder.decodeSingularSInt32Field(value: &_storage._optionalSint32) }()
        case 6: try { try decoder.decodeSingularSInt64Field(value: &_storage._optionalSint64) }()
        case 7: try { try decoder.decodeSingularFixed32Field(value: &_storage._optionalFixed32) }()
        case 8: try { try decoder.decodeSingularFixed64Field(value: &_storage._optionalFixed64) }()
        case 9: try { try decoder.decodeSingularSFixed32Field(value: &_storage._optionalSfixed32) }()
        case 10: try { try decoder.decodeSingularSFixed64Field(value: &_storage._optionalSfixed64) }()
        case 11: try { try decoder.decodeSingularFloatField(value: &_storage._optionalFloat) }()
        case 12: try { try decoder.decodeSingularDoubleField(value: &_storage._optionalDouble) }()
        case 13: try { try decoder.decodeSingularBoolField(value: &_storage._optionalBool) }()
        case 14: try { try decoder.decodeSingularStringField(value: &_storage._optionalString) }()
        case 15: try { try decoder.decodeSingularBytesField(value: &_storage._optionalBytes) }()
        case 18: try { try decoder.decodeSingularMessageField(value: &_storage._optionalNestedMessage) }()
        case 19: try { try decoder.decodeSingularMessageField(value: &_storage._optionalForeignMessage) }()
        case 20: try { try decoder.decodeSingularMessageField(value: &_storage._optionalImportMessage) }()
        case 21: try { try decoder.decodeSingularEnumField(value: &_storage._optionalNestedEnum) }()
        case 22: try { try decoder.decodeSingularEnumField(value: &_storage._optionalForeignEnum) }()
        case 24: try { try decoder.decodeSingularStringField(value: &_storage._optionalStringPiece) }()
        case 25: try { try decoder.decodeSingularStringField(value: &_storage._optionalCord) }()
        case 26: try { try decoder.decodeSingularMessageField(value: &_storage._optionalPublicImportMessage) }()
        case 27: try { try decoder.decodeSingularMessageField(value: &_storage._optionalLazyMessage) }()
        case 28: try { try decoder.decodeSingularMessageField(value: &_storage._optionalUnverifiedLazyMessage) }()
        case 31: try { try decoder.decodeRepeatedInt32Field(value: &_storage._repeatedInt32) }()
        case 32: try { try decoder.decodeRepeatedInt64Field(value: &_storage._repeatedInt64) }()
        case 33: try { try decoder.decodeRepeatedUInt32Field(value: &_storage._repeatedUint32) }()
        case 34: try { try decoder.decodeRepeatedUInt64Field(value: &_storage._repeatedUint64) }()
        case 35: try { try decoder.decodeRepeatedSInt32Field(value: &_storage._repeatedSint32) }()
        case 36: try { try decoder.decodeRepeatedSInt64Field(value: &_storage._repeatedSint64) }()
        case 37: try { try decoder.decodeRepeatedFixed32Field(value: &_storage._repeatedFixed32) }()
        case 38: try { try decoder.decodeRepeatedFixed64Field(value: &_storage._repeatedFixed64) }()
        case 39: try { try decoder.decodeRepeatedSFixed32Field(value: &_storage._repeatedSfixed32) }()
        case 40: try { try decoder.decodeRepeatedSFixed64Field(value: &_storage._repeatedSfixed64) }()
        case 41: try { try decoder.decodeRepeatedFloatField(value: &_storage._repeatedFloat) }()
        case 42: try { try decoder.decodeRepeatedDoubleField(value: &_storage._repeatedDouble) }()
        case 43: try { try decoder.decodeRepeatedBoolField(value: &_storage._repeatedBool) }()
        case 44: try { try decoder.decodeRepeatedStringField(value: &_storage._repeatedString) }()
        case 45: try { try decoder.decodeRepeatedBytesField(value: &_storage._repeatedBytes) }()
        case 48: try { try decoder.decodeRepeatedMessageField(value: &_storage._repeatedNestedMessage) }()
        case 49: try { try decoder.decodeRepeatedMessageField(value: &_storage._repeatedForeignMessage) }()
        case 50: try { try decoder.decodeRepeatedMessageField(value: &_storage._repeatedImportMessage) }()
        case 51: try { try decoder.decodeRepeatedEnumField(value: &_storage._repeatedNestedEnum) }()
        case 52: try { try decoder.decodeRepeatedEnumField(value: &_storage._repeatedForeignEnum) }()
        case 54: try { try decoder.decodeRepeatedStringField(value: &_storage._repeatedStringPiece) }()
        case 55: try { try decoder.decodeRepeatedStringField(value: &_storage._repeatedCord) }()
        case 57: try { try decoder.decodeRepeatedMessageField(value: &_storage._repeatedLazyMessage) }()
        case 111: try {
          var v: UInt32?
          try decoder.decodeSingularUInt32Field(value: &v)
          if let v = v {
            if _storage._oneofField != nil {try decoder.handleConflictingOneOf()}
            _storage._oneofField = .oneofUint32(v)
          }
        }()
        case 112: try {
          var v: Proto3Unittest_TestAllTypes.NestedMessage?
          var hadOneofValue = false
          if let current = _storage._oneofField {
            hadOneofValue = true
            if case .oneofNestedMessage(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._oneofField = .oneofNestedMessage(v)
          }
        }()
        case 113: try {
          var v: String?
          try decoder.decodeSingularStringField(value: &v)
          if let v = v {
            if _storage._oneofField != nil {try decoder.handleConflictingOneOf()}
            _storage._oneofField = .oneofString(v)
          }
        }()
        case 114: try {
          var v: Data?
          try decoder.decodeSingularBytesField(value: &v)
          if let v = v {
            if _storage._oneofField != nil {try decoder.handleConflictingOneOf()}
            _storage._oneofField = .oneofBytes(v)
          }
        }()
        case 115: try { try decoder.decodeSingularMessageField(value: &_storage._optionalLazyImportMessage) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if _storage._optionalInt32 != 0 {
        try visitor.visitSingularInt32Field(value: _storage._optionalInt32, fieldNumber: 1)
      }
      if _storage._optionalInt64 != 0 {
        try visitor.visitSingularInt64Field(value: _storage._optionalInt64, fieldNumber: 2)
      }
      if _storage._optionalUint32 != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._optionalUint32, fieldNumber: 3)
      }
      if _storage._optionalUint64 != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._optionalUint64, fieldNumber: 4)
      }
      if _storage._optionalSint32 != 0 {
        try visitor.visitSingularSInt32Field(value: _storage._optionalSint32, fieldNumber: 5)
      }
      if _storage._optionalSint64 != 0 {
        try visitor.visitSingularSInt64Field(value: _storage._optionalSint64, fieldNumber: 6)
      }
      if _storage._optionalFixed32 != 0 {
        try visitor.visitSingularFixed32Field(value: _storage._optionalFixed32, fieldNumber: 7)
      }
      if _storage._optionalFixed64 != 0 {
        try visitor.visitSingularFixed64Field(value: _storage._optionalFixed64, fieldNumber: 8)
      }
      if _storage._optionalSfixed32 != 0 {
        try visitor.visitSingularSFixed32Field(value: _storage._optionalSfixed32, fieldNumber: 9)
      }
      if _storage._optionalSfixed64 != 0 {
        try visitor.visitSingularSFixed64Field(value: _storage._optionalSfixed64, fieldNumber: 10)
      }
      if _storage._optionalFloat.bitPattern != 0 {
        try visitor.visitSingularFloatField(value: _storage._optionalFloat, fieldNumber: 11)
      }
      if _storage._optionalDouble.bitPattern != 0 {
        try visitor.visitSingularDoubleField(value: _storage._optionalDouble, fieldNumber: 12)
      }
      if _storage._optionalBool != false {
        try visitor.visitSingularBoolField(value: _storage._optionalBool, fieldNumber: 13)
      }
      if !_storage._optionalString.isEmpty {
        try visitor.visitSingularStringField(value: _storage._optionalString, fieldNumber: 14)
      }
      if !_storage._optionalBytes.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._optionalBytes, fieldNumber: 15)
      }
      try { if let v = _storage._optionalNestedMessage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
      } }()
      try { if let v = _storage._optionalForeignMessage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
      } }()
      try { if let v = _storage._optionalImportMessage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
      } }()
      if _storage._optionalNestedEnum != .zero {
        try visitor.visitSingularEnumField(value: _storage._optionalNestedEnum, fieldNumber: 21)
      }
      if _storage._optionalForeignEnum != .foreignZero {
        try visitor.visitSingularEnumField(value: _storage._optionalForeignEnum, fieldNumber: 22)
      }
      if !_storage._optionalStringPiece.isEmpty {
        try visitor.visitSingularStringField(value: _storage._optionalStringPiece, fieldNumber: 24)
      }
      if !_storage._optionalCord.isEmpty {
        try visitor.visitSingularStringField(value: _storage._optionalCord, fieldNumber: 25)
      }
      try { if let v = _storage._optionalPublicImportMessage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 26)
      } }()
      try { if let v = _storage._optionalLazyMessage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 27)
      } }()
      try { if let v = _storage._optionalUnverifiedLazyMessage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 28)
      } }()
      if !_storage._repeatedInt32.isEmpty {
        try visitor.visitPackedInt32Field(value: _storage._repeatedInt32, fieldNumber: 31)
      }
      if !_storage._repeatedInt64.isEmpty {
        try visitor.visitPackedInt64Field(value: _storage._repeatedInt64, fieldNumber: 32)
      }
      if !_storage._repeatedUint32.isEmpty {
        try visitor.visitPackedUInt32Field(value: _storage._repeatedUint32, fieldNumber: 33)
      }
      if !_storage._repeatedUint64.isEmpty {
        try visitor.visitPackedUInt64Field(value: _storage._repeatedUint64, fieldNumber: 34)
      }
      if !_storage._repeatedSint32.isEmpty {
        try visitor.visitPackedSInt32Field(value: _storage._repeatedSint32, fieldNumber: 35)
      }
      if !_storage._repeatedSint64.isEmpty {
        try visitor.visitPackedSInt64Field(value: _storage._repeatedSint64, fieldNumber: 36)
      }
      if !_storage._repeatedFixed32.isEmpty {
        try visitor.visitPackedFixed32Field(value: _storage._repeatedFixed32, fieldNumber: 37)
      }
      if !_storage._repeatedFixed64.isEmpty {
        try visitor.visitPackedFixed64Field(value: _storage._repeatedFixed64, fieldNumber: 38)
      }
      if !_storage._repeatedSfixed32.isEmpty {
        try visitor.visitPackedSFixed32Field(value: _storage._repeatedSfixed32, fieldNumber: 39)
      }
      if !_storage._repeatedSfixed64.isEmpty {
        try visitor.visitPackedSFixed64Field(value: _storage._repeatedSfixed64, fieldNumber: 40)
      }
      if !_storage._repeatedFloat.isEmpty {
        try visitor.visitPackedFloatField(value: _storage._repeatedFloat, fieldNumber: 41)
      }
      if !_storage._repeatedDouble.isEmpty {
        try visitor.visitPackedDoubleField(value: _storage._repeatedDouble, fieldNumber: 42)
      }
      if !_storage._repeatedBool.isEmpty {
        try visitor.visitPackedBoolField(value: _storage._repeatedBool, fieldNumber: 43)
      }
      if !_storage._repeatedString.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._repeatedString, fieldNumber: 44)
      }
      if !_storage._repeatedBytes.isEmpty {
        try visitor.visitRepeatedBytesField(value: _storage._repeatedBytes, fieldNumber: 45)
      }
      if !_storage._repeatedNestedMessage.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._repeatedNestedMessage, fieldNumber: 48)
      }
      if !_storage._repeatedForeignMessage.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._repeatedForeignMessage, fieldNumber: 49)
      }
      if !_storage._repeatedImportMessage.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._repeatedImportMessage, fieldNumber: 50)
      }
      if !_storage._repeatedNestedEnum.isEmpty {
        try visitor.visitPackedEnumField(value: _storage._repeatedNestedEnum, fieldNumber: 51)
      }
      if !_storage._repeatedForeignEnum.isEmpty {
        try visitor.visitPackedEnumField(value: _storage._repeatedForeignEnum, fieldNumber: 52)
      }
      if !_storage._repeatedStringPiece.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._repeatedStringPiece, fieldNumber: 54)
      }
      if !_storage._repeatedCord.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._repeatedCord, fieldNumber: 55)
      }
      if !_storage._repeatedLazyMessage.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._repeatedLazyMessage, fieldNumber: 57)
      }
      switch _storage._oneofField {
      case .oneofUint32?: try {
        guard case .oneofUint32(let v)? = _storage._oneofField else { preconditionFailure() }
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 111)
      }()
      case .oneofNestedMessage?: try {
        guard case .oneofNestedMessage(let v)? = _storage._oneofField else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 112)
      }()
      case .oneofString?: try {
        guard case .oneofString(let v)? = _storage._oneofField else { preconditionFailure() }
        try visitor.visitSingularStringField(value: v, fieldNumber: 113)
      }()
      case .oneofBytes?: try {
        guard case .oneofBytes(let v)? = _storage._oneofField else { preconditionFailure() }
        try visitor.visitSingularBytesField(value: v, fieldNumber: 114)
      }()
      case nil: break
      }
      try { if let v = _storage._optionalLazyImportMessage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 115)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Proto3Unittest_TestAllTypes, rhs: Proto3Unittest_TestAllTypes) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._optionalInt32 != rhs_storage._optionalInt32 {return false}
        if _storage._optionalInt64 != rhs_storage._optionalInt64 {return false}
        if _storage._optionalUint32 != rhs_storage._optionalUint32 {return false}
        if _storage._optionalUint64 != rhs_storage._optionalUint64 {return false}
        if _storage._optionalSint32 != rhs_storage._optionalSint32 {return false}
        if _storage._optionalSint64 != rhs_storage._optionalSint64 {return false}
        if _storage._optionalFixed32 != rhs_storage._optionalFixed32 {return false}
        if _storage._optionalFixed64 != rhs_storage._optionalFixed64 {return false}
        if _storage._optionalSfixed32 != rhs_storage._optionalSfixed32 {return false}
        if _storage._optionalSfixed64 != rhs_storage._optionalSfixed64 {return false}
        if _storage._optionalFloat != rhs_storage._optionalFloat {return false}
        if _storage._optionalDouble != rhs_storage._optionalDouble {return false}
        if _storage._optionalBool != rhs_storage._optionalBool {return false}
        if _storage._optionalString != rhs_storage._optionalString {return false}
        if _storage._optionalBytes != rhs_storage._optionalBytes {return false}
        if _storage._optionalNestedMessage != rhs_storage._optionalNestedMessage {return false}
        if _storage._optionalForeignMessage != rhs_storage._optionalForeignMessage {return false}
        if _storage._optionalImportMessage != rhs_storage._optionalImportMessage {return false}
        if _storage._optionalNestedEnum != rhs_storage._optionalNestedEnum {return false}
        if _storage._optionalForeignEnum != rhs_storage._optionalForeignEnum {return false}
        if _storage._optionalStringPiece != rhs_storage._optionalStringPiece {return false}
        if _storage._optionalCord != rhs_storage._optionalCord {return false}
        if _storage._optionalPublicImportMessage != rhs_storage._optionalPublicImportMessage {return false}
        if _storage._optionalLazyMessage != rhs_storage._optionalLazyMessage {return false}
        if _storage._optionalUnverifiedLazyMessage != rhs_storage._optionalUnverifiedLazyMessage {return false}
        if _storage._optionalLazyImportMessage != rhs_storage._optionalLazyImportMessage {return false}
        if _storage._repeatedInt32 != rhs_storage._repeatedInt32 {return false}
        if _storage._repeatedInt64 != rhs_storage._repeatedInt64 {return false}
        if _storage._repeatedUint32 != rhs_storage._repeatedUint32 {return false}
        if _storage._repeatedUint64 != rhs_storage._repeatedUint64 {return false}
        if _storage._repeatedSint32 != rhs_storage._repeatedSint32 {return false}
        if _storage._repeatedSint64 != rhs_storage._repeatedSint64 {return false}
        if _storage._repeatedFixed32 != rhs_storage._repeatedFixed32 {return false}
        if _storage._repeatedFixed64 != rhs_storage._repeatedFixed64 {return false}
        if _storage._repeatedSfixed32 != rhs_storage._repeatedSfixed32 {return false}
        if _storage._repeatedSfixed64 != rhs_storage._repeatedSfixed64 {return false}
        if _storage._repeatedFloat != rhs_storage._repeatedFloat {return false}
        if _storage._repeatedDouble != rhs_storage._repeatedDouble {return false}
        if _storage._repeatedBool != rhs_storage._repeatedBool {return false}
        if _storage._repeatedString != rhs_storage._repeatedString {return false}
        if _storage._repeatedBytes != rhs_storage._repeatedBytes {return false}
        if _storage._repeatedNestedMessage != rhs_storage._repeatedNestedMessage {return false}
        if _storage._repeatedForeignMessage != rhs_storage._repeatedForeignMessage {return false}
        if _storage._repeatedImportMessage != rhs_storage._repeatedImportMessage {return false}
        if _storage._repeatedNestedEnum != rhs_storage._repeatedNestedEnum {return false}
        if _storage._repeatedForeignEnum != rhs_storage._repeatedForeignEnum {return false}
        if _storage._repeatedStringPiece != rhs_storage._repeatedStringPiece {return false}
        if _storage._repeatedCord != rhs_storage._repeatedCord {return false}
        if _storage._repeatedLazyMessage != rhs_storage._repeatedLazyMessage {return false}
        if _storage._oneofField != rhs_storage._oneofField {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto3Unittest_TestAllTypes.NestedEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    -1: .same(proto: "NEG"),
    0: .same(proto: "ZERO"),
    1: .same(proto: "FOO"),
    2: .same(proto: "BAR"),
    3: .same(proto: "BAZ"),
  ]
}

extension Proto3Unittest_TestAllTypes.NestedMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Proto3Unittest_TestAllTypes.protoMessageName + ".NestedMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bb"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.bb) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.bb != 0 {
      try visitor.visitSingularInt32Field(value: self.bb, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Proto3Unittest_TestAllTypes.NestedMessage, rhs: Proto3Unittest_TestAllTypes.NestedMessage) -> Bool {
    if lhs.bb != rhs.bb {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto3Unittest_TestPackedTypes: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TestPackedTypes"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    90: .standard(proto: "packed_int32"),
    91: .standard(proto: "packed_int64"),
    92: .standard(proto: "packed_uint32"),
    93: .standard(proto: "packed_uint64"),
    94: .standard(proto: "packed_sint32"),
    95: .standard(proto: "packed_sint64"),
    96: .standard(proto: "packed_fixed32"),
    97: .standard(proto: "packed_fixed64"),
    98: .standard(proto: "packed_sfixed32"),
    99: .standard(proto: "packed_sfixed64"),
    100: .standard(proto: "packed_float"),
    101: .standard(proto: "packed_double"),
    102: .standard(proto: "packed_bool"),
    103: .standard(proto: "packed_enum"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 90: try { try decoder.decodeRepeatedInt32Field(value: &self.packedInt32) }()
      case 91: try { try decoder.decodeRepeatedInt64Field(value: &self.packedInt64) }()
      case 92: try { try decoder.decodeRepeatedUInt32Field(value: &self.packedUint32) }()
      case 93: try { try decoder.decodeRepeatedUInt64Field(value: &self.packedUint64) }()
      case 94: try { try decoder.decodeRepeatedSInt32Field(value: &self.packedSint32) }()
      case 95: try { try decoder.decodeRepeatedSInt64Field(value: &self.packedSint64) }()
      case 96: try { try decoder.decodeRepeatedFixed32Field(value: &self.packedFixed32) }()
      case 97: try { try decoder.decodeRepeatedFixed64Field(value: &self.packedFixed64) }()
      case 98: try { try decoder.decodeRepeatedSFixed32Field(value: &self.packedSfixed32) }()
      case 99: try { try decoder.decodeRepeatedSFixed64Field(value: &self.packedSfixed64) }()
      case 100: try { try decoder.decodeRepeatedFloatField(value: &self.packedFloat) }()
      case 101: try { try decoder.decodeRepeatedDoubleField(value: &self.packedDouble) }()
      case 102: try { try decoder.decodeRepeatedBoolField(value: &self.packedBool) }()
      case 103: try { try decoder.decodeRepeatedEnumField(value: &self.packedEnum) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.packedInt32.isEmpty {
      try visitor.visitPackedInt32Field(value: self.packedInt32, fieldNumber: 90)
    }
    if !self.packedInt64.isEmpty {
      try visitor.visitPackedInt64Field(value: self.packedInt64, fieldNumber: 91)
    }
    if !self.packedUint32.isEmpty {
      try visitor.visitPackedUInt32Field(value: self.packedUint32, fieldNumber: 92)
    }
    if !self.packedUint64.isEmpty {
      try visitor.visitPackedUInt64Field(value: self.packedUint64, fieldNumber: 93)
    }
    if !self.packedSint32.isEmpty {
      try visitor.visitPackedSInt32Field(value: self.packedSint32, fieldNumber: 94)
    }
    if !self.packedSint64.isEmpty {
      try visitor.visitPackedSInt64Field(value: self.packedSint64, fieldNumber: 95)
    }
    if !self.packedFixed32.isEmpty {
      try visitor.visitPackedFixed32Field(value: self.packedFixed32, fieldNumber: 96)
    }
    if !self.packedFixed64.isEmpty {
      try visitor.visitPackedFixed64Field(value: self.packedFixed64, fieldNumber: 97)
    }
    if !self.packedSfixed32.isEmpty {
      try visitor.visitPackedSFixed32Field(value: self.packedSfixed32, fieldNumber: 98)
    }
    if !self.packedSfixed64.isEmpty {
      try visitor.visitPackedSFixed64Field(value: self.packedSfixed64, fieldNumber: 99)
    }
    if !self.packedFloat.isEmpty {
      try visitor.visitPackedFloatField(value: self.packedFloat, fieldNumber: 100)
    }
    if !self.packedDouble.isEmpty {
      try visitor.visitPackedDoubleField(value: self.packedDouble, fieldNumber: 101)
    }
    if !self.packedBool.isEmpty {
      try visitor.visitPackedBoolField(value: self.packedBool, fieldNumber: 102)
    }
    if !self.packedEnum.isEmpty {
      try visitor.visitPackedEnumField(value: self.packedEnum, fieldNumber: 103)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Proto3Unittest_TestPackedTypes, rhs: Proto3Unittest_TestPackedTypes) -> Bool {
    if lhs.packedInt32 != rhs.packedInt32 {return false}
    if lhs.packedInt64 != rhs.packedInt64 {return false}
    if lhs.packedUint32 != rhs.packedUint32 {return false}
    if lhs.packedUint64 != rhs.packedUint64 {return false}
    if lhs.packedSint32 != rhs.packedSint32 {return false}
    if lhs.packedSint64 != rhs.packedSint64 {return false}
    if lhs.packedFixed32 != rhs.packedFixed32 {return false}
    if lhs.packedFixed64 != rhs.packedFixed64 {return false}
    if lhs.packedSfixed32 != rhs.packedSfixed32 {return false}
    if lhs.packedSfixed64 != rhs.packedSfixed64 {return false}
    if lhs.packedFloat != rhs.packedFloat {return false}
    if lhs.packedDouble != rhs.packedDouble {return false}
    if lhs.packedBool != rhs.packedBool {return false}
    if lhs.packedEnum != rhs.packedEnum {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto3Unittest_TestUnpackedTypes: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TestUnpackedTypes"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "repeated_int32"),
    2: .standard(proto: "repeated_int64"),
    3: .standard(proto: "repeated_uint32"),
    4: .standard(proto: "repeated_uint64"),
    5: .standard(proto: "repeated_sint32"),
    6: .standard(proto: "repeated_sint64"),
    7: .standard(proto: "repeated_fixed32"),
    8: .standard(proto: "repeated_fixed64"),
    9: .standard(proto: "repeated_sfixed32"),
    10: .standard(proto: "repeated_sfixed64"),
    11: .standard(proto: "repeated_float"),
    12: .standard(proto: "repeated_double"),
    13: .standard(proto: "repeated_bool"),
    14: .standard(proto: "repeated_nested_enum"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedInt32Field(value: &self.repeatedInt32) }()
      case 2: try { try decoder.decodeRepeatedInt64Field(value: &self.repeatedInt64) }()
      case 3: try { try decoder.decodeRepeatedUInt32Field(value: &self.repeatedUint32) }()
      case 4: try { try decoder.decodeRepeatedUInt64Field(value: &self.repeatedUint64) }()
      case 5: try { try decoder.decodeRepeatedSInt32Field(value: &self.repeatedSint32) }()
      case 6: try { try decoder.decodeRepeatedSInt64Field(value: &self.repeatedSint64) }()
      case 7: try { try decoder.decodeRepeatedFixed32Field(value: &self.repeatedFixed32) }()
      case 8: try { try decoder.decodeRepeatedFixed64Field(value: &self.repeatedFixed64) }()
      case 9: try { try decoder.decodeRepeatedSFixed32Field(value: &self.repeatedSfixed32) }()
      case 10: try { try decoder.decodeRepeatedSFixed64Field(value: &self.repeatedSfixed64) }()
      case 11: try { try decoder.decodeRepeatedFloatField(value: &self.repeatedFloat) }()
      case 12: try { try decoder.decodeRepeatedDoubleField(value: &self.repeatedDouble) }()
      case 13: try { try decoder.decodeRepeatedBoolField(value: &self.repeatedBool) }()
      case 14: try { try decoder.decodeRepeatedEnumField(value: &self.repeatedNestedEnum) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.repeatedInt32.isEmpty {
      try visitor.visitRepeatedInt32Field(value: self.repeatedInt32, fieldNumber: 1)
    }
    if !self.repeatedInt64.isEmpty {
      try visitor.visitRepeatedInt64Field(value: self.repeatedInt64, fieldNumber: 2)
    }
    if !self.repeatedUint32.isEmpty {
      try visitor.visitRepeatedUInt32Field(value: self.repeatedUint32, fieldNumber: 3)
    }
    if !self.repeatedUint64.isEmpty {
      try visitor.visitRepeatedUInt64Field(value: self.repeatedUint64, fieldNumber: 4)
    }
    if !self.repeatedSint32.isEmpty {
      try visitor.visitRepeatedSInt32Field(value: self.repeatedSint32, fieldNumber: 5)
    }
    if !self.repeatedSint64.isEmpty {
      try visitor.visitRepeatedSInt64Field(value: self.repeatedSint64, fieldNumber: 6)
    }
    if !self.repeatedFixed32.isEmpty {
      try visitor.visitRepeatedFixed32Field(value: self.repeatedFixed32, fieldNumber: 7)
    }
    if !self.repeatedFixed64.isEmpty {
      try visitor.visitRepeatedFixed64Field(value: self.repeatedFixed64, fieldNumber: 8)
    }
    if !self.repeatedSfixed32.isEmpty {
      try visitor.visitRepeatedSFixed32Field(value: self.repeatedSfixed32, fieldNumber: 9)
    }
    if !self.repeatedSfixed64.isEmpty {
      try visitor.visitRepeatedSFixed64Field(value: self.repeatedSfixed64, fieldNumber: 10)
    }
    if !self.repeatedFloat.isEmpty {
      try visitor.visitRepeatedFloatField(value: self.repeatedFloat, fieldNumber: 11)
    }
    if !self.repeatedDouble.isEmpty {
      try visitor.visitRepeatedDoubleField(value: self.repeatedDouble, fieldNumber: 12)
    }
    if !self.repeatedBool.isEmpty {
      try visitor.visitRepeatedBoolField(value: self.repeatedBool, fieldNumber: 13)
    }
    if !self.repeatedNestedEnum.isEmpty {
      try visitor.visitRepeatedEnumField(value: self.repeatedNestedEnum, fieldNumber: 14)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Proto3Unittest_TestUnpackedTypes, rhs: Proto3Unittest_TestUnpackedTypes) -> Bool {
    if lhs.repeatedInt32 != rhs.repeatedInt32 {return false}
    if lhs.repeatedInt64 != rhs.repeatedInt64 {return false}
    if lhs.repeatedUint32 != rhs.repeatedUint32 {return false}
    if lhs.repeatedUint64 != rhs.repeatedUint64 {return false}
    if lhs.repeatedSint32 != rhs.repeatedSint32 {return false}
    if lhs.repeatedSint64 != rhs.repeatedSint64 {return false}
    if lhs.repeatedFixed32 != rhs.repeatedFixed32 {return false}
    if lhs.repeatedFixed64 != rhs.repeatedFixed64 {return false}
    if lhs.repeatedSfixed32 != rhs.repeatedSfixed32 {return false}
    if lhs.repeatedSfixed64 != rhs.repeatedSfixed64 {return false}
    if lhs.repeatedFloat != rhs.repeatedFloat {return false}
    if lhs.repeatedDouble != rhs.repeatedDouble {return false}
    if lhs.repeatedBool != rhs.repeatedBool {return false}
    if lhs.repeatedNestedEnum != rhs.repeatedNestedEnum {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto3Unittest_NestedTestAllTypes: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".NestedTestAllTypes"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "child"),
    2: .same(proto: "payload"),
  ]

  fileprivate class _StorageClass {
    var _child: Proto3Unittest_NestedTestAllTypes? = nil
    var _payload: Proto3Unittest_TestAllTypes? = nil

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _child = source._child
      _payload = source._payload
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._child) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._payload) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._child {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._payload {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Proto3Unittest_NestedTestAllTypes, rhs: Proto3Unittest_NestedTestAllTypes) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._child != rhs_storage._child {return false}
        if _storage._payload != rhs_storage._payload {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto3Unittest_ForeignMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ForeignMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "c"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.c) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.c != 0 {
      try visitor.visitSingularInt32Field(value: self.c, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Proto3Unittest_ForeignMessage, rhs: Proto3Unittest_ForeignMessage) -> Bool {
    if lhs.c != rhs.c {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto3Unittest_TestEmptyMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TestEmptyMessage"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Proto3Unittest_TestEmptyMessage, rhs: Proto3Unittest_TestEmptyMessage) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto3Unittest_TestMessageWithDummy: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TestMessageWithDummy"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    536870911: .same(proto: "dummy"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 536870911: try { try decoder.decodeSingularBoolField(value: &self.dummy) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.dummy != false {
      try visitor.visitSingularBoolField(value: self.dummy, fieldNumber: 536870911)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Proto3Unittest_TestMessageWithDummy, rhs: Proto3Unittest_TestMessageWithDummy) -> Bool {
    if lhs.dummy != rhs.dummy {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto3Unittest_TestOneof2: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TestOneof2"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    6: .standard(proto: "foo_enum"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 6: try {
        var v: Proto3Unittest_TestOneof2.NestedEnum?
        try decoder.decodeSingularEnumField(value: &v)
        if let v = v {
          if self.foo != nil {try decoder.handleConflictingOneOf()}
          self.foo = .fooEnum(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if case .fooEnum(let v)? = self.foo {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 6)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Proto3Unittest_TestOneof2, rhs: Proto3Unittest_TestOneof2) -> Bool {
    if lhs.foo != rhs.foo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto3Unittest_TestOneof2.NestedEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "FOO"),
    2: .same(proto: "BAR"),
    3: .same(proto: "BAZ"),
  ]
}

extension Proto3Unittest_TestHasbits: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TestHasbits"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "b1"),
    2: .same(proto: "b2"),
    3: .same(proto: "b3"),
    4: .same(proto: "b4"),
    5: .same(proto: "b5"),
    6: .same(proto: "b6"),
    7: .same(proto: "b7"),
    8: .same(proto: "b8"),
    9: .same(proto: "b9"),
    10: .same(proto: "b10"),
    11: .same(proto: "b11"),
    12: .same(proto: "b12"),
    13: .same(proto: "b13"),
    14: .same(proto: "b14"),
    15: .same(proto: "b15"),
    16: .same(proto: "b16"),
    17: .same(proto: "b17"),
    18: .same(proto: "b18"),
    19: .same(proto: "b19"),
    20: .same(proto: "b20"),
    21: .same(proto: "b21"),
    22: .same(proto: "b22"),
    23: .same(proto: "b23"),
    24: .same(proto: "b24"),
    25: .same(proto: "b25"),
    26: .same(proto: "b26"),
    27: .same(proto: "b27"),
    28: .same(proto: "b28"),
    29: .same(proto: "b29"),
    30: .same(proto: "b30"),
    31: .same(proto: "b31"),
    32: .same(proto: "b32"),
    33: .same(proto: "b33"),
    34: .same(proto: "b34"),
    35: .same(proto: "b35"),
    36: .same(proto: "b36"),
    37: .same(proto: "b37"),
    38: .same(proto: "b38"),
    39: .same(proto: "b39"),
    40: .same(proto: "b40"),
    41: .same(proto: "b41"),
    42: .same(proto: "b42"),
    43: .same(proto: "b43"),
    44: .same(proto: "b44"),
    45: .same(proto: "b45"),
    46: .same(proto: "b46"),
    47: .same(proto: "b47"),
    48: .same(proto: "b48"),
    49: .same(proto: "b49"),
    50: .same(proto: "b50"),
    51: .same(proto: "b51"),
    52: .same(proto: "b52"),
    53: .same(proto: "b53"),
    54: .same(proto: "b54"),
    55: .same(proto: "b55"),
    56: .same(proto: "b56"),
    57: .same(proto: "b57"),
    58: .same(proto: "b58"),
    59: .same(proto: "b59"),
    60: .same(proto: "b60"),
    61: .same(proto: "b61"),
    62: .same(proto: "b62"),
    63: .same(proto: "b63"),
    64: .same(proto: "b64"),
    65: .same(proto: "b65"),
    66: .same(proto: "b66"),
    67: .same(proto: "b67"),
    68: .same(proto: "b68"),
    69: .same(proto: "b69"),
    100: .same(proto: "child"),
  ]

  fileprivate class _StorageClass {
    var _b1: Bool = false
    var _b2: Bool = false
    var _b3: Bool = false
    var _b4: Bool = false
    var _b5: Bool = false
    var _b6: Bool = false
    var _b7: Bool = false
    var _b8: Bool = false
    var _b9: Bool = false
    var _b10: Bool = false
    var _b11: Bool = false
    var _b12: Bool = false
    var _b13: Bool = false
    var _b14: Bool = false
    var _b15: Bool = false
    var _b16: Bool = false
    var _b17: Bool = false
    var _b18: Bool = false
    var _b19: Bool = false
    var _b20: Bool = false
    var _b21: Bool = false
    var _b22: Bool = false
    var _b23: Bool = false
    var _b24: Bool = false
    var _b25: Bool = false
    var _b26: Bool = false
    var _b27: Bool = false
    var _b28: Bool = false
    var _b29: Bool = false
    var _b30: Bool = false
    var _b31: Bool = false
    var _b32: Bool = false
    var _b33: Bool = false
    var _b34: Bool = false
    var _b35: Bool = false
    var _b36: Bool = false
    var _b37: Bool = false
    var _b38: Bool = false
    var _b39: Bool = false
    var _b40: Bool = false
    var _b41: Bool = false
    var _b42: Bool = false
    var _b43: Bool = false
    var _b44: Bool = false
    var _b45: Bool = false
    var _b46: Bool = false
    var _b47: Bool = false
    var _b48: Bool = false
    var _b49: Bool = false
    var _b50: Bool = false
    var _b51: Bool = false
    var _b52: Bool = false
    var _b53: Bool = false
    var _b54: Bool = false
    var _b55: Bool = false
    var _b56: Bool = false
    var _b57: Bool = false
    var _b58: Bool = false
    var _b59: Bool = false
    var _b60: Bool = false
    var _b61: Bool = false
    var _b62: Bool = false
    var _b63: Bool = false
    var _b64: Bool = false
    var _b65: Bool = false
    var _b66: Bool = false
    var _b67: Bool = false
    var _b68: Bool = false
    var _b69: Bool = false
    var _child: Proto3Unittest_TestAllTypes? = nil

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _b1 = source._b1
      _b2 = source._b2
      _b3 = source._b3
      _b4 = source._b4
      _b5 = source._b5
      _b6 = source._b6
      _b7 = source._b7
      _b8 = source._b8
      _b9 = source._b9
      _b10 = source._b10
      _b11 = source._b11
      _b12 = source._b12
      _b13 = source._b13
      _b14 = source._b14
      _b15 = source._b15
      _b16 = source._b16
      _b17 = source._b17
      _b18 = source._b18
      _b19 = source._b19
      _b20 = source._b20
      _b21 = source._b21
      _b22 = source._b22
      _b23 = source._b23
      _b24 = source._b24
      _b25 = source._b25
      _b26 = source._b26
      _b27 = source._b27
      _b28 = source._b28
      _b29 = source._b29
      _b30 = source._b30
      _b31 = source._b31
      _b32 = source._b32
      _b33 = source._b33
      _b34 = source._b34
      _b35 = source._b35
      _b36 = source._b36
      _b37 = source._b37
      _b38 = source._b38
      _b39 = source._b39
      _b40 = source._b40
      _b41 = source._b41
      _b42 = source._b42
      _b43 = source._b43
      _b44 = source._b44
      _b45 = source._b45
      _b46 = source._b46
      _b47 = source._b47
      _b48 = source._b48
      _b49 = source._b49
      _b50 = source._b50
      _b51 = source._b51
      _b52 = source._b52
      _b53 = source._b53
      _b54 = source._b54
      _b55 = source._b55
      _b56 = source._b56
      _b57 = source._b57
      _b58 = source._b58
      _b59 = source._b59
      _b60 = source._b60
      _b61 = source._b61
      _b62 = source._b62
      _b63 = source._b63
      _b64 = source._b64
      _b65 = source._b65
      _b66 = source._b66
      _b67 = source._b67
      _b68 = source._b68
      _b69 = source._b69
      _child = source._child
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularBoolField(value: &_storage._b1) }()
        case 2: try { try decoder.decodeSingularBoolField(value: &_storage._b2) }()
        case 3: try { try decoder.decodeSingularBoolField(value: &_storage._b3) }()
        case 4: try { try decoder.decodeSingularBoolField(value: &_storage._b4) }()
        case 5: try { try decoder.decodeSingularBoolField(value: &_storage._b5) }()
        case 6: try { try decoder.decodeSingularBoolField(value: &_storage._b6) }()
        case 7: try { try decoder.decodeSingularBoolField(value: &_storage._b7) }()
        case 8: try { try decoder.decodeSingularBoolField(value: &_storage._b8) }()
        case 9: try { try decoder.decodeSingularBoolField(value: &_storage._b9) }()
        case 10: try { try decoder.decodeSingularBoolField(value: &_storage._b10) }()
        case 11: try { try decoder.decodeSingularBoolField(value: &_storage._b11) }()
        case 12: try { try decoder.decodeSingularBoolField(value: &_storage._b12) }()
        case 13: try { try decoder.decodeSingularBoolField(value: &_storage._b13) }()
        case 14: try { try decoder.decodeSingularBoolField(value: &_storage._b14) }()
        case 15: try { try decoder.decodeSingularBoolField(value: &_storage._b15) }()
        case 16: try { try decoder.decodeSingularBoolField(value: &_storage._b16) }()
        case 17: try { try decoder.decodeSingularBoolField(value: &_storage._b17) }()
        case 18: try { try decoder.decodeSingularBoolField(value: &_storage._b18) }()
        case 19: try { try decoder.decodeSingularBoolField(value: &_storage._b19) }()
        case 20: try { try decoder.decodeSingularBoolField(value: &_storage._b20) }()
        case 21: try { try decoder.decodeSingularBoolField(value: &_storage._b21) }()
        case 22: try { try decoder.decodeSingularBoolField(value: &_storage._b22) }()
        case 23: try { try decoder.decodeSingularBoolField(value: &_storage._b23) }()
        case 24: try { try decoder.decodeSingularBoolField(value: &_storage._b24) }()
        case 25: try { try decoder.decodeSingularBoolField(value: &_storage._b25) }()
        case 26: try { try decoder.decodeSingularBoolField(value: &_storage._b26) }()
        case 27: try { try decoder.decodeSingularBoolField(value: &_storage._b27) }()
        case 28: try { try decoder.decodeSingularBoolField(value: &_storage._b28) }()
        case 29: try { try decoder.decodeSingularBoolField(value: &_storage._b29) }()
        case 30: try { try decoder.decodeSingularBoolField(value: &_storage._b30) }()
        case 31: try { try decoder.decodeSingularBoolField(value: &_storage._b31) }()
        case 32: try { try decoder.decodeSingularBoolField(value: &_storage._b32) }()
        case 33: try { try decoder.decodeSingularBoolField(value: &_storage._b33) }()
        case 34: try { try decoder.decodeSingularBoolField(value: &_storage._b34) }()
        case 35: try { try decoder.decodeSingularBoolField(value: &_storage._b35) }()
        case 36: try { try decoder.decodeSingularBoolField(value: &_storage._b36) }()
        case 37: try { try decoder.decodeSingularBoolField(value: &_storage._b37) }()
        case 38: try { try decoder.decodeSingularBoolField(value: &_storage._b38) }()
        case 39: try { try decoder.decodeSingularBoolField(value: &_storage._b39) }()
        case 40: try { try decoder.decodeSingularBoolField(value: &_storage._b40) }()
        case 41: try { try decoder.decodeSingularBoolField(value: &_storage._b41) }()
        case 42: try { try decoder.decodeSingularBoolField(value: &_storage._b42) }()
        case 43: try { try decoder.decodeSingularBoolField(value: &_storage._b43) }()
        case 44: try { try decoder.decodeSingularBoolField(value: &_storage._b44) }()
        case 45: try { try decoder.decodeSingularBoolField(value: &_storage._b45) }()
        case 46: try { try decoder.decodeSingularBoolField(value: &_storage._b46) }()
        case 47: try { try decoder.decodeSingularBoolField(value: &_storage._b47) }()
        case 48: try { try decoder.decodeSingularBoolField(value: &_storage._b48) }()
        case 49: try { try decoder.decodeSingularBoolField(value: &_storage._b49) }()
        case 50: try { try decoder.decodeSingularBoolField(value: &_storage._b50) }()
        case 51: try { try decoder.decodeSingularBoolField(value: &_storage._b51) }()
        case 52: try { try decoder.decodeSingularBoolField(value: &_storage._b52) }()
        case 53: try { try decoder.decodeSingularBoolField(value: &_storage._b53) }()
        case 54: try { try decoder.decodeSingularBoolField(value: &_storage._b54) }()
        case 55: try { try decoder.decodeSingularBoolField(value: &_storage._b55) }()
        case 56: try { try decoder.decodeSingularBoolField(value: &_storage._b56) }()
        case 57: try { try decoder.decodeSingularBoolField(value: &_storage._b57) }()
        case 58: try { try decoder.decodeSingularBoolField(value: &_storage._b58) }()
        case 59: try { try decoder.decodeSingularBoolField(value: &_storage._b59) }()
        case 60: try { try decoder.decodeSingularBoolField(value: &_storage._b60) }()
        case 61: try { try decoder.decodeSingularBoolField(value: &_storage._b61) }()
        case 62: try { try decoder.decodeSingularBoolField(value: &_storage._b62) }()
        case 63: try { try decoder.decodeSingularBoolField(value: &_storage._b63) }()
        case 64: try { try decoder.decodeSingularBoolField(value: &_storage._b64) }()
        case 65: try { try decoder.decodeSingularBoolField(value: &_storage._b65) }()
        case 66: try { try decoder.decodeSingularBoolField(value: &_storage._b66) }()
        case 67: try { try decoder.decodeSingularBoolField(value: &_storage._b67) }()
        case 68: try { try decoder.decodeSingularBoolField(value: &_storage._b68) }()
        case 69: try { try decoder.decodeSingularBoolField(value: &_storage._b69) }()
        case 100: try { try decoder.decodeSingularMessageField(value: &_storage._child) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if _storage._b1 != false {
        try visitor.visitSingularBoolField(value: _storage._b1, fieldNumber: 1)
      }
      if _storage._b2 != false {
        try visitor.visitSingularBoolField(value: _storage._b2, fieldNumber: 2)
      }
      if _storage._b3 != false {
        try visitor.visitSingularBoolField(value: _storage._b3, fieldNumber: 3)
      }
      if _storage._b4 != false {
        try visitor.visitSingularBoolField(value: _storage._b4, fieldNumber: 4)
      }
      if _storage._b5 != false {
        try visitor.visitSingularBoolField(value: _storage._b5, fieldNumber: 5)
      }
      if _storage._b6 != false {
        try visitor.visitSingularBoolField(value: _storage._b6, fieldNumber: 6)
      }
      if _storage._b7 != false {
        try visitor.visitSingularBoolField(value: _storage._b7, fieldNumber: 7)
      }
      if _storage._b8 != false {
        try visitor.visitSingularBoolField(value: _storage._b8, fieldNumber: 8)
      }
      if _storage._b9 != false {
        try visitor.visitSingularBoolField(value: _storage._b9, fieldNumber: 9)
      }
      if _storage._b10 != false {
        try visitor.visitSingularBoolField(value: _storage._b10, fieldNumber: 10)
      }
      if _storage._b11 != false {
        try visitor.visitSingularBoolField(value: _storage._b11, fieldNumber: 11)
      }
      if _storage._b12 != false {
        try visitor.visitSingularBoolField(value: _storage._b12, fieldNumber: 12)
      }
      if _storage._b13 != false {
        try visitor.visitSingularBoolField(value: _storage._b13, fieldNumber: 13)
      }
      if _storage._b14 != false {
        try visitor.visitSingularBoolField(value: _storage._b14, fieldNumber: 14)
      }
      if _storage._b15 != false {
        try visitor.visitSingularBoolField(value: _storage._b15, fieldNumber: 15)
      }
      if _storage._b16 != false {
        try visitor.visitSingularBoolField(value: _storage._b16, fieldNumber: 16)
      }
      if _storage._b17 != false {
        try visitor.visitSingularBoolField(value: _storage._b17, fieldNumber: 17)
      }
      if _storage._b18 != false {
        try visitor.visitSingularBoolField(value: _storage._b18, fieldNumber: 18)
      }
      if _storage._b19 != false {
        try visitor.visitSingularBoolField(value: _storage._b19, fieldNumber: 19)
      }
      if _storage._b20 != false {
        try visitor.visitSingularBoolField(value: _storage._b20, fieldNumber: 20)
      }
      if _storage._b21 != false {
        try visitor.visitSingularBoolField(value: _storage._b21, fieldNumber: 21)
      }
      if _storage._b22 != false {
        try visitor.visitSingularBoolField(value: _storage._b22, fieldNumber: 22)
      }
      if _storage._b23 != false {
        try visitor.visitSingularBoolField(value: _storage._b23, fieldNumber: 23)
      }
      if _storage._b24 != false {
        try visitor.visitSingularBoolField(value: _storage._b24, fieldNumber: 24)
      }
      if _storage._b25 != false {
        try visitor.visitSingularBoolField(value: _storage._b25, fieldNumber: 25)
      }
      if _storage._b26 != false {
        try visitor.visitSingularBoolField(value: _storage._b26, fieldNumber: 26)
      }
      if _storage._b27 != false {
        try visitor.visitSingularBoolField(value: _storage._b27, fieldNumber: 27)
      }
      if _storage._b28 != false {
        try visitor.visitSingularBoolField(value: _storage._b28, fieldNumber: 28)
      }
      if _storage._b29 != false {
        try visitor.visitSingularBoolField(value: _storage._b29, fieldNumber: 29)
      }
      if _storage._b30 != false {
        try visitor.visitSingularBoolField(value: _storage._b30, fieldNumber: 30)
      }
      if _storage._b31 != false {
        try visitor.visitSingularBoolField(value: _storage._b31, fieldNumber: 31)
      }
      if _storage._b32 != false {
        try visitor.visitSingularBoolField(value: _storage._b32, fieldNumber: 32)
      }
      if _storage._b33 != false {
        try visitor.visitSingularBoolField(value: _storage._b33, fieldNumber: 33)
      }
      if _storage._b34 != false {
        try visitor.visitSingularBoolField(value: _storage._b34, fieldNumber: 34)
      }
      if _storage._b35 != false {
        try visitor.visitSingularBoolField(value: _storage._b35, fieldNumber: 35)
      }
      if _storage._b36 != false {
        try visitor.visitSingularBoolField(value: _storage._b36, fieldNumber: 36)
      }
      if _storage._b37 != false {
        try visitor.visitSingularBoolField(value: _storage._b37, fieldNumber: 37)
      }
      if _storage._b38 != false {
        try visitor.visitSingularBoolField(value: _storage._b38, fieldNumber: 38)
      }
      if _storage._b39 != false {
        try visitor.visitSingularBoolField(value: _storage._b39, fieldNumber: 39)
      }
      if _storage._b40 != false {
        try visitor.visitSingularBoolField(value: _storage._b40, fieldNumber: 40)
      }
      if _storage._b41 != false {
        try visitor.visitSingularBoolField(value: _storage._b41, fieldNumber: 41)
      }
      if _storage._b42 != false {
        try visitor.visitSingularBoolField(value: _storage._b42, fieldNumber: 42)
      }
      if _storage._b43 != false {
        try visitor.visitSingularBoolField(value: _storage._b43, fieldNumber: 43)
      }
      if _storage._b44 != false {
        try visitor.visitSingularBoolField(value: _storage._b44, fieldNumber: 44)
      }
      if _storage._b45 != false {
        try visitor.visitSingularBoolField(value: _storage._b45, fieldNumber: 45)
      }
      if _storage._b46 != false {
        try visitor.visitSingularBoolField(value: _storage._b46, fieldNumber: 46)
      }
      if _storage._b47 != false {
        try visitor.visitSingularBoolField(value: _storage._b47, fieldNumber: 47)
      }
      if _storage._b48 != false {
        try visitor.visitSingularBoolField(value: _storage._b48, fieldNumber: 48)
      }
      if _storage._b49 != false {
        try visitor.visitSingularBoolField(value: _storage._b49, fieldNumber: 49)
      }
      if _storage._b50 != false {
        try visitor.visitSingularBoolField(value: _storage._b50, fieldNumber: 50)
      }
      if _storage._b51 != false {
        try visitor.visitSingularBoolField(value: _storage._b51, fieldNumber: 51)
      }
      if _storage._b52 != false {
        try visitor.visitSingularBoolField(value: _storage._b52, fieldNumber: 52)
      }
      if _storage._b53 != false {
        try visitor.visitSingularBoolField(value: _storage._b53, fieldNumber: 53)
      }
      if _storage._b54 != false {
        try visitor.visitSingularBoolField(value: _storage._b54, fieldNumber: 54)
      }
      if _storage._b55 != false {
        try visitor.visitSingularBoolField(value: _storage._b55, fieldNumber: 55)
      }
      if _storage._b56 != false {
        try visitor.visitSingularBoolField(value: _storage._b56, fieldNumber: 56)
      }
      if _storage._b57 != false {
        try visitor.visitSingularBoolField(value: _storage._b57, fieldNumber: 57)
      }
      if _storage._b58 != false {
        try visitor.visitSingularBoolField(value: _storage._b58, fieldNumber: 58)
      }
      if _storage._b59 != false {
        try visitor.visitSingularBoolField(value: _storage._b59, fieldNumber: 59)
      }
      if _storage._b60 != false {
        try visitor.visitSingularBoolField(value: _storage._b60, fieldNumber: 60)
      }
      if _storage._b61 != false {
        try visitor.visitSingularBoolField(value: _storage._b61, fieldNumber: 61)
      }
      if _storage._b62 != false {
        try visitor.visitSingularBoolField(value: _storage._b62, fieldNumber: 62)
      }
      if _storage._b63 != false {
        try visitor.visitSingularBoolField(value: _storage._b63, fieldNumber: 63)
      }
      if _storage._b64 != false {
        try visitor.visitSingularBoolField(value: _storage._b64, fieldNumber: 64)
      }
      if _storage._b65 != false {
        try visitor.visitSingularBoolField(value: _storage._b65, fieldNumber: 65)
      }
      if _storage._b66 != false {
        try visitor.visitSingularBoolField(value: _storage._b66, fieldNumber: 66)
      }
      if _storage._b67 != false {
        try visitor.visitSingularBoolField(value: _storage._b67, fieldNumber: 67)
      }
      if _storage._b68 != false {
        try visitor.visitSingularBoolField(value: _storage._b68, fieldNumber: 68)
      }
      if _storage._b69 != false {
        try visitor.visitSingularBoolField(value: _storage._b69, fieldNumber: 69)
      }
      try { if let v = _storage._child {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 100)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Proto3Unittest_TestHasbits, rhs: Proto3Unittest_TestHasbits) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._b1 != rhs_storage._b1 {return false}
        if _storage._b2 != rhs_storage._b2 {return false}
        if _storage._b3 != rhs_storage._b3 {return false}
        if _storage._b4 != rhs_storage._b4 {return false}
        if _storage._b5 != rhs_storage._b5 {return false}
        if _storage._b6 != rhs_storage._b6 {return false}
        if _storage._b7 != rhs_storage._b7 {return false}
        if _storage._b8 != rhs_storage._b8 {return false}
        if _storage._b9 != rhs_storage._b9 {return false}
        if _storage._b10 != rhs_storage._b10 {return false}
        if _storage._b11 != rhs_storage._b11 {return false}
        if _storage._b12 != rhs_storage._b12 {return false}
        if _storage._b13 != rhs_storage._b13 {return false}
        if _storage._b14 != rhs_storage._b14 {return false}
        if _storage._b15 != rhs_storage._b15 {return false}
        if _storage._b16 != rhs_storage._b16 {return false}
        if _storage._b17 != rhs_storage._b17 {return false}
        if _storage._b18 != rhs_storage._b18 {return false}
        if _storage._b19 != rhs_storage._b19 {return false}
        if _storage._b20 != rhs_storage._b20 {return false}
        if _storage._b21 != rhs_storage._b21 {return false}
        if _storage._b22 != rhs_storage._b22 {return false}
        if _storage._b23 != rhs_storage._b23 {return false}
        if _storage._b24 != rhs_storage._b24 {return false}
        if _storage._b25 != rhs_storage._b25 {return false}
        if _storage._b26 != rhs_storage._b26 {return false}
        if _storage._b27 != rhs_storage._b27 {return false}
        if _storage._b28 != rhs_storage._b28 {return false}
        if _storage._b29 != rhs_storage._b29 {return false}
        if _storage._b30 != rhs_storage._b30 {return false}
        if _storage._b31 != rhs_storage._b31 {return false}
        if _storage._b32 != rhs_storage._b32 {return false}
        if _storage._b33 != rhs_storage._b33 {return false}
        if _storage._b34 != rhs_storage._b34 {return false}
        if _storage._b35 != rhs_storage._b35 {return false}
        if _storage._b36 != rhs_storage._b36 {return false}
        if _storage._b37 != rhs_storage._b37 {return false}
        if _storage._b38 != rhs_storage._b38 {return false}
        if _storage._b39 != rhs_storage._b39 {return false}
        if _storage._b40 != rhs_storage._b40 {return false}
        if _storage._b41 != rhs_storage._b41 {return false}
        if _storage._b42 != rhs_storage._b42 {return false}
        if _storage._b43 != rhs_storage._b43 {return false}
        if _storage._b44 != rhs_storage._b44 {return false}
        if _storage._b45 != rhs_storage._b45 {return false}
        if _storage._b46 != rhs_storage._b46 {return false}
        if _storage._b47 != rhs_storage._b47 {return false}
        if _storage._b48 != rhs_storage._b48 {return false}
        if _storage._b49 != rhs_storage._b49 {return false}
        if _storage._b50 != rhs_storage._b50 {return false}
        if _storage._b51 != rhs_storage._b51 {return false}
        if _storage._b52 != rhs_storage._b52 {return false}
        if _storage._b53 != rhs_storage._b53 {return false}
        if _storage._b54 != rhs_storage._b54 {return false}
        if _storage._b55 != rhs_storage._b55 {return false}
        if _storage._b56 != rhs_storage._b56 {return false}
        if _storage._b57 != rhs_storage._b57 {return false}
        if _storage._b58 != rhs_storage._b58 {return false}
        if _storage._b59 != rhs_storage._b59 {return false}
        if _storage._b60 != rhs_storage._b60 {return false}
        if _storage._b61 != rhs_storage._b61 {return false}
        if _storage._b62 != rhs_storage._b62 {return false}
        if _storage._b63 != rhs_storage._b63 {return false}
        if _storage._b64 != rhs_storage._b64 {return false}
        if _storage._b65 != rhs_storage._b65 {return false}
        if _storage._b66 != rhs_storage._b66 {return false}
        if _storage._b67 != rhs_storage._b67 {return false}
        if _storage._b68 != rhs_storage._b68 {return false}
        if _storage._b69 != rhs_storage._b69 {return false}
        if _storage._child != rhs_storage._child {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
