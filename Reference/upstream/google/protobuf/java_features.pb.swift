// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/protobuf/java_features.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Protocol Buffers - Google's data interchange format
// Copyright 2023 Google Inc.  All rights reserved.
//
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file or at
// https://developers.google.com/open-source/licenses/bsd

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Pb_JavaFeatures: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Whether or not to treat an enum field as closed.  This option is only
  /// applicable to enum fields, and will be removed in the future.  It is
  /// consistent with the legacy behavior of using proto3 enum types for proto2
  /// fields.
  var legacyClosedEnum: Bool {
    get {return _legacyClosedEnum ?? false}
    set {_legacyClosedEnum = newValue}
  }
  /// Returns true if `legacyClosedEnum` has been explicitly set.
  var hasLegacyClosedEnum: Bool {return self._legacyClosedEnum != nil}
  /// Clears the value of `legacyClosedEnum`. Subsequent reads from it will return its default value.
  mutating func clearLegacyClosedEnum() {self._legacyClosedEnum = nil}

  var utf8Validation: Pb_JavaFeatures.Utf8Validation {
    get {return _utf8Validation ?? .unknown}
    set {_utf8Validation = newValue}
  }
  /// Returns true if `utf8Validation` has been explicitly set.
  var hasUtf8Validation: Bool {return self._utf8Validation != nil}
  /// Clears the value of `utf8Validation`. Subsequent reads from it will return its default value.
  mutating func clearUtf8Validation() {self._utf8Validation = nil}

  /// Allows creation of large Java enums, extending beyond the standard
  /// constant limits imposed by the Java language.
  var largeEnum: Bool {
    get {return _largeEnum ?? false}
    set {_largeEnum = newValue}
  }
  /// Returns true if `largeEnum` has been explicitly set.
  var hasLargeEnum: Bool {return self._largeEnum != nil}
  /// Clears the value of `largeEnum`. Subsequent reads from it will return its default value.
  mutating func clearLargeEnum() {self._largeEnum = nil}

  /// Whether to use the old default outer class name scheme, or the new feature
  /// which adds a "Proto" suffix to the outer class name.
  ///
  /// Users will not be able to set this option, because we removed it in the
  /// same edition that it was introduced. But we use it to determine which
  /// naming scheme to use for outer class name defaults.
  var useOldOuterClassnameDefault: Bool {
    get {return _useOldOuterClassnameDefault ?? false}
    set {_useOldOuterClassnameDefault = newValue}
  }
  /// Returns true if `useOldOuterClassnameDefault` has been explicitly set.
  var hasUseOldOuterClassnameDefault: Bool {return self._useOldOuterClassnameDefault != nil}
  /// Clears the value of `useOldOuterClassnameDefault`. Subsequent reads from it will return its default value.
  mutating func clearUseOldOuterClassnameDefault() {self._useOldOuterClassnameDefault = nil}

  /// Whether to nest the generated class in the generated file class. This is
  /// only applicable to *top-level* messages, enums, and services.
  var nestInFileClass: Pb_JavaFeatures.NestInFileClassFeature.NestInFileClass {
    get {return _nestInFileClass ?? .unknown}
    set {_nestInFileClass = newValue}
  }
  /// Returns true if `nestInFileClass` has been explicitly set.
  var hasNestInFileClass: Bool {return self._nestInFileClass != nil}
  /// Clears the value of `nestInFileClass`. Subsequent reads from it will return its default value.
  mutating func clearNestInFileClass() {self._nestInFileClass = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The UTF8 validation strategy to use.
  enum Utf8Validation: Int, SwiftProtobuf.Enum, Swift.CaseIterable {

    /// Invalid default, which should never be used.
    case unknown = 0

    /// Respect the UTF8 validation behavior specified by the global
    /// utf8_validation feature.
    case `default` = 1

    /// Verifies UTF8 validity overriding the global utf8_validation
    /// feature. This represents the legacy java_string_check_utf8 option.
    case verify = 2

    init() {
      self = .unknown
    }

  }

  struct NestInFileClassFeature: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    enum NestInFileClass: Int, SwiftProtobuf.Enum, Swift.CaseIterable {

      /// Invalid default, which should never be used.
      case unknown = 0

      /// Do not nest the generated class in the file class.
      case no = 1

      /// Nest the generated class in the file class.
      case yes = 2

      /// Fall back to the `java_multiple_files` option. Users won't be able to
      /// set this option.
      case legacy = 3

      init() {
        self = .unknown
      }

    }

    init() {}
  }

  init() {}

  fileprivate var _legacyClosedEnum: Bool? = nil
  fileprivate var _utf8Validation: Pb_JavaFeatures.Utf8Validation? = nil
  fileprivate var _largeEnum: Bool? = nil
  fileprivate var _useOldOuterClassnameDefault: Bool? = nil
  fileprivate var _nestInFileClass: Pb_JavaFeatures.NestInFileClassFeature.NestInFileClass? = nil
}

// MARK: - Extension support defined in java_features.proto.

// MARK: - Extension Properties

// Swift Extensions on the extended Messages to add easy access to the declared
// extension fields. The names are based on the extension field name from the proto
// declaration. To avoid naming collisions, the names are prefixed with the name of
// the scope where the extend directive occurs.

extension SwiftProtobuf.Google_Protobuf_FeatureSet {

  var Pb_java: Pb_JavaFeatures {
    get {return getExtensionValue(ext: Pb_Extensions_java) ?? Pb_JavaFeatures()}
    set {setExtensionValue(ext: Pb_Extensions_java, value: newValue)}
  }
  /// Returns true if extension `Pb_Extensions_java`
  /// has been explicitly set.
  var hasPb_java: Bool {
    return hasExtensionValue(ext: Pb_Extensions_java)
  }
  /// Clears the value of extension `Pb_Extensions_java`.
  /// Subsequent reads from it will return its default value.
  mutating func clearPb_java() {
    clearExtensionValue(ext: Pb_Extensions_java)
  }

}

// MARK: - File's ExtensionMap: Pb_JavaFeatures_Extensions

/// A `SwiftProtobuf.SimpleExtensionMap` that includes all of the extensions defined by
/// this .proto file. It can be used any place an `SwiftProtobuf.ExtensionMap` is needed
/// in parsing, or it can be combined with other `SwiftProtobuf.SimpleExtensionMap`s to create
/// a larger `SwiftProtobuf.SimpleExtensionMap`.
let Pb_JavaFeatures_Extensions: SwiftProtobuf.SimpleExtensionMap = [
  Pb_Extensions_java
]

// Extension Objects - The only reason these might be needed is when manually
// constructing a `SimpleExtensionMap`, otherwise, use the above _Extension Properties_
// accessors for the extension fields on the messages directly.

let Pb_Extensions_java = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Pb_JavaFeatures>, SwiftProtobuf.Google_Protobuf_FeatureSet>(
  _protobuf_fieldNumber: 1001,
  fieldName: "pb.java"
)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "pb"

extension Pb_JavaFeatures: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".JavaFeatures"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}legacy_closed_enum\0\u{3}utf8_validation\0\u{3}large_enum\0\u{3}use_old_outer_classname_default\0\u{3}nest_in_file_class\0\u{c}\u{6}\u{1}")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self._legacyClosedEnum) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self._utf8Validation) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self._largeEnum) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self._useOldOuterClassnameDefault) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self._nestInFileClass) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._legacyClosedEnum {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._utf8Validation {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._largeEnum {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._useOldOuterClassnameDefault {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._nestInFileClass {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pb_JavaFeatures, rhs: Pb_JavaFeatures) -> Bool {
    if lhs._legacyClosedEnum != rhs._legacyClosedEnum {return false}
    if lhs._utf8Validation != rhs._utf8Validation {return false}
    if lhs._largeEnum != rhs._largeEnum {return false}
    if lhs._useOldOuterClassnameDefault != rhs._useOldOuterClassnameDefault {return false}
    if lhs._nestInFileClass != rhs._nestInFileClass {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Pb_JavaFeatures.Utf8Validation: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0UTF8_VALIDATION_UNKNOWN\0\u{1}DEFAULT\0\u{1}VERIFY\0")
}

extension Pb_JavaFeatures.NestInFileClassFeature: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Pb_JavaFeatures.protoMessageName + ".NestInFileClassFeature"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{c}\u{1}\u{7f}\u{7f}\u{7f}\u{7f}\u{1f}")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pb_JavaFeatures.NestInFileClassFeature, rhs: Pb_JavaFeatures.NestInFileClassFeature) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Pb_JavaFeatures.NestInFileClassFeature.NestInFileClass: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0NEST_IN_FILE_CLASS_UNKNOWN\0\u{1}NO\0\u{1}YES\0\u{1}LEGACY\0")
}
