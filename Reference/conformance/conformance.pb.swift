/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: conformance/conformance.proto
 *
 */

//  Protocol Buffers - Google's data interchange format
//  Copyright 2008 Google Inc.  All rights reserved.
//  https://developers.google.com/protocol-buffers/
// 
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are
//  met:
// 
//      * Redistributions of source code must retain the above copyright
//  notice, this list of conditions and the following disclaimer.
//      * Redistributions in binary form must reproduce the above
//  copyright notice, this list of conditions and the following disclaimer
//  in the documentation and/or other materials provided with the
//  distribution.
//      * Neither the name of Google Inc. nor the names of its
//  contributors may be used to endorse or promote products derived from
//  this software without specific prior written permission.
// 
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
//  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
//  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
//  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
//  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
//  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
//  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import Foundation
import SwiftProtobuf


//  This defines the conformance testing protocol.  This protocol exists between
//  the conformance test suite itself and the code being tested.  For each test,
//  the suite will send a ConformanceRequest message and expect a
//  ConformanceResponse message.
// 
//  You can either run the tests in two different ways:
// 
//    1. in-process (using the interface in conformance_test.h).
// 
//    2. as a sub-process communicating over a pipe.  Information about how to
//       do this is in conformance_test_runner.cc.
// 
//  Pros/cons of the two approaches:
// 
//    - running as a sub-process is much simpler for languages other than C/C++.
// 
//    - running as a sub-process may be more tricky in unusual environments like
//      iOS apps, where fork/stdin/stdout are not available.

public enum Conformance_WireFormat: ProtobufEnum {
  public typealias RawValue = Int
  case unspecified // = 0
  case protobuf // = 1
  case json_ // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .protobuf
    case 2: self = .json_
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public init?(name: String) {
    switch name {
    case "unspecified": self = .unspecified
    case "protobuf": self = .protobuf
    case "json_": self = .json_
    default: return nil
    }
  }

  public init?(jsonName: String) {
    switch jsonName {
    case "UNSPECIFIED": self = .unspecified
    case "PROTOBUF": self = .protobuf
    case "JSON": self = .json_
    default: return nil
    }
  }

  public init?(protoName: String) {
    switch protoName {
    case "UNSPECIFIED": self = .unspecified
    case "PROTOBUF": self = .protobuf
    case "JSON": self = .json_
    default: return nil
    }
  }

  public var rawValue: Int {
    get {
      switch self {
      case .unspecified: return 0
      case .protobuf: return 1
      case .json_: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }
  }

  public var json: String {
    get {
      switch self {
      case .unspecified: return "\"UNSPECIFIED\""
      case .protobuf: return "\"PROTOBUF\""
      case .json_: return "\"JSON\""
      case .UNRECOGNIZED(let i): return String(i)
      }
    }
  }

  public var hashValue: Int { return rawValue }

  public var debugDescription: String {
    get {
      switch self {
      case .unspecified: return ".unspecified"
      case .protobuf: return ".protobuf"
      case .json_: return ".json_"
      case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
      }
    }
  }

}

public enum Conformance_ForeignEnum: ProtobufEnum {
  public typealias RawValue = Int
  case foreignFoo // = 0
  case foreignBar // = 1
  case foreignBaz // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .foreignFoo
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .foreignFoo
    case 1: self = .foreignBar
    case 2: self = .foreignBaz
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public init?(name: String) {
    switch name {
    case "foreignFoo": self = .foreignFoo
    case "foreignBar": self = .foreignBar
    case "foreignBaz": self = .foreignBaz
    default: return nil
    }
  }

  public init?(jsonName: String) {
    switch jsonName {
    case "FOREIGN_FOO": self = .foreignFoo
    case "FOREIGN_BAR": self = .foreignBar
    case "FOREIGN_BAZ": self = .foreignBaz
    default: return nil
    }
  }

  public init?(protoName: String) {
    switch protoName {
    case "FOREIGN_FOO": self = .foreignFoo
    case "FOREIGN_BAR": self = .foreignBar
    case "FOREIGN_BAZ": self = .foreignBaz
    default: return nil
    }
  }

  public var rawValue: Int {
    get {
      switch self {
      case .foreignFoo: return 0
      case .foreignBar: return 1
      case .foreignBaz: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }
  }

  public var json: String {
    get {
      switch self {
      case .foreignFoo: return "\"FOREIGN_FOO\""
      case .foreignBar: return "\"FOREIGN_BAR\""
      case .foreignBaz: return "\"FOREIGN_BAZ\""
      case .UNRECOGNIZED(let i): return String(i)
      }
    }
  }

  public var hashValue: Int { return rawValue }

  public var debugDescription: String {
    get {
      switch self {
      case .foreignFoo: return ".foreignFoo"
      case .foreignBar: return ".foreignBar"
      case .foreignBaz: return ".foreignBaz"
      case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
      }
    }
  }

}

///   Represents a single test case's input.  The testee should:
///  
///     1. parse this proto (which should always succeed)
///     2. parse the protobuf or JSON payload in "payload" (which may fail)
///     3. if the parse succeeded, serialize the message in the requested format.
public struct Conformance_ConformanceRequest: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Conformance_ConformanceRequest"}
  public var protoMessageName: String {return "ConformanceRequest"}
  public var protoPackageName: String {return "conformance"}
  public var jsonFieldNames: [String: Int] {return [
    "protobufPayload": 1,
    "jsonPayload": 2,
    "requestedOutputFormat": 3,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "protobuf_payload": 1,
    "json_payload": 2,
    "requested_output_format": 3,
  ]}

  public enum OneOf_Payload: ExpressibleByNilLiteral, ProtobufOneofEnum {
    case protobufPayload(Data)
    case jsonPayload(String)
    case None

    public init(nilLiteral: ()) {
      self = .None
    }

    public init() {
      self = .None
    }

    public mutating func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      if self != .None && setter.rejectConflictingOneof {
        throw ProtobufDecodingError.duplicatedOneOf
      }
      let handled: Bool
      switch protoFieldNumber {
      case 1:
        var value = Data()
        handled = try setter.decodeSingularField(fieldType: ProtobufBytes.self, value: &value)
        self = .protobufPayload(value)
      case 2:
        var value = String()
        handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &value)
        self = .jsonPayload(value)
      default:
        handled = false
        self = .None
      }
      return handled
    }

    public func traverse(visitor: inout ProtobufVisitor, start: Int, end: Int) throws {
      switch self {
      case .protobufPayload(let v):
        if start <= 1 && 1 < end {
          try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: v, protoFieldNumber: 1, protoFieldName: "protobuf_payload", jsonFieldName: "protobufPayload", swiftFieldName: "protobufPayload")
        }
      case .jsonPayload(let v):
        if start <= 2 && 2 < end {
          try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 2, protoFieldName: "json_payload", jsonFieldName: "jsonPayload", swiftFieldName: "jsonPayload")
        }
      case .None:
        break
      }
    }
  }

  public var protobufPayload: Data {
    get {
      if case .protobufPayload(let v) = payload {
        return v
      }
      return Data()
    }
    set {
      payload = .protobufPayload(newValue)
    }
  }

  public var payload: Conformance_ConformanceRequest.OneOf_Payload = .None

  public var jsonPayload: String {
    get {
      if case .jsonPayload(let v) = payload {
        return v
      }
      return ""
    }
    set {
      payload = .jsonPayload(newValue)
    }
  }

  ///   Which format should the testee serialize its message to?
  public var requestedOutputFormat: Conformance_WireFormat = Conformance_WireFormat.unspecified

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1, 2:
      handled = try payload.decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
    case 3: handled = try setter.decodeSingularField(fieldType: Conformance_WireFormat.self, value: &requestedOutputFormat)
    default:
      handled = false
    }
    return handled
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try payload.traverse(visitor: &visitor, start: 1, end: 3)
    if requestedOutputFormat != Conformance_WireFormat.unspecified {
      try visitor.visitSingularField(fieldType: Conformance_WireFormat.self, value: requestedOutputFormat, protoFieldNumber: 3, protoFieldName: "requested_output_format", jsonFieldName: "requestedOutputFormat", swiftFieldName: "requestedOutputFormat")
    }
  }

  public func _protoc_generated_isEqualTo(other: Conformance_ConformanceRequest) -> Bool {
    if payload != other.payload {return false}
    if requestedOutputFormat != other.requestedOutputFormat {return false}
    return true
  }
}

///   Represents a single test case's output.
public struct Conformance_ConformanceResponse: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Conformance_ConformanceResponse"}
  public var protoMessageName: String {return "ConformanceResponse"}
  public var protoPackageName: String {return "conformance"}
  public var jsonFieldNames: [String: Int] {return [
    "parseError": 1,
    "serializeError": 6,
    "runtimeError": 2,
    "protobufPayload": 3,
    "jsonPayload": 4,
    "skipped": 5,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "parse_error": 1,
    "serialize_error": 6,
    "runtime_error": 2,
    "protobuf_payload": 3,
    "json_payload": 4,
    "skipped": 5,
  ]}

  public enum OneOf_Result: ExpressibleByNilLiteral, ProtobufOneofEnum {
    case parseError(String)
    case serializeError(String)
    case runtimeError(String)
    case protobufPayload(Data)
    case jsonPayload(String)
    case skipped(String)
    case None

    public init(nilLiteral: ()) {
      self = .None
    }

    public init() {
      self = .None
    }

    public mutating func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      if self != .None && setter.rejectConflictingOneof {
        throw ProtobufDecodingError.duplicatedOneOf
      }
      let handled: Bool
      switch protoFieldNumber {
      case 1:
        var value = String()
        handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &value)
        self = .parseError(value)
      case 2:
        var value = String()
        handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &value)
        self = .runtimeError(value)
      case 3:
        var value = Data()
        handled = try setter.decodeSingularField(fieldType: ProtobufBytes.self, value: &value)
        self = .protobufPayload(value)
      case 4:
        var value = String()
        handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &value)
        self = .jsonPayload(value)
      case 5:
        var value = String()
        handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &value)
        self = .skipped(value)
      case 6:
        var value = String()
        handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &value)
        self = .serializeError(value)
      default:
        handled = false
        self = .None
      }
      return handled
    }

    public func traverse(visitor: inout ProtobufVisitor, start: Int, end: Int) throws {
      switch self {
      case .parseError(let v):
        if start <= 1 && 1 < end {
          try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 1, protoFieldName: "parse_error", jsonFieldName: "parseError", swiftFieldName: "parseError")
        }
      case .runtimeError(let v):
        if start <= 2 && 2 < end {
          try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 2, protoFieldName: "runtime_error", jsonFieldName: "runtimeError", swiftFieldName: "runtimeError")
        }
      case .protobufPayload(let v):
        if start <= 3 && 3 < end {
          try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: v, protoFieldNumber: 3, protoFieldName: "protobuf_payload", jsonFieldName: "protobufPayload", swiftFieldName: "protobufPayload")
        }
      case .jsonPayload(let v):
        if start <= 4 && 4 < end {
          try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 4, protoFieldName: "json_payload", jsonFieldName: "jsonPayload", swiftFieldName: "jsonPayload")
        }
      case .skipped(let v):
        if start <= 5 && 5 < end {
          try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 5, protoFieldName: "skipped", jsonFieldName: "skipped", swiftFieldName: "skipped")
        }
      case .serializeError(let v):
        if start <= 6 && 6 < end {
          try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 6, protoFieldName: "serialize_error", jsonFieldName: "serializeError", swiftFieldName: "serializeError")
        }
      case .None:
        break
      }
    }
  }

  ///   This string should be set to indicate parsing failed.  The string can
  ///   provide more information about the parse error if it is available.
  ///  
  ///   Setting this string does not necessarily mean the testee failed the
  ///   test.  Some of the test cases are intentionally invalid input.
  public var parseError: String {
    get {
      if case .parseError(let v) = result {
        return v
      }
      return ""
    }
    set {
      result = .parseError(newValue)
    }
  }

  public var result: Conformance_ConformanceResponse.OneOf_Result = .None

  ///   If the input was successfully parsed but errors occurred when
  ///   serializing it to the requested output format, set the error message in
  ///   this field.
  public var serializeError: String {
    get {
      if case .serializeError(let v) = result {
        return v
      }
      return ""
    }
    set {
      result = .serializeError(newValue)
    }
  }

  ///   This should be set if some other error occurred.  This will always
  ///   indicate that the test failed.  The string can provide more information
  ///   about the failure.
  public var runtimeError: String {
    get {
      if case .runtimeError(let v) = result {
        return v
      }
      return ""
    }
    set {
      result = .runtimeError(newValue)
    }
  }

  ///   If the input was successfully parsed and the requested output was
  ///   protobuf, serialize it to protobuf and set it in this field.
  public var protobufPayload: Data {
    get {
      if case .protobufPayload(let v) = result {
        return v
      }
      return Data()
    }
    set {
      result = .protobufPayload(newValue)
    }
  }

  ///   If the input was successfully parsed and the requested output was JSON,
  ///   serialize to JSON and set it in this field.
  public var jsonPayload: String {
    get {
      if case .jsonPayload(let v) = result {
        return v
      }
      return ""
    }
    set {
      result = .jsonPayload(newValue)
    }
  }

  ///   For when the testee skipped the test, likely because a certain feature
  ///   wasn't supported, like JSON input/output.
  public var skipped: String {
    get {
      if case .skipped(let v) = result {
        return v
      }
      return ""
    }
    set {
      result = .skipped(newValue)
    }
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1, 6, 2, 3, 4, 5:
      handled = try result.decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
    default:
      handled = false
    }
    return handled
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try result.traverse(visitor: &visitor, start: 1, end: 7)
  }

  public func _protoc_generated_isEqualTo(other: Conformance_ConformanceResponse) -> Bool {
    if result != other.result {return false}
    return true
  }
}

///   This proto includes every type of field in both singular and repeated
///   forms.
public struct Conformance_TestAllTypes: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Conformance_TestAllTypes"}
  public var protoMessageName: String {return "TestAllTypes"}
  public var protoPackageName: String {return "conformance"}
  public var jsonFieldNames: [String: Int] {return [
    "optionalInt32": 1,
    "optionalInt64": 2,
    "optionalUint32": 3,
    "optionalUint64": 4,
    "optionalSint32": 5,
    "optionalSint64": 6,
    "optionalFixed32": 7,
    "optionalFixed64": 8,
    "optionalSfixed32": 9,
    "optionalSfixed64": 10,
    "optionalFloat": 11,
    "optionalDouble": 12,
    "optionalBool": 13,
    "optionalString": 14,
    "optionalBytes": 15,
    "optionalNestedMessage": 18,
    "optionalForeignMessage": 19,
    "optionalNestedEnum": 21,
    "optionalForeignEnum": 22,
    "optionalStringPiece": 24,
    "optionalCord": 25,
    "recursiveMessage": 27,
    "repeatedInt32": 31,
    "repeatedInt64": 32,
    "repeatedUint32": 33,
    "repeatedUint64": 34,
    "repeatedSint32": 35,
    "repeatedSint64": 36,
    "repeatedFixed32": 37,
    "repeatedFixed64": 38,
    "repeatedSfixed32": 39,
    "repeatedSfixed64": 40,
    "repeatedFloat": 41,
    "repeatedDouble": 42,
    "repeatedBool": 43,
    "repeatedString": 44,
    "repeatedBytes": 45,
    "repeatedNestedMessage": 48,
    "repeatedForeignMessage": 49,
    "repeatedNestedEnum": 51,
    "repeatedForeignEnum": 52,
    "repeatedStringPiece": 54,
    "repeatedCord": 55,
    "mapInt32Int32": 56,
    "mapInt64Int64": 57,
    "mapUint32Uint32": 58,
    "mapUint64Uint64": 59,
    "mapSint32Sint32": 60,
    "mapSint64Sint64": 61,
    "mapFixed32Fixed32": 62,
    "mapFixed64Fixed64": 63,
    "mapSfixed32Sfixed32": 64,
    "mapSfixed64Sfixed64": 65,
    "mapInt32Float": 66,
    "mapInt32Double": 67,
    "mapBoolBool": 68,
    "mapStringString": 69,
    "mapStringBytes": 70,
    "mapStringNestedMessage": 71,
    "mapStringForeignMessage": 72,
    "mapStringNestedEnum": 73,
    "mapStringForeignEnum": 74,
    "oneofUint32": 111,
    "oneofNestedMessage": 112,
    "oneofString": 113,
    "oneofBytes": 114,
    "optionalBoolWrapper": 201,
    "optionalInt32Wrapper": 202,
    "optionalInt64Wrapper": 203,
    "optionalUint32Wrapper": 204,
    "optionalUint64Wrapper": 205,
    "optionalFloatWrapper": 206,
    "optionalDoubleWrapper": 207,
    "optionalStringWrapper": 208,
    "optionalBytesWrapper": 209,
    "repeatedBoolWrapper": 211,
    "repeatedInt32Wrapper": 212,
    "repeatedInt64Wrapper": 213,
    "repeatedUint32Wrapper": 214,
    "repeatedUint64Wrapper": 215,
    "repeatedFloatWrapper": 216,
    "repeatedDoubleWrapper": 217,
    "repeatedStringWrapper": 218,
    "repeatedBytesWrapper": 219,
    "optionalDuration": 301,
    "optionalTimestamp": 302,
    "optionalFieldMask": 303,
    "optionalStruct": 304,
    "optionalAny": 305,
    "optionalValue": 306,
    "repeatedDuration": 311,
    "repeatedTimestamp": 312,
    "repeatedFieldmask": 313,
    "repeatedStruct": 324,
    "repeatedAny": 315,
    "repeatedValue": 316,
    "fieldname1": 401,
    "fieldName2": 402,
    "FieldName3": 403,
    "fieldName4": 404,
    "field0name5": 405,
    "field0Name6": 406,
    "fieldName7": 407,
    "FieldName8": 408,
    "fieldName9": 409,
    "FieldName10": 410,
    "FIELDNAME11": 411,
    "FIELDName12": 412,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "optional_int32": 1,
    "optional_int64": 2,
    "optional_uint32": 3,
    "optional_uint64": 4,
    "optional_sint32": 5,
    "optional_sint64": 6,
    "optional_fixed32": 7,
    "optional_fixed64": 8,
    "optional_sfixed32": 9,
    "optional_sfixed64": 10,
    "optional_float": 11,
    "optional_double": 12,
    "optional_bool": 13,
    "optional_string": 14,
    "optional_bytes": 15,
    "optional_nested_message": 18,
    "optional_foreign_message": 19,
    "optional_nested_enum": 21,
    "optional_foreign_enum": 22,
    "optional_string_piece": 24,
    "optional_cord": 25,
    "recursive_message": 27,
    "repeated_int32": 31,
    "repeated_int64": 32,
    "repeated_uint32": 33,
    "repeated_uint64": 34,
    "repeated_sint32": 35,
    "repeated_sint64": 36,
    "repeated_fixed32": 37,
    "repeated_fixed64": 38,
    "repeated_sfixed32": 39,
    "repeated_sfixed64": 40,
    "repeated_float": 41,
    "repeated_double": 42,
    "repeated_bool": 43,
    "repeated_string": 44,
    "repeated_bytes": 45,
    "repeated_nested_message": 48,
    "repeated_foreign_message": 49,
    "repeated_nested_enum": 51,
    "repeated_foreign_enum": 52,
    "repeated_string_piece": 54,
    "repeated_cord": 55,
    "map_int32_int32": 56,
    "map_int64_int64": 57,
    "map_uint32_uint32": 58,
    "map_uint64_uint64": 59,
    "map_sint32_sint32": 60,
    "map_sint64_sint64": 61,
    "map_fixed32_fixed32": 62,
    "map_fixed64_fixed64": 63,
    "map_sfixed32_sfixed32": 64,
    "map_sfixed64_sfixed64": 65,
    "map_int32_float": 66,
    "map_int32_double": 67,
    "map_bool_bool": 68,
    "map_string_string": 69,
    "map_string_bytes": 70,
    "map_string_nested_message": 71,
    "map_string_foreign_message": 72,
    "map_string_nested_enum": 73,
    "map_string_foreign_enum": 74,
    "oneof_uint32": 111,
    "oneof_nested_message": 112,
    "oneof_string": 113,
    "oneof_bytes": 114,
    "optional_bool_wrapper": 201,
    "optional_int32_wrapper": 202,
    "optional_int64_wrapper": 203,
    "optional_uint32_wrapper": 204,
    "optional_uint64_wrapper": 205,
    "optional_float_wrapper": 206,
    "optional_double_wrapper": 207,
    "optional_string_wrapper": 208,
    "optional_bytes_wrapper": 209,
    "repeated_bool_wrapper": 211,
    "repeated_int32_wrapper": 212,
    "repeated_int64_wrapper": 213,
    "repeated_uint32_wrapper": 214,
    "repeated_uint64_wrapper": 215,
    "repeated_float_wrapper": 216,
    "repeated_double_wrapper": 217,
    "repeated_string_wrapper": 218,
    "repeated_bytes_wrapper": 219,
    "optional_duration": 301,
    "optional_timestamp": 302,
    "optional_field_mask": 303,
    "optional_struct": 304,
    "optional_any": 305,
    "optional_value": 306,
    "repeated_duration": 311,
    "repeated_timestamp": 312,
    "repeated_fieldmask": 313,
    "repeated_struct": 324,
    "repeated_any": 315,
    "repeated_value": 316,
    "fieldname1": 401,
    "field_name2": 402,
    "_field_name3": 403,
    "field__name4_": 404,
    "field0name5": 405,
    "field_0_name6": 406,
    "fieldName7": 407,
    "FieldName8": 408,
    "field_Name9": 409,
    "Field_Name10": 410,
    "FIELD_NAME11": 411,
    "FIELD_name12": 412,
  ]}

  private class _StorageClass {
    typealias ProtobufExtendedMessage = Conformance_TestAllTypes
    var _optionalInt32: Int32 = 0
    var _optionalInt64: Int64 = 0
    var _optionalUint32: UInt32 = 0
    var _optionalUint64: UInt64 = 0
    var _optionalSint32: Int32 = 0
    var _optionalSint64: Int64 = 0
    var _optionalFixed32: UInt32 = 0
    var _optionalFixed64: UInt64 = 0
    var _optionalSfixed32: Int32 = 0
    var _optionalSfixed64: Int64 = 0
    var _optionalFloat: Float = 0
    var _optionalDouble: Double = 0
    var _optionalBool: Bool = false
    var _optionalString: String = ""
    var _optionalBytes: Data = Data()
    var _optionalNestedMessage: Conformance_TestAllTypes.NestedMessage? = nil
    var _optionalForeignMessage: Conformance_ForeignMessage? = nil
    var _optionalNestedEnum: Conformance_TestAllTypes.NestedEnum = Conformance_TestAllTypes.NestedEnum.foo
    var _optionalForeignEnum: Conformance_ForeignEnum = Conformance_ForeignEnum.foreignFoo
    var _optionalStringPiece: String = ""
    var _optionalCord: String = ""
    var _recursiveMessage: Conformance_TestAllTypes? = nil
    var _repeatedInt32: [Int32] = []
    var _repeatedInt64: [Int64] = []
    var _repeatedUint32: [UInt32] = []
    var _repeatedUint64: [UInt64] = []
    var _repeatedSint32: [Int32] = []
    var _repeatedSint64: [Int64] = []
    var _repeatedFixed32: [UInt32] = []
    var _repeatedFixed64: [UInt64] = []
    var _repeatedSfixed32: [Int32] = []
    var _repeatedSfixed64: [Int64] = []
    var _repeatedFloat: [Float] = []
    var _repeatedDouble: [Double] = []
    var _repeatedBool: [Bool] = []
    var _repeatedString: [String] = []
    var _repeatedBytes: [Data] = []
    var _repeatedNestedMessage: [Conformance_TestAllTypes.NestedMessage] = []
    var _repeatedForeignMessage: [Conformance_ForeignMessage] = []
    var _repeatedNestedEnum: [Conformance_TestAllTypes.NestedEnum] = []
    var _repeatedForeignEnum: [Conformance_ForeignEnum] = []
    var _repeatedStringPiece: [String] = []
    var _repeatedCord: [String] = []
    var _mapInt32Int32: Dictionary<Int32,Int32> = [:]
    var _mapInt64Int64: Dictionary<Int64,Int64> = [:]
    var _mapUint32Uint32: Dictionary<UInt32,UInt32> = [:]
    var _mapUint64Uint64: Dictionary<UInt64,UInt64> = [:]
    var _mapSint32Sint32: Dictionary<Int32,Int32> = [:]
    var _mapSint64Sint64: Dictionary<Int64,Int64> = [:]
    var _mapFixed32Fixed32: Dictionary<UInt32,UInt32> = [:]
    var _mapFixed64Fixed64: Dictionary<UInt64,UInt64> = [:]
    var _mapSfixed32Sfixed32: Dictionary<Int32,Int32> = [:]
    var _mapSfixed64Sfixed64: Dictionary<Int64,Int64> = [:]
    var _mapInt32Float: Dictionary<Int32,Float> = [:]
    var _mapInt32Double: Dictionary<Int32,Double> = [:]
    var _mapBoolBool: Dictionary<Bool,Bool> = [:]
    var _mapStringString: Dictionary<String,String> = [:]
    var _mapStringBytes: Dictionary<String,Data> = [:]
    var _mapStringNestedMessage: Dictionary<String,Conformance_TestAllTypes.NestedMessage> = [:]
    var _mapStringForeignMessage: Dictionary<String,Conformance_ForeignMessage> = [:]
    var _mapStringNestedEnum: Dictionary<String,Conformance_TestAllTypes.NestedEnum> = [:]
    var _mapStringForeignEnum: Dictionary<String,Conformance_ForeignEnum> = [:]
    var _oneofField = Conformance_TestAllTypes.OneOf_OneofField()
    var _optionalBoolWrapper: Google_Protobuf_BoolValue? = nil
    var _optionalInt32Wrapper: Google_Protobuf_Int32Value? = nil
    var _optionalInt64Wrapper: Google_Protobuf_Int64Value? = nil
    var _optionalUint32Wrapper: Google_Protobuf_UInt32Value? = nil
    var _optionalUint64Wrapper: Google_Protobuf_UInt64Value? = nil
    var _optionalFloatWrapper: Google_Protobuf_FloatValue? = nil
    var _optionalDoubleWrapper: Google_Protobuf_DoubleValue? = nil
    var _optionalStringWrapper: Google_Protobuf_StringValue? = nil
    var _optionalBytesWrapper: Google_Protobuf_BytesValue? = nil
    var _repeatedBoolWrapper: [Google_Protobuf_BoolValue] = []
    var _repeatedInt32Wrapper: [Google_Protobuf_Int32Value] = []
    var _repeatedInt64Wrapper: [Google_Protobuf_Int64Value] = []
    var _repeatedUint32Wrapper: [Google_Protobuf_UInt32Value] = []
    var _repeatedUint64Wrapper: [Google_Protobuf_UInt64Value] = []
    var _repeatedFloatWrapper: [Google_Protobuf_FloatValue] = []
    var _repeatedDoubleWrapper: [Google_Protobuf_DoubleValue] = []
    var _repeatedStringWrapper: [Google_Protobuf_StringValue] = []
    var _repeatedBytesWrapper: [Google_Protobuf_BytesValue] = []
    var _optionalDuration: Google_Protobuf_Duration? = nil
    var _optionalTimestamp: Google_Protobuf_Timestamp? = nil
    var _optionalFieldMask: Google_Protobuf_FieldMask? = nil
    var _optionalStruct: Google_Protobuf_Struct? = nil
    var _optionalAny: Google_Protobuf_Any? = nil
    var _optionalValue: Google_Protobuf_Value? = nil
    var _repeatedDuration: [Google_Protobuf_Duration] = []
    var _repeatedTimestamp: [Google_Protobuf_Timestamp] = []
    var _repeatedFieldmask: [Google_Protobuf_FieldMask] = []
    var _repeatedStruct: [Google_Protobuf_Struct] = []
    var _repeatedAny: [Google_Protobuf_Any] = []
    var _repeatedValue: [Google_Protobuf_Value] = []
    var _fieldname1: Int32 = 0
    var _fieldName2: Int32 = 0
    var _fieldName3: Int32 = 0
    var _field_Name4_: Int32 = 0
    var _field0Name5: Int32 = 0
    var _field0Name6: Int32 = 0
    var _fieldName7: Int32 = 0
    var _fieldName8: Int32 = 0
    var _fieldName9: Int32 = 0
    var _fieldName10: Int32 = 0
    var _fieldName11: Int32 = 0
    var _fieldName12: Int32 = 0

    init() {}

    func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_optionalInt32)
      case 2: handled = try setter.decodeSingularField(fieldType: ProtobufInt64.self, value: &_optionalInt64)
      case 3: handled = try setter.decodeSingularField(fieldType: ProtobufUInt32.self, value: &_optionalUint32)
      case 4: handled = try setter.decodeSingularField(fieldType: ProtobufUInt64.self, value: &_optionalUint64)
      case 5: handled = try setter.decodeSingularField(fieldType: ProtobufSInt32.self, value: &_optionalSint32)
      case 6: handled = try setter.decodeSingularField(fieldType: ProtobufSInt64.self, value: &_optionalSint64)
      case 7: handled = try setter.decodeSingularField(fieldType: ProtobufFixed32.self, value: &_optionalFixed32)
      case 8: handled = try setter.decodeSingularField(fieldType: ProtobufFixed64.self, value: &_optionalFixed64)
      case 9: handled = try setter.decodeSingularField(fieldType: ProtobufSFixed32.self, value: &_optionalSfixed32)
      case 10: handled = try setter.decodeSingularField(fieldType: ProtobufSFixed64.self, value: &_optionalSfixed64)
      case 11: handled = try setter.decodeSingularField(fieldType: ProtobufFloat.self, value: &_optionalFloat)
      case 12: handled = try setter.decodeSingularField(fieldType: ProtobufDouble.self, value: &_optionalDouble)
      case 13: handled = try setter.decodeSingularField(fieldType: ProtobufBool.self, value: &_optionalBool)
      case 14: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &_optionalString)
      case 15: handled = try setter.decodeSingularField(fieldType: ProtobufBytes.self, value: &_optionalBytes)
      case 18: handled = try setter.decodeSingularMessageField(fieldType: Conformance_TestAllTypes.NestedMessage.self, value: &_optionalNestedMessage)
      case 19: handled = try setter.decodeSingularMessageField(fieldType: Conformance_ForeignMessage.self, value: &_optionalForeignMessage)
      case 21: handled = try setter.decodeSingularField(fieldType: Conformance_TestAllTypes.NestedEnum.self, value: &_optionalNestedEnum)
      case 22: handled = try setter.decodeSingularField(fieldType: Conformance_ForeignEnum.self, value: &_optionalForeignEnum)
      case 24: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &_optionalStringPiece)
      case 25: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &_optionalCord)
      case 27: handled = try setter.decodeSingularMessageField(fieldType: Conformance_TestAllTypes.self, value: &_recursiveMessage)
      case 31: handled = try setter.decodePackedField(fieldType: ProtobufInt32.self, value: &_repeatedInt32)
      case 32: handled = try setter.decodePackedField(fieldType: ProtobufInt64.self, value: &_repeatedInt64)
      case 33: handled = try setter.decodePackedField(fieldType: ProtobufUInt32.self, value: &_repeatedUint32)
      case 34: handled = try setter.decodePackedField(fieldType: ProtobufUInt64.self, value: &_repeatedUint64)
      case 35: handled = try setter.decodePackedField(fieldType: ProtobufSInt32.self, value: &_repeatedSint32)
      case 36: handled = try setter.decodePackedField(fieldType: ProtobufSInt64.self, value: &_repeatedSint64)
      case 37: handled = try setter.decodePackedField(fieldType: ProtobufFixed32.self, value: &_repeatedFixed32)
      case 38: handled = try setter.decodePackedField(fieldType: ProtobufFixed64.self, value: &_repeatedFixed64)
      case 39: handled = try setter.decodePackedField(fieldType: ProtobufSFixed32.self, value: &_repeatedSfixed32)
      case 40: handled = try setter.decodePackedField(fieldType: ProtobufSFixed64.self, value: &_repeatedSfixed64)
      case 41: handled = try setter.decodePackedField(fieldType: ProtobufFloat.self, value: &_repeatedFloat)
      case 42: handled = try setter.decodePackedField(fieldType: ProtobufDouble.self, value: &_repeatedDouble)
      case 43: handled = try setter.decodePackedField(fieldType: ProtobufBool.self, value: &_repeatedBool)
      case 44: handled = try setter.decodeRepeatedField(fieldType: ProtobufString.self, value: &_repeatedString)
      case 45: handled = try setter.decodeRepeatedField(fieldType: ProtobufBytes.self, value: &_repeatedBytes)
      case 48: handled = try setter.decodeRepeatedMessageField(fieldType: Conformance_TestAllTypes.NestedMessage.self, value: &_repeatedNestedMessage)
      case 49: handled = try setter.decodeRepeatedMessageField(fieldType: Conformance_ForeignMessage.self, value: &_repeatedForeignMessage)
      case 51: handled = try setter.decodePackedField(fieldType: Conformance_TestAllTypes.NestedEnum.self, value: &_repeatedNestedEnum)
      case 52: handled = try setter.decodePackedField(fieldType: Conformance_ForeignEnum.self, value: &_repeatedForeignEnum)
      case 54: handled = try setter.decodeRepeatedField(fieldType: ProtobufString.self, value: &_repeatedStringPiece)
      case 55: handled = try setter.decodeRepeatedField(fieldType: ProtobufString.self, value: &_repeatedCord)
      case 56: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufInt32,ProtobufInt32>.self, value: &_mapInt32Int32)
      case 57: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufInt64,ProtobufInt64>.self, value: &_mapInt64Int64)
      case 58: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufUInt32,ProtobufUInt32>.self, value: &_mapUint32Uint32)
      case 59: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufUInt64,ProtobufUInt64>.self, value: &_mapUint64Uint64)
      case 60: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufSInt32,ProtobufSInt32>.self, value: &_mapSint32Sint32)
      case 61: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufSInt64,ProtobufSInt64>.self, value: &_mapSint64Sint64)
      case 62: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufFixed32,ProtobufFixed32>.self, value: &_mapFixed32Fixed32)
      case 63: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufFixed64,ProtobufFixed64>.self, value: &_mapFixed64Fixed64)
      case 64: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufSFixed32,ProtobufSFixed32>.self, value: &_mapSfixed32Sfixed32)
      case 65: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufSFixed64,ProtobufSFixed64>.self, value: &_mapSfixed64Sfixed64)
      case 66: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufInt32,ProtobufFloat>.self, value: &_mapInt32Float)
      case 67: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufInt32,ProtobufDouble>.self, value: &_mapInt32Double)
      case 68: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufBool,ProtobufBool>.self, value: &_mapBoolBool)
      case 69: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufString,ProtobufString>.self, value: &_mapStringString)
      case 70: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufString,ProtobufBytes>.self, value: &_mapStringBytes)
      case 71: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufString,Conformance_TestAllTypes.NestedMessage>.self, value: &_mapStringNestedMessage)
      case 72: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufString,Conformance_ForeignMessage>.self, value: &_mapStringForeignMessage)
      case 73: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufString,Conformance_TestAllTypes.NestedEnum>.self, value: &_mapStringNestedEnum)
      case 74: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufString,Conformance_ForeignEnum>.self, value: &_mapStringForeignEnum)
      case 111, 112, 113, 114:
        handled = try _oneofField.decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
      case 201: handled = try setter.decodeSingularMessageField(fieldType: Google_Protobuf_BoolValue.self, value: &_optionalBoolWrapper)
      case 202: handled = try setter.decodeSingularMessageField(fieldType: Google_Protobuf_Int32Value.self, value: &_optionalInt32Wrapper)
      case 203: handled = try setter.decodeSingularMessageField(fieldType: Google_Protobuf_Int64Value.self, value: &_optionalInt64Wrapper)
      case 204: handled = try setter.decodeSingularMessageField(fieldType: Google_Protobuf_UInt32Value.self, value: &_optionalUint32Wrapper)
      case 205: handled = try setter.decodeSingularMessageField(fieldType: Google_Protobuf_UInt64Value.self, value: &_optionalUint64Wrapper)
      case 206: handled = try setter.decodeSingularMessageField(fieldType: Google_Protobuf_FloatValue.self, value: &_optionalFloatWrapper)
      case 207: handled = try setter.decodeSingularMessageField(fieldType: Google_Protobuf_DoubleValue.self, value: &_optionalDoubleWrapper)
      case 208: handled = try setter.decodeSingularMessageField(fieldType: Google_Protobuf_StringValue.self, value: &_optionalStringWrapper)
      case 209: handled = try setter.decodeSingularMessageField(fieldType: Google_Protobuf_BytesValue.self, value: &_optionalBytesWrapper)
      case 211: handled = try setter.decodeRepeatedMessageField(fieldType: Google_Protobuf_BoolValue.self, value: &_repeatedBoolWrapper)
      case 212: handled = try setter.decodeRepeatedMessageField(fieldType: Google_Protobuf_Int32Value.self, value: &_repeatedInt32Wrapper)
      case 213: handled = try setter.decodeRepeatedMessageField(fieldType: Google_Protobuf_Int64Value.self, value: &_repeatedInt64Wrapper)
      case 214: handled = try setter.decodeRepeatedMessageField(fieldType: Google_Protobuf_UInt32Value.self, value: &_repeatedUint32Wrapper)
      case 215: handled = try setter.decodeRepeatedMessageField(fieldType: Google_Protobuf_UInt64Value.self, value: &_repeatedUint64Wrapper)
      case 216: handled = try setter.decodeRepeatedMessageField(fieldType: Google_Protobuf_FloatValue.self, value: &_repeatedFloatWrapper)
      case 217: handled = try setter.decodeRepeatedMessageField(fieldType: Google_Protobuf_DoubleValue.self, value: &_repeatedDoubleWrapper)
      case 218: handled = try setter.decodeRepeatedMessageField(fieldType: Google_Protobuf_StringValue.self, value: &_repeatedStringWrapper)
      case 219: handled = try setter.decodeRepeatedMessageField(fieldType: Google_Protobuf_BytesValue.self, value: &_repeatedBytesWrapper)
      case 301: handled = try setter.decodeSingularMessageField(fieldType: Google_Protobuf_Duration.self, value: &_optionalDuration)
      case 302: handled = try setter.decodeSingularMessageField(fieldType: Google_Protobuf_Timestamp.self, value: &_optionalTimestamp)
      case 303: handled = try setter.decodeSingularMessageField(fieldType: Google_Protobuf_FieldMask.self, value: &_optionalFieldMask)
      case 304: handled = try setter.decodeSingularMessageField(fieldType: Google_Protobuf_Struct.self, value: &_optionalStruct)
      case 305: handled = try setter.decodeSingularMessageField(fieldType: Google_Protobuf_Any.self, value: &_optionalAny)
      case 306: handled = try setter.decodeSingularMessageField(fieldType: Google_Protobuf_Value.self, value: &_optionalValue)
      case 311: handled = try setter.decodeRepeatedMessageField(fieldType: Google_Protobuf_Duration.self, value: &_repeatedDuration)
      case 312: handled = try setter.decodeRepeatedMessageField(fieldType: Google_Protobuf_Timestamp.self, value: &_repeatedTimestamp)
      case 313: handled = try setter.decodeRepeatedMessageField(fieldType: Google_Protobuf_FieldMask.self, value: &_repeatedFieldmask)
      case 324: handled = try setter.decodeRepeatedMessageField(fieldType: Google_Protobuf_Struct.self, value: &_repeatedStruct)
      case 315: handled = try setter.decodeRepeatedMessageField(fieldType: Google_Protobuf_Any.self, value: &_repeatedAny)
      case 316: handled = try setter.decodeRepeatedMessageField(fieldType: Google_Protobuf_Value.self, value: &_repeatedValue)
      case 401: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_fieldname1)
      case 402: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_fieldName2)
      case 403: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_fieldName3)
      case 404: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_field_Name4_)
      case 405: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_field0Name5)
      case 406: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_field0Name6)
      case 407: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_fieldName7)
      case 408: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_fieldName8)
      case 409: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_fieldName9)
      case 410: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_fieldName10)
      case 411: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_fieldName11)
      case 412: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_fieldName12)
      default:
        handled = false
      }
      return handled
    }

    func traverse(visitor: inout ProtobufVisitor) throws {
      if _optionalInt32 != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _optionalInt32, protoFieldNumber: 1, protoFieldName: "optional_int32", jsonFieldName: "optionalInt32", swiftFieldName: "optionalInt32")
      }
      if _optionalInt64 != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt64.self, value: _optionalInt64, protoFieldNumber: 2, protoFieldName: "optional_int64", jsonFieldName: "optionalInt64", swiftFieldName: "optionalInt64")
      }
      if _optionalUint32 != 0 {
        try visitor.visitSingularField(fieldType: ProtobufUInt32.self, value: _optionalUint32, protoFieldNumber: 3, protoFieldName: "optional_uint32", jsonFieldName: "optionalUint32", swiftFieldName: "optionalUint32")
      }
      if _optionalUint64 != 0 {
        try visitor.visitSingularField(fieldType: ProtobufUInt64.self, value: _optionalUint64, protoFieldNumber: 4, protoFieldName: "optional_uint64", jsonFieldName: "optionalUint64", swiftFieldName: "optionalUint64")
      }
      if _optionalSint32 != 0 {
        try visitor.visitSingularField(fieldType: ProtobufSInt32.self, value: _optionalSint32, protoFieldNumber: 5, protoFieldName: "optional_sint32", jsonFieldName: "optionalSint32", swiftFieldName: "optionalSint32")
      }
      if _optionalSint64 != 0 {
        try visitor.visitSingularField(fieldType: ProtobufSInt64.self, value: _optionalSint64, protoFieldNumber: 6, protoFieldName: "optional_sint64", jsonFieldName: "optionalSint64", swiftFieldName: "optionalSint64")
      }
      if _optionalFixed32 != 0 {
        try visitor.visitSingularField(fieldType: ProtobufFixed32.self, value: _optionalFixed32, protoFieldNumber: 7, protoFieldName: "optional_fixed32", jsonFieldName: "optionalFixed32", swiftFieldName: "optionalFixed32")
      }
      if _optionalFixed64 != 0 {
        try visitor.visitSingularField(fieldType: ProtobufFixed64.self, value: _optionalFixed64, protoFieldNumber: 8, protoFieldName: "optional_fixed64", jsonFieldName: "optionalFixed64", swiftFieldName: "optionalFixed64")
      }
      if _optionalSfixed32 != 0 {
        try visitor.visitSingularField(fieldType: ProtobufSFixed32.self, value: _optionalSfixed32, protoFieldNumber: 9, protoFieldName: "optional_sfixed32", jsonFieldName: "optionalSfixed32", swiftFieldName: "optionalSfixed32")
      }
      if _optionalSfixed64 != 0 {
        try visitor.visitSingularField(fieldType: ProtobufSFixed64.self, value: _optionalSfixed64, protoFieldNumber: 10, protoFieldName: "optional_sfixed64", jsonFieldName: "optionalSfixed64", swiftFieldName: "optionalSfixed64")
      }
      if _optionalFloat != 0 {
        try visitor.visitSingularField(fieldType: ProtobufFloat.self, value: _optionalFloat, protoFieldNumber: 11, protoFieldName: "optional_float", jsonFieldName: "optionalFloat", swiftFieldName: "optionalFloat")
      }
      if _optionalDouble != 0 {
        try visitor.visitSingularField(fieldType: ProtobufDouble.self, value: _optionalDouble, protoFieldNumber: 12, protoFieldName: "optional_double", jsonFieldName: "optionalDouble", swiftFieldName: "optionalDouble")
      }
      if _optionalBool != false {
        try visitor.visitSingularField(fieldType: ProtobufBool.self, value: _optionalBool, protoFieldNumber: 13, protoFieldName: "optional_bool", jsonFieldName: "optionalBool", swiftFieldName: "optionalBool")
      }
      if _optionalString != "" {
        try visitor.visitSingularField(fieldType: ProtobufString.self, value: _optionalString, protoFieldNumber: 14, protoFieldName: "optional_string", jsonFieldName: "optionalString", swiftFieldName: "optionalString")
      }
      if _optionalBytes != Data() {
        try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: _optionalBytes, protoFieldNumber: 15, protoFieldName: "optional_bytes", jsonFieldName: "optionalBytes", swiftFieldName: "optionalBytes")
      }
      if let v = _optionalNestedMessage {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 18, protoFieldName: "optional_nested_message", jsonFieldName: "optionalNestedMessage", swiftFieldName: "optionalNestedMessage")
      }
      if let v = _optionalForeignMessage {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 19, protoFieldName: "optional_foreign_message", jsonFieldName: "optionalForeignMessage", swiftFieldName: "optionalForeignMessage")
      }
      if _optionalNestedEnum != Conformance_TestAllTypes.NestedEnum.foo {
        try visitor.visitSingularField(fieldType: Conformance_TestAllTypes.NestedEnum.self, value: _optionalNestedEnum, protoFieldNumber: 21, protoFieldName: "optional_nested_enum", jsonFieldName: "optionalNestedEnum", swiftFieldName: "optionalNestedEnum")
      }
      if _optionalForeignEnum != Conformance_ForeignEnum.foreignFoo {
        try visitor.visitSingularField(fieldType: Conformance_ForeignEnum.self, value: _optionalForeignEnum, protoFieldNumber: 22, protoFieldName: "optional_foreign_enum", jsonFieldName: "optionalForeignEnum", swiftFieldName: "optionalForeignEnum")
      }
      if _optionalStringPiece != "" {
        try visitor.visitSingularField(fieldType: ProtobufString.self, value: _optionalStringPiece, protoFieldNumber: 24, protoFieldName: "optional_string_piece", jsonFieldName: "optionalStringPiece", swiftFieldName: "optionalStringPiece")
      }
      if _optionalCord != "" {
        try visitor.visitSingularField(fieldType: ProtobufString.self, value: _optionalCord, protoFieldNumber: 25, protoFieldName: "optional_cord", jsonFieldName: "optionalCord", swiftFieldName: "optionalCord")
      }
      if let v = _recursiveMessage {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 27, protoFieldName: "recursive_message", jsonFieldName: "recursiveMessage", swiftFieldName: "recursiveMessage")
      }
      if !_repeatedInt32.isEmpty {
        try visitor.visitPackedField(fieldType: ProtobufInt32.self, value: _repeatedInt32, protoFieldNumber: 31, protoFieldName: "repeated_int32", jsonFieldName: "repeatedInt32", swiftFieldName: "repeatedInt32")
      }
      if !_repeatedInt64.isEmpty {
        try visitor.visitPackedField(fieldType: ProtobufInt64.self, value: _repeatedInt64, protoFieldNumber: 32, protoFieldName: "repeated_int64", jsonFieldName: "repeatedInt64", swiftFieldName: "repeatedInt64")
      }
      if !_repeatedUint32.isEmpty {
        try visitor.visitPackedField(fieldType: ProtobufUInt32.self, value: _repeatedUint32, protoFieldNumber: 33, protoFieldName: "repeated_uint32", jsonFieldName: "repeatedUint32", swiftFieldName: "repeatedUint32")
      }
      if !_repeatedUint64.isEmpty {
        try visitor.visitPackedField(fieldType: ProtobufUInt64.self, value: _repeatedUint64, protoFieldNumber: 34, protoFieldName: "repeated_uint64", jsonFieldName: "repeatedUint64", swiftFieldName: "repeatedUint64")
      }
      if !_repeatedSint32.isEmpty {
        try visitor.visitPackedField(fieldType: ProtobufSInt32.self, value: _repeatedSint32, protoFieldNumber: 35, protoFieldName: "repeated_sint32", jsonFieldName: "repeatedSint32", swiftFieldName: "repeatedSint32")
      }
      if !_repeatedSint64.isEmpty {
        try visitor.visitPackedField(fieldType: ProtobufSInt64.self, value: _repeatedSint64, protoFieldNumber: 36, protoFieldName: "repeated_sint64", jsonFieldName: "repeatedSint64", swiftFieldName: "repeatedSint64")
      }
      if !_repeatedFixed32.isEmpty {
        try visitor.visitPackedField(fieldType: ProtobufFixed32.self, value: _repeatedFixed32, protoFieldNumber: 37, protoFieldName: "repeated_fixed32", jsonFieldName: "repeatedFixed32", swiftFieldName: "repeatedFixed32")
      }
      if !_repeatedFixed64.isEmpty {
        try visitor.visitPackedField(fieldType: ProtobufFixed64.self, value: _repeatedFixed64, protoFieldNumber: 38, protoFieldName: "repeated_fixed64", jsonFieldName: "repeatedFixed64", swiftFieldName: "repeatedFixed64")
      }
      if !_repeatedSfixed32.isEmpty {
        try visitor.visitPackedField(fieldType: ProtobufSFixed32.self, value: _repeatedSfixed32, protoFieldNumber: 39, protoFieldName: "repeated_sfixed32", jsonFieldName: "repeatedSfixed32", swiftFieldName: "repeatedSfixed32")
      }
      if !_repeatedSfixed64.isEmpty {
        try visitor.visitPackedField(fieldType: ProtobufSFixed64.self, value: _repeatedSfixed64, protoFieldNumber: 40, protoFieldName: "repeated_sfixed64", jsonFieldName: "repeatedSfixed64", swiftFieldName: "repeatedSfixed64")
      }
      if !_repeatedFloat.isEmpty {
        try visitor.visitPackedField(fieldType: ProtobufFloat.self, value: _repeatedFloat, protoFieldNumber: 41, protoFieldName: "repeated_float", jsonFieldName: "repeatedFloat", swiftFieldName: "repeatedFloat")
      }
      if !_repeatedDouble.isEmpty {
        try visitor.visitPackedField(fieldType: ProtobufDouble.self, value: _repeatedDouble, protoFieldNumber: 42, protoFieldName: "repeated_double", jsonFieldName: "repeatedDouble", swiftFieldName: "repeatedDouble")
      }
      if !_repeatedBool.isEmpty {
        try visitor.visitPackedField(fieldType: ProtobufBool.self, value: _repeatedBool, protoFieldNumber: 43, protoFieldName: "repeated_bool", jsonFieldName: "repeatedBool", swiftFieldName: "repeatedBool")
      }
      if !_repeatedString.isEmpty {
        try visitor.visitRepeatedField(fieldType: ProtobufString.self, value: _repeatedString, protoFieldNumber: 44, protoFieldName: "repeated_string", jsonFieldName: "repeatedString", swiftFieldName: "repeatedString")
      }
      if !_repeatedBytes.isEmpty {
        try visitor.visitRepeatedField(fieldType: ProtobufBytes.self, value: _repeatedBytes, protoFieldNumber: 45, protoFieldName: "repeated_bytes", jsonFieldName: "repeatedBytes", swiftFieldName: "repeatedBytes")
      }
      if !_repeatedNestedMessage.isEmpty {
        try visitor.visitRepeatedMessageField(value: _repeatedNestedMessage, protoFieldNumber: 48, protoFieldName: "repeated_nested_message", jsonFieldName: "repeatedNestedMessage", swiftFieldName: "repeatedNestedMessage")
      }
      if !_repeatedForeignMessage.isEmpty {
        try visitor.visitRepeatedMessageField(value: _repeatedForeignMessage, protoFieldNumber: 49, protoFieldName: "repeated_foreign_message", jsonFieldName: "repeatedForeignMessage", swiftFieldName: "repeatedForeignMessage")
      }
      if !_repeatedNestedEnum.isEmpty {
        try visitor.visitPackedField(fieldType: Conformance_TestAllTypes.NestedEnum.self, value: _repeatedNestedEnum, protoFieldNumber: 51, protoFieldName: "repeated_nested_enum", jsonFieldName: "repeatedNestedEnum", swiftFieldName: "repeatedNestedEnum")
      }
      if !_repeatedForeignEnum.isEmpty {
        try visitor.visitPackedField(fieldType: Conformance_ForeignEnum.self, value: _repeatedForeignEnum, protoFieldNumber: 52, protoFieldName: "repeated_foreign_enum", jsonFieldName: "repeatedForeignEnum", swiftFieldName: "repeatedForeignEnum")
      }
      if !_repeatedStringPiece.isEmpty {
        try visitor.visitRepeatedField(fieldType: ProtobufString.self, value: _repeatedStringPiece, protoFieldNumber: 54, protoFieldName: "repeated_string_piece", jsonFieldName: "repeatedStringPiece", swiftFieldName: "repeatedStringPiece")
      }
      if !_repeatedCord.isEmpty {
        try visitor.visitRepeatedField(fieldType: ProtobufString.self, value: _repeatedCord, protoFieldNumber: 55, protoFieldName: "repeated_cord", jsonFieldName: "repeatedCord", swiftFieldName: "repeatedCord")
      }
      if !_mapInt32Int32.isEmpty {
        try visitor.visitMapField(fieldType: ProtobufMap<ProtobufInt32,ProtobufInt32>.self, value: _mapInt32Int32, protoFieldNumber: 56, protoFieldName: "map_int32_int32", jsonFieldName: "mapInt32Int32", swiftFieldName: "mapInt32Int32")
      }
      if !_mapInt64Int64.isEmpty {
        try visitor.visitMapField(fieldType: ProtobufMap<ProtobufInt64,ProtobufInt64>.self, value: _mapInt64Int64, protoFieldNumber: 57, protoFieldName: "map_int64_int64", jsonFieldName: "mapInt64Int64", swiftFieldName: "mapInt64Int64")
      }
      if !_mapUint32Uint32.isEmpty {
        try visitor.visitMapField(fieldType: ProtobufMap<ProtobufUInt32,ProtobufUInt32>.self, value: _mapUint32Uint32, protoFieldNumber: 58, protoFieldName: "map_uint32_uint32", jsonFieldName: "mapUint32Uint32", swiftFieldName: "mapUint32Uint32")
      }
      if !_mapUint64Uint64.isEmpty {
        try visitor.visitMapField(fieldType: ProtobufMap<ProtobufUInt64,ProtobufUInt64>.self, value: _mapUint64Uint64, protoFieldNumber: 59, protoFieldName: "map_uint64_uint64", jsonFieldName: "mapUint64Uint64", swiftFieldName: "mapUint64Uint64")
      }
      if !_mapSint32Sint32.isEmpty {
        try visitor.visitMapField(fieldType: ProtobufMap<ProtobufSInt32,ProtobufSInt32>.self, value: _mapSint32Sint32, protoFieldNumber: 60, protoFieldName: "map_sint32_sint32", jsonFieldName: "mapSint32Sint32", swiftFieldName: "mapSint32Sint32")
      }
      if !_mapSint64Sint64.isEmpty {
        try visitor.visitMapField(fieldType: ProtobufMap<ProtobufSInt64,ProtobufSInt64>.self, value: _mapSint64Sint64, protoFieldNumber: 61, protoFieldName: "map_sint64_sint64", jsonFieldName: "mapSint64Sint64", swiftFieldName: "mapSint64Sint64")
      }
      if !_mapFixed32Fixed32.isEmpty {
        try visitor.visitMapField(fieldType: ProtobufMap<ProtobufFixed32,ProtobufFixed32>.self, value: _mapFixed32Fixed32, protoFieldNumber: 62, protoFieldName: "map_fixed32_fixed32", jsonFieldName: "mapFixed32Fixed32", swiftFieldName: "mapFixed32Fixed32")
      }
      if !_mapFixed64Fixed64.isEmpty {
        try visitor.visitMapField(fieldType: ProtobufMap<ProtobufFixed64,ProtobufFixed64>.self, value: _mapFixed64Fixed64, protoFieldNumber: 63, protoFieldName: "map_fixed64_fixed64", jsonFieldName: "mapFixed64Fixed64", swiftFieldName: "mapFixed64Fixed64")
      }
      if !_mapSfixed32Sfixed32.isEmpty {
        try visitor.visitMapField(fieldType: ProtobufMap<ProtobufSFixed32,ProtobufSFixed32>.self, value: _mapSfixed32Sfixed32, protoFieldNumber: 64, protoFieldName: "map_sfixed32_sfixed32", jsonFieldName: "mapSfixed32Sfixed32", swiftFieldName: "mapSfixed32Sfixed32")
      }
      if !_mapSfixed64Sfixed64.isEmpty {
        try visitor.visitMapField(fieldType: ProtobufMap<ProtobufSFixed64,ProtobufSFixed64>.self, value: _mapSfixed64Sfixed64, protoFieldNumber: 65, protoFieldName: "map_sfixed64_sfixed64", jsonFieldName: "mapSfixed64Sfixed64", swiftFieldName: "mapSfixed64Sfixed64")
      }
      if !_mapInt32Float.isEmpty {
        try visitor.visitMapField(fieldType: ProtobufMap<ProtobufInt32,ProtobufFloat>.self, value: _mapInt32Float, protoFieldNumber: 66, protoFieldName: "map_int32_float", jsonFieldName: "mapInt32Float", swiftFieldName: "mapInt32Float")
      }
      if !_mapInt32Double.isEmpty {
        try visitor.visitMapField(fieldType: ProtobufMap<ProtobufInt32,ProtobufDouble>.self, value: _mapInt32Double, protoFieldNumber: 67, protoFieldName: "map_int32_double", jsonFieldName: "mapInt32Double", swiftFieldName: "mapInt32Double")
      }
      if !_mapBoolBool.isEmpty {
        try visitor.visitMapField(fieldType: ProtobufMap<ProtobufBool,ProtobufBool>.self, value: _mapBoolBool, protoFieldNumber: 68, protoFieldName: "map_bool_bool", jsonFieldName: "mapBoolBool", swiftFieldName: "mapBoolBool")
      }
      if !_mapStringString.isEmpty {
        try visitor.visitMapField(fieldType: ProtobufMap<ProtobufString,ProtobufString>.self, value: _mapStringString, protoFieldNumber: 69, protoFieldName: "map_string_string", jsonFieldName: "mapStringString", swiftFieldName: "mapStringString")
      }
      if !_mapStringBytes.isEmpty {
        try visitor.visitMapField(fieldType: ProtobufMap<ProtobufString,ProtobufBytes>.self, value: _mapStringBytes, protoFieldNumber: 70, protoFieldName: "map_string_bytes", jsonFieldName: "mapStringBytes", swiftFieldName: "mapStringBytes")
      }
      if !_mapStringNestedMessage.isEmpty {
        try visitor.visitMapField(fieldType: ProtobufMap<ProtobufString,Conformance_TestAllTypes.NestedMessage>.self, value: _mapStringNestedMessage, protoFieldNumber: 71, protoFieldName: "map_string_nested_message", jsonFieldName: "mapStringNestedMessage", swiftFieldName: "mapStringNestedMessage")
      }
      if !_mapStringForeignMessage.isEmpty {
        try visitor.visitMapField(fieldType: ProtobufMap<ProtobufString,Conformance_ForeignMessage>.self, value: _mapStringForeignMessage, protoFieldNumber: 72, protoFieldName: "map_string_foreign_message", jsonFieldName: "mapStringForeignMessage", swiftFieldName: "mapStringForeignMessage")
      }
      if !_mapStringNestedEnum.isEmpty {
        try visitor.visitMapField(fieldType: ProtobufMap<ProtobufString,Conformance_TestAllTypes.NestedEnum>.self, value: _mapStringNestedEnum, protoFieldNumber: 73, protoFieldName: "map_string_nested_enum", jsonFieldName: "mapStringNestedEnum", swiftFieldName: "mapStringNestedEnum")
      }
      if !_mapStringForeignEnum.isEmpty {
        try visitor.visitMapField(fieldType: ProtobufMap<ProtobufString,Conformance_ForeignEnum>.self, value: _mapStringForeignEnum, protoFieldNumber: 74, protoFieldName: "map_string_foreign_enum", jsonFieldName: "mapStringForeignEnum", swiftFieldName: "mapStringForeignEnum")
      }
      try _oneofField.traverse(visitor: &visitor, start: 111, end: 115)
      if let v = _optionalBoolWrapper {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 201, protoFieldName: "optional_bool_wrapper", jsonFieldName: "optionalBoolWrapper", swiftFieldName: "optionalBoolWrapper")
      }
      if let v = _optionalInt32Wrapper {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 202, protoFieldName: "optional_int32_wrapper", jsonFieldName: "optionalInt32Wrapper", swiftFieldName: "optionalInt32Wrapper")
      }
      if let v = _optionalInt64Wrapper {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 203, protoFieldName: "optional_int64_wrapper", jsonFieldName: "optionalInt64Wrapper", swiftFieldName: "optionalInt64Wrapper")
      }
      if let v = _optionalUint32Wrapper {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 204, protoFieldName: "optional_uint32_wrapper", jsonFieldName: "optionalUint32Wrapper", swiftFieldName: "optionalUint32Wrapper")
      }
      if let v = _optionalUint64Wrapper {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 205, protoFieldName: "optional_uint64_wrapper", jsonFieldName: "optionalUint64Wrapper", swiftFieldName: "optionalUint64Wrapper")
      }
      if let v = _optionalFloatWrapper {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 206, protoFieldName: "optional_float_wrapper", jsonFieldName: "optionalFloatWrapper", swiftFieldName: "optionalFloatWrapper")
      }
      if let v = _optionalDoubleWrapper {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 207, protoFieldName: "optional_double_wrapper", jsonFieldName: "optionalDoubleWrapper", swiftFieldName: "optionalDoubleWrapper")
      }
      if let v = _optionalStringWrapper {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 208, protoFieldName: "optional_string_wrapper", jsonFieldName: "optionalStringWrapper", swiftFieldName: "optionalStringWrapper")
      }
      if let v = _optionalBytesWrapper {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 209, protoFieldName: "optional_bytes_wrapper", jsonFieldName: "optionalBytesWrapper", swiftFieldName: "optionalBytesWrapper")
      }
      if !_repeatedBoolWrapper.isEmpty {
        try visitor.visitRepeatedMessageField(value: _repeatedBoolWrapper, protoFieldNumber: 211, protoFieldName: "repeated_bool_wrapper", jsonFieldName: "repeatedBoolWrapper", swiftFieldName: "repeatedBoolWrapper")
      }
      if !_repeatedInt32Wrapper.isEmpty {
        try visitor.visitRepeatedMessageField(value: _repeatedInt32Wrapper, protoFieldNumber: 212, protoFieldName: "repeated_int32_wrapper", jsonFieldName: "repeatedInt32Wrapper", swiftFieldName: "repeatedInt32Wrapper")
      }
      if !_repeatedInt64Wrapper.isEmpty {
        try visitor.visitRepeatedMessageField(value: _repeatedInt64Wrapper, protoFieldNumber: 213, protoFieldName: "repeated_int64_wrapper", jsonFieldName: "repeatedInt64Wrapper", swiftFieldName: "repeatedInt64Wrapper")
      }
      if !_repeatedUint32Wrapper.isEmpty {
        try visitor.visitRepeatedMessageField(value: _repeatedUint32Wrapper, protoFieldNumber: 214, protoFieldName: "repeated_uint32_wrapper", jsonFieldName: "repeatedUint32Wrapper", swiftFieldName: "repeatedUint32Wrapper")
      }
      if !_repeatedUint64Wrapper.isEmpty {
        try visitor.visitRepeatedMessageField(value: _repeatedUint64Wrapper, protoFieldNumber: 215, protoFieldName: "repeated_uint64_wrapper", jsonFieldName: "repeatedUint64Wrapper", swiftFieldName: "repeatedUint64Wrapper")
      }
      if !_repeatedFloatWrapper.isEmpty {
        try visitor.visitRepeatedMessageField(value: _repeatedFloatWrapper, protoFieldNumber: 216, protoFieldName: "repeated_float_wrapper", jsonFieldName: "repeatedFloatWrapper", swiftFieldName: "repeatedFloatWrapper")
      }
      if !_repeatedDoubleWrapper.isEmpty {
        try visitor.visitRepeatedMessageField(value: _repeatedDoubleWrapper, protoFieldNumber: 217, protoFieldName: "repeated_double_wrapper", jsonFieldName: "repeatedDoubleWrapper", swiftFieldName: "repeatedDoubleWrapper")
      }
      if !_repeatedStringWrapper.isEmpty {
        try visitor.visitRepeatedMessageField(value: _repeatedStringWrapper, protoFieldNumber: 218, protoFieldName: "repeated_string_wrapper", jsonFieldName: "repeatedStringWrapper", swiftFieldName: "repeatedStringWrapper")
      }
      if !_repeatedBytesWrapper.isEmpty {
        try visitor.visitRepeatedMessageField(value: _repeatedBytesWrapper, protoFieldNumber: 219, protoFieldName: "repeated_bytes_wrapper", jsonFieldName: "repeatedBytesWrapper", swiftFieldName: "repeatedBytesWrapper")
      }
      if let v = _optionalDuration {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 301, protoFieldName: "optional_duration", jsonFieldName: "optionalDuration", swiftFieldName: "optionalDuration")
      }
      if let v = _optionalTimestamp {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 302, protoFieldName: "optional_timestamp", jsonFieldName: "optionalTimestamp", swiftFieldName: "optionalTimestamp")
      }
      if let v = _optionalFieldMask {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 303, protoFieldName: "optional_field_mask", jsonFieldName: "optionalFieldMask", swiftFieldName: "optionalFieldMask")
      }
      if let v = _optionalStruct {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 304, protoFieldName: "optional_struct", jsonFieldName: "optionalStruct", swiftFieldName: "optionalStruct")
      }
      if let v = _optionalAny {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 305, protoFieldName: "optional_any", jsonFieldName: "optionalAny", swiftFieldName: "optionalAny")
      }
      if let v = _optionalValue {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 306, protoFieldName: "optional_value", jsonFieldName: "optionalValue", swiftFieldName: "optionalValue")
      }
      if !_repeatedDuration.isEmpty {
        try visitor.visitRepeatedMessageField(value: _repeatedDuration, protoFieldNumber: 311, protoFieldName: "repeated_duration", jsonFieldName: "repeatedDuration", swiftFieldName: "repeatedDuration")
      }
      if !_repeatedTimestamp.isEmpty {
        try visitor.visitRepeatedMessageField(value: _repeatedTimestamp, protoFieldNumber: 312, protoFieldName: "repeated_timestamp", jsonFieldName: "repeatedTimestamp", swiftFieldName: "repeatedTimestamp")
      }
      if !_repeatedFieldmask.isEmpty {
        try visitor.visitRepeatedMessageField(value: _repeatedFieldmask, protoFieldNumber: 313, protoFieldName: "repeated_fieldmask", jsonFieldName: "repeatedFieldmask", swiftFieldName: "repeatedFieldmask")
      }
      if !_repeatedAny.isEmpty {
        try visitor.visitRepeatedMessageField(value: _repeatedAny, protoFieldNumber: 315, protoFieldName: "repeated_any", jsonFieldName: "repeatedAny", swiftFieldName: "repeatedAny")
      }
      if !_repeatedValue.isEmpty {
        try visitor.visitRepeatedMessageField(value: _repeatedValue, protoFieldNumber: 316, protoFieldName: "repeated_value", jsonFieldName: "repeatedValue", swiftFieldName: "repeatedValue")
      }
      if !_repeatedStruct.isEmpty {
        try visitor.visitRepeatedMessageField(value: _repeatedStruct, protoFieldNumber: 324, protoFieldName: "repeated_struct", jsonFieldName: "repeatedStruct", swiftFieldName: "repeatedStruct")
      }
      if _fieldname1 != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _fieldname1, protoFieldNumber: 401, protoFieldName: "fieldname1", jsonFieldName: "fieldname1", swiftFieldName: "fieldname1")
      }
      if _fieldName2 != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _fieldName2, protoFieldNumber: 402, protoFieldName: "field_name2", jsonFieldName: "fieldName2", swiftFieldName: "fieldName2")
      }
      if _fieldName3 != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _fieldName3, protoFieldNumber: 403, protoFieldName: "_field_name3", jsonFieldName: "FieldName3", swiftFieldName: "fieldName3")
      }
      if _field_Name4_ != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _field_Name4_, protoFieldNumber: 404, protoFieldName: "field__name4_", jsonFieldName: "fieldName4", swiftFieldName: "field_Name4_")
      }
      if _field0Name5 != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _field0Name5, protoFieldNumber: 405, protoFieldName: "field0name5", jsonFieldName: "field0name5", swiftFieldName: "field0Name5")
      }
      if _field0Name6 != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _field0Name6, protoFieldNumber: 406, protoFieldName: "field_0_name6", jsonFieldName: "field0Name6", swiftFieldName: "field0Name6")
      }
      if _fieldName7 != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _fieldName7, protoFieldNumber: 407, protoFieldName: "fieldName7", jsonFieldName: "fieldName7", swiftFieldName: "fieldName7")
      }
      if _fieldName8 != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _fieldName8, protoFieldNumber: 408, protoFieldName: "FieldName8", jsonFieldName: "FieldName8", swiftFieldName: "fieldName8")
      }
      if _fieldName9 != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _fieldName9, protoFieldNumber: 409, protoFieldName: "field_Name9", jsonFieldName: "fieldName9", swiftFieldName: "fieldName9")
      }
      if _fieldName10 != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _fieldName10, protoFieldNumber: 410, protoFieldName: "Field_Name10", jsonFieldName: "FieldName10", swiftFieldName: "fieldName10")
      }
      if _fieldName11 != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _fieldName11, protoFieldNumber: 411, protoFieldName: "FIELD_NAME11", jsonFieldName: "FIELDNAME11", swiftFieldName: "fieldName11")
      }
      if _fieldName12 != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _fieldName12, protoFieldNumber: 412, protoFieldName: "FIELD_name12", jsonFieldName: "FIELDName12", swiftFieldName: "fieldName12")
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _optionalInt32 != other._optionalInt32 {return false}
      if _optionalInt64 != other._optionalInt64 {return false}
      if _optionalUint32 != other._optionalUint32 {return false}
      if _optionalUint64 != other._optionalUint64 {return false}
      if _optionalSint32 != other._optionalSint32 {return false}
      if _optionalSint64 != other._optionalSint64 {return false}
      if _optionalFixed32 != other._optionalFixed32 {return false}
      if _optionalFixed64 != other._optionalFixed64 {return false}
      if _optionalSfixed32 != other._optionalSfixed32 {return false}
      if _optionalSfixed64 != other._optionalSfixed64 {return false}
      if _optionalFloat != other._optionalFloat {return false}
      if _optionalDouble != other._optionalDouble {return false}
      if _optionalBool != other._optionalBool {return false}
      if _optionalString != other._optionalString {return false}
      if _optionalBytes != other._optionalBytes {return false}
      if _optionalNestedMessage != other._optionalNestedMessage {return false}
      if _optionalForeignMessage != other._optionalForeignMessage {return false}
      if _optionalNestedEnum != other._optionalNestedEnum {return false}
      if _optionalForeignEnum != other._optionalForeignEnum {return false}
      if _optionalStringPiece != other._optionalStringPiece {return false}
      if _optionalCord != other._optionalCord {return false}
      if _recursiveMessage != other._recursiveMessage {return false}
      if _repeatedInt32 != other._repeatedInt32 {return false}
      if _repeatedInt64 != other._repeatedInt64 {return false}
      if _repeatedUint32 != other._repeatedUint32 {return false}
      if _repeatedUint64 != other._repeatedUint64 {return false}
      if _repeatedSint32 != other._repeatedSint32 {return false}
      if _repeatedSint64 != other._repeatedSint64 {return false}
      if _repeatedFixed32 != other._repeatedFixed32 {return false}
      if _repeatedFixed64 != other._repeatedFixed64 {return false}
      if _repeatedSfixed32 != other._repeatedSfixed32 {return false}
      if _repeatedSfixed64 != other._repeatedSfixed64 {return false}
      if _repeatedFloat != other._repeatedFloat {return false}
      if _repeatedDouble != other._repeatedDouble {return false}
      if _repeatedBool != other._repeatedBool {return false}
      if _repeatedString != other._repeatedString {return false}
      if _repeatedBytes != other._repeatedBytes {return false}
      if _repeatedNestedMessage != other._repeatedNestedMessage {return false}
      if _repeatedForeignMessage != other._repeatedForeignMessage {return false}
      if _repeatedNestedEnum != other._repeatedNestedEnum {return false}
      if _repeatedForeignEnum != other._repeatedForeignEnum {return false}
      if _repeatedStringPiece != other._repeatedStringPiece {return false}
      if _repeatedCord != other._repeatedCord {return false}
      if _mapInt32Int32 != other._mapInt32Int32 {return false}
      if _mapInt64Int64 != other._mapInt64Int64 {return false}
      if _mapUint32Uint32 != other._mapUint32Uint32 {return false}
      if _mapUint64Uint64 != other._mapUint64Uint64 {return false}
      if _mapSint32Sint32 != other._mapSint32Sint32 {return false}
      if _mapSint64Sint64 != other._mapSint64Sint64 {return false}
      if _mapFixed32Fixed32 != other._mapFixed32Fixed32 {return false}
      if _mapFixed64Fixed64 != other._mapFixed64Fixed64 {return false}
      if _mapSfixed32Sfixed32 != other._mapSfixed32Sfixed32 {return false}
      if _mapSfixed64Sfixed64 != other._mapSfixed64Sfixed64 {return false}
      if _mapInt32Float != other._mapInt32Float {return false}
      if _mapInt32Double != other._mapInt32Double {return false}
      if _mapBoolBool != other._mapBoolBool {return false}
      if _mapStringString != other._mapStringString {return false}
      if _mapStringBytes != other._mapStringBytes {return false}
      if _mapStringNestedMessage != other._mapStringNestedMessage {return false}
      if _mapStringForeignMessage != other._mapStringForeignMessage {return false}
      if _mapStringNestedEnum != other._mapStringNestedEnum {return false}
      if _mapStringForeignEnum != other._mapStringForeignEnum {return false}
      if _oneofField != other._oneofField {return false}
      if _optionalBoolWrapper != other._optionalBoolWrapper {return false}
      if _optionalInt32Wrapper != other._optionalInt32Wrapper {return false}
      if _optionalInt64Wrapper != other._optionalInt64Wrapper {return false}
      if _optionalUint32Wrapper != other._optionalUint32Wrapper {return false}
      if _optionalUint64Wrapper != other._optionalUint64Wrapper {return false}
      if _optionalFloatWrapper != other._optionalFloatWrapper {return false}
      if _optionalDoubleWrapper != other._optionalDoubleWrapper {return false}
      if _optionalStringWrapper != other._optionalStringWrapper {return false}
      if _optionalBytesWrapper != other._optionalBytesWrapper {return false}
      if _repeatedBoolWrapper != other._repeatedBoolWrapper {return false}
      if _repeatedInt32Wrapper != other._repeatedInt32Wrapper {return false}
      if _repeatedInt64Wrapper != other._repeatedInt64Wrapper {return false}
      if _repeatedUint32Wrapper != other._repeatedUint32Wrapper {return false}
      if _repeatedUint64Wrapper != other._repeatedUint64Wrapper {return false}
      if _repeatedFloatWrapper != other._repeatedFloatWrapper {return false}
      if _repeatedDoubleWrapper != other._repeatedDoubleWrapper {return false}
      if _repeatedStringWrapper != other._repeatedStringWrapper {return false}
      if _repeatedBytesWrapper != other._repeatedBytesWrapper {return false}
      if _optionalDuration != other._optionalDuration {return false}
      if _optionalTimestamp != other._optionalTimestamp {return false}
      if _optionalFieldMask != other._optionalFieldMask {return false}
      if _optionalStruct != other._optionalStruct {return false}
      if _optionalAny != other._optionalAny {return false}
      if _optionalValue != other._optionalValue {return false}
      if _repeatedDuration != other._repeatedDuration {return false}
      if _repeatedTimestamp != other._repeatedTimestamp {return false}
      if _repeatedFieldmask != other._repeatedFieldmask {return false}
      if _repeatedStruct != other._repeatedStruct {return false}
      if _repeatedAny != other._repeatedAny {return false}
      if _repeatedValue != other._repeatedValue {return false}
      if _fieldname1 != other._fieldname1 {return false}
      if _fieldName2 != other._fieldName2 {return false}
      if _fieldName3 != other._fieldName3 {return false}
      if _field_Name4_ != other._field_Name4_ {return false}
      if _field0Name5 != other._field0Name5 {return false}
      if _field0Name6 != other._field0Name6 {return false}
      if _fieldName7 != other._fieldName7 {return false}
      if _fieldName8 != other._fieldName8 {return false}
      if _fieldName9 != other._fieldName9 {return false}
      if _fieldName10 != other._fieldName10 {return false}
      if _fieldName11 != other._fieldName11 {return false}
      if _fieldName12 != other._fieldName12 {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._optionalInt32 = _optionalInt32
      clone._optionalInt64 = _optionalInt64
      clone._optionalUint32 = _optionalUint32
      clone._optionalUint64 = _optionalUint64
      clone._optionalSint32 = _optionalSint32
      clone._optionalSint64 = _optionalSint64
      clone._optionalFixed32 = _optionalFixed32
      clone._optionalFixed64 = _optionalFixed64
      clone._optionalSfixed32 = _optionalSfixed32
      clone._optionalSfixed64 = _optionalSfixed64
      clone._optionalFloat = _optionalFloat
      clone._optionalDouble = _optionalDouble
      clone._optionalBool = _optionalBool
      clone._optionalString = _optionalString
      clone._optionalBytes = _optionalBytes
      clone._optionalNestedMessage = _optionalNestedMessage
      clone._optionalForeignMessage = _optionalForeignMessage
      clone._optionalNestedEnum = _optionalNestedEnum
      clone._optionalForeignEnum = _optionalForeignEnum
      clone._optionalStringPiece = _optionalStringPiece
      clone._optionalCord = _optionalCord
      clone._recursiveMessage = _recursiveMessage
      clone._repeatedInt32 = _repeatedInt32
      clone._repeatedInt64 = _repeatedInt64
      clone._repeatedUint32 = _repeatedUint32
      clone._repeatedUint64 = _repeatedUint64
      clone._repeatedSint32 = _repeatedSint32
      clone._repeatedSint64 = _repeatedSint64
      clone._repeatedFixed32 = _repeatedFixed32
      clone._repeatedFixed64 = _repeatedFixed64
      clone._repeatedSfixed32 = _repeatedSfixed32
      clone._repeatedSfixed64 = _repeatedSfixed64
      clone._repeatedFloat = _repeatedFloat
      clone._repeatedDouble = _repeatedDouble
      clone._repeatedBool = _repeatedBool
      clone._repeatedString = _repeatedString
      clone._repeatedBytes = _repeatedBytes
      clone._repeatedNestedMessage = _repeatedNestedMessage
      clone._repeatedForeignMessage = _repeatedForeignMessage
      clone._repeatedNestedEnum = _repeatedNestedEnum
      clone._repeatedForeignEnum = _repeatedForeignEnum
      clone._repeatedStringPiece = _repeatedStringPiece
      clone._repeatedCord = _repeatedCord
      clone._mapInt32Int32 = _mapInt32Int32
      clone._mapInt64Int64 = _mapInt64Int64
      clone._mapUint32Uint32 = _mapUint32Uint32
      clone._mapUint64Uint64 = _mapUint64Uint64
      clone._mapSint32Sint32 = _mapSint32Sint32
      clone._mapSint64Sint64 = _mapSint64Sint64
      clone._mapFixed32Fixed32 = _mapFixed32Fixed32
      clone._mapFixed64Fixed64 = _mapFixed64Fixed64
      clone._mapSfixed32Sfixed32 = _mapSfixed32Sfixed32
      clone._mapSfixed64Sfixed64 = _mapSfixed64Sfixed64
      clone._mapInt32Float = _mapInt32Float
      clone._mapInt32Double = _mapInt32Double
      clone._mapBoolBool = _mapBoolBool
      clone._mapStringString = _mapStringString
      clone._mapStringBytes = _mapStringBytes
      clone._mapStringNestedMessage = _mapStringNestedMessage
      clone._mapStringForeignMessage = _mapStringForeignMessage
      clone._mapStringNestedEnum = _mapStringNestedEnum
      clone._mapStringForeignEnum = _mapStringForeignEnum
      clone._oneofField = _oneofField
      clone._optionalBoolWrapper = _optionalBoolWrapper
      clone._optionalInt32Wrapper = _optionalInt32Wrapper
      clone._optionalInt64Wrapper = _optionalInt64Wrapper
      clone._optionalUint32Wrapper = _optionalUint32Wrapper
      clone._optionalUint64Wrapper = _optionalUint64Wrapper
      clone._optionalFloatWrapper = _optionalFloatWrapper
      clone._optionalDoubleWrapper = _optionalDoubleWrapper
      clone._optionalStringWrapper = _optionalStringWrapper
      clone._optionalBytesWrapper = _optionalBytesWrapper
      clone._repeatedBoolWrapper = _repeatedBoolWrapper
      clone._repeatedInt32Wrapper = _repeatedInt32Wrapper
      clone._repeatedInt64Wrapper = _repeatedInt64Wrapper
      clone._repeatedUint32Wrapper = _repeatedUint32Wrapper
      clone._repeatedUint64Wrapper = _repeatedUint64Wrapper
      clone._repeatedFloatWrapper = _repeatedFloatWrapper
      clone._repeatedDoubleWrapper = _repeatedDoubleWrapper
      clone._repeatedStringWrapper = _repeatedStringWrapper
      clone._repeatedBytesWrapper = _repeatedBytesWrapper
      clone._optionalDuration = _optionalDuration
      clone._optionalTimestamp = _optionalTimestamp
      clone._optionalFieldMask = _optionalFieldMask
      clone._optionalStruct = _optionalStruct
      clone._optionalAny = _optionalAny
      clone._optionalValue = _optionalValue
      clone._repeatedDuration = _repeatedDuration
      clone._repeatedTimestamp = _repeatedTimestamp
      clone._repeatedFieldmask = _repeatedFieldmask
      clone._repeatedStruct = _repeatedStruct
      clone._repeatedAny = _repeatedAny
      clone._repeatedValue = _repeatedValue
      clone._fieldname1 = _fieldname1
      clone._fieldName2 = _fieldName2
      clone._fieldName3 = _fieldName3
      clone._field_Name4_ = _field_Name4_
      clone._field0Name5 = _field0Name5
      clone._field0Name6 = _field0Name6
      clone._fieldName7 = _fieldName7
      clone._fieldName8 = _fieldName8
      clone._fieldName9 = _fieldName9
      clone._fieldName10 = _fieldName10
      clone._fieldName11 = _fieldName11
      clone._fieldName12 = _fieldName12
      return clone
    }
  }

  private var _storage = _StorageClass()

  public enum OneOf_OneofField: ExpressibleByNilLiteral, ProtobufOneofEnum {
    case oneofUint32(UInt32)
    case oneofNestedMessage(Conformance_TestAllTypes.NestedMessage)
    case oneofString(String)
    case oneofBytes(Data)
    case None

    public init(nilLiteral: ()) {
      self = .None
    }

    public init() {
      self = .None
    }

    public mutating func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      if self != .None && setter.rejectConflictingOneof {
        throw ProtobufDecodingError.duplicatedOneOf
      }
      let handled: Bool
      switch protoFieldNumber {
      case 111:
        var value = UInt32()
        handled = try setter.decodeSingularField(fieldType: ProtobufUInt32.self, value: &value)
        self = .oneofUint32(value)
      case 112:
        var value: Conformance_TestAllTypes.NestedMessage?
        handled = try setter.decodeSingularMessageField(fieldType: Conformance_TestAllTypes.NestedMessage.self, value: &value)
        if let value = value, handled {
          self = .oneofNestedMessage(value)
        }
      case 113:
        var value = String()
        handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &value)
        self = .oneofString(value)
      case 114:
        var value = Data()
        handled = try setter.decodeSingularField(fieldType: ProtobufBytes.self, value: &value)
        self = .oneofBytes(value)
      default:
        handled = false
        self = .None
      }
      return handled
    }

    public func traverse(visitor: inout ProtobufVisitor, start: Int, end: Int) throws {
      switch self {
      case .oneofUint32(let v):
        if start <= 111 && 111 < end {
          try visitor.visitSingularField(fieldType: ProtobufUInt32.self, value: v, protoFieldNumber: 111, protoFieldName: "oneof_uint32", jsonFieldName: "oneofUint32", swiftFieldName: "oneofUint32")
        }
      case .oneofNestedMessage(let v):
        if start <= 112 && 112 < end {
          try visitor.visitSingularMessageField(value: v, protoFieldNumber: 112, protoFieldName: "oneof_nested_message", jsonFieldName: "oneofNestedMessage", swiftFieldName: "oneofNestedMessage")
        }
      case .oneofString(let v):
        if start <= 113 && 113 < end {
          try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 113, protoFieldName: "oneof_string", jsonFieldName: "oneofString", swiftFieldName: "oneofString")
        }
      case .oneofBytes(let v):
        if start <= 114 && 114 < end {
          try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: v, protoFieldNumber: 114, protoFieldName: "oneof_bytes", jsonFieldName: "oneofBytes", swiftFieldName: "oneofBytes")
        }
      case .None:
        break
      }
    }
  }

  public enum NestedEnum: ProtobufEnum {
    public typealias RawValue = Int
    case foo // = 0
    case bar // = 1
    case baz // = 2

    ///   Intentionally negative.
    case neg // = -1
    case UNRECOGNIZED(Int)

    public init() {
      self = .foo
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .foo
      case 1: self = .bar
      case 2: self = .baz
      case -1: self = .neg
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "foo": self = .foo
      case "bar": self = .bar
      case "baz": self = .baz
      case "neg": self = .neg
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "FOO": self = .foo
      case "BAR": self = .bar
      case "BAZ": self = .baz
      case "NEG": self = .neg
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "FOO": self = .foo
      case "BAR": self = .bar
      case "BAZ": self = .baz
      case "NEG": self = .neg
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .foo: return 0
        case .bar: return 1
        case .baz: return 2
        case .neg: return -1
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .foo: return "\"FOO\""
        case .bar: return "\"BAR\""
        case .baz: return "\"BAZ\""
        case .neg: return "\"NEG\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .foo: return ".foo"
        case .bar: return ".bar"
        case .baz: return ".baz"
        case .neg: return ".neg"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public struct NestedMessage: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "Conformance_TestAllTypes.NestedMessage"}
    public var protoMessageName: String {return "NestedMessage"}
    public var protoPackageName: String {return "conformance"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
      "corecursive": 2,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
      "corecursive": 2,
    ]}

    private class _StorageClass {
      typealias ProtobufExtendedMessage = Conformance_TestAllTypes.NestedMessage
      var _a: Int32 = 0
      var _corecursive: Conformance_TestAllTypes? = nil

      init() {}

      func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
        let handled: Bool
        switch protoFieldNumber {
        case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_a)
        case 2: handled = try setter.decodeSingularMessageField(fieldType: Conformance_TestAllTypes.self, value: &_corecursive)
        default:
          handled = false
        }
        return handled
      }

      func traverse(visitor: inout ProtobufVisitor) throws {
        if _a != 0 {
          try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
        }
        if let v = _corecursive {
          try visitor.visitSingularMessageField(value: v, protoFieldNumber: 2, protoFieldName: "corecursive", jsonFieldName: "corecursive", swiftFieldName: "corecursive")
        }
      }

      func isEqualTo(other: _StorageClass) -> Bool {
        if _a != other._a {return false}
        if _corecursive != other._corecursive {return false}
        return true
      }

      func copy() -> _StorageClass {
        let clone = _StorageClass()
        clone._a = _a
        clone._corecursive = _corecursive
        return clone
      }
    }

    private var _storage = _StorageClass()

    public var a: Int32 {
      get {return _storage._a}
      set {_uniqueStorage()._a = newValue}
    }

    public var corecursive: Conformance_TestAllTypes {
      get {return _storage._corecursive ?? Conformance_TestAllTypes()}
      set {_uniqueStorage()._corecursive = newValue}
    }
    public var hasCorecursive: Bool {
      return _storage._corecursive != nil
    }
    public mutating func clearCorecursive() {
      return _storage._corecursive = nil
    }

    public init() {}

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      return try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      try _storage.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: Conformance_TestAllTypes.NestedMessage) -> Bool {
      return _storage === other._storage || _storage.isEqualTo(other: other._storage)
    }

    private mutating func _uniqueStorage() -> _StorageClass {
      if !isKnownUniquelyReferenced(&_storage) {
        _storage = _storage.copy()
      }
      return _storage
    }
  }

  ///   Singular
  public var optionalInt32: Int32 {
    get {return _storage._optionalInt32}
    set {_uniqueStorage()._optionalInt32 = newValue}
  }

  public var optionalInt64: Int64 {
    get {return _storage._optionalInt64}
    set {_uniqueStorage()._optionalInt64 = newValue}
  }

  public var optionalUint32: UInt32 {
    get {return _storage._optionalUint32}
    set {_uniqueStorage()._optionalUint32 = newValue}
  }

  public var optionalUint64: UInt64 {
    get {return _storage._optionalUint64}
    set {_uniqueStorage()._optionalUint64 = newValue}
  }

  public var optionalSint32: Int32 {
    get {return _storage._optionalSint32}
    set {_uniqueStorage()._optionalSint32 = newValue}
  }

  public var optionalSint64: Int64 {
    get {return _storage._optionalSint64}
    set {_uniqueStorage()._optionalSint64 = newValue}
  }

  public var optionalFixed32: UInt32 {
    get {return _storage._optionalFixed32}
    set {_uniqueStorage()._optionalFixed32 = newValue}
  }

  public var optionalFixed64: UInt64 {
    get {return _storage._optionalFixed64}
    set {_uniqueStorage()._optionalFixed64 = newValue}
  }

  public var optionalSfixed32: Int32 {
    get {return _storage._optionalSfixed32}
    set {_uniqueStorage()._optionalSfixed32 = newValue}
  }

  public var optionalSfixed64: Int64 {
    get {return _storage._optionalSfixed64}
    set {_uniqueStorage()._optionalSfixed64 = newValue}
  }

  public var optionalFloat: Float {
    get {return _storage._optionalFloat}
    set {_uniqueStorage()._optionalFloat = newValue}
  }

  public var optionalDouble: Double {
    get {return _storage._optionalDouble}
    set {_uniqueStorage()._optionalDouble = newValue}
  }

  public var optionalBool: Bool {
    get {return _storage._optionalBool}
    set {_uniqueStorage()._optionalBool = newValue}
  }

  public var optionalString: String {
    get {return _storage._optionalString}
    set {_uniqueStorage()._optionalString = newValue}
  }

  public var optionalBytes: Data {
    get {return _storage._optionalBytes}
    set {_uniqueStorage()._optionalBytes = newValue}
  }

  public var optionalNestedMessage: Conformance_TestAllTypes.NestedMessage {
    get {return _storage._optionalNestedMessage ?? Conformance_TestAllTypes.NestedMessage()}
    set {_uniqueStorage()._optionalNestedMessage = newValue}
  }
  public var hasOptionalNestedMessage: Bool {
    return _storage._optionalNestedMessage != nil
  }
  public mutating func clearOptionalNestedMessage() {
    return _storage._optionalNestedMessage = nil
  }

  public var optionalForeignMessage: Conformance_ForeignMessage {
    get {return _storage._optionalForeignMessage ?? Conformance_ForeignMessage()}
    set {_uniqueStorage()._optionalForeignMessage = newValue}
  }
  public var hasOptionalForeignMessage: Bool {
    return _storage._optionalForeignMessage != nil
  }
  public mutating func clearOptionalForeignMessage() {
    return _storage._optionalForeignMessage = nil
  }

  public var optionalNestedEnum: Conformance_TestAllTypes.NestedEnum {
    get {return _storage._optionalNestedEnum}
    set {_uniqueStorage()._optionalNestedEnum = newValue}
  }

  public var optionalForeignEnum: Conformance_ForeignEnum {
    get {return _storage._optionalForeignEnum}
    set {_uniqueStorage()._optionalForeignEnum = newValue}
  }

  public var optionalStringPiece: String {
    get {return _storage._optionalStringPiece}
    set {_uniqueStorage()._optionalStringPiece = newValue}
  }

  public var optionalCord: String {
    get {return _storage._optionalCord}
    set {_uniqueStorage()._optionalCord = newValue}
  }

  public var recursiveMessage: Conformance_TestAllTypes {
    get {return _storage._recursiveMessage ?? Conformance_TestAllTypes()}
    set {_uniqueStorage()._recursiveMessage = newValue}
  }
  public var hasRecursiveMessage: Bool {
    return _storage._recursiveMessage != nil
  }
  public mutating func clearRecursiveMessage() {
    return _storage._recursiveMessage = nil
  }

  ///   Repeated
  public var repeatedInt32: [Int32] {
    get {return _storage._repeatedInt32}
    set {_uniqueStorage()._repeatedInt32 = newValue}
  }

  public var repeatedInt64: [Int64] {
    get {return _storage._repeatedInt64}
    set {_uniqueStorage()._repeatedInt64 = newValue}
  }

  public var repeatedUint32: [UInt32] {
    get {return _storage._repeatedUint32}
    set {_uniqueStorage()._repeatedUint32 = newValue}
  }

  public var repeatedUint64: [UInt64] {
    get {return _storage._repeatedUint64}
    set {_uniqueStorage()._repeatedUint64 = newValue}
  }

  public var repeatedSint32: [Int32] {
    get {return _storage._repeatedSint32}
    set {_uniqueStorage()._repeatedSint32 = newValue}
  }

  public var repeatedSint64: [Int64] {
    get {return _storage._repeatedSint64}
    set {_uniqueStorage()._repeatedSint64 = newValue}
  }

  public var repeatedFixed32: [UInt32] {
    get {return _storage._repeatedFixed32}
    set {_uniqueStorage()._repeatedFixed32 = newValue}
  }

  public var repeatedFixed64: [UInt64] {
    get {return _storage._repeatedFixed64}
    set {_uniqueStorage()._repeatedFixed64 = newValue}
  }

  public var repeatedSfixed32: [Int32] {
    get {return _storage._repeatedSfixed32}
    set {_uniqueStorage()._repeatedSfixed32 = newValue}
  }

  public var repeatedSfixed64: [Int64] {
    get {return _storage._repeatedSfixed64}
    set {_uniqueStorage()._repeatedSfixed64 = newValue}
  }

  public var repeatedFloat: [Float] {
    get {return _storage._repeatedFloat}
    set {_uniqueStorage()._repeatedFloat = newValue}
  }

  public var repeatedDouble: [Double] {
    get {return _storage._repeatedDouble}
    set {_uniqueStorage()._repeatedDouble = newValue}
  }

  public var repeatedBool: [Bool] {
    get {return _storage._repeatedBool}
    set {_uniqueStorage()._repeatedBool = newValue}
  }

  public var repeatedString: [String] {
    get {return _storage._repeatedString}
    set {_uniqueStorage()._repeatedString = newValue}
  }

  public var repeatedBytes: [Data] {
    get {return _storage._repeatedBytes}
    set {_uniqueStorage()._repeatedBytes = newValue}
  }

  public var repeatedNestedMessage: [Conformance_TestAllTypes.NestedMessage] {
    get {return _storage._repeatedNestedMessage}
    set {_uniqueStorage()._repeatedNestedMessage = newValue}
  }

  public var repeatedForeignMessage: [Conformance_ForeignMessage] {
    get {return _storage._repeatedForeignMessage}
    set {_uniqueStorage()._repeatedForeignMessage = newValue}
  }

  public var repeatedNestedEnum: [Conformance_TestAllTypes.NestedEnum] {
    get {return _storage._repeatedNestedEnum}
    set {_uniqueStorage()._repeatedNestedEnum = newValue}
  }

  public var repeatedForeignEnum: [Conformance_ForeignEnum] {
    get {return _storage._repeatedForeignEnum}
    set {_uniqueStorage()._repeatedForeignEnum = newValue}
  }

  public var repeatedStringPiece: [String] {
    get {return _storage._repeatedStringPiece}
    set {_uniqueStorage()._repeatedStringPiece = newValue}
  }

  public var repeatedCord: [String] {
    get {return _storage._repeatedCord}
    set {_uniqueStorage()._repeatedCord = newValue}
  }

  ///   Map
  public var mapInt32Int32: Dictionary<Int32,Int32> {
    get {return _storage._mapInt32Int32}
    set {_uniqueStorage()._mapInt32Int32 = newValue}
  }

  public var mapInt64Int64: Dictionary<Int64,Int64> {
    get {return _storage._mapInt64Int64}
    set {_uniqueStorage()._mapInt64Int64 = newValue}
  }

  public var mapUint32Uint32: Dictionary<UInt32,UInt32> {
    get {return _storage._mapUint32Uint32}
    set {_uniqueStorage()._mapUint32Uint32 = newValue}
  }

  public var mapUint64Uint64: Dictionary<UInt64,UInt64> {
    get {return _storage._mapUint64Uint64}
    set {_uniqueStorage()._mapUint64Uint64 = newValue}
  }

  public var mapSint32Sint32: Dictionary<Int32,Int32> {
    get {return _storage._mapSint32Sint32}
    set {_uniqueStorage()._mapSint32Sint32 = newValue}
  }

  public var mapSint64Sint64: Dictionary<Int64,Int64> {
    get {return _storage._mapSint64Sint64}
    set {_uniqueStorage()._mapSint64Sint64 = newValue}
  }

  public var mapFixed32Fixed32: Dictionary<UInt32,UInt32> {
    get {return _storage._mapFixed32Fixed32}
    set {_uniqueStorage()._mapFixed32Fixed32 = newValue}
  }

  public var mapFixed64Fixed64: Dictionary<UInt64,UInt64> {
    get {return _storage._mapFixed64Fixed64}
    set {_uniqueStorage()._mapFixed64Fixed64 = newValue}
  }

  public var mapSfixed32Sfixed32: Dictionary<Int32,Int32> {
    get {return _storage._mapSfixed32Sfixed32}
    set {_uniqueStorage()._mapSfixed32Sfixed32 = newValue}
  }

  public var mapSfixed64Sfixed64: Dictionary<Int64,Int64> {
    get {return _storage._mapSfixed64Sfixed64}
    set {_uniqueStorage()._mapSfixed64Sfixed64 = newValue}
  }

  public var mapInt32Float: Dictionary<Int32,Float> {
    get {return _storage._mapInt32Float}
    set {_uniqueStorage()._mapInt32Float = newValue}
  }

  public var mapInt32Double: Dictionary<Int32,Double> {
    get {return _storage._mapInt32Double}
    set {_uniqueStorage()._mapInt32Double = newValue}
  }

  public var mapBoolBool: Dictionary<Bool,Bool> {
    get {return _storage._mapBoolBool}
    set {_uniqueStorage()._mapBoolBool = newValue}
  }

  public var mapStringString: Dictionary<String,String> {
    get {return _storage._mapStringString}
    set {_uniqueStorage()._mapStringString = newValue}
  }

  public var mapStringBytes: Dictionary<String,Data> {
    get {return _storage._mapStringBytes}
    set {_uniqueStorage()._mapStringBytes = newValue}
  }

  public var mapStringNestedMessage: Dictionary<String,Conformance_TestAllTypes.NestedMessage> {
    get {return _storage._mapStringNestedMessage}
    set {_uniqueStorage()._mapStringNestedMessage = newValue}
  }

  public var mapStringForeignMessage: Dictionary<String,Conformance_ForeignMessage> {
    get {return _storage._mapStringForeignMessage}
    set {_uniqueStorage()._mapStringForeignMessage = newValue}
  }

  public var mapStringNestedEnum: Dictionary<String,Conformance_TestAllTypes.NestedEnum> {
    get {return _storage._mapStringNestedEnum}
    set {_uniqueStorage()._mapStringNestedEnum = newValue}
  }

  public var mapStringForeignEnum: Dictionary<String,Conformance_ForeignEnum> {
    get {return _storage._mapStringForeignEnum}
    set {_uniqueStorage()._mapStringForeignEnum = newValue}
  }

  public var oneofUint32: UInt32 {
    get {
      if case .oneofUint32(let v) = _storage._oneofField {
        return v
      }
      return 0
    }
    set {
      _uniqueStorage()._oneofField = .oneofUint32(newValue)
    }
  }

  public var oneofNestedMessage: Conformance_TestAllTypes.NestedMessage {
    get {
      if case .oneofNestedMessage(let v) = _storage._oneofField {
        return v
      }
      return Conformance_TestAllTypes.NestedMessage()
    }
    set {
      _uniqueStorage()._oneofField = .oneofNestedMessage(newValue)
    }
  }

  public var oneofString: String {
    get {
      if case .oneofString(let v) = _storage._oneofField {
        return v
      }
      return ""
    }
    set {
      _uniqueStorage()._oneofField = .oneofString(newValue)
    }
  }

  public var oneofBytes: Data {
    get {
      if case .oneofBytes(let v) = _storage._oneofField {
        return v
      }
      return Data()
    }
    set {
      _uniqueStorage()._oneofField = .oneofBytes(newValue)
    }
  }

  ///   Well-known types
  public var optionalBoolWrapper: Google_Protobuf_BoolValue {
    get {return _storage._optionalBoolWrapper ?? Google_Protobuf_BoolValue()}
    set {_uniqueStorage()._optionalBoolWrapper = newValue}
  }
  public var hasOptionalBoolWrapper: Bool {
    return _storage._optionalBoolWrapper != nil
  }
  public mutating func clearOptionalBoolWrapper() {
    return _storage._optionalBoolWrapper = nil
  }

  public var optionalInt32Wrapper: Google_Protobuf_Int32Value {
    get {return _storage._optionalInt32Wrapper ?? Google_Protobuf_Int32Value()}
    set {_uniqueStorage()._optionalInt32Wrapper = newValue}
  }
  public var hasOptionalInt32Wrapper: Bool {
    return _storage._optionalInt32Wrapper != nil
  }
  public mutating func clearOptionalInt32Wrapper() {
    return _storage._optionalInt32Wrapper = nil
  }

  public var optionalInt64Wrapper: Google_Protobuf_Int64Value {
    get {return _storage._optionalInt64Wrapper ?? Google_Protobuf_Int64Value()}
    set {_uniqueStorage()._optionalInt64Wrapper = newValue}
  }
  public var hasOptionalInt64Wrapper: Bool {
    return _storage._optionalInt64Wrapper != nil
  }
  public mutating func clearOptionalInt64Wrapper() {
    return _storage._optionalInt64Wrapper = nil
  }

  public var optionalUint32Wrapper: Google_Protobuf_UInt32Value {
    get {return _storage._optionalUint32Wrapper ?? Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._optionalUint32Wrapper = newValue}
  }
  public var hasOptionalUint32Wrapper: Bool {
    return _storage._optionalUint32Wrapper != nil
  }
  public mutating func clearOptionalUint32Wrapper() {
    return _storage._optionalUint32Wrapper = nil
  }

  public var optionalUint64Wrapper: Google_Protobuf_UInt64Value {
    get {return _storage._optionalUint64Wrapper ?? Google_Protobuf_UInt64Value()}
    set {_uniqueStorage()._optionalUint64Wrapper = newValue}
  }
  public var hasOptionalUint64Wrapper: Bool {
    return _storage._optionalUint64Wrapper != nil
  }
  public mutating func clearOptionalUint64Wrapper() {
    return _storage._optionalUint64Wrapper = nil
  }

  public var optionalFloatWrapper: Google_Protobuf_FloatValue {
    get {return _storage._optionalFloatWrapper ?? Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._optionalFloatWrapper = newValue}
  }
  public var hasOptionalFloatWrapper: Bool {
    return _storage._optionalFloatWrapper != nil
  }
  public mutating func clearOptionalFloatWrapper() {
    return _storage._optionalFloatWrapper = nil
  }

  public var optionalDoubleWrapper: Google_Protobuf_DoubleValue {
    get {return _storage._optionalDoubleWrapper ?? Google_Protobuf_DoubleValue()}
    set {_uniqueStorage()._optionalDoubleWrapper = newValue}
  }
  public var hasOptionalDoubleWrapper: Bool {
    return _storage._optionalDoubleWrapper != nil
  }
  public mutating func clearOptionalDoubleWrapper() {
    return _storage._optionalDoubleWrapper = nil
  }

  public var optionalStringWrapper: Google_Protobuf_StringValue {
    get {return _storage._optionalStringWrapper ?? Google_Protobuf_StringValue()}
    set {_uniqueStorage()._optionalStringWrapper = newValue}
  }
  public var hasOptionalStringWrapper: Bool {
    return _storage._optionalStringWrapper != nil
  }
  public mutating func clearOptionalStringWrapper() {
    return _storage._optionalStringWrapper = nil
  }

  public var optionalBytesWrapper: Google_Protobuf_BytesValue {
    get {return _storage._optionalBytesWrapper ?? Google_Protobuf_BytesValue()}
    set {_uniqueStorage()._optionalBytesWrapper = newValue}
  }
  public var hasOptionalBytesWrapper: Bool {
    return _storage._optionalBytesWrapper != nil
  }
  public mutating func clearOptionalBytesWrapper() {
    return _storage._optionalBytesWrapper = nil
  }

  public var repeatedBoolWrapper: [Google_Protobuf_BoolValue] {
    get {return _storage._repeatedBoolWrapper}
    set {_uniqueStorage()._repeatedBoolWrapper = newValue}
  }

  public var repeatedInt32Wrapper: [Google_Protobuf_Int32Value] {
    get {return _storage._repeatedInt32Wrapper}
    set {_uniqueStorage()._repeatedInt32Wrapper = newValue}
  }

  public var repeatedInt64Wrapper: [Google_Protobuf_Int64Value] {
    get {return _storage._repeatedInt64Wrapper}
    set {_uniqueStorage()._repeatedInt64Wrapper = newValue}
  }

  public var repeatedUint32Wrapper: [Google_Protobuf_UInt32Value] {
    get {return _storage._repeatedUint32Wrapper}
    set {_uniqueStorage()._repeatedUint32Wrapper = newValue}
  }

  public var repeatedUint64Wrapper: [Google_Protobuf_UInt64Value] {
    get {return _storage._repeatedUint64Wrapper}
    set {_uniqueStorage()._repeatedUint64Wrapper = newValue}
  }

  public var repeatedFloatWrapper: [Google_Protobuf_FloatValue] {
    get {return _storage._repeatedFloatWrapper}
    set {_uniqueStorage()._repeatedFloatWrapper = newValue}
  }

  public var repeatedDoubleWrapper: [Google_Protobuf_DoubleValue] {
    get {return _storage._repeatedDoubleWrapper}
    set {_uniqueStorage()._repeatedDoubleWrapper = newValue}
  }

  public var repeatedStringWrapper: [Google_Protobuf_StringValue] {
    get {return _storage._repeatedStringWrapper}
    set {_uniqueStorage()._repeatedStringWrapper = newValue}
  }

  public var repeatedBytesWrapper: [Google_Protobuf_BytesValue] {
    get {return _storage._repeatedBytesWrapper}
    set {_uniqueStorage()._repeatedBytesWrapper = newValue}
  }

  public var optionalDuration: Google_Protobuf_Duration {
    get {return _storage._optionalDuration ?? Google_Protobuf_Duration()}
    set {_uniqueStorage()._optionalDuration = newValue}
  }
  public var hasOptionalDuration: Bool {
    return _storage._optionalDuration != nil
  }
  public mutating func clearOptionalDuration() {
    return _storage._optionalDuration = nil
  }

  public var optionalTimestamp: Google_Protobuf_Timestamp {
    get {return _storage._optionalTimestamp ?? Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._optionalTimestamp = newValue}
  }
  public var hasOptionalTimestamp: Bool {
    return _storage._optionalTimestamp != nil
  }
  public mutating func clearOptionalTimestamp() {
    return _storage._optionalTimestamp = nil
  }

  public var optionalFieldMask: Google_Protobuf_FieldMask {
    get {return _storage._optionalFieldMask ?? Google_Protobuf_FieldMask()}
    set {_uniqueStorage()._optionalFieldMask = newValue}
  }
  public var hasOptionalFieldMask: Bool {
    return _storage._optionalFieldMask != nil
  }
  public mutating func clearOptionalFieldMask() {
    return _storage._optionalFieldMask = nil
  }

  public var optionalStruct: Google_Protobuf_Struct {
    get {return _storage._optionalStruct ?? Google_Protobuf_Struct()}
    set {_uniqueStorage()._optionalStruct = newValue}
  }
  public var hasOptionalStruct: Bool {
    return _storage._optionalStruct != nil
  }
  public mutating func clearOptionalStruct() {
    return _storage._optionalStruct = nil
  }

  public var optionalAny: Google_Protobuf_Any {
    get {return _storage._optionalAny ?? Google_Protobuf_Any()}
    set {_uniqueStorage()._optionalAny = newValue}
  }
  public var hasOptionalAny: Bool {
    return _storage._optionalAny != nil
  }
  public mutating func clearOptionalAny() {
    return _storage._optionalAny = nil
  }

  public var optionalValue: Google_Protobuf_Value {
    get {return _storage._optionalValue ?? Google_Protobuf_Value()}
    set {_uniqueStorage()._optionalValue = newValue}
  }
  public var hasOptionalValue: Bool {
    return _storage._optionalValue != nil
  }
  public mutating func clearOptionalValue() {
    return _storage._optionalValue = nil
  }

  public var repeatedDuration: [Google_Protobuf_Duration] {
    get {return _storage._repeatedDuration}
    set {_uniqueStorage()._repeatedDuration = newValue}
  }

  public var repeatedTimestamp: [Google_Protobuf_Timestamp] {
    get {return _storage._repeatedTimestamp}
    set {_uniqueStorage()._repeatedTimestamp = newValue}
  }

  public var repeatedFieldmask: [Google_Protobuf_FieldMask] {
    get {return _storage._repeatedFieldmask}
    set {_uniqueStorage()._repeatedFieldmask = newValue}
  }

  public var repeatedStruct: [Google_Protobuf_Struct] {
    get {return _storage._repeatedStruct}
    set {_uniqueStorage()._repeatedStruct = newValue}
  }

  public var repeatedAny: [Google_Protobuf_Any] {
    get {return _storage._repeatedAny}
    set {_uniqueStorage()._repeatedAny = newValue}
  }

  public var repeatedValue: [Google_Protobuf_Value] {
    get {return _storage._repeatedValue}
    set {_uniqueStorage()._repeatedValue = newValue}
  }

  ///   Test field-name-to-JSON-name convention.
  public var fieldname1: Int32 {
    get {return _storage._fieldname1}
    set {_uniqueStorage()._fieldname1 = newValue}
  }

  public var fieldName2: Int32 {
    get {return _storage._fieldName2}
    set {_uniqueStorage()._fieldName2 = newValue}
  }

  public var fieldName3: Int32 {
    get {return _storage._fieldName3}
    set {_uniqueStorage()._fieldName3 = newValue}
  }

  public var field_Name4_: Int32 {
    get {return _storage._field_Name4_}
    set {_uniqueStorage()._field_Name4_ = newValue}
  }

  public var field0Name5: Int32 {
    get {return _storage._field0Name5}
    set {_uniqueStorage()._field0Name5 = newValue}
  }

  public var field0Name6: Int32 {
    get {return _storage._field0Name6}
    set {_uniqueStorage()._field0Name6 = newValue}
  }

  public var fieldName7: Int32 {
    get {return _storage._fieldName7}
    set {_uniqueStorage()._fieldName7 = newValue}
  }

  public var fieldName8: Int32 {
    get {return _storage._fieldName8}
    set {_uniqueStorage()._fieldName8 = newValue}
  }

  public var fieldName9: Int32 {
    get {return _storage._fieldName9}
    set {_uniqueStorage()._fieldName9 = newValue}
  }

  public var fieldName10: Int32 {
    get {return _storage._fieldName10}
    set {_uniqueStorage()._fieldName10 = newValue}
  }

  public var fieldName11: Int32 {
    get {return _storage._fieldName11}
    set {_uniqueStorage()._fieldName11 = newValue}
  }

  public var fieldName12: Int32 {
    get {return _storage._fieldName12}
    set {_uniqueStorage()._fieldName12 = newValue}
  }

  public var oneofField: OneOf_OneofField {
    get {return _storage._oneofField}
    set {
      _uniqueStorage()._oneofField = newValue
    }
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Conformance_TestAllTypes) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

public struct Conformance_ForeignMessage: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Conformance_ForeignMessage"}
  public var protoMessageName: String {return "ForeignMessage"}
  public var protoPackageName: String {return "conformance"}
  public var jsonFieldNames: [String: Int] {return [
    "c": 1,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "c": 1,
  ]}

  public var c: Int32 = 0

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &c)
    default:
      handled = false
    }
    return handled
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    if c != 0 {
      try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: c, protoFieldNumber: 1, protoFieldName: "c", jsonFieldName: "c", swiftFieldName: "c")
    }
  }

  public func _protoc_generated_isEqualTo(other: Conformance_ForeignMessage) -> Bool {
    if c != other.c {return false}
    return true
  }
}

public func ==(lhs: Conformance_ConformanceRequest.OneOf_Payload, rhs: Conformance_ConformanceRequest.OneOf_Payload) -> Bool {
  switch (lhs, rhs) {
  case (.protobufPayload(let l), .protobufPayload(let r)): return l == r
  case (.jsonPayload(let l), .jsonPayload(let r)): return l == r
  case (.None, .None): return true
  default: return false
  }
}

public func ==(lhs: Conformance_ConformanceResponse.OneOf_Result, rhs: Conformance_ConformanceResponse.OneOf_Result) -> Bool {
  switch (lhs, rhs) {
  case (.parseError(let l), .parseError(let r)): return l == r
  case (.serializeError(let l), .serializeError(let r)): return l == r
  case (.runtimeError(let l), .runtimeError(let r)): return l == r
  case (.protobufPayload(let l), .protobufPayload(let r)): return l == r
  case (.jsonPayload(let l), .jsonPayload(let r)): return l == r
  case (.skipped(let l), .skipped(let r)): return l == r
  case (.None, .None): return true
  default: return false
  }
}

public func ==(lhs: Conformance_TestAllTypes.OneOf_OneofField, rhs: Conformance_TestAllTypes.OneOf_OneofField) -> Bool {
  switch (lhs, rhs) {
  case (.oneofUint32(let l), .oneofUint32(let r)): return l == r
  case (.oneofNestedMessage(let l), .oneofNestedMessage(let r)): return l == r
  case (.oneofString(let l), .oneofString(let r)): return l == r
  case (.oneofBytes(let l), .oneofBytes(let r)): return l == r
  case (.None, .None): return true
  default: return false
  }
}
