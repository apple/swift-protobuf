// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: unittest.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Protocol Buffers - Google's data interchange format
// Copyright 2008 Google Inc.  All rights reserved.
// https://developers.google.com/protocol-buffers/
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Author: kenton@google.com (Kenton Varda)
//  Based on original Protocol Buffers design by
//  Sanjay Ghemawat, Jeff Dean, and others.
//
// A proto file we will use for unit testing.
//
// LINT: ALLOW_GROUPS, LEGACY_NAMES

import Foundation
@_spi(ForGeneratedCodeOnly) import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum SwiftProtoTesting_ForeignEnum: Int, SwiftProtobuf.Enum, Swift.CaseIterable {
  case foreignFoo = 4
  case foreignBar = 5
  case foreignBaz = 6

  init() {
    self = .foreignFoo
  }

}

/// Test an enum that has multiple values with the same number.
enum SwiftProtoTesting_TestEnumWithDupValue: Int, SwiftProtobuf.Enum, Swift.CaseIterable {
  case foo1 = 1
  case bar1 = 2
  case baz = 3
  static let foo2 = foo1
  static let bar2 = bar1

  init() {
    self = .foo1
  }

}

/// This proto includes every type of field in both singular and repeated
/// forms.
struct SwiftProtoTesting_TestAllTypes: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Singular
  var optionalInt32: Int32 {
    get { return _storage.value(at: 32, default: 0, hasBit: (0, 1)) }
    set { _uniqueStorage().updateValue(at: 32, to: newValue, willBeSet: true, hasBit: (0, 1)) }
  }
  /// Returns true if `optionalInt32` has been explicitly set.
  var hasOptionalInt32: Bool { return _storage.isPresent(hasBit: (0, 1)) }
  /// Clears the value of `optionalInt32`. Subsequent reads from it will return its default value.
  mutating func clearOptionalInt32() { _uniqueStorage().clearValue(at: 32, type: Int32.self, hasBit: (0, 1)) }

  var optionalInt64: Int64 {
    get { return _storage.value(at: 112, default: 0, hasBit: (0, 2)) }
    set { _uniqueStorage().updateValue(at: 112, to: newValue, willBeSet: true, hasBit: (0, 2)) }
  }
  /// Returns true if `optionalInt64` has been explicitly set.
  var hasOptionalInt64: Bool { return _storage.isPresent(hasBit: (0, 2)) }
  /// Clears the value of `optionalInt64`. Subsequent reads from it will return its default value.
  mutating func clearOptionalInt64() { _uniqueStorage().clearValue(at: 112, type: Int64.self, hasBit: (0, 2)) }

  var optionalUint32: UInt32 {
    get { return _storage.value(at: 36, default: 0, hasBit: (0, 4)) }
    set { _uniqueStorage().updateValue(at: 36, to: newValue, willBeSet: true, hasBit: (0, 4)) }
  }
  /// Returns true if `optionalUint32` has been explicitly set.
  var hasOptionalUint32: Bool { return _storage.isPresent(hasBit: (0, 4)) }
  /// Clears the value of `optionalUint32`. Subsequent reads from it will return its default value.
  mutating func clearOptionalUint32() { _uniqueStorage().clearValue(at: 36, type: UInt32.self, hasBit: (0, 4)) }

  var optionalUint64: UInt64 {
    get { return _storage.value(at: 120, default: 0, hasBit: (0, 8)) }
    set { _uniqueStorage().updateValue(at: 120, to: newValue, willBeSet: true, hasBit: (0, 8)) }
  }
  /// Returns true if `optionalUint64` has been explicitly set.
  var hasOptionalUint64: Bool { return _storage.isPresent(hasBit: (0, 8)) }
  /// Clears the value of `optionalUint64`. Subsequent reads from it will return its default value.
  mutating func clearOptionalUint64() { _uniqueStorage().clearValue(at: 120, type: UInt64.self, hasBit: (0, 8)) }

  var optionalSint32: Int32 {
    get { return _storage.value(at: 40, default: 0, hasBit: (0, 16)) }
    set { _uniqueStorage().updateValue(at: 40, to: newValue, willBeSet: true, hasBit: (0, 16)) }
  }
  /// Returns true if `optionalSint32` has been explicitly set.
  var hasOptionalSint32: Bool { return _storage.isPresent(hasBit: (0, 16)) }
  /// Clears the value of `optionalSint32`. Subsequent reads from it will return its default value.
  mutating func clearOptionalSint32() { _uniqueStorage().clearValue(at: 40, type: Int32.self, hasBit: (0, 16)) }

  var optionalSint64: Int64 {
    get { return _storage.value(at: 128, default: 0, hasBit: (0, 32)) }
    set { _uniqueStorage().updateValue(at: 128, to: newValue, willBeSet: true, hasBit: (0, 32)) }
  }
  /// Returns true if `optionalSint64` has been explicitly set.
  var hasOptionalSint64: Bool { return _storage.isPresent(hasBit: (0, 32)) }
  /// Clears the value of `optionalSint64`. Subsequent reads from it will return its default value.
  mutating func clearOptionalSint64() { _uniqueStorage().clearValue(at: 128, type: Int64.self, hasBit: (0, 32)) }

  var optionalFixed32: UInt32 {
    get { return _storage.value(at: 44, default: 0, hasBit: (0, 64)) }
    set { _uniqueStorage().updateValue(at: 44, to: newValue, willBeSet: true, hasBit: (0, 64)) }
  }
  /// Returns true if `optionalFixed32` has been explicitly set.
  var hasOptionalFixed32: Bool { return _storage.isPresent(hasBit: (0, 64)) }
  /// Clears the value of `optionalFixed32`. Subsequent reads from it will return its default value.
  mutating func clearOptionalFixed32() { _uniqueStorage().clearValue(at: 44, type: UInt32.self, hasBit: (0, 64)) }

  var optionalFixed64: UInt64 {
    get { return _storage.value(at: 136, default: 0, hasBit: (0, 128)) }
    set { _uniqueStorage().updateValue(at: 136, to: newValue, willBeSet: true, hasBit: (0, 128)) }
  }
  /// Returns true if `optionalFixed64` has been explicitly set.
  var hasOptionalFixed64: Bool { return _storage.isPresent(hasBit: (0, 128)) }
  /// Clears the value of `optionalFixed64`. Subsequent reads from it will return its default value.
  mutating func clearOptionalFixed64() { _uniqueStorage().clearValue(at: 136, type: UInt64.self, hasBit: (0, 128)) }

  var optionalSfixed32: Int32 {
    get { return _storage.value(at: 48, default: 0, hasBit: (1, 1)) }
    set { _uniqueStorage().updateValue(at: 48, to: newValue, willBeSet: true, hasBit: (1, 1)) }
  }
  /// Returns true if `optionalSfixed32` has been explicitly set.
  var hasOptionalSfixed32: Bool { return _storage.isPresent(hasBit: (1, 1)) }
  /// Clears the value of `optionalSfixed32`. Subsequent reads from it will return its default value.
  mutating func clearOptionalSfixed32() { _uniqueStorage().clearValue(at: 48, type: Int32.self, hasBit: (1, 1)) }

  var optionalSfixed64: Int64 {
    get { return _storage.value(at: 144, default: 0, hasBit: (1, 2)) }
    set { _uniqueStorage().updateValue(at: 144, to: newValue, willBeSet: true, hasBit: (1, 2)) }
  }
  /// Returns true if `optionalSfixed64` has been explicitly set.
  var hasOptionalSfixed64: Bool { return _storage.isPresent(hasBit: (1, 2)) }
  /// Clears the value of `optionalSfixed64`. Subsequent reads from it will return its default value.
  mutating func clearOptionalSfixed64() { _uniqueStorage().clearValue(at: 144, type: Int64.self, hasBit: (1, 2)) }

  var optionalFloat: Float {
    get { return _storage.value(at: 52, default: 0, hasBit: (1, 4)) }
    set { _uniqueStorage().updateValue(at: 52, to: newValue, willBeSet: true, hasBit: (1, 4)) }
  }
  /// Returns true if `optionalFloat` has been explicitly set.
  var hasOptionalFloat: Bool { return _storage.isPresent(hasBit: (1, 4)) }
  /// Clears the value of `optionalFloat`. Subsequent reads from it will return its default value.
  mutating func clearOptionalFloat() { _uniqueStorage().clearValue(at: 52, type: Float.self, hasBit: (1, 4)) }

  var optionalDouble: Double {
    get { return _storage.value(at: 152, default: 0, hasBit: (1, 8)) }
    set { _uniqueStorage().updateValue(at: 152, to: newValue, willBeSet: true, hasBit: (1, 8)) }
  }
  /// Returns true if `optionalDouble` has been explicitly set.
  var hasOptionalDouble: Bool { return _storage.isPresent(hasBit: (1, 8)) }
  /// Clears the value of `optionalDouble`. Subsequent reads from it will return its default value.
  mutating func clearOptionalDouble() { _uniqueStorage().clearValue(at: 152, type: Double.self, hasBit: (1, 8)) }

  var optionalBool: Bool {
    get { return _storage.value(at: 28, default: false, hasBit: (1, 16)) }
    set { _uniqueStorage().updateValue(at: 28, to: newValue, willBeSet: true, hasBit: (1, 16)) }
  }
  /// Returns true if `optionalBool` has been explicitly set.
  var hasOptionalBool: Bool { return _storage.isPresent(hasBit: (1, 16)) }
  /// Clears the value of `optionalBool`. Subsequent reads from it will return its default value.
  mutating func clearOptionalBool() { _uniqueStorage().clearValue(at: 28, type: Bool.self, hasBit: (1, 16)) }

  var optionalString: String {
    get { return _storage.value(at: SwiftProtobuf._fieldOffset(432, 324), default: String(), hasBit: (1, 32)) }
    set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(432, 324), to: newValue, willBeSet: true, hasBit: (1, 32)) }
  }
  /// Returns true if `optionalString` has been explicitly set.
  var hasOptionalString: Bool { return _storage.isPresent(hasBit: (1, 32)) }
  /// Clears the value of `optionalString`. Subsequent reads from it will return its default value.
  mutating func clearOptionalString() { _uniqueStorage().clearValue(at: SwiftProtobuf._fieldOffset(432, 324), type: String.self, hasBit: (1, 32)) }

  var optionalBytes: Data {
    get { return _storage.value(at: SwiftProtobuf._fieldOffset(448, 336), default: Data(), hasBit: (1, 64)) }
    set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(448, 336), to: newValue, willBeSet: true, hasBit: (1, 64)) }
  }
  /// Returns true if `optionalBytes` has been explicitly set.
  var hasOptionalBytes: Bool { return _storage.isPresent(hasBit: (1, 64)) }
  /// Clears the value of `optionalBytes`. Subsequent reads from it will return its default value.
  mutating func clearOptionalBytes() { _uniqueStorage().clearValue(at: SwiftProtobuf._fieldOffset(448, 336), type: Data.self, hasBit: (1, 64)) }

  var optionalGroup: SwiftProtoTesting_TestAllTypes.OptionalGroup {
    get { return _storage.value(at: 208, default: SwiftProtoTesting_TestAllTypes.OptionalGroup(), hasBit: (1, 128)) }
    set { _uniqueStorage().updateValue(at: 208, to: newValue, willBeSet: true, hasBit: (1, 128)) }
  }
  /// Returns true if `optionalGroup` has been explicitly set.
  var hasOptionalGroup: Bool { return _storage.isPresent(hasBit: (1, 128)) }
  /// Clears the value of `optionalGroup`. Subsequent reads from it will return its default value.
  mutating func clearOptionalGroup() { _uniqueStorage().clearValue(at: 208, type: SwiftProtoTesting_TestAllTypes.OptionalGroup.self, hasBit: (1, 128)) }

  var optionalNestedMessage: SwiftProtoTesting_TestAllTypes.NestedMessage {
    get { return _storage.value(at: SwiftProtobuf._fieldOffset(216, 212), default: SwiftProtoTesting_TestAllTypes.NestedMessage(), hasBit: (2, 1)) }
    set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(216, 212), to: newValue, willBeSet: true, hasBit: (2, 1)) }
  }
  /// Returns true if `optionalNestedMessage` has been explicitly set.
  var hasOptionalNestedMessage: Bool { return _storage.isPresent(hasBit: (2, 1)) }
  /// Clears the value of `optionalNestedMessage`. Subsequent reads from it will return its default value.
  mutating func clearOptionalNestedMessage() { _uniqueStorage().clearValue(at: SwiftProtobuf._fieldOffset(216, 212), type: SwiftProtoTesting_TestAllTypes.NestedMessage.self, hasBit: (2, 1)) }

  var optionalForeignMessage: SwiftProtoTesting_ForeignMessage {
    get { return _storage.value(at: SwiftProtobuf._fieldOffset(224, 216), default: SwiftProtoTesting_ForeignMessage(), hasBit: (2, 2)) }
    set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(224, 216), to: newValue, willBeSet: true, hasBit: (2, 2)) }
  }
  /// Returns true if `optionalForeignMessage` has been explicitly set.
  var hasOptionalForeignMessage: Bool { return _storage.isPresent(hasBit: (2, 2)) }
  /// Clears the value of `optionalForeignMessage`. Subsequent reads from it will return its default value.
  mutating func clearOptionalForeignMessage() { _uniqueStorage().clearValue(at: SwiftProtobuf._fieldOffset(224, 216), type: SwiftProtoTesting_ForeignMessage.self, hasBit: (2, 2)) }

  var optionalImportMessage: SwiftProtoTesting_Import_ImportMessage {
    get { return _storage.value(at: SwiftProtobuf._fieldOffset(232, 220), default: SwiftProtoTesting_Import_ImportMessage(), hasBit: (2, 4)) }
    set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(232, 220), to: newValue, willBeSet: true, hasBit: (2, 4)) }
  }
  /// Returns true if `optionalImportMessage` has been explicitly set.
  var hasOptionalImportMessage: Bool { return _storage.isPresent(hasBit: (2, 4)) }
  /// Clears the value of `optionalImportMessage`. Subsequent reads from it will return its default value.
  mutating func clearOptionalImportMessage() { _uniqueStorage().clearValue(at: SwiftProtobuf._fieldOffset(232, 220), type: SwiftProtoTesting_Import_ImportMessage.self, hasBit: (2, 4)) }

  var optionalNestedEnum: SwiftProtoTesting_TestAllTypes.NestedEnum {
    get { return _storage.value(at: 56, default: .foo, hasBit: (2, 8)) }
    set { _uniqueStorage().updateValue(at: 56, to: newValue, willBeSet: true, hasBit: (2, 8)) }
  }
  /// Returns true if `optionalNestedEnum` has been explicitly set.
  var hasOptionalNestedEnum: Bool { return _storage.isPresent(hasBit: (2, 8)) }
  /// Clears the value of `optionalNestedEnum`. Subsequent reads from it will return its default value.
  mutating func clearOptionalNestedEnum() { _uniqueStorage().clearValue(at: 56, type: SwiftProtoTesting_TestAllTypes.NestedEnum.self, hasBit: (2, 8)) }

  var optionalForeignEnum: SwiftProtoTesting_ForeignEnum {
    get { return _storage.value(at: 60, default: .foreignFoo, hasBit: (2, 16)) }
    set { _uniqueStorage().updateValue(at: 60, to: newValue, willBeSet: true, hasBit: (2, 16)) }
  }
  /// Returns true if `optionalForeignEnum` has been explicitly set.
  var hasOptionalForeignEnum: Bool { return _storage.isPresent(hasBit: (2, 16)) }
  /// Clears the value of `optionalForeignEnum`. Subsequent reads from it will return its default value.
  mutating func clearOptionalForeignEnum() { _uniqueStorage().clearValue(at: 60, type: SwiftProtoTesting_ForeignEnum.self, hasBit: (2, 16)) }

  var optionalImportEnum: SwiftProtoTesting_Import_ImportEnum {
    get { return _storage.value(at: 64, default: .importFoo, hasBit: (2, 32)) }
    set { _uniqueStorage().updateValue(at: 64, to: newValue, willBeSet: true, hasBit: (2, 32)) }
  }
  /// Returns true if `optionalImportEnum` has been explicitly set.
  var hasOptionalImportEnum: Bool { return _storage.isPresent(hasBit: (2, 32)) }
  /// Clears the value of `optionalImportEnum`. Subsequent reads from it will return its default value.
  mutating func clearOptionalImportEnum() { _uniqueStorage().clearValue(at: 64, type: SwiftProtoTesting_Import_ImportEnum.self, hasBit: (2, 32)) }

  /// Defined in unittest_import_public.proto
  var optionalPublicImportMessage: SwiftProtoTesting_Import_PublicImportMessage {
    get { return _storage.value(at: SwiftProtobuf._fieldOffset(240, 224), default: SwiftProtoTesting_Import_PublicImportMessage(), hasBit: (2, 64)) }
    set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(240, 224), to: newValue, willBeSet: true, hasBit: (2, 64)) }
  }
  /// Returns true if `optionalPublicImportMessage` has been explicitly set.
  var hasOptionalPublicImportMessage: Bool { return _storage.isPresent(hasBit: (2, 64)) }
  /// Clears the value of `optionalPublicImportMessage`. Subsequent reads from it will return its default value.
  mutating func clearOptionalPublicImportMessage() { _uniqueStorage().clearValue(at: SwiftProtobuf._fieldOffset(240, 224), type: SwiftProtoTesting_Import_PublicImportMessage.self, hasBit: (2, 64)) }

  /// Repeated
  var repeatedInt32: [Int32] {
    get { return _storage.value(at: SwiftProtobuf._fieldOffset(248, 228), hasBit: (2, 128)) }
    set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(248, 228), to: newValue, willBeSet: !newValue.isEmpty, hasBit: (2, 128)) }
  }

  var repeatedInt64: [Int64] {
    get { return _storage.value(at: SwiftProtobuf._fieldOffset(256, 232), hasBit: (3, 1)) }
    set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(256, 232), to: newValue, willBeSet: !newValue.isEmpty, hasBit: (3, 1)) }
  }

  var repeatedUint32: [UInt32] {
    get { return _storage.value(at: SwiftProtobuf._fieldOffset(264, 236), hasBit: (3, 2)) }
    set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(264, 236), to: newValue, willBeSet: !newValue.isEmpty, hasBit: (3, 2)) }
  }

  var repeatedUint64: [UInt64] {
    get { return _storage.value(at: SwiftProtobuf._fieldOffset(272, 240), hasBit: (3, 4)) }
    set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(272, 240), to: newValue, willBeSet: !newValue.isEmpty, hasBit: (3, 4)) }
  }

  var repeatedSint32: [Int32] {
    get { return _storage.value(at: SwiftProtobuf._fieldOffset(280, 244), hasBit: (3, 8)) }
    set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(280, 244), to: newValue, willBeSet: !newValue.isEmpty, hasBit: (3, 8)) }
  }

  var repeatedSint64: [Int64] {
    get { return _storage.value(at: SwiftProtobuf._fieldOffset(288, 248), hasBit: (3, 16)) }
    set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(288, 248), to: newValue, willBeSet: !newValue.isEmpty, hasBit: (3, 16)) }
  }

  var repeatedFixed32: [UInt32] {
    get { return _storage.value(at: SwiftProtobuf._fieldOffset(296, 252), hasBit: (3, 32)) }
    set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(296, 252), to: newValue, willBeSet: !newValue.isEmpty, hasBit: (3, 32)) }
  }

  var repeatedFixed64: [UInt64] {
    get { return _storage.value(at: SwiftProtobuf._fieldOffset(304, 256), hasBit: (3, 64)) }
    set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(304, 256), to: newValue, willBeSet: !newValue.isEmpty, hasBit: (3, 64)) }
  }

  var repeatedSfixed32: [Int32] {
    get { return _storage.value(at: SwiftProtobuf._fieldOffset(312, 260), hasBit: (3, 128)) }
    set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(312, 260), to: newValue, willBeSet: !newValue.isEmpty, hasBit: (3, 128)) }
  }

  var repeatedSfixed64: [Int64] {
    get { return _storage.value(at: SwiftProtobuf._fieldOffset(320, 264), hasBit: (4, 1)) }
    set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(320, 264), to: newValue, willBeSet: !newValue.isEmpty, hasBit: (4, 1)) }
  }

  var repeatedFloat: [Float] {
    get { return _storage.value(at: SwiftProtobuf._fieldOffset(328, 268), hasBit: (4, 2)) }
    set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(328, 268), to: newValue, willBeSet: !newValue.isEmpty, hasBit: (4, 2)) }
  }

  var repeatedDouble: [Double] {
    get { return _storage.value(at: SwiftProtobuf._fieldOffset(336, 272), hasBit: (4, 4)) }
    set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(336, 272), to: newValue, willBeSet: !newValue.isEmpty, hasBit: (4, 4)) }
  }

  var repeatedBool: [Bool] {
    get { return _storage.value(at: SwiftProtobuf._fieldOffset(344, 276), hasBit: (4, 8)) }
    set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(344, 276), to: newValue, willBeSet: !newValue.isEmpty, hasBit: (4, 8)) }
  }

  var repeatedString: [String] {
    get { return _storage.value(at: SwiftProtobuf._fieldOffset(352, 280), hasBit: (4, 16)) }
    set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(352, 280), to: newValue, willBeSet: !newValue.isEmpty, hasBit: (4, 16)) }
  }

  var repeatedBytes: [Data] {
    get { return _storage.value(at: SwiftProtobuf._fieldOffset(360, 284), hasBit: (4, 32)) }
    set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(360, 284), to: newValue, willBeSet: !newValue.isEmpty, hasBit: (4, 32)) }
  }

  var repeatedGroup: [SwiftProtoTesting_TestAllTypes.RepeatedGroup] {
    get { return _storage.value(at: SwiftProtobuf._fieldOffset(368, 288), hasBit: (4, 64)) }
    set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(368, 288), to: newValue, willBeSet: !newValue.isEmpty, hasBit: (4, 64)) }
  }

  var repeatedNestedMessage: [SwiftProtoTesting_TestAllTypes.NestedMessage] {
    get { return _storage.value(at: SwiftProtobuf._fieldOffset(376, 292), hasBit: (4, 128)) }
    set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(376, 292), to: newValue, willBeSet: !newValue.isEmpty, hasBit: (4, 128)) }
  }

  var repeatedForeignMessage: [SwiftProtoTesting_ForeignMessage] {
    get { return _storage.value(at: SwiftProtobuf._fieldOffset(384, 296), hasBit: (5, 1)) }
    set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(384, 296), to: newValue, willBeSet: !newValue.isEmpty, hasBit: (5, 1)) }
  }

  var repeatedImportMessage: [SwiftProtoTesting_Import_ImportMessage] {
    get { return _storage.value(at: SwiftProtobuf._fieldOffset(392, 300), hasBit: (5, 2)) }
    set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(392, 300), to: newValue, willBeSet: !newValue.isEmpty, hasBit: (5, 2)) }
  }

  var repeatedNestedEnum: [SwiftProtoTesting_TestAllTypes.NestedEnum] {
    get { return _storage.value(at: SwiftProtobuf._fieldOffset(400, 304), hasBit: (5, 4)) }
    set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(400, 304), to: newValue, willBeSet: !newValue.isEmpty, hasBit: (5, 4)) }
  }

  var repeatedForeignEnum: [SwiftProtoTesting_ForeignEnum] {
    get { return _storage.value(at: SwiftProtobuf._fieldOffset(408, 308), hasBit: (5, 8)) }
    set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(408, 308), to: newValue, willBeSet: !newValue.isEmpty, hasBit: (5, 8)) }
  }

  var repeatedImportEnum: [SwiftProtoTesting_Import_ImportEnum] {
    get { return _storage.value(at: SwiftProtobuf._fieldOffset(416, 312), hasBit: (5, 16)) }
    set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(416, 312), to: newValue, willBeSet: !newValue.isEmpty, hasBit: (5, 16)) }
  }

  /// Singular with defaults
  var defaultInt32: Int32 {
    get { return _storage.value(at: 68, default: 41, hasBit: (5, 32)) }
    set { _uniqueStorage().updateValue(at: 68, to: newValue, willBeSet: true, hasBit: (5, 32)) }
  }
  /// Returns true if `defaultInt32` has been explicitly set.
  var hasDefaultInt32: Bool { return _storage.isPresent(hasBit: (5, 32)) }
  /// Clears the value of `defaultInt32`. Subsequent reads from it will return its default value.
  mutating func clearDefaultInt32() { _uniqueStorage().clearValue(at: 68, type: Int32.self, hasBit: (5, 32)) }

  var defaultInt64: Int64 {
    get { return _storage.value(at: 160, default: 42, hasBit: (5, 64)) }
    set { _uniqueStorage().updateValue(at: 160, to: newValue, willBeSet: true, hasBit: (5, 64)) }
  }
  /// Returns true if `defaultInt64` has been explicitly set.
  var hasDefaultInt64: Bool { return _storage.isPresent(hasBit: (5, 64)) }
  /// Clears the value of `defaultInt64`. Subsequent reads from it will return its default value.
  mutating func clearDefaultInt64() { _uniqueStorage().clearValue(at: 160, type: Int64.self, hasBit: (5, 64)) }

  var defaultUint32: UInt32 {
    get { return _storage.value(at: 72, default: 43, hasBit: (5, 128)) }
    set { _uniqueStorage().updateValue(at: 72, to: newValue, willBeSet: true, hasBit: (5, 128)) }
  }
  /// Returns true if `defaultUint32` has been explicitly set.
  var hasDefaultUint32: Bool { return _storage.isPresent(hasBit: (5, 128)) }
  /// Clears the value of `defaultUint32`. Subsequent reads from it will return its default value.
  mutating func clearDefaultUint32() { _uniqueStorage().clearValue(at: 72, type: UInt32.self, hasBit: (5, 128)) }

  var defaultUint64: UInt64 {
    get { return _storage.value(at: 168, default: 44, hasBit: (6, 1)) }
    set { _uniqueStorage().updateValue(at: 168, to: newValue, willBeSet: true, hasBit: (6, 1)) }
  }
  /// Returns true if `defaultUint64` has been explicitly set.
  var hasDefaultUint64: Bool { return _storage.isPresent(hasBit: (6, 1)) }
  /// Clears the value of `defaultUint64`. Subsequent reads from it will return its default value.
  mutating func clearDefaultUint64() { _uniqueStorage().clearValue(at: 168, type: UInt64.self, hasBit: (6, 1)) }

  var defaultSint32: Int32 {
    get { return _storage.value(at: 76, default: -45, hasBit: (6, 2)) }
    set { _uniqueStorage().updateValue(at: 76, to: newValue, willBeSet: true, hasBit: (6, 2)) }
  }
  /// Returns true if `defaultSint32` has been explicitly set.
  var hasDefaultSint32: Bool { return _storage.isPresent(hasBit: (6, 2)) }
  /// Clears the value of `defaultSint32`. Subsequent reads from it will return its default value.
  mutating func clearDefaultSint32() { _uniqueStorage().clearValue(at: 76, type: Int32.self, hasBit: (6, 2)) }

  var defaultSint64: Int64 {
    get { return _storage.value(at: 176, default: 46, hasBit: (6, 4)) }
    set { _uniqueStorage().updateValue(at: 176, to: newValue, willBeSet: true, hasBit: (6, 4)) }
  }
  /// Returns true if `defaultSint64` has been explicitly set.
  var hasDefaultSint64: Bool { return _storage.isPresent(hasBit: (6, 4)) }
  /// Clears the value of `defaultSint64`. Subsequent reads from it will return its default value.
  mutating func clearDefaultSint64() { _uniqueStorage().clearValue(at: 176, type: Int64.self, hasBit: (6, 4)) }

  var defaultFixed32: UInt32 {
    get { return _storage.value(at: 80, default: 47, hasBit: (6, 8)) }
    set { _uniqueStorage().updateValue(at: 80, to: newValue, willBeSet: true, hasBit: (6, 8)) }
  }
  /// Returns true if `defaultFixed32` has been explicitly set.
  var hasDefaultFixed32: Bool { return _storage.isPresent(hasBit: (6, 8)) }
  /// Clears the value of `defaultFixed32`. Subsequent reads from it will return its default value.
  mutating func clearDefaultFixed32() { _uniqueStorage().clearValue(at: 80, type: UInt32.self, hasBit: (6, 8)) }

  var defaultFixed64: UInt64 {
    get { return _storage.value(at: 184, default: 48, hasBit: (6, 16)) }
    set { _uniqueStorage().updateValue(at: 184, to: newValue, willBeSet: true, hasBit: (6, 16)) }
  }
  /// Returns true if `defaultFixed64` has been explicitly set.
  var hasDefaultFixed64: Bool { return _storage.isPresent(hasBit: (6, 16)) }
  /// Clears the value of `defaultFixed64`. Subsequent reads from it will return its default value.
  mutating func clearDefaultFixed64() { _uniqueStorage().clearValue(at: 184, type: UInt64.self, hasBit: (6, 16)) }

  var defaultSfixed32: Int32 {
    get { return _storage.value(at: 84, default: 49, hasBit: (6, 32)) }
    set { _uniqueStorage().updateValue(at: 84, to: newValue, willBeSet: true, hasBit: (6, 32)) }
  }
  /// Returns true if `defaultSfixed32` has been explicitly set.
  var hasDefaultSfixed32: Bool { return _storage.isPresent(hasBit: (6, 32)) }
  /// Clears the value of `defaultSfixed32`. Subsequent reads from it will return its default value.
  mutating func clearDefaultSfixed32() { _uniqueStorage().clearValue(at: 84, type: Int32.self, hasBit: (6, 32)) }

  var defaultSfixed64: Int64 {
    get { return _storage.value(at: 192, default: -50, hasBit: (6, 64)) }
    set { _uniqueStorage().updateValue(at: 192, to: newValue, willBeSet: true, hasBit: (6, 64)) }
  }
  /// Returns true if `defaultSfixed64` has been explicitly set.
  var hasDefaultSfixed64: Bool { return _storage.isPresent(hasBit: (6, 64)) }
  /// Clears the value of `defaultSfixed64`. Subsequent reads from it will return its default value.
  mutating func clearDefaultSfixed64() { _uniqueStorage().clearValue(at: 192, type: Int64.self, hasBit: (6, 64)) }

  var defaultFloat: Float {
    get { return _storage.value(at: 88, default: 51.5, hasBit: (6, 128)) }
    set { _uniqueStorage().updateValue(at: 88, to: newValue, willBeSet: true, hasBit: (6, 128)) }
  }
  /// Returns true if `defaultFloat` has been explicitly set.
  var hasDefaultFloat: Bool { return _storage.isPresent(hasBit: (6, 128)) }
  /// Clears the value of `defaultFloat`. Subsequent reads from it will return its default value.
  mutating func clearDefaultFloat() { _uniqueStorage().clearValue(at: 88, type: Float.self, hasBit: (6, 128)) }

  var defaultDouble: Double {
    get { return _storage.value(at: 200, default: 52000, hasBit: (7, 1)) }
    set { _uniqueStorage().updateValue(at: 200, to: newValue, willBeSet: true, hasBit: (7, 1)) }
  }
  /// Returns true if `defaultDouble` has been explicitly set.
  var hasDefaultDouble: Bool { return _storage.isPresent(hasBit: (7, 1)) }
  /// Clears the value of `defaultDouble`. Subsequent reads from it will return its default value.
  mutating func clearDefaultDouble() { _uniqueStorage().clearValue(at: 200, type: Double.self, hasBit: (7, 1)) }

  var defaultBool: Bool {
    get { return _storage.value(at: 29, default: true, hasBit: (7, 2)) }
    set { _uniqueStorage().updateValue(at: 29, to: newValue, willBeSet: true, hasBit: (7, 2)) }
  }
  /// Returns true if `defaultBool` has been explicitly set.
  var hasDefaultBool: Bool { return _storage.isPresent(hasBit: (7, 2)) }
  /// Clears the value of `defaultBool`. Subsequent reads from it will return its default value.
  mutating func clearDefaultBool() { _uniqueStorage().clearValue(at: 29, type: Bool.self, hasBit: (7, 2)) }

  var defaultString: String {
    get { return _storage.value(at: SwiftProtobuf._fieldOffset(464, 348), default: "hello", hasBit: (7, 4)) }
    set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(464, 348), to: newValue, willBeSet: true, hasBit: (7, 4)) }
  }
  /// Returns true if `defaultString` has been explicitly set.
  var hasDefaultString: Bool { return _storage.isPresent(hasBit: (7, 4)) }
  /// Clears the value of `defaultString`. Subsequent reads from it will return its default value.
  mutating func clearDefaultString() { _uniqueStorage().clearValue(at: SwiftProtobuf._fieldOffset(464, 348), type: String.self, hasBit: (7, 4)) }

  var defaultBytes: Data {
    get { return _storage.value(at: SwiftProtobuf._fieldOffset(480, 360), default: Data([119, 111, 114, 108, 100]), hasBit: (7, 8)) }
    set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(480, 360), to: newValue, willBeSet: true, hasBit: (7, 8)) }
  }
  /// Returns true if `defaultBytes` has been explicitly set.
  var hasDefaultBytes: Bool { return _storage.isPresent(hasBit: (7, 8)) }
  /// Clears the value of `defaultBytes`. Subsequent reads from it will return its default value.
  mutating func clearDefaultBytes() { _uniqueStorage().clearValue(at: SwiftProtobuf._fieldOffset(480, 360), type: Data.self, hasBit: (7, 8)) }

  var defaultNestedEnum: SwiftProtoTesting_TestAllTypes.NestedEnum {
    get { return _storage.value(at: 92, default: .bar, hasBit: (7, 16)) }
    set { _uniqueStorage().updateValue(at: 92, to: newValue, willBeSet: true, hasBit: (7, 16)) }
  }
  /// Returns true if `defaultNestedEnum` has been explicitly set.
  var hasDefaultNestedEnum: Bool { return _storage.isPresent(hasBit: (7, 16)) }
  /// Clears the value of `defaultNestedEnum`. Subsequent reads from it will return its default value.
  mutating func clearDefaultNestedEnum() { _uniqueStorage().clearValue(at: 92, type: SwiftProtoTesting_TestAllTypes.NestedEnum.self, hasBit: (7, 16)) }

  var defaultForeignEnum: SwiftProtoTesting_ForeignEnum {
    get { return _storage.value(at: 96, default: .foreignBar, hasBit: (7, 32)) }
    set { _uniqueStorage().updateValue(at: 96, to: newValue, willBeSet: true, hasBit: (7, 32)) }
  }
  /// Returns true if `defaultForeignEnum` has been explicitly set.
  var hasDefaultForeignEnum: Bool { return _storage.isPresent(hasBit: (7, 32)) }
  /// Clears the value of `defaultForeignEnum`. Subsequent reads from it will return its default value.
  mutating func clearDefaultForeignEnum() { _uniqueStorage().clearValue(at: 96, type: SwiftProtoTesting_ForeignEnum.self, hasBit: (7, 32)) }

  var defaultImportEnum: SwiftProtoTesting_Import_ImportEnum {
    get { return _storage.value(at: 100, default: .importBar, hasBit: (7, 64)) }
    set { _uniqueStorage().updateValue(at: 100, to: newValue, willBeSet: true, hasBit: (7, 64)) }
  }
  /// Returns true if `defaultImportEnum` has been explicitly set.
  var hasDefaultImportEnum: Bool { return _storage.isPresent(hasBit: (7, 64)) }
  /// Clears the value of `defaultImportEnum`. Subsequent reads from it will return its default value.
  mutating func clearDefaultImportEnum() { _uniqueStorage().clearValue(at: 100, type: SwiftProtoTesting_Import_ImportEnum.self, hasBit: (7, 64)) }

  /// For oneof test
  var oneofField: SwiftProtoTesting_TestAllTypes.OneOf_OneofField? {
    get {
      let populatedField = _storage.populatedOneofMember(at: 12)
      switch populatedField {
      case 0: return nil
      case 111: return .oneofUint32(oneofUint32)
      case 112: return .oneofNestedMessage(oneofNestedMessage)
      case 113: return .oneofString(oneofString)
      case 114: return .oneofBytes(oneofBytes)
      default: preconditionFailure("Internal logic error; populated oneof field \(populatedField) is not a member of this oneof")
      }
    }
    set {
      switch newValue {
      case nil: _storage.clearPopulatedOneofMember(at: 12)
      case .oneofUint32(let value)?: self.oneofUint32 = value
      case .oneofNestedMessage(let value)?: self.oneofNestedMessage = value
      case .oneofString(let value)?: self.oneofString = value
      case .oneofBytes(let value)?: self.oneofBytes = value
      }
    }
  }

  var oneofUint32: UInt32 {
    get { return _storage.value(at: 104, default: 0, oneofPresence: (12, 111)) }
    set { _uniqueStorage().updateValue(at: 104, to: newValue, oneofPresence: (12, 111)) }
  }

  var oneofNestedMessage: SwiftProtoTesting_TestAllTypes.NestedMessage {
    get { return _storage.value(at: SwiftProtobuf._fieldOffset(424, 316), default: SwiftProtoTesting_TestAllTypes.NestedMessage(), oneofPresence: (12, 112)) }
    set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(424, 316), to: newValue, oneofPresence: (12, 112)) }
  }

  var oneofString: String {
    get { return _storage.value(at: SwiftProtobuf._fieldOffset(496, 372), default: String(), oneofPresence: (12, 113)) }
    set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(496, 372), to: newValue, oneofPresence: (12, 113)) }
  }

  var oneofBytes: Data {
    get { return _storage.value(at: SwiftProtobuf._fieldOffset(512, 384), default: Data(), oneofPresence: (12, 114)) }
    set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(512, 384), to: newValue, oneofPresence: (12, 114)) }
  }

  var unknownFields: SwiftProtobuf.UnknownStorage {
    get { _storage.unknownFields }
    _modify {
      _ = _uniqueStorage()
      yield &_storage.unknownFields
    }
  }

  /// For oneof test
  enum OneOf_OneofField: Equatable, Sendable {
    case oneofUint32(UInt32)
    case oneofNestedMessage(SwiftProtoTesting_TestAllTypes.NestedMessage)
    case oneofString(String)
    case oneofBytes(Data)
  }

  enum NestedEnum: Int, SwiftProtobuf.Enum, Swift.CaseIterable {
    case foo = 1
    case bar = 2
    case baz = 3

    /// Intentionally negative.
    case neg = -1

    init() {
      self = .foo
    }

  }

  struct NestedMessage: @unchecked Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The field name "b" fails to compile in proto1 because it conflicts with
    /// a local variable named "b" in one of the generated methods.  Doh.
    /// This file needs to compile in proto1 to test backwards-compatibility.
    var bb: Int32 {
      get { return _storage.value(at: 4, default: 0, hasBit: (0, 1)) }
      set { _uniqueStorage().updateValue(at: 4, to: newValue, willBeSet: true, hasBit: (0, 1)) }
    }
    /// Returns true if `bb` has been explicitly set.
    var hasBb: Bool { return _storage.isPresent(hasBit: (0, 1)) }
    /// Clears the value of `bb`. Subsequent reads from it will return its default value.
    mutating func clearBb() { _uniqueStorage().clearValue(at: 4, type: Int32.self, hasBit: (0, 1)) }

    var unknownFields: SwiftProtobuf.UnknownStorage {
      get { _storage.unknownFields }
      _modify {
        _ = _uniqueStorage()
        yield &_storage.unknownFields
      }
    }

    init() {}

    private var _storage = SwiftProtobuf._MessageStorage(layout: Self._protobuf_messageLayout)

    private mutating func _uniqueStorage() -> SwiftProtobuf._MessageStorage {
      if !isKnownUniquelyReferenced(&_storage) { _storage = _storage.copy() }
      return _storage
    }
  }

  struct OptionalGroup: @unchecked Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var a: Int32 {
      get { return _storage.value(at: 4, default: 0, hasBit: (0, 1)) }
      set { _uniqueStorage().updateValue(at: 4, to: newValue, willBeSet: true, hasBit: (0, 1)) }
    }
    /// Returns true if `a` has been explicitly set.
    var hasA: Bool { return _storage.isPresent(hasBit: (0, 1)) }
    /// Clears the value of `a`. Subsequent reads from it will return its default value.
    mutating func clearA() { _uniqueStorage().clearValue(at: 4, type: Int32.self, hasBit: (0, 1)) }

    var unknownFields: SwiftProtobuf.UnknownStorage {
      get { _storage.unknownFields }
      _modify {
        _ = _uniqueStorage()
        yield &_storage.unknownFields
      }
    }

    init() {}

    private var _storage = SwiftProtobuf._MessageStorage(layout: Self._protobuf_messageLayout)

    private mutating func _uniqueStorage() -> SwiftProtobuf._MessageStorage {
      if !isKnownUniquelyReferenced(&_storage) { _storage = _storage.copy() }
      return _storage
    }
  }

  struct RepeatedGroup: @unchecked Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var a: Int32 {
      get { return _storage.value(at: 4, default: 0, hasBit: (0, 1)) }
      set { _uniqueStorage().updateValue(at: 4, to: newValue, willBeSet: true, hasBit: (0, 1)) }
    }
    /// Returns true if `a` has been explicitly set.
    var hasA: Bool { return _storage.isPresent(hasBit: (0, 1)) }
    /// Clears the value of `a`. Subsequent reads from it will return its default value.
    mutating func clearA() { _uniqueStorage().clearValue(at: 4, type: Int32.self, hasBit: (0, 1)) }

    var unknownFields: SwiftProtobuf.UnknownStorage {
      get { _storage.unknownFields }
      _modify {
        _ = _uniqueStorage()
        yield &_storage.unknownFields
      }
    }

    init() {}

    private var _storage = SwiftProtobuf._MessageStorage(layout: Self._protobuf_messageLayout)

    private mutating func _uniqueStorage() -> SwiftProtobuf._MessageStorage {
      if !isKnownUniquelyReferenced(&_storage) { _storage = _storage.copy() }
      return _storage
    }
  }

  init() {}

  private var _storage = SwiftProtobuf._MessageStorage(layout: Self._protobuf_messageLayout)

  private mutating func _uniqueStorage() -> SwiftProtobuf._MessageStorage {
    if !isKnownUniquelyReferenced(&_storage) { _storage = _storage.copy() }
    return _storage
  }
}

/// This proto includes a recursively nested message.
struct SwiftProtoTesting_NestedTestAllTypes: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var child: SwiftProtoTesting_NestedTestAllTypes {
    get { return _storage.value(at: SwiftProtobuf._fieldOffset(8, 4), default: SwiftProtoTesting_NestedTestAllTypes(), hasBit: (0, 1)) }
    set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(8, 4), to: newValue, willBeSet: true, hasBit: (0, 1)) }
  }
  /// Returns true if `child` has been explicitly set.
  var hasChild: Bool { return _storage.isPresent(hasBit: (0, 1)) }
  /// Clears the value of `child`. Subsequent reads from it will return its default value.
  mutating func clearChild() { _uniqueStorage().clearValue(at: SwiftProtobuf._fieldOffset(8, 4), type: SwiftProtoTesting_NestedTestAllTypes.self, hasBit: (0, 1)) }

  var payload: SwiftProtoTesting_TestAllTypes {
    get { return _storage.value(at: SwiftProtobuf._fieldOffset(16, 8), default: SwiftProtoTesting_TestAllTypes(), hasBit: (0, 2)) }
    set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(16, 8), to: newValue, willBeSet: true, hasBit: (0, 2)) }
  }
  /// Returns true if `payload` has been explicitly set.
  var hasPayload: Bool { return _storage.isPresent(hasBit: (0, 2)) }
  /// Clears the value of `payload`. Subsequent reads from it will return its default value.
  mutating func clearPayload() { _uniqueStorage().clearValue(at: SwiftProtobuf._fieldOffset(16, 8), type: SwiftProtoTesting_TestAllTypes.self, hasBit: (0, 2)) }

  var repeatedChild: [SwiftProtoTesting_NestedTestAllTypes] {
    get { return _storage.value(at: SwiftProtobuf._fieldOffset(24, 12), hasBit: (0, 4)) }
    set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(24, 12), to: newValue, willBeSet: !newValue.isEmpty, hasBit: (0, 4)) }
  }

  var unknownFields: SwiftProtobuf.UnknownStorage {
    get { _storage.unknownFields }
    _modify {
      _ = _uniqueStorage()
      yield &_storage.unknownFields
    }
  }

  init() {}

  private var _storage = SwiftProtobuf._MessageStorage(layout: Self._protobuf_messageLayout)

  private mutating func _uniqueStorage() -> SwiftProtobuf._MessageStorage {
    if !isKnownUniquelyReferenced(&_storage) { _storage = _storage.copy() }
    return _storage
  }
}

/// Define these after TestAllTypes to make sure the compiler can handle
/// that.
struct SwiftProtoTesting_ForeignMessage: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var c: Int32 {
    get { return _storage.value(at: 4, default: 0, hasBit: (0, 1)) }
    set { _uniqueStorage().updateValue(at: 4, to: newValue, willBeSet: true, hasBit: (0, 1)) }
  }
  /// Returns true if `c` has been explicitly set.
  var hasC: Bool { return _storage.isPresent(hasBit: (0, 1)) }
  /// Clears the value of `c`. Subsequent reads from it will return its default value.
  mutating func clearC() { _uniqueStorage().clearValue(at: 4, type: Int32.self, hasBit: (0, 1)) }

  var d: Int32 {
    get { return _storage.value(at: 8, default: 0, hasBit: (0, 2)) }
    set { _uniqueStorage().updateValue(at: 8, to: newValue, willBeSet: true, hasBit: (0, 2)) }
  }
  /// Returns true if `d` has been explicitly set.
  var hasD: Bool { return _storage.isPresent(hasBit: (0, 2)) }
  /// Clears the value of `d`. Subsequent reads from it will return its default value.
  mutating func clearD() { _uniqueStorage().clearValue(at: 8, type: Int32.self, hasBit: (0, 2)) }

  var unknownFields: SwiftProtobuf.UnknownStorage {
    get { _storage.unknownFields }
    _modify {
      _ = _uniqueStorage()
      yield &_storage.unknownFields
    }
  }

  init() {}

  private var _storage = SwiftProtobuf._MessageStorage(layout: Self._protobuf_messageLayout)

  private mutating func _uniqueStorage() -> SwiftProtobuf._MessageStorage {
    if !isKnownUniquelyReferenced(&_storage) { _storage = _storage.copy() }
    return _storage
  }
}

struct SwiftProtoTesting_TestAllExtensions: SwiftProtobuf.ExtensibleMessage, @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields: SwiftProtobuf.UnknownStorage {
    get { _storage.unknownFields }
    _modify {
      _ = _uniqueStorage()
      yield &_storage.unknownFields
    }
  }

  init() {}

  var _protobuf_extensionFieldValues: SwiftProtobuf.ExtensionFieldValueSet {
    get { _storage.extensionFieldValues }
    _modify {
      _ = _uniqueStorage()
      yield &_storage.extensionFieldValues
    }
  }
  private var _storage = SwiftProtobuf._MessageStorage(layout: Self._protobuf_messageLayout)

  private mutating func _uniqueStorage() -> SwiftProtobuf._MessageStorage {
    if !isKnownUniquelyReferenced(&_storage) { _storage = _storage.copy() }
    return _storage
  }
}

struct SwiftProtoTesting_OptionalGroup_extension: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var a: Int32 {
    get { return _storage.value(at: 4, default: 0, hasBit: (0, 1)) }
    set { _uniqueStorage().updateValue(at: 4, to: newValue, willBeSet: true, hasBit: (0, 1)) }
  }
  /// Returns true if `a` has been explicitly set.
  var hasA: Bool { return _storage.isPresent(hasBit: (0, 1)) }
  /// Clears the value of `a`. Subsequent reads from it will return its default value.
  mutating func clearA() { _uniqueStorage().clearValue(at: 4, type: Int32.self, hasBit: (0, 1)) }

  var unknownFields: SwiftProtobuf.UnknownStorage {
    get { _storage.unknownFields }
    _modify {
      _ = _uniqueStorage()
      yield &_storage.unknownFields
    }
  }

  init() {}

  private var _storage = SwiftProtobuf._MessageStorage(layout: Self._protobuf_messageLayout)

  private mutating func _uniqueStorage() -> SwiftProtobuf._MessageStorage {
    if !isKnownUniquelyReferenced(&_storage) { _storage = _storage.copy() }
    return _storage
  }
}

struct SwiftProtoTesting_RepeatedGroup_extension: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var a: Int32 {
    get { return _storage.value(at: 4, default: 0, hasBit: (0, 1)) }
    set { _uniqueStorage().updateValue(at: 4, to: newValue, willBeSet: true, hasBit: (0, 1)) }
  }
  /// Returns true if `a` has been explicitly set.
  var hasA: Bool { return _storage.isPresent(hasBit: (0, 1)) }
  /// Clears the value of `a`. Subsequent reads from it will return its default value.
  mutating func clearA() { _uniqueStorage().clearValue(at: 4, type: Int32.self, hasBit: (0, 1)) }

  var unknownFields: SwiftProtobuf.UnknownStorage {
    get { _storage.unknownFields }
    _modify {
      _ = _uniqueStorage()
      yield &_storage.unknownFields
    }
  }

  init() {}

  private var _storage = SwiftProtobuf._MessageStorage(layout: Self._protobuf_messageLayout)

  private mutating func _uniqueStorage() -> SwiftProtobuf._MessageStorage {
    if !isKnownUniquelyReferenced(&_storage) { _storage = _storage.copy() }
    return _storage
  }
}

struct SwiftProtoTesting_TestNestedExtension: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields: SwiftProtobuf.UnknownStorage {
    get { _storage.unknownFields }
    _modify {
      _ = _uniqueStorage()
      yield &_storage.unknownFields
    }
  }

  init() {}

  private var _storage = SwiftProtobuf._MessageStorage(layout: Self._protobuf_messageLayout)

  private mutating func _uniqueStorage() -> SwiftProtobuf._MessageStorage {
    if !isKnownUniquelyReferenced(&_storage) { _storage = _storage.copy() }
    return _storage
  }
}

/// We have separate messages for testing required fields because it's
/// annoying to have to fill in required fields in TestProto in order to
/// do anything with it.  Note that we don't need to test every type of
/// required filed because the code output is basically identical to
/// optional fields for all types.
struct SwiftProtoTesting_TestRequired: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var a: Int32 {
    get { return _storage.value(at: 8, default: 0, hasBit: (0, 1)) }
    set { _uniqueStorage().updateValue(at: 8, to: newValue, willBeSet: true, hasBit: (0, 1)) }
  }
  /// Returns true if `a` has been explicitly set.
  var hasA: Bool { return _storage.isPresent(hasBit: (0, 1)) }
  /// Clears the value of `a`. Subsequent reads from it will return its default value.
  mutating func clearA() { _uniqueStorage().clearValue(at: 8, type: Int32.self, hasBit: (0, 1)) }

  var dummy2: Int32 {
    get { return _storage.value(at: 12, default: 0, hasBit: (0, 8)) }
    set { _uniqueStorage().updateValue(at: 12, to: newValue, willBeSet: true, hasBit: (0, 8)) }
  }
  /// Returns true if `dummy2` has been explicitly set.
  var hasDummy2: Bool { return _storage.isPresent(hasBit: (0, 8)) }
  /// Clears the value of `dummy2`. Subsequent reads from it will return its default value.
  mutating func clearDummy2() { _uniqueStorage().clearValue(at: 12, type: Int32.self, hasBit: (0, 8)) }

  var b: Int32 {
    get { return _storage.value(at: 16, default: 0, hasBit: (0, 2)) }
    set { _uniqueStorage().updateValue(at: 16, to: newValue, willBeSet: true, hasBit: (0, 2)) }
  }
  /// Returns true if `b` has been explicitly set.
  var hasB: Bool { return _storage.isPresent(hasBit: (0, 2)) }
  /// Clears the value of `b`. Subsequent reads from it will return its default value.
  mutating func clearB() { _uniqueStorage().clearValue(at: 16, type: Int32.self, hasBit: (0, 2)) }

  /// Pad the field count to 32 so that we can test that IsInitialized()
  /// properly checks multiple elements of has_bits_.
  var dummy4: Int32 {
    get { return _storage.value(at: 20, default: 0, hasBit: (0, 16)) }
    set { _uniqueStorage().updateValue(at: 20, to: newValue, willBeSet: true, hasBit: (0, 16)) }
  }
  /// Returns true if `dummy4` has been explicitly set.
  var hasDummy4: Bool { return _storage.isPresent(hasBit: (0, 16)) }
  /// Clears the value of `dummy4`. Subsequent reads from it will return its default value.
  mutating func clearDummy4() { _uniqueStorage().clearValue(at: 20, type: Int32.self, hasBit: (0, 16)) }

  var dummy5: Int32 {
    get { return _storage.value(at: 24, default: 0, hasBit: (0, 32)) }
    set { _uniqueStorage().updateValue(at: 24, to: newValue, willBeSet: true, hasBit: (0, 32)) }
  }
  /// Returns true if `dummy5` has been explicitly set.
  var hasDummy5: Bool { return _storage.isPresent(hasBit: (0, 32)) }
  /// Clears the value of `dummy5`. Subsequent reads from it will return its default value.
  mutating func clearDummy5() { _uniqueStorage().clearValue(at: 24, type: Int32.self, hasBit: (0, 32)) }

  var dummy6: Int32 {
    get { return _storage.value(at: 28, default: 0, hasBit: (0, 64)) }
    set { _uniqueStorage().updateValue(at: 28, to: newValue, willBeSet: true, hasBit: (0, 64)) }
  }
  /// Returns true if `dummy6` has been explicitly set.
  var hasDummy6: Bool { return _storage.isPresent(hasBit: (0, 64)) }
  /// Clears the value of `dummy6`. Subsequent reads from it will return its default value.
  mutating func clearDummy6() { _uniqueStorage().clearValue(at: 28, type: Int32.self, hasBit: (0, 64)) }

  var dummy7: Int32 {
    get { return _storage.value(at: 32, default: 0, hasBit: (0, 128)) }
    set { _uniqueStorage().updateValue(at: 32, to: newValue, willBeSet: true, hasBit: (0, 128)) }
  }
  /// Returns true if `dummy7` has been explicitly set.
  var hasDummy7: Bool { return _storage.isPresent(hasBit: (0, 128)) }
  /// Clears the value of `dummy7`. Subsequent reads from it will return its default value.
  mutating func clearDummy7() { _uniqueStorage().clearValue(at: 32, type: Int32.self, hasBit: (0, 128)) }

  var dummy8: Int32 {
    get { return _storage.value(at: 36, default: 0, hasBit: (1, 1)) }
    set { _uniqueStorage().updateValue(at: 36, to: newValue, willBeSet: true, hasBit: (1, 1)) }
  }
  /// Returns true if `dummy8` has been explicitly set.
  var hasDummy8: Bool { return _storage.isPresent(hasBit: (1, 1)) }
  /// Clears the value of `dummy8`. Subsequent reads from it will return its default value.
  mutating func clearDummy8() { _uniqueStorage().clearValue(at: 36, type: Int32.self, hasBit: (1, 1)) }

  var dummy9: Int32 {
    get { return _storage.value(at: 40, default: 0, hasBit: (1, 2)) }
    set { _uniqueStorage().updateValue(at: 40, to: newValue, willBeSet: true, hasBit: (1, 2)) }
  }
  /// Returns true if `dummy9` has been explicitly set.
  var hasDummy9: Bool { return _storage.isPresent(hasBit: (1, 2)) }
  /// Clears the value of `dummy9`. Subsequent reads from it will return its default value.
  mutating func clearDummy9() { _uniqueStorage().clearValue(at: 40, type: Int32.self, hasBit: (1, 2)) }

  var dummy10: Int32 {
    get { return _storage.value(at: 44, default: 0, hasBit: (1, 4)) }
    set { _uniqueStorage().updateValue(at: 44, to: newValue, willBeSet: true, hasBit: (1, 4)) }
  }
  /// Returns true if `dummy10` has been explicitly set.
  var hasDummy10: Bool { return _storage.isPresent(hasBit: (1, 4)) }
  /// Clears the value of `dummy10`. Subsequent reads from it will return its default value.
  mutating func clearDummy10() { _uniqueStorage().clearValue(at: 44, type: Int32.self, hasBit: (1, 4)) }

  var dummy11: Int32 {
    get { return _storage.value(at: 48, default: 0, hasBit: (1, 8)) }
    set { _uniqueStorage().updateValue(at: 48, to: newValue, willBeSet: true, hasBit: (1, 8)) }
  }
  /// Returns true if `dummy11` has been explicitly set.
  var hasDummy11: Bool { return _storage.isPresent(hasBit: (1, 8)) }
  /// Clears the value of `dummy11`. Subsequent reads from it will return its default value.
  mutating func clearDummy11() { _uniqueStorage().clearValue(at: 48, type: Int32.self, hasBit: (1, 8)) }

  var dummy12: Int32 {
    get { return _storage.value(at: 52, default: 0, hasBit: (1, 16)) }
    set { _uniqueStorage().updateValue(at: 52, to: newValue, willBeSet: true, hasBit: (1, 16)) }
  }
  /// Returns true if `dummy12` has been explicitly set.
  var hasDummy12: Bool { return _storage.isPresent(hasBit: (1, 16)) }
  /// Clears the value of `dummy12`. Subsequent reads from it will return its default value.
  mutating func clearDummy12() { _uniqueStorage().clearValue(at: 52, type: Int32.self, hasBit: (1, 16)) }

  var dummy13: Int32 {
    get { return _storage.value(at: 56, default: 0, hasBit: (1, 32)) }
    set { _uniqueStorage().updateValue(at: 56, to: newValue, willBeSet: true, hasBit: (1, 32)) }
  }
  /// Returns true if `dummy13` has been explicitly set.
  var hasDummy13: Bool { return _storage.isPresent(hasBit: (1, 32)) }
  /// Clears the value of `dummy13`. Subsequent reads from it will return its default value.
  mutating func clearDummy13() { _uniqueStorage().clearValue(at: 56, type: Int32.self, hasBit: (1, 32)) }

  var dummy14: Int32 {
    get { return _storage.value(at: 60, default: 0, hasBit: (1, 64)) }
    set { _uniqueStorage().updateValue(at: 60, to: newValue, willBeSet: true, hasBit: (1, 64)) }
  }
  /// Returns true if `dummy14` has been explicitly set.
  var hasDummy14: Bool { return _storage.isPresent(hasBit: (1, 64)) }
  /// Clears the value of `dummy14`. Subsequent reads from it will return its default value.
  mutating func clearDummy14() { _uniqueStorage().clearValue(at: 60, type: Int32.self, hasBit: (1, 64)) }

  var dummy15: Int32 {
    get { return _storage.value(at: 64, default: 0, hasBit: (1, 128)) }
    set { _uniqueStorage().updateValue(at: 64, to: newValue, willBeSet: true, hasBit: (1, 128)) }
  }
  /// Returns true if `dummy15` has been explicitly set.
  var hasDummy15: Bool { return _storage.isPresent(hasBit: (1, 128)) }
  /// Clears the value of `dummy15`. Subsequent reads from it will return its default value.
  mutating func clearDummy15() { _uniqueStorage().clearValue(at: 64, type: Int32.self, hasBit: (1, 128)) }

  var dummy16: Int32 {
    get { return _storage.value(at: 68, default: 0, hasBit: (2, 1)) }
    set { _uniqueStorage().updateValue(at: 68, to: newValue, willBeSet: true, hasBit: (2, 1)) }
  }
  /// Returns true if `dummy16` has been explicitly set.
  var hasDummy16: Bool { return _storage.isPresent(hasBit: (2, 1)) }
  /// Clears the value of `dummy16`. Subsequent reads from it will return its default value.
  mutating func clearDummy16() { _uniqueStorage().clearValue(at: 68, type: Int32.self, hasBit: (2, 1)) }

  var dummy17: Int32 {
    get { return _storage.value(at: 72, default: 0, hasBit: (2, 2)) }
    set { _uniqueStorage().updateValue(at: 72, to: newValue, willBeSet: true, hasBit: (2, 2)) }
  }
  /// Returns true if `dummy17` has been explicitly set.
  var hasDummy17: Bool { return _storage.isPresent(hasBit: (2, 2)) }
  /// Clears the value of `dummy17`. Subsequent reads from it will return its default value.
  mutating func clearDummy17() { _uniqueStorage().clearValue(at: 72, type: Int32.self, hasBit: (2, 2)) }

  var dummy18: Int32 {
    get { return _storage.value(at: 76, default: 0, hasBit: (2, 4)) }
    set { _uniqueStorage().updateValue(at: 76, to: newValue, willBeSet: true, hasBit: (2, 4)) }
  }
  /// Returns true if `dummy18` has been explicitly set.
  var hasDummy18: Bool { return _storage.isPresent(hasBit: (2, 4)) }
  /// Clears the value of `dummy18`. Subsequent reads from it will return its default value.
  mutating func clearDummy18() { _uniqueStorage().clearValue(at: 76, type: Int32.self, hasBit: (2, 4)) }

  var dummy19: Int32 {
    get { return _storage.value(at: 80, default: 0, hasBit: (2, 8)) }
    set { _uniqueStorage().updateValue(at: 80, to: newValue, willBeSet: true, hasBit: (2, 8)) }
  }
  /// Returns true if `dummy19` has been explicitly set.
  var hasDummy19: Bool { return _storage.isPresent(hasBit: (2, 8)) }
  /// Clears the value of `dummy19`. Subsequent reads from it will return its default value.
  mutating func clearDummy19() { _uniqueStorage().clearValue(at: 80, type: Int32.self, hasBit: (2, 8)) }

  var dummy20: Int32 {
    get { return _storage.value(at: 84, default: 0, hasBit: (2, 16)) }
    set { _uniqueStorage().updateValue(at: 84, to: newValue, willBeSet: true, hasBit: (2, 16)) }
  }
  /// Returns true if `dummy20` has been explicitly set.
  var hasDummy20: Bool { return _storage.isPresent(hasBit: (2, 16)) }
  /// Clears the value of `dummy20`. Subsequent reads from it will return its default value.
  mutating func clearDummy20() { _uniqueStorage().clearValue(at: 84, type: Int32.self, hasBit: (2, 16)) }

  var dummy21: Int32 {
    get { return _storage.value(at: 88, default: 0, hasBit: (2, 32)) }
    set { _uniqueStorage().updateValue(at: 88, to: newValue, willBeSet: true, hasBit: (2, 32)) }
  }
  /// Returns true if `dummy21` has been explicitly set.
  var hasDummy21: Bool { return _storage.isPresent(hasBit: (2, 32)) }
  /// Clears the value of `dummy21`. Subsequent reads from it will return its default value.
  mutating func clearDummy21() { _uniqueStorage().clearValue(at: 88, type: Int32.self, hasBit: (2, 32)) }

  var dummy22: Int32 {
    get { return _storage.value(at: 92, default: 0, hasBit: (2, 64)) }
    set { _uniqueStorage().updateValue(at: 92, to: newValue, willBeSet: true, hasBit: (2, 64)) }
  }
  /// Returns true if `dummy22` has been explicitly set.
  var hasDummy22: Bool { return _storage.isPresent(hasBit: (2, 64)) }
  /// Clears the value of `dummy22`. Subsequent reads from it will return its default value.
  mutating func clearDummy22() { _uniqueStorage().clearValue(at: 92, type: Int32.self, hasBit: (2, 64)) }

  var dummy23: Int32 {
    get { return _storage.value(at: 96, default: 0, hasBit: (2, 128)) }
    set { _uniqueStorage().updateValue(at: 96, to: newValue, willBeSet: true, hasBit: (2, 128)) }
  }
  /// Returns true if `dummy23` has been explicitly set.
  var hasDummy23: Bool { return _storage.isPresent(hasBit: (2, 128)) }
  /// Clears the value of `dummy23`. Subsequent reads from it will return its default value.
  mutating func clearDummy23() { _uniqueStorage().clearValue(at: 96, type: Int32.self, hasBit: (2, 128)) }

  var dummy24: Int32 {
    get { return _storage.value(at: 100, default: 0, hasBit: (3, 1)) }
    set { _uniqueStorage().updateValue(at: 100, to: newValue, willBeSet: true, hasBit: (3, 1)) }
  }
  /// Returns true if `dummy24` has been explicitly set.
  var hasDummy24: Bool { return _storage.isPresent(hasBit: (3, 1)) }
  /// Clears the value of `dummy24`. Subsequent reads from it will return its default value.
  mutating func clearDummy24() { _uniqueStorage().clearValue(at: 100, type: Int32.self, hasBit: (3, 1)) }

  var dummy25: Int32 {
    get { return _storage.value(at: 104, default: 0, hasBit: (3, 2)) }
    set { _uniqueStorage().updateValue(at: 104, to: newValue, willBeSet: true, hasBit: (3, 2)) }
  }
  /// Returns true if `dummy25` has been explicitly set.
  var hasDummy25: Bool { return _storage.isPresent(hasBit: (3, 2)) }
  /// Clears the value of `dummy25`. Subsequent reads from it will return its default value.
  mutating func clearDummy25() { _uniqueStorage().clearValue(at: 104, type: Int32.self, hasBit: (3, 2)) }

  var dummy26: Int32 {
    get { return _storage.value(at: 108, default: 0, hasBit: (3, 4)) }
    set { _uniqueStorage().updateValue(at: 108, to: newValue, willBeSet: true, hasBit: (3, 4)) }
  }
  /// Returns true if `dummy26` has been explicitly set.
  var hasDummy26: Bool { return _storage.isPresent(hasBit: (3, 4)) }
  /// Clears the value of `dummy26`. Subsequent reads from it will return its default value.
  mutating func clearDummy26() { _uniqueStorage().clearValue(at: 108, type: Int32.self, hasBit: (3, 4)) }

  var dummy27: Int32 {
    get { return _storage.value(at: 112, default: 0, hasBit: (3, 8)) }
    set { _uniqueStorage().updateValue(at: 112, to: newValue, willBeSet: true, hasBit: (3, 8)) }
  }
  /// Returns true if `dummy27` has been explicitly set.
  var hasDummy27: Bool { return _storage.isPresent(hasBit: (3, 8)) }
  /// Clears the value of `dummy27`. Subsequent reads from it will return its default value.
  mutating func clearDummy27() { _uniqueStorage().clearValue(at: 112, type: Int32.self, hasBit: (3, 8)) }

  var dummy28: Int32 {
    get { return _storage.value(at: 116, default: 0, hasBit: (3, 16)) }
    set { _uniqueStorage().updateValue(at: 116, to: newValue, willBeSet: true, hasBit: (3, 16)) }
  }
  /// Returns true if `dummy28` has been explicitly set.
  var hasDummy28: Bool { return _storage.isPresent(hasBit: (3, 16)) }
  /// Clears the value of `dummy28`. Subsequent reads from it will return its default value.
  mutating func clearDummy28() { _uniqueStorage().clearValue(at: 116, type: Int32.self, hasBit: (3, 16)) }

  var dummy29: Int32 {
    get { return _storage.value(at: 120, default: 0, hasBit: (3, 32)) }
    set { _uniqueStorage().updateValue(at: 120, to: newValue, willBeSet: true, hasBit: (3, 32)) }
  }
  /// Returns true if `dummy29` has been explicitly set.
  var hasDummy29: Bool { return _storage.isPresent(hasBit: (3, 32)) }
  /// Clears the value of `dummy29`. Subsequent reads from it will return its default value.
  mutating func clearDummy29() { _uniqueStorage().clearValue(at: 120, type: Int32.self, hasBit: (3, 32)) }

  var dummy30: Int32 {
    get { return _storage.value(at: 124, default: 0, hasBit: (3, 64)) }
    set { _uniqueStorage().updateValue(at: 124, to: newValue, willBeSet: true, hasBit: (3, 64)) }
  }
  /// Returns true if `dummy30` has been explicitly set.
  var hasDummy30: Bool { return _storage.isPresent(hasBit: (3, 64)) }
  /// Clears the value of `dummy30`. Subsequent reads from it will return its default value.
  mutating func clearDummy30() { _uniqueStorage().clearValue(at: 124, type: Int32.self, hasBit: (3, 64)) }

  var dummy31: Int32 {
    get { return _storage.value(at: 128, default: 0, hasBit: (3, 128)) }
    set { _uniqueStorage().updateValue(at: 128, to: newValue, willBeSet: true, hasBit: (3, 128)) }
  }
  /// Returns true if `dummy31` has been explicitly set.
  var hasDummy31: Bool { return _storage.isPresent(hasBit: (3, 128)) }
  /// Clears the value of `dummy31`. Subsequent reads from it will return its default value.
  mutating func clearDummy31() { _uniqueStorage().clearValue(at: 128, type: Int32.self, hasBit: (3, 128)) }

  var dummy32: Int32 {
    get { return _storage.value(at: 132, default: 0, hasBit: (4, 1)) }
    set { _uniqueStorage().updateValue(at: 132, to: newValue, willBeSet: true, hasBit: (4, 1)) }
  }
  /// Returns true if `dummy32` has been explicitly set.
  var hasDummy32: Bool { return _storage.isPresent(hasBit: (4, 1)) }
  /// Clears the value of `dummy32`. Subsequent reads from it will return its default value.
  mutating func clearDummy32() { _uniqueStorage().clearValue(at: 132, type: Int32.self, hasBit: (4, 1)) }

  var c: Int32 {
    get { return _storage.value(at: 136, default: 0, hasBit: (0, 4)) }
    set { _uniqueStorage().updateValue(at: 136, to: newValue, willBeSet: true, hasBit: (0, 4)) }
  }
  /// Returns true if `c` has been explicitly set.
  var hasC: Bool { return _storage.isPresent(hasBit: (0, 4)) }
  /// Clears the value of `c`. Subsequent reads from it will return its default value.
  mutating func clearC() { _uniqueStorage().clearValue(at: 136, type: Int32.self, hasBit: (0, 4)) }

  var optionalForeign: SwiftProtoTesting_ForeignMessage {
    get { return _storage.value(at: SwiftProtobuf._fieldOffset(144, 140), default: SwiftProtoTesting_ForeignMessage(), hasBit: (4, 2)) }
    set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(144, 140), to: newValue, willBeSet: true, hasBit: (4, 2)) }
  }
  /// Returns true if `optionalForeign` has been explicitly set.
  var hasOptionalForeign: Bool { return _storage.isPresent(hasBit: (4, 2)) }
  /// Clears the value of `optionalForeign`. Subsequent reads from it will return its default value.
  mutating func clearOptionalForeign() { _uniqueStorage().clearValue(at: SwiftProtobuf._fieldOffset(144, 140), type: SwiftProtoTesting_ForeignMessage.self, hasBit: (4, 2)) }

  var unknownFields: SwiftProtobuf.UnknownStorage {
    get { _storage.unknownFields }
    _modify {
      _ = _uniqueStorage()
      yield &_storage.unknownFields
    }
  }

  init() {}

  private var _storage = SwiftProtobuf._MessageStorage(layout: Self._protobuf_messageLayout)

  private mutating func _uniqueStorage() -> SwiftProtobuf._MessageStorage {
    if !isKnownUniquelyReferenced(&_storage) { _storage = _storage.copy() }
    return _storage
  }
}

struct SwiftProtoTesting_TestRequiredForeign: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var optionalMessage: SwiftProtoTesting_TestRequired {
    get { return _storage.value(at: 8, default: SwiftProtoTesting_TestRequired(), hasBit: (0, 1)) }
    set { _uniqueStorage().updateValue(at: 8, to: newValue, willBeSet: true, hasBit: (0, 1)) }
  }
  /// Returns true if `optionalMessage` has been explicitly set.
  var hasOptionalMessage: Bool { return _storage.isPresent(hasBit: (0, 1)) }
  /// Clears the value of `optionalMessage`. Subsequent reads from it will return its default value.
  mutating func clearOptionalMessage() { _uniqueStorage().clearValue(at: 8, type: SwiftProtoTesting_TestRequired.self, hasBit: (0, 1)) }

  var repeatedMessage: [SwiftProtoTesting_TestRequired] {
    get { return _storage.value(at: SwiftProtobuf._fieldOffset(16, 12), hasBit: (0, 2)) }
    set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(16, 12), to: newValue, willBeSet: !newValue.isEmpty, hasBit: (0, 2)) }
  }

  var dummy: Int32 {
    get { return _storage.value(at: 4, default: 0, hasBit: (0, 4)) }
    set { _uniqueStorage().updateValue(at: 4, to: newValue, willBeSet: true, hasBit: (0, 4)) }
  }
  /// Returns true if `dummy` has been explicitly set.
  var hasDummy: Bool { return _storage.isPresent(hasBit: (0, 4)) }
  /// Clears the value of `dummy`. Subsequent reads from it will return its default value.
  mutating func clearDummy() { _uniqueStorage().clearValue(at: 4, type: Int32.self, hasBit: (0, 4)) }

  var unknownFields: SwiftProtobuf.UnknownStorage {
    get { _storage.unknownFields }
    _modify {
      _ = _uniqueStorage()
      yield &_storage.unknownFields
    }
  }

  init() {}

  private var _storage = SwiftProtobuf._MessageStorage(layout: Self._protobuf_messageLayout)

  private mutating func _uniqueStorage() -> SwiftProtobuf._MessageStorage {
    if !isKnownUniquelyReferenced(&_storage) { _storage = _storage.copy() }
    return _storage
  }
}

struct SwiftProtoTesting_TestRequiredMessage: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var optionalMessage: SwiftProtoTesting_TestRequired {
    get { return _storage.value(at: SwiftProtobuf._fieldOffset(8, 4), default: SwiftProtoTesting_TestRequired(), hasBit: (0, 2)) }
    set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(8, 4), to: newValue, willBeSet: true, hasBit: (0, 2)) }
  }
  /// Returns true if `optionalMessage` has been explicitly set.
  var hasOptionalMessage: Bool { return _storage.isPresent(hasBit: (0, 2)) }
  /// Clears the value of `optionalMessage`. Subsequent reads from it will return its default value.
  mutating func clearOptionalMessage() { _uniqueStorage().clearValue(at: SwiftProtobuf._fieldOffset(8, 4), type: SwiftProtoTesting_TestRequired.self, hasBit: (0, 2)) }

  var repeatedMessage: [SwiftProtoTesting_TestRequired] {
    get { return _storage.value(at: SwiftProtobuf._fieldOffset(16, 8), hasBit: (0, 4)) }
    set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(16, 8), to: newValue, willBeSet: !newValue.isEmpty, hasBit: (0, 4)) }
  }

  var requiredMessage: SwiftProtoTesting_TestRequired {
    get { return _storage.value(at: SwiftProtobuf._fieldOffset(24, 12), default: SwiftProtoTesting_TestRequired(), hasBit: (0, 1)) }
    set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(24, 12), to: newValue, willBeSet: true, hasBit: (0, 1)) }
  }
  /// Returns true if `requiredMessage` has been explicitly set.
  var hasRequiredMessage: Bool { return _storage.isPresent(hasBit: (0, 1)) }
  /// Clears the value of `requiredMessage`. Subsequent reads from it will return its default value.
  mutating func clearRequiredMessage() { _uniqueStorage().clearValue(at: SwiftProtobuf._fieldOffset(24, 12), type: SwiftProtoTesting_TestRequired.self, hasBit: (0, 1)) }

  var unknownFields: SwiftProtobuf.UnknownStorage {
    get { _storage.unknownFields }
    _modify {
      _ = _uniqueStorage()
      yield &_storage.unknownFields
    }
  }

  init() {}

  private var _storage = SwiftProtobuf._MessageStorage(layout: Self._protobuf_messageLayout)

  private mutating func _uniqueStorage() -> SwiftProtobuf._MessageStorage {
    if !isKnownUniquelyReferenced(&_storage) { _storage = _storage.copy() }
    return _storage
  }
}

/// TestEmptyMessage is used to test unknown field support.
struct SwiftProtoTesting_TestEmptyMessage: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields: SwiftProtobuf.UnknownStorage {
    get { _storage.unknownFields }
    _modify {
      _ = _uniqueStorage()
      yield &_storage.unknownFields
    }
  }

  init() {}

  private var _storage = SwiftProtobuf._MessageStorage(layout: Self._protobuf_messageLayout)

  private mutating func _uniqueStorage() -> SwiftProtobuf._MessageStorage {
    if !isKnownUniquelyReferenced(&_storage) { _storage = _storage.copy() }
    return _storage
  }
}

/// Test that really large tag numbers don't break anything.
struct SwiftProtoTesting_TestReallyLargeTagNumber: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The largest possible tag number is 2^28 - 1, since the wire format uses
  /// three bits to communicate wire type.
  var a: Int32 {
    get { return _storage.value(at: 4, default: 0, hasBit: (0, 1)) }
    set { _uniqueStorage().updateValue(at: 4, to: newValue, willBeSet: true, hasBit: (0, 1)) }
  }
  /// Returns true if `a` has been explicitly set.
  var hasA: Bool { return _storage.isPresent(hasBit: (0, 1)) }
  /// Clears the value of `a`. Subsequent reads from it will return its default value.
  mutating func clearA() { _uniqueStorage().clearValue(at: 4, type: Int32.self, hasBit: (0, 1)) }

  var bb: Int32 {
    get { return _storage.value(at: 8, default: 0, hasBit: (0, 2)) }
    set { _uniqueStorage().updateValue(at: 8, to: newValue, willBeSet: true, hasBit: (0, 2)) }
  }
  /// Returns true if `bb` has been explicitly set.
  var hasBb: Bool { return _storage.isPresent(hasBit: (0, 2)) }
  /// Clears the value of `bb`. Subsequent reads from it will return its default value.
  mutating func clearBb() { _uniqueStorage().clearValue(at: 8, type: Int32.self, hasBit: (0, 2)) }

  var unknownFields: SwiftProtobuf.UnknownStorage {
    get { _storage.unknownFields }
    _modify {
      _ = _uniqueStorage()
      yield &_storage.unknownFields
    }
  }

  init() {}

  private var _storage = SwiftProtobuf._MessageStorage(layout: Self._protobuf_messageLayout)

  private mutating func _uniqueStorage() -> SwiftProtobuf._MessageStorage {
    if !isKnownUniquelyReferenced(&_storage) { _storage = _storage.copy() }
    return _storage
  }
}

struct SwiftProtoTesting_TestRecursiveMessage: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var a: SwiftProtoTesting_TestRecursiveMessage {
    get { return _storage.value(at: 8, default: SwiftProtoTesting_TestRecursiveMessage(), hasBit: (0, 1)) }
    set { _uniqueStorage().updateValue(at: 8, to: newValue, willBeSet: true, hasBit: (0, 1)) }
  }
  /// Returns true if `a` has been explicitly set.
  var hasA: Bool { return _storage.isPresent(hasBit: (0, 1)) }
  /// Clears the value of `a`. Subsequent reads from it will return its default value.
  mutating func clearA() { _uniqueStorage().clearValue(at: 8, type: SwiftProtoTesting_TestRecursiveMessage.self, hasBit: (0, 1)) }

  var i: Int32 {
    get { return _storage.value(at: 4, default: 0, hasBit: (0, 2)) }
    set { _uniqueStorage().updateValue(at: 4, to: newValue, willBeSet: true, hasBit: (0, 2)) }
  }
  /// Returns true if `i` has been explicitly set.
  var hasI: Bool { return _storage.isPresent(hasBit: (0, 2)) }
  /// Clears the value of `i`. Subsequent reads from it will return its default value.
  mutating func clearI() { _uniqueStorage().clearValue(at: 4, type: Int32.self, hasBit: (0, 2)) }

  var unknownFields: SwiftProtobuf.UnknownStorage {
    get { _storage.unknownFields }
    _modify {
      _ = _uniqueStorage()
      yield &_storage.unknownFields
    }
  }

  init() {}

  private var _storage = SwiftProtobuf._MessageStorage(layout: Self._protobuf_messageLayout)

  private mutating func _uniqueStorage() -> SwiftProtobuf._MessageStorage {
    if !isKnownUniquelyReferenced(&_storage) { _storage = _storage.copy() }
    return _storage
  }
}

/// We list fields out of order, to ensure that we're using field number and not
/// field index to determine serialization order.
struct SwiftProtoTesting_TestFieldOrderings: SwiftProtobuf.ExtensibleMessage, @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var myString: String {
    get { return _storage.value(at: SwiftProtobuf._fieldOffset(32, 24), default: String(), hasBit: (0, 2)) }
    set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(32, 24), to: newValue, willBeSet: true, hasBit: (0, 2)) }
  }
  /// Returns true if `myString` has been explicitly set.
  var hasMyString: Bool { return _storage.isPresent(hasBit: (0, 2)) }
  /// Clears the value of `myString`. Subsequent reads from it will return its default value.
  mutating func clearMyString() { _uniqueStorage().clearValue(at: SwiftProtobuf._fieldOffset(32, 24), type: String.self, hasBit: (0, 2)) }

  var myInt: Int64 {
    get { return _storage.value(at: 8, default: 0, hasBit: (0, 1)) }
    set { _uniqueStorage().updateValue(at: 8, to: newValue, willBeSet: true, hasBit: (0, 1)) }
  }
  /// Returns true if `myInt` has been explicitly set.
  var hasMyInt: Bool { return _storage.isPresent(hasBit: (0, 1)) }
  /// Clears the value of `myInt`. Subsequent reads from it will return its default value.
  mutating func clearMyInt() { _uniqueStorage().clearValue(at: 8, type: Int64.self, hasBit: (0, 1)) }

  var myFloat: Float {
    get { return _storage.value(at: 4, default: 0, hasBit: (0, 4)) }
    set { _uniqueStorage().updateValue(at: 4, to: newValue, willBeSet: true, hasBit: (0, 4)) }
  }
  /// Returns true if `myFloat` has been explicitly set.
  var hasMyFloat: Bool { return _storage.isPresent(hasBit: (0, 4)) }
  /// Clears the value of `myFloat`. Subsequent reads from it will return its default value.
  mutating func clearMyFloat() { _uniqueStorage().clearValue(at: 4, type: Float.self, hasBit: (0, 4)) }

  var optionalNestedMessage: SwiftProtoTesting_TestFieldOrderings.NestedMessage {
    get { return _storage.value(at: 16, default: SwiftProtoTesting_TestFieldOrderings.NestedMessage(), hasBit: (0, 8)) }
    set { _uniqueStorage().updateValue(at: 16, to: newValue, willBeSet: true, hasBit: (0, 8)) }
  }
  /// Returns true if `optionalNestedMessage` has been explicitly set.
  var hasOptionalNestedMessage: Bool { return _storage.isPresent(hasBit: (0, 8)) }
  /// Clears the value of `optionalNestedMessage`. Subsequent reads from it will return its default value.
  mutating func clearOptionalNestedMessage() { _uniqueStorage().clearValue(at: 16, type: SwiftProtoTesting_TestFieldOrderings.NestedMessage.self, hasBit: (0, 8)) }

  var unknownFields: SwiftProtobuf.UnknownStorage {
    get { _storage.unknownFields }
    _modify {
      _ = _uniqueStorage()
      yield &_storage.unknownFields
    }
  }

  struct NestedMessage: @unchecked Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var oo: Int64 {
      get { return _storage.value(at: 8, default: 0, hasBit: (0, 2)) }
      set { _uniqueStorage().updateValue(at: 8, to: newValue, willBeSet: true, hasBit: (0, 2)) }
    }
    /// Returns true if `oo` has been explicitly set.
    var hasOo: Bool { return _storage.isPresent(hasBit: (0, 2)) }
    /// Clears the value of `oo`. Subsequent reads from it will return its default value.
    mutating func clearOo() { _uniqueStorage().clearValue(at: 8, type: Int64.self, hasBit: (0, 2)) }

    /// The field name "b" fails to compile in proto1 because it conflicts with
    /// a local variable named "b" in one of the generated methods.  Doh.
    /// This file needs to compile in proto1 to test backwards-compatibility.
    var bb: Int32 {
      get { return _storage.value(at: 4, default: 0, hasBit: (0, 1)) }
      set { _uniqueStorage().updateValue(at: 4, to: newValue, willBeSet: true, hasBit: (0, 1)) }
    }
    /// Returns true if `bb` has been explicitly set.
    var hasBb: Bool { return _storage.isPresent(hasBit: (0, 1)) }
    /// Clears the value of `bb`. Subsequent reads from it will return its default value.
    mutating func clearBb() { _uniqueStorage().clearValue(at: 4, type: Int32.self, hasBit: (0, 1)) }

    var unknownFields: SwiftProtobuf.UnknownStorage {
      get { _storage.unknownFields }
      _modify {
        _ = _uniqueStorage()
        yield &_storage.unknownFields
      }
    }

    init() {}

    private var _storage = SwiftProtobuf._MessageStorage(layout: Self._protobuf_messageLayout)

    private mutating func _uniqueStorage() -> SwiftProtobuf._MessageStorage {
      if !isKnownUniquelyReferenced(&_storage) { _storage = _storage.copy() }
      return _storage
    }
  }

  init() {}

  var _protobuf_extensionFieldValues: SwiftProtobuf.ExtensionFieldValueSet {
    get { _storage.extensionFieldValues }
    _modify {
      _ = _uniqueStorage()
      yield &_storage.extensionFieldValues
    }
  }
  private var _storage = SwiftProtobuf._MessageStorage(layout: Self._protobuf_messageLayout)

  private mutating func _uniqueStorage() -> SwiftProtobuf._MessageStorage {
    if !isKnownUniquelyReferenced(&_storage) { _storage = _storage.copy() }
    return _storage
  }
}

struct SwiftProtoTesting_TestExtremeDefaultValues: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var escapedBytes: Data {
    get { return _storage.value(at: SwiftProtobuf._fieldOffset(112, 108), default: Data([0, 1, 7, 8, 12, 10, 13, 9, 11, 92, 39, 34, 254]), hasBit: (0, 1)) }
    set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(112, 108), to: newValue, willBeSet: true, hasBit: (0, 1)) }
  }
  /// Returns true if `escapedBytes` has been explicitly set.
  var hasEscapedBytes: Bool { return _storage.isPresent(hasBit: (0, 1)) }
  /// Clears the value of `escapedBytes`. Subsequent reads from it will return its default value.
  mutating func clearEscapedBytes() { _uniqueStorage().clearValue(at: SwiftProtobuf._fieldOffset(112, 108), type: Data.self, hasBit: (0, 1)) }

  var largeUint32: UInt32 {
    get { return _storage.value(at: 4, default: 4294967295, hasBit: (0, 2)) }
    set { _uniqueStorage().updateValue(at: 4, to: newValue, willBeSet: true, hasBit: (0, 2)) }
  }
  /// Returns true if `largeUint32` has been explicitly set.
  var hasLargeUint32: Bool { return _storage.isPresent(hasBit: (0, 2)) }
  /// Clears the value of `largeUint32`. Subsequent reads from it will return its default value.
  mutating func clearLargeUint32() { _uniqueStorage().clearValue(at: 4, type: UInt32.self, hasBit: (0, 2)) }

  var largeUint64: UInt64 {
    get { return _storage.value(at: 56, default: 18446744073709551615, hasBit: (0, 4)) }
    set { _uniqueStorage().updateValue(at: 56, to: newValue, willBeSet: true, hasBit: (0, 4)) }
  }
  /// Returns true if `largeUint64` has been explicitly set.
  var hasLargeUint64: Bool { return _storage.isPresent(hasBit: (0, 4)) }
  /// Clears the value of `largeUint64`. Subsequent reads from it will return its default value.
  mutating func clearLargeUint64() { _uniqueStorage().clearValue(at: 56, type: UInt64.self, hasBit: (0, 4)) }

  var smallInt32: Int32 {
    get { return _storage.value(at: 8, default: -2147483647, hasBit: (0, 8)) }
    set { _uniqueStorage().updateValue(at: 8, to: newValue, willBeSet: true, hasBit: (0, 8)) }
  }
  /// Returns true if `smallInt32` has been explicitly set.
  var hasSmallInt32: Bool { return _storage.isPresent(hasBit: (0, 8)) }
  /// Clears the value of `smallInt32`. Subsequent reads from it will return its default value.
  mutating func clearSmallInt32() { _uniqueStorage().clearValue(at: 8, type: Int32.self, hasBit: (0, 8)) }

  var smallInt64: Int64 {
    get { return _storage.value(at: 64, default: -9223372036854775807, hasBit: (0, 16)) }
    set { _uniqueStorage().updateValue(at: 64, to: newValue, willBeSet: true, hasBit: (0, 16)) }
  }
  /// Returns true if `smallInt64` has been explicitly set.
  var hasSmallInt64: Bool { return _storage.isPresent(hasBit: (0, 16)) }
  /// Clears the value of `smallInt64`. Subsequent reads from it will return its default value.
  mutating func clearSmallInt64() { _uniqueStorage().clearValue(at: 64, type: Int64.self, hasBit: (0, 16)) }

  var reallySmallInt32: Int32 {
    get { return _storage.value(at: 52, default: -2147483648, hasBit: (2, 16)) }
    set { _uniqueStorage().updateValue(at: 52, to: newValue, willBeSet: true, hasBit: (2, 16)) }
  }
  /// Returns true if `reallySmallInt32` has been explicitly set.
  var hasReallySmallInt32: Bool { return _storage.isPresent(hasBit: (2, 16)) }
  /// Clears the value of `reallySmallInt32`. Subsequent reads from it will return its default value.
  mutating func clearReallySmallInt32() { _uniqueStorage().clearValue(at: 52, type: Int32.self, hasBit: (2, 16)) }

  var reallySmallInt64: Int64 {
    get { return _storage.value(at: 96, default: -9223372036854775808, hasBit: (2, 32)) }
    set { _uniqueStorage().updateValue(at: 96, to: newValue, willBeSet: true, hasBit: (2, 32)) }
  }
  /// Returns true if `reallySmallInt64` has been explicitly set.
  var hasReallySmallInt64: Bool { return _storage.isPresent(hasBit: (2, 32)) }
  /// Clears the value of `reallySmallInt64`. Subsequent reads from it will return its default value.
  mutating func clearReallySmallInt64() { _uniqueStorage().clearValue(at: 96, type: Int64.self, hasBit: (2, 32)) }

  /// The default value here is UTF-8 for "\u1234".  (We could also just type
  /// the UTF-8 text directly into this text file rather than escape it, but
  /// lots of people use editors that would be confused by this.)
  var utf8String: String {
    get { return _storage.value(at: SwiftProtobuf._fieldOffset(128, 120), default: "ሴ", hasBit: (0, 32)) }
    set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(128, 120), to: newValue, willBeSet: true, hasBit: (0, 32)) }
  }
  /// Returns true if `utf8String` has been explicitly set.
  var hasUtf8String: Bool { return _storage.isPresent(hasBit: (0, 32)) }
  /// Clears the value of `utf8String`. Subsequent reads from it will return its default value.
  mutating func clearUtf8String() { _uniqueStorage().clearValue(at: SwiftProtobuf._fieldOffset(128, 120), type: String.self, hasBit: (0, 32)) }

  /// Tests for single-precision floating-point values.
  var zeroFloat: Float {
    get { return _storage.value(at: 12, default: 0, hasBit: (0, 64)) }
    set { _uniqueStorage().updateValue(at: 12, to: newValue, willBeSet: true, hasBit: (0, 64)) }
  }
  /// Returns true if `zeroFloat` has been explicitly set.
  var hasZeroFloat: Bool { return _storage.isPresent(hasBit: (0, 64)) }
  /// Clears the value of `zeroFloat`. Subsequent reads from it will return its default value.
  mutating func clearZeroFloat() { _uniqueStorage().clearValue(at: 12, type: Float.self, hasBit: (0, 64)) }

  var oneFloat: Float {
    get { return _storage.value(at: 16, default: 1, hasBit: (0, 128)) }
    set { _uniqueStorage().updateValue(at: 16, to: newValue, willBeSet: true, hasBit: (0, 128)) }
  }
  /// Returns true if `oneFloat` has been explicitly set.
  var hasOneFloat: Bool { return _storage.isPresent(hasBit: (0, 128)) }
  /// Clears the value of `oneFloat`. Subsequent reads from it will return its default value.
  mutating func clearOneFloat() { _uniqueStorage().clearValue(at: 16, type: Float.self, hasBit: (0, 128)) }

  var smallFloat: Float {
    get { return _storage.value(at: 20, default: 1.5, hasBit: (1, 1)) }
    set { _uniqueStorage().updateValue(at: 20, to: newValue, willBeSet: true, hasBit: (1, 1)) }
  }
  /// Returns true if `smallFloat` has been explicitly set.
  var hasSmallFloat: Bool { return _storage.isPresent(hasBit: (1, 1)) }
  /// Clears the value of `smallFloat`. Subsequent reads from it will return its default value.
  mutating func clearSmallFloat() { _uniqueStorage().clearValue(at: 20, type: Float.self, hasBit: (1, 1)) }

  var negativeOneFloat: Float {
    get { return _storage.value(at: 24, default: -1, hasBit: (1, 2)) }
    set { _uniqueStorage().updateValue(at: 24, to: newValue, willBeSet: true, hasBit: (1, 2)) }
  }
  /// Returns true if `negativeOneFloat` has been explicitly set.
  var hasNegativeOneFloat: Bool { return _storage.isPresent(hasBit: (1, 2)) }
  /// Clears the value of `negativeOneFloat`. Subsequent reads from it will return its default value.
  mutating func clearNegativeOneFloat() { _uniqueStorage().clearValue(at: 24, type: Float.self, hasBit: (1, 2)) }

  var negativeFloat: Float {
    get { return _storage.value(at: 28, default: -1.5, hasBit: (1, 4)) }
    set { _uniqueStorage().updateValue(at: 28, to: newValue, willBeSet: true, hasBit: (1, 4)) }
  }
  /// Returns true if `negativeFloat` has been explicitly set.
  var hasNegativeFloat: Bool { return _storage.isPresent(hasBit: (1, 4)) }
  /// Clears the value of `negativeFloat`. Subsequent reads from it will return its default value.
  mutating func clearNegativeFloat() { _uniqueStorage().clearValue(at: 28, type: Float.self, hasBit: (1, 4)) }

  /// Using exponents
  var largeFloat: Float {
    get { return _storage.value(at: 32, default: 2e+08, hasBit: (1, 8)) }
    set { _uniqueStorage().updateValue(at: 32, to: newValue, willBeSet: true, hasBit: (1, 8)) }
  }
  /// Returns true if `largeFloat` has been explicitly set.
  var hasLargeFloat: Bool { return _storage.isPresent(hasBit: (1, 8)) }
  /// Clears the value of `largeFloat`. Subsequent reads from it will return its default value.
  mutating func clearLargeFloat() { _uniqueStorage().clearValue(at: 32, type: Float.self, hasBit: (1, 8)) }

  var smallNegativeFloat: Float {
    get { return _storage.value(at: 36, default: -8e-28, hasBit: (1, 16)) }
    set { _uniqueStorage().updateValue(at: 36, to: newValue, willBeSet: true, hasBit: (1, 16)) }
  }
  /// Returns true if `smallNegativeFloat` has been explicitly set.
  var hasSmallNegativeFloat: Bool { return _storage.isPresent(hasBit: (1, 16)) }
  /// Clears the value of `smallNegativeFloat`. Subsequent reads from it will return its default value.
  mutating func clearSmallNegativeFloat() { _uniqueStorage().clearValue(at: 36, type: Float.self, hasBit: (1, 16)) }

  /// Text for nonfinite floating-point values.
  var infDouble: Double {
    get { return _storage.value(at: 72, default: Double.infinity, hasBit: (1, 32)) }
    set { _uniqueStorage().updateValue(at: 72, to: newValue, willBeSet: true, hasBit: (1, 32)) }
  }
  /// Returns true if `infDouble` has been explicitly set.
  var hasInfDouble: Bool { return _storage.isPresent(hasBit: (1, 32)) }
  /// Clears the value of `infDouble`. Subsequent reads from it will return its default value.
  mutating func clearInfDouble() { _uniqueStorage().clearValue(at: 72, type: Double.self, hasBit: (1, 32)) }

  var negInfDouble: Double {
    get { return _storage.value(at: 80, default: -Double.infinity, hasBit: (1, 64)) }
    set { _uniqueStorage().updateValue(at: 80, to: newValue, willBeSet: true, hasBit: (1, 64)) }
  }
  /// Returns true if `negInfDouble` has been explicitly set.
  var hasNegInfDouble: Bool { return _storage.isPresent(hasBit: (1, 64)) }
  /// Clears the value of `negInfDouble`. Subsequent reads from it will return its default value.
  mutating func clearNegInfDouble() { _uniqueStorage().clearValue(at: 80, type: Double.self, hasBit: (1, 64)) }

  var nanDouble: Double {
    get { return _storage.value(at: 88, default: Double.nan, hasBit: (1, 128)) }
    set { _uniqueStorage().updateValue(at: 88, to: newValue, willBeSet: true, hasBit: (1, 128)) }
  }
  /// Returns true if `nanDouble` has been explicitly set.
  var hasNanDouble: Bool { return _storage.isPresent(hasBit: (1, 128)) }
  /// Clears the value of `nanDouble`. Subsequent reads from it will return its default value.
  mutating func clearNanDouble() { _uniqueStorage().clearValue(at: 88, type: Double.self, hasBit: (1, 128)) }

  var infFloat: Float {
    get { return _storage.value(at: 40, default: Float.infinity, hasBit: (2, 1)) }
    set { _uniqueStorage().updateValue(at: 40, to: newValue, willBeSet: true, hasBit: (2, 1)) }
  }
  /// Returns true if `infFloat` has been explicitly set.
  var hasInfFloat: Bool { return _storage.isPresent(hasBit: (2, 1)) }
  /// Clears the value of `infFloat`. Subsequent reads from it will return its default value.
  mutating func clearInfFloat() { _uniqueStorage().clearValue(at: 40, type: Float.self, hasBit: (2, 1)) }

  var negInfFloat: Float {
    get { return _storage.value(at: 44, default: -Float.infinity, hasBit: (2, 2)) }
    set { _uniqueStorage().updateValue(at: 44, to: newValue, willBeSet: true, hasBit: (2, 2)) }
  }
  /// Returns true if `negInfFloat` has been explicitly set.
  var hasNegInfFloat: Bool { return _storage.isPresent(hasBit: (2, 2)) }
  /// Clears the value of `negInfFloat`. Subsequent reads from it will return its default value.
  mutating func clearNegInfFloat() { _uniqueStorage().clearValue(at: 44, type: Float.self, hasBit: (2, 2)) }

  var nanFloat: Float {
    get { return _storage.value(at: 48, default: Float.nan, hasBit: (2, 4)) }
    set { _uniqueStorage().updateValue(at: 48, to: newValue, willBeSet: true, hasBit: (2, 4)) }
  }
  /// Returns true if `nanFloat` has been explicitly set.
  var hasNanFloat: Bool { return _storage.isPresent(hasBit: (2, 4)) }
  /// Clears the value of `nanFloat`. Subsequent reads from it will return its default value.
  mutating func clearNanFloat() { _uniqueStorage().clearValue(at: 48, type: Float.self, hasBit: (2, 4)) }

  /// Tests for C++ trigraphs.
  /// Trigraphs should be escaped in C++ generated files, but they should not be
  /// escaped for other languages.
  /// Note that in .proto file, "\?" is a valid way to escape ? in string
  /// literals.
  var cppTrigraph: String {
    get { return _storage.value(at: SwiftProtobuf._fieldOffset(144, 132), default: "? ? ?? ?? ??? ??/ ??-", hasBit: (2, 8)) }
    set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(144, 132), to: newValue, willBeSet: true, hasBit: (2, 8)) }
  }
  /// Returns true if `cppTrigraph` has been explicitly set.
  var hasCppTrigraph: Bool { return _storage.isPresent(hasBit: (2, 8)) }
  /// Clears the value of `cppTrigraph`. Subsequent reads from it will return its default value.
  mutating func clearCppTrigraph() { _uniqueStorage().clearValue(at: SwiftProtobuf._fieldOffset(144, 132), type: String.self, hasBit: (2, 8)) }

  /// String defaults containing the character '\000'
  var stringWithZero: String {
    get { return _storage.value(at: SwiftProtobuf._fieldOffset(160, 144), default: "hel\0lo", hasBit: (2, 64)) }
    set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(160, 144), to: newValue, willBeSet: true, hasBit: (2, 64)) }
  }
  /// Returns true if `stringWithZero` has been explicitly set.
  var hasStringWithZero: Bool { return _storage.isPresent(hasBit: (2, 64)) }
  /// Clears the value of `stringWithZero`. Subsequent reads from it will return its default value.
  mutating func clearStringWithZero() { _uniqueStorage().clearValue(at: SwiftProtobuf._fieldOffset(160, 144), type: String.self, hasBit: (2, 64)) }

  var bytesWithZero: Data {
    get { return _storage.value(at: SwiftProtobuf._fieldOffset(176, 156), default: Data([119, 111, 114, 0, 108, 100]), hasBit: (2, 128)) }
    set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(176, 156), to: newValue, willBeSet: true, hasBit: (2, 128)) }
  }
  /// Returns true if `bytesWithZero` has been explicitly set.
  var hasBytesWithZero: Bool { return _storage.isPresent(hasBit: (2, 128)) }
  /// Clears the value of `bytesWithZero`. Subsequent reads from it will return its default value.
  mutating func clearBytesWithZero() { _uniqueStorage().clearValue(at: SwiftProtobuf._fieldOffset(176, 156), type: Data.self, hasBit: (2, 128)) }

  var replacementString: String {
    get { return _storage.value(at: SwiftProtobuf._fieldOffset(192, 168), default: "${unknown}", hasBit: (3, 1)) }
    set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(192, 168), to: newValue, willBeSet: true, hasBit: (3, 1)) }
  }
  /// Returns true if `replacementString` has been explicitly set.
  var hasReplacementString: Bool { return _storage.isPresent(hasBit: (3, 1)) }
  /// Clears the value of `replacementString`. Subsequent reads from it will return its default value.
  mutating func clearReplacementString() { _uniqueStorage().clearValue(at: SwiftProtobuf._fieldOffset(192, 168), type: String.self, hasBit: (3, 1)) }

  var unknownFields: SwiftProtobuf.UnknownStorage {
    get { _storage.unknownFields }
    _modify {
      _ = _uniqueStorage()
      yield &_storage.unknownFields
    }
  }

  init() {}

  private var _storage = SwiftProtobuf._MessageStorage(layout: Self._protobuf_messageLayout)

  private mutating func _uniqueStorage() -> SwiftProtobuf._MessageStorage {
    if !isKnownUniquelyReferenced(&_storage) { _storage = _storage.copy() }
    return _storage
  }
}

/// Test oneofs.
struct SwiftProtoTesting_TestOneof: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var foo: SwiftProtoTesting_TestOneof.OneOf_Foo? {
    get {
      let populatedField = _storage.populatedOneofMember(at: 4)
      switch populatedField {
      case 0: return nil
      case 1: return .fooInt(fooInt)
      case 2: return .fooString(fooString)
      case 3: return .fooMessage(fooMessage)
      case 4: return .fooGroup(fooGroup)
      default: preconditionFailure("Internal logic error; populated oneof field \(populatedField) is not a member of this oneof")
      }
    }
    set {
      switch newValue {
      case nil: _storage.clearPopulatedOneofMember(at: 4)
      case .fooInt(let value)?: self.fooInt = value
      case .fooString(let value)?: self.fooString = value
      case .fooMessage(let value)?: self.fooMessage = value
      case .fooGroup(let value)?: self.fooGroup = value
      }
    }
  }

  var fooInt: Int32 {
    get { return _storage.value(at: 20, default: 0, oneofPresence: (4, 1)) }
    set { _uniqueStorage().updateValue(at: 20, to: newValue, oneofPresence: (4, 1)) }
  }

  var fooString: String {
    get { return _storage.value(at: SwiftProtobuf._fieldOffset(48, 36), default: String(), oneofPresence: (4, 2)) }
    set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(48, 36), to: newValue, oneofPresence: (4, 2)) }
  }

  var fooMessage: SwiftProtoTesting_TestAllTypes {
    get { return _storage.value(at: 24, default: SwiftProtoTesting_TestAllTypes(), oneofPresence: (4, 3)) }
    set { _uniqueStorage().updateValue(at: 24, to: newValue, oneofPresence: (4, 3)) }
  }

  var fooGroup: SwiftProtoTesting_TestOneof.FooGroup {
    get { return _storage.value(at: SwiftProtobuf._fieldOffset(32, 28), default: SwiftProtoTesting_TestOneof.FooGroup(), oneofPresence: (4, 4)) }
    set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(32, 28), to: newValue, oneofPresence: (4, 4)) }
  }

  var unknownFields: SwiftProtobuf.UnknownStorage {
    get { _storage.unknownFields }
    _modify {
      _ = _uniqueStorage()
      yield &_storage.unknownFields
    }
  }

  enum OneOf_Foo: Equatable, Sendable {
    case fooInt(Int32)
    case fooString(String)
    case fooMessage(SwiftProtoTesting_TestAllTypes)
    case fooGroup(SwiftProtoTesting_TestOneof.FooGroup)
  }

  struct FooGroup: @unchecked Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var a: Int32 {
      get { return _storage.value(at: 4, default: 0, hasBit: (0, 1)) }
      set { _uniqueStorage().updateValue(at: 4, to: newValue, willBeSet: true, hasBit: (0, 1)) }
    }
    /// Returns true if `a` has been explicitly set.
    var hasA: Bool { return _storage.isPresent(hasBit: (0, 1)) }
    /// Clears the value of `a`. Subsequent reads from it will return its default value.
    mutating func clearA() { _uniqueStorage().clearValue(at: 4, type: Int32.self, hasBit: (0, 1)) }

    var b: String {
      get { return _storage.value(at: SwiftProtobuf._fieldOffset(16, 12), default: String(), hasBit: (0, 2)) }
      set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(16, 12), to: newValue, willBeSet: true, hasBit: (0, 2)) }
    }
    /// Returns true if `b` has been explicitly set.
    var hasB: Bool { return _storage.isPresent(hasBit: (0, 2)) }
    /// Clears the value of `b`. Subsequent reads from it will return its default value.
    mutating func clearB() { _uniqueStorage().clearValue(at: SwiftProtobuf._fieldOffset(16, 12), type: String.self, hasBit: (0, 2)) }

    var unknownFields: SwiftProtobuf.UnknownStorage {
      get { _storage.unknownFields }
      _modify {
        _ = _uniqueStorage()
        yield &_storage.unknownFields
      }
    }

    init() {}

    private var _storage = SwiftProtobuf._MessageStorage(layout: Self._protobuf_messageLayout)

    private mutating func _uniqueStorage() -> SwiftProtobuf._MessageStorage {
      if !isKnownUniquelyReferenced(&_storage) { _storage = _storage.copy() }
      return _storage
    }
  }

  init() {}

  private var _storage = SwiftProtobuf._MessageStorage(layout: Self._protobuf_messageLayout)

  private mutating func _uniqueStorage() -> SwiftProtobuf._MessageStorage {
    if !isKnownUniquelyReferenced(&_storage) { _storage = _storage.copy() }
    return _storage
  }
}

struct SwiftProtoTesting_TestRequiredOneof: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var foo: SwiftProtoTesting_TestRequiredOneof.OneOf_Foo? {
    get {
      let populatedField = _storage.populatedOneofMember(at: 4)
      switch populatedField {
      case 0: return nil
      case 1: return .fooInt(fooInt)
      case 2: return .fooString(fooString)
      case 3: return .fooMessage(fooMessage)
      default: preconditionFailure("Internal logic error; populated oneof field \(populatedField) is not a member of this oneof")
      }
    }
    set {
      switch newValue {
      case nil: _storage.clearPopulatedOneofMember(at: 4)
      case .fooInt(let value)?: self.fooInt = value
      case .fooString(let value)?: self.fooString = value
      case .fooMessage(let value)?: self.fooMessage = value
      }
    }
  }

  var fooInt: Int32 {
    get { return _storage.value(at: 16, default: 0, oneofPresence: (4, 1)) }
    set { _uniqueStorage().updateValue(at: 16, to: newValue, oneofPresence: (4, 1)) }
  }

  var fooString: String {
    get { return _storage.value(at: SwiftProtobuf._fieldOffset(32, 24), default: String(), oneofPresence: (4, 2)) }
    set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(32, 24), to: newValue, oneofPresence: (4, 2)) }
  }

  var fooMessage: SwiftProtoTesting_TestRequiredOneof.NestedMessage {
    get { return _storage.value(at: SwiftProtobuf._fieldOffset(24, 20), default: SwiftProtoTesting_TestRequiredOneof.NestedMessage(), oneofPresence: (4, 3)) }
    set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(24, 20), to: newValue, oneofPresence: (4, 3)) }
  }

  var unknownFields: SwiftProtobuf.UnknownStorage {
    get { _storage.unknownFields }
    _modify {
      _ = _uniqueStorage()
      yield &_storage.unknownFields
    }
  }

  enum OneOf_Foo: Equatable, Sendable {
    case fooInt(Int32)
    case fooString(String)
    case fooMessage(SwiftProtoTesting_TestRequiredOneof.NestedMessage)
  }

  struct NestedMessage: @unchecked Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var requiredDouble: Double {
      get { return _storage.value(at: 8, default: 0, hasBit: (0, 1)) }
      set { _uniqueStorage().updateValue(at: 8, to: newValue, willBeSet: true, hasBit: (0, 1)) }
    }
    /// Returns true if `requiredDouble` has been explicitly set.
    var hasRequiredDouble: Bool { return _storage.isPresent(hasBit: (0, 1)) }
    /// Clears the value of `requiredDouble`. Subsequent reads from it will return its default value.
    mutating func clearRequiredDouble() { _uniqueStorage().clearValue(at: 8, type: Double.self, hasBit: (0, 1)) }

    var unknownFields: SwiftProtobuf.UnknownStorage {
      get { _storage.unknownFields }
      _modify {
        _ = _uniqueStorage()
        yield &_storage.unknownFields
      }
    }

    init() {}

    private var _storage = SwiftProtobuf._MessageStorage(layout: Self._protobuf_messageLayout)

    private mutating func _uniqueStorage() -> SwiftProtobuf._MessageStorage {
      if !isKnownUniquelyReferenced(&_storage) { _storage = _storage.copy() }
      return _storage
    }
  }

  init() {}

  private var _storage = SwiftProtobuf._MessageStorage(layout: Self._protobuf_messageLayout)

  private mutating func _uniqueStorage() -> SwiftProtobuf._MessageStorage {
    if !isKnownUniquelyReferenced(&_storage) { _storage = _storage.copy() }
    return _storage
  }
}

struct SwiftProtoTesting_TestPackedTypes: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var packedInt32: [Int32] {
    get { return _storage.value(at: SwiftProtobuf._fieldOffset(8, 4), hasBit: (0, 1)) }
    set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(8, 4), to: newValue, willBeSet: !newValue.isEmpty, hasBit: (0, 1)) }
  }

  var packedInt64: [Int64] {
    get { return _storage.value(at: SwiftProtobuf._fieldOffset(16, 8), hasBit: (0, 2)) }
    set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(16, 8), to: newValue, willBeSet: !newValue.isEmpty, hasBit: (0, 2)) }
  }

  var packedUint32: [UInt32] {
    get { return _storage.value(at: SwiftProtobuf._fieldOffset(24, 12), hasBit: (0, 4)) }
    set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(24, 12), to: newValue, willBeSet: !newValue.isEmpty, hasBit: (0, 4)) }
  }

  var packedUint64: [UInt64] {
    get { return _storage.value(at: SwiftProtobuf._fieldOffset(32, 16), hasBit: (0, 8)) }
    set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(32, 16), to: newValue, willBeSet: !newValue.isEmpty, hasBit: (0, 8)) }
  }

  var packedSint32: [Int32] {
    get { return _storage.value(at: SwiftProtobuf._fieldOffset(40, 20), hasBit: (0, 16)) }
    set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(40, 20), to: newValue, willBeSet: !newValue.isEmpty, hasBit: (0, 16)) }
  }

  var packedSint64: [Int64] {
    get { return _storage.value(at: SwiftProtobuf._fieldOffset(48, 24), hasBit: (0, 32)) }
    set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(48, 24), to: newValue, willBeSet: !newValue.isEmpty, hasBit: (0, 32)) }
  }

  var packedFixed32: [UInt32] {
    get { return _storage.value(at: SwiftProtobuf._fieldOffset(56, 28), hasBit: (0, 64)) }
    set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(56, 28), to: newValue, willBeSet: !newValue.isEmpty, hasBit: (0, 64)) }
  }

  var packedFixed64: [UInt64] {
    get { return _storage.value(at: SwiftProtobuf._fieldOffset(64, 32), hasBit: (0, 128)) }
    set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(64, 32), to: newValue, willBeSet: !newValue.isEmpty, hasBit: (0, 128)) }
  }

  var packedSfixed32: [Int32] {
    get { return _storage.value(at: SwiftProtobuf._fieldOffset(72, 36), hasBit: (1, 1)) }
    set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(72, 36), to: newValue, willBeSet: !newValue.isEmpty, hasBit: (1, 1)) }
  }

  var packedSfixed64: [Int64] {
    get { return _storage.value(at: SwiftProtobuf._fieldOffset(80, 40), hasBit: (1, 2)) }
    set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(80, 40), to: newValue, willBeSet: !newValue.isEmpty, hasBit: (1, 2)) }
  }

  var packedFloat: [Float] {
    get { return _storage.value(at: SwiftProtobuf._fieldOffset(88, 44), hasBit: (1, 4)) }
    set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(88, 44), to: newValue, willBeSet: !newValue.isEmpty, hasBit: (1, 4)) }
  }

  var packedDouble: [Double] {
    get { return _storage.value(at: SwiftProtobuf._fieldOffset(96, 48), hasBit: (1, 8)) }
    set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(96, 48), to: newValue, willBeSet: !newValue.isEmpty, hasBit: (1, 8)) }
  }

  var packedBool: [Bool] {
    get { return _storage.value(at: SwiftProtobuf._fieldOffset(104, 52), hasBit: (1, 16)) }
    set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(104, 52), to: newValue, willBeSet: !newValue.isEmpty, hasBit: (1, 16)) }
  }

  var packedEnum: [SwiftProtoTesting_ForeignEnum] {
    get { return _storage.value(at: SwiftProtobuf._fieldOffset(112, 56), hasBit: (1, 32)) }
    set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(112, 56), to: newValue, willBeSet: !newValue.isEmpty, hasBit: (1, 32)) }
  }

  var unknownFields: SwiftProtobuf.UnknownStorage {
    get { _storage.unknownFields }
    _modify {
      _ = _uniqueStorage()
      yield &_storage.unknownFields
    }
  }

  init() {}

  private var _storage = SwiftProtobuf._MessageStorage(layout: Self._protobuf_messageLayout)

  private mutating func _uniqueStorage() -> SwiftProtobuf._MessageStorage {
    if !isKnownUniquelyReferenced(&_storage) { _storage = _storage.copy() }
    return _storage
  }
}

/// A message with the same fields as TestPackedTypes, but without packing. Used
/// to test packed <-> unpacked wire compatibility.
struct SwiftProtoTesting_TestUnpackedTypes: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unpackedInt32: [Int32] {
    get { return _storage.value(at: SwiftProtobuf._fieldOffset(8, 4), hasBit: (0, 1)) }
    set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(8, 4), to: newValue, willBeSet: !newValue.isEmpty, hasBit: (0, 1)) }
  }

  var unpackedInt64: [Int64] {
    get { return _storage.value(at: SwiftProtobuf._fieldOffset(16, 8), hasBit: (0, 2)) }
    set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(16, 8), to: newValue, willBeSet: !newValue.isEmpty, hasBit: (0, 2)) }
  }

  var unpackedUint32: [UInt32] {
    get { return _storage.value(at: SwiftProtobuf._fieldOffset(24, 12), hasBit: (0, 4)) }
    set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(24, 12), to: newValue, willBeSet: !newValue.isEmpty, hasBit: (0, 4)) }
  }

  var unpackedUint64: [UInt64] {
    get { return _storage.value(at: SwiftProtobuf._fieldOffset(32, 16), hasBit: (0, 8)) }
    set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(32, 16), to: newValue, willBeSet: !newValue.isEmpty, hasBit: (0, 8)) }
  }

  var unpackedSint32: [Int32] {
    get { return _storage.value(at: SwiftProtobuf._fieldOffset(40, 20), hasBit: (0, 16)) }
    set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(40, 20), to: newValue, willBeSet: !newValue.isEmpty, hasBit: (0, 16)) }
  }

  var unpackedSint64: [Int64] {
    get { return _storage.value(at: SwiftProtobuf._fieldOffset(48, 24), hasBit: (0, 32)) }
    set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(48, 24), to: newValue, willBeSet: !newValue.isEmpty, hasBit: (0, 32)) }
  }

  var unpackedFixed32: [UInt32] {
    get { return _storage.value(at: SwiftProtobuf._fieldOffset(56, 28), hasBit: (0, 64)) }
    set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(56, 28), to: newValue, willBeSet: !newValue.isEmpty, hasBit: (0, 64)) }
  }

  var unpackedFixed64: [UInt64] {
    get { return _storage.value(at: SwiftProtobuf._fieldOffset(64, 32), hasBit: (0, 128)) }
    set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(64, 32), to: newValue, willBeSet: !newValue.isEmpty, hasBit: (0, 128)) }
  }

  var unpackedSfixed32: [Int32] {
    get { return _storage.value(at: SwiftProtobuf._fieldOffset(72, 36), hasBit: (1, 1)) }
    set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(72, 36), to: newValue, willBeSet: !newValue.isEmpty, hasBit: (1, 1)) }
  }

  var unpackedSfixed64: [Int64] {
    get { return _storage.value(at: SwiftProtobuf._fieldOffset(80, 40), hasBit: (1, 2)) }
    set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(80, 40), to: newValue, willBeSet: !newValue.isEmpty, hasBit: (1, 2)) }
  }

  var unpackedFloat: [Float] {
    get { return _storage.value(at: SwiftProtobuf._fieldOffset(88, 44), hasBit: (1, 4)) }
    set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(88, 44), to: newValue, willBeSet: !newValue.isEmpty, hasBit: (1, 4)) }
  }

  var unpackedDouble: [Double] {
    get { return _storage.value(at: SwiftProtobuf._fieldOffset(96, 48), hasBit: (1, 8)) }
    set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(96, 48), to: newValue, willBeSet: !newValue.isEmpty, hasBit: (1, 8)) }
  }

  var unpackedBool: [Bool] {
    get { return _storage.value(at: SwiftProtobuf._fieldOffset(104, 52), hasBit: (1, 16)) }
    set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(104, 52), to: newValue, willBeSet: !newValue.isEmpty, hasBit: (1, 16)) }
  }

  var unpackedEnum: [SwiftProtoTesting_ForeignEnum] {
    get { return _storage.value(at: SwiftProtobuf._fieldOffset(112, 56), hasBit: (1, 32)) }
    set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(112, 56), to: newValue, willBeSet: !newValue.isEmpty, hasBit: (1, 32)) }
  }

  var unknownFields: SwiftProtobuf.UnknownStorage {
    get { _storage.unknownFields }
    _modify {
      _ = _uniqueStorage()
      yield &_storage.unknownFields
    }
  }

  init() {}

  private var _storage = SwiftProtobuf._MessageStorage(layout: Self._protobuf_messageLayout)

  private mutating func _uniqueStorage() -> SwiftProtobuf._MessageStorage {
    if !isKnownUniquelyReferenced(&_storage) { _storage = _storage.copy() }
    return _storage
  }
}

struct SwiftProtoTesting_TestPackedExtensions: SwiftProtobuf.ExtensibleMessage, @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields: SwiftProtobuf.UnknownStorage {
    get { _storage.unknownFields }
    _modify {
      _ = _uniqueStorage()
      yield &_storage.unknownFields
    }
  }

  init() {}

  var _protobuf_extensionFieldValues: SwiftProtobuf.ExtensionFieldValueSet {
    get { _storage.extensionFieldValues }
    _modify {
      _ = _uniqueStorage()
      yield &_storage.extensionFieldValues
    }
  }
  private var _storage = SwiftProtobuf._MessageStorage(layout: Self._protobuf_messageLayout)

  private mutating func _uniqueStorage() -> SwiftProtobuf._MessageStorage {
    if !isKnownUniquelyReferenced(&_storage) { _storage = _storage.copy() }
    return _storage
  }
}

/// Test that if an optional or required message/group field appears multiple
/// times in the input, they need to be merged.
struct SwiftProtoTesting_TestParsingMerge: SwiftProtobuf.ExtensibleMessage, @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var requiredAllTypes: SwiftProtoTesting_TestAllTypes {
    get { return _storage.value(at: SwiftProtobuf._fieldOffset(8, 4), default: SwiftProtoTesting_TestAllTypes(), hasBit: (0, 1)) }
    set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(8, 4), to: newValue, willBeSet: true, hasBit: (0, 1)) }
  }
  /// Returns true if `requiredAllTypes` has been explicitly set.
  var hasRequiredAllTypes: Bool { return _storage.isPresent(hasBit: (0, 1)) }
  /// Clears the value of `requiredAllTypes`. Subsequent reads from it will return its default value.
  mutating func clearRequiredAllTypes() { _uniqueStorage().clearValue(at: SwiftProtobuf._fieldOffset(8, 4), type: SwiftProtoTesting_TestAllTypes.self, hasBit: (0, 1)) }

  var optionalAllTypes: SwiftProtoTesting_TestAllTypes {
    get { return _storage.value(at: SwiftProtobuf._fieldOffset(16, 8), default: SwiftProtoTesting_TestAllTypes(), hasBit: (0, 2)) }
    set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(16, 8), to: newValue, willBeSet: true, hasBit: (0, 2)) }
  }
  /// Returns true if `optionalAllTypes` has been explicitly set.
  var hasOptionalAllTypes: Bool { return _storage.isPresent(hasBit: (0, 2)) }
  /// Clears the value of `optionalAllTypes`. Subsequent reads from it will return its default value.
  mutating func clearOptionalAllTypes() { _uniqueStorage().clearValue(at: SwiftProtobuf._fieldOffset(16, 8), type: SwiftProtoTesting_TestAllTypes.self, hasBit: (0, 2)) }

  var repeatedAllTypes: [SwiftProtoTesting_TestAllTypes] {
    get { return _storage.value(at: SwiftProtobuf._fieldOffset(24, 12), hasBit: (0, 4)) }
    set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(24, 12), to: newValue, willBeSet: !newValue.isEmpty, hasBit: (0, 4)) }
  }

  var optionalGroup: SwiftProtoTesting_TestParsingMerge.OptionalGroup {
    get { return _storage.value(at: SwiftProtobuf._fieldOffset(32, 16), default: SwiftProtoTesting_TestParsingMerge.OptionalGroup(), hasBit: (0, 8)) }
    set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(32, 16), to: newValue, willBeSet: true, hasBit: (0, 8)) }
  }
  /// Returns true if `optionalGroup` has been explicitly set.
  var hasOptionalGroup: Bool { return _storage.isPresent(hasBit: (0, 8)) }
  /// Clears the value of `optionalGroup`. Subsequent reads from it will return its default value.
  mutating func clearOptionalGroup() { _uniqueStorage().clearValue(at: SwiftProtobuf._fieldOffset(32, 16), type: SwiftProtoTesting_TestParsingMerge.OptionalGroup.self, hasBit: (0, 8)) }

  var repeatedGroup: [SwiftProtoTesting_TestParsingMerge.RepeatedGroup] {
    get { return _storage.value(at: SwiftProtobuf._fieldOffset(40, 20), hasBit: (0, 16)) }
    set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(40, 20), to: newValue, willBeSet: !newValue.isEmpty, hasBit: (0, 16)) }
  }

  var unknownFields: SwiftProtobuf.UnknownStorage {
    get { _storage.unknownFields }
    _modify {
      _ = _uniqueStorage()
      yield &_storage.unknownFields
    }
  }

  /// RepeatedFieldsGenerator defines matching field types as TestParsingMerge,
  /// except that all fields are repeated. In the tests, we will serialize the
  /// RepeatedFieldsGenerator to bytes, and parse the bytes to TestParsingMerge.
  /// Repeated fields in RepeatedFieldsGenerator are expected to be merged into
  /// the corresponding required/optional fields in TestParsingMerge.
  struct RepeatedFieldsGenerator: @unchecked Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var field1: [SwiftProtoTesting_TestAllTypes] {
      get { return _storage.value(at: SwiftProtobuf._fieldOffset(8, 4), hasBit: (0, 1)) }
      set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(8, 4), to: newValue, willBeSet: !newValue.isEmpty, hasBit: (0, 1)) }
    }

    var field2: [SwiftProtoTesting_TestAllTypes] {
      get { return _storage.value(at: SwiftProtobuf._fieldOffset(16, 8), hasBit: (0, 2)) }
      set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(16, 8), to: newValue, willBeSet: !newValue.isEmpty, hasBit: (0, 2)) }
    }

    var field3: [SwiftProtoTesting_TestAllTypes] {
      get { return _storage.value(at: SwiftProtobuf._fieldOffset(24, 12), hasBit: (0, 4)) }
      set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(24, 12), to: newValue, willBeSet: !newValue.isEmpty, hasBit: (0, 4)) }
    }

    var group1: [SwiftProtoTesting_TestParsingMerge.RepeatedFieldsGenerator.Group1] {
      get { return _storage.value(at: SwiftProtobuf._fieldOffset(32, 16), hasBit: (0, 8)) }
      set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(32, 16), to: newValue, willBeSet: !newValue.isEmpty, hasBit: (0, 8)) }
    }

    var group2: [SwiftProtoTesting_TestParsingMerge.RepeatedFieldsGenerator.Group2] {
      get { return _storage.value(at: SwiftProtobuf._fieldOffset(40, 20), hasBit: (0, 16)) }
      set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(40, 20), to: newValue, willBeSet: !newValue.isEmpty, hasBit: (0, 16)) }
    }

    var ext1: [SwiftProtoTesting_TestAllTypes] {
      get { return _storage.value(at: SwiftProtobuf._fieldOffset(48, 24), hasBit: (0, 32)) }
      set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(48, 24), to: newValue, willBeSet: !newValue.isEmpty, hasBit: (0, 32)) }
    }

    var ext2: [SwiftProtoTesting_TestAllTypes] {
      get { return _storage.value(at: SwiftProtobuf._fieldOffset(56, 28), hasBit: (0, 64)) }
      set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(56, 28), to: newValue, willBeSet: !newValue.isEmpty, hasBit: (0, 64)) }
    }

    var unknownFields: SwiftProtobuf.UnknownStorage {
      get { _storage.unknownFields }
      _modify {
        _ = _uniqueStorage()
        yield &_storage.unknownFields
      }
    }

    struct Group1: @unchecked Sendable {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var field1: SwiftProtoTesting_TestAllTypes {
        get { return _storage.value(at: SwiftProtobuf._fieldOffset(8, 4), default: SwiftProtoTesting_TestAllTypes(), hasBit: (0, 1)) }
        set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(8, 4), to: newValue, willBeSet: true, hasBit: (0, 1)) }
      }
      /// Returns true if `field1` has been explicitly set.
      var hasField1: Bool { return _storage.isPresent(hasBit: (0, 1)) }
      /// Clears the value of `field1`. Subsequent reads from it will return its default value.
      mutating func clearField1() { _uniqueStorage().clearValue(at: SwiftProtobuf._fieldOffset(8, 4), type: SwiftProtoTesting_TestAllTypes.self, hasBit: (0, 1)) }

      var unknownFields: SwiftProtobuf.UnknownStorage {
        get { _storage.unknownFields }
        _modify {
          _ = _uniqueStorage()
          yield &_storage.unknownFields
        }
      }

      init() {}

      private var _storage = SwiftProtobuf._MessageStorage(layout: Self._protobuf_messageLayout)

      private mutating func _uniqueStorage() -> SwiftProtobuf._MessageStorage {
        if !isKnownUniquelyReferenced(&_storage) { _storage = _storage.copy() }
        return _storage
      }
    }

    struct Group2: @unchecked Sendable {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var field1: SwiftProtoTesting_TestAllTypes {
        get { return _storage.value(at: SwiftProtobuf._fieldOffset(8, 4), default: SwiftProtoTesting_TestAllTypes(), hasBit: (0, 1)) }
        set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(8, 4), to: newValue, willBeSet: true, hasBit: (0, 1)) }
      }
      /// Returns true if `field1` has been explicitly set.
      var hasField1: Bool { return _storage.isPresent(hasBit: (0, 1)) }
      /// Clears the value of `field1`. Subsequent reads from it will return its default value.
      mutating func clearField1() { _uniqueStorage().clearValue(at: SwiftProtobuf._fieldOffset(8, 4), type: SwiftProtoTesting_TestAllTypes.self, hasBit: (0, 1)) }

      var unknownFields: SwiftProtobuf.UnknownStorage {
        get { _storage.unknownFields }
        _modify {
          _ = _uniqueStorage()
          yield &_storage.unknownFields
        }
      }

      init() {}

      private var _storage = SwiftProtobuf._MessageStorage(layout: Self._protobuf_messageLayout)

      private mutating func _uniqueStorage() -> SwiftProtobuf._MessageStorage {
        if !isKnownUniquelyReferenced(&_storage) { _storage = _storage.copy() }
        return _storage
      }
    }

    init() {}

    private var _storage = SwiftProtobuf._MessageStorage(layout: Self._protobuf_messageLayout)

    private mutating func _uniqueStorage() -> SwiftProtobuf._MessageStorage {
      if !isKnownUniquelyReferenced(&_storage) { _storage = _storage.copy() }
      return _storage
    }
  }

  struct OptionalGroup: @unchecked Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var optionalGroupAllTypes: SwiftProtoTesting_TestAllTypes {
      get { return _storage.value(at: SwiftProtobuf._fieldOffset(8, 4), default: SwiftProtoTesting_TestAllTypes(), hasBit: (0, 1)) }
      set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(8, 4), to: newValue, willBeSet: true, hasBit: (0, 1)) }
    }
    /// Returns true if `optionalGroupAllTypes` has been explicitly set.
    var hasOptionalGroupAllTypes: Bool { return _storage.isPresent(hasBit: (0, 1)) }
    /// Clears the value of `optionalGroupAllTypes`. Subsequent reads from it will return its default value.
    mutating func clearOptionalGroupAllTypes() { _uniqueStorage().clearValue(at: SwiftProtobuf._fieldOffset(8, 4), type: SwiftProtoTesting_TestAllTypes.self, hasBit: (0, 1)) }

    var unknownFields: SwiftProtobuf.UnknownStorage {
      get { _storage.unknownFields }
      _modify {
        _ = _uniqueStorage()
        yield &_storage.unknownFields
      }
    }

    init() {}

    private var _storage = SwiftProtobuf._MessageStorage(layout: Self._protobuf_messageLayout)

    private mutating func _uniqueStorage() -> SwiftProtobuf._MessageStorage {
      if !isKnownUniquelyReferenced(&_storage) { _storage = _storage.copy() }
      return _storage
    }
  }

  struct RepeatedGroup: @unchecked Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var repeatedGroupAllTypes: SwiftProtoTesting_TestAllTypes {
      get { return _storage.value(at: SwiftProtobuf._fieldOffset(8, 4), default: SwiftProtoTesting_TestAllTypes(), hasBit: (0, 1)) }
      set { _uniqueStorage().updateValue(at: SwiftProtobuf._fieldOffset(8, 4), to: newValue, willBeSet: true, hasBit: (0, 1)) }
    }
    /// Returns true if `repeatedGroupAllTypes` has been explicitly set.
    var hasRepeatedGroupAllTypes: Bool { return _storage.isPresent(hasBit: (0, 1)) }
    /// Clears the value of `repeatedGroupAllTypes`. Subsequent reads from it will return its default value.
    mutating func clearRepeatedGroupAllTypes() { _uniqueStorage().clearValue(at: SwiftProtobuf._fieldOffset(8, 4), type: SwiftProtoTesting_TestAllTypes.self, hasBit: (0, 1)) }

    var unknownFields: SwiftProtobuf.UnknownStorage {
      get { _storage.unknownFields }
      _modify {
        _ = _uniqueStorage()
        yield &_storage.unknownFields
      }
    }

    init() {}

    private var _storage = SwiftProtobuf._MessageStorage(layout: Self._protobuf_messageLayout)

    private mutating func _uniqueStorage() -> SwiftProtobuf._MessageStorage {
      if !isKnownUniquelyReferenced(&_storage) { _storage = _storage.copy() }
      return _storage
    }
  }

  init() {}

  var _protobuf_extensionFieldValues: SwiftProtobuf.ExtensionFieldValueSet {
    get { _storage.extensionFieldValues }
    _modify {
      _ = _uniqueStorage()
      yield &_storage.extensionFieldValues
    }
  }
  private var _storage = SwiftProtobuf._MessageStorage(layout: Self._protobuf_messageLayout)

  private mutating func _uniqueStorage() -> SwiftProtobuf._MessageStorage {
    if !isKnownUniquelyReferenced(&_storage) { _storage = _storage.copy() }
    return _storage
  }
}

// MARK: - Extension support defined in unittest.proto.

// MARK: - Extension Properties

// Swift Extensions on the extended Messages to add easy access to the declared
// extension fields. The names are based on the extension field name from the proto
// declaration. To avoid naming collisions, the names are prefixed with the name of
// the scope where the extend directive occurs.

extension SwiftProtoTesting_TestAllExtensions {

  /// Singular
  var SwiftProtoTesting_optionalInt32Extension: Int32 {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_optional_int32_extension) ?? 0}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_optional_int32_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_optional_int32_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_optionalInt32Extension: Bool {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_optional_int32_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_optional_int32_extension`.
  /// Subsequent reads from it will return its default value.
  mutating func clearSwiftProtoTesting_optionalInt32Extension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_optional_int32_extension)
  }

  var SwiftProtoTesting_optionalInt64Extension: Int64 {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_optional_int64_extension) ?? 0}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_optional_int64_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_optional_int64_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_optionalInt64Extension: Bool {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_optional_int64_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_optional_int64_extension`.
  /// Subsequent reads from it will return its default value.
  mutating func clearSwiftProtoTesting_optionalInt64Extension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_optional_int64_extension)
  }

  var SwiftProtoTesting_optionalUint32Extension: UInt32 {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_optional_uint32_extension) ?? 0}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_optional_uint32_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_optional_uint32_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_optionalUint32Extension: Bool {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_optional_uint32_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_optional_uint32_extension`.
  /// Subsequent reads from it will return its default value.
  mutating func clearSwiftProtoTesting_optionalUint32Extension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_optional_uint32_extension)
  }

  var SwiftProtoTesting_optionalUint64Extension: UInt64 {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_optional_uint64_extension) ?? 0}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_optional_uint64_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_optional_uint64_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_optionalUint64Extension: Bool {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_optional_uint64_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_optional_uint64_extension`.
  /// Subsequent reads from it will return its default value.
  mutating func clearSwiftProtoTesting_optionalUint64Extension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_optional_uint64_extension)
  }

  var SwiftProtoTesting_optionalSint32Extension: Int32 {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_optional_sint32_extension) ?? 0}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_optional_sint32_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_optional_sint32_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_optionalSint32Extension: Bool {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_optional_sint32_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_optional_sint32_extension`.
  /// Subsequent reads from it will return its default value.
  mutating func clearSwiftProtoTesting_optionalSint32Extension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_optional_sint32_extension)
  }

  var SwiftProtoTesting_optionalSint64Extension: Int64 {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_optional_sint64_extension) ?? 0}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_optional_sint64_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_optional_sint64_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_optionalSint64Extension: Bool {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_optional_sint64_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_optional_sint64_extension`.
  /// Subsequent reads from it will return its default value.
  mutating func clearSwiftProtoTesting_optionalSint64Extension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_optional_sint64_extension)
  }

  var SwiftProtoTesting_optionalFixed32Extension: UInt32 {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_optional_fixed32_extension) ?? 0}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_optional_fixed32_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_optional_fixed32_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_optionalFixed32Extension: Bool {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_optional_fixed32_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_optional_fixed32_extension`.
  /// Subsequent reads from it will return its default value.
  mutating func clearSwiftProtoTesting_optionalFixed32Extension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_optional_fixed32_extension)
  }

  var SwiftProtoTesting_optionalFixed64Extension: UInt64 {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_optional_fixed64_extension) ?? 0}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_optional_fixed64_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_optional_fixed64_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_optionalFixed64Extension: Bool {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_optional_fixed64_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_optional_fixed64_extension`.
  /// Subsequent reads from it will return its default value.
  mutating func clearSwiftProtoTesting_optionalFixed64Extension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_optional_fixed64_extension)
  }

  var SwiftProtoTesting_optionalSfixed32Extension: Int32 {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_optional_sfixed32_extension) ?? 0}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_optional_sfixed32_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_optional_sfixed32_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_optionalSfixed32Extension: Bool {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_optional_sfixed32_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_optional_sfixed32_extension`.
  /// Subsequent reads from it will return its default value.
  mutating func clearSwiftProtoTesting_optionalSfixed32Extension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_optional_sfixed32_extension)
  }

  var SwiftProtoTesting_optionalSfixed64Extension: Int64 {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_optional_sfixed64_extension) ?? 0}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_optional_sfixed64_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_optional_sfixed64_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_optionalSfixed64Extension: Bool {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_optional_sfixed64_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_optional_sfixed64_extension`.
  /// Subsequent reads from it will return its default value.
  mutating func clearSwiftProtoTesting_optionalSfixed64Extension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_optional_sfixed64_extension)
  }

  var SwiftProtoTesting_optionalFloatExtension: Float {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_optional_float_extension) ?? 0}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_optional_float_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_optional_float_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_optionalFloatExtension: Bool {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_optional_float_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_optional_float_extension`.
  /// Subsequent reads from it will return its default value.
  mutating func clearSwiftProtoTesting_optionalFloatExtension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_optional_float_extension)
  }

  var SwiftProtoTesting_optionalDoubleExtension: Double {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_optional_double_extension) ?? 0}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_optional_double_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_optional_double_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_optionalDoubleExtension: Bool {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_optional_double_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_optional_double_extension`.
  /// Subsequent reads from it will return its default value.
  mutating func clearSwiftProtoTesting_optionalDoubleExtension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_optional_double_extension)
  }

  var SwiftProtoTesting_optionalBoolExtension: Bool {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_optional_bool_extension) ?? false}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_optional_bool_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_optional_bool_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_optionalBoolExtension: Bool {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_optional_bool_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_optional_bool_extension`.
  /// Subsequent reads from it will return its default value.
  mutating func clearSwiftProtoTesting_optionalBoolExtension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_optional_bool_extension)
  }

  var SwiftProtoTesting_optionalStringExtension: String {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_optional_string_extension) ?? String()}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_optional_string_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_optional_string_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_optionalStringExtension: Bool {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_optional_string_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_optional_string_extension`.
  /// Subsequent reads from it will return its default value.
  mutating func clearSwiftProtoTesting_optionalStringExtension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_optional_string_extension)
  }

  var SwiftProtoTesting_optionalBytesExtension: Data {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_optional_bytes_extension) ?? Data()}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_optional_bytes_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_optional_bytes_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_optionalBytesExtension: Bool {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_optional_bytes_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_optional_bytes_extension`.
  /// Subsequent reads from it will return its default value.
  mutating func clearSwiftProtoTesting_optionalBytesExtension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_optional_bytes_extension)
  }

  var SwiftProtoTesting_optionalGroupExtension: SwiftProtoTesting_OptionalGroup_extension {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_OptionalGroup_extension) ?? SwiftProtoTesting_OptionalGroup_extension()}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_OptionalGroup_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_OptionalGroup_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_optionalGroupExtension: Bool {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_OptionalGroup_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_OptionalGroup_extension`.
  /// Subsequent reads from it will return its default value.
  mutating func clearSwiftProtoTesting_optionalGroupExtension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_OptionalGroup_extension)
  }

  var SwiftProtoTesting_optionalNestedMessageExtension: SwiftProtoTesting_TestAllTypes.NestedMessage {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_optional_nested_message_extension) ?? SwiftProtoTesting_TestAllTypes.NestedMessage()}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_optional_nested_message_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_optional_nested_message_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_optionalNestedMessageExtension: Bool {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_optional_nested_message_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_optional_nested_message_extension`.
  /// Subsequent reads from it will return its default value.
  mutating func clearSwiftProtoTesting_optionalNestedMessageExtension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_optional_nested_message_extension)
  }

  var SwiftProtoTesting_optionalForeignMessageExtension: SwiftProtoTesting_ForeignMessage {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_optional_foreign_message_extension) ?? SwiftProtoTesting_ForeignMessage()}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_optional_foreign_message_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_optional_foreign_message_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_optionalForeignMessageExtension: Bool {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_optional_foreign_message_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_optional_foreign_message_extension`.
  /// Subsequent reads from it will return its default value.
  mutating func clearSwiftProtoTesting_optionalForeignMessageExtension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_optional_foreign_message_extension)
  }

  var SwiftProtoTesting_optionalImportMessageExtension: SwiftProtoTesting_Import_ImportMessage {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_optional_import_message_extension) ?? SwiftProtoTesting_Import_ImportMessage()}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_optional_import_message_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_optional_import_message_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_optionalImportMessageExtension: Bool {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_optional_import_message_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_optional_import_message_extension`.
  /// Subsequent reads from it will return its default value.
  mutating func clearSwiftProtoTesting_optionalImportMessageExtension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_optional_import_message_extension)
  }

  var SwiftProtoTesting_optionalNestedEnumExtension: SwiftProtoTesting_TestAllTypes.NestedEnum {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_optional_nested_enum_extension) ?? .foo}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_optional_nested_enum_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_optional_nested_enum_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_optionalNestedEnumExtension: Bool {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_optional_nested_enum_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_optional_nested_enum_extension`.
  /// Subsequent reads from it will return its default value.
  mutating func clearSwiftProtoTesting_optionalNestedEnumExtension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_optional_nested_enum_extension)
  }

  var SwiftProtoTesting_optionalForeignEnumExtension: SwiftProtoTesting_ForeignEnum {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_optional_foreign_enum_extension) ?? .foreignFoo}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_optional_foreign_enum_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_optional_foreign_enum_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_optionalForeignEnumExtension: Bool {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_optional_foreign_enum_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_optional_foreign_enum_extension`.
  /// Subsequent reads from it will return its default value.
  mutating func clearSwiftProtoTesting_optionalForeignEnumExtension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_optional_foreign_enum_extension)
  }

  var SwiftProtoTesting_optionalImportEnumExtension: SwiftProtoTesting_Import_ImportEnum {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_optional_import_enum_extension) ?? .importFoo}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_optional_import_enum_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_optional_import_enum_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_optionalImportEnumExtension: Bool {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_optional_import_enum_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_optional_import_enum_extension`.
  /// Subsequent reads from it will return its default value.
  mutating func clearSwiftProtoTesting_optionalImportEnumExtension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_optional_import_enum_extension)
  }

  var SwiftProtoTesting_optionalPublicImportMessageExtension: SwiftProtoTesting_Import_PublicImportMessage {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_optional_public_import_message_extension) ?? SwiftProtoTesting_Import_PublicImportMessage()}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_optional_public_import_message_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_optional_public_import_message_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_optionalPublicImportMessageExtension: Bool {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_optional_public_import_message_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_optional_public_import_message_extension`.
  /// Subsequent reads from it will return its default value.
  mutating func clearSwiftProtoTesting_optionalPublicImportMessageExtension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_optional_public_import_message_extension)
  }

  /// Repeated
  var SwiftProtoTesting_repeatedInt32Extension: [Int32] {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_repeated_int32_extension) ?? []}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_repeated_int32_extension, value: newValue)}
  }

  var SwiftProtoTesting_repeatedInt64Extension: [Int64] {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_repeated_int64_extension) ?? []}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_repeated_int64_extension, value: newValue)}
  }

  var SwiftProtoTesting_repeatedUint32Extension: [UInt32] {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_repeated_uint32_extension) ?? []}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_repeated_uint32_extension, value: newValue)}
  }

  var SwiftProtoTesting_repeatedUint64Extension: [UInt64] {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_repeated_uint64_extension) ?? []}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_repeated_uint64_extension, value: newValue)}
  }

  var SwiftProtoTesting_repeatedSint32Extension: [Int32] {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_repeated_sint32_extension) ?? []}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_repeated_sint32_extension, value: newValue)}
  }

  var SwiftProtoTesting_repeatedSint64Extension: [Int64] {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_repeated_sint64_extension) ?? []}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_repeated_sint64_extension, value: newValue)}
  }

  var SwiftProtoTesting_repeatedFixed32Extension: [UInt32] {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_repeated_fixed32_extension) ?? []}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_repeated_fixed32_extension, value: newValue)}
  }

  var SwiftProtoTesting_repeatedFixed64Extension: [UInt64] {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_repeated_fixed64_extension) ?? []}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_repeated_fixed64_extension, value: newValue)}
  }

  var SwiftProtoTesting_repeatedSfixed32Extension: [Int32] {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_repeated_sfixed32_extension) ?? []}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_repeated_sfixed32_extension, value: newValue)}
  }

  var SwiftProtoTesting_repeatedSfixed64Extension: [Int64] {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_repeated_sfixed64_extension) ?? []}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_repeated_sfixed64_extension, value: newValue)}
  }

  var SwiftProtoTesting_repeatedFloatExtension: [Float] {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_repeated_float_extension) ?? []}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_repeated_float_extension, value: newValue)}
  }

  var SwiftProtoTesting_repeatedDoubleExtension: [Double] {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_repeated_double_extension) ?? []}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_repeated_double_extension, value: newValue)}
  }

  var SwiftProtoTesting_repeatedBoolExtension: [Bool] {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_repeated_bool_extension) ?? []}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_repeated_bool_extension, value: newValue)}
  }

  var SwiftProtoTesting_repeatedStringExtension: [String] {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_repeated_string_extension) ?? []}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_repeated_string_extension, value: newValue)}
  }

  var SwiftProtoTesting_repeatedBytesExtension: [Data] {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_repeated_bytes_extension) ?? []}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_repeated_bytes_extension, value: newValue)}
  }

  var SwiftProtoTesting_repeatedGroupExtension: [SwiftProtoTesting_RepeatedGroup_extension] {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_RepeatedGroup_extension) ?? []}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_RepeatedGroup_extension, value: newValue)}
  }

  var SwiftProtoTesting_repeatedNestedMessageExtension: [SwiftProtoTesting_TestAllTypes.NestedMessage] {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_repeated_nested_message_extension) ?? []}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_repeated_nested_message_extension, value: newValue)}
  }

  var SwiftProtoTesting_repeatedForeignMessageExtension: [SwiftProtoTesting_ForeignMessage] {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_repeated_foreign_message_extension) ?? []}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_repeated_foreign_message_extension, value: newValue)}
  }

  var SwiftProtoTesting_repeatedImportMessageExtension: [SwiftProtoTesting_Import_ImportMessage] {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_repeated_import_message_extension) ?? []}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_repeated_import_message_extension, value: newValue)}
  }

  var SwiftProtoTesting_repeatedNestedEnumExtension: [SwiftProtoTesting_TestAllTypes.NestedEnum] {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_repeated_nested_enum_extension) ?? []}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_repeated_nested_enum_extension, value: newValue)}
  }

  var SwiftProtoTesting_repeatedForeignEnumExtension: [SwiftProtoTesting_ForeignEnum] {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_repeated_foreign_enum_extension) ?? []}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_repeated_foreign_enum_extension, value: newValue)}
  }

  var SwiftProtoTesting_repeatedImportEnumExtension: [SwiftProtoTesting_Import_ImportEnum] {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_repeated_import_enum_extension) ?? []}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_repeated_import_enum_extension, value: newValue)}
  }

  /// Singular with defaults
  var SwiftProtoTesting_defaultInt32Extension: Int32 {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_default_int32_extension) ?? 41}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_default_int32_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_default_int32_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_defaultInt32Extension: Bool {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_default_int32_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_default_int32_extension`.
  /// Subsequent reads from it will return its default value.
  mutating func clearSwiftProtoTesting_defaultInt32Extension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_default_int32_extension)
  }

  var SwiftProtoTesting_defaultInt64Extension: Int64 {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_default_int64_extension) ?? 42}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_default_int64_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_default_int64_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_defaultInt64Extension: Bool {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_default_int64_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_default_int64_extension`.
  /// Subsequent reads from it will return its default value.
  mutating func clearSwiftProtoTesting_defaultInt64Extension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_default_int64_extension)
  }

  var SwiftProtoTesting_defaultUint32Extension: UInt32 {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_default_uint32_extension) ?? 43}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_default_uint32_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_default_uint32_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_defaultUint32Extension: Bool {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_default_uint32_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_default_uint32_extension`.
  /// Subsequent reads from it will return its default value.
  mutating func clearSwiftProtoTesting_defaultUint32Extension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_default_uint32_extension)
  }

  var SwiftProtoTesting_defaultUint64Extension: UInt64 {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_default_uint64_extension) ?? 44}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_default_uint64_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_default_uint64_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_defaultUint64Extension: Bool {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_default_uint64_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_default_uint64_extension`.
  /// Subsequent reads from it will return its default value.
  mutating func clearSwiftProtoTesting_defaultUint64Extension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_default_uint64_extension)
  }

  var SwiftProtoTesting_defaultSint32Extension: Int32 {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_default_sint32_extension) ?? -45}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_default_sint32_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_default_sint32_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_defaultSint32Extension: Bool {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_default_sint32_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_default_sint32_extension`.
  /// Subsequent reads from it will return its default value.
  mutating func clearSwiftProtoTesting_defaultSint32Extension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_default_sint32_extension)
  }

  var SwiftProtoTesting_defaultSint64Extension: Int64 {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_default_sint64_extension) ?? 46}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_default_sint64_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_default_sint64_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_defaultSint64Extension: Bool {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_default_sint64_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_default_sint64_extension`.
  /// Subsequent reads from it will return its default value.
  mutating func clearSwiftProtoTesting_defaultSint64Extension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_default_sint64_extension)
  }

  var SwiftProtoTesting_defaultFixed32Extension: UInt32 {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_default_fixed32_extension) ?? 47}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_default_fixed32_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_default_fixed32_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_defaultFixed32Extension: Bool {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_default_fixed32_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_default_fixed32_extension`.
  /// Subsequent reads from it will return its default value.
  mutating func clearSwiftProtoTesting_defaultFixed32Extension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_default_fixed32_extension)
  }

  var SwiftProtoTesting_defaultFixed64Extension: UInt64 {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_default_fixed64_extension) ?? 48}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_default_fixed64_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_default_fixed64_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_defaultFixed64Extension: Bool {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_default_fixed64_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_default_fixed64_extension`.
  /// Subsequent reads from it will return its default value.
  mutating func clearSwiftProtoTesting_defaultFixed64Extension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_default_fixed64_extension)
  }

  var SwiftProtoTesting_defaultSfixed32Extension: Int32 {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_default_sfixed32_extension) ?? 49}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_default_sfixed32_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_default_sfixed32_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_defaultSfixed32Extension: Bool {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_default_sfixed32_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_default_sfixed32_extension`.
  /// Subsequent reads from it will return its default value.
  mutating func clearSwiftProtoTesting_defaultSfixed32Extension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_default_sfixed32_extension)
  }

  var SwiftProtoTesting_defaultSfixed64Extension: Int64 {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_default_sfixed64_extension) ?? -50}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_default_sfixed64_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_default_sfixed64_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_defaultSfixed64Extension: Bool {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_default_sfixed64_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_default_sfixed64_extension`.
  /// Subsequent reads from it will return its default value.
  mutating func clearSwiftProtoTesting_defaultSfixed64Extension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_default_sfixed64_extension)
  }

  var SwiftProtoTesting_defaultFloatExtension: Float {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_default_float_extension) ?? 51.5}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_default_float_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_default_float_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_defaultFloatExtension: Bool {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_default_float_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_default_float_extension`.
  /// Subsequent reads from it will return its default value.
  mutating func clearSwiftProtoTesting_defaultFloatExtension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_default_float_extension)
  }

  var SwiftProtoTesting_defaultDoubleExtension: Double {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_default_double_extension) ?? 52000}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_default_double_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_default_double_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_defaultDoubleExtension: Bool {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_default_double_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_default_double_extension`.
  /// Subsequent reads from it will return its default value.
  mutating func clearSwiftProtoTesting_defaultDoubleExtension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_default_double_extension)
  }

  var SwiftProtoTesting_defaultBoolExtension: Bool {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_default_bool_extension) ?? true}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_default_bool_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_default_bool_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_defaultBoolExtension: Bool {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_default_bool_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_default_bool_extension`.
  /// Subsequent reads from it will return its default value.
  mutating func clearSwiftProtoTesting_defaultBoolExtension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_default_bool_extension)
  }

  var SwiftProtoTesting_defaultStringExtension: String {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_default_string_extension) ?? "hello"}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_default_string_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_default_string_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_defaultStringExtension: Bool {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_default_string_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_default_string_extension`.
  /// Subsequent reads from it will return its default value.
  mutating func clearSwiftProtoTesting_defaultStringExtension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_default_string_extension)
  }

  var SwiftProtoTesting_defaultBytesExtension: Data {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_default_bytes_extension) ?? Data([119, 111, 114, 108, 100])}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_default_bytes_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_default_bytes_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_defaultBytesExtension: Bool {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_default_bytes_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_default_bytes_extension`.
  /// Subsequent reads from it will return its default value.
  mutating func clearSwiftProtoTesting_defaultBytesExtension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_default_bytes_extension)
  }

  var SwiftProtoTesting_defaultNestedEnumExtension: SwiftProtoTesting_TestAllTypes.NestedEnum {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_default_nested_enum_extension) ?? .bar}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_default_nested_enum_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_default_nested_enum_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_defaultNestedEnumExtension: Bool {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_default_nested_enum_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_default_nested_enum_extension`.
  /// Subsequent reads from it will return its default value.
  mutating func clearSwiftProtoTesting_defaultNestedEnumExtension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_default_nested_enum_extension)
  }

  var SwiftProtoTesting_defaultForeignEnumExtension: SwiftProtoTesting_ForeignEnum {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_default_foreign_enum_extension) ?? .foreignBar}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_default_foreign_enum_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_default_foreign_enum_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_defaultForeignEnumExtension: Bool {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_default_foreign_enum_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_default_foreign_enum_extension`.
  /// Subsequent reads from it will return its default value.
  mutating func clearSwiftProtoTesting_defaultForeignEnumExtension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_default_foreign_enum_extension)
  }

  var SwiftProtoTesting_defaultImportEnumExtension: SwiftProtoTesting_Import_ImportEnum {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_default_import_enum_extension) ?? .importBar}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_default_import_enum_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_default_import_enum_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_defaultImportEnumExtension: Bool {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_default_import_enum_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_default_import_enum_extension`.
  /// Subsequent reads from it will return its default value.
  mutating func clearSwiftProtoTesting_defaultImportEnumExtension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_default_import_enum_extension)
  }

  /// For oneof test
  var SwiftProtoTesting_oneofUint32Extension: UInt32 {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_oneof_uint32_extension) ?? 0}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_oneof_uint32_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_oneof_uint32_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_oneofUint32Extension: Bool {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_oneof_uint32_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_oneof_uint32_extension`.
  /// Subsequent reads from it will return its default value.
  mutating func clearSwiftProtoTesting_oneofUint32Extension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_oneof_uint32_extension)
  }

  var SwiftProtoTesting_oneofNestedMessageExtension: SwiftProtoTesting_TestAllTypes.NestedMessage {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_oneof_nested_message_extension) ?? SwiftProtoTesting_TestAllTypes.NestedMessage()}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_oneof_nested_message_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_oneof_nested_message_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_oneofNestedMessageExtension: Bool {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_oneof_nested_message_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_oneof_nested_message_extension`.
  /// Subsequent reads from it will return its default value.
  mutating func clearSwiftProtoTesting_oneofNestedMessageExtension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_oneof_nested_message_extension)
  }

  var SwiftProtoTesting_oneofStringExtension: String {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_oneof_string_extension) ?? String()}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_oneof_string_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_oneof_string_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_oneofStringExtension: Bool {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_oneof_string_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_oneof_string_extension`.
  /// Subsequent reads from it will return its default value.
  mutating func clearSwiftProtoTesting_oneofStringExtension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_oneof_string_extension)
  }

  var SwiftProtoTesting_oneofBytesExtension: Data {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_oneof_bytes_extension) ?? Data()}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_oneof_bytes_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_oneof_bytes_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_oneofBytesExtension: Bool {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_oneof_bytes_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_oneof_bytes_extension`.
  /// Subsequent reads from it will return its default value.
  mutating func clearSwiftProtoTesting_oneofBytesExtension() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_oneof_bytes_extension)
  }

  /// Check for bug where string extensions declared in tested scope did not
  /// compile.
  var SwiftProtoTesting_TestNestedExtension_test: String {
    get {return getExtensionValue(ext: SwiftProtoTesting_TestNestedExtension.Extensions.test) ?? "test"}
    set {setExtensionValue(ext: SwiftProtoTesting_TestNestedExtension.Extensions.test, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_TestNestedExtension.Extensions.test`
  /// has been explicitly set.
  var hasSwiftProtoTesting_TestNestedExtension_test: Bool {
    return hasExtensionValue(ext: SwiftProtoTesting_TestNestedExtension.Extensions.test)
  }
  /// Clears the value of extension `SwiftProtoTesting_TestNestedExtension.Extensions.test`.
  /// Subsequent reads from it will return its default value.
  mutating func clearSwiftProtoTesting_TestNestedExtension_test() {
    clearExtensionValue(ext: SwiftProtoTesting_TestNestedExtension.Extensions.test)
  }

  /// Used to test if generated extension name is correct when there are
  /// underscores.
  var SwiftProtoTesting_TestNestedExtension_nestedStringExtension: String {
    get {return getExtensionValue(ext: SwiftProtoTesting_TestNestedExtension.Extensions.nested_string_extension) ?? String()}
    set {setExtensionValue(ext: SwiftProtoTesting_TestNestedExtension.Extensions.nested_string_extension, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_TestNestedExtension.Extensions.nested_string_extension`
  /// has been explicitly set.
  var hasSwiftProtoTesting_TestNestedExtension_nestedStringExtension: Bool {
    return hasExtensionValue(ext: SwiftProtoTesting_TestNestedExtension.Extensions.nested_string_extension)
  }
  /// Clears the value of extension `SwiftProtoTesting_TestNestedExtension.Extensions.nested_string_extension`.
  /// Subsequent reads from it will return its default value.
  mutating func clearSwiftProtoTesting_TestNestedExtension_nestedStringExtension() {
    clearExtensionValue(ext: SwiftProtoTesting_TestNestedExtension.Extensions.nested_string_extension)
  }

  var SwiftProtoTesting_TestRequired_single: SwiftProtoTesting_TestRequired {
    get {return getExtensionValue(ext: SwiftProtoTesting_TestRequired.Extensions.single) ?? SwiftProtoTesting_TestRequired()}
    set {setExtensionValue(ext: SwiftProtoTesting_TestRequired.Extensions.single, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_TestRequired.Extensions.single`
  /// has been explicitly set.
  var hasSwiftProtoTesting_TestRequired_single: Bool {
    return hasExtensionValue(ext: SwiftProtoTesting_TestRequired.Extensions.single)
  }
  /// Clears the value of extension `SwiftProtoTesting_TestRequired.Extensions.single`.
  /// Subsequent reads from it will return its default value.
  mutating func clearSwiftProtoTesting_TestRequired_single() {
    clearExtensionValue(ext: SwiftProtoTesting_TestRequired.Extensions.single)
  }

  var SwiftProtoTesting_TestRequired_multi: [SwiftProtoTesting_TestRequired] {
    get {return getExtensionValue(ext: SwiftProtoTesting_TestRequired.Extensions.multi) ?? []}
    set {setExtensionValue(ext: SwiftProtoTesting_TestRequired.Extensions.multi, value: newValue)}
  }
}

extension SwiftProtoTesting_TestFieldOrderings {

  var SwiftProtoTesting_myExtensionString: String {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_my_extension_string) ?? String()}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_my_extension_string, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_my_extension_string`
  /// has been explicitly set.
  var hasSwiftProtoTesting_myExtensionString: Bool {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_my_extension_string)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_my_extension_string`.
  /// Subsequent reads from it will return its default value.
  mutating func clearSwiftProtoTesting_myExtensionString() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_my_extension_string)
  }

  var SwiftProtoTesting_myExtensionInt: Int32 {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_my_extension_int) ?? 0}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_my_extension_int, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extensions_my_extension_int`
  /// has been explicitly set.
  var hasSwiftProtoTesting_myExtensionInt: Bool {
    return hasExtensionValue(ext: SwiftProtoTesting_Extensions_my_extension_int)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extensions_my_extension_int`.
  /// Subsequent reads from it will return its default value.
  mutating func clearSwiftProtoTesting_myExtensionInt() {
    clearExtensionValue(ext: SwiftProtoTesting_Extensions_my_extension_int)
  }
}

extension SwiftProtoTesting_TestPackedExtensions {

  var SwiftProtoTesting_packedInt32Extension: [Int32] {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_packed_int32_extension) ?? []}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_packed_int32_extension, value: newValue)}
  }

  var SwiftProtoTesting_packedInt64Extension: [Int64] {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_packed_int64_extension) ?? []}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_packed_int64_extension, value: newValue)}
  }

  var SwiftProtoTesting_packedUint32Extension: [UInt32] {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_packed_uint32_extension) ?? []}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_packed_uint32_extension, value: newValue)}
  }

  var SwiftProtoTesting_packedUint64Extension: [UInt64] {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_packed_uint64_extension) ?? []}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_packed_uint64_extension, value: newValue)}
  }

  var SwiftProtoTesting_packedSint32Extension: [Int32] {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_packed_sint32_extension) ?? []}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_packed_sint32_extension, value: newValue)}
  }

  var SwiftProtoTesting_packedSint64Extension: [Int64] {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_packed_sint64_extension) ?? []}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_packed_sint64_extension, value: newValue)}
  }

  var SwiftProtoTesting_packedFixed32Extension: [UInt32] {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_packed_fixed32_extension) ?? []}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_packed_fixed32_extension, value: newValue)}
  }

  var SwiftProtoTesting_packedFixed64Extension: [UInt64] {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_packed_fixed64_extension) ?? []}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_packed_fixed64_extension, value: newValue)}
  }

  var SwiftProtoTesting_packedSfixed32Extension: [Int32] {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_packed_sfixed32_extension) ?? []}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_packed_sfixed32_extension, value: newValue)}
  }

  var SwiftProtoTesting_packedSfixed64Extension: [Int64] {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_packed_sfixed64_extension) ?? []}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_packed_sfixed64_extension, value: newValue)}
  }

  var SwiftProtoTesting_packedFloatExtension: [Float] {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_packed_float_extension) ?? []}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_packed_float_extension, value: newValue)}
  }

  var SwiftProtoTesting_packedDoubleExtension: [Double] {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_packed_double_extension) ?? []}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_packed_double_extension, value: newValue)}
  }

  var SwiftProtoTesting_packedBoolExtension: [Bool] {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_packed_bool_extension) ?? []}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_packed_bool_extension, value: newValue)}
  }

  var SwiftProtoTesting_packedEnumExtension: [SwiftProtoTesting_ForeignEnum] {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extensions_packed_enum_extension) ?? []}
    set {setExtensionValue(ext: SwiftProtoTesting_Extensions_packed_enum_extension, value: newValue)}
  }
}

extension SwiftProtoTesting_TestParsingMerge {

  var SwiftProtoTesting_TestParsingMerge_optionalExt: SwiftProtoTesting_TestAllTypes {
    get {return getExtensionValue(ext: SwiftProtoTesting_TestParsingMerge.Extensions.optional_ext) ?? SwiftProtoTesting_TestAllTypes()}
    set {setExtensionValue(ext: SwiftProtoTesting_TestParsingMerge.Extensions.optional_ext, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_TestParsingMerge.Extensions.optional_ext`
  /// has been explicitly set.
  var hasSwiftProtoTesting_TestParsingMerge_optionalExt: Bool {
    return hasExtensionValue(ext: SwiftProtoTesting_TestParsingMerge.Extensions.optional_ext)
  }
  /// Clears the value of extension `SwiftProtoTesting_TestParsingMerge.Extensions.optional_ext`.
  /// Subsequent reads from it will return its default value.
  mutating func clearSwiftProtoTesting_TestParsingMerge_optionalExt() {
    clearExtensionValue(ext: SwiftProtoTesting_TestParsingMerge.Extensions.optional_ext)
  }

  var SwiftProtoTesting_TestParsingMerge_repeatedExt: [SwiftProtoTesting_TestAllTypes] {
    get {return getExtensionValue(ext: SwiftProtoTesting_TestParsingMerge.Extensions.repeated_ext) ?? []}
    set {setExtensionValue(ext: SwiftProtoTesting_TestParsingMerge.Extensions.repeated_ext, value: newValue)}
  }

}

// MARK: - File's ExtensionMap: SwiftProtoTesting_Unittest_Extensions

/// A `SwiftProtobuf.SimpleExtensionMap` that includes all of the extensions defined by
/// this .proto file. It can be used any place an `SwiftProtobuf.ExtensionMap` is needed
/// in parsing, or it can be combined with other `SwiftProtobuf.SimpleExtensionMap`s to create
/// a larger `SwiftProtobuf.SimpleExtensionMap`.
let SwiftProtoTesting_Unittest_Extensions: SwiftProtobuf.SimpleExtensionMap = [
  SwiftProtoTesting_Extensions_optional_int32_extension,
  SwiftProtoTesting_Extensions_optional_int64_extension,
  SwiftProtoTesting_Extensions_optional_uint32_extension,
  SwiftProtoTesting_Extensions_optional_uint64_extension,
  SwiftProtoTesting_Extensions_optional_sint32_extension,
  SwiftProtoTesting_Extensions_optional_sint64_extension,
  SwiftProtoTesting_Extensions_optional_fixed32_extension,
  SwiftProtoTesting_Extensions_optional_fixed64_extension,
  SwiftProtoTesting_Extensions_optional_sfixed32_extension,
  SwiftProtoTesting_Extensions_optional_sfixed64_extension,
  SwiftProtoTesting_Extensions_optional_float_extension,
  SwiftProtoTesting_Extensions_optional_double_extension,
  SwiftProtoTesting_Extensions_optional_bool_extension,
  SwiftProtoTesting_Extensions_optional_string_extension,
  SwiftProtoTesting_Extensions_optional_bytes_extension,
  SwiftProtoTesting_Extensions_OptionalGroup_extension,
  SwiftProtoTesting_Extensions_optional_nested_message_extension,
  SwiftProtoTesting_Extensions_optional_foreign_message_extension,
  SwiftProtoTesting_Extensions_optional_import_message_extension,
  SwiftProtoTesting_Extensions_optional_nested_enum_extension,
  SwiftProtoTesting_Extensions_optional_foreign_enum_extension,
  SwiftProtoTesting_Extensions_optional_import_enum_extension,
  SwiftProtoTesting_Extensions_optional_public_import_message_extension,
  SwiftProtoTesting_Extensions_repeated_int32_extension,
  SwiftProtoTesting_Extensions_repeated_int64_extension,
  SwiftProtoTesting_Extensions_repeated_uint32_extension,
  SwiftProtoTesting_Extensions_repeated_uint64_extension,
  SwiftProtoTesting_Extensions_repeated_sint32_extension,
  SwiftProtoTesting_Extensions_repeated_sint64_extension,
  SwiftProtoTesting_Extensions_repeated_fixed32_extension,
  SwiftProtoTesting_Extensions_repeated_fixed64_extension,
  SwiftProtoTesting_Extensions_repeated_sfixed32_extension,
  SwiftProtoTesting_Extensions_repeated_sfixed64_extension,
  SwiftProtoTesting_Extensions_repeated_float_extension,
  SwiftProtoTesting_Extensions_repeated_double_extension,
  SwiftProtoTesting_Extensions_repeated_bool_extension,
  SwiftProtoTesting_Extensions_repeated_string_extension,
  SwiftProtoTesting_Extensions_repeated_bytes_extension,
  SwiftProtoTesting_Extensions_RepeatedGroup_extension,
  SwiftProtoTesting_Extensions_repeated_nested_message_extension,
  SwiftProtoTesting_Extensions_repeated_foreign_message_extension,
  SwiftProtoTesting_Extensions_repeated_import_message_extension,
  SwiftProtoTesting_Extensions_repeated_nested_enum_extension,
  SwiftProtoTesting_Extensions_repeated_foreign_enum_extension,
  SwiftProtoTesting_Extensions_repeated_import_enum_extension,
  SwiftProtoTesting_Extensions_default_int32_extension,
  SwiftProtoTesting_Extensions_default_int64_extension,
  SwiftProtoTesting_Extensions_default_uint32_extension,
  SwiftProtoTesting_Extensions_default_uint64_extension,
  SwiftProtoTesting_Extensions_default_sint32_extension,
  SwiftProtoTesting_Extensions_default_sint64_extension,
  SwiftProtoTesting_Extensions_default_fixed32_extension,
  SwiftProtoTesting_Extensions_default_fixed64_extension,
  SwiftProtoTesting_Extensions_default_sfixed32_extension,
  SwiftProtoTesting_Extensions_default_sfixed64_extension,
  SwiftProtoTesting_Extensions_default_float_extension,
  SwiftProtoTesting_Extensions_default_double_extension,
  SwiftProtoTesting_Extensions_default_bool_extension,
  SwiftProtoTesting_Extensions_default_string_extension,
  SwiftProtoTesting_Extensions_default_bytes_extension,
  SwiftProtoTesting_Extensions_default_nested_enum_extension,
  SwiftProtoTesting_Extensions_default_foreign_enum_extension,
  SwiftProtoTesting_Extensions_default_import_enum_extension,
  SwiftProtoTesting_Extensions_oneof_uint32_extension,
  SwiftProtoTesting_Extensions_oneof_nested_message_extension,
  SwiftProtoTesting_Extensions_oneof_string_extension,
  SwiftProtoTesting_Extensions_oneof_bytes_extension,
  SwiftProtoTesting_Extensions_my_extension_string,
  SwiftProtoTesting_Extensions_my_extension_int,
  SwiftProtoTesting_Extensions_packed_int32_extension,
  SwiftProtoTesting_Extensions_packed_int64_extension,
  SwiftProtoTesting_Extensions_packed_uint32_extension,
  SwiftProtoTesting_Extensions_packed_uint64_extension,
  SwiftProtoTesting_Extensions_packed_sint32_extension,
  SwiftProtoTesting_Extensions_packed_sint64_extension,
  SwiftProtoTesting_Extensions_packed_fixed32_extension,
  SwiftProtoTesting_Extensions_packed_fixed64_extension,
  SwiftProtoTesting_Extensions_packed_sfixed32_extension,
  SwiftProtoTesting_Extensions_packed_sfixed64_extension,
  SwiftProtoTesting_Extensions_packed_float_extension,
  SwiftProtoTesting_Extensions_packed_double_extension,
  SwiftProtoTesting_Extensions_packed_bool_extension,
  SwiftProtoTesting_Extensions_packed_enum_extension,
  SwiftProtoTesting_TestNestedExtension.Extensions.test,
  SwiftProtoTesting_TestNestedExtension.Extensions.nested_string_extension,
  SwiftProtoTesting_TestRequired.Extensions.single,
  SwiftProtoTesting_TestRequired.Extensions.multi,
  SwiftProtoTesting_TestParsingMerge.Extensions.optional_ext,
  SwiftProtoTesting_TestParsingMerge.Extensions.repeated_ext
]

// Extension Objects - The only reason these might be needed is when manually
// constructing a `SimpleExtensionMap`, otherwise, use the above _Extension Properties_
// accessors for the extension fields on the messages directly.

/// Singular
let SwiftProtoTesting_Extensions_optional_int32_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 1,
  fieldName: "swift_proto_testing.optional_int32_extension"
)

let SwiftProtoTesting_Extensions_optional_int64_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufInt64>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 2,
  fieldName: "swift_proto_testing.optional_int64_extension"
)

let SwiftProtoTesting_Extensions_optional_uint32_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufUInt32>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 3,
  fieldName: "swift_proto_testing.optional_uint32_extension"
)

let SwiftProtoTesting_Extensions_optional_uint64_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufUInt64>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 4,
  fieldName: "swift_proto_testing.optional_uint64_extension"
)

let SwiftProtoTesting_Extensions_optional_sint32_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufSInt32>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 5,
  fieldName: "swift_proto_testing.optional_sint32_extension"
)

let SwiftProtoTesting_Extensions_optional_sint64_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufSInt64>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 6,
  fieldName: "swift_proto_testing.optional_sint64_extension"
)

let SwiftProtoTesting_Extensions_optional_fixed32_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufFixed32>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 7,
  fieldName: "swift_proto_testing.optional_fixed32_extension"
)

let SwiftProtoTesting_Extensions_optional_fixed64_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufFixed64>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 8,
  fieldName: "swift_proto_testing.optional_fixed64_extension"
)

let SwiftProtoTesting_Extensions_optional_sfixed32_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufSFixed32>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 9,
  fieldName: "swift_proto_testing.optional_sfixed32_extension"
)

let SwiftProtoTesting_Extensions_optional_sfixed64_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufSFixed64>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 10,
  fieldName: "swift_proto_testing.optional_sfixed64_extension"
)

let SwiftProtoTesting_Extensions_optional_float_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufFloat>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 11,
  fieldName: "swift_proto_testing.optional_float_extension"
)

let SwiftProtoTesting_Extensions_optional_double_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufDouble>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 12,
  fieldName: "swift_proto_testing.optional_double_extension"
)

let SwiftProtoTesting_Extensions_optional_bool_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufBool>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 13,
  fieldName: "swift_proto_testing.optional_bool_extension"
)

let SwiftProtoTesting_Extensions_optional_string_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufString>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 14,
  fieldName: "swift_proto_testing.optional_string_extension"
)

let SwiftProtoTesting_Extensions_optional_bytes_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufBytes>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 15,
  fieldName: "swift_proto_testing.optional_bytes_extension"
)

let SwiftProtoTesting_Extensions_OptionalGroup_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalGroupExtensionField<SwiftProtoTesting_OptionalGroup_extension>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 16,
  fieldName: "swift_proto_testing.optionalgroup_extension"
)

let SwiftProtoTesting_Extensions_optional_nested_message_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<SwiftProtoTesting_TestAllTypes.NestedMessage>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 18,
  fieldName: "swift_proto_testing.optional_nested_message_extension"
)

let SwiftProtoTesting_Extensions_optional_foreign_message_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<SwiftProtoTesting_ForeignMessage>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 19,
  fieldName: "swift_proto_testing.optional_foreign_message_extension"
)

let SwiftProtoTesting_Extensions_optional_import_message_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<SwiftProtoTesting_Import_ImportMessage>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 20,
  fieldName: "swift_proto_testing.optional_import_message_extension"
)

let SwiftProtoTesting_Extensions_optional_nested_enum_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalEnumExtensionField<SwiftProtoTesting_TestAllTypes.NestedEnum>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 21,
  fieldName: "swift_proto_testing.optional_nested_enum_extension"
)

let SwiftProtoTesting_Extensions_optional_foreign_enum_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalEnumExtensionField<SwiftProtoTesting_ForeignEnum>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 22,
  fieldName: "swift_proto_testing.optional_foreign_enum_extension"
)

let SwiftProtoTesting_Extensions_optional_import_enum_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalEnumExtensionField<SwiftProtoTesting_Import_ImportEnum>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 23,
  fieldName: "swift_proto_testing.optional_import_enum_extension"
)

let SwiftProtoTesting_Extensions_optional_public_import_message_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<SwiftProtoTesting_Import_PublicImportMessage>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 26,
  fieldName: "swift_proto_testing.optional_public_import_message_extension"
)

/// Repeated
let SwiftProtoTesting_Extensions_repeated_int32_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufInt32>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 31,
  fieldName: "swift_proto_testing.repeated_int32_extension"
)

let SwiftProtoTesting_Extensions_repeated_int64_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufInt64>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 32,
  fieldName: "swift_proto_testing.repeated_int64_extension"
)

let SwiftProtoTesting_Extensions_repeated_uint32_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufUInt32>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 33,
  fieldName: "swift_proto_testing.repeated_uint32_extension"
)

let SwiftProtoTesting_Extensions_repeated_uint64_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufUInt64>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 34,
  fieldName: "swift_proto_testing.repeated_uint64_extension"
)

let SwiftProtoTesting_Extensions_repeated_sint32_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufSInt32>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 35,
  fieldName: "swift_proto_testing.repeated_sint32_extension"
)

let SwiftProtoTesting_Extensions_repeated_sint64_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufSInt64>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 36,
  fieldName: "swift_proto_testing.repeated_sint64_extension"
)

let SwiftProtoTesting_Extensions_repeated_fixed32_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufFixed32>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 37,
  fieldName: "swift_proto_testing.repeated_fixed32_extension"
)

let SwiftProtoTesting_Extensions_repeated_fixed64_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufFixed64>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 38,
  fieldName: "swift_proto_testing.repeated_fixed64_extension"
)

let SwiftProtoTesting_Extensions_repeated_sfixed32_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufSFixed32>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 39,
  fieldName: "swift_proto_testing.repeated_sfixed32_extension"
)

let SwiftProtoTesting_Extensions_repeated_sfixed64_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufSFixed64>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 40,
  fieldName: "swift_proto_testing.repeated_sfixed64_extension"
)

let SwiftProtoTesting_Extensions_repeated_float_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufFloat>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 41,
  fieldName: "swift_proto_testing.repeated_float_extension"
)

let SwiftProtoTesting_Extensions_repeated_double_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufDouble>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 42,
  fieldName: "swift_proto_testing.repeated_double_extension"
)

let SwiftProtoTesting_Extensions_repeated_bool_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufBool>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 43,
  fieldName: "swift_proto_testing.repeated_bool_extension"
)

let SwiftProtoTesting_Extensions_repeated_string_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufString>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 44,
  fieldName: "swift_proto_testing.repeated_string_extension"
)

let SwiftProtoTesting_Extensions_repeated_bytes_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufBytes>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 45,
  fieldName: "swift_proto_testing.repeated_bytes_extension"
)

let SwiftProtoTesting_Extensions_RepeatedGroup_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedGroupExtensionField<SwiftProtoTesting_RepeatedGroup_extension>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 46,
  fieldName: "swift_proto_testing.repeatedgroup_extension"
)

let SwiftProtoTesting_Extensions_repeated_nested_message_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedMessageExtensionField<SwiftProtoTesting_TestAllTypes.NestedMessage>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 48,
  fieldName: "swift_proto_testing.repeated_nested_message_extension"
)

let SwiftProtoTesting_Extensions_repeated_foreign_message_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedMessageExtensionField<SwiftProtoTesting_ForeignMessage>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 49,
  fieldName: "swift_proto_testing.repeated_foreign_message_extension"
)

let SwiftProtoTesting_Extensions_repeated_import_message_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedMessageExtensionField<SwiftProtoTesting_Import_ImportMessage>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 50,
  fieldName: "swift_proto_testing.repeated_import_message_extension"
)

let SwiftProtoTesting_Extensions_repeated_nested_enum_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedEnumExtensionField<SwiftProtoTesting_TestAllTypes.NestedEnum>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 51,
  fieldName: "swift_proto_testing.repeated_nested_enum_extension"
)

let SwiftProtoTesting_Extensions_repeated_foreign_enum_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedEnumExtensionField<SwiftProtoTesting_ForeignEnum>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 52,
  fieldName: "swift_proto_testing.repeated_foreign_enum_extension"
)

let SwiftProtoTesting_Extensions_repeated_import_enum_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedEnumExtensionField<SwiftProtoTesting_Import_ImportEnum>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 53,
  fieldName: "swift_proto_testing.repeated_import_enum_extension"
)

/// Singular with defaults
let SwiftProtoTesting_Extensions_default_int32_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 61,
  fieldName: "swift_proto_testing.default_int32_extension"
)

let SwiftProtoTesting_Extensions_default_int64_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufInt64>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 62,
  fieldName: "swift_proto_testing.default_int64_extension"
)

let SwiftProtoTesting_Extensions_default_uint32_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufUInt32>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 63,
  fieldName: "swift_proto_testing.default_uint32_extension"
)

let SwiftProtoTesting_Extensions_default_uint64_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufUInt64>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 64,
  fieldName: "swift_proto_testing.default_uint64_extension"
)

let SwiftProtoTesting_Extensions_default_sint32_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufSInt32>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 65,
  fieldName: "swift_proto_testing.default_sint32_extension"
)

let SwiftProtoTesting_Extensions_default_sint64_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufSInt64>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 66,
  fieldName: "swift_proto_testing.default_sint64_extension"
)

let SwiftProtoTesting_Extensions_default_fixed32_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufFixed32>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 67,
  fieldName: "swift_proto_testing.default_fixed32_extension"
)

let SwiftProtoTesting_Extensions_default_fixed64_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufFixed64>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 68,
  fieldName: "swift_proto_testing.default_fixed64_extension"
)

let SwiftProtoTesting_Extensions_default_sfixed32_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufSFixed32>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 69,
  fieldName: "swift_proto_testing.default_sfixed32_extension"
)

let SwiftProtoTesting_Extensions_default_sfixed64_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufSFixed64>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 70,
  fieldName: "swift_proto_testing.default_sfixed64_extension"
)

let SwiftProtoTesting_Extensions_default_float_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufFloat>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 71,
  fieldName: "swift_proto_testing.default_float_extension"
)

let SwiftProtoTesting_Extensions_default_double_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufDouble>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 72,
  fieldName: "swift_proto_testing.default_double_extension"
)

let SwiftProtoTesting_Extensions_default_bool_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufBool>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 73,
  fieldName: "swift_proto_testing.default_bool_extension"
)

let SwiftProtoTesting_Extensions_default_string_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufString>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 74,
  fieldName: "swift_proto_testing.default_string_extension"
)

let SwiftProtoTesting_Extensions_default_bytes_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufBytes>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 75,
  fieldName: "swift_proto_testing.default_bytes_extension"
)

let SwiftProtoTesting_Extensions_default_nested_enum_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalEnumExtensionField<SwiftProtoTesting_TestAllTypes.NestedEnum>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 81,
  fieldName: "swift_proto_testing.default_nested_enum_extension"
)

let SwiftProtoTesting_Extensions_default_foreign_enum_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalEnumExtensionField<SwiftProtoTesting_ForeignEnum>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 82,
  fieldName: "swift_proto_testing.default_foreign_enum_extension"
)

let SwiftProtoTesting_Extensions_default_import_enum_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalEnumExtensionField<SwiftProtoTesting_Import_ImportEnum>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 83,
  fieldName: "swift_proto_testing.default_import_enum_extension"
)

/// For oneof test
let SwiftProtoTesting_Extensions_oneof_uint32_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufUInt32>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 111,
  fieldName: "swift_proto_testing.oneof_uint32_extension"
)

let SwiftProtoTesting_Extensions_oneof_nested_message_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<SwiftProtoTesting_TestAllTypes.NestedMessage>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 112,
  fieldName: "swift_proto_testing.oneof_nested_message_extension"
)

let SwiftProtoTesting_Extensions_oneof_string_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufString>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 113,
  fieldName: "swift_proto_testing.oneof_string_extension"
)

let SwiftProtoTesting_Extensions_oneof_bytes_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufBytes>, SwiftProtoTesting_TestAllExtensions>(
  _protobuf_fieldNumber: 114,
  fieldName: "swift_proto_testing.oneof_bytes_extension"
)

let SwiftProtoTesting_Extensions_my_extension_string = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufString>, SwiftProtoTesting_TestFieldOrderings>(
  _protobuf_fieldNumber: 50,
  fieldName: "swift_proto_testing.my_extension_string"
)

let SwiftProtoTesting_Extensions_my_extension_int = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, SwiftProtoTesting_TestFieldOrderings>(
  _protobuf_fieldNumber: 5,
  fieldName: "swift_proto_testing.my_extension_int"
)

let SwiftProtoTesting_Extensions_packed_int32_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.PackedExtensionField<SwiftProtobuf.ProtobufInt32>, SwiftProtoTesting_TestPackedExtensions>(
  _protobuf_fieldNumber: 90,
  fieldName: "swift_proto_testing.packed_int32_extension"
)

let SwiftProtoTesting_Extensions_packed_int64_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.PackedExtensionField<SwiftProtobuf.ProtobufInt64>, SwiftProtoTesting_TestPackedExtensions>(
  _protobuf_fieldNumber: 91,
  fieldName: "swift_proto_testing.packed_int64_extension"
)

let SwiftProtoTesting_Extensions_packed_uint32_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.PackedExtensionField<SwiftProtobuf.ProtobufUInt32>, SwiftProtoTesting_TestPackedExtensions>(
  _protobuf_fieldNumber: 92,
  fieldName: "swift_proto_testing.packed_uint32_extension"
)

let SwiftProtoTesting_Extensions_packed_uint64_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.PackedExtensionField<SwiftProtobuf.ProtobufUInt64>, SwiftProtoTesting_TestPackedExtensions>(
  _protobuf_fieldNumber: 93,
  fieldName: "swift_proto_testing.packed_uint64_extension"
)

let SwiftProtoTesting_Extensions_packed_sint32_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.PackedExtensionField<SwiftProtobuf.ProtobufSInt32>, SwiftProtoTesting_TestPackedExtensions>(
  _protobuf_fieldNumber: 94,
  fieldName: "swift_proto_testing.packed_sint32_extension"
)

let SwiftProtoTesting_Extensions_packed_sint64_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.PackedExtensionField<SwiftProtobuf.ProtobufSInt64>, SwiftProtoTesting_TestPackedExtensions>(
  _protobuf_fieldNumber: 95,
  fieldName: "swift_proto_testing.packed_sint64_extension"
)

let SwiftProtoTesting_Extensions_packed_fixed32_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.PackedExtensionField<SwiftProtobuf.ProtobufFixed32>, SwiftProtoTesting_TestPackedExtensions>(
  _protobuf_fieldNumber: 96,
  fieldName: "swift_proto_testing.packed_fixed32_extension"
)

let SwiftProtoTesting_Extensions_packed_fixed64_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.PackedExtensionField<SwiftProtobuf.ProtobufFixed64>, SwiftProtoTesting_TestPackedExtensions>(
  _protobuf_fieldNumber: 97,
  fieldName: "swift_proto_testing.packed_fixed64_extension"
)

let SwiftProtoTesting_Extensions_packed_sfixed32_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.PackedExtensionField<SwiftProtobuf.ProtobufSFixed32>, SwiftProtoTesting_TestPackedExtensions>(
  _protobuf_fieldNumber: 98,
  fieldName: "swift_proto_testing.packed_sfixed32_extension"
)

let SwiftProtoTesting_Extensions_packed_sfixed64_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.PackedExtensionField<SwiftProtobuf.ProtobufSFixed64>, SwiftProtoTesting_TestPackedExtensions>(
  _protobuf_fieldNumber: 99,
  fieldName: "swift_proto_testing.packed_sfixed64_extension"
)

let SwiftProtoTesting_Extensions_packed_float_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.PackedExtensionField<SwiftProtobuf.ProtobufFloat>, SwiftProtoTesting_TestPackedExtensions>(
  _protobuf_fieldNumber: 100,
  fieldName: "swift_proto_testing.packed_float_extension"
)

let SwiftProtoTesting_Extensions_packed_double_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.PackedExtensionField<SwiftProtobuf.ProtobufDouble>, SwiftProtoTesting_TestPackedExtensions>(
  _protobuf_fieldNumber: 101,
  fieldName: "swift_proto_testing.packed_double_extension"
)

let SwiftProtoTesting_Extensions_packed_bool_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.PackedExtensionField<SwiftProtobuf.ProtobufBool>, SwiftProtoTesting_TestPackedExtensions>(
  _protobuf_fieldNumber: 102,
  fieldName: "swift_proto_testing.packed_bool_extension"
)

let SwiftProtoTesting_Extensions_packed_enum_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.PackedEnumExtensionField<SwiftProtoTesting_ForeignEnum>, SwiftProtoTesting_TestPackedExtensions>(
  _protobuf_fieldNumber: 103,
  fieldName: "swift_proto_testing.packed_enum_extension"
)

extension SwiftProtoTesting_TestNestedExtension {
  enum Extensions {
    /// Check for bug where string extensions declared in tested scope did not
    /// compile.
    static let test = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufString>, SwiftProtoTesting_TestAllExtensions>(
      _protobuf_fieldNumber: 1002,
      fieldName: "swift_proto_testing.TestNestedExtension.test"
    )

    /// Used to test if generated extension name is correct when there are
    /// underscores.
    static let nested_string_extension = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufString>, SwiftProtoTesting_TestAllExtensions>(
      _protobuf_fieldNumber: 1003,
      fieldName: "swift_proto_testing.TestNestedExtension.nested_string_extension"
    )
  }
}

extension SwiftProtoTesting_TestRequired {
  enum Extensions {
    static let single = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<SwiftProtoTesting_TestRequired>, SwiftProtoTesting_TestAllExtensions>(
      _protobuf_fieldNumber: 1000,
      fieldName: "swift_proto_testing.TestRequired.single"
    )

    static let multi = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedMessageExtensionField<SwiftProtoTesting_TestRequired>, SwiftProtoTesting_TestAllExtensions>(
      _protobuf_fieldNumber: 1001,
      fieldName: "swift_proto_testing.TestRequired.multi"
    )
  }
}

extension SwiftProtoTesting_TestParsingMerge {
  enum Extensions {
    static let optional_ext = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<SwiftProtoTesting_TestAllTypes>, SwiftProtoTesting_TestParsingMerge>(
      _protobuf_fieldNumber: 1000,
      fieldName: "swift_proto_testing.TestParsingMerge.optional_ext"
    )

    static let repeated_ext = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedMessageExtensionField<SwiftProtoTesting_TestAllTypes>, SwiftProtoTesting_TestParsingMerge>(
      _protobuf_fieldNumber: 1001,
      fieldName: "swift_proto_testing.TestParsingMerge.repeated_ext"
    )
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "swift_proto_testing"

extension SwiftProtoTesting_ForeignEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\u{4}FOREIGN_FOO\0\u{1}FOREIGN_BAR\0\u{1}FOREIGN_BAZ\0")
}

extension SwiftProtoTesting_TestEnumWithDupValue: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{9}FOO1\0\u{1}FOO2\0\u{9}BAR1\0\u{1}BAR2\0\u{1}BAZ\0")
}

extension SwiftProtoTesting_TestAllTypes: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TestAllTypes"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}optional_int32\0\u{3}optional_int64\0\u{3}optional_uint32\0\u{3}optional_uint64\0\u{3}optional_sint32\0\u{3}optional_sint64\0\u{3}optional_fixed32\0\u{3}optional_fixed64\0\u{3}optional_sfixed32\0\u{3}optional_sfixed64\0\u{3}optional_float\0\u{3}optional_double\0\u{3}optional_bool\0\u{3}optional_string\0\u{3}optional_bytes\0\u{7}OptionalGroup\0\u{4}\u{2}optional_nested_message\0\u{3}optional_foreign_message\0\u{3}optional_import_message\0\u{3}optional_nested_enum\0\u{3}optional_foreign_enum\0\u{3}optional_import_enum\0\u{4}\u{3}optional_public_import_message\0\u{4}\u{5}repeated_int32\0\u{3}repeated_int64\0\u{3}repeated_uint32\0\u{3}repeated_uint64\0\u{3}repeated_sint32\0\u{3}repeated_sint64\0\u{3}repeated_fixed32\0\u{3}repeated_fixed64\0\u{3}repeated_sfixed32\0\u{3}repeated_sfixed64\0\u{3}repeated_float\0\u{3}repeated_double\0\u{3}repeated_bool\0\u{3}repeated_string\0\u{3}repeated_bytes\0\u{7}RepeatedGroup\0\u{4}\u{2}repeated_nested_message\0\u{3}repeated_foreign_message\0\u{3}repeated_import_message\0\u{3}repeated_nested_enum\0\u{3}repeated_foreign_enum\0\u{3}repeated_import_enum\0\u{4}\u{8}default_int32\0\u{3}default_int64\0\u{3}default_uint32\0\u{3}default_uint64\0\u{3}default_sint32\0\u{3}default_sint64\0\u{3}default_fixed32\0\u{3}default_fixed64\0\u{3}default_sfixed32\0\u{3}default_sfixed64\0\u{3}default_float\0\u{3}default_double\0\u{3}default_bool\0\u{3}default_string\0\u{3}default_bytes\0\u{4}\u{6}default_nested_enum\0\u{3}default_foreign_enum\0\u{3}default_import_enum\0\u{4}\u{1c}oneof_uint32\0\u{3}oneof_nested_message\0\u{3}oneof_string\0\u{3}oneof_bytes\0\u{b}something_old\0\u{b}reserved_field\0\u{b}something_long_gone\0\u{c}JIt\u{3}\u{1}\u{c}LIt\u{3}\u{1}\u{c}lHt\u{3}\u{a}\u{c}~Ht\u{3}\u{2}\u{c}KIt\u{3}\u{1}")
  #if _pointerBitWidth(_64)
    @_alwaysEmitIntoClient @inline(__always)
    private static var _protobuf_messageLayoutString: StaticString { "\0\u{10}\u{4}\0C\0\0\0\0\0\u{11}\0\0\u{1}\0\0\0\0 \0\0\0\0\0\0\u{5}\u{2}\0\0\0\0p\0\0\u{1}\0\0\0\u{3}\u{3}\0\0\0\0$\0\0\u{2}\0\0\0\u{d}\u{4}\0\0\0\0x\0\0\u{3}\0\0\0\u{4}\u{5}\0\0\0\0(\0\0\u{4}\0\0\0\u{11}\u{6}\0\0\0\0\0\u{1}\0\u{5}\0\0\0\u{12}\u{7}\0\0\0\0,\0\0\u{6}\0\0\0\u{7}\u{8}\0\0\0\0\u{8}\u{1}\0\u{7}\0\0\0\u{6}\u{9}\0\0\0\00\0\0\u{8}\0\0\0\u{f}\u{a}\0\0\0\0\u{10}\u{1}\0\u{9}\0\0\0\u{10}\u{b}\0\0\0\04\0\0\u{a}\0\0\0\u{2}\u{c}\0\0\0\0\u{18}\u{1}\0\u{b}\0\0\0\u{1}\u{d}\0\0\0\0\u{1c}\0\0\u{c}\0\0\0\u{8}\u{e}\0\0\0\00\u{3}\0\u{d}\0\0\0\u{9}\u{f}\0\0\0\0@\u{3}\0\u{e}\0\0\0\u{c}\u{10}\0\0\0\0P\u{1}\0\u{f}\0\u{1}\0\u{a}\u{12}\0\0\0\0X\u{1}\0\u{10}\0\u{2}\0\u{b}\u{13}\0\0\0\0`\u{1}\0\u{11}\0\u{3}\0\u{b}\u{14}\0\0\0\0h\u{1}\0\u{12}\0\u{4}\0\u{b}\u{15}\0\0\0\08\0\0\u{13}\0\0\0\u{e}\u{16}\0\0\0\0<\0\0\u{14}\0\0\0\u{e}\u{17}\0\0\0\0@\0\0\u{15}\0\0\0\u{e}\u{1a}\0\0\0\0p\u{1}\0\u{16}\0\u{5}\0\u{b}\u{1f}\0\0\0\u{2}x\u{1}\0\u{17}\0\0\0\u{5} \0\0\0\u{2}\0\u{2}\0\u{18}\0\0\0\u{3}!\0\0\0\u{2}\u{8}\u{2}\0\u{19}\0\0\0\u{d}\"\0\0\0\u{2}\u{10}\u{2}\0\u{1a}\0\0\0\u{4}#\0\0\0\u{2}\u{18}\u{2}\0\u{1b}\0\0\0\u{11}$\0\0\0\u{2} \u{2}\0\u{1c}\0\0\0\u{12}%\0\0\0\u{2}(\u{2}\0\u{1d}\0\0\0\u{7}&\0\0\0\u{2}0\u{2}\0\u{1e}\0\0\0\u{6}'\0\0\0\u{2}8\u{2}\0\u{1f}\0\0\0\u{f}(\0\0\0\u{2}@\u{2}\0 \0\0\0\u{10})\0\0\0\u{2}H\u{2}\0!\0\0\0\u{2}*\0\0\0\u{2}P\u{2}\0\"\0\0\0\u{1}+\0\0\0\u{2}X\u{2}\0#\0\0\0\u{8},\0\0\0\u{2}`\u{2}\0$\0\0\0\u{9}-\0\0\0\u{2}h\u{2}\0%\0\0\0\u{c}.\0\0\0\u{2}p\u{2}\0&\0\u{6}\0\u{a}0\0\0\0\u{2}x\u{2}\0'\0\u{7}\0\u{b}1\0\0\0\u{2}\0\u{3}\0(\0\u{8}\0\u{b}2\0\0\0\u{2}\u{8}\u{3}\0)\0\u{9}\0\u{b}3\0\0\0\u{2}\u{10}\u{3}\0*\0\0\0\u{e}4\0\0\0\u{2}\u{18}\u{3}\0+\0\0\0\u{e}5\0\0\0\u{2} \u{3}\0,\0\0\0\u{e}=\0\0\0\0D\0\0-\0\0\0\u{5}>\0\0\0\0 \u{1}\0.\0\0\0\u{3}?\0\0\0\0H\0\0/\0\0\0\u{d}@\0\0\0\0(\u{1}\00\0\0\0\u{4}A\0\0\0\0L\0\01\0\0\0\u{11}B\0\0\0\00\u{1}\02\0\0\0\u{12}C\0\0\0\0P\0\03\0\0\0\u{7}D\0\0\0\08\u{1}\04\0\0\0\u{6}E\0\0\0\0T\0\05\0\0\0\u{f}F\0\0\0\0@\u{1}\06\0\0\0\u{10}G\0\0\0\0X\0\07\0\0\0\u{2}H\0\0\0\0H\u{1}\08\0\0\0\u{1}I\0\0\0\0\u{1d}\0\09\0\0\0\u{8}J\0\0\0\0P\u{3}\0:\0\0\0\u{9}K\0\0\0\0`\u{3}\0;\0\0\0\u{c}Q\0\0\0\0\\\0\0<\0\0\0\u{e}R\0\0\0\0`\0\0=\0\0\0\u{e}S\0\0\0\0d\0\0>\0\0\0\u{e}o\0\0\0\0h\0\0s\u{7f}\0\0\u{d}p\0\0\0\0(\u{3}\0s\u{7f}\u{2}\0\u{b}q\0\0\0\0p\u{3}\0s\u{7f}\0\0\u{9}r\0\0\0\0\0\u{4}\0s\u{7f}\0\0\u{c}" }
  #elseif _pointerBitWidth(_32)
    @_alwaysEmitIntoClient @inline(__always)
    private static var _protobuf_messageLayoutString: StaticString { "\0\u{c}\u{3}\0C\0\0\0\0\0\u{11}\0\0\u{1}\0\0\0\0 \0\0\0\0\0\0\u{5}\u{2}\0\0\0\0p\0\0\u{1}\0\0\0\u{3}\u{3}\0\0\0\0$\0\0\u{2}\0\0\0\u{d}\u{4}\0\0\0\0x\0\0\u{3}\0\0\0\u{4}\u{5}\0\0\0\0(\0\0\u{4}\0\0\0\u{11}\u{6}\0\0\0\0\0\u{1}\0\u{5}\0\0\0\u{12}\u{7}\0\0\0\0,\0\0\u{6}\0\0\0\u{7}\u{8}\0\0\0\0\u{8}\u{1}\0\u{7}\0\0\0\u{6}\u{9}\0\0\0\00\0\0\u{8}\0\0\0\u{f}\u{a}\0\0\0\0\u{10}\u{1}\0\u{9}\0\0\0\u{10}\u{b}\0\0\0\04\0\0\u{a}\0\0\0\u{2}\u{c}\0\0\0\0\u{18}\u{1}\0\u{b}\0\0\0\u{1}\u{d}\0\0\0\0\u{1c}\0\0\u{c}\0\0\0\u{8}\u{e}\0\0\0\0D\u{2}\0\u{d}\0\0\0\u{9}\u{f}\0\0\0\0P\u{2}\0\u{e}\0\0\0\u{c}\u{10}\0\0\0\0P\u{1}\0\u{f}\0\u{1}\0\u{a}\u{12}\0\0\0\0T\u{1}\0\u{10}\0\u{2}\0\u{b}\u{13}\0\0\0\0X\u{1}\0\u{11}\0\u{3}\0\u{b}\u{14}\0\0\0\0\\\u{1}\0\u{12}\0\u{4}\0\u{b}\u{15}\0\0\0\08\0\0\u{13}\0\0\0\u{e}\u{16}\0\0\0\0<\0\0\u{14}\0\0\0\u{e}\u{17}\0\0\0\0@\0\0\u{15}\0\0\0\u{e}\u{1a}\0\0\0\0`\u{1}\0\u{16}\0\u{5}\0\u{b}\u{1f}\0\0\0\u{2}d\u{1}\0\u{17}\0\0\0\u{5} \0\0\0\u{2}h\u{1}\0\u{18}\0\0\0\u{3}!\0\0\0\u{2}l\u{1}\0\u{19}\0\0\0\u{d}\"\0\0\0\u{2}p\u{1}\0\u{1a}\0\0\0\u{4}#\0\0\0\u{2}t\u{1}\0\u{1b}\0\0\0\u{11}$\0\0\0\u{2}x\u{1}\0\u{1c}\0\0\0\u{12}%\0\0\0\u{2}|\u{1}\0\u{1d}\0\0\0\u{7}&\0\0\0\u{2}\0\u{2}\0\u{1e}\0\0\0\u{6}'\0\0\0\u{2}\u{4}\u{2}\0\u{1f}\0\0\0\u{f}(\0\0\0\u{2}\u{8}\u{2}\0 \0\0\0\u{10})\0\0\0\u{2}\u{c}\u{2}\0!\0\0\0\u{2}*\0\0\0\u{2}\u{10}\u{2}\0\"\0\0\0\u{1}+\0\0\0\u{2}\u{14}\u{2}\0#\0\0\0\u{8},\0\0\0\u{2}\u{18}\u{2}\0$\0\0\0\u{9}-\0\0\0\u{2}\u{1c}\u{2}\0%\0\0\0\u{c}.\0\0\0\u{2} \u{2}\0&\0\u{6}\0\u{a}0\0\0\0\u{2}$\u{2}\0'\0\u{7}\0\u{b}1\0\0\0\u{2}(\u{2}\0(\0\u{8}\0\u{b}2\0\0\0\u{2},\u{2}\0)\0\u{9}\0\u{b}3\0\0\0\u{2}0\u{2}\0*\0\0\0\u{e}4\0\0\0\u{2}4\u{2}\0+\0\0\0\u{e}5\0\0\0\u{2}8\u{2}\0,\0\0\0\u{e}=\0\0\0\0D\0\0-\0\0\0\u{5}>\0\0\0\0 \u{1}\0.\0\0\0\u{3}?\0\0\0\0H\0\0/\0\0\0\u{d}@\0\0\0\0(\u{1}\00\0\0\0\u{4}A\0\0\0\0L\0\01\0\0\0\u{11}B\0\0\0\00\u{1}\02\0\0\0\u{12}C\0\0\0\0P\0\03\0\0\0\u{7}D\0\0\0\08\u{1}\04\0\0\0\u{6}E\0\0\0\0T\0\05\0\0\0\u{f}F\0\0\0\0@\u{1}\06\0\0\0\u{10}G\0\0\0\0X\0\07\0\0\0\u{2}H\0\0\0\0H\u{1}\08\0\0\0\u{1}I\0\0\0\0\u{1d}\0\09\0\0\0\u{8}J\0\0\0\0\\\u{2}\0:\0\0\0\u{9}K\0\0\0\0h\u{2}\0;\0\0\0\u{c}Q\0\0\0\0\\\0\0<\0\0\0\u{e}R\0\0\0\0`\0\0=\0\0\0\u{e}S\0\0\0\0d\0\0>\0\0\0\u{e}o\0\0\0\0h\0\0s\u{7f}\0\0\u{d}p\0\0\0\0<\u{2}\0s\u{7f}\u{2}\0\u{b}q\0\0\0\0t\u{2}\0s\u{7f}\0\0\u{9}r\0\0\0\0\0\u{3}\0s\u{7f}\0\0\u{c}" }
  #else
    #error("Unsupported platform")
  #endif

  private static let _protobuf_messageLayout = SwiftProtobuf._MessageLayout(layout: _protobuf_messageLayoutString, deinitializeSubmessage: _protobuf_deinitializeSubmessage, copySubmessage: _protobuf_copySubmessage)

  private static func _protobuf_deinitializeSubmessage(for token: SwiftProtobuf._MessageLayout.SubmessageToken, field: SwiftProtobuf.FieldLayout, storage: SwiftProtobuf._MessageStorage) {
    switch token.index {
    case 1: storage.deinitializeField(field, type: SwiftProtoTesting_TestAllTypes.OptionalGroup.self)
    case 2: storage.deinitializeField(field, type: SwiftProtoTesting_TestAllTypes.NestedMessage.self)
    case 3: storage.deinitializeField(field, type: SwiftProtoTesting_ForeignMessage.self)
    case 4: storage.deinitializeField(field, type: SwiftProtoTesting_Import_ImportMessage.self)
    case 5: storage.deinitializeField(field, type: SwiftProtoTesting_Import_PublicImportMessage.self)
    case 6: storage.deinitializeField(field, type: [SwiftProtoTesting_TestAllTypes.RepeatedGroup].self)
    case 7: storage.deinitializeField(field, type: [SwiftProtoTesting_TestAllTypes.NestedMessage].self)
    case 8: storage.deinitializeField(field, type: [SwiftProtoTesting_ForeignMessage].self)
    case 9: storage.deinitializeField(field, type: [SwiftProtoTesting_Import_ImportMessage].self)
    default: preconditionFailure("invalid submessage token; this is a generator bug")
    }
  }

  private static func _protobuf_copySubmessage(for token: SwiftProtobuf._MessageLayout.SubmessageToken, field: SwiftProtobuf.FieldLayout, from source: SwiftProtobuf._MessageStorage, to destination: SwiftProtobuf._MessageStorage) {
    switch token.index {
    case 1: source.copyField(field, to: destination, type: SwiftProtoTesting_TestAllTypes.OptionalGroup.self)
    case 2: source.copyField(field, to: destination, type: SwiftProtoTesting_TestAllTypes.NestedMessage.self)
    case 3: source.copyField(field, to: destination, type: SwiftProtoTesting_ForeignMessage.self)
    case 4: source.copyField(field, to: destination, type: SwiftProtoTesting_Import_ImportMessage.self)
    case 5: source.copyField(field, to: destination, type: SwiftProtoTesting_Import_PublicImportMessage.self)
    case 6: source.copyField(field, to: destination, type: [SwiftProtoTesting_TestAllTypes.RepeatedGroup].self)
    case 7: source.copyField(field, to: destination, type: [SwiftProtoTesting_TestAllTypes.NestedMessage].self)
    case 8: source.copyField(field, to: destination, type: [SwiftProtoTesting_ForeignMessage].self)
    case 9: source.copyField(field, to: destination, type: [SwiftProtoTesting_Import_ImportMessage].self)
    default: preconditionFailure("invalid submessage token; this is a generator bug")
    }
  }

  public var isInitialized: Bool {
    fatalError("table-driven isInitialized not yet implemented")
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    fatalError("table-driven decodeMessage not yet implemented")
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    fatalError("table-driven traverse not yet implemented")
  }

  static func ==(lhs: SwiftProtoTesting_TestAllTypes, rhs: SwiftProtoTesting_TestAllTypes) -> Bool {
    fatalError("table-driven == not yet implemented")
  }
}

extension SwiftProtoTesting_TestAllTypes.NestedEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\u{7f}\u{7f}\u{7f}\u{7f}\u{7f}\u{3}NEG\0\u{2}\u{2}FOO\0\u{1}BAR\0\u{1}BAZ\0")
}

extension SwiftProtoTesting_TestAllTypes.NestedMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = SwiftProtoTesting_TestAllTypes.protoMessageName + ".NestedMessage"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}bb\0")
  #if _pointerBitWidth(_64)
    @_alwaysEmitIntoClient @inline(__always)
    private static var _protobuf_messageLayoutString: StaticString { "\0\u{8}\0\0\u{1}\0\0\0\0\0\u{2}\0\0\u{1}\0\0\0\0\u{4}\0\0\0\0\0\0\u{5}" }
  #elseif _pointerBitWidth(_32)
    @_alwaysEmitIntoClient @inline(__always)
    private static var _protobuf_messageLayoutString: StaticString { "\0\u{8}\0\0\u{1}\0\0\0\0\0\u{2}\0\0\u{1}\0\0\0\0\u{4}\0\0\0\0\0\0\u{5}" }
  #else
    #error("Unsupported platform")
  #endif

  private static let _protobuf_messageLayout = SwiftProtobuf._MessageLayout(layout: _protobuf_messageLayoutString)

  public var isInitialized: Bool {
    fatalError("table-driven isInitialized not yet implemented")
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    fatalError("table-driven decodeMessage not yet implemented")
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    fatalError("table-driven traverse not yet implemented")
  }

  static func ==(lhs: SwiftProtoTesting_TestAllTypes.NestedMessage, rhs: SwiftProtoTesting_TestAllTypes.NestedMessage) -> Bool {
    fatalError("table-driven == not yet implemented")
  }
}

extension SwiftProtoTesting_TestAllTypes.OptionalGroup: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = SwiftProtoTesting_TestAllTypes.protoMessageName + ".OptionalGroup"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\u{11}a\0")
  #if _pointerBitWidth(_64)
    @_alwaysEmitIntoClient @inline(__always)
    private static var _protobuf_messageLayoutString: StaticString { "\0\u{8}\0\0\u{1}\0\0\0\0\0\u{1}\0\0\u{11}\0\0\0\0\u{4}\0\0\0\0\0\0\u{5}" }
  #elseif _pointerBitWidth(_32)
    @_alwaysEmitIntoClient @inline(__always)
    private static var _protobuf_messageLayoutString: StaticString { "\0\u{8}\0\0\u{1}\0\0\0\0\0\u{1}\0\0\u{11}\0\0\0\0\u{4}\0\0\0\0\0\0\u{5}" }
  #else
    #error("Unsupported platform")
  #endif

  private static let _protobuf_messageLayout = SwiftProtobuf._MessageLayout(layout: _protobuf_messageLayoutString)

  public var isInitialized: Bool {
    fatalError("table-driven isInitialized not yet implemented")
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    fatalError("table-driven decodeMessage not yet implemented")
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    fatalError("table-driven traverse not yet implemented")
  }

  static func ==(lhs: SwiftProtoTesting_TestAllTypes.OptionalGroup, rhs: SwiftProtoTesting_TestAllTypes.OptionalGroup) -> Bool {
    fatalError("table-driven == not yet implemented")
  }
}

extension SwiftProtoTesting_TestAllTypes.RepeatedGroup: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = SwiftProtoTesting_TestAllTypes.protoMessageName + ".RepeatedGroup"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}/a\0")
  #if _pointerBitWidth(_64)
    @_alwaysEmitIntoClient @inline(__always)
    private static var _protobuf_messageLayoutString: StaticString { "\0\u{8}\0\0\u{1}\0\0\0\0\0\u{1}\0\0/\0\0\0\0\u{4}\0\0\0\0\0\0\u{5}" }
  #elseif _pointerBitWidth(_32)
    @_alwaysEmitIntoClient @inline(__always)
    private static var _protobuf_messageLayoutString: StaticString { "\0\u{8}\0\0\u{1}\0\0\0\0\0\u{1}\0\0/\0\0\0\0\u{4}\0\0\0\0\0\0\u{5}" }
  #else
    #error("Unsupported platform")
  #endif

  private static let _protobuf_messageLayout = SwiftProtobuf._MessageLayout(layout: _protobuf_messageLayoutString)

  public var isInitialized: Bool {
    fatalError("table-driven isInitialized not yet implemented")
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    fatalError("table-driven decodeMessage not yet implemented")
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    fatalError("table-driven traverse not yet implemented")
  }

  static func ==(lhs: SwiftProtoTesting_TestAllTypes.RepeatedGroup, rhs: SwiftProtoTesting_TestAllTypes.RepeatedGroup) -> Bool {
    fatalError("table-driven == not yet implemented")
  }
}

extension SwiftProtoTesting_NestedTestAllTypes: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".NestedTestAllTypes"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}child\0\u{1}payload\0\u{3}repeated_child\0")
  #if _pointerBitWidth(_64)
    @_alwaysEmitIntoClient @inline(__always)
    private static var _protobuf_messageLayoutString: StaticString { "\0 \0\0\u{3}\0\0\0\0\0\u{4}\0\0\u{1}\0\0\0\0\u{8}\0\0\0\0\u{1}\0\u{b}\u{2}\0\0\0\0\u{10}\0\0\u{1}\0\u{2}\0\u{b}\u{3}\0\0\0\u{2}\u{18}\0\0\u{2}\0\u{3}\0\u{b}" }
  #elseif _pointerBitWidth(_32)
    @_alwaysEmitIntoClient @inline(__always)
    private static var _protobuf_messageLayoutString: StaticString { "\0\u{10}\0\0\u{3}\0\0\0\0\0\u{4}\0\0\u{1}\0\0\0\0\u{4}\0\0\0\0\u{1}\0\u{b}\u{2}\0\0\0\0\u{8}\0\0\u{1}\0\u{2}\0\u{b}\u{3}\0\0\0\u{2}\u{c}\0\0\u{2}\0\u{3}\0\u{b}" }
  #else
    #error("Unsupported platform")
  #endif

  private static let _protobuf_messageLayout = SwiftProtobuf._MessageLayout(layout: _protobuf_messageLayoutString, deinitializeSubmessage: _protobuf_deinitializeSubmessage, copySubmessage: _protobuf_copySubmessage)

  private static func _protobuf_deinitializeSubmessage(for token: SwiftProtobuf._MessageLayout.SubmessageToken, field: SwiftProtobuf.FieldLayout, storage: SwiftProtobuf._MessageStorage) {
    switch token.index {
    case 1: storage.deinitializeField(field, type: SwiftProtoTesting_NestedTestAllTypes.self)
    case 2: storage.deinitializeField(field, type: SwiftProtoTesting_TestAllTypes.self)
    case 3: storage.deinitializeField(field, type: [SwiftProtoTesting_NestedTestAllTypes].self)
    default: preconditionFailure("invalid submessage token; this is a generator bug")
    }
  }

  private static func _protobuf_copySubmessage(for token: SwiftProtobuf._MessageLayout.SubmessageToken, field: SwiftProtobuf.FieldLayout, from source: SwiftProtobuf._MessageStorage, to destination: SwiftProtobuf._MessageStorage) {
    switch token.index {
    case 1: source.copyField(field, to: destination, type: SwiftProtoTesting_NestedTestAllTypes.self)
    case 2: source.copyField(field, to: destination, type: SwiftProtoTesting_TestAllTypes.self)
    case 3: source.copyField(field, to: destination, type: [SwiftProtoTesting_NestedTestAllTypes].self)
    default: preconditionFailure("invalid submessage token; this is a generator bug")
    }
  }

  public var isInitialized: Bool {
    fatalError("table-driven isInitialized not yet implemented")
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    fatalError("table-driven decodeMessage not yet implemented")
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    fatalError("table-driven traverse not yet implemented")
  }

  static func ==(lhs: SwiftProtoTesting_NestedTestAllTypes, rhs: SwiftProtoTesting_NestedTestAllTypes) -> Bool {
    fatalError("table-driven == not yet implemented")
  }
}

extension SwiftProtoTesting_ForeignMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ForeignMessage"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}c\0\u{1}d\0")
  #if _pointerBitWidth(_64)
    @_alwaysEmitIntoClient @inline(__always)
    private static var _protobuf_messageLayoutString: StaticString { "\0\u{c}\0\0\u{2}\0\0\0\0\0\u{3}\0\0\u{1}\0\0\0\0\u{4}\0\0\0\0\0\0\u{5}\u{2}\0\0\0\0\u{8}\0\0\u{1}\0\0\0\u{5}" }
  #elseif _pointerBitWidth(_32)
    @_alwaysEmitIntoClient @inline(__always)
    private static var _protobuf_messageLayoutString: StaticString { "\0\u{c}\0\0\u{2}\0\0\0\0\0\u{3}\0\0\u{1}\0\0\0\0\u{4}\0\0\0\0\0\0\u{5}\u{2}\0\0\0\0\u{8}\0\0\u{1}\0\0\0\u{5}" }
  #else
    #error("Unsupported platform")
  #endif

  private static let _protobuf_messageLayout = SwiftProtobuf._MessageLayout(layout: _protobuf_messageLayoutString)

  public var isInitialized: Bool {
    fatalError("table-driven isInitialized not yet implemented")
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    fatalError("table-driven decodeMessage not yet implemented")
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    fatalError("table-driven traverse not yet implemented")
  }

  static func ==(lhs: SwiftProtoTesting_ForeignMessage, rhs: SwiftProtoTesting_ForeignMessage) -> Bool {
    fatalError("table-driven == not yet implemented")
  }
}

extension SwiftProtoTesting_TestAllExtensions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TestAllExtensions"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()
  #if _pointerBitWidth(_64)
    @_alwaysEmitIntoClient @inline(__always)
    private static var _protobuf_messageLayoutString: StaticString { "\0\0\0\0\0\0\0\0\0\0\u{1}\0\0" }
  #elseif _pointerBitWidth(_32)
    @_alwaysEmitIntoClient @inline(__always)
    private static var _protobuf_messageLayoutString: StaticString { "\0\0\0\0\0\0\0\0\0\0\u{1}\0\0" }
  #else
    #error("Unsupported platform")
  #endif

  private static let _protobuf_messageLayout = SwiftProtobuf._MessageLayout(layout: _protobuf_messageLayoutString)

  public var isInitialized: Bool {
    fatalError("table-driven isInitialized not yet implemented")
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    fatalError("table-driven decodeMessage not yet implemented")
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    fatalError("table-driven traverse not yet implemented")
  }

  static func ==(lhs: SwiftProtoTesting_TestAllExtensions, rhs: SwiftProtoTesting_TestAllExtensions) -> Bool {
    fatalError("table-driven == not yet implemented")
  }
}

extension SwiftProtoTesting_OptionalGroup_extension: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".OptionalGroup_extension"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\u{11}a\0")
  #if _pointerBitWidth(_64)
    @_alwaysEmitIntoClient @inline(__always)
    private static var _protobuf_messageLayoutString: StaticString { "\0\u{8}\0\0\u{1}\0\0\0\0\0\u{1}\0\0\u{11}\0\0\0\0\u{4}\0\0\0\0\0\0\u{5}" }
  #elseif _pointerBitWidth(_32)
    @_alwaysEmitIntoClient @inline(__always)
    private static var _protobuf_messageLayoutString: StaticString { "\0\u{8}\0\0\u{1}\0\0\0\0\0\u{1}\0\0\u{11}\0\0\0\0\u{4}\0\0\0\0\0\0\u{5}" }
  #else
    #error("Unsupported platform")
  #endif

  private static let _protobuf_messageLayout = SwiftProtobuf._MessageLayout(layout: _protobuf_messageLayoutString)

  public var isInitialized: Bool {
    fatalError("table-driven isInitialized not yet implemented")
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    fatalError("table-driven decodeMessage not yet implemented")
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    fatalError("table-driven traverse not yet implemented")
  }

  static func ==(lhs: SwiftProtoTesting_OptionalGroup_extension, rhs: SwiftProtoTesting_OptionalGroup_extension) -> Bool {
    fatalError("table-driven == not yet implemented")
  }
}

extension SwiftProtoTesting_RepeatedGroup_extension: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RepeatedGroup_extension"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}/a\0")
  #if _pointerBitWidth(_64)
    @_alwaysEmitIntoClient @inline(__always)
    private static var _protobuf_messageLayoutString: StaticString { "\0\u{8}\0\0\u{1}\0\0\0\0\0\u{1}\0\0/\0\0\0\0\u{4}\0\0\0\0\0\0\u{5}" }
  #elseif _pointerBitWidth(_32)
    @_alwaysEmitIntoClient @inline(__always)
    private static var _protobuf_messageLayoutString: StaticString { "\0\u{8}\0\0\u{1}\0\0\0\0\0\u{1}\0\0/\0\0\0\0\u{4}\0\0\0\0\0\0\u{5}" }
  #else
    #error("Unsupported platform")
  #endif

  private static let _protobuf_messageLayout = SwiftProtobuf._MessageLayout(layout: _protobuf_messageLayoutString)

  public var isInitialized: Bool {
    fatalError("table-driven isInitialized not yet implemented")
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    fatalError("table-driven decodeMessage not yet implemented")
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    fatalError("table-driven traverse not yet implemented")
  }

  static func ==(lhs: SwiftProtoTesting_RepeatedGroup_extension, rhs: SwiftProtoTesting_RepeatedGroup_extension) -> Bool {
    fatalError("table-driven == not yet implemented")
  }
}

extension SwiftProtoTesting_TestNestedExtension: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TestNestedExtension"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()
  #if _pointerBitWidth(_64)
    @_alwaysEmitIntoClient @inline(__always)
    private static var _protobuf_messageLayoutString: StaticString { "\0\0\0\0\0\0\0\0\0\0\u{1}\0\0" }
  #elseif _pointerBitWidth(_32)
    @_alwaysEmitIntoClient @inline(__always)
    private static var _protobuf_messageLayoutString: StaticString { "\0\0\0\0\0\0\0\0\0\0\u{1}\0\0" }
  #else
    #error("Unsupported platform")
  #endif

  private static let _protobuf_messageLayout = SwiftProtobuf._MessageLayout(layout: _protobuf_messageLayoutString)

  public var isInitialized: Bool {
    fatalError("table-driven isInitialized not yet implemented")
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    fatalError("table-driven decodeMessage not yet implemented")
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    fatalError("table-driven traverse not yet implemented")
  }

  static func ==(lhs: SwiftProtoTesting_TestNestedExtension, rhs: SwiftProtoTesting_TestNestedExtension) -> Bool {
    fatalError("table-driven == not yet implemented")
  }
}

extension SwiftProtoTesting_TestRequired: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TestRequired"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}a\0\u{1}dummy2\0\u{1}b\0\u{1}dummy4\0\u{1}dummy5\0\u{1}dummy6\0\u{1}dummy7\0\u{1}dummy8\0\u{1}dummy9\0\u{1}dummy10\0\u{1}dummy11\0\u{1}dummy12\0\u{1}dummy13\0\u{1}dummy14\0\u{1}dummy15\0\u{1}dummy16\0\u{1}dummy17\0\u{1}dummy18\0\u{1}dummy19\0\u{1}dummy20\0\u{1}dummy21\0\u{1}dummy22\0\u{1}dummy23\0\u{1}dummy24\0\u{1}dummy25\0\u{1}dummy26\0\u{1}dummy27\0\u{1}dummy28\0\u{1}dummy29\0\u{1}dummy30\0\u{1}dummy31\0\u{1}dummy32\0\u{1}c\0\u{3}optional_foreign\0")
  #if _pointerBitWidth(_64)
    @_alwaysEmitIntoClient @inline(__always)
    private static var _protobuf_messageLayoutString: StaticString { "\0\u{18}\u{1}\0\"\0\0\u{3}\0\0#\0\0\u{1}\0\0\0\0\u{8}\0\0\0\0\0\0\u{5}\u{2}\0\0\0\0\u{c}\0\0\u{3}\0\0\0\u{5}\u{3}\0\0\0\0\u{10}\0\0\u{1}\0\0\0\u{5}\u{4}\0\0\0\0\u{14}\0\0\u{4}\0\0\0\u{5}\u{5}\0\0\0\0\u{18}\0\0\u{5}\0\0\0\u{5}\u{6}\0\0\0\0\u{1c}\0\0\u{6}\0\0\0\u{5}\u{7}\0\0\0\0 \0\0\u{7}\0\0\0\u{5}\u{8}\0\0\0\0$\0\0\u{8}\0\0\0\u{5}\u{9}\0\0\0\0(\0\0\u{9}\0\0\0\u{5}\u{a}\0\0\0\0,\0\0\u{a}\0\0\0\u{5}\u{b}\0\0\0\00\0\0\u{b}\0\0\0\u{5}\u{c}\0\0\0\04\0\0\u{c}\0\0\0\u{5}\u{d}\0\0\0\08\0\0\u{d}\0\0\0\u{5}\u{e}\0\0\0\0<\0\0\u{e}\0\0\0\u{5}\u{f}\0\0\0\0@\0\0\u{f}\0\0\0\u{5}\u{10}\0\0\0\0D\0\0\u{10}\0\0\0\u{5}\u{11}\0\0\0\0H\0\0\u{11}\0\0\0\u{5}\u{12}\0\0\0\0L\0\0\u{12}\0\0\0\u{5}\u{13}\0\0\0\0P\0\0\u{13}\0\0\0\u{5}\u{14}\0\0\0\0T\0\0\u{14}\0\0\0\u{5}\u{15}\0\0\0\0X\0\0\u{15}\0\0\0\u{5}\u{16}\0\0\0\0\\\0\0\u{16}\0\0\0\u{5}\u{17}\0\0\0\0`\0\0\u{17}\0\0\0\u{5}\u{18}\0\0\0\0d\0\0\u{18}\0\0\0\u{5}\u{19}\0\0\0\0h\0\0\u{19}\0\0\0\u{5}\u{1a}\0\0\0\0l\0\0\u{1a}\0\0\0\u{5}\u{1b}\0\0\0\0p\0\0\u{1b}\0\0\0\u{5}\u{1c}\0\0\0\0t\0\0\u{1c}\0\0\0\u{5}\u{1d}\0\0\0\0x\0\0\u{1d}\0\0\0\u{5}\u{1e}\0\0\0\0|\0\0\u{1e}\0\0\0\u{5}\u{1f}\0\0\0\0\0\u{1}\0\u{1f}\0\0\0\u{5} \0\0\0\0\u{4}\u{1}\0 \0\0\0\u{5}!\0\0\0\0\u{8}\u{1}\0\u{2}\0\0\0\u{5}\"\0\0\0\0\u{10}\u{1}\0!\0\u{1}\0\u{b}" }
  #elseif _pointerBitWidth(_32)
    @_alwaysEmitIntoClient @inline(__always)
    private static var _protobuf_messageLayoutString: StaticString { "\0\u{10}\u{1}\0\"\0\0\u{3}\0\0#\0\0\u{1}\0\0\0\0\u{8}\0\0\0\0\0\0\u{5}\u{2}\0\0\0\0\u{c}\0\0\u{3}\0\0\0\u{5}\u{3}\0\0\0\0\u{10}\0\0\u{1}\0\0\0\u{5}\u{4}\0\0\0\0\u{14}\0\0\u{4}\0\0\0\u{5}\u{5}\0\0\0\0\u{18}\0\0\u{5}\0\0\0\u{5}\u{6}\0\0\0\0\u{1c}\0\0\u{6}\0\0\0\u{5}\u{7}\0\0\0\0 \0\0\u{7}\0\0\0\u{5}\u{8}\0\0\0\0$\0\0\u{8}\0\0\0\u{5}\u{9}\0\0\0\0(\0\0\u{9}\0\0\0\u{5}\u{a}\0\0\0\0,\0\0\u{a}\0\0\0\u{5}\u{b}\0\0\0\00\0\0\u{b}\0\0\0\u{5}\u{c}\0\0\0\04\0\0\u{c}\0\0\0\u{5}\u{d}\0\0\0\08\0\0\u{d}\0\0\0\u{5}\u{e}\0\0\0\0<\0\0\u{e}\0\0\0\u{5}\u{f}\0\0\0\0@\0\0\u{f}\0\0\0\u{5}\u{10}\0\0\0\0D\0\0\u{10}\0\0\0\u{5}\u{11}\0\0\0\0H\0\0\u{11}\0\0\0\u{5}\u{12}\0\0\0\0L\0\0\u{12}\0\0\0\u{5}\u{13}\0\0\0\0P\0\0\u{13}\0\0\0\u{5}\u{14}\0\0\0\0T\0\0\u{14}\0\0\0\u{5}\u{15}\0\0\0\0X\0\0\u{15}\0\0\0\u{5}\u{16}\0\0\0\0\\\0\0\u{16}\0\0\0\u{5}\u{17}\0\0\0\0`\0\0\u{17}\0\0\0\u{5}\u{18}\0\0\0\0d\0\0\u{18}\0\0\0\u{5}\u{19}\0\0\0\0h\0\0\u{19}\0\0\0\u{5}\u{1a}\0\0\0\0l\0\0\u{1a}\0\0\0\u{5}\u{1b}\0\0\0\0p\0\0\u{1b}\0\0\0\u{5}\u{1c}\0\0\0\0t\0\0\u{1c}\0\0\0\u{5}\u{1d}\0\0\0\0x\0\0\u{1d}\0\0\0\u{5}\u{1e}\0\0\0\0|\0\0\u{1e}\0\0\0\u{5}\u{1f}\0\0\0\0\0\u{1}\0\u{1f}\0\0\0\u{5} \0\0\0\0\u{4}\u{1}\0 \0\0\0\u{5}!\0\0\0\0\u{8}\u{1}\0\u{2}\0\0\0\u{5}\"\0\0\0\0\u{c}\u{1}\0!\0\u{1}\0\u{b}" }
  #else
    #error("Unsupported platform")
  #endif

  private static let _protobuf_messageLayout = SwiftProtobuf._MessageLayout(layout: _protobuf_messageLayoutString, deinitializeSubmessage: _protobuf_deinitializeSubmessage, copySubmessage: _protobuf_copySubmessage)

  private static func _protobuf_deinitializeSubmessage(for token: SwiftProtobuf._MessageLayout.SubmessageToken, field: SwiftProtobuf.FieldLayout, storage: SwiftProtobuf._MessageStorage) {
    switch token.index {
    case 1: storage.deinitializeField(field, type: SwiftProtoTesting_ForeignMessage.self)
    default: preconditionFailure("invalid submessage token; this is a generator bug")
    }
  }

  private static func _protobuf_copySubmessage(for token: SwiftProtobuf._MessageLayout.SubmessageToken, field: SwiftProtobuf.FieldLayout, from source: SwiftProtobuf._MessageStorage, to destination: SwiftProtobuf._MessageStorage) {
    switch token.index {
    case 1: source.copyField(field, to: destination, type: SwiftProtoTesting_ForeignMessage.self)
    default: preconditionFailure("invalid submessage token; this is a generator bug")
    }
  }

  public var isInitialized: Bool {
    fatalError("table-driven isInitialized not yet implemented")
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    fatalError("table-driven decodeMessage not yet implemented")
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    fatalError("table-driven traverse not yet implemented")
  }

  static func ==(lhs: SwiftProtoTesting_TestRequired, rhs: SwiftProtoTesting_TestRequired) -> Bool {
    fatalError("table-driven == not yet implemented")
  }
}

extension SwiftProtoTesting_TestRequiredForeign: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TestRequiredForeign"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}optional_message\0\u{3}repeated_message\0\u{1}dummy\0")
  #if _pointerBitWidth(_64)
    @_alwaysEmitIntoClient @inline(__always)
    private static var _protobuf_messageLayoutString: StaticString { "\0\u{18}\0\0\u{3}\0\0\0\0\0\u{4}\0\0\u{1}\0\0\0\0\u{8}\0\0\0\0\u{1}\0\u{b}\u{2}\0\0\0\u{2}\u{10}\0\0\u{1}\0\u{2}\0\u{b}\u{3}\0\0\0\0\u{4}\0\0\u{2}\0\0\0\u{5}" }
  #elseif _pointerBitWidth(_32)
    @_alwaysEmitIntoClient @inline(__always)
    private static var _protobuf_messageLayoutString: StaticString { "\0\u{10}\0\0\u{3}\0\0\0\0\0\u{4}\0\0\u{1}\0\0\0\0\u{8}\0\0\0\0\u{1}\0\u{b}\u{2}\0\0\0\u{2}\u{c}\0\0\u{1}\0\u{2}\0\u{b}\u{3}\0\0\0\0\u{4}\0\0\u{2}\0\0\0\u{5}" }
  #else
    #error("Unsupported platform")
  #endif

  private static let _protobuf_messageLayout = SwiftProtobuf._MessageLayout(layout: _protobuf_messageLayoutString, deinitializeSubmessage: _protobuf_deinitializeSubmessage, copySubmessage: _protobuf_copySubmessage)

  private static func _protobuf_deinitializeSubmessage(for token: SwiftProtobuf._MessageLayout.SubmessageToken, field: SwiftProtobuf.FieldLayout, storage: SwiftProtobuf._MessageStorage) {
    switch token.index {
    case 1: storage.deinitializeField(field, type: SwiftProtoTesting_TestRequired.self)
    case 2: storage.deinitializeField(field, type: [SwiftProtoTesting_TestRequired].self)
    default: preconditionFailure("invalid submessage token; this is a generator bug")
    }
  }

  private static func _protobuf_copySubmessage(for token: SwiftProtobuf._MessageLayout.SubmessageToken, field: SwiftProtobuf.FieldLayout, from source: SwiftProtobuf._MessageStorage, to destination: SwiftProtobuf._MessageStorage) {
    switch token.index {
    case 1: source.copyField(field, to: destination, type: SwiftProtoTesting_TestRequired.self)
    case 2: source.copyField(field, to: destination, type: [SwiftProtoTesting_TestRequired].self)
    default: preconditionFailure("invalid submessage token; this is a generator bug")
    }
  }

  public var isInitialized: Bool {
    fatalError("table-driven isInitialized not yet implemented")
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    fatalError("table-driven decodeMessage not yet implemented")
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    fatalError("table-driven traverse not yet implemented")
  }

  static func ==(lhs: SwiftProtoTesting_TestRequiredForeign, rhs: SwiftProtoTesting_TestRequiredForeign) -> Bool {
    fatalError("table-driven == not yet implemented")
  }
}

extension SwiftProtoTesting_TestRequiredMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TestRequiredMessage"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}optional_message\0\u{3}repeated_message\0\u{3}required_message\0")
  #if _pointerBitWidth(_64)
    @_alwaysEmitIntoClient @inline(__always)
    private static var _protobuf_messageLayoutString: StaticString { "\0 \0\0\u{3}\0\0\u{1}\0\0\u{4}\0\0\u{1}\0\0\0\0\u{8}\0\0\u{1}\0\u{1}\0\u{b}\u{2}\0\0\0\u{2}\u{10}\0\0\u{2}\0\u{2}\0\u{b}\u{3}\0\0\0\0\u{18}\0\0\0\0\u{1}\0\u{b}" }
  #elseif _pointerBitWidth(_32)
    @_alwaysEmitIntoClient @inline(__always)
    private static var _protobuf_messageLayoutString: StaticString { "\0\u{10}\0\0\u{3}\0\0\u{1}\0\0\u{4}\0\0\u{1}\0\0\0\0\u{4}\0\0\u{1}\0\u{1}\0\u{b}\u{2}\0\0\0\u{2}\u{8}\0\0\u{2}\0\u{2}\0\u{b}\u{3}\0\0\0\0\u{c}\0\0\0\0\u{1}\0\u{b}" }
  #else
    #error("Unsupported platform")
  #endif

  private static let _protobuf_messageLayout = SwiftProtobuf._MessageLayout(layout: _protobuf_messageLayoutString, deinitializeSubmessage: _protobuf_deinitializeSubmessage, copySubmessage: _protobuf_copySubmessage)

  private static func _protobuf_deinitializeSubmessage(for token: SwiftProtobuf._MessageLayout.SubmessageToken, field: SwiftProtobuf.FieldLayout, storage: SwiftProtobuf._MessageStorage) {
    switch token.index {
    case 1: storage.deinitializeField(field, type: SwiftProtoTesting_TestRequired.self)
    case 2: storage.deinitializeField(field, type: [SwiftProtoTesting_TestRequired].self)
    default: preconditionFailure("invalid submessage token; this is a generator bug")
    }
  }

  private static func _protobuf_copySubmessage(for token: SwiftProtobuf._MessageLayout.SubmessageToken, field: SwiftProtobuf.FieldLayout, from source: SwiftProtobuf._MessageStorage, to destination: SwiftProtobuf._MessageStorage) {
    switch token.index {
    case 1: source.copyField(field, to: destination, type: SwiftProtoTesting_TestRequired.self)
    case 2: source.copyField(field, to: destination, type: [SwiftProtoTesting_TestRequired].self)
    default: preconditionFailure("invalid submessage token; this is a generator bug")
    }
  }

  public var isInitialized: Bool {
    fatalError("table-driven isInitialized not yet implemented")
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    fatalError("table-driven decodeMessage not yet implemented")
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    fatalError("table-driven traverse not yet implemented")
  }

  static func ==(lhs: SwiftProtoTesting_TestRequiredMessage, rhs: SwiftProtoTesting_TestRequiredMessage) -> Bool {
    fatalError("table-driven == not yet implemented")
  }
}

extension SwiftProtoTesting_TestEmptyMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TestEmptyMessage"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()
  #if _pointerBitWidth(_64)
    @_alwaysEmitIntoClient @inline(__always)
    private static var _protobuf_messageLayoutString: StaticString { "\0\0\0\0\0\0\0\0\0\0\u{1}\0\0" }
  #elseif _pointerBitWidth(_32)
    @_alwaysEmitIntoClient @inline(__always)
    private static var _protobuf_messageLayoutString: StaticString { "\0\0\0\0\0\0\0\0\0\0\u{1}\0\0" }
  #else
    #error("Unsupported platform")
  #endif

  private static let _protobuf_messageLayout = SwiftProtobuf._MessageLayout(layout: _protobuf_messageLayoutString)

  public var isInitialized: Bool {
    fatalError("table-driven isInitialized not yet implemented")
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    fatalError("table-driven decodeMessage not yet implemented")
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    fatalError("table-driven traverse not yet implemented")
  }

  static func ==(lhs: SwiftProtoTesting_TestEmptyMessage, rhs: SwiftProtoTesting_TestEmptyMessage) -> Bool {
    fatalError("table-driven == not yet implemented")
  }
}

extension SwiftProtoTesting_TestReallyLargeTagNumber: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TestReallyLargeTagNumber"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}a\0\u{2}~\u{7f}\u{7f}\u{7f}\u{f}bb\0")
  #if _pointerBitWidth(_64)
    @_alwaysEmitIntoClient @inline(__always)
    private static var _protobuf_messageLayoutString: StaticString { "\0\u{c}\0\0\u{2}\0\0\0\0\0\u{2}\0\0\u{1}\0\0\0\0\u{4}\0\0\0\0\0\0\u{5}\u{7f}\u{7f}\u{7f}\u{7f}\0\u{8}\0\0\u{1}\0\0\0\u{5}" }
  #elseif _pointerBitWidth(_32)
    @_alwaysEmitIntoClient @inline(__always)
    private static var _protobuf_messageLayoutString: StaticString { "\0\u{c}\0\0\u{2}\0\0\0\0\0\u{2}\0\0\u{1}\0\0\0\0\u{4}\0\0\0\0\0\0\u{5}\u{7f}\u{7f}\u{7f}\u{7f}\0\u{8}\0\0\u{1}\0\0\0\u{5}" }
  #else
    #error("Unsupported platform")
  #endif

  private static let _protobuf_messageLayout = SwiftProtobuf._MessageLayout(layout: _protobuf_messageLayoutString)

  public var isInitialized: Bool {
    fatalError("table-driven isInitialized not yet implemented")
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    fatalError("table-driven decodeMessage not yet implemented")
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    fatalError("table-driven traverse not yet implemented")
  }

  static func ==(lhs: SwiftProtoTesting_TestReallyLargeTagNumber, rhs: SwiftProtoTesting_TestReallyLargeTagNumber) -> Bool {
    fatalError("table-driven == not yet implemented")
  }
}

extension SwiftProtoTesting_TestRecursiveMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TestRecursiveMessage"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}a\0\u{1}i\0")
  #if _pointerBitWidth(_64)
    @_alwaysEmitIntoClient @inline(__always)
    private static var _protobuf_messageLayoutString: StaticString { "\0\u{10}\0\0\u{2}\0\0\0\0\0\u{3}\0\0\u{1}\0\0\0\0\u{8}\0\0\0\0\u{1}\0\u{b}\u{2}\0\0\0\0\u{4}\0\0\u{1}\0\0\0\u{5}" }
  #elseif _pointerBitWidth(_32)
    @_alwaysEmitIntoClient @inline(__always)
    private static var _protobuf_messageLayoutString: StaticString { "\0\u{c}\0\0\u{2}\0\0\0\0\0\u{3}\0\0\u{1}\0\0\0\0\u{8}\0\0\0\0\u{1}\0\u{b}\u{2}\0\0\0\0\u{4}\0\0\u{1}\0\0\0\u{5}" }
  #else
    #error("Unsupported platform")
  #endif

  private static let _protobuf_messageLayout = SwiftProtobuf._MessageLayout(layout: _protobuf_messageLayoutString, deinitializeSubmessage: _protobuf_deinitializeSubmessage, copySubmessage: _protobuf_copySubmessage)

  private static func _protobuf_deinitializeSubmessage(for token: SwiftProtobuf._MessageLayout.SubmessageToken, field: SwiftProtobuf.FieldLayout, storage: SwiftProtobuf._MessageStorage) {
    switch token.index {
    case 1: storage.deinitializeField(field, type: SwiftProtoTesting_TestRecursiveMessage.self)
    default: preconditionFailure("invalid submessage token; this is a generator bug")
    }
  }

  private static func _protobuf_copySubmessage(for token: SwiftProtobuf._MessageLayout.SubmessageToken, field: SwiftProtobuf.FieldLayout, from source: SwiftProtobuf._MessageStorage, to destination: SwiftProtobuf._MessageStorage) {
    switch token.index {
    case 1: source.copyField(field, to: destination, type: SwiftProtoTesting_TestRecursiveMessage.self)
    default: preconditionFailure("invalid submessage token; this is a generator bug")
    }
  }

  public var isInitialized: Bool {
    fatalError("table-driven isInitialized not yet implemented")
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    fatalError("table-driven decodeMessage not yet implemented")
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    fatalError("table-driven traverse not yet implemented")
  }

  static func ==(lhs: SwiftProtoTesting_TestRecursiveMessage, rhs: SwiftProtoTesting_TestRecursiveMessage) -> Bool {
    fatalError("table-driven == not yet implemented")
  }
}

extension SwiftProtoTesting_TestFieldOrderings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TestFieldOrderings"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}my_int\0\u{4}\u{a}my_string\0\u{4}Z\u{1}my_float\0\u{4}c\u{1}optional_nested_message\0")
  #if _pointerBitWidth(_64)
    @_alwaysEmitIntoClient @inline(__always)
    private static var _protobuf_messageLayoutString: StaticString { "\00\0\0\u{4}\0\0\0\0\0\u{2}\0\0\u{1}\0\0\0\0\u{8}\0\0\0\0\0\0\u{3}\u{b}\0\0\0\0 \0\0\u{1}\0\0\0\u{9}e\0\0\0\0\u{4}\0\0\u{2}\0\0\0\u{2}H\u{1}\0\0\0\u{10}\0\0\u{3}\0\u{1}\0\u{b}" }
  #elseif _pointerBitWidth(_32)
    @_alwaysEmitIntoClient @inline(__always)
    private static var _protobuf_messageLayoutString: StaticString { "\0$\0\0\u{4}\0\0\0\0\0\u{2}\0\0\u{1}\0\0\0\0\u{8}\0\0\0\0\0\0\u{3}\u{b}\0\0\0\0\u{18}\0\0\u{1}\0\0\0\u{9}e\0\0\0\0\u{4}\0\0\u{2}\0\0\0\u{2}H\u{1}\0\0\0\u{10}\0\0\u{3}\0\u{1}\0\u{b}" }
  #else
    #error("Unsupported platform")
  #endif

  private static let _protobuf_messageLayout = SwiftProtobuf._MessageLayout(layout: _protobuf_messageLayoutString, deinitializeSubmessage: _protobuf_deinitializeSubmessage, copySubmessage: _protobuf_copySubmessage)

  private static func _protobuf_deinitializeSubmessage(for token: SwiftProtobuf._MessageLayout.SubmessageToken, field: SwiftProtobuf.FieldLayout, storage: SwiftProtobuf._MessageStorage) {
    switch token.index {
    case 1: storage.deinitializeField(field, type: SwiftProtoTesting_TestFieldOrderings.NestedMessage.self)
    default: preconditionFailure("invalid submessage token; this is a generator bug")
    }
  }

  private static func _protobuf_copySubmessage(for token: SwiftProtobuf._MessageLayout.SubmessageToken, field: SwiftProtobuf.FieldLayout, from source: SwiftProtobuf._MessageStorage, to destination: SwiftProtobuf._MessageStorage) {
    switch token.index {
    case 1: source.copyField(field, to: destination, type: SwiftProtoTesting_TestFieldOrderings.NestedMessage.self)
    default: preconditionFailure("invalid submessage token; this is a generator bug")
    }
  }

  public var isInitialized: Bool {
    fatalError("table-driven isInitialized not yet implemented")
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    fatalError("table-driven decodeMessage not yet implemented")
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    fatalError("table-driven traverse not yet implemented")
  }

  static func ==(lhs: SwiftProtoTesting_TestFieldOrderings, rhs: SwiftProtoTesting_TestFieldOrderings) -> Bool {
    fatalError("table-driven == not yet implemented")
  }
}

extension SwiftProtoTesting_TestFieldOrderings.NestedMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = SwiftProtoTesting_TestFieldOrderings.protoMessageName + ".NestedMessage"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}bb\0\u{1}oo\0")
  #if _pointerBitWidth(_64)
    @_alwaysEmitIntoClient @inline(__always)
    private static var _protobuf_messageLayoutString: StaticString { "\0\u{10}\0\0\u{2}\0\0\0\0\0\u{3}\0\0\u{1}\0\0\0\0\u{4}\0\0\0\0\0\0\u{5}\u{2}\0\0\0\0\u{8}\0\0\u{1}\0\0\0\u{3}" }
  #elseif _pointerBitWidth(_32)
    @_alwaysEmitIntoClient @inline(__always)
    private static var _protobuf_messageLayoutString: StaticString { "\0\u{10}\0\0\u{2}\0\0\0\0\0\u{3}\0\0\u{1}\0\0\0\0\u{4}\0\0\0\0\0\0\u{5}\u{2}\0\0\0\0\u{8}\0\0\u{1}\0\0\0\u{3}" }
  #else
    #error("Unsupported platform")
  #endif

  private static let _protobuf_messageLayout = SwiftProtobuf._MessageLayout(layout: _protobuf_messageLayoutString)

  public var isInitialized: Bool {
    fatalError("table-driven isInitialized not yet implemented")
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    fatalError("table-driven decodeMessage not yet implemented")
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    fatalError("table-driven traverse not yet implemented")
  }

  static func ==(lhs: SwiftProtoTesting_TestFieldOrderings.NestedMessage, rhs: SwiftProtoTesting_TestFieldOrderings.NestedMessage) -> Bool {
    fatalError("table-driven == not yet implemented")
  }
}

extension SwiftProtoTesting_TestExtremeDefaultValues: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TestExtremeDefaultValues"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}escaped_bytes\0\u{3}large_uint32\0\u{3}large_uint64\0\u{3}small_int32\0\u{3}small_int64\0\u{3}utf8_string\0\u{3}zero_float\0\u{3}one_float\0\u{3}small_float\0\u{3}negative_one_float\0\u{3}negative_float\0\u{3}large_float\0\u{3}small_negative_float\0\u{3}inf_double\0\u{3}neg_inf_double\0\u{3}nan_double\0\u{3}inf_float\0\u{3}neg_inf_float\0\u{3}nan_float\0\u{3}cpp_trigraph\0\u{3}really_small_int32\0\u{3}really_small_int64\0\u{3}string_with_zero\0\u{3}bytes_with_zero\0\u{4}\u{3}replacement_string\0")
  #if _pointerBitWidth(_64)
    @_alwaysEmitIntoClient @inline(__always)
    private static var _protobuf_messageLayoutString: StaticString { "\0P\u{1}\0\u{19}\0\0\0\0\0\u{19}\0\0\u{1}\0\0\0\0p\0\0\0\0\0\0\u{c}\u{2}\0\0\0\0\u{4}\0\0\u{1}\0\0\0\u{d}\u{3}\0\0\0\08\0\0\u{2}\0\0\0\u{4}\u{4}\0\0\0\0\u{8}\0\0\u{3}\0\0\0\u{5}\u{5}\0\0\0\0@\0\0\u{4}\0\0\0\u{3}\u{6}\0\0\0\0\0\u{1}\0\u{5}\0\0\0\u{9}\u{7}\0\0\0\0\u{c}\0\0\u{6}\0\0\0\u{2}\u{8}\0\0\0\0\u{10}\0\0\u{7}\0\0\0\u{2}\u{9}\0\0\0\0\u{14}\0\0\u{8}\0\0\0\u{2}\u{a}\0\0\0\0\u{18}\0\0\u{9}\0\0\0\u{2}\u{b}\0\0\0\0\u{1c}\0\0\u{a}\0\0\0\u{2}\u{c}\0\0\0\0 \0\0\u{b}\0\0\0\u{2}\u{d}\0\0\0\0$\0\0\u{c}\0\0\0\u{2}\u{e}\0\0\0\0H\0\0\u{d}\0\0\0\u{1}\u{f}\0\0\0\0P\0\0\u{e}\0\0\0\u{1}\u{10}\0\0\0\0X\0\0\u{f}\0\0\0\u{1}\u{11}\0\0\0\0(\0\0\u{10}\0\0\0\u{2}\u{12}\0\0\0\0,\0\0\u{11}\0\0\0\u{2}\u{13}\0\0\0\00\0\0\u{12}\0\0\0\u{2}\u{14}\0\0\0\0\u{10}\u{1}\0\u{13}\0\0\0\u{9}\u{15}\0\0\0\04\0\0\u{14}\0\0\0\u{5}\u{16}\0\0\0\0`\0\0\u{15}\0\0\0\u{3}\u{17}\0\0\0\0 \u{1}\0\u{16}\0\0\0\u{9}\u{18}\0\0\0\00\u{1}\0\u{17}\0\0\0\u{c}\u{1b}\0\0\0\0@\u{1}\0\u{18}\0\0\0\u{9}" }
  #elseif _pointerBitWidth(_32)
    @_alwaysEmitIntoClient @inline(__always)
    private static var _protobuf_messageLayoutString: StaticString { "\04\u{1}\0\u{19}\0\0\0\0\0\u{19}\0\0\u{1}\0\0\0\0l\0\0\0\0\0\0\u{c}\u{2}\0\0\0\0\u{4}\0\0\u{1}\0\0\0\u{d}\u{3}\0\0\0\08\0\0\u{2}\0\0\0\u{4}\u{4}\0\0\0\0\u{8}\0\0\u{3}\0\0\0\u{5}\u{5}\0\0\0\0@\0\0\u{4}\0\0\0\u{3}\u{6}\0\0\0\0x\0\0\u{5}\0\0\0\u{9}\u{7}\0\0\0\0\u{c}\0\0\u{6}\0\0\0\u{2}\u{8}\0\0\0\0\u{10}\0\0\u{7}\0\0\0\u{2}\u{9}\0\0\0\0\u{14}\0\0\u{8}\0\0\0\u{2}\u{a}\0\0\0\0\u{18}\0\0\u{9}\0\0\0\u{2}\u{b}\0\0\0\0\u{1c}\0\0\u{a}\0\0\0\u{2}\u{c}\0\0\0\0 \0\0\u{b}\0\0\0\u{2}\u{d}\0\0\0\0$\0\0\u{c}\0\0\0\u{2}\u{e}\0\0\0\0H\0\0\u{d}\0\0\0\u{1}\u{f}\0\0\0\0P\0\0\u{e}\0\0\0\u{1}\u{10}\0\0\0\0X\0\0\u{f}\0\0\0\u{1}\u{11}\0\0\0\0(\0\0\u{10}\0\0\0\u{2}\u{12}\0\0\0\0,\0\0\u{11}\0\0\0\u{2}\u{13}\0\0\0\00\0\0\u{12}\0\0\0\u{2}\u{14}\0\0\0\0\u{4}\u{1}\0\u{13}\0\0\0\u{9}\u{15}\0\0\0\04\0\0\u{14}\0\0\0\u{5}\u{16}\0\0\0\0`\0\0\u{15}\0\0\0\u{3}\u{17}\0\0\0\0\u{10}\u{1}\0\u{16}\0\0\0\u{9}\u{18}\0\0\0\0\u{1c}\u{1}\0\u{17}\0\0\0\u{c}\u{1b}\0\0\0\0(\u{1}\0\u{18}\0\0\0\u{9}" }
  #else
    #error("Unsupported platform")
  #endif

  private static let _protobuf_messageLayout = SwiftProtobuf._MessageLayout(layout: _protobuf_messageLayoutString)

  public var isInitialized: Bool {
    fatalError("table-driven isInitialized not yet implemented")
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    fatalError("table-driven decodeMessage not yet implemented")
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    fatalError("table-driven traverse not yet implemented")
  }

  static func ==(lhs: SwiftProtoTesting_TestExtremeDefaultValues, rhs: SwiftProtoTesting_TestExtremeDefaultValues) -> Bool {
    fatalError("table-driven == not yet implemented")
  }
}

extension SwiftProtoTesting_TestOneof: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TestOneof"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}foo_int\0\u{3}foo_string\0\u{3}foo_message\0\u{7}FooGroup\0")
  #if _pointerBitWidth(_64)
    @_alwaysEmitIntoClient @inline(__always)
    private static var _protobuf_messageLayoutString: StaticString { "\0@\0\0\u{4}\0\0\0\0\0\u{5}\0\0\u{1}\0\0\0\0\u{14}\0\0{\u{7f}\0\0\u{5}\u{2}\0\0\0\00\0\0{\u{7f}\0\0\u{9}\u{3}\0\0\0\0\u{18}\0\0{\u{7f}\u{1}\0\u{b}\u{4}\0\0\0\0 \0\0{\u{7f}\u{2}\0\u{a}" }
  #elseif _pointerBitWidth(_32)
    @_alwaysEmitIntoClient @inline(__always)
    private static var _protobuf_messageLayoutString: StaticString { "\00\0\0\u{4}\0\0\0\0\0\u{5}\0\0\u{1}\0\0\0\0\u{14}\0\0{\u{7f}\0\0\u{5}\u{2}\0\0\0\0$\0\0{\u{7f}\0\0\u{9}\u{3}\0\0\0\0\u{18}\0\0{\u{7f}\u{1}\0\u{b}\u{4}\0\0\0\0\u{1c}\0\0{\u{7f}\u{2}\0\u{a}" }
  #else
    #error("Unsupported platform")
  #endif

  private static let _protobuf_messageLayout = SwiftProtobuf._MessageLayout(layout: _protobuf_messageLayoutString, deinitializeSubmessage: _protobuf_deinitializeSubmessage, copySubmessage: _protobuf_copySubmessage)

  private static func _protobuf_deinitializeSubmessage(for token: SwiftProtobuf._MessageLayout.SubmessageToken, field: SwiftProtobuf.FieldLayout, storage: SwiftProtobuf._MessageStorage) {
    switch token.index {
    case 1: storage.deinitializeField(field, type: SwiftProtoTesting_TestAllTypes.self)
    case 2: storage.deinitializeField(field, type: SwiftProtoTesting_TestOneof.FooGroup.self)
    default: preconditionFailure("invalid submessage token; this is a generator bug")
    }
  }

  private static func _protobuf_copySubmessage(for token: SwiftProtobuf._MessageLayout.SubmessageToken, field: SwiftProtobuf.FieldLayout, from source: SwiftProtobuf._MessageStorage, to destination: SwiftProtobuf._MessageStorage) {
    switch token.index {
    case 1: source.copyField(field, to: destination, type: SwiftProtoTesting_TestAllTypes.self)
    case 2: source.copyField(field, to: destination, type: SwiftProtoTesting_TestOneof.FooGroup.self)
    default: preconditionFailure("invalid submessage token; this is a generator bug")
    }
  }

  public var isInitialized: Bool {
    fatalError("table-driven isInitialized not yet implemented")
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    fatalError("table-driven decodeMessage not yet implemented")
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    fatalError("table-driven traverse not yet implemented")
  }

  static func ==(lhs: SwiftProtoTesting_TestOneof, rhs: SwiftProtoTesting_TestOneof) -> Bool {
    fatalError("table-driven == not yet implemented")
  }
}

extension SwiftProtoTesting_TestOneof.FooGroup: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = SwiftProtoTesting_TestOneof.protoMessageName + ".FooGroup"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\u{5}a\0\u{1}b\0")
  #if _pointerBitWidth(_64)
    @_alwaysEmitIntoClient @inline(__always)
    private static var _protobuf_messageLayoutString: StaticString { "\0 \0\0\u{2}\0\0\0\0\0\u{1}\0\0\u{5}\0\0\0\0\u{4}\0\0\0\0\0\0\u{5}\u{6}\0\0\0\0\u{10}\0\0\u{1}\0\0\0\u{9}" }
  #elseif _pointerBitWidth(_32)
    @_alwaysEmitIntoClient @inline(__always)
    private static var _protobuf_messageLayoutString: StaticString { "\0\u{18}\0\0\u{2}\0\0\0\0\0\u{1}\0\0\u{5}\0\0\0\0\u{4}\0\0\0\0\0\0\u{5}\u{6}\0\0\0\0\u{c}\0\0\u{1}\0\0\0\u{9}" }
  #else
    #error("Unsupported platform")
  #endif

  private static let _protobuf_messageLayout = SwiftProtobuf._MessageLayout(layout: _protobuf_messageLayoutString)

  public var isInitialized: Bool {
    fatalError("table-driven isInitialized not yet implemented")
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    fatalError("table-driven decodeMessage not yet implemented")
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    fatalError("table-driven traverse not yet implemented")
  }

  static func ==(lhs: SwiftProtoTesting_TestOneof.FooGroup, rhs: SwiftProtoTesting_TestOneof.FooGroup) -> Bool {
    fatalError("table-driven == not yet implemented")
  }
}

extension SwiftProtoTesting_TestRequiredOneof: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TestRequiredOneof"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}foo_int\0\u{3}foo_string\0\u{3}foo_message\0")
  #if _pointerBitWidth(_64)
    @_alwaysEmitIntoClient @inline(__always)
    private static var _protobuf_messageLayoutString: StaticString { "\00\0\0\u{3}\0\0\0\0\0\u{4}\0\0\u{1}\0\0\0\0\u{10}\0\0{\u{7f}\0\0\u{5}\u{2}\0\0\0\0 \0\0{\u{7f}\0\0\u{9}\u{3}\0\0\0\0\u{18}\0\0{\u{7f}\u{1}\0\u{b}" }
  #elseif _pointerBitWidth(_32)
    @_alwaysEmitIntoClient @inline(__always)
    private static var _protobuf_messageLayoutString: StaticString { "\0$\0\0\u{3}\0\0\0\0\0\u{4}\0\0\u{1}\0\0\0\0\u{10}\0\0{\u{7f}\0\0\u{5}\u{2}\0\0\0\0\u{18}\0\0{\u{7f}\0\0\u{9}\u{3}\0\0\0\0\u{14}\0\0{\u{7f}\u{1}\0\u{b}" }
  #else
    #error("Unsupported platform")
  #endif

  private static let _protobuf_messageLayout = SwiftProtobuf._MessageLayout(layout: _protobuf_messageLayoutString, deinitializeSubmessage: _protobuf_deinitializeSubmessage, copySubmessage: _protobuf_copySubmessage)

  private static func _protobuf_deinitializeSubmessage(for token: SwiftProtobuf._MessageLayout.SubmessageToken, field: SwiftProtobuf.FieldLayout, storage: SwiftProtobuf._MessageStorage) {
    switch token.index {
    case 1: storage.deinitializeField(field, type: SwiftProtoTesting_TestRequiredOneof.NestedMessage.self)
    default: preconditionFailure("invalid submessage token; this is a generator bug")
    }
  }

  private static func _protobuf_copySubmessage(for token: SwiftProtobuf._MessageLayout.SubmessageToken, field: SwiftProtobuf.FieldLayout, from source: SwiftProtobuf._MessageStorage, to destination: SwiftProtobuf._MessageStorage) {
    switch token.index {
    case 1: source.copyField(field, to: destination, type: SwiftProtoTesting_TestRequiredOneof.NestedMessage.self)
    default: preconditionFailure("invalid submessage token; this is a generator bug")
    }
  }

  public var isInitialized: Bool {
    fatalError("table-driven isInitialized not yet implemented")
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    fatalError("table-driven decodeMessage not yet implemented")
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    fatalError("table-driven traverse not yet implemented")
  }

  static func ==(lhs: SwiftProtoTesting_TestRequiredOneof, rhs: SwiftProtoTesting_TestRequiredOneof) -> Bool {
    fatalError("table-driven == not yet implemented")
  }
}

extension SwiftProtoTesting_TestRequiredOneof.NestedMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = SwiftProtoTesting_TestRequiredOneof.protoMessageName + ".NestedMessage"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}required_double\0")
  #if _pointerBitWidth(_64)
    @_alwaysEmitIntoClient @inline(__always)
    private static var _protobuf_messageLayoutString: StaticString { "\0\u{10}\0\0\u{1}\0\0\u{1}\0\0\u{2}\0\0\u{1}\0\0\0\0\u{8}\0\0\0\0\0\0\u{1}" }
  #elseif _pointerBitWidth(_32)
    @_alwaysEmitIntoClient @inline(__always)
    private static var _protobuf_messageLayoutString: StaticString { "\0\u{10}\0\0\u{1}\0\0\u{1}\0\0\u{2}\0\0\u{1}\0\0\0\0\u{8}\0\0\0\0\0\0\u{1}" }
  #else
    #error("Unsupported platform")
  #endif

  private static let _protobuf_messageLayout = SwiftProtobuf._MessageLayout(layout: _protobuf_messageLayoutString)

  public var isInitialized: Bool {
    fatalError("table-driven isInitialized not yet implemented")
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    fatalError("table-driven decodeMessage not yet implemented")
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    fatalError("table-driven traverse not yet implemented")
  }

  static func ==(lhs: SwiftProtoTesting_TestRequiredOneof.NestedMessage, rhs: SwiftProtoTesting_TestRequiredOneof.NestedMessage) -> Bool {
    fatalError("table-driven == not yet implemented")
  }
}

extension SwiftProtoTesting_TestPackedTypes: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TestPackedTypes"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{4}Z\u{1}packed_int32\0\u{3}packed_int64\0\u{3}packed_uint32\0\u{3}packed_uint64\0\u{3}packed_sint32\0\u{3}packed_sint64\0\u{3}packed_fixed32\0\u{3}packed_fixed64\0\u{3}packed_sfixed32\0\u{3}packed_sfixed64\0\u{3}packed_float\0\u{3}packed_double\0\u{3}packed_bool\0\u{3}packed_enum\0")
  #if _pointerBitWidth(_64)
    @_alwaysEmitIntoClient @inline(__always)
    private static var _protobuf_messageLayoutString: StaticString { "\0x\0\0\u{e}\0\0\0\0\0\u{1}\0\0Z\0\0\0\u{a}\u{8}\0\0\0\0\0\0\u{5}[\0\0\0\u{a}\u{10}\0\0\u{1}\0\0\0\u{3}\\\0\0\0\u{a}\u{18}\0\0\u{2}\0\0\0\u{d}]\0\0\0\u{a} \0\0\u{3}\0\0\0\u{4}^\0\0\0\u{a}(\0\0\u{4}\0\0\0\u{11}_\0\0\0\u{a}0\0\0\u{5}\0\0\0\u{12}`\0\0\0\u{a}8\0\0\u{6}\0\0\0\u{7}a\0\0\0\u{a}@\0\0\u{7}\0\0\0\u{6}b\0\0\0\u{a}H\0\0\u{8}\0\0\0\u{f}c\0\0\0\u{a}P\0\0\u{9}\0\0\0\u{10}d\0\0\0\u{a}X\0\0\u{a}\0\0\0\u{2}e\0\0\0\u{a}`\0\0\u{b}\0\0\0\u{1}f\0\0\0\u{a}h\0\0\u{c}\0\0\0\u{8}g\0\0\0\u{a}p\0\0\u{d}\0\0\0\u{e}" }
  #elseif _pointerBitWidth(_32)
    @_alwaysEmitIntoClient @inline(__always)
    private static var _protobuf_messageLayoutString: StaticString { "\0<\0\0\u{e}\0\0\0\0\0\u{1}\0\0Z\0\0\0\u{a}\u{4}\0\0\0\0\0\0\u{5}[\0\0\0\u{a}\u{8}\0\0\u{1}\0\0\0\u{3}\\\0\0\0\u{a}\u{c}\0\0\u{2}\0\0\0\u{d}]\0\0\0\u{a}\u{10}\0\0\u{3}\0\0\0\u{4}^\0\0\0\u{a}\u{14}\0\0\u{4}\0\0\0\u{11}_\0\0\0\u{a}\u{18}\0\0\u{5}\0\0\0\u{12}`\0\0\0\u{a}\u{1c}\0\0\u{6}\0\0\0\u{7}a\0\0\0\u{a} \0\0\u{7}\0\0\0\u{6}b\0\0\0\u{a}$\0\0\u{8}\0\0\0\u{f}c\0\0\0\u{a}(\0\0\u{9}\0\0\0\u{10}d\0\0\0\u{a},\0\0\u{a}\0\0\0\u{2}e\0\0\0\u{a}0\0\0\u{b}\0\0\0\u{1}f\0\0\0\u{a}4\0\0\u{c}\0\0\0\u{8}g\0\0\0\u{a}8\0\0\u{d}\0\0\0\u{e}" }
  #else
    #error("Unsupported platform")
  #endif

  private static let _protobuf_messageLayout = SwiftProtobuf._MessageLayout(layout: _protobuf_messageLayoutString)

  public var isInitialized: Bool {
    fatalError("table-driven isInitialized not yet implemented")
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    fatalError("table-driven decodeMessage not yet implemented")
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    fatalError("table-driven traverse not yet implemented")
  }

  static func ==(lhs: SwiftProtoTesting_TestPackedTypes, rhs: SwiftProtoTesting_TestPackedTypes) -> Bool {
    fatalError("table-driven == not yet implemented")
  }
}

extension SwiftProtoTesting_TestUnpackedTypes: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TestUnpackedTypes"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{4}Z\u{1}unpacked_int32\0\u{3}unpacked_int64\0\u{3}unpacked_uint32\0\u{3}unpacked_uint64\0\u{3}unpacked_sint32\0\u{3}unpacked_sint64\0\u{3}unpacked_fixed32\0\u{3}unpacked_fixed64\0\u{3}unpacked_sfixed32\0\u{3}unpacked_sfixed64\0\u{3}unpacked_float\0\u{3}unpacked_double\0\u{3}unpacked_bool\0\u{3}unpacked_enum\0")
  #if _pointerBitWidth(_64)
    @_alwaysEmitIntoClient @inline(__always)
    private static var _protobuf_messageLayoutString: StaticString { "\0x\0\0\u{e}\0\0\0\0\0\u{1}\0\0Z\0\0\0\u{2}\u{8}\0\0\0\0\0\0\u{5}[\0\0\0\u{2}\u{10}\0\0\u{1}\0\0\0\u{3}\\\0\0\0\u{2}\u{18}\0\0\u{2}\0\0\0\u{d}]\0\0\0\u{2} \0\0\u{3}\0\0\0\u{4}^\0\0\0\u{2}(\0\0\u{4}\0\0\0\u{11}_\0\0\0\u{2}0\0\0\u{5}\0\0\0\u{12}`\0\0\0\u{2}8\0\0\u{6}\0\0\0\u{7}a\0\0\0\u{2}@\0\0\u{7}\0\0\0\u{6}b\0\0\0\u{2}H\0\0\u{8}\0\0\0\u{f}c\0\0\0\u{2}P\0\0\u{9}\0\0\0\u{10}d\0\0\0\u{2}X\0\0\u{a}\0\0\0\u{2}e\0\0\0\u{2}`\0\0\u{b}\0\0\0\u{1}f\0\0\0\u{2}h\0\0\u{c}\0\0\0\u{8}g\0\0\0\u{2}p\0\0\u{d}\0\0\0\u{e}" }
  #elseif _pointerBitWidth(_32)
    @_alwaysEmitIntoClient @inline(__always)
    private static var _protobuf_messageLayoutString: StaticString { "\0<\0\0\u{e}\0\0\0\0\0\u{1}\0\0Z\0\0\0\u{2}\u{4}\0\0\0\0\0\0\u{5}[\0\0\0\u{2}\u{8}\0\0\u{1}\0\0\0\u{3}\\\0\0\0\u{2}\u{c}\0\0\u{2}\0\0\0\u{d}]\0\0\0\u{2}\u{10}\0\0\u{3}\0\0\0\u{4}^\0\0\0\u{2}\u{14}\0\0\u{4}\0\0\0\u{11}_\0\0\0\u{2}\u{18}\0\0\u{5}\0\0\0\u{12}`\0\0\0\u{2}\u{1c}\0\0\u{6}\0\0\0\u{7}a\0\0\0\u{2} \0\0\u{7}\0\0\0\u{6}b\0\0\0\u{2}$\0\0\u{8}\0\0\0\u{f}c\0\0\0\u{2}(\0\0\u{9}\0\0\0\u{10}d\0\0\0\u{2},\0\0\u{a}\0\0\0\u{2}e\0\0\0\u{2}0\0\0\u{b}\0\0\0\u{1}f\0\0\0\u{2}4\0\0\u{c}\0\0\0\u{8}g\0\0\0\u{2}8\0\0\u{d}\0\0\0\u{e}" }
  #else
    #error("Unsupported platform")
  #endif

  private static let _protobuf_messageLayout = SwiftProtobuf._MessageLayout(layout: _protobuf_messageLayoutString)

  public var isInitialized: Bool {
    fatalError("table-driven isInitialized not yet implemented")
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    fatalError("table-driven decodeMessage not yet implemented")
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    fatalError("table-driven traverse not yet implemented")
  }

  static func ==(lhs: SwiftProtoTesting_TestUnpackedTypes, rhs: SwiftProtoTesting_TestUnpackedTypes) -> Bool {
    fatalError("table-driven == not yet implemented")
  }
}

extension SwiftProtoTesting_TestPackedExtensions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TestPackedExtensions"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()
  #if _pointerBitWidth(_64)
    @_alwaysEmitIntoClient @inline(__always)
    private static var _protobuf_messageLayoutString: StaticString { "\0\0\0\0\0\0\0\0\0\0\u{1}\0\0" }
  #elseif _pointerBitWidth(_32)
    @_alwaysEmitIntoClient @inline(__always)
    private static var _protobuf_messageLayoutString: StaticString { "\0\0\0\0\0\0\0\0\0\0\u{1}\0\0" }
  #else
    #error("Unsupported platform")
  #endif

  private static let _protobuf_messageLayout = SwiftProtobuf._MessageLayout(layout: _protobuf_messageLayoutString)

  public var isInitialized: Bool {
    fatalError("table-driven isInitialized not yet implemented")
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    fatalError("table-driven decodeMessage not yet implemented")
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    fatalError("table-driven traverse not yet implemented")
  }

  static func ==(lhs: SwiftProtoTesting_TestPackedExtensions, rhs: SwiftProtoTesting_TestPackedExtensions) -> Bool {
    fatalError("table-driven == not yet implemented")
  }
}

extension SwiftProtoTesting_TestParsingMerge: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TestParsingMerge"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}required_all_types\0\u{3}optional_all_types\0\u{3}repeated_all_types\0\u{8}\u{7}OptionalGroup\0\u{8}\u{a}RepeatedGroup\0")
  #if _pointerBitWidth(_64)
    @_alwaysEmitIntoClient @inline(__always)
    private static var _protobuf_messageLayoutString: StaticString { "\00\0\0\u{5}\0\0\u{1}\0\0\u{4}\0\0\u{1}\0\0\0\0\u{8}\0\0\0\0\u{1}\0\u{b}\u{2}\0\0\0\0\u{10}\0\0\u{1}\0\u{1}\0\u{b}\u{3}\0\0\0\u{2}\u{18}\0\0\u{2}\0\u{2}\0\u{b}\u{a}\0\0\0\0 \0\0\u{3}\0\u{3}\0\u{a}\u{14}\0\0\0\u{2}(\0\0\u{4}\0\u{4}\0\u{a}" }
  #elseif _pointerBitWidth(_32)
    @_alwaysEmitIntoClient @inline(__always)
    private static var _protobuf_messageLayoutString: StaticString { "\0\u{18}\0\0\u{5}\0\0\u{1}\0\0\u{4}\0\0\u{1}\0\0\0\0\u{4}\0\0\0\0\u{1}\0\u{b}\u{2}\0\0\0\0\u{8}\0\0\u{1}\0\u{1}\0\u{b}\u{3}\0\0\0\u{2}\u{c}\0\0\u{2}\0\u{2}\0\u{b}\u{a}\0\0\0\0\u{10}\0\0\u{3}\0\u{3}\0\u{a}\u{14}\0\0\0\u{2}\u{14}\0\0\u{4}\0\u{4}\0\u{a}" }
  #else
    #error("Unsupported platform")
  #endif

  private static let _protobuf_messageLayout = SwiftProtobuf._MessageLayout(layout: _protobuf_messageLayoutString, deinitializeSubmessage: _protobuf_deinitializeSubmessage, copySubmessage: _protobuf_copySubmessage)

  private static func _protobuf_deinitializeSubmessage(for token: SwiftProtobuf._MessageLayout.SubmessageToken, field: SwiftProtobuf.FieldLayout, storage: SwiftProtobuf._MessageStorage) {
    switch token.index {
    case 1: storage.deinitializeField(field, type: SwiftProtoTesting_TestAllTypes.self)
    case 2: storage.deinitializeField(field, type: [SwiftProtoTesting_TestAllTypes].self)
    case 3: storage.deinitializeField(field, type: SwiftProtoTesting_TestParsingMerge.OptionalGroup.self)
    case 4: storage.deinitializeField(field, type: [SwiftProtoTesting_TestParsingMerge.RepeatedGroup].self)
    default: preconditionFailure("invalid submessage token; this is a generator bug")
    }
  }

  private static func _protobuf_copySubmessage(for token: SwiftProtobuf._MessageLayout.SubmessageToken, field: SwiftProtobuf.FieldLayout, from source: SwiftProtobuf._MessageStorage, to destination: SwiftProtobuf._MessageStorage) {
    switch token.index {
    case 1: source.copyField(field, to: destination, type: SwiftProtoTesting_TestAllTypes.self)
    case 2: source.copyField(field, to: destination, type: [SwiftProtoTesting_TestAllTypes].self)
    case 3: source.copyField(field, to: destination, type: SwiftProtoTesting_TestParsingMerge.OptionalGroup.self)
    case 4: source.copyField(field, to: destination, type: [SwiftProtoTesting_TestParsingMerge.RepeatedGroup].self)
    default: preconditionFailure("invalid submessage token; this is a generator bug")
    }
  }

  public var isInitialized: Bool {
    fatalError("table-driven isInitialized not yet implemented")
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    fatalError("table-driven decodeMessage not yet implemented")
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    fatalError("table-driven traverse not yet implemented")
  }

  static func ==(lhs: SwiftProtoTesting_TestParsingMerge, rhs: SwiftProtoTesting_TestParsingMerge) -> Bool {
    fatalError("table-driven == not yet implemented")
  }
}

extension SwiftProtoTesting_TestParsingMerge.RepeatedFieldsGenerator: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = SwiftProtoTesting_TestParsingMerge.protoMessageName + ".RepeatedFieldsGenerator"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}field1\0\u{1}field2\0\u{1}field3\0\u{8}\u{7}Group1\0\u{8}\u{a}Group2\0\u{2}T\u{f}ext1\0\u{1}ext2\0")
  #if _pointerBitWidth(_64)
    @_alwaysEmitIntoClient @inline(__always)
    private static var _protobuf_messageLayoutString: StaticString { "\0@\0\0\u{7}\0\0\0\0\0\u{4}\0\0\u{1}\0\0\0\u{2}\u{8}\0\0\0\0\u{1}\0\u{b}\u{2}\0\0\0\u{2}\u{10}\0\0\u{1}\0\u{1}\0\u{b}\u{3}\0\0\0\u{2}\u{18}\0\0\u{2}\0\u{1}\0\u{b}\u{a}\0\0\0\u{2} \0\0\u{3}\0\u{2}\0\u{a}\u{14}\0\0\0\u{2}(\0\0\u{4}\0\u{3}\0\u{a}h\u{7}\0\0\u{2}0\0\0\u{5}\0\u{1}\0\u{b}i\u{7}\0\0\u{2}8\0\0\u{6}\0\u{1}\0\u{b}" }
  #elseif _pointerBitWidth(_32)
    @_alwaysEmitIntoClient @inline(__always)
    private static var _protobuf_messageLayoutString: StaticString { "\0 \0\0\u{7}\0\0\0\0\0\u{4}\0\0\u{1}\0\0\0\u{2}\u{4}\0\0\0\0\u{1}\0\u{b}\u{2}\0\0\0\u{2}\u{8}\0\0\u{1}\0\u{1}\0\u{b}\u{3}\0\0\0\u{2}\u{c}\0\0\u{2}\0\u{1}\0\u{b}\u{a}\0\0\0\u{2}\u{10}\0\0\u{3}\0\u{2}\0\u{a}\u{14}\0\0\0\u{2}\u{14}\0\0\u{4}\0\u{3}\0\u{a}h\u{7}\0\0\u{2}\u{18}\0\0\u{5}\0\u{1}\0\u{b}i\u{7}\0\0\u{2}\u{1c}\0\0\u{6}\0\u{1}\0\u{b}" }
  #else
    #error("Unsupported platform")
  #endif

  private static let _protobuf_messageLayout = SwiftProtobuf._MessageLayout(layout: _protobuf_messageLayoutString, deinitializeSubmessage: _protobuf_deinitializeSubmessage, copySubmessage: _protobuf_copySubmessage)

  private static func _protobuf_deinitializeSubmessage(for token: SwiftProtobuf._MessageLayout.SubmessageToken, field: SwiftProtobuf.FieldLayout, storage: SwiftProtobuf._MessageStorage) {
    switch token.index {
    case 1: storage.deinitializeField(field, type: [SwiftProtoTesting_TestAllTypes].self)
    case 2: storage.deinitializeField(field, type: [SwiftProtoTesting_TestParsingMerge.RepeatedFieldsGenerator.Group1].self)
    case 3: storage.deinitializeField(field, type: [SwiftProtoTesting_TestParsingMerge.RepeatedFieldsGenerator.Group2].self)
    default: preconditionFailure("invalid submessage token; this is a generator bug")
    }
  }

  private static func _protobuf_copySubmessage(for token: SwiftProtobuf._MessageLayout.SubmessageToken, field: SwiftProtobuf.FieldLayout, from source: SwiftProtobuf._MessageStorage, to destination: SwiftProtobuf._MessageStorage) {
    switch token.index {
    case 1: source.copyField(field, to: destination, type: [SwiftProtoTesting_TestAllTypes].self)
    case 2: source.copyField(field, to: destination, type: [SwiftProtoTesting_TestParsingMerge.RepeatedFieldsGenerator.Group1].self)
    case 3: source.copyField(field, to: destination, type: [SwiftProtoTesting_TestParsingMerge.RepeatedFieldsGenerator.Group2].self)
    default: preconditionFailure("invalid submessage token; this is a generator bug")
    }
  }

  public var isInitialized: Bool {
    fatalError("table-driven isInitialized not yet implemented")
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    fatalError("table-driven decodeMessage not yet implemented")
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    fatalError("table-driven traverse not yet implemented")
  }

  static func ==(lhs: SwiftProtoTesting_TestParsingMerge.RepeatedFieldsGenerator, rhs: SwiftProtoTesting_TestParsingMerge.RepeatedFieldsGenerator) -> Bool {
    fatalError("table-driven == not yet implemented")
  }
}

extension SwiftProtoTesting_TestParsingMerge.RepeatedFieldsGenerator.Group1: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = SwiftProtoTesting_TestParsingMerge.RepeatedFieldsGenerator.protoMessageName + ".Group1"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\u{b}field1\0")
  #if _pointerBitWidth(_64)
    @_alwaysEmitIntoClient @inline(__always)
    private static var _protobuf_messageLayoutString: StaticString { "\0\u{10}\0\0\u{1}\0\0\0\0\0\u{1}\0\0\u{b}\0\0\0\0\u{8}\0\0\0\0\u{1}\0\u{b}" }
  #elseif _pointerBitWidth(_32)
    @_alwaysEmitIntoClient @inline(__always)
    private static var _protobuf_messageLayoutString: StaticString { "\0\u{8}\0\0\u{1}\0\0\0\0\0\u{1}\0\0\u{b}\0\0\0\0\u{4}\0\0\0\0\u{1}\0\u{b}" }
  #else
    #error("Unsupported platform")
  #endif

  private static let _protobuf_messageLayout = SwiftProtobuf._MessageLayout(layout: _protobuf_messageLayoutString, deinitializeSubmessage: _protobuf_deinitializeSubmessage, copySubmessage: _protobuf_copySubmessage)

  private static func _protobuf_deinitializeSubmessage(for token: SwiftProtobuf._MessageLayout.SubmessageToken, field: SwiftProtobuf.FieldLayout, storage: SwiftProtobuf._MessageStorage) {
    switch token.index {
    case 1: storage.deinitializeField(field, type: SwiftProtoTesting_TestAllTypes.self)
    default: preconditionFailure("invalid submessage token; this is a generator bug")
    }
  }

  private static func _protobuf_copySubmessage(for token: SwiftProtobuf._MessageLayout.SubmessageToken, field: SwiftProtobuf.FieldLayout, from source: SwiftProtobuf._MessageStorage, to destination: SwiftProtobuf._MessageStorage) {
    switch token.index {
    case 1: source.copyField(field, to: destination, type: SwiftProtoTesting_TestAllTypes.self)
    default: preconditionFailure("invalid submessage token; this is a generator bug")
    }
  }

  public var isInitialized: Bool {
    fatalError("table-driven isInitialized not yet implemented")
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    fatalError("table-driven decodeMessage not yet implemented")
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    fatalError("table-driven traverse not yet implemented")
  }

  static func ==(lhs: SwiftProtoTesting_TestParsingMerge.RepeatedFieldsGenerator.Group1, rhs: SwiftProtoTesting_TestParsingMerge.RepeatedFieldsGenerator.Group1) -> Bool {
    fatalError("table-driven == not yet implemented")
  }
}

extension SwiftProtoTesting_TestParsingMerge.RepeatedFieldsGenerator.Group2: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = SwiftProtoTesting_TestParsingMerge.RepeatedFieldsGenerator.protoMessageName + ".Group2"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\u{15}field1\0")
  #if _pointerBitWidth(_64)
    @_alwaysEmitIntoClient @inline(__always)
    private static var _protobuf_messageLayoutString: StaticString { "\0\u{10}\0\0\u{1}\0\0\0\0\0\u{1}\0\0\u{15}\0\0\0\0\u{8}\0\0\0\0\u{1}\0\u{b}" }
  #elseif _pointerBitWidth(_32)
    @_alwaysEmitIntoClient @inline(__always)
    private static var _protobuf_messageLayoutString: StaticString { "\0\u{8}\0\0\u{1}\0\0\0\0\0\u{1}\0\0\u{15}\0\0\0\0\u{4}\0\0\0\0\u{1}\0\u{b}" }
  #else
    #error("Unsupported platform")
  #endif

  private static let _protobuf_messageLayout = SwiftProtobuf._MessageLayout(layout: _protobuf_messageLayoutString, deinitializeSubmessage: _protobuf_deinitializeSubmessage, copySubmessage: _protobuf_copySubmessage)

  private static func _protobuf_deinitializeSubmessage(for token: SwiftProtobuf._MessageLayout.SubmessageToken, field: SwiftProtobuf.FieldLayout, storage: SwiftProtobuf._MessageStorage) {
    switch token.index {
    case 1: storage.deinitializeField(field, type: SwiftProtoTesting_TestAllTypes.self)
    default: preconditionFailure("invalid submessage token; this is a generator bug")
    }
  }

  private static func _protobuf_copySubmessage(for token: SwiftProtobuf._MessageLayout.SubmessageToken, field: SwiftProtobuf.FieldLayout, from source: SwiftProtobuf._MessageStorage, to destination: SwiftProtobuf._MessageStorage) {
    switch token.index {
    case 1: source.copyField(field, to: destination, type: SwiftProtoTesting_TestAllTypes.self)
    default: preconditionFailure("invalid submessage token; this is a generator bug")
    }
  }

  public var isInitialized: Bool {
    fatalError("table-driven isInitialized not yet implemented")
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    fatalError("table-driven decodeMessage not yet implemented")
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    fatalError("table-driven traverse not yet implemented")
  }

  static func ==(lhs: SwiftProtoTesting_TestParsingMerge.RepeatedFieldsGenerator.Group2, rhs: SwiftProtoTesting_TestParsingMerge.RepeatedFieldsGenerator.Group2) -> Bool {
    fatalError("table-driven == not yet implemented")
  }
}

extension SwiftProtoTesting_TestParsingMerge.OptionalGroup: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = SwiftProtoTesting_TestParsingMerge.protoMessageName + ".OptionalGroup"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{4}\u{b}optional_group_all_types\0")
  #if _pointerBitWidth(_64)
    @_alwaysEmitIntoClient @inline(__always)
    private static var _protobuf_messageLayoutString: StaticString { "\0\u{10}\0\0\u{1}\0\0\0\0\0\u{1}\0\0\u{b}\0\0\0\0\u{8}\0\0\0\0\u{1}\0\u{b}" }
  #elseif _pointerBitWidth(_32)
    @_alwaysEmitIntoClient @inline(__always)
    private static var _protobuf_messageLayoutString: StaticString { "\0\u{8}\0\0\u{1}\0\0\0\0\0\u{1}\0\0\u{b}\0\0\0\0\u{4}\0\0\0\0\u{1}\0\u{b}" }
  #else
    #error("Unsupported platform")
  #endif

  private static let _protobuf_messageLayout = SwiftProtobuf._MessageLayout(layout: _protobuf_messageLayoutString, deinitializeSubmessage: _protobuf_deinitializeSubmessage, copySubmessage: _protobuf_copySubmessage)

  private static func _protobuf_deinitializeSubmessage(for token: SwiftProtobuf._MessageLayout.SubmessageToken, field: SwiftProtobuf.FieldLayout, storage: SwiftProtobuf._MessageStorage) {
    switch token.index {
    case 1: storage.deinitializeField(field, type: SwiftProtoTesting_TestAllTypes.self)
    default: preconditionFailure("invalid submessage token; this is a generator bug")
    }
  }

  private static func _protobuf_copySubmessage(for token: SwiftProtobuf._MessageLayout.SubmessageToken, field: SwiftProtobuf.FieldLayout, from source: SwiftProtobuf._MessageStorage, to destination: SwiftProtobuf._MessageStorage) {
    switch token.index {
    case 1: source.copyField(field, to: destination, type: SwiftProtoTesting_TestAllTypes.self)
    default: preconditionFailure("invalid submessage token; this is a generator bug")
    }
  }

  public var isInitialized: Bool {
    fatalError("table-driven isInitialized not yet implemented")
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    fatalError("table-driven decodeMessage not yet implemented")
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    fatalError("table-driven traverse not yet implemented")
  }

  static func ==(lhs: SwiftProtoTesting_TestParsingMerge.OptionalGroup, rhs: SwiftProtoTesting_TestParsingMerge.OptionalGroup) -> Bool {
    fatalError("table-driven == not yet implemented")
  }
}

extension SwiftProtoTesting_TestParsingMerge.RepeatedGroup: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = SwiftProtoTesting_TestParsingMerge.protoMessageName + ".RepeatedGroup"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{4}\u{15}repeated_group_all_types\0")
  #if _pointerBitWidth(_64)
    @_alwaysEmitIntoClient @inline(__always)
    private static var _protobuf_messageLayoutString: StaticString { "\0\u{10}\0\0\u{1}\0\0\0\0\0\u{1}\0\0\u{15}\0\0\0\0\u{8}\0\0\0\0\u{1}\0\u{b}" }
  #elseif _pointerBitWidth(_32)
    @_alwaysEmitIntoClient @inline(__always)
    private static var _protobuf_messageLayoutString: StaticString { "\0\u{8}\0\0\u{1}\0\0\0\0\0\u{1}\0\0\u{15}\0\0\0\0\u{4}\0\0\0\0\u{1}\0\u{b}" }
  #else
    #error("Unsupported platform")
  #endif

  private static let _protobuf_messageLayout = SwiftProtobuf._MessageLayout(layout: _protobuf_messageLayoutString, deinitializeSubmessage: _protobuf_deinitializeSubmessage, copySubmessage: _protobuf_copySubmessage)

  private static func _protobuf_deinitializeSubmessage(for token: SwiftProtobuf._MessageLayout.SubmessageToken, field: SwiftProtobuf.FieldLayout, storage: SwiftProtobuf._MessageStorage) {
    switch token.index {
    case 1: storage.deinitializeField(field, type: SwiftProtoTesting_TestAllTypes.self)
    default: preconditionFailure("invalid submessage token; this is a generator bug")
    }
  }

  private static func _protobuf_copySubmessage(for token: SwiftProtobuf._MessageLayout.SubmessageToken, field: SwiftProtobuf.FieldLayout, from source: SwiftProtobuf._MessageStorage, to destination: SwiftProtobuf._MessageStorage) {
    switch token.index {
    case 1: source.copyField(field, to: destination, type: SwiftProtoTesting_TestAllTypes.self)
    default: preconditionFailure("invalid submessage token; this is a generator bug")
    }
  }

  public var isInitialized: Bool {
    fatalError("table-driven isInitialized not yet implemented")
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    fatalError("table-driven decodeMessage not yet implemented")
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    fatalError("table-driven traverse not yet implemented")
  }

  static func ==(lhs: SwiftProtoTesting_TestParsingMerge.RepeatedGroup, rhs: SwiftProtoTesting_TestParsingMerge.RepeatedGroup) -> Bool {
    fatalError("table-driven == not yet implemented")
  }
}
