// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: test_features.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Protos/SwiftProtobufPluginLibraryTests/test_features.proto - test proto for Features
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2024 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See http://swift.org/LICENSE.txt for license information
// See http://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
// -----------------------------------------------------------------------------

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct SwiftFeatureTest_TestFeatures: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var feature1: SwiftFeatureTest_TestFeatures.EnumFeature {
    get {return _feature1 ?? .unknown}
    set {_feature1 = newValue}
  }
  /// Returns true if `feature1` has been explicitly set.
  var hasFeature1: Bool {return self._feature1 != nil}
  /// Clears the value of `feature1`. Subsequent reads from it will return its default value.
  mutating func clearFeature1() {self._feature1 = nil}

  var feature2: SwiftFeatureTest_TestFeatures.EnumFeature {
    get {return _feature2 ?? .unknown}
    set {_feature2 = newValue}
  }
  /// Returns true if `feature2` has been explicitly set.
  var hasFeature2: Bool {return self._feature2 != nil}
  /// Clears the value of `feature2`. Subsequent reads from it will return its default value.
  mutating func clearFeature2() {self._feature2 = nil}

  var feature3: SwiftFeatureTest_TestFeatures.EnumFeature {
    get {return _feature3 ?? .unknown}
    set {_feature3 = newValue}
  }
  /// Returns true if `feature3` has been explicitly set.
  var hasFeature3: Bool {return self._feature3 != nil}
  /// Clears the value of `feature3`. Subsequent reads from it will return its default value.
  mutating func clearFeature3() {self._feature3 = nil}

  var feature4: SwiftFeatureTest_TestFeatures.EnumFeature {
    get {return _feature4 ?? .unknown}
    set {_feature4 = newValue}
  }
  /// Returns true if `feature4` has been explicitly set.
  var hasFeature4: Bool {return self._feature4 != nil}
  /// Clears the value of `feature4`. Subsequent reads from it will return its default value.
  mutating func clearFeature4() {self._feature4 = nil}

  var feature5: SwiftFeatureTest_TestFeatures.EnumFeature {
    get {return _feature5 ?? .unknown}
    set {_feature5 = newValue}
  }
  /// Returns true if `feature5` has been explicitly set.
  var hasFeature5: Bool {return self._feature5 != nil}
  /// Clears the value of `feature5`. Subsequent reads from it will return its default value.
  mutating func clearFeature5() {self._feature5 = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum EnumFeature: Int, SwiftProtobuf.Enum, Swift.CaseIterable {
    case unknown = 0
    case value1 = 1
    case value2 = 2
    case value3 = 3
    case value4 = 4
    case value5 = 5
    case value6 = 6

    init() {
      self = .unknown
    }

  }

  init() {}

  fileprivate var _feature1: SwiftFeatureTest_TestFeatures.EnumFeature? = nil
  fileprivate var _feature2: SwiftFeatureTest_TestFeatures.EnumFeature? = nil
  fileprivate var _feature3: SwiftFeatureTest_TestFeatures.EnumFeature? = nil
  fileprivate var _feature4: SwiftFeatureTest_TestFeatures.EnumFeature? = nil
  fileprivate var _feature5: SwiftFeatureTest_TestFeatures.EnumFeature? = nil
}

// MARK: - Extension support defined in test_features.proto.

// MARK: - Extension Properties

// Swift Extensions on the extended Messages to add easy access to the declared
// extension fields. The names are based on the extension field name from the proto
// declaration. To avoid naming collisions, the names are prefixed with the name of
// the scope where the extend directive occurs.

extension SwiftProtobuf.Google_Protobuf_FeatureSet {

  var SwiftFeatureTest_test: SwiftFeatureTest_TestFeatures {
    get {return getExtensionValue(ext: SwiftFeatureTest_Extensions_test) ?? SwiftFeatureTest_TestFeatures()}
    set {setExtensionValue(ext: SwiftFeatureTest_Extensions_test, value: newValue)}
  }
  /// Returns true if extension `SwiftFeatureTest_Extensions_test`
  /// has been explicitly set.
  var hasSwiftFeatureTest_test: Bool {
    return hasExtensionValue(ext: SwiftFeatureTest_Extensions_test)
  }
  /// Clears the value of extension `SwiftFeatureTest_Extensions_test`.
  /// Subsequent reads from it will return its default value.
  mutating func clearSwiftFeatureTest_test() {
    clearExtensionValue(ext: SwiftFeatureTest_Extensions_test)
  }

}

// MARK: - File's ExtensionMap: SwiftFeatureTest_TestFeatures_Extensions

/// A `SwiftProtobuf.SimpleExtensionMap` that includes all of the extensions defined by
/// this .proto file. It can be used any place an `SwiftProtobuf.ExtensionMap` is needed
/// in parsing, or it can be combined with other `SwiftProtobuf.SimpleExtensionMap`s to create
/// a larger `SwiftProtobuf.SimpleExtensionMap`.
let SwiftFeatureTest_TestFeatures_Extensions: SwiftProtobuf.SimpleExtensionMap = [
  SwiftFeatureTest_Extensions_test
]

// Extension Objects - The only reason these might be needed is when manually
// constructing a `SimpleExtensionMap`, otherwise, use the above _Extension Properties_
// accessors for the extension fields on the messages directly.

let SwiftFeatureTest_Extensions_test = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<SwiftFeatureTest_TestFeatures>, SwiftProtobuf.Google_Protobuf_FeatureSet>(
  _protobuf_fieldNumber: 9999,
  fieldName: "swift_feature_test.test"
)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "swift_feature_test"

extension SwiftFeatureTest_TestFeatures: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TestFeatures"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "feature1"),
    2: .same(proto: "feature2"),
    3: .same(proto: "feature3"),
    4: .same(proto: "feature4"),
    5: .same(proto: "feature5"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._feature1) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self._feature2) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self._feature3) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self._feature4) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self._feature5) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._feature1 {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._feature2 {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._feature3 {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._feature4 {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._feature5 {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SwiftFeatureTest_TestFeatures, rhs: SwiftFeatureTest_TestFeatures) -> Bool {
    if lhs._feature1 != rhs._feature1 {return false}
    if lhs._feature2 != rhs._feature2 {return false}
    if lhs._feature3 != rhs._feature3 {return false}
    if lhs._feature4 != rhs._feature4 {return false}
    if lhs._feature5 != rhs._feature5 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SwiftFeatureTest_TestFeatures.EnumFeature: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ENUM_FEATURE_UNKNOWN"),
    1: .same(proto: "ENUM_FEATURE_VALUE1"),
    2: .same(proto: "ENUM_FEATURE_VALUE2"),
    3: .same(proto: "ENUM_FEATURE_VALUE3"),
    4: .same(proto: "ENUM_FEATURE_VALUE4"),
    5: .same(proto: "ENUM_FEATURE_VALUE5"),
    6: .same(proto: "ENUM_FEATURE_VALUE6"),
  ]
}
