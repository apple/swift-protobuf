/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: unittest_swift_runtime_proto2.proto
 *
 */

//  Protocol Buffers - Google's data interchange format
//  Copyright 2015 Google Inc.  All rights reserved.
// 
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are
//  met:
// 
//      * Redistributions of source code must retain the above copyright
//  notice, this list of conditions and the following disclaimer.
//      * Redistributions in binary form must reproduce the above
//  copyright notice, this list of conditions and the following disclaimer
//  in the documentation and/or other materials provided with the
//  distribution.
//      * Neither the name of Google Inc. nor the names of its
//  contributors may be used to endorse or promote products derived from
//  this software without specific prior written permission.
// 
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
//  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
//  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
//  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
//  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
//  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
//  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _1: SwiftProtobuf.ProtobufAPIVersion_1 {}
  typealias Version = _1
}

struct ProtobufUnittest_Message2: SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Message2"
  static let protoPackageName: String = "protobuf_unittest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .unique(proto: "optional_int32", json: "optionalInt32"),
    2: .unique(proto: "optional_int64", json: "optionalInt64"),
    3: .unique(proto: "optional_uint32", json: "optionalUint32"),
    4: .unique(proto: "optional_uint64", json: "optionalUint64"),
    5: .unique(proto: "optional_sint32", json: "optionalSint32"),
    6: .unique(proto: "optional_sint64", json: "optionalSint64"),
    7: .unique(proto: "optional_fixed32", json: "optionalFixed32"),
    8: .unique(proto: "optional_fixed64", json: "optionalFixed64"),
    9: .unique(proto: "optional_sfixed32", json: "optionalSfixed32"),
    10: .unique(proto: "optional_sfixed64", json: "optionalSfixed64"),
    11: .unique(proto: "optional_float", json: "optionalFloat"),
    12: .unique(proto: "optional_double", json: "optionalDouble"),
    13: .unique(proto: "optional_bool", json: "optionalBool"),
    14: .unique(proto: "optional_string", json: "optionalString"),
    15: .unique(proto: "optional_bytes", json: "optionalBytes"),
    16: .unique(proto: "OptionalGroup", json: "optionalgroup"),
    18: .unique(proto: "optional_message", json: "optionalMessage"),
    19: .unique(proto: "optional_enum", json: "optionalEnum"),
    31: .unique(proto: "repeated_int32", json: "repeatedInt32"),
    32: .unique(proto: "repeated_int64", json: "repeatedInt64"),
    33: .unique(proto: "repeated_uint32", json: "repeatedUint32"),
    34: .unique(proto: "repeated_uint64", json: "repeatedUint64"),
    35: .unique(proto: "repeated_sint32", json: "repeatedSint32"),
    36: .unique(proto: "repeated_sint64", json: "repeatedSint64"),
    37: .unique(proto: "repeated_fixed32", json: "repeatedFixed32"),
    38: .unique(proto: "repeated_fixed64", json: "repeatedFixed64"),
    39: .unique(proto: "repeated_sfixed32", json: "repeatedSfixed32"),
    40: .unique(proto: "repeated_sfixed64", json: "repeatedSfixed64"),
    41: .unique(proto: "repeated_float", json: "repeatedFloat"),
    42: .unique(proto: "repeated_double", json: "repeatedDouble"),
    43: .unique(proto: "repeated_bool", json: "repeatedBool"),
    44: .unique(proto: "repeated_string", json: "repeatedString"),
    45: .unique(proto: "repeated_bytes", json: "repeatedBytes"),
    46: .unique(proto: "RepeatedGroup", json: "repeatedgroup"),
    48: .unique(proto: "repeated_message", json: "repeatedMessage"),
    49: .unique(proto: "repeated_enum", json: "repeatedEnum"),
    51: .unique(proto: "oneof_int32", json: "oneofInt32"),
    52: .unique(proto: "oneof_int64", json: "oneofInt64"),
    53: .unique(proto: "oneof_uint32", json: "oneofUint32"),
    54: .unique(proto: "oneof_uint64", json: "oneofUint64"),
    55: .unique(proto: "oneof_sint32", json: "oneofSint32"),
    56: .unique(proto: "oneof_sint64", json: "oneofSint64"),
    57: .unique(proto: "oneof_fixed32", json: "oneofFixed32"),
    58: .unique(proto: "oneof_fixed64", json: "oneofFixed64"),
    59: .unique(proto: "oneof_sfixed32", json: "oneofSfixed32"),
    60: .unique(proto: "oneof_sfixed64", json: "oneofSfixed64"),
    61: .unique(proto: "oneof_float", json: "oneofFloat"),
    62: .unique(proto: "oneof_double", json: "oneofDouble"),
    63: .unique(proto: "oneof_bool", json: "oneofBool"),
    64: .unique(proto: "oneof_string", json: "oneofString"),
    65: .unique(proto: "oneof_bytes", json: "oneofBytes"),
    66: .unique(proto: "OneofGroup", json: "oneofgroup"),
    68: .unique(proto: "oneof_message", json: "oneofMessage"),
    69: .unique(proto: "oneof_enum", json: "oneofEnum"),
    70: .unique(proto: "map_int32_int32", json: "mapInt32Int32"),
    71: .unique(proto: "map_int64_int64", json: "mapInt64Int64"),
    72: .unique(proto: "map_uint32_uint32", json: "mapUint32Uint32"),
    73: .unique(proto: "map_uint64_uint64", json: "mapUint64Uint64"),
    74: .unique(proto: "map_sint32_sint32", json: "mapSint32Sint32"),
    75: .unique(proto: "map_sint64_sint64", json: "mapSint64Sint64"),
    76: .unique(proto: "map_fixed32_fixed32", json: "mapFixed32Fixed32"),
    77: .unique(proto: "map_fixed64_fixed64", json: "mapFixed64Fixed64"),
    78: .unique(proto: "map_sfixed32_sfixed32", json: "mapSfixed32Sfixed32"),
    79: .unique(proto: "map_sfixed64_sfixed64", json: "mapSfixed64Sfixed64"),
    80: .unique(proto: "map_int32_float", json: "mapInt32Float"),
    81: .unique(proto: "map_int32_double", json: "mapInt32Double"),
    82: .unique(proto: "map_bool_bool", json: "mapBoolBool"),
    83: .unique(proto: "map_string_string", json: "mapStringString"),
    84: .unique(proto: "map_string_bytes", json: "mapStringBytes"),
    85: .unique(proto: "map_string_message", json: "mapStringMessage"),
    86: .unique(proto: "map_int32_bytes", json: "mapInt32Bytes"),
    87: .unique(proto: "map_int32_enum", json: "mapInt32Enum"),
    88: .unique(proto: "map_int32_message", json: "mapInt32Message"),
  ]

  private class _StorageClass {
    var _optionalInt32: Int32? = nil
    var _optionalInt64: Int64? = nil
    var _optionalUint32: UInt32? = nil
    var _optionalUint64: UInt64? = nil
    var _optionalSint32: Int32? = nil
    var _optionalSint64: Int64? = nil
    var _optionalFixed32: UInt32? = nil
    var _optionalFixed64: UInt64? = nil
    var _optionalSfixed32: Int32? = nil
    var _optionalSfixed64: Int64? = nil
    var _optionalFloat: Float? = nil
    var _optionalDouble: Double? = nil
    var _optionalBool: Bool? = nil
    var _optionalString: String? = nil
    var _optionalBytes: Data? = nil
    var _optionalGroup: ProtobufUnittest_Message2.OptionalGroup? = nil
    var _optionalMessage: ProtobufUnittest_Message2? = nil
    var _optionalEnum: ProtobufUnittest_Message2.Enum? = nil
    var _repeatedInt32: [Int32] = []
    var _repeatedInt64: [Int64] = []
    var _repeatedUint32: [UInt32] = []
    var _repeatedUint64: [UInt64] = []
    var _repeatedSint32: [Int32] = []
    var _repeatedSint64: [Int64] = []
    var _repeatedFixed32: [UInt32] = []
    var _repeatedFixed64: [UInt64] = []
    var _repeatedSfixed32: [Int32] = []
    var _repeatedSfixed64: [Int64] = []
    var _repeatedFloat: [Float] = []
    var _repeatedDouble: [Double] = []
    var _repeatedBool: [Bool] = []
    var _repeatedString: [String] = []
    var _repeatedBytes: [Data] = []
    var _repeatedGroup: [ProtobufUnittest_Message2.RepeatedGroup] = []
    var _repeatedMessage: [ProtobufUnittest_Message2] = []
    var _repeatedEnum: [ProtobufUnittest_Message2.Enum] = []
    var _o: ProtobufUnittest_Message2.OneOf_O?
    var _mapInt32Int32: Dictionary<Int32,Int32> = [:]
    var _mapInt64Int64: Dictionary<Int64,Int64> = [:]
    var _mapUint32Uint32: Dictionary<UInt32,UInt32> = [:]
    var _mapUint64Uint64: Dictionary<UInt64,UInt64> = [:]
    var _mapSint32Sint32: Dictionary<Int32,Int32> = [:]
    var _mapSint64Sint64: Dictionary<Int64,Int64> = [:]
    var _mapFixed32Fixed32: Dictionary<UInt32,UInt32> = [:]
    var _mapFixed64Fixed64: Dictionary<UInt64,UInt64> = [:]
    var _mapSfixed32Sfixed32: Dictionary<Int32,Int32> = [:]
    var _mapSfixed64Sfixed64: Dictionary<Int64,Int64> = [:]
    var _mapInt32Float: Dictionary<Int32,Float> = [:]
    var _mapInt32Double: Dictionary<Int32,Double> = [:]
    var _mapBoolBool: Dictionary<Bool,Bool> = [:]
    var _mapStringString: Dictionary<String,String> = [:]
    var _mapStringBytes: Dictionary<String,Data> = [:]
    var _mapStringMessage: Dictionary<String,ProtobufUnittest_Message2> = [:]
    var _mapInt32Bytes: Dictionary<Int32,Data> = [:]
    var _mapInt32Enum: Dictionary<Int32,ProtobufUnittest_Message2.Enum> = [:]
    var _mapInt32Message: Dictionary<Int32,ProtobufUnittest_Message2> = [:]

    init() {}

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._optionalInt32 = _optionalInt32
      clone._optionalInt64 = _optionalInt64
      clone._optionalUint32 = _optionalUint32
      clone._optionalUint64 = _optionalUint64
      clone._optionalSint32 = _optionalSint32
      clone._optionalSint64 = _optionalSint64
      clone._optionalFixed32 = _optionalFixed32
      clone._optionalFixed64 = _optionalFixed64
      clone._optionalSfixed32 = _optionalSfixed32
      clone._optionalSfixed64 = _optionalSfixed64
      clone._optionalFloat = _optionalFloat
      clone._optionalDouble = _optionalDouble
      clone._optionalBool = _optionalBool
      clone._optionalString = _optionalString
      clone._optionalBytes = _optionalBytes
      clone._optionalGroup = _optionalGroup
      clone._optionalMessage = _optionalMessage
      clone._optionalEnum = _optionalEnum
      clone._repeatedInt32 = _repeatedInt32
      clone._repeatedInt64 = _repeatedInt64
      clone._repeatedUint32 = _repeatedUint32
      clone._repeatedUint64 = _repeatedUint64
      clone._repeatedSint32 = _repeatedSint32
      clone._repeatedSint64 = _repeatedSint64
      clone._repeatedFixed32 = _repeatedFixed32
      clone._repeatedFixed64 = _repeatedFixed64
      clone._repeatedSfixed32 = _repeatedSfixed32
      clone._repeatedSfixed64 = _repeatedSfixed64
      clone._repeatedFloat = _repeatedFloat
      clone._repeatedDouble = _repeatedDouble
      clone._repeatedBool = _repeatedBool
      clone._repeatedString = _repeatedString
      clone._repeatedBytes = _repeatedBytes
      clone._repeatedGroup = _repeatedGroup
      clone._repeatedMessage = _repeatedMessage
      clone._repeatedEnum = _repeatedEnum
      clone._o = _o
      clone._mapInt32Int32 = _mapInt32Int32
      clone._mapInt64Int64 = _mapInt64Int64
      clone._mapUint32Uint32 = _mapUint32Uint32
      clone._mapUint64Uint64 = _mapUint64Uint64
      clone._mapSint32Sint32 = _mapSint32Sint32
      clone._mapSint64Sint64 = _mapSint64Sint64
      clone._mapFixed32Fixed32 = _mapFixed32Fixed32
      clone._mapFixed64Fixed64 = _mapFixed64Fixed64
      clone._mapSfixed32Sfixed32 = _mapSfixed32Sfixed32
      clone._mapSfixed64Sfixed64 = _mapSfixed64Sfixed64
      clone._mapInt32Float = _mapInt32Float
      clone._mapInt32Double = _mapInt32Double
      clone._mapBoolBool = _mapBoolBool
      clone._mapStringString = _mapStringString
      clone._mapStringBytes = _mapStringBytes
      clone._mapStringMessage = _mapStringMessage
      clone._mapInt32Bytes = _mapInt32Bytes
      clone._mapInt32Enum = _mapInt32Enum
      clone._mapInt32Message = _mapInt32Message
      return clone
    }
  }

  private var _storage = _StorageClass()

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }

  var optionalInt32: Int32 {
    get {return _storage._optionalInt32 ?? 0}
    set {_uniqueStorage()._optionalInt32 = newValue}
  }
  var hasOptionalInt32: Bool {
    return _storage._optionalInt32 != nil
  }
  mutating func clearOptionalInt32() {
    return _storage._optionalInt32 = nil
  }

  var optionalInt64: Int64 {
    get {return _storage._optionalInt64 ?? 0}
    set {_uniqueStorage()._optionalInt64 = newValue}
  }
  var hasOptionalInt64: Bool {
    return _storage._optionalInt64 != nil
  }
  mutating func clearOptionalInt64() {
    return _storage._optionalInt64 = nil
  }

  var optionalUint32: UInt32 {
    get {return _storage._optionalUint32 ?? 0}
    set {_uniqueStorage()._optionalUint32 = newValue}
  }
  var hasOptionalUint32: Bool {
    return _storage._optionalUint32 != nil
  }
  mutating func clearOptionalUint32() {
    return _storage._optionalUint32 = nil
  }

  var optionalUint64: UInt64 {
    get {return _storage._optionalUint64 ?? 0}
    set {_uniqueStorage()._optionalUint64 = newValue}
  }
  var hasOptionalUint64: Bool {
    return _storage._optionalUint64 != nil
  }
  mutating func clearOptionalUint64() {
    return _storage._optionalUint64 = nil
  }

  var optionalSint32: Int32 {
    get {return _storage._optionalSint32 ?? 0}
    set {_uniqueStorage()._optionalSint32 = newValue}
  }
  var hasOptionalSint32: Bool {
    return _storage._optionalSint32 != nil
  }
  mutating func clearOptionalSint32() {
    return _storage._optionalSint32 = nil
  }

  var optionalSint64: Int64 {
    get {return _storage._optionalSint64 ?? 0}
    set {_uniqueStorage()._optionalSint64 = newValue}
  }
  var hasOptionalSint64: Bool {
    return _storage._optionalSint64 != nil
  }
  mutating func clearOptionalSint64() {
    return _storage._optionalSint64 = nil
  }

  var optionalFixed32: UInt32 {
    get {return _storage._optionalFixed32 ?? 0}
    set {_uniqueStorage()._optionalFixed32 = newValue}
  }
  var hasOptionalFixed32: Bool {
    return _storage._optionalFixed32 != nil
  }
  mutating func clearOptionalFixed32() {
    return _storage._optionalFixed32 = nil
  }

  var optionalFixed64: UInt64 {
    get {return _storage._optionalFixed64 ?? 0}
    set {_uniqueStorage()._optionalFixed64 = newValue}
  }
  var hasOptionalFixed64: Bool {
    return _storage._optionalFixed64 != nil
  }
  mutating func clearOptionalFixed64() {
    return _storage._optionalFixed64 = nil
  }

  var optionalSfixed32: Int32 {
    get {return _storage._optionalSfixed32 ?? 0}
    set {_uniqueStorage()._optionalSfixed32 = newValue}
  }
  var hasOptionalSfixed32: Bool {
    return _storage._optionalSfixed32 != nil
  }
  mutating func clearOptionalSfixed32() {
    return _storage._optionalSfixed32 = nil
  }

  var optionalSfixed64: Int64 {
    get {return _storage._optionalSfixed64 ?? 0}
    set {_uniqueStorage()._optionalSfixed64 = newValue}
  }
  var hasOptionalSfixed64: Bool {
    return _storage._optionalSfixed64 != nil
  }
  mutating func clearOptionalSfixed64() {
    return _storage._optionalSfixed64 = nil
  }

  var optionalFloat: Float {
    get {return _storage._optionalFloat ?? 0}
    set {_uniqueStorage()._optionalFloat = newValue}
  }
  var hasOptionalFloat: Bool {
    return _storage._optionalFloat != nil
  }
  mutating func clearOptionalFloat() {
    return _storage._optionalFloat = nil
  }

  var optionalDouble: Double {
    get {return _storage._optionalDouble ?? 0}
    set {_uniqueStorage()._optionalDouble = newValue}
  }
  var hasOptionalDouble: Bool {
    return _storage._optionalDouble != nil
  }
  mutating func clearOptionalDouble() {
    return _storage._optionalDouble = nil
  }

  var optionalBool: Bool {
    get {return _storage._optionalBool ?? false}
    set {_uniqueStorage()._optionalBool = newValue}
  }
  var hasOptionalBool: Bool {
    return _storage._optionalBool != nil
  }
  mutating func clearOptionalBool() {
    return _storage._optionalBool = nil
  }

  var optionalString: String {
    get {return _storage._optionalString ?? ""}
    set {_uniqueStorage()._optionalString = newValue}
  }
  var hasOptionalString: Bool {
    return _storage._optionalString != nil
  }
  mutating func clearOptionalString() {
    return _storage._optionalString = nil
  }

  var optionalBytes: Data {
    get {return _storage._optionalBytes ?? Data()}
    set {_uniqueStorage()._optionalBytes = newValue}
  }
  var hasOptionalBytes: Bool {
    return _storage._optionalBytes != nil
  }
  mutating func clearOptionalBytes() {
    return _storage._optionalBytes = nil
  }

  var optionalGroup: ProtobufUnittest_Message2.OptionalGroup {
    get {return _storage._optionalGroup ?? ProtobufUnittest_Message2.OptionalGroup()}
    set {_uniqueStorage()._optionalGroup = newValue}
  }
  var hasOptionalGroup: Bool {
    return _storage._optionalGroup != nil
  }
  mutating func clearOptionalGroup() {
    return _storage._optionalGroup = nil
  }

  var optionalMessage: ProtobufUnittest_Message2 {
    get {return _storage._optionalMessage ?? ProtobufUnittest_Message2()}
    set {_uniqueStorage()._optionalMessage = newValue}
  }
  var hasOptionalMessage: Bool {
    return _storage._optionalMessage != nil
  }
  mutating func clearOptionalMessage() {
    return _storage._optionalMessage = nil
  }

  var optionalEnum: ProtobufUnittest_Message2.Enum {
    get {return _storage._optionalEnum ?? ProtobufUnittest_Message2.Enum.foo}
    set {_uniqueStorage()._optionalEnum = newValue}
  }
  var hasOptionalEnum: Bool {
    return _storage._optionalEnum != nil
  }
  mutating func clearOptionalEnum() {
    return _storage._optionalEnum = nil
  }

  var repeatedInt32: [Int32] {
    get {return _storage._repeatedInt32}
    set {_uniqueStorage()._repeatedInt32 = newValue}
  }

  var repeatedInt64: [Int64] {
    get {return _storage._repeatedInt64}
    set {_uniqueStorage()._repeatedInt64 = newValue}
  }

  var repeatedUint32: [UInt32] {
    get {return _storage._repeatedUint32}
    set {_uniqueStorage()._repeatedUint32 = newValue}
  }

  var repeatedUint64: [UInt64] {
    get {return _storage._repeatedUint64}
    set {_uniqueStorage()._repeatedUint64 = newValue}
  }

  var repeatedSint32: [Int32] {
    get {return _storage._repeatedSint32}
    set {_uniqueStorage()._repeatedSint32 = newValue}
  }

  var repeatedSint64: [Int64] {
    get {return _storage._repeatedSint64}
    set {_uniqueStorage()._repeatedSint64 = newValue}
  }

  var repeatedFixed32: [UInt32] {
    get {return _storage._repeatedFixed32}
    set {_uniqueStorage()._repeatedFixed32 = newValue}
  }

  var repeatedFixed64: [UInt64] {
    get {return _storage._repeatedFixed64}
    set {_uniqueStorage()._repeatedFixed64 = newValue}
  }

  var repeatedSfixed32: [Int32] {
    get {return _storage._repeatedSfixed32}
    set {_uniqueStorage()._repeatedSfixed32 = newValue}
  }

  var repeatedSfixed64: [Int64] {
    get {return _storage._repeatedSfixed64}
    set {_uniqueStorage()._repeatedSfixed64 = newValue}
  }

  var repeatedFloat: [Float] {
    get {return _storage._repeatedFloat}
    set {_uniqueStorage()._repeatedFloat = newValue}
  }

  var repeatedDouble: [Double] {
    get {return _storage._repeatedDouble}
    set {_uniqueStorage()._repeatedDouble = newValue}
  }

  var repeatedBool: [Bool] {
    get {return _storage._repeatedBool}
    set {_uniqueStorage()._repeatedBool = newValue}
  }

  var repeatedString: [String] {
    get {return _storage._repeatedString}
    set {_uniqueStorage()._repeatedString = newValue}
  }

  var repeatedBytes: [Data] {
    get {return _storage._repeatedBytes}
    set {_uniqueStorage()._repeatedBytes = newValue}
  }

  var repeatedGroup: [ProtobufUnittest_Message2.RepeatedGroup] {
    get {return _storage._repeatedGroup}
    set {_uniqueStorage()._repeatedGroup = newValue}
  }

  var repeatedMessage: [ProtobufUnittest_Message2] {
    get {return _storage._repeatedMessage}
    set {_uniqueStorage()._repeatedMessage = newValue}
  }

  var repeatedEnum: [ProtobufUnittest_Message2.Enum] {
    get {return _storage._repeatedEnum}
    set {_uniqueStorage()._repeatedEnum = newValue}
  }

  var oneofInt32: Int32 {
    get {
      if case .oneofInt32(let v)? = _storage._o {
        return v
      }
      return 100
    }
    set {
      _uniqueStorage()._o = .oneofInt32(newValue)
    }
  }

  var oneofInt64: Int64 {
    get {
      if case .oneofInt64(let v)? = _storage._o {
        return v
      }
      return 101
    }
    set {
      _uniqueStorage()._o = .oneofInt64(newValue)
    }
  }

  var oneofUint32: UInt32 {
    get {
      if case .oneofUint32(let v)? = _storage._o {
        return v
      }
      return 102
    }
    set {
      _uniqueStorage()._o = .oneofUint32(newValue)
    }
  }

  var oneofUint64: UInt64 {
    get {
      if case .oneofUint64(let v)? = _storage._o {
        return v
      }
      return 103
    }
    set {
      _uniqueStorage()._o = .oneofUint64(newValue)
    }
  }

  var oneofSint32: Int32 {
    get {
      if case .oneofSint32(let v)? = _storage._o {
        return v
      }
      return 104
    }
    set {
      _uniqueStorage()._o = .oneofSint32(newValue)
    }
  }

  var oneofSint64: Int64 {
    get {
      if case .oneofSint64(let v)? = _storage._o {
        return v
      }
      return 105
    }
    set {
      _uniqueStorage()._o = .oneofSint64(newValue)
    }
  }

  var oneofFixed32: UInt32 {
    get {
      if case .oneofFixed32(let v)? = _storage._o {
        return v
      }
      return 106
    }
    set {
      _uniqueStorage()._o = .oneofFixed32(newValue)
    }
  }

  var oneofFixed64: UInt64 {
    get {
      if case .oneofFixed64(let v)? = _storage._o {
        return v
      }
      return 107
    }
    set {
      _uniqueStorage()._o = .oneofFixed64(newValue)
    }
  }

  var oneofSfixed32: Int32 {
    get {
      if case .oneofSfixed32(let v)? = _storage._o {
        return v
      }
      return 108
    }
    set {
      _uniqueStorage()._o = .oneofSfixed32(newValue)
    }
  }

  var oneofSfixed64: Int64 {
    get {
      if case .oneofSfixed64(let v)? = _storage._o {
        return v
      }
      return 109
    }
    set {
      _uniqueStorage()._o = .oneofSfixed64(newValue)
    }
  }

  var oneofFloat: Float {
    get {
      if case .oneofFloat(let v)? = _storage._o {
        return v
      }
      return 110
    }
    set {
      _uniqueStorage()._o = .oneofFloat(newValue)
    }
  }

  var oneofDouble: Double {
    get {
      if case .oneofDouble(let v)? = _storage._o {
        return v
      }
      return 111
    }
    set {
      _uniqueStorage()._o = .oneofDouble(newValue)
    }
  }

  var oneofBool: Bool {
    get {
      if case .oneofBool(let v)? = _storage._o {
        return v
      }
      return true
    }
    set {
      _uniqueStorage()._o = .oneofBool(newValue)
    }
  }

  var oneofString: String {
    get {
      if case .oneofString(let v)? = _storage._o {
        return v
      }
      return "string"
    }
    set {
      _uniqueStorage()._o = .oneofString(newValue)
    }
  }

  var oneofBytes: Data {
    get {
      if case .oneofBytes(let v)? = _storage._o {
        return v
      }
      return Data(bytes: [100, 97, 116, 97])
    }
    set {
      _uniqueStorage()._o = .oneofBytes(newValue)
    }
  }

  var oneofGroup: ProtobufUnittest_Message2.OneofGroup {
    get {
      if case .oneofGroup(let v)? = _storage._o {
        return v
      }
      return ProtobufUnittest_Message2.OneofGroup()
    }
    set {
      _uniqueStorage()._o = .oneofGroup(newValue)
    }
  }

  var oneofMessage: ProtobufUnittest_Message2 {
    get {
      if case .oneofMessage(let v)? = _storage._o {
        return v
      }
      return ProtobufUnittest_Message2()
    }
    set {
      _uniqueStorage()._o = .oneofMessage(newValue)
    }
  }

  var oneofEnum: ProtobufUnittest_Message2.Enum {
    get {
      if case .oneofEnum(let v)? = _storage._o {
        return v
      }
      return ProtobufUnittest_Message2.Enum.baz
    }
    set {
      _uniqueStorage()._o = .oneofEnum(newValue)
    }
  }

  ///   Some token map cases, too many combinations to list them all.
  var mapInt32Int32: Dictionary<Int32,Int32> {
    get {return _storage._mapInt32Int32}
    set {_uniqueStorage()._mapInt32Int32 = newValue}
  }

  var mapInt64Int64: Dictionary<Int64,Int64> {
    get {return _storage._mapInt64Int64}
    set {_uniqueStorage()._mapInt64Int64 = newValue}
  }

  var mapUint32Uint32: Dictionary<UInt32,UInt32> {
    get {return _storage._mapUint32Uint32}
    set {_uniqueStorage()._mapUint32Uint32 = newValue}
  }

  var mapUint64Uint64: Dictionary<UInt64,UInt64> {
    get {return _storage._mapUint64Uint64}
    set {_uniqueStorage()._mapUint64Uint64 = newValue}
  }

  var mapSint32Sint32: Dictionary<Int32,Int32> {
    get {return _storage._mapSint32Sint32}
    set {_uniqueStorage()._mapSint32Sint32 = newValue}
  }

  var mapSint64Sint64: Dictionary<Int64,Int64> {
    get {return _storage._mapSint64Sint64}
    set {_uniqueStorage()._mapSint64Sint64 = newValue}
  }

  var mapFixed32Fixed32: Dictionary<UInt32,UInt32> {
    get {return _storage._mapFixed32Fixed32}
    set {_uniqueStorage()._mapFixed32Fixed32 = newValue}
  }

  var mapFixed64Fixed64: Dictionary<UInt64,UInt64> {
    get {return _storage._mapFixed64Fixed64}
    set {_uniqueStorage()._mapFixed64Fixed64 = newValue}
  }

  var mapSfixed32Sfixed32: Dictionary<Int32,Int32> {
    get {return _storage._mapSfixed32Sfixed32}
    set {_uniqueStorage()._mapSfixed32Sfixed32 = newValue}
  }

  var mapSfixed64Sfixed64: Dictionary<Int64,Int64> {
    get {return _storage._mapSfixed64Sfixed64}
    set {_uniqueStorage()._mapSfixed64Sfixed64 = newValue}
  }

  var mapInt32Float: Dictionary<Int32,Float> {
    get {return _storage._mapInt32Float}
    set {_uniqueStorage()._mapInt32Float = newValue}
  }

  var mapInt32Double: Dictionary<Int32,Double> {
    get {return _storage._mapInt32Double}
    set {_uniqueStorage()._mapInt32Double = newValue}
  }

  var mapBoolBool: Dictionary<Bool,Bool> {
    get {return _storage._mapBoolBool}
    set {_uniqueStorage()._mapBoolBool = newValue}
  }

  var mapStringString: Dictionary<String,String> {
    get {return _storage._mapStringString}
    set {_uniqueStorage()._mapStringString = newValue}
  }

  var mapStringBytes: Dictionary<String,Data> {
    get {return _storage._mapStringBytes}
    set {_uniqueStorage()._mapStringBytes = newValue}
  }

  var mapStringMessage: Dictionary<String,ProtobufUnittest_Message2> {
    get {return _storage._mapStringMessage}
    set {_uniqueStorage()._mapStringMessage = newValue}
  }

  var mapInt32Bytes: Dictionary<Int32,Data> {
    get {return _storage._mapInt32Bytes}
    set {_uniqueStorage()._mapInt32Bytes = newValue}
  }

  var mapInt32Enum: Dictionary<Int32,ProtobufUnittest_Message2.Enum> {
    get {return _storage._mapInt32Enum}
    set {_uniqueStorage()._mapInt32Enum = newValue}
  }

  var mapInt32Message: Dictionary<Int32,ProtobufUnittest_Message2> {
    get {return _storage._mapInt32Message}
    set {_uniqueStorage()._mapInt32Message = newValue}
  }

  var o: OneOf_O? {
    get {return _storage._o}
    set {
      _uniqueStorage()._o = newValue
    }
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_O: Equatable {
    case oneofInt32(Int32)
    case oneofInt64(Int64)
    case oneofUint32(UInt32)
    case oneofUint64(UInt64)
    case oneofSint32(Int32)
    case oneofSint64(Int64)
    case oneofFixed32(UInt32)
    case oneofFixed64(UInt64)
    case oneofSfixed32(Int32)
    case oneofSfixed64(Int64)
    case oneofFloat(Float)
    case oneofDouble(Double)
    case oneofBool(Bool)
    case oneofString(String)
    case oneofBytes(Data)
    case oneofGroup(ProtobufUnittest_Message2.OneofGroup)
    case oneofMessage(ProtobufUnittest_Message2)
    case oneofEnum(ProtobufUnittest_Message2.Enum)

    static func ==(lhs: ProtobufUnittest_Message2.OneOf_O, rhs: ProtobufUnittest_Message2.OneOf_O) -> Bool {
      switch (lhs, rhs) {
      case (.oneofInt32(let l), .oneofInt32(let r)): return l == r
      case (.oneofInt64(let l), .oneofInt64(let r)): return l == r
      case (.oneofUint32(let l), .oneofUint32(let r)): return l == r
      case (.oneofUint64(let l), .oneofUint64(let r)): return l == r
      case (.oneofSint32(let l), .oneofSint32(let r)): return l == r
      case (.oneofSint64(let l), .oneofSint64(let r)): return l == r
      case (.oneofFixed32(let l), .oneofFixed32(let r)): return l == r
      case (.oneofFixed64(let l), .oneofFixed64(let r)): return l == r
      case (.oneofSfixed32(let l), .oneofSfixed32(let r)): return l == r
      case (.oneofSfixed64(let l), .oneofSfixed64(let r)): return l == r
      case (.oneofFloat(let l), .oneofFloat(let r)): return l == r
      case (.oneofDouble(let l), .oneofDouble(let r)): return l == r
      case (.oneofBool(let l), .oneofBool(let r)): return l == r
      case (.oneofString(let l), .oneofString(let r)): return l == r
      case (.oneofBytes(let l), .oneofBytes(let r)): return l == r
      case (.oneofGroup(let l), .oneofGroup(let r)): return l == r
      case (.oneofMessage(let l), .oneofMessage(let r)): return l == r
      case (.oneofEnum(let l), .oneofEnum(let r)): return l == r
      default: return false
      }
    }

    fileprivate init?<T: SwiftProtobuf.Decoder>(byDecodingFrom decoder: inout T, fieldNumber: Int) throws {
      switch fieldNumber {
      case 51:
        var value: Int32?
        try decoder.decodeSingularInt32Field(value: &value)
        if let value = value {
          self = .oneofInt32(value)
          return
        }
      case 52:
        var value: Int64?
        try decoder.decodeSingularInt64Field(value: &value)
        if let value = value {
          self = .oneofInt64(value)
          return
        }
      case 53:
        var value: UInt32?
        try decoder.decodeSingularUInt32Field(value: &value)
        if let value = value {
          self = .oneofUint32(value)
          return
        }
      case 54:
        var value: UInt64?
        try decoder.decodeSingularUInt64Field(value: &value)
        if let value = value {
          self = .oneofUint64(value)
          return
        }
      case 55:
        var value: Int32?
        try decoder.decodeSingularSInt32Field(value: &value)
        if let value = value {
          self = .oneofSint32(value)
          return
        }
      case 56:
        var value: Int64?
        try decoder.decodeSingularSInt64Field(value: &value)
        if let value = value {
          self = .oneofSint64(value)
          return
        }
      case 57:
        var value: UInt32?
        try decoder.decodeSingularFixed32Field(value: &value)
        if let value = value {
          self = .oneofFixed32(value)
          return
        }
      case 58:
        var value: UInt64?
        try decoder.decodeSingularFixed64Field(value: &value)
        if let value = value {
          self = .oneofFixed64(value)
          return
        }
      case 59:
        var value: Int32?
        try decoder.decodeSingularSFixed32Field(value: &value)
        if let value = value {
          self = .oneofSfixed32(value)
          return
        }
      case 60:
        var value: Int64?
        try decoder.decodeSingularSFixed64Field(value: &value)
        if let value = value {
          self = .oneofSfixed64(value)
          return
        }
      case 61:
        var value: Float?
        try decoder.decodeSingularFloatField(value: &value)
        if let value = value {
          self = .oneofFloat(value)
          return
        }
      case 62:
        var value: Double?
        try decoder.decodeSingularDoubleField(value: &value)
        if let value = value {
          self = .oneofDouble(value)
          return
        }
      case 63:
        var value: Bool?
        try decoder.decodeSingularBoolField(value: &value)
        if let value = value {
          self = .oneofBool(value)
          return
        }
      case 64:
        var value: String?
        try decoder.decodeSingularStringField(value: &value)
        if let value = value {
          self = .oneofString(value)
          return
        }
      case 65:
        var value: Data?
        try decoder.decodeSingularBytesField(value: &value)
        if let value = value {
          self = .oneofBytes(value)
          return
        }
      case 66:
        var value: ProtobufUnittest_Message2.OneofGroup?
        try decoder.decodeSingularGroupField(value: &value)
        if let value = value {
          self = .oneofGroup(value)
          return
        }
      case 68:
        var value: ProtobufUnittest_Message2?
        try decoder.decodeSingularMessageField(value: &value)
        if let value = value {
          self = .oneofMessage(value)
          return
        }
      case 69:
        var value: ProtobufUnittest_Message2.Enum?
        try decoder.decodeSingularEnumField(value: &value)
        if let value = value {
          self = .oneofEnum(value)
          return
        }
      default:
        break
      }
      return nil
    }

    fileprivate func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V, start: Int, end: Int) throws {
      switch self {
      case .oneofInt32(let v):
        if start <= 51 && 51 < end {
          try visitor.visitSingularInt32Field(value: v, fieldNumber: 51)
        }
      case .oneofInt64(let v):
        if start <= 52 && 52 < end {
          try visitor.visitSingularInt64Field(value: v, fieldNumber: 52)
        }
      case .oneofUint32(let v):
        if start <= 53 && 53 < end {
          try visitor.visitSingularUInt32Field(value: v, fieldNumber: 53)
        }
      case .oneofUint64(let v):
        if start <= 54 && 54 < end {
          try visitor.visitSingularUInt64Field(value: v, fieldNumber: 54)
        }
      case .oneofSint32(let v):
        if start <= 55 && 55 < end {
          try visitor.visitSingularSInt32Field(value: v, fieldNumber: 55)
        }
      case .oneofSint64(let v):
        if start <= 56 && 56 < end {
          try visitor.visitSingularSInt64Field(value: v, fieldNumber: 56)
        }
      case .oneofFixed32(let v):
        if start <= 57 && 57 < end {
          try visitor.visitSingularFixed32Field(value: v, fieldNumber: 57)
        }
      case .oneofFixed64(let v):
        if start <= 58 && 58 < end {
          try visitor.visitSingularFixed64Field(value: v, fieldNumber: 58)
        }
      case .oneofSfixed32(let v):
        if start <= 59 && 59 < end {
          try visitor.visitSingularSFixed32Field(value: v, fieldNumber: 59)
        }
      case .oneofSfixed64(let v):
        if start <= 60 && 60 < end {
          try visitor.visitSingularSFixed64Field(value: v, fieldNumber: 60)
        }
      case .oneofFloat(let v):
        if start <= 61 && 61 < end {
          try visitor.visitSingularFloatField(value: v, fieldNumber: 61)
        }
      case .oneofDouble(let v):
        if start <= 62 && 62 < end {
          try visitor.visitSingularDoubleField(value: v, fieldNumber: 62)
        }
      case .oneofBool(let v):
        if start <= 63 && 63 < end {
          try visitor.visitSingularBoolField(value: v, fieldNumber: 63)
        }
      case .oneofString(let v):
        if start <= 64 && 64 < end {
          try visitor.visitSingularStringField(value: v, fieldNumber: 64)
        }
      case .oneofBytes(let v):
        if start <= 65 && 65 < end {
          try visitor.visitSingularBytesField(value: v, fieldNumber: 65)
        }
      case .oneofGroup(let v):
        if start <= 66 && 66 < end {
          try visitor.visitSingularGroupField(value: v, fieldNumber: 66)
        }
      case .oneofMessage(let v):
        if start <= 68 && 68 < end {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 68)
        }
      case .oneofEnum(let v):
        if start <= 69 && 69 < end {
          try visitor.visitSingularEnumField(value: v, fieldNumber: 69)
        }
      }
    }
  }

  enum Enum: SwiftProtobuf.Enum, SwiftProtobuf._ProtoNameProviding {
    typealias RawValue = Int
    case foo // = 0
    case bar // = 1
    case baz // = 2
    case extra2 // = 20

    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
      0: .same(proto: "FOO"),
      1: .same(proto: "BAR"),
      2: .same(proto: "BAZ"),
      20: .same(proto: "EXTRA_2"),
    ]

    init() {
      self = .foo
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .foo
      case 1: self = .bar
      case 2: self = .baz
      case 20: self = .extra2
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .foo: return 0
      case .bar: return 1
      case .baz: return 2
      case .extra2: return 20
      }
    }

  }

  struct OptionalGroup: SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = "OptionalGroup"
    static let protoPackageName: String = "protobuf_unittest"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
      17: .same(proto: "a"),
    ]

    private var _a: Int32? = nil
    var a: Int32 {
      get {return _a ?? 0}
      set {_a = newValue}
    }
    var hasA: Bool {
      return _a != nil
    }
    mutating func clearA() {
      return _a = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func _protobuf_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
      }
    }

    mutating func _protobuf_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
      switch fieldNumber {
      case 17: try decoder.decodeSingularInt32Field(value: &_a)
      default: break
      }
    }

    func _protobuf_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = _a {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 17)
      }
      try unknownFields.traverse(visitor: &visitor)
    }

    func _protobuf_generated_isEqualTo(other: ProtobufUnittest_Message2.OptionalGroup) -> Bool {
      if _a != other._a {return false}
      if unknownFields != other.unknownFields {return false}
      return true
    }
  }

  struct RepeatedGroup: SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = "RepeatedGroup"
    static let protoPackageName: String = "protobuf_unittest"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
      47: .same(proto: "a"),
    ]

    private var _a: Int32? = nil
    var a: Int32 {
      get {return _a ?? 0}
      set {_a = newValue}
    }
    var hasA: Bool {
      return _a != nil
    }
    mutating func clearA() {
      return _a = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func _protobuf_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
      }
    }

    mutating func _protobuf_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
      switch fieldNumber {
      case 47: try decoder.decodeSingularInt32Field(value: &_a)
      default: break
      }
    }

    func _protobuf_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = _a {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 47)
      }
      try unknownFields.traverse(visitor: &visitor)
    }

    func _protobuf_generated_isEqualTo(other: ProtobufUnittest_Message2.RepeatedGroup) -> Bool {
      if _a != other._a {return false}
      if unknownFields != other.unknownFields {return false}
      return true
    }
  }

  struct OneofGroup: SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = "OneofGroup"
    static let protoPackageName: String = "protobuf_unittest"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
      67: .same(proto: "a"),
      167: .same(proto: "b"),
    ]

    private var _a: Int32? = nil
    var a: Int32 {
      get {return _a ?? 116}
      set {_a = newValue}
    }
    var hasA: Bool {
      return _a != nil
    }
    mutating func clearA() {
      return _a = nil
    }

    private var _b: Int32? = nil
    var b: Int32 {
      get {return _b ?? 0}
      set {_b = newValue}
    }
    var hasB: Bool {
      return _b != nil
    }
    mutating func clearB() {
      return _b = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func _protobuf_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
      }
    }

    mutating func _protobuf_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
      switch fieldNumber {
      case 67: try decoder.decodeSingularInt32Field(value: &_a)
      case 167: try decoder.decodeSingularInt32Field(value: &_b)
      default: break
      }
    }

    func _protobuf_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = _a {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 67)
      }
      if let v = _b {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 167)
      }
      try unknownFields.traverse(visitor: &visitor)
    }

    func _protobuf_generated_isEqualTo(other: ProtobufUnittest_Message2.OneofGroup) -> Bool {
      if _a != other._a {return false}
      if _b != other._b {return false}
      if unknownFields != other.unknownFields {return false}
      return true
    }
  }

  init() {}

  mutating func _protobuf_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
      }
    }
  }

  mutating func _protobuf_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 1: try decoder.decodeSingularInt32Field(value: &_storage._optionalInt32)
    case 2: try decoder.decodeSingularInt64Field(value: &_storage._optionalInt64)
    case 3: try decoder.decodeSingularUInt32Field(value: &_storage._optionalUint32)
    case 4: try decoder.decodeSingularUInt64Field(value: &_storage._optionalUint64)
    case 5: try decoder.decodeSingularSInt32Field(value: &_storage._optionalSint32)
    case 6: try decoder.decodeSingularSInt64Field(value: &_storage._optionalSint64)
    case 7: try decoder.decodeSingularFixed32Field(value: &_storage._optionalFixed32)
    case 8: try decoder.decodeSingularFixed64Field(value: &_storage._optionalFixed64)
    case 9: try decoder.decodeSingularSFixed32Field(value: &_storage._optionalSfixed32)
    case 10: try decoder.decodeSingularSFixed64Field(value: &_storage._optionalSfixed64)
    case 11: try decoder.decodeSingularFloatField(value: &_storage._optionalFloat)
    case 12: try decoder.decodeSingularDoubleField(value: &_storage._optionalDouble)
    case 13: try decoder.decodeSingularBoolField(value: &_storage._optionalBool)
    case 14: try decoder.decodeSingularStringField(value: &_storage._optionalString)
    case 15: try decoder.decodeSingularBytesField(value: &_storage._optionalBytes)
    case 16: try decoder.decodeSingularGroupField(value: &_storage._optionalGroup)
    case 18: try decoder.decodeSingularMessageField(value: &_storage._optionalMessage)
    case 19: try decoder.decodeSingularEnumField(value: &_storage._optionalEnum)
    case 31: try decoder.decodeRepeatedInt32Field(value: &_storage._repeatedInt32)
    case 32: try decoder.decodeRepeatedInt64Field(value: &_storage._repeatedInt64)
    case 33: try decoder.decodeRepeatedUInt32Field(value: &_storage._repeatedUint32)
    case 34: try decoder.decodeRepeatedUInt64Field(value: &_storage._repeatedUint64)
    case 35: try decoder.decodeRepeatedSInt32Field(value: &_storage._repeatedSint32)
    case 36: try decoder.decodeRepeatedSInt64Field(value: &_storage._repeatedSint64)
    case 37: try decoder.decodeRepeatedFixed32Field(value: &_storage._repeatedFixed32)
    case 38: try decoder.decodeRepeatedFixed64Field(value: &_storage._repeatedFixed64)
    case 39: try decoder.decodeRepeatedSFixed32Field(value: &_storage._repeatedSfixed32)
    case 40: try decoder.decodeRepeatedSFixed64Field(value: &_storage._repeatedSfixed64)
    case 41: try decoder.decodeRepeatedFloatField(value: &_storage._repeatedFloat)
    case 42: try decoder.decodeRepeatedDoubleField(value: &_storage._repeatedDouble)
    case 43: try decoder.decodeRepeatedBoolField(value: &_storage._repeatedBool)
    case 44: try decoder.decodeRepeatedStringField(value: &_storage._repeatedString)
    case 45: try decoder.decodeRepeatedBytesField(value: &_storage._repeatedBytes)
    case 46: try decoder.decodeRepeatedGroupField(value: &_storage._repeatedGroup)
    case 48: try decoder.decodeRepeatedMessageField(value: &_storage._repeatedMessage)
    case 49: try decoder.decodeRepeatedEnumField(value: &_storage._repeatedEnum)
    case 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69:
      if _storage._o != nil {
        try decoder.handleConflictingOneOf()
      }
      _storage._o = try ProtobufUnittest_Message2.OneOf_O(byDecodingFrom: &decoder, fieldNumber: fieldNumber)
    case 70: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt32,SwiftProtobuf.ProtobufInt32>.self, value: &_storage._mapInt32Int32)
    case 71: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt64,SwiftProtobuf.ProtobufInt64>.self, value: &_storage._mapInt64Int64)
    case 72: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufUInt32,SwiftProtobuf.ProtobufUInt32>.self, value: &_storage._mapUint32Uint32)
    case 73: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufUInt64,SwiftProtobuf.ProtobufUInt64>.self, value: &_storage._mapUint64Uint64)
    case 74: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSInt32,SwiftProtobuf.ProtobufSInt32>.self, value: &_storage._mapSint32Sint32)
    case 75: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSInt64,SwiftProtobuf.ProtobufSInt64>.self, value: &_storage._mapSint64Sint64)
    case 76: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufFixed32,SwiftProtobuf.ProtobufFixed32>.self, value: &_storage._mapFixed32Fixed32)
    case 77: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufFixed64,SwiftProtobuf.ProtobufFixed64>.self, value: &_storage._mapFixed64Fixed64)
    case 78: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSFixed32,SwiftProtobuf.ProtobufSFixed32>.self, value: &_storage._mapSfixed32Sfixed32)
    case 79: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSFixed64,SwiftProtobuf.ProtobufSFixed64>.self, value: &_storage._mapSfixed64Sfixed64)
    case 80: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt32,SwiftProtobuf.ProtobufFloat>.self, value: &_storage._mapInt32Float)
    case 81: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt32,SwiftProtobuf.ProtobufDouble>.self, value: &_storage._mapInt32Double)
    case 82: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufBool,SwiftProtobuf.ProtobufBool>.self, value: &_storage._mapBoolBool)
    case 83: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &_storage._mapStringString)
    case 84: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufBytes>.self, value: &_storage._mapStringBytes)
    case 85: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,ProtobufUnittest_Message2>.self, value: &_storage._mapStringMessage)
    case 86: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt32,SwiftProtobuf.ProtobufBytes>.self, value: &_storage._mapInt32Bytes)
    case 87: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufEnumMap<SwiftProtobuf.ProtobufInt32,ProtobufUnittest_Message2.Enum>.self, value: &_storage._mapInt32Enum)
    case 88: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufInt32,ProtobufUnittest_Message2>.self, value: &_storage._mapInt32Message)
    default: break
    }
  }

  func _protobuf_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._optionalInt32 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      if let v = _storage._optionalInt64 {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 2)
      }
      if let v = _storage._optionalUint32 {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
      }
      if let v = _storage._optionalUint64 {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 4)
      }
      if let v = _storage._optionalSint32 {
        try visitor.visitSingularSInt32Field(value: v, fieldNumber: 5)
      }
      if let v = _storage._optionalSint64 {
        try visitor.visitSingularSInt64Field(value: v, fieldNumber: 6)
      }
      if let v = _storage._optionalFixed32 {
        try visitor.visitSingularFixed32Field(value: v, fieldNumber: 7)
      }
      if let v = _storage._optionalFixed64 {
        try visitor.visitSingularFixed64Field(value: v, fieldNumber: 8)
      }
      if let v = _storage._optionalSfixed32 {
        try visitor.visitSingularSFixed32Field(value: v, fieldNumber: 9)
      }
      if let v = _storage._optionalSfixed64 {
        try visitor.visitSingularSFixed64Field(value: v, fieldNumber: 10)
      }
      if let v = _storage._optionalFloat {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 11)
      }
      if let v = _storage._optionalDouble {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 12)
      }
      if let v = _storage._optionalBool {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 13)
      }
      if let v = _storage._optionalString {
        try visitor.visitSingularStringField(value: v, fieldNumber: 14)
      }
      if let v = _storage._optionalBytes {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 15)
      }
      if let v = _storage._optionalGroup {
        try visitor.visitSingularGroupField(value: v, fieldNumber: 16)
      }
      if let v = _storage._optionalMessage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
      }
      if let v = _storage._optionalEnum {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 19)
      }
      if !_storage._repeatedInt32.isEmpty {
        try visitor.visitRepeatedInt32Field(value: _storage._repeatedInt32, fieldNumber: 31)
      }
      if !_storage._repeatedInt64.isEmpty {
        try visitor.visitRepeatedInt64Field(value: _storage._repeatedInt64, fieldNumber: 32)
      }
      if !_storage._repeatedUint32.isEmpty {
        try visitor.visitRepeatedUInt32Field(value: _storage._repeatedUint32, fieldNumber: 33)
      }
      if !_storage._repeatedUint64.isEmpty {
        try visitor.visitRepeatedUInt64Field(value: _storage._repeatedUint64, fieldNumber: 34)
      }
      if !_storage._repeatedSint32.isEmpty {
        try visitor.visitRepeatedSInt32Field(value: _storage._repeatedSint32, fieldNumber: 35)
      }
      if !_storage._repeatedSint64.isEmpty {
        try visitor.visitRepeatedSInt64Field(value: _storage._repeatedSint64, fieldNumber: 36)
      }
      if !_storage._repeatedFixed32.isEmpty {
        try visitor.visitRepeatedFixed32Field(value: _storage._repeatedFixed32, fieldNumber: 37)
      }
      if !_storage._repeatedFixed64.isEmpty {
        try visitor.visitRepeatedFixed64Field(value: _storage._repeatedFixed64, fieldNumber: 38)
      }
      if !_storage._repeatedSfixed32.isEmpty {
        try visitor.visitRepeatedSFixed32Field(value: _storage._repeatedSfixed32, fieldNumber: 39)
      }
      if !_storage._repeatedSfixed64.isEmpty {
        try visitor.visitRepeatedSFixed64Field(value: _storage._repeatedSfixed64, fieldNumber: 40)
      }
      if !_storage._repeatedFloat.isEmpty {
        try visitor.visitRepeatedFloatField(value: _storage._repeatedFloat, fieldNumber: 41)
      }
      if !_storage._repeatedDouble.isEmpty {
        try visitor.visitRepeatedDoubleField(value: _storage._repeatedDouble, fieldNumber: 42)
      }
      if !_storage._repeatedBool.isEmpty {
        try visitor.visitRepeatedBoolField(value: _storage._repeatedBool, fieldNumber: 43)
      }
      if !_storage._repeatedString.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._repeatedString, fieldNumber: 44)
      }
      if !_storage._repeatedBytes.isEmpty {
        try visitor.visitRepeatedBytesField(value: _storage._repeatedBytes, fieldNumber: 45)
      }
      if !_storage._repeatedGroup.isEmpty {
        try visitor.visitRepeatedGroupField(value: _storage._repeatedGroup, fieldNumber: 46)
      }
      if !_storage._repeatedMessage.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._repeatedMessage, fieldNumber: 48)
      }
      if !_storage._repeatedEnum.isEmpty {
        try visitor.visitRepeatedEnumField(value: _storage._repeatedEnum, fieldNumber: 49)
      }
      try _storage._o?.traverse(visitor: &visitor, start: 51, end: 70)
      if !_storage._mapInt32Int32.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt32,SwiftProtobuf.ProtobufInt32>.self, value: _storage._mapInt32Int32, fieldNumber: 70)
      }
      if !_storage._mapInt64Int64.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt64,SwiftProtobuf.ProtobufInt64>.self, value: _storage._mapInt64Int64, fieldNumber: 71)
      }
      if !_storage._mapUint32Uint32.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufUInt32,SwiftProtobuf.ProtobufUInt32>.self, value: _storage._mapUint32Uint32, fieldNumber: 72)
      }
      if !_storage._mapUint64Uint64.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufUInt64,SwiftProtobuf.ProtobufUInt64>.self, value: _storage._mapUint64Uint64, fieldNumber: 73)
      }
      if !_storage._mapSint32Sint32.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSInt32,SwiftProtobuf.ProtobufSInt32>.self, value: _storage._mapSint32Sint32, fieldNumber: 74)
      }
      if !_storage._mapSint64Sint64.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSInt64,SwiftProtobuf.ProtobufSInt64>.self, value: _storage._mapSint64Sint64, fieldNumber: 75)
      }
      if !_storage._mapFixed32Fixed32.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufFixed32,SwiftProtobuf.ProtobufFixed32>.self, value: _storage._mapFixed32Fixed32, fieldNumber: 76)
      }
      if !_storage._mapFixed64Fixed64.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufFixed64,SwiftProtobuf.ProtobufFixed64>.self, value: _storage._mapFixed64Fixed64, fieldNumber: 77)
      }
      if !_storage._mapSfixed32Sfixed32.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSFixed32,SwiftProtobuf.ProtobufSFixed32>.self, value: _storage._mapSfixed32Sfixed32, fieldNumber: 78)
      }
      if !_storage._mapSfixed64Sfixed64.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufSFixed64,SwiftProtobuf.ProtobufSFixed64>.self, value: _storage._mapSfixed64Sfixed64, fieldNumber: 79)
      }
      if !_storage._mapInt32Float.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt32,SwiftProtobuf.ProtobufFloat>.self, value: _storage._mapInt32Float, fieldNumber: 80)
      }
      if !_storage._mapInt32Double.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt32,SwiftProtobuf.ProtobufDouble>.self, value: _storage._mapInt32Double, fieldNumber: 81)
      }
      if !_storage._mapBoolBool.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufBool,SwiftProtobuf.ProtobufBool>.self, value: _storage._mapBoolBool, fieldNumber: 82)
      }
      if !_storage._mapStringString.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: _storage._mapStringString, fieldNumber: 83)
      }
      if !_storage._mapStringBytes.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufBytes>.self, value: _storage._mapStringBytes, fieldNumber: 84)
      }
      if !_storage._mapStringMessage.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,ProtobufUnittest_Message2>.self, value: _storage._mapStringMessage, fieldNumber: 85)
      }
      if !_storage._mapInt32Bytes.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt32,SwiftProtobuf.ProtobufBytes>.self, value: _storage._mapInt32Bytes, fieldNumber: 86)
      }
      if !_storage._mapInt32Enum.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufEnumMap<SwiftProtobuf.ProtobufInt32,ProtobufUnittest_Message2.Enum>.self, value: _storage._mapInt32Enum, fieldNumber: 87)
      }
      if !_storage._mapInt32Message.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufInt32,ProtobufUnittest_Message2>.self, value: _storage._mapInt32Message, fieldNumber: 88)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  func _protobuf_generated_isEqualTo(other: ProtobufUnittest_Message2) -> Bool {
    return withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
      if _storage !== other_storage {
        if _storage._optionalInt32 != other_storage._optionalInt32 {return false}
        if _storage._optionalInt64 != other_storage._optionalInt64 {return false}
        if _storage._optionalUint32 != other_storage._optionalUint32 {return false}
        if _storage._optionalUint64 != other_storage._optionalUint64 {return false}
        if _storage._optionalSint32 != other_storage._optionalSint32 {return false}
        if _storage._optionalSint64 != other_storage._optionalSint64 {return false}
        if _storage._optionalFixed32 != other_storage._optionalFixed32 {return false}
        if _storage._optionalFixed64 != other_storage._optionalFixed64 {return false}
        if _storage._optionalSfixed32 != other_storage._optionalSfixed32 {return false}
        if _storage._optionalSfixed64 != other_storage._optionalSfixed64 {return false}
        if _storage._optionalFloat != other_storage._optionalFloat {return false}
        if _storage._optionalDouble != other_storage._optionalDouble {return false}
        if _storage._optionalBool != other_storage._optionalBool {return false}
        if _storage._optionalString != other_storage._optionalString {return false}
        if _storage._optionalBytes != other_storage._optionalBytes {return false}
        if _storage._optionalGroup != other_storage._optionalGroup {return false}
        if _storage._optionalMessage != other_storage._optionalMessage {return false}
        if _storage._optionalEnum != other_storage._optionalEnum {return false}
        if _storage._repeatedInt32 != other_storage._repeatedInt32 {return false}
        if _storage._repeatedInt64 != other_storage._repeatedInt64 {return false}
        if _storage._repeatedUint32 != other_storage._repeatedUint32 {return false}
        if _storage._repeatedUint64 != other_storage._repeatedUint64 {return false}
        if _storage._repeatedSint32 != other_storage._repeatedSint32 {return false}
        if _storage._repeatedSint64 != other_storage._repeatedSint64 {return false}
        if _storage._repeatedFixed32 != other_storage._repeatedFixed32 {return false}
        if _storage._repeatedFixed64 != other_storage._repeatedFixed64 {return false}
        if _storage._repeatedSfixed32 != other_storage._repeatedSfixed32 {return false}
        if _storage._repeatedSfixed64 != other_storage._repeatedSfixed64 {return false}
        if _storage._repeatedFloat != other_storage._repeatedFloat {return false}
        if _storage._repeatedDouble != other_storage._repeatedDouble {return false}
        if _storage._repeatedBool != other_storage._repeatedBool {return false}
        if _storage._repeatedString != other_storage._repeatedString {return false}
        if _storage._repeatedBytes != other_storage._repeatedBytes {return false}
        if _storage._repeatedGroup != other_storage._repeatedGroup {return false}
        if _storage._repeatedMessage != other_storage._repeatedMessage {return false}
        if _storage._repeatedEnum != other_storage._repeatedEnum {return false}
        if _storage._o != other_storage._o {return false}
        if _storage._mapInt32Int32 != other_storage._mapInt32Int32 {return false}
        if _storage._mapInt64Int64 != other_storage._mapInt64Int64 {return false}
        if _storage._mapUint32Uint32 != other_storage._mapUint32Uint32 {return false}
        if _storage._mapUint64Uint64 != other_storage._mapUint64Uint64 {return false}
        if _storage._mapSint32Sint32 != other_storage._mapSint32Sint32 {return false}
        if _storage._mapSint64Sint64 != other_storage._mapSint64Sint64 {return false}
        if _storage._mapFixed32Fixed32 != other_storage._mapFixed32Fixed32 {return false}
        if _storage._mapFixed64Fixed64 != other_storage._mapFixed64Fixed64 {return false}
        if _storage._mapSfixed32Sfixed32 != other_storage._mapSfixed32Sfixed32 {return false}
        if _storage._mapSfixed64Sfixed64 != other_storage._mapSfixed64Sfixed64 {return false}
        if _storage._mapInt32Float != other_storage._mapInt32Float {return false}
        if _storage._mapInt32Double != other_storage._mapInt32Double {return false}
        if _storage._mapBoolBool != other_storage._mapBoolBool {return false}
        if _storage._mapStringString != other_storage._mapStringString {return false}
        if _storage._mapStringBytes != other_storage._mapStringBytes {return false}
        if _storage._mapStringMessage != other_storage._mapStringMessage {return false}
        if _storage._mapInt32Bytes != other_storage._mapInt32Bytes {return false}
        if _storage._mapInt32Enum != other_storage._mapInt32Enum {return false}
        if _storage._mapInt32Message != other_storage._mapInt32Message {return false}
      }
      if unknownFields != other.unknownFields {return false}
      return true
    }
  }
}
