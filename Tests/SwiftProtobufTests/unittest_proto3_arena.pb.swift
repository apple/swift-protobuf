/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: google/protobuf/unittest_proto3_arena.proto
 *
 */

//  Protocol Buffers - Google's data interchange format
//  Copyright 2008 Google Inc.  All rights reserved.
//  https://developers.google.com/protocol-buffers/
// 
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are
//  met:
// 
//      * Redistributions of source code must retain the above copyright
//  notice, this list of conditions and the following disclaimer.
//      * Redistributions in binary form must reproduce the above
//  copyright notice, this list of conditions and the following disclaimer
//  in the documentation and/or other materials provided with the
//  distribution.
//      * Neither the name of Google Inc. nor the names of its
//  contributors may be used to endorse or promote products derived from
//  this software without specific prior written permission.
// 
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
//  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
//  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
//  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
//  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
//  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
//  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _1: SwiftProtobuf.ProtobufAPIVersion_1 {}
  typealias Version = _1
}

enum Proto3ArenaUnittest_ForeignEnum: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case foreignZero // = 0
  case foreignFoo // = 4
  case foreignBar // = 5
  case foreignBaz // = 6
  case UNRECOGNIZED(Int)

  init() {
    self = .foreignZero
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .foreignZero
    case 4: self = .foreignFoo
    case 5: self = .foreignBar
    case 6: self = .foreignBaz
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  init?(jsonName: String) {
    switch jsonName {
    case "FOREIGN_ZERO": self = .foreignZero
    case "FOREIGN_FOO": self = .foreignFoo
    case "FOREIGN_BAR": self = .foreignBar
    case "FOREIGN_BAZ": self = .foreignBaz
    default: return nil
    }
  }

  init?(protoName: String) {
    switch protoName {
    case "FOREIGN_ZERO": self = .foreignZero
    case "FOREIGN_FOO": self = .foreignFoo
    case "FOREIGN_BAR": self = .foreignBar
    case "FOREIGN_BAZ": self = .foreignBaz
    default: return nil
    }
  }

  var rawValue: Int {
    get {
      switch self {
      case .foreignZero: return 0
      case .foreignFoo: return 4
      case .foreignBar: return 5
      case .foreignBaz: return 6
      case .UNRECOGNIZED(let i): return i
      }
    }
  }

  var _protobuf_jsonName: String? {
    get {
      switch self {
      case .foreignZero: return "FOREIGN_ZERO"
      case .foreignFoo: return "FOREIGN_FOO"
      case .foreignBar: return "FOREIGN_BAR"
      case .foreignBaz: return "FOREIGN_BAZ"
      case .UNRECOGNIZED: return nil
      }
    }
  }

}

///   This proto includes every type of field in both singular and repeated
///   forms.
struct Proto3ArenaUnittest_TestAllTypes: SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "TestAllTypes"
  static let protoPackageName: String = "proto3_arena_unittest"
  static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "optional_int32", json: "optionalInt32"),
    2: .unique(proto: "optional_int64", json: "optionalInt64"),
    3: .unique(proto: "optional_uint32", json: "optionalUint32"),
    4: .unique(proto: "optional_uint64", json: "optionalUint64"),
    5: .unique(proto: "optional_sint32", json: "optionalSint32"),
    6: .unique(proto: "optional_sint64", json: "optionalSint64"),
    7: .unique(proto: "optional_fixed32", json: "optionalFixed32"),
    8: .unique(proto: "optional_fixed64", json: "optionalFixed64"),
    9: .unique(proto: "optional_sfixed32", json: "optionalSfixed32"),
    10: .unique(proto: "optional_sfixed64", json: "optionalSfixed64"),
    11: .unique(proto: "optional_float", json: "optionalFloat"),
    12: .unique(proto: "optional_double", json: "optionalDouble"),
    13: .unique(proto: "optional_bool", json: "optionalBool"),
    14: .unique(proto: "optional_string", json: "optionalString"),
    15: .unique(proto: "optional_bytes", json: "optionalBytes"),
    18: .unique(proto: "optional_nested_message", json: "optionalNestedMessage"),
    19: .unique(proto: "optional_foreign_message", json: "optionalForeignMessage"),
    20: .unique(proto: "optional_import_message", json: "optionalImportMessage"),
    21: .unique(proto: "optional_nested_enum", json: "optionalNestedEnum"),
    22: .unique(proto: "optional_foreign_enum", json: "optionalForeignEnum"),
    24: .unique(proto: "optional_string_piece", json: "optionalStringPiece"),
    25: .unique(proto: "optional_cord", json: "optionalCord"),
    26: .unique(proto: "optional_public_import_message", json: "optionalPublicImportMessage"),
    27: .unique(proto: "optional_lazy_message", json: "optionalLazyMessage"),
    31: .unique(proto: "repeated_int32", json: "repeatedInt32"),
    32: .unique(proto: "repeated_int64", json: "repeatedInt64"),
    33: .unique(proto: "repeated_uint32", json: "repeatedUint32"),
    34: .unique(proto: "repeated_uint64", json: "repeatedUint64"),
    35: .unique(proto: "repeated_sint32", json: "repeatedSint32"),
    36: .unique(proto: "repeated_sint64", json: "repeatedSint64"),
    37: .unique(proto: "repeated_fixed32", json: "repeatedFixed32"),
    38: .unique(proto: "repeated_fixed64", json: "repeatedFixed64"),
    39: .unique(proto: "repeated_sfixed32", json: "repeatedSfixed32"),
    40: .unique(proto: "repeated_sfixed64", json: "repeatedSfixed64"),
    41: .unique(proto: "repeated_float", json: "repeatedFloat"),
    42: .unique(proto: "repeated_double", json: "repeatedDouble"),
    43: .unique(proto: "repeated_bool", json: "repeatedBool"),
    44: .unique(proto: "repeated_string", json: "repeatedString"),
    45: .unique(proto: "repeated_bytes", json: "repeatedBytes"),
    48: .unique(proto: "repeated_nested_message", json: "repeatedNestedMessage"),
    49: .unique(proto: "repeated_foreign_message", json: "repeatedForeignMessage"),
    50: .unique(proto: "repeated_import_message", json: "repeatedImportMessage"),
    51: .unique(proto: "repeated_nested_enum", json: "repeatedNestedEnum"),
    52: .unique(proto: "repeated_foreign_enum", json: "repeatedForeignEnum"),
    54: .unique(proto: "repeated_string_piece", json: "repeatedStringPiece"),
    55: .unique(proto: "repeated_cord", json: "repeatedCord"),
    57: .unique(proto: "repeated_lazy_message", json: "repeatedLazyMessage"),
    111: .unique(proto: "oneof_uint32", json: "oneofUint32"),
    112: .unique(proto: "oneof_nested_message", json: "oneofNestedMessage"),
    113: .unique(proto: "oneof_string", json: "oneofString"),
    114: .unique(proto: "oneof_bytes", json: "oneofBytes"),
  ]

  private class _StorageClass {
    var _optionalInt32: Int32 = 0
    var _optionalInt64: Int64 = 0
    var _optionalUint32: UInt32 = 0
    var _optionalUint64: UInt64 = 0
    var _optionalSint32: Int32 = 0
    var _optionalSint64: Int64 = 0
    var _optionalFixed32: UInt32 = 0
    var _optionalFixed64: UInt64 = 0
    var _optionalSfixed32: Int32 = 0
    var _optionalSfixed64: Int64 = 0
    var _optionalFloat: Float = 0
    var _optionalDouble: Double = 0
    var _optionalBool: Bool = false
    var _optionalString: String = ""
    var _optionalBytes: Data = Data()
    var _optionalNestedMessage: Proto3ArenaUnittest_TestAllTypes.NestedMessage? = nil
    var _optionalForeignMessage: Proto3ArenaUnittest_ForeignMessage? = nil
    var _optionalImportMessage: ProtobufUnittestImport_ImportMessage? = nil
    var _optionalNestedEnum: Proto3ArenaUnittest_TestAllTypes.NestedEnum = Proto3ArenaUnittest_TestAllTypes.NestedEnum.zero
    var _optionalForeignEnum: Proto3ArenaUnittest_ForeignEnum = Proto3ArenaUnittest_ForeignEnum.foreignZero
    var _optionalStringPiece: String = ""
    var _optionalCord: String = ""
    var _optionalPublicImportMessage: ProtobufUnittestImport_PublicImportMessage? = nil
    var _optionalLazyMessage: Proto3ArenaUnittest_TestAllTypes.NestedMessage? = nil
    var _repeatedInt32: [Int32] = []
    var _repeatedInt64: [Int64] = []
    var _repeatedUint32: [UInt32] = []
    var _repeatedUint64: [UInt64] = []
    var _repeatedSint32: [Int32] = []
    var _repeatedSint64: [Int64] = []
    var _repeatedFixed32: [UInt32] = []
    var _repeatedFixed64: [UInt64] = []
    var _repeatedSfixed32: [Int32] = []
    var _repeatedSfixed64: [Int64] = []
    var _repeatedFloat: [Float] = []
    var _repeatedDouble: [Double] = []
    var _repeatedBool: [Bool] = []
    var _repeatedString: [String] = []
    var _repeatedBytes: [Data] = []
    var _repeatedNestedMessage: [Proto3ArenaUnittest_TestAllTypes.NestedMessage] = []
    var _repeatedForeignMessage: [Proto3ArenaUnittest_ForeignMessage] = []
    var _repeatedImportMessage: [ProtobufUnittestImport_ImportMessage] = []
    var _repeatedNestedEnum: [Proto3ArenaUnittest_TestAllTypes.NestedEnum] = []
    var _repeatedForeignEnum: [Proto3ArenaUnittest_ForeignEnum] = []
    var _repeatedStringPiece: [String] = []
    var _repeatedCord: [String] = []
    var _repeatedLazyMessage: [Proto3ArenaUnittest_TestAllTypes.NestedMessage] = []
    var _oneofField: Proto3ArenaUnittest_TestAllTypes.OneOf_OneofField?

    init() {}

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._optionalInt32 = _optionalInt32
      clone._optionalInt64 = _optionalInt64
      clone._optionalUint32 = _optionalUint32
      clone._optionalUint64 = _optionalUint64
      clone._optionalSint32 = _optionalSint32
      clone._optionalSint64 = _optionalSint64
      clone._optionalFixed32 = _optionalFixed32
      clone._optionalFixed64 = _optionalFixed64
      clone._optionalSfixed32 = _optionalSfixed32
      clone._optionalSfixed64 = _optionalSfixed64
      clone._optionalFloat = _optionalFloat
      clone._optionalDouble = _optionalDouble
      clone._optionalBool = _optionalBool
      clone._optionalString = _optionalString
      clone._optionalBytes = _optionalBytes
      clone._optionalNestedMessage = _optionalNestedMessage
      clone._optionalForeignMessage = _optionalForeignMessage
      clone._optionalImportMessage = _optionalImportMessage
      clone._optionalNestedEnum = _optionalNestedEnum
      clone._optionalForeignEnum = _optionalForeignEnum
      clone._optionalStringPiece = _optionalStringPiece
      clone._optionalCord = _optionalCord
      clone._optionalPublicImportMessage = _optionalPublicImportMessage
      clone._optionalLazyMessage = _optionalLazyMessage
      clone._repeatedInt32 = _repeatedInt32
      clone._repeatedInt64 = _repeatedInt64
      clone._repeatedUint32 = _repeatedUint32
      clone._repeatedUint64 = _repeatedUint64
      clone._repeatedSint32 = _repeatedSint32
      clone._repeatedSint64 = _repeatedSint64
      clone._repeatedFixed32 = _repeatedFixed32
      clone._repeatedFixed64 = _repeatedFixed64
      clone._repeatedSfixed32 = _repeatedSfixed32
      clone._repeatedSfixed64 = _repeatedSfixed64
      clone._repeatedFloat = _repeatedFloat
      clone._repeatedDouble = _repeatedDouble
      clone._repeatedBool = _repeatedBool
      clone._repeatedString = _repeatedString
      clone._repeatedBytes = _repeatedBytes
      clone._repeatedNestedMessage = _repeatedNestedMessage
      clone._repeatedForeignMessage = _repeatedForeignMessage
      clone._repeatedImportMessage = _repeatedImportMessage
      clone._repeatedNestedEnum = _repeatedNestedEnum
      clone._repeatedForeignEnum = _repeatedForeignEnum
      clone._repeatedStringPiece = _repeatedStringPiece
      clone._repeatedCord = _repeatedCord
      clone._repeatedLazyMessage = _repeatedLazyMessage
      clone._oneofField = _oneofField
      return clone
    }
  }

  private var _storage = _StorageClass()

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }

  ///   Singular
  var optionalInt32: Int32 {
    get {return _storage._optionalInt32}
    set {_uniqueStorage()._optionalInt32 = newValue}
  }

  var optionalInt64: Int64 {
    get {return _storage._optionalInt64}
    set {_uniqueStorage()._optionalInt64 = newValue}
  }

  var optionalUint32: UInt32 {
    get {return _storage._optionalUint32}
    set {_uniqueStorage()._optionalUint32 = newValue}
  }

  var optionalUint64: UInt64 {
    get {return _storage._optionalUint64}
    set {_uniqueStorage()._optionalUint64 = newValue}
  }

  var optionalSint32: Int32 {
    get {return _storage._optionalSint32}
    set {_uniqueStorage()._optionalSint32 = newValue}
  }

  var optionalSint64: Int64 {
    get {return _storage._optionalSint64}
    set {_uniqueStorage()._optionalSint64 = newValue}
  }

  var optionalFixed32: UInt32 {
    get {return _storage._optionalFixed32}
    set {_uniqueStorage()._optionalFixed32 = newValue}
  }

  var optionalFixed64: UInt64 {
    get {return _storage._optionalFixed64}
    set {_uniqueStorage()._optionalFixed64 = newValue}
  }

  var optionalSfixed32: Int32 {
    get {return _storage._optionalSfixed32}
    set {_uniqueStorage()._optionalSfixed32 = newValue}
  }

  var optionalSfixed64: Int64 {
    get {return _storage._optionalSfixed64}
    set {_uniqueStorage()._optionalSfixed64 = newValue}
  }

  var optionalFloat: Float {
    get {return _storage._optionalFloat}
    set {_uniqueStorage()._optionalFloat = newValue}
  }

  var optionalDouble: Double {
    get {return _storage._optionalDouble}
    set {_uniqueStorage()._optionalDouble = newValue}
  }

  var optionalBool: Bool {
    get {return _storage._optionalBool}
    set {_uniqueStorage()._optionalBool = newValue}
  }

  var optionalString: String {
    get {return _storage._optionalString}
    set {_uniqueStorage()._optionalString = newValue}
  }

  var optionalBytes: Data {
    get {return _storage._optionalBytes}
    set {_uniqueStorage()._optionalBytes = newValue}
  }

  //  Groups are not allowed in proto3.
  //  optional group OptionalGroup = 16 {
  //    optional int32 a = 17;
  //  }

  var optionalNestedMessage: Proto3ArenaUnittest_TestAllTypes.NestedMessage {
    get {return _storage._optionalNestedMessage ?? Proto3ArenaUnittest_TestAllTypes.NestedMessage()}
    set {_uniqueStorage()._optionalNestedMessage = newValue}
  }
  var hasOptionalNestedMessage: Bool {
    return _storage._optionalNestedMessage != nil
  }
  mutating func clearOptionalNestedMessage() {
    return _storage._optionalNestedMessage = nil
  }

  var optionalForeignMessage: Proto3ArenaUnittest_ForeignMessage {
    get {return _storage._optionalForeignMessage ?? Proto3ArenaUnittest_ForeignMessage()}
    set {_uniqueStorage()._optionalForeignMessage = newValue}
  }
  var hasOptionalForeignMessage: Bool {
    return _storage._optionalForeignMessage != nil
  }
  mutating func clearOptionalForeignMessage() {
    return _storage._optionalForeignMessage = nil
  }

  var optionalImportMessage: ProtobufUnittestImport_ImportMessage {
    get {return _storage._optionalImportMessage ?? ProtobufUnittestImport_ImportMessage()}
    set {_uniqueStorage()._optionalImportMessage = newValue}
  }
  var hasOptionalImportMessage: Bool {
    return _storage._optionalImportMessage != nil
  }
  mutating func clearOptionalImportMessage() {
    return _storage._optionalImportMessage = nil
  }

  var optionalNestedEnum: Proto3ArenaUnittest_TestAllTypes.NestedEnum {
    get {return _storage._optionalNestedEnum}
    set {_uniqueStorage()._optionalNestedEnum = newValue}
  }

  var optionalForeignEnum: Proto3ArenaUnittest_ForeignEnum {
    get {return _storage._optionalForeignEnum}
    set {_uniqueStorage()._optionalForeignEnum = newValue}
  }

  //  Omitted (compared to unittest.proto) because proto2 enums are not allowed
  //  inside proto2 messages.
  // 
  //  optional protobuf_unittest_import.ImportEnum    optional_import_enum  = 23;

  var optionalStringPiece: String {
    get {return _storage._optionalStringPiece}
    set {_uniqueStorage()._optionalStringPiece = newValue}
  }

  var optionalCord: String {
    get {return _storage._optionalCord}
    set {_uniqueStorage()._optionalCord = newValue}
  }

  ///   Defined in unittest_import_public.proto
  var optionalPublicImportMessage: ProtobufUnittestImport_PublicImportMessage {
    get {return _storage._optionalPublicImportMessage ?? ProtobufUnittestImport_PublicImportMessage()}
    set {_uniqueStorage()._optionalPublicImportMessage = newValue}
  }
  var hasOptionalPublicImportMessage: Bool {
    return _storage._optionalPublicImportMessage != nil
  }
  mutating func clearOptionalPublicImportMessage() {
    return _storage._optionalPublicImportMessage = nil
  }

  var optionalLazyMessage: Proto3ArenaUnittest_TestAllTypes.NestedMessage {
    get {return _storage._optionalLazyMessage ?? Proto3ArenaUnittest_TestAllTypes.NestedMessage()}
    set {_uniqueStorage()._optionalLazyMessage = newValue}
  }
  var hasOptionalLazyMessage: Bool {
    return _storage._optionalLazyMessage != nil
  }
  mutating func clearOptionalLazyMessage() {
    return _storage._optionalLazyMessage = nil
  }

  ///   Repeated
  var repeatedInt32: [Int32] {
    get {return _storage._repeatedInt32}
    set {_uniqueStorage()._repeatedInt32 = newValue}
  }

  var repeatedInt64: [Int64] {
    get {return _storage._repeatedInt64}
    set {_uniqueStorage()._repeatedInt64 = newValue}
  }

  var repeatedUint32: [UInt32] {
    get {return _storage._repeatedUint32}
    set {_uniqueStorage()._repeatedUint32 = newValue}
  }

  var repeatedUint64: [UInt64] {
    get {return _storage._repeatedUint64}
    set {_uniqueStorage()._repeatedUint64 = newValue}
  }

  var repeatedSint32: [Int32] {
    get {return _storage._repeatedSint32}
    set {_uniqueStorage()._repeatedSint32 = newValue}
  }

  var repeatedSint64: [Int64] {
    get {return _storage._repeatedSint64}
    set {_uniqueStorage()._repeatedSint64 = newValue}
  }

  var repeatedFixed32: [UInt32] {
    get {return _storage._repeatedFixed32}
    set {_uniqueStorage()._repeatedFixed32 = newValue}
  }

  var repeatedFixed64: [UInt64] {
    get {return _storage._repeatedFixed64}
    set {_uniqueStorage()._repeatedFixed64 = newValue}
  }

  var repeatedSfixed32: [Int32] {
    get {return _storage._repeatedSfixed32}
    set {_uniqueStorage()._repeatedSfixed32 = newValue}
  }

  var repeatedSfixed64: [Int64] {
    get {return _storage._repeatedSfixed64}
    set {_uniqueStorage()._repeatedSfixed64 = newValue}
  }

  var repeatedFloat: [Float] {
    get {return _storage._repeatedFloat}
    set {_uniqueStorage()._repeatedFloat = newValue}
  }

  var repeatedDouble: [Double] {
    get {return _storage._repeatedDouble}
    set {_uniqueStorage()._repeatedDouble = newValue}
  }

  var repeatedBool: [Bool] {
    get {return _storage._repeatedBool}
    set {_uniqueStorage()._repeatedBool = newValue}
  }

  var repeatedString: [String] {
    get {return _storage._repeatedString}
    set {_uniqueStorage()._repeatedString = newValue}
  }

  var repeatedBytes: [Data] {
    get {return _storage._repeatedBytes}
    set {_uniqueStorage()._repeatedBytes = newValue}
  }

  //  Groups are not allowed in proto3.
  //  repeated group RepeatedGroup = 46 {
  //    optional int32 a = 47;
  //  }

  var repeatedNestedMessage: [Proto3ArenaUnittest_TestAllTypes.NestedMessage] {
    get {return _storage._repeatedNestedMessage}
    set {_uniqueStorage()._repeatedNestedMessage = newValue}
  }

  var repeatedForeignMessage: [Proto3ArenaUnittest_ForeignMessage] {
    get {return _storage._repeatedForeignMessage}
    set {_uniqueStorage()._repeatedForeignMessage = newValue}
  }

  var repeatedImportMessage: [ProtobufUnittestImport_ImportMessage] {
    get {return _storage._repeatedImportMessage}
    set {_uniqueStorage()._repeatedImportMessage = newValue}
  }

  var repeatedNestedEnum: [Proto3ArenaUnittest_TestAllTypes.NestedEnum] {
    get {return _storage._repeatedNestedEnum}
    set {_uniqueStorage()._repeatedNestedEnum = newValue}
  }

  var repeatedForeignEnum: [Proto3ArenaUnittest_ForeignEnum] {
    get {return _storage._repeatedForeignEnum}
    set {_uniqueStorage()._repeatedForeignEnum = newValue}
  }

  //  Omitted (compared to unittest.proto) because proto2 enums are not allowed
  //  inside proto2 messages.
  // 
  //  repeated protobuf_unittest_import.ImportEnum    repeated_import_enum  = 53;

  var repeatedStringPiece: [String] {
    get {return _storage._repeatedStringPiece}
    set {_uniqueStorage()._repeatedStringPiece = newValue}
  }

  var repeatedCord: [String] {
    get {return _storage._repeatedCord}
    set {_uniqueStorage()._repeatedCord = newValue}
  }

  var repeatedLazyMessage: [Proto3ArenaUnittest_TestAllTypes.NestedMessage] {
    get {return _storage._repeatedLazyMessage}
    set {_uniqueStorage()._repeatedLazyMessage = newValue}
  }

  var oneofUint32: UInt32 {
    get {
      if case .oneofUint32(let v)? = _storage._oneofField {
        return v
      }
      return 0
    }
    set {
      _uniqueStorage()._oneofField = .oneofUint32(newValue)
    }
  }

  var oneofNestedMessage: Proto3ArenaUnittest_TestAllTypes.NestedMessage {
    get {
      if case .oneofNestedMessage(let v)? = _storage._oneofField {
        return v
      }
      return Proto3ArenaUnittest_TestAllTypes.NestedMessage()
    }
    set {
      _uniqueStorage()._oneofField = .oneofNestedMessage(newValue)
    }
  }

  var oneofString: String {
    get {
      if case .oneofString(let v)? = _storage._oneofField {
        return v
      }
      return ""
    }
    set {
      _uniqueStorage()._oneofField = .oneofString(newValue)
    }
  }

  var oneofBytes: Data {
    get {
      if case .oneofBytes(let v)? = _storage._oneofField {
        return v
      }
      return Data()
    }
    set {
      _uniqueStorage()._oneofField = .oneofBytes(newValue)
    }
  }

  var oneofField: OneOf_OneofField? {
    get {return _storage._oneofField}
    set {
      _uniqueStorage()._oneofField = newValue
    }
  }

  enum OneOf_OneofField: Equatable {
    case oneofUint32(UInt32)
    case oneofNestedMessage(Proto3ArenaUnittest_TestAllTypes.NestedMessage)
    case oneofString(String)
    case oneofBytes(Data)

    static func ==(lhs: Proto3ArenaUnittest_TestAllTypes.OneOf_OneofField, rhs: Proto3ArenaUnittest_TestAllTypes.OneOf_OneofField) -> Bool {
      switch (lhs, rhs) {
      case (.oneofUint32(let l), .oneofUint32(let r)): return l == r
      case (.oneofNestedMessage(let l), .oneofNestedMessage(let r)): return l == r
      case (.oneofString(let l), .oneofString(let r)): return l == r
      case (.oneofBytes(let l), .oneofBytes(let r)): return l == r
      default: return false
      }
    }

    fileprivate init?<T: SwiftProtobuf.Decoder>(byDecodingFrom decoder: inout T, fieldNumber: Int) throws {
      switch fieldNumber {
      case 111:
        var value = UInt32()
        try decoder.decodeSingularUInt32Field(value: &value)
        self = .oneofUint32(value)
        return
      case 112:
        var value: Proto3ArenaUnittest_TestAllTypes.NestedMessage?
        try decoder.decodeSingularMessageField(value: &value)
        if let value = value {
          self = .oneofNestedMessage(value)
          return
        }
      case 113:
        var value = String()
        try decoder.decodeSingularStringField(value: &value)
        self = .oneofString(value)
        return
      case 114:
        var value = Data()
        try decoder.decodeSingularBytesField(value: &value)
        self = .oneofBytes(value)
        return
      default:
        break
      }
      return nil
    }

    fileprivate func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V, start: Int, end: Int) throws {
      switch self {
      case .oneofUint32(let v):
        if start <= 111 && 111 < end {
          try visitor.visitSingularUInt32Field(value: v, fieldNumber: 111)
        }
      case .oneofNestedMessage(let v):
        if start <= 112 && 112 < end {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 112)
        }
      case .oneofString(let v):
        if start <= 113 && 113 < end {
          try visitor.visitSingularStringField(value: v, fieldNumber: 113)
        }
      case .oneofBytes(let v):
        if start <= 114 && 114 < end {
          try visitor.visitSingularBytesField(value: v, fieldNumber: 114)
        }
      }
    }
  }

  enum NestedEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case zero // = 0
    case foo // = 1
    case bar // = 2
    case baz // = 3

    ///   Intentionally negative.
    case neg // = -1
    case UNRECOGNIZED(Int)

    init() {
      self = .zero
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .zero
      case 1: self = .foo
      case 2: self = .bar
      case 3: self = .baz
      case -1: self = .neg
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    init?(jsonName: String) {
      switch jsonName {
      case "ZERO": self = .zero
      case "FOO": self = .foo
      case "BAR": self = .bar
      case "BAZ": self = .baz
      case "NEG": self = .neg
      default: return nil
      }
    }

    init?(protoName: String) {
      switch protoName {
      case "ZERO": self = .zero
      case "FOO": self = .foo
      case "BAR": self = .bar
      case "BAZ": self = .baz
      case "NEG": self = .neg
      default: return nil
      }
    }

    var rawValue: Int {
      get {
        switch self {
        case .zero: return 0
        case .foo: return 1
        case .bar: return 2
        case .baz: return 3
        case .neg: return -1
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    var _protobuf_jsonName: String? {
      get {
        switch self {
        case .zero: return "ZERO"
        case .foo: return "FOO"
        case .bar: return "BAR"
        case .baz: return "BAZ"
        case .neg: return "NEG"
        case .UNRECOGNIZED: return nil
        }
      }
    }

  }

  struct NestedMessage: SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = "NestedMessage"
    static let protoPackageName: String = "proto3_arena_unittest"
    static let _protobuf_fieldNames: FieldNameMap = [
      1: .same(proto: "bb"),
    ]

    ///   The field name "b" fails to compile in proto1 because it conflicts with
    ///   a local variable named "b" in one of the generated methods.  Doh.
    ///   This file needs to compile in proto1 to test backwards-compatibility.
    var bb: Int32 = 0

    init() {}

    mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
      }
    }

    mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &bb)
      default: break
      }
    }

    func _protoc_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if bb != 0 {
        try visitor.visitSingularInt32Field(value: bb, fieldNumber: 1)
      }
    }

    func _protoc_generated_isEqualTo(other: Proto3ArenaUnittest_TestAllTypes.NestedMessage) -> Bool {
      if bb != other.bb {return false}
      return true
    }
  }

  init() {}

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
      }
    }
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 1: try decoder.decodeSingularInt32Field(value: &_storage._optionalInt32)
    case 2: try decoder.decodeSingularInt64Field(value: &_storage._optionalInt64)
    case 3: try decoder.decodeSingularUInt32Field(value: &_storage._optionalUint32)
    case 4: try decoder.decodeSingularUInt64Field(value: &_storage._optionalUint64)
    case 5: try decoder.decodeSingularSInt32Field(value: &_storage._optionalSint32)
    case 6: try decoder.decodeSingularSInt64Field(value: &_storage._optionalSint64)
    case 7: try decoder.decodeSingularFixed32Field(value: &_storage._optionalFixed32)
    case 8: try decoder.decodeSingularFixed64Field(value: &_storage._optionalFixed64)
    case 9: try decoder.decodeSingularSFixed32Field(value: &_storage._optionalSfixed32)
    case 10: try decoder.decodeSingularSFixed64Field(value: &_storage._optionalSfixed64)
    case 11: try decoder.decodeSingularFloatField(value: &_storage._optionalFloat)
    case 12: try decoder.decodeSingularDoubleField(value: &_storage._optionalDouble)
    case 13: try decoder.decodeSingularBoolField(value: &_storage._optionalBool)
    case 14: try decoder.decodeSingularStringField(value: &_storage._optionalString)
    case 15: try decoder.decodeSingularBytesField(value: &_storage._optionalBytes)
    case 18: try decoder.decodeSingularMessageField(value: &_storage._optionalNestedMessage)
    case 19: try decoder.decodeSingularMessageField(value: &_storage._optionalForeignMessage)
    case 20: try decoder.decodeSingularMessageField(value: &_storage._optionalImportMessage)
    case 21: try decoder.decodeSingularEnumField(value: &_storage._optionalNestedEnum)
    case 22: try decoder.decodeSingularEnumField(value: &_storage._optionalForeignEnum)
    case 24: try decoder.decodeSingularStringField(value: &_storage._optionalStringPiece)
    case 25: try decoder.decodeSingularStringField(value: &_storage._optionalCord)
    case 26: try decoder.decodeSingularMessageField(value: &_storage._optionalPublicImportMessage)
    case 27: try decoder.decodeSingularMessageField(value: &_storage._optionalLazyMessage)
    case 31: try decoder.decodeRepeatedInt32Field(value: &_storage._repeatedInt32)
    case 32: try decoder.decodeRepeatedInt64Field(value: &_storage._repeatedInt64)
    case 33: try decoder.decodeRepeatedUInt32Field(value: &_storage._repeatedUint32)
    case 34: try decoder.decodeRepeatedUInt64Field(value: &_storage._repeatedUint64)
    case 35: try decoder.decodeRepeatedSInt32Field(value: &_storage._repeatedSint32)
    case 36: try decoder.decodeRepeatedSInt64Field(value: &_storage._repeatedSint64)
    case 37: try decoder.decodeRepeatedFixed32Field(value: &_storage._repeatedFixed32)
    case 38: try decoder.decodeRepeatedFixed64Field(value: &_storage._repeatedFixed64)
    case 39: try decoder.decodeRepeatedSFixed32Field(value: &_storage._repeatedSfixed32)
    case 40: try decoder.decodeRepeatedSFixed64Field(value: &_storage._repeatedSfixed64)
    case 41: try decoder.decodeRepeatedFloatField(value: &_storage._repeatedFloat)
    case 42: try decoder.decodeRepeatedDoubleField(value: &_storage._repeatedDouble)
    case 43: try decoder.decodeRepeatedBoolField(value: &_storage._repeatedBool)
    case 44: try decoder.decodeRepeatedStringField(value: &_storage._repeatedString)
    case 45: try decoder.decodeRepeatedBytesField(value: &_storage._repeatedBytes)
    case 48: try decoder.decodeRepeatedMessageField(value: &_storage._repeatedNestedMessage)
    case 49: try decoder.decodeRepeatedMessageField(value: &_storage._repeatedForeignMessage)
    case 50: try decoder.decodeRepeatedMessageField(value: &_storage._repeatedImportMessage)
    case 51: try decoder.decodeRepeatedEnumField(value: &_storage._repeatedNestedEnum)
    case 52: try decoder.decodeRepeatedEnumField(value: &_storage._repeatedForeignEnum)
    case 54: try decoder.decodeRepeatedStringField(value: &_storage._repeatedStringPiece)
    case 55: try decoder.decodeRepeatedStringField(value: &_storage._repeatedCord)
    case 57: try decoder.decodeRepeatedMessageField(value: &_storage._repeatedLazyMessage)
    case 111, 112, 113, 114:
      if _storage._oneofField != nil {
        try decoder.handleConflictingOneOf()
      }
      _storage._oneofField = try Proto3ArenaUnittest_TestAllTypes.OneOf_OneofField(byDecodingFrom: &decoder, fieldNumber: fieldNumber)
    default: break
    }
  }

  func _protoc_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._optionalInt32 != 0 {
        try visitor.visitSingularInt32Field(value: _storage._optionalInt32, fieldNumber: 1)
      }
      if _storage._optionalInt64 != 0 {
        try visitor.visitSingularInt64Field(value: _storage._optionalInt64, fieldNumber: 2)
      }
      if _storage._optionalUint32 != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._optionalUint32, fieldNumber: 3)
      }
      if _storage._optionalUint64 != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._optionalUint64, fieldNumber: 4)
      }
      if _storage._optionalSint32 != 0 {
        try visitor.visitSingularSInt32Field(value: _storage._optionalSint32, fieldNumber: 5)
      }
      if _storage._optionalSint64 != 0 {
        try visitor.visitSingularSInt64Field(value: _storage._optionalSint64, fieldNumber: 6)
      }
      if _storage._optionalFixed32 != 0 {
        try visitor.visitSingularFixed32Field(value: _storage._optionalFixed32, fieldNumber: 7)
      }
      if _storage._optionalFixed64 != 0 {
        try visitor.visitSingularFixed64Field(value: _storage._optionalFixed64, fieldNumber: 8)
      }
      if _storage._optionalSfixed32 != 0 {
        try visitor.visitSingularSFixed32Field(value: _storage._optionalSfixed32, fieldNumber: 9)
      }
      if _storage._optionalSfixed64 != 0 {
        try visitor.visitSingularSFixed64Field(value: _storage._optionalSfixed64, fieldNumber: 10)
      }
      if _storage._optionalFloat != 0 {
        try visitor.visitSingularFloatField(value: _storage._optionalFloat, fieldNumber: 11)
      }
      if _storage._optionalDouble != 0 {
        try visitor.visitSingularDoubleField(value: _storage._optionalDouble, fieldNumber: 12)
      }
      if _storage._optionalBool != false {
        try visitor.visitSingularBoolField(value: _storage._optionalBool, fieldNumber: 13)
      }
      if !_storage._optionalString.isEmpty {
        try visitor.visitSingularStringField(value: _storage._optionalString, fieldNumber: 14)
      }
      if _storage._optionalBytes != Data() {
        try visitor.visitSingularBytesField(value: _storage._optionalBytes, fieldNumber: 15)
      }
      if let v = _storage._optionalNestedMessage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
      }
      if let v = _storage._optionalForeignMessage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
      }
      if let v = _storage._optionalImportMessage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
      }
      if _storage._optionalNestedEnum != Proto3ArenaUnittest_TestAllTypes.NestedEnum.zero {
        try visitor.visitSingularEnumField(value: _storage._optionalNestedEnum, fieldNumber: 21)
      }
      if _storage._optionalForeignEnum != Proto3ArenaUnittest_ForeignEnum.foreignZero {
        try visitor.visitSingularEnumField(value: _storage._optionalForeignEnum, fieldNumber: 22)
      }
      if !_storage._optionalStringPiece.isEmpty {
        try visitor.visitSingularStringField(value: _storage._optionalStringPiece, fieldNumber: 24)
      }
      if !_storage._optionalCord.isEmpty {
        try visitor.visitSingularStringField(value: _storage._optionalCord, fieldNumber: 25)
      }
      if let v = _storage._optionalPublicImportMessage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 26)
      }
      if let v = _storage._optionalLazyMessage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 27)
      }
      if !_storage._repeatedInt32.isEmpty {
        try visitor.visitPackedInt32Field(value: _storage._repeatedInt32, fieldNumber: 31)
      }
      if !_storage._repeatedInt64.isEmpty {
        try visitor.visitPackedInt64Field(value: _storage._repeatedInt64, fieldNumber: 32)
      }
      if !_storage._repeatedUint32.isEmpty {
        try visitor.visitPackedUInt32Field(value: _storage._repeatedUint32, fieldNumber: 33)
      }
      if !_storage._repeatedUint64.isEmpty {
        try visitor.visitPackedUInt64Field(value: _storage._repeatedUint64, fieldNumber: 34)
      }
      if !_storage._repeatedSint32.isEmpty {
        try visitor.visitPackedSInt32Field(value: _storage._repeatedSint32, fieldNumber: 35)
      }
      if !_storage._repeatedSint64.isEmpty {
        try visitor.visitPackedSInt64Field(value: _storage._repeatedSint64, fieldNumber: 36)
      }
      if !_storage._repeatedFixed32.isEmpty {
        try visitor.visitPackedFixed32Field(value: _storage._repeatedFixed32, fieldNumber: 37)
      }
      if !_storage._repeatedFixed64.isEmpty {
        try visitor.visitPackedFixed64Field(value: _storage._repeatedFixed64, fieldNumber: 38)
      }
      if !_storage._repeatedSfixed32.isEmpty {
        try visitor.visitPackedSFixed32Field(value: _storage._repeatedSfixed32, fieldNumber: 39)
      }
      if !_storage._repeatedSfixed64.isEmpty {
        try visitor.visitPackedSFixed64Field(value: _storage._repeatedSfixed64, fieldNumber: 40)
      }
      if !_storage._repeatedFloat.isEmpty {
        try visitor.visitPackedFloatField(value: _storage._repeatedFloat, fieldNumber: 41)
      }
      if !_storage._repeatedDouble.isEmpty {
        try visitor.visitPackedDoubleField(value: _storage._repeatedDouble, fieldNumber: 42)
      }
      if !_storage._repeatedBool.isEmpty {
        try visitor.visitPackedBoolField(value: _storage._repeatedBool, fieldNumber: 43)
      }
      if !_storage._repeatedString.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._repeatedString, fieldNumber: 44)
      }
      if !_storage._repeatedBytes.isEmpty {
        try visitor.visitRepeatedBytesField(value: _storage._repeatedBytes, fieldNumber: 45)
      }
      if !_storage._repeatedNestedMessage.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._repeatedNestedMessage, fieldNumber: 48)
      }
      if !_storage._repeatedForeignMessage.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._repeatedForeignMessage, fieldNumber: 49)
      }
      if !_storage._repeatedImportMessage.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._repeatedImportMessage, fieldNumber: 50)
      }
      if !_storage._repeatedNestedEnum.isEmpty {
        try visitor.visitPackedEnumField(value: _storage._repeatedNestedEnum, fieldNumber: 51)
      }
      if !_storage._repeatedForeignEnum.isEmpty {
        try visitor.visitPackedEnumField(value: _storage._repeatedForeignEnum, fieldNumber: 52)
      }
      if !_storage._repeatedStringPiece.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._repeatedStringPiece, fieldNumber: 54)
      }
      if !_storage._repeatedCord.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._repeatedCord, fieldNumber: 55)
      }
      if !_storage._repeatedLazyMessage.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._repeatedLazyMessage, fieldNumber: 57)
      }
      try _storage._oneofField?.traverse(visitor: &visitor, start: 111, end: 115)
    }
  }

  func _protoc_generated_isEqualTo(other: Proto3ArenaUnittest_TestAllTypes) -> Bool {
    return withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
      if _storage !== other_storage {
        if _storage._optionalInt32 != other_storage._optionalInt32 {return false}
        if _storage._optionalInt64 != other_storage._optionalInt64 {return false}
        if _storage._optionalUint32 != other_storage._optionalUint32 {return false}
        if _storage._optionalUint64 != other_storage._optionalUint64 {return false}
        if _storage._optionalSint32 != other_storage._optionalSint32 {return false}
        if _storage._optionalSint64 != other_storage._optionalSint64 {return false}
        if _storage._optionalFixed32 != other_storage._optionalFixed32 {return false}
        if _storage._optionalFixed64 != other_storage._optionalFixed64 {return false}
        if _storage._optionalSfixed32 != other_storage._optionalSfixed32 {return false}
        if _storage._optionalSfixed64 != other_storage._optionalSfixed64 {return false}
        if _storage._optionalFloat != other_storage._optionalFloat {return false}
        if _storage._optionalDouble != other_storage._optionalDouble {return false}
        if _storage._optionalBool != other_storage._optionalBool {return false}
        if _storage._optionalString != other_storage._optionalString {return false}
        if _storage._optionalBytes != other_storage._optionalBytes {return false}
        if _storage._optionalNestedMessage != other_storage._optionalNestedMessage {return false}
        if _storage._optionalForeignMessage != other_storage._optionalForeignMessage {return false}
        if _storage._optionalImportMessage != other_storage._optionalImportMessage {return false}
        if _storage._optionalNestedEnum != other_storage._optionalNestedEnum {return false}
        if _storage._optionalForeignEnum != other_storage._optionalForeignEnum {return false}
        if _storage._optionalStringPiece != other_storage._optionalStringPiece {return false}
        if _storage._optionalCord != other_storage._optionalCord {return false}
        if _storage._optionalPublicImportMessage != other_storage._optionalPublicImportMessage {return false}
        if _storage._optionalLazyMessage != other_storage._optionalLazyMessage {return false}
        if _storage._repeatedInt32 != other_storage._repeatedInt32 {return false}
        if _storage._repeatedInt64 != other_storage._repeatedInt64 {return false}
        if _storage._repeatedUint32 != other_storage._repeatedUint32 {return false}
        if _storage._repeatedUint64 != other_storage._repeatedUint64 {return false}
        if _storage._repeatedSint32 != other_storage._repeatedSint32 {return false}
        if _storage._repeatedSint64 != other_storage._repeatedSint64 {return false}
        if _storage._repeatedFixed32 != other_storage._repeatedFixed32 {return false}
        if _storage._repeatedFixed64 != other_storage._repeatedFixed64 {return false}
        if _storage._repeatedSfixed32 != other_storage._repeatedSfixed32 {return false}
        if _storage._repeatedSfixed64 != other_storage._repeatedSfixed64 {return false}
        if _storage._repeatedFloat != other_storage._repeatedFloat {return false}
        if _storage._repeatedDouble != other_storage._repeatedDouble {return false}
        if _storage._repeatedBool != other_storage._repeatedBool {return false}
        if _storage._repeatedString != other_storage._repeatedString {return false}
        if _storage._repeatedBytes != other_storage._repeatedBytes {return false}
        if _storage._repeatedNestedMessage != other_storage._repeatedNestedMessage {return false}
        if _storage._repeatedForeignMessage != other_storage._repeatedForeignMessage {return false}
        if _storage._repeatedImportMessage != other_storage._repeatedImportMessage {return false}
        if _storage._repeatedNestedEnum != other_storage._repeatedNestedEnum {return false}
        if _storage._repeatedForeignEnum != other_storage._repeatedForeignEnum {return false}
        if _storage._repeatedStringPiece != other_storage._repeatedStringPiece {return false}
        if _storage._repeatedCord != other_storage._repeatedCord {return false}
        if _storage._repeatedLazyMessage != other_storage._repeatedLazyMessage {return false}
        if _storage._oneofField != other_storage._oneofField {return false}
      }
      return true
    }
  }
}

//  Test messages for packed fields

struct Proto3ArenaUnittest_TestPackedTypes: SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "TestPackedTypes"
  static let protoPackageName: String = "proto3_arena_unittest"
  static let _protobuf_fieldNames: FieldNameMap = [
    90: .unique(proto: "packed_int32", json: "packedInt32"),
    91: .unique(proto: "packed_int64", json: "packedInt64"),
    92: .unique(proto: "packed_uint32", json: "packedUint32"),
    93: .unique(proto: "packed_uint64", json: "packedUint64"),
    94: .unique(proto: "packed_sint32", json: "packedSint32"),
    95: .unique(proto: "packed_sint64", json: "packedSint64"),
    96: .unique(proto: "packed_fixed32", json: "packedFixed32"),
    97: .unique(proto: "packed_fixed64", json: "packedFixed64"),
    98: .unique(proto: "packed_sfixed32", json: "packedSfixed32"),
    99: .unique(proto: "packed_sfixed64", json: "packedSfixed64"),
    100: .unique(proto: "packed_float", json: "packedFloat"),
    101: .unique(proto: "packed_double", json: "packedDouble"),
    102: .unique(proto: "packed_bool", json: "packedBool"),
    103: .unique(proto: "packed_enum", json: "packedEnum"),
  ]

  var packedInt32: [Int32] = []

  var packedInt64: [Int64] = []

  var packedUint32: [UInt32] = []

  var packedUint64: [UInt64] = []

  var packedSint32: [Int32] = []

  var packedSint64: [Int64] = []

  var packedFixed32: [UInt32] = []

  var packedFixed64: [UInt64] = []

  var packedSfixed32: [Int32] = []

  var packedSfixed64: [Int64] = []

  var packedFloat: [Float] = []

  var packedDouble: [Double] = []

  var packedBool: [Bool] = []

  var packedEnum: [Proto3ArenaUnittest_ForeignEnum] = []

  init() {}

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
    }
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 90: try decoder.decodeRepeatedInt32Field(value: &packedInt32)
    case 91: try decoder.decodeRepeatedInt64Field(value: &packedInt64)
    case 92: try decoder.decodeRepeatedUInt32Field(value: &packedUint32)
    case 93: try decoder.decodeRepeatedUInt64Field(value: &packedUint64)
    case 94: try decoder.decodeRepeatedSInt32Field(value: &packedSint32)
    case 95: try decoder.decodeRepeatedSInt64Field(value: &packedSint64)
    case 96: try decoder.decodeRepeatedFixed32Field(value: &packedFixed32)
    case 97: try decoder.decodeRepeatedFixed64Field(value: &packedFixed64)
    case 98: try decoder.decodeRepeatedSFixed32Field(value: &packedSfixed32)
    case 99: try decoder.decodeRepeatedSFixed64Field(value: &packedSfixed64)
    case 100: try decoder.decodeRepeatedFloatField(value: &packedFloat)
    case 101: try decoder.decodeRepeatedDoubleField(value: &packedDouble)
    case 102: try decoder.decodeRepeatedBoolField(value: &packedBool)
    case 103: try decoder.decodeRepeatedEnumField(value: &packedEnum)
    default: break
    }
  }

  func _protoc_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !packedInt32.isEmpty {
      try visitor.visitPackedInt32Field(value: packedInt32, fieldNumber: 90)
    }
    if !packedInt64.isEmpty {
      try visitor.visitPackedInt64Field(value: packedInt64, fieldNumber: 91)
    }
    if !packedUint32.isEmpty {
      try visitor.visitPackedUInt32Field(value: packedUint32, fieldNumber: 92)
    }
    if !packedUint64.isEmpty {
      try visitor.visitPackedUInt64Field(value: packedUint64, fieldNumber: 93)
    }
    if !packedSint32.isEmpty {
      try visitor.visitPackedSInt32Field(value: packedSint32, fieldNumber: 94)
    }
    if !packedSint64.isEmpty {
      try visitor.visitPackedSInt64Field(value: packedSint64, fieldNumber: 95)
    }
    if !packedFixed32.isEmpty {
      try visitor.visitPackedFixed32Field(value: packedFixed32, fieldNumber: 96)
    }
    if !packedFixed64.isEmpty {
      try visitor.visitPackedFixed64Field(value: packedFixed64, fieldNumber: 97)
    }
    if !packedSfixed32.isEmpty {
      try visitor.visitPackedSFixed32Field(value: packedSfixed32, fieldNumber: 98)
    }
    if !packedSfixed64.isEmpty {
      try visitor.visitPackedSFixed64Field(value: packedSfixed64, fieldNumber: 99)
    }
    if !packedFloat.isEmpty {
      try visitor.visitPackedFloatField(value: packedFloat, fieldNumber: 100)
    }
    if !packedDouble.isEmpty {
      try visitor.visitPackedDoubleField(value: packedDouble, fieldNumber: 101)
    }
    if !packedBool.isEmpty {
      try visitor.visitPackedBoolField(value: packedBool, fieldNumber: 102)
    }
    if !packedEnum.isEmpty {
      try visitor.visitPackedEnumField(value: packedEnum, fieldNumber: 103)
    }
  }

  func _protoc_generated_isEqualTo(other: Proto3ArenaUnittest_TestPackedTypes) -> Bool {
    if packedInt32 != other.packedInt32 {return false}
    if packedInt64 != other.packedInt64 {return false}
    if packedUint32 != other.packedUint32 {return false}
    if packedUint64 != other.packedUint64 {return false}
    if packedSint32 != other.packedSint32 {return false}
    if packedSint64 != other.packedSint64 {return false}
    if packedFixed32 != other.packedFixed32 {return false}
    if packedFixed64 != other.packedFixed64 {return false}
    if packedSfixed32 != other.packedSfixed32 {return false}
    if packedSfixed64 != other.packedSfixed64 {return false}
    if packedFloat != other.packedFloat {return false}
    if packedDouble != other.packedDouble {return false}
    if packedBool != other.packedBool {return false}
    if packedEnum != other.packedEnum {return false}
    return true
  }
}

///   Explicitly set packed to false
struct Proto3ArenaUnittest_TestUnpackedTypes: SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "TestUnpackedTypes"
  static let protoPackageName: String = "proto3_arena_unittest"
  static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "repeated_int32", json: "repeatedInt32"),
    2: .unique(proto: "repeated_int64", json: "repeatedInt64"),
    3: .unique(proto: "repeated_uint32", json: "repeatedUint32"),
    4: .unique(proto: "repeated_uint64", json: "repeatedUint64"),
    5: .unique(proto: "repeated_sint32", json: "repeatedSint32"),
    6: .unique(proto: "repeated_sint64", json: "repeatedSint64"),
    7: .unique(proto: "repeated_fixed32", json: "repeatedFixed32"),
    8: .unique(proto: "repeated_fixed64", json: "repeatedFixed64"),
    9: .unique(proto: "repeated_sfixed32", json: "repeatedSfixed32"),
    10: .unique(proto: "repeated_sfixed64", json: "repeatedSfixed64"),
    11: .unique(proto: "repeated_float", json: "repeatedFloat"),
    12: .unique(proto: "repeated_double", json: "repeatedDouble"),
    13: .unique(proto: "repeated_bool", json: "repeatedBool"),
    14: .unique(proto: "repeated_nested_enum", json: "repeatedNestedEnum"),
  ]

  var repeatedInt32: [Int32] = []

  var repeatedInt64: [Int64] = []

  var repeatedUint32: [UInt32] = []

  var repeatedUint64: [UInt64] = []

  var repeatedSint32: [Int32] = []

  var repeatedSint64: [Int64] = []

  var repeatedFixed32: [UInt32] = []

  var repeatedFixed64: [UInt64] = []

  var repeatedSfixed32: [Int32] = []

  var repeatedSfixed64: [Int64] = []

  var repeatedFloat: [Float] = []

  var repeatedDouble: [Double] = []

  var repeatedBool: [Bool] = []

  var repeatedNestedEnum: [Proto3ArenaUnittest_TestAllTypes.NestedEnum] = []

  init() {}

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
    }
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 1: try decoder.decodeRepeatedInt32Field(value: &repeatedInt32)
    case 2: try decoder.decodeRepeatedInt64Field(value: &repeatedInt64)
    case 3: try decoder.decodeRepeatedUInt32Field(value: &repeatedUint32)
    case 4: try decoder.decodeRepeatedUInt64Field(value: &repeatedUint64)
    case 5: try decoder.decodeRepeatedSInt32Field(value: &repeatedSint32)
    case 6: try decoder.decodeRepeatedSInt64Field(value: &repeatedSint64)
    case 7: try decoder.decodeRepeatedFixed32Field(value: &repeatedFixed32)
    case 8: try decoder.decodeRepeatedFixed64Field(value: &repeatedFixed64)
    case 9: try decoder.decodeRepeatedSFixed32Field(value: &repeatedSfixed32)
    case 10: try decoder.decodeRepeatedSFixed64Field(value: &repeatedSfixed64)
    case 11: try decoder.decodeRepeatedFloatField(value: &repeatedFloat)
    case 12: try decoder.decodeRepeatedDoubleField(value: &repeatedDouble)
    case 13: try decoder.decodeRepeatedBoolField(value: &repeatedBool)
    case 14: try decoder.decodeRepeatedEnumField(value: &repeatedNestedEnum)
    default: break
    }
  }

  func _protoc_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !repeatedInt32.isEmpty {
      try visitor.visitRepeatedInt32Field(value: repeatedInt32, fieldNumber: 1)
    }
    if !repeatedInt64.isEmpty {
      try visitor.visitRepeatedInt64Field(value: repeatedInt64, fieldNumber: 2)
    }
    if !repeatedUint32.isEmpty {
      try visitor.visitRepeatedUInt32Field(value: repeatedUint32, fieldNumber: 3)
    }
    if !repeatedUint64.isEmpty {
      try visitor.visitRepeatedUInt64Field(value: repeatedUint64, fieldNumber: 4)
    }
    if !repeatedSint32.isEmpty {
      try visitor.visitRepeatedSInt32Field(value: repeatedSint32, fieldNumber: 5)
    }
    if !repeatedSint64.isEmpty {
      try visitor.visitRepeatedSInt64Field(value: repeatedSint64, fieldNumber: 6)
    }
    if !repeatedFixed32.isEmpty {
      try visitor.visitRepeatedFixed32Field(value: repeatedFixed32, fieldNumber: 7)
    }
    if !repeatedFixed64.isEmpty {
      try visitor.visitRepeatedFixed64Field(value: repeatedFixed64, fieldNumber: 8)
    }
    if !repeatedSfixed32.isEmpty {
      try visitor.visitRepeatedSFixed32Field(value: repeatedSfixed32, fieldNumber: 9)
    }
    if !repeatedSfixed64.isEmpty {
      try visitor.visitRepeatedSFixed64Field(value: repeatedSfixed64, fieldNumber: 10)
    }
    if !repeatedFloat.isEmpty {
      try visitor.visitRepeatedFloatField(value: repeatedFloat, fieldNumber: 11)
    }
    if !repeatedDouble.isEmpty {
      try visitor.visitRepeatedDoubleField(value: repeatedDouble, fieldNumber: 12)
    }
    if !repeatedBool.isEmpty {
      try visitor.visitRepeatedBoolField(value: repeatedBool, fieldNumber: 13)
    }
    if !repeatedNestedEnum.isEmpty {
      try visitor.visitRepeatedEnumField(value: repeatedNestedEnum, fieldNumber: 14)
    }
  }

  func _protoc_generated_isEqualTo(other: Proto3ArenaUnittest_TestUnpackedTypes) -> Bool {
    if repeatedInt32 != other.repeatedInt32 {return false}
    if repeatedInt64 != other.repeatedInt64 {return false}
    if repeatedUint32 != other.repeatedUint32 {return false}
    if repeatedUint64 != other.repeatedUint64 {return false}
    if repeatedSint32 != other.repeatedSint32 {return false}
    if repeatedSint64 != other.repeatedSint64 {return false}
    if repeatedFixed32 != other.repeatedFixed32 {return false}
    if repeatedFixed64 != other.repeatedFixed64 {return false}
    if repeatedSfixed32 != other.repeatedSfixed32 {return false}
    if repeatedSfixed64 != other.repeatedSfixed64 {return false}
    if repeatedFloat != other.repeatedFloat {return false}
    if repeatedDouble != other.repeatedDouble {return false}
    if repeatedBool != other.repeatedBool {return false}
    if repeatedNestedEnum != other.repeatedNestedEnum {return false}
    return true
  }
}

///   This proto includes a recusively nested message.
struct Proto3ArenaUnittest_NestedTestAllTypes: SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "NestedTestAllTypes"
  static let protoPackageName: String = "proto3_arena_unittest"
  static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "child"),
    2: .same(proto: "payload"),
  ]

  private class _StorageClass {
    var _child: Proto3ArenaUnittest_NestedTestAllTypes? = nil
    var _payload: Proto3ArenaUnittest_TestAllTypes? = nil

    init() {}

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._child = _child
      clone._payload = _payload
      return clone
    }
  }

  private var _storage = _StorageClass()

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }

  var child: Proto3ArenaUnittest_NestedTestAllTypes {
    get {return _storage._child ?? Proto3ArenaUnittest_NestedTestAllTypes()}
    set {_uniqueStorage()._child = newValue}
  }
  var hasChild: Bool {
    return _storage._child != nil
  }
  mutating func clearChild() {
    return _storage._child = nil
  }

  var payload: Proto3ArenaUnittest_TestAllTypes {
    get {return _storage._payload ?? Proto3ArenaUnittest_TestAllTypes()}
    set {_uniqueStorage()._payload = newValue}
  }
  var hasPayload: Bool {
    return _storage._payload != nil
  }
  mutating func clearPayload() {
    return _storage._payload = nil
  }

  init() {}

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
      }
    }
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 1: try decoder.decodeSingularMessageField(value: &_storage._child)
    case 2: try decoder.decodeSingularMessageField(value: &_storage._payload)
    default: break
    }
  }

  func _protoc_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._child {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._payload {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
  }

  func _protoc_generated_isEqualTo(other: Proto3ArenaUnittest_NestedTestAllTypes) -> Bool {
    return withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
      if _storage !== other_storage {
        if _storage._child != other_storage._child {return false}
        if _storage._payload != other_storage._payload {return false}
      }
      return true
    }
  }
}

///   Define these after TestAllTypes to make sure the compiler can handle
///   that.
struct Proto3ArenaUnittest_ForeignMessage: SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "ForeignMessage"
  static let protoPackageName: String = "proto3_arena_unittest"
  static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "c"),
  ]

  var c: Int32 = 0

  init() {}

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
    }
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 1: try decoder.decodeSingularInt32Field(value: &c)
    default: break
    }
  }

  func _protoc_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if c != 0 {
      try visitor.visitSingularInt32Field(value: c, fieldNumber: 1)
    }
  }

  func _protoc_generated_isEqualTo(other: Proto3ArenaUnittest_ForeignMessage) -> Bool {
    if c != other.c {return false}
    return true
  }
}

///   TestEmptyMessage is used to test behavior of unknown fields.
struct Proto3ArenaUnittest_TestEmptyMessage: SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "TestEmptyMessage"
  static let protoPackageName: String = "proto3_arena_unittest"
  static let _protobuf_fieldNames = FieldNameMap()

  init() {}

  mutating func _protoc_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
    }
  }

  mutating func _protoc_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
  }

  func _protoc_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
  }

  func _protoc_generated_isEqualTo(other: Proto3ArenaUnittest_TestEmptyMessage) -> Bool {
    return true
  }
}
