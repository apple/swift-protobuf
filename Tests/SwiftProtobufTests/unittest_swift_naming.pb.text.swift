// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: unittest_swift_naming.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _3: SwiftProtobuf.ProtobufAPIVersion_3 {}
  typealias Version = _3
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension SwiftUnittest_Names_EnumFieldNames: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "A"),
    1: .same(proto: "String"),
    2: .same(proto: "Int"),
    3: .same(proto: "Double"),
    4: .same(proto: "Float"),
    5: .same(proto: "UInt"),
    6: .same(proto: "hashValue"),
    7: .same(proto: "description"),
    8: .same(proto: "debugDescription"),
    9: .same(proto: "Swift"),
    10: .same(proto: "UNRECOGNIZED"),
    11: .same(proto: "class"),
    12: .same(proto: "deinit"),
    13: .same(proto: "enum"),
    14: .same(proto: "extension"),
    15: .same(proto: "func"),
    16: .same(proto: "import"),
    17: .same(proto: "init"),
    18: .same(proto: "inout"),
    19: .same(proto: "internal"),
    20: .same(proto: "let"),
    21: .same(proto: "operator"),
    22: .same(proto: "private"),
    23: .same(proto: "protocol"),
    24: .same(proto: "public"),
    25: .same(proto: "static"),
    26: .same(proto: "struct"),
    27: .same(proto: "subscript"),
    28: .same(proto: "typealias"),
    29: .same(proto: "var"),
    30: .same(proto: "break"),
    31: .same(proto: "case"),
    32: .same(proto: "continue"),
    33: .same(proto: "default"),
    34: .same(proto: "defer"),
    35: .same(proto: "do"),
    36: .same(proto: "else"),
    37: .same(proto: "fallthrough"),
    38: .same(proto: "for"),
    39: .same(proto: "guard"),
    40: .same(proto: "if"),
    41: .same(proto: "in"),
    42: .same(proto: "repeat"),
    43: .same(proto: "return"),
    44: .same(proto: "switch"),
    45: .same(proto: "where"),
    46: .same(proto: "while"),
    47: .same(proto: "as"),
    48: .same(proto: "catch"),
    49: .same(proto: "dynamicType"),
    50: .same(proto: "false"),
    51: .same(proto: "is"),
    52: .same(proto: "nil"),
    53: .same(proto: "rethrows"),
    54: .same(proto: "super"),
    55: .same(proto: "self"),
    57: .same(proto: "throw"),
    58: .same(proto: "throws"),
    59: .same(proto: "true"),
    60: .same(proto: "try"),
    61: .same(proto: "__COLUMN__"),
    62: .same(proto: "__FILE__"),
    63: .same(proto: "__FUNCTION__"),
    64: .same(proto: "__LINE__"),
    65: .same(proto: "_"),
    66: .same(proto: "associativity"),
    67: .same(proto: "convenience"),
    68: .same(proto: "dynamic"),
    69: .same(proto: "didSet"),
    70: .same(proto: "final"),
    71: .same(proto: "get"),
    72: .same(proto: "infix"),
    73: .same(proto: "indirect"),
    74: .same(proto: "lazy"),
    75: .same(proto: "left"),
    76: .same(proto: "mutating"),
    77: .same(proto: "none"),
    78: .same(proto: "nonmutating"),
    79: .same(proto: "optional"),
    80: .same(proto: "override"),
    81: .same(proto: "postfix"),
    82: .same(proto: "precedence"),
    83: .same(proto: "prefix"),
    85: .same(proto: "required"),
    86: .same(proto: "right"),
    87: .same(proto: "set"),
    88: .same(proto: "Type"),
    89: .same(proto: "unowned"),
    90: .same(proto: "weak"),
    91: .same(proto: "willSet"),
    93: .same(proto: "_cmd"),
    96: .same(proto: "out"),
    98: .same(proto: "bycopy"),
    99: .same(proto: "byref"),
    100: .same(proto: "oneway"),
    102: .same(proto: "and"),
    103: .same(proto: "and_eq"),
    104: .same(proto: "alignas"),
    105: .same(proto: "alignof"),
    106: .same(proto: "asm"),
    107: .same(proto: "auto"),
    108: .same(proto: "bitand"),
    109: .same(proto: "bitor"),
    110: .same(proto: "bool"),
    114: .same(proto: "char"),
    115: .same(proto: "char16_t"),
    116: .same(proto: "char32_t"),
    118: .same(proto: "compl"),
    119: .same(proto: "const"),
    120: .same(proto: "constexpr"),
    121: .same(proto: "const_cast"),
    123: .same(proto: "decltype"),
    125: .same(proto: "delete"),
    127: .same(proto: "dynamic_cast"),
    130: .same(proto: "explicit"),
    131: .same(proto: "export"),
    132: .same(proto: "extern"),
    136: .same(proto: "friend"),
    137: .same(proto: "goto"),
    139: .same(proto: "inline"),
    141: .same(proto: "long"),
    142: .same(proto: "mutable"),
    143: .same(proto: "namespace"),
    144: .same(proto: "new"),
    145: .same(proto: "noexcept"),
    146: .same(proto: "not"),
    147: .same(proto: "not_eq"),
    148: .same(proto: "nullptr"),
    150: .same(proto: "or"),
    151: .same(proto: "or_eq"),
    153: .same(proto: "protected"),
    155: .same(proto: "register"),
    156: .same(proto: "reinterpret_cast"),
    158: .same(proto: "short"),
    159: .same(proto: "signed"),
    160: .same(proto: "sizeof"),
    162: .same(proto: "static_assert"),
    163: .same(proto: "static_cast"),
    166: .same(proto: "template"),
    167: .same(proto: "this"),
    168: .same(proto: "thread_local"),
    172: .same(proto: "typedef"),
    173: .same(proto: "typeid"),
    174: .same(proto: "typename"),
    175: .same(proto: "union"),
    176: .same(proto: "unsigned"),
    177: .same(proto: "using"),
    178: .same(proto: "virtual"),
    179: .same(proto: "void"),
    180: .same(proto: "volatile"),
    181: .same(proto: "wchar_t"),
    183: .same(proto: "xor"),
    184: .same(proto: "xor_eq"),
    185: .same(proto: "restrict"),
    186: .same(proto: "Category"),
    187: .same(proto: "Ivar"),
    188: .same(proto: "Method"),
    192: .same(proto: "finalize"),
    193: .same(proto: "hash"),
    194: .same(proto: "dealloc"),
    197: .same(proto: "superclass"),
    198: .same(proto: "retain"),
    199: .same(proto: "release"),
    200: .same(proto: "autorelease"),
    201: .same(proto: "retainCount"),
    202: .same(proto: "zone"),
    203: .same(proto: "isProxy"),
    204: .same(proto: "copy"),
    205: .same(proto: "mutableCopy"),
    206: .same(proto: "classForCoder"),
    207: .same(proto: "clear"),
    208: .same(proto: "data"),
    209: .same(proto: "delimitedData"),
    210: .same(proto: "descriptor"),
    211: .same(proto: "extensionRegistry"),
    212: .same(proto: "extensionsCurrentlySet"),
    213: .same(proto: "isInitialized"),
    214: .same(proto: "serializedSize"),
    215: .same(proto: "sortedExtensionsInUse"),
    216: .same(proto: "unknownFields"),
    217: .same(proto: "Fixed"),
    218: .same(proto: "Fract"),
    219: .same(proto: "Size"),
    220: .same(proto: "LogicalAddress"),
    221: .same(proto: "PhysicalAddress"),
    222: .same(proto: "ByteCount"),
    223: .same(proto: "ByteOffset"),
    224: .same(proto: "Duration"),
    225: .same(proto: "AbsoluteTime"),
    226: .same(proto: "OptionBits"),
    227: .same(proto: "ItemCount"),
    228: .same(proto: "PBVersion"),
    229: .same(proto: "ScriptCode"),
    230: .same(proto: "LangCode"),
    231: .same(proto: "RegionCode"),
    232: .same(proto: "OSType"),
    233: .same(proto: "ProcessSerialNumber"),
    234: .same(proto: "Point"),
    235: .same(proto: "Rect"),
    236: .same(proto: "FixedPoint"),
    237: .same(proto: "FixedRect"),
    238: .same(proto: "Style"),
    239: .same(proto: "StyleParameter"),
    240: .same(proto: "StyleField"),
    241: .same(proto: "TimeScale"),
    242: .same(proto: "TimeBase"),
    243: .same(proto: "TimeRecord"),
    244: .same(proto: "Extensions"),
  ]
}

extension SwiftUnittest_Names_EnumFieldNames2: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "AA"),
    1065: .same(proto: "__"),
  ]
}

extension SwiftUnittest_Names_Foo: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()
}

extension SwiftUnittest_Names_FieldNames: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "String"),
    2: .same(proto: "Int"),
    3: .same(proto: "Double"),
    4: .same(proto: "Float"),
    5: .same(proto: "UInt"),
    6: .same(proto: "hashValue"),
    7: .same(proto: "description"),
    8: .same(proto: "debugDescription"),
    9: .same(proto: "Swift"),
    10: .same(proto: "UNRECOGNIZED"),
    11: .same(proto: "class"),
    12: .same(proto: "deinit"),
    13: .same(proto: "enum"),
    15: .same(proto: "func"),
    16: .same(proto: "import"),
    17: .same(proto: "init"),
    18: .same(proto: "inout"),
    19: .same(proto: "internal"),
    20: .same(proto: "let"),
    21: .same(proto: "operator"),
    22: .same(proto: "private"),
    23: .same(proto: "protocol"),
    24: .same(proto: "public"),
    25: .same(proto: "static"),
    26: .same(proto: "struct"),
    27: .same(proto: "subscript"),
    28: .same(proto: "typealias"),
    29: .same(proto: "var"),
    30: .same(proto: "break"),
    31: .same(proto: "case"),
    32: .same(proto: "continue"),
    33: .same(proto: "default"),
    34: .same(proto: "defer"),
    35: .same(proto: "do"),
    36: .same(proto: "else"),
    37: .same(proto: "fallthrough"),
    38: .same(proto: "for"),
    39: .same(proto: "guard"),
    40: .same(proto: "if"),
    41: .same(proto: "in"),
    42: .same(proto: "repeat"),
    43: .same(proto: "return"),
    44: .same(proto: "switch"),
    45: .same(proto: "where"),
    46: .same(proto: "while"),
    47: .same(proto: "as"),
    48: .same(proto: "catch"),
    49: .same(proto: "dynamicType"),
    50: .same(proto: "false"),
    51: .same(proto: "is"),
    52: .same(proto: "nil"),
    53: .same(proto: "rethrows"),
    54: .same(proto: "super"),
    55: .same(proto: "self"),
    57: .same(proto: "throw"),
    58: .same(proto: "throws"),
    59: .same(proto: "true"),
    60: .same(proto: "try"),
    61: .standard(proto: "__COLUMN__"),
    62: .standard(proto: "__FILE__"),
    63: .standard(proto: "__FUNCTION__"),
    64: .standard(proto: "__LINE__"),
    65: .standard(proto: "_"),
    66: .same(proto: "associativity"),
    67: .same(proto: "convenience"),
    68: .same(proto: "dynamic"),
    69: .same(proto: "didSet"),
    70: .same(proto: "final"),
    71: .same(proto: "get"),
    72: .same(proto: "infix"),
    73: .same(proto: "indirect"),
    74: .same(proto: "lazy"),
    75: .same(proto: "left"),
    76: .same(proto: "mutating"),
    77: .same(proto: "none"),
    78: .same(proto: "nonmutating"),
    79: .same(proto: "optional"),
    80: .same(proto: "override"),
    81: .same(proto: "postfix"),
    82: .same(proto: "precedence"),
    83: .same(proto: "prefix"),
    85: .same(proto: "required"),
    86: .same(proto: "right"),
    87: .same(proto: "set"),
    88: .same(proto: "Type"),
    89: .same(proto: "unowned"),
    90: .same(proto: "weak"),
    91: .same(proto: "willSet"),
    92: .same(proto: "id"),
    93: .standard(proto: "_cmd"),
    96: .same(proto: "out"),
    98: .same(proto: "bycopy"),
    99: .same(proto: "byref"),
    100: .same(proto: "oneway"),
    102: .same(proto: "and"),
    103: .standard(proto: "and_eq"),
    104: .same(proto: "alignas"),
    105: .same(proto: "alignof"),
    106: .same(proto: "asm"),
    107: .same(proto: "auto"),
    108: .same(proto: "bitand"),
    109: .same(proto: "bitor"),
    110: .same(proto: "bool"),
    114: .same(proto: "char"),
    115: .standard(proto: "char16_t"),
    116: .standard(proto: "char32_t"),
    118: .same(proto: "compl"),
    119: .same(proto: "const"),
    120: .same(proto: "constexpr"),
    121: .standard(proto: "const_cast"),
    123: .same(proto: "decltype"),
    125: .same(proto: "delete"),
    127: .standard(proto: "dynamic_cast"),
    130: .same(proto: "explicit"),
    131: .same(proto: "export"),
    132: .same(proto: "extern"),
    136: .same(proto: "friend"),
    137: .same(proto: "goto"),
    139: .same(proto: "inline"),
    141: .same(proto: "long"),
    142: .same(proto: "mutable"),
    143: .same(proto: "namespace"),
    144: .same(proto: "new"),
    145: .same(proto: "noexcept"),
    146: .same(proto: "not"),
    147: .standard(proto: "not_eq"),
    148: .same(proto: "nullptr"),
    150: .same(proto: "or"),
    151: .standard(proto: "or_eq"),
    153: .same(proto: "protected"),
    155: .same(proto: "register"),
    156: .standard(proto: "reinterpret_cast"),
    158: .same(proto: "short"),
    159: .same(proto: "signed"),
    160: .same(proto: "sizeof"),
    162: .standard(proto: "static_assert"),
    163: .standard(proto: "static_cast"),
    166: .same(proto: "template"),
    167: .same(proto: "this"),
    168: .standard(proto: "thread_local"),
    172: .same(proto: "typedef"),
    173: .same(proto: "typeid"),
    174: .same(proto: "typename"),
    175: .same(proto: "union"),
    176: .same(proto: "unsigned"),
    177: .same(proto: "using"),
    178: .same(proto: "virtual"),
    179: .same(proto: "void"),
    180: .same(proto: "volatile"),
    181: .standard(proto: "wchar_t"),
    183: .same(proto: "xor"),
    184: .standard(proto: "xor_eq"),
    185: .same(proto: "restrict"),
    186: .same(proto: "Category"),
    187: .same(proto: "Ivar"),
    188: .same(proto: "Method"),
    192: .same(proto: "finalize"),
    193: .same(proto: "hash"),
    194: .same(proto: "dealloc"),
    197: .same(proto: "superclass"),
    198: .same(proto: "retain"),
    199: .same(proto: "release"),
    200: .same(proto: "autorelease"),
    201: .same(proto: "retainCount"),
    202: .same(proto: "zone"),
    203: .same(proto: "isProxy"),
    204: .same(proto: "copy"),
    205: .same(proto: "mutableCopy"),
    206: .same(proto: "classForCoder"),
    207: .same(proto: "clear"),
    208: .same(proto: "data"),
    209: .same(proto: "delimitedData"),
    210: .same(proto: "descriptor"),
    211: .same(proto: "extensionRegistry"),
    212: .same(proto: "extensionsCurrentlySet"),
    213: .same(proto: "isInitialized"),
    214: .same(proto: "serializedSize"),
    215: .same(proto: "sortedExtensionsInUse"),
    216: .same(proto: "unknownFields"),
    217: .same(proto: "Fixed"),
    218: .same(proto: "Fract"),
    219: .same(proto: "Size"),
    220: .same(proto: "LogicalAddress"),
    221: .same(proto: "PhysicalAddress"),
    222: .same(proto: "ByteCount"),
    223: .same(proto: "ByteOffset"),
    224: .same(proto: "Duration"),
    225: .same(proto: "AbsoluteTime"),
    226: .same(proto: "OptionBits"),
    227: .same(proto: "ItemCount"),
    228: .same(proto: "PBVersion"),
    229: .same(proto: "ScriptCode"),
    230: .same(proto: "LangCode"),
    231: .same(proto: "RegionCode"),
    232: .same(proto: "OSType"),
    233: .same(proto: "ProcessSerialNumber"),
    234: .same(proto: "Point"),
    235: .same(proto: "Rect"),
    236: .same(proto: "FixedPoint"),
    237: .same(proto: "FixedRect"),
    238: .same(proto: "Style"),
    239: .same(proto: "StyleParameter"),
    240: .same(proto: "StyleField"),
    241: .same(proto: "TimeScale"),
    242: .same(proto: "TimeBase"),
    243: .same(proto: "TimeRecord"),
    244: .unique(proto: "json_should_be_overriden", json: "json_was_overridden"),
    245: .same(proto: "Any"),
    246: .same(proto: "Int32"),
    247: .same(proto: "Int64"),
    250: .same(proto: "UInt32"),
    251: .same(proto: "UInt64"),
    252: .same(proto: "associatedtype"),
    253: .same(proto: "fileprivate"),
    254: .same(proto: "open"),
    255: .same(proto: "serializedData"),
    256: .same(proto: "hasSerializedData"),
    257: .same(proto: "clearSerializedData"),
    258: .same(proto: "jsonUTF8Data"),
    259: .same(proto: "jsonString"),
    260: .same(proto: "Extension"),
    261: .same(proto: "Extensions"),
  ]
}

extension SwiftUnittest_Names_MessageNames: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()
}

extension SwiftUnittest_Names_MessageNames.StringMessage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "String"),
  ]
}

extension SwiftUnittest_Names_MessageNames.ProtocolMessage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Protocol"),
  ]
}

extension SwiftUnittest_Names_MessageNames.IntMessage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Int"),
  ]
}

extension SwiftUnittest_Names_MessageNames.DoubleMessage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Double"),
  ]
}

extension SwiftUnittest_Names_MessageNames.FloatMessage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Float"),
  ]
}

extension SwiftUnittest_Names_MessageNames.UIntMessage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "UInt"),
  ]
}

extension SwiftUnittest_Names_MessageNames.hashValueMessage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "hashValue"),
  ]
}

extension SwiftUnittest_Names_MessageNames.descriptionMessage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "description"),
  ]
}

extension SwiftUnittest_Names_MessageNames.debugDescriptionMessage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "debugDescription"),
  ]
}

extension SwiftUnittest_Names_MessageNames.Swift: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Swift"),
  ]
}

extension SwiftUnittest_Names_MessageNames.UNRECOGNIZED: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "UNRECOGNIZED"),
  ]
}

extension SwiftUnittest_Names_MessageNames.classMessage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "class"),
  ]
}

extension SwiftUnittest_Names_MessageNames.deinitMessage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "deinit"),
  ]
}

extension SwiftUnittest_Names_MessageNames.enumMessage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "enum"),
  ]
}

extension SwiftUnittest_Names_MessageNames.extensionMessage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "extension"),
  ]
}

extension SwiftUnittest_Names_MessageNames.funcMessage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "func"),
  ]
}

extension SwiftUnittest_Names_MessageNames.importMessage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "import"),
  ]
}

extension SwiftUnittest_Names_MessageNames.initMessage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "init"),
  ]
}

extension SwiftUnittest_Names_MessageNames.inoutMessage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "inout"),
  ]
}

extension SwiftUnittest_Names_MessageNames.internalMessage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "internal"),
  ]
}

extension SwiftUnittest_Names_MessageNames.letMessage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "let"),
  ]
}

extension SwiftUnittest_Names_MessageNames.operatorMessage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "operator"),
  ]
}

extension SwiftUnittest_Names_MessageNames.privateMessage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "private"),
  ]
}

extension SwiftUnittest_Names_MessageNames.protocolMessage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "protocol"),
  ]
}

extension SwiftUnittest_Names_MessageNames.publicMessage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "public"),
  ]
}

extension SwiftUnittest_Names_MessageNames.staticMessage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "static"),
  ]
}

extension SwiftUnittest_Names_MessageNames.structMessage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "struct"),
  ]
}

extension SwiftUnittest_Names_MessageNames.subscriptMessage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "subscript"),
  ]
}

extension SwiftUnittest_Names_MessageNames.typealiasMessage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "typealias"),
  ]
}

extension SwiftUnittest_Names_MessageNames.varMessage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "var"),
  ]
}

extension SwiftUnittest_Names_MessageNames.breakMessage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "break"),
  ]
}

extension SwiftUnittest_Names_MessageNames.caseMessage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "case"),
  ]
}

extension SwiftUnittest_Names_MessageNames.continueMessage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "continue"),
  ]
}

extension SwiftUnittest_Names_MessageNames.defaultMessage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "default"),
  ]
}

extension SwiftUnittest_Names_MessageNames.deferMessage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "defer"),
  ]
}

extension SwiftUnittest_Names_MessageNames.doMessage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "do"),
  ]
}

extension SwiftUnittest_Names_MessageNames.elseMessage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "else"),
  ]
}

extension SwiftUnittest_Names_MessageNames.fallthroughMessage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "fallthrough"),
  ]
}

extension SwiftUnittest_Names_MessageNames.forMessage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "for"),
  ]
}

extension SwiftUnittest_Names_MessageNames.guardMessage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "guard"),
  ]
}

extension SwiftUnittest_Names_MessageNames.ifMessage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "if"),
  ]
}

extension SwiftUnittest_Names_MessageNames.inMessage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "in"),
  ]
}

extension SwiftUnittest_Names_MessageNames.repeatMessage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "repeat"),
  ]
}

extension SwiftUnittest_Names_MessageNames.returnMessage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "return"),
  ]
}

extension SwiftUnittest_Names_MessageNames.switchMessage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "switch"),
  ]
}

extension SwiftUnittest_Names_MessageNames.whereMessage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "where"),
  ]
}

extension SwiftUnittest_Names_MessageNames.whileMessage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "while"),
  ]
}

extension SwiftUnittest_Names_MessageNames.asMessage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "as"),
  ]
}

extension SwiftUnittest_Names_MessageNames.catchMessage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "catch"),
  ]
}

extension SwiftUnittest_Names_MessageNames.dynamicTypeMessage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "dynamicType"),
  ]
}

extension SwiftUnittest_Names_MessageNames.falseMessage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "false"),
  ]
}

extension SwiftUnittest_Names_MessageNames.isMessage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "is"),
  ]
}

extension SwiftUnittest_Names_MessageNames.nilMessage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "nil"),
  ]
}

extension SwiftUnittest_Names_MessageNames.rethrowsMessage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "rethrows"),
  ]
}

extension SwiftUnittest_Names_MessageNames.superMessage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
  ]
}

extension SwiftUnittest_Names_MessageNames.selfMessage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "self"),
  ]
}

extension SwiftUnittest_Names_MessageNames.throwMessage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "throw"),
  ]
}

extension SwiftUnittest_Names_MessageNames.throwsMessage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "throws"),
  ]
}

extension SwiftUnittest_Names_MessageNames.trueMessage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "true"),
  ]
}

extension SwiftUnittest_Names_MessageNames.tryMessage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "try"),
  ]
}

extension SwiftUnittest_Names_MessageNames.__COLUMN__Message: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "__COLUMN__"),
  ]
}

extension SwiftUnittest_Names_MessageNames.__FILE__Message: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "__FILE__"),
  ]
}

extension SwiftUnittest_Names_MessageNames.__FUNCTION__Message: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "__FUNCTION__"),
  ]
}

extension SwiftUnittest_Names_MessageNames.__LINE__Message: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "__LINE__"),
  ]
}

extension SwiftUnittest_Names_MessageNames._Message: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "_"),
  ]
}

extension SwiftUnittest_Names_MessageNames.__Message: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "__"),
  ]
}

extension SwiftUnittest_Names_MessageNames.associativity: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "associativity"),
  ]
}

extension SwiftUnittest_Names_MessageNames.convenience: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "convenience"),
  ]
}

extension SwiftUnittest_Names_MessageNames.dynamic: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "dynamic"),
  ]
}

extension SwiftUnittest_Names_MessageNames.didSet: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "didSet"),
  ]
}

extension SwiftUnittest_Names_MessageNames.final: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "final"),
  ]
}

extension SwiftUnittest_Names_MessageNames.get: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "get"),
  ]
}

extension SwiftUnittest_Names_MessageNames.infix: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "infix"),
  ]
}

extension SwiftUnittest_Names_MessageNames.indirect: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "indirect"),
  ]
}

extension SwiftUnittest_Names_MessageNames.lazy: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "lazy"),
  ]
}

extension SwiftUnittest_Names_MessageNames.left: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "left"),
  ]
}

extension SwiftUnittest_Names_MessageNames.mutating: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "mutating"),
  ]
}

extension SwiftUnittest_Names_MessageNames.none: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "none"),
  ]
}

extension SwiftUnittest_Names_MessageNames.nonmutating: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "nonmutating"),
  ]
}

extension SwiftUnittest_Names_MessageNames.optional: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "optional"),
  ]
}

extension SwiftUnittest_Names_MessageNames.override: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "override"),
  ]
}

extension SwiftUnittest_Names_MessageNames.postfix: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "postfix"),
  ]
}

extension SwiftUnittest_Names_MessageNames.precedence: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "precedence"),
  ]
}

extension SwiftUnittest_Names_MessageNames.prefix: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "prefix"),
  ]
}

extension SwiftUnittest_Names_MessageNames.required: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "required"),
  ]
}

extension SwiftUnittest_Names_MessageNames.right: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "right"),
  ]
}

extension SwiftUnittest_Names_MessageNames.set: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "set"),
  ]
}

extension SwiftUnittest_Names_MessageNames.TypeMessage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Type"),
  ]
}

extension SwiftUnittest_Names_MessageNames.unowned: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "unowned"),
  ]
}

extension SwiftUnittest_Names_MessageNames.weak: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "weak"),
  ]
}

extension SwiftUnittest_Names_MessageNames.willSet: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "willSet"),
  ]
}

extension SwiftUnittest_Names_MessageNames.id: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]
}

extension SwiftUnittest_Names_MessageNames._cmd: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "_cmd"),
  ]
}

extension SwiftUnittest_Names_MessageNames.out: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "out"),
  ]
}

extension SwiftUnittest_Names_MessageNames.bycopy: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bycopy"),
  ]
}

extension SwiftUnittest_Names_MessageNames.byref: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "byref"),
  ]
}

extension SwiftUnittest_Names_MessageNames.oneway: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "oneway"),
  ]
}

extension SwiftUnittest_Names_MessageNames.and: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "and"),
  ]
}

extension SwiftUnittest_Names_MessageNames.and_eq: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "and_eq"),
  ]
}

extension SwiftUnittest_Names_MessageNames.alignas: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "alignas"),
  ]
}

extension SwiftUnittest_Names_MessageNames.alignof: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "alignof"),
  ]
}

extension SwiftUnittest_Names_MessageNames.asm: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "asm"),
  ]
}

extension SwiftUnittest_Names_MessageNames.auto: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "auto"),
  ]
}

extension SwiftUnittest_Names_MessageNames.bitand: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bitand"),
  ]
}

extension SwiftUnittest_Names_MessageNames.bitor: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bitor"),
  ]
}

extension SwiftUnittest_Names_MessageNames.bool: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bool"),
  ]
}

extension SwiftUnittest_Names_MessageNames.char: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "char"),
  ]
}

extension SwiftUnittest_Names_MessageNames.char16_t: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "char16_t"),
  ]
}

extension SwiftUnittest_Names_MessageNames.char32_t: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "char32_t"),
  ]
}

extension SwiftUnittest_Names_MessageNames.compl: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "compl"),
  ]
}

extension SwiftUnittest_Names_MessageNames.const: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "const"),
  ]
}

extension SwiftUnittest_Names_MessageNames.constexpr: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "constexpr"),
  ]
}

extension SwiftUnittest_Names_MessageNames.const_cast: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "const_cast"),
  ]
}

extension SwiftUnittest_Names_MessageNames.decltype: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "decltype"),
  ]
}

extension SwiftUnittest_Names_MessageNames.delete: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "delete"),
  ]
}

extension SwiftUnittest_Names_MessageNames.dynamic_cast: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "dynamic_cast"),
  ]
}

extension SwiftUnittest_Names_MessageNames.explicit: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "explicit"),
  ]
}

extension SwiftUnittest_Names_MessageNames.export: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "export"),
  ]
}

extension SwiftUnittest_Names_MessageNames.extern: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "extern"),
  ]
}

extension SwiftUnittest_Names_MessageNames.friend: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "friend"),
  ]
}

extension SwiftUnittest_Names_MessageNames.goto: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "goto"),
  ]
}

extension SwiftUnittest_Names_MessageNames.inline: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "inline"),
  ]
}

extension SwiftUnittest_Names_MessageNames.long: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "long"),
  ]
}

extension SwiftUnittest_Names_MessageNames.mutable: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "mutable"),
  ]
}

extension SwiftUnittest_Names_MessageNames.namespace: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "namespace"),
  ]
}

extension SwiftUnittest_Names_MessageNames.new: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "new"),
  ]
}

extension SwiftUnittest_Names_MessageNames.noexcept: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "noexcept"),
  ]
}

extension SwiftUnittest_Names_MessageNames.not: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "not"),
  ]
}

extension SwiftUnittest_Names_MessageNames.not_eq: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "not_eq"),
  ]
}

extension SwiftUnittest_Names_MessageNames.nullptr: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "nullptr"),
  ]
}

extension SwiftUnittest_Names_MessageNames.or: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "or"),
  ]
}

extension SwiftUnittest_Names_MessageNames.or_eq: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "or_eq"),
  ]
}

extension SwiftUnittest_Names_MessageNames.protected: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "protected"),
  ]
}

extension SwiftUnittest_Names_MessageNames.register: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "register"),
  ]
}

extension SwiftUnittest_Names_MessageNames.reinterpret_cast: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "reinterpret_cast"),
  ]
}

extension SwiftUnittest_Names_MessageNames.short: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "short"),
  ]
}

extension SwiftUnittest_Names_MessageNames.signed: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "signed"),
  ]
}

extension SwiftUnittest_Names_MessageNames.sizeof: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sizeof"),
  ]
}

extension SwiftUnittest_Names_MessageNames.static_assert: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "static_assert"),
  ]
}

extension SwiftUnittest_Names_MessageNames.static_cast: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "static_cast"),
  ]
}

extension SwiftUnittest_Names_MessageNames.template: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "template"),
  ]
}

extension SwiftUnittest_Names_MessageNames.this: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "this"),
  ]
}

extension SwiftUnittest_Names_MessageNames.thread_local: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "thread_local"),
  ]
}

extension SwiftUnittest_Names_MessageNames.typedef: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "typedef"),
  ]
}

extension SwiftUnittest_Names_MessageNames.typeid: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "typeid"),
  ]
}

extension SwiftUnittest_Names_MessageNames.typename: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "typename"),
  ]
}

extension SwiftUnittest_Names_MessageNames.union: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "union"),
  ]
}

extension SwiftUnittest_Names_MessageNames.unsigned: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "unsigned"),
  ]
}

extension SwiftUnittest_Names_MessageNames.using: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "using"),
  ]
}

extension SwiftUnittest_Names_MessageNames.virtual: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "virtual"),
  ]
}

extension SwiftUnittest_Names_MessageNames.void: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "void"),
  ]
}

extension SwiftUnittest_Names_MessageNames.volatile: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "volatile"),
  ]
}

extension SwiftUnittest_Names_MessageNames.wchar_t: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "wchar_t"),
  ]
}

extension SwiftUnittest_Names_MessageNames.xor: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "xor"),
  ]
}

extension SwiftUnittest_Names_MessageNames.xor_eq: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "xor_eq"),
  ]
}

extension SwiftUnittest_Names_MessageNames.restrict: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "restrict"),
  ]
}

extension SwiftUnittest_Names_MessageNames.Category: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Category"),
  ]
}

extension SwiftUnittest_Names_MessageNames.Ivar: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Ivar"),
  ]
}

extension SwiftUnittest_Names_MessageNames.Method: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Method"),
  ]
}

extension SwiftUnittest_Names_MessageNames.finalize: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "finalize"),
  ]
}

extension SwiftUnittest_Names_MessageNames.hash: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "hash"),
  ]
}

extension SwiftUnittest_Names_MessageNames.dealloc: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "dealloc"),
  ]
}

extension SwiftUnittest_Names_MessageNames.superclass: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "superclass"),
  ]
}

extension SwiftUnittest_Names_MessageNames.retain: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "retain"),
  ]
}

extension SwiftUnittest_Names_MessageNames.release: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "release"),
  ]
}

extension SwiftUnittest_Names_MessageNames.autorelease: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "autorelease"),
  ]
}

extension SwiftUnittest_Names_MessageNames.retainCount: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "retainCount"),
  ]
}

extension SwiftUnittest_Names_MessageNames.zone: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "zone"),
  ]
}

extension SwiftUnittest_Names_MessageNames.isProxy: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "isProxy"),
  ]
}

extension SwiftUnittest_Names_MessageNames.copy: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "copy"),
  ]
}

extension SwiftUnittest_Names_MessageNames.mutableCopy: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "mutableCopy"),
  ]
}

extension SwiftUnittest_Names_MessageNames.classForCoder: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "classForCoder"),
  ]
}

extension SwiftUnittest_Names_MessageNames.clear: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "clear"),
  ]
}

extension SwiftUnittest_Names_MessageNames.data: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]
}

extension SwiftUnittest_Names_MessageNames.delimitedData: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "delimitedData"),
  ]
}

extension SwiftUnittest_Names_MessageNames.descriptor: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "descriptor"),
  ]
}

extension SwiftUnittest_Names_MessageNames.extensionRegistry: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "extensionRegistry"),
  ]
}

extension SwiftUnittest_Names_MessageNames.extensionsCurrentlySet: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "extensionsCurrentlySet"),
  ]
}

extension SwiftUnittest_Names_MessageNames.isInitializedMessage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "isInitialized"),
  ]
}

extension SwiftUnittest_Names_MessageNames.serializedSize: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "serializedSize"),
  ]
}

extension SwiftUnittest_Names_MessageNames.sortedExtensionsInUse: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sortedExtensionsInUse"),
  ]
}

extension SwiftUnittest_Names_MessageNames.unknownFieldsMessage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "unknownFields"),
  ]
}

extension SwiftUnittest_Names_MessageNames.Fixed: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Fixed"),
  ]
}

extension SwiftUnittest_Names_MessageNames.Fract: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Fract"),
  ]
}

extension SwiftUnittest_Names_MessageNames.Size: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Size"),
  ]
}

extension SwiftUnittest_Names_MessageNames.LogicalAddress: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "LogicalAddress"),
  ]
}

extension SwiftUnittest_Names_MessageNames.PhysicalAddress: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "PhysicalAddress"),
  ]
}

extension SwiftUnittest_Names_MessageNames.ByteCount: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ByteCount"),
  ]
}

extension SwiftUnittest_Names_MessageNames.ByteOffset: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ByteOffset"),
  ]
}

extension SwiftUnittest_Names_MessageNames.Duration: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Duration"),
  ]
}

extension SwiftUnittest_Names_MessageNames.AbsoluteTime: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "AbsoluteTime"),
  ]
}

extension SwiftUnittest_Names_MessageNames.OptionBits: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "OptionBits"),
  ]
}

extension SwiftUnittest_Names_MessageNames.ItemCount: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ItemCount"),
  ]
}

extension SwiftUnittest_Names_MessageNames.PBVersion: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "PBVersion"),
  ]
}

extension SwiftUnittest_Names_MessageNames.ScriptCode: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ScriptCode"),
  ]
}

extension SwiftUnittest_Names_MessageNames.LangCode: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "LangCode"),
  ]
}

extension SwiftUnittest_Names_MessageNames.RegionCode: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "RegionCode"),
  ]
}

extension SwiftUnittest_Names_MessageNames.OSType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "OSType"),
  ]
}

extension SwiftUnittest_Names_MessageNames.ProcessSerialNumber: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ProcessSerialNumber"),
  ]
}

extension SwiftUnittest_Names_MessageNames.Point: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Point"),
  ]
}

extension SwiftUnittest_Names_MessageNames.Rect: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Rect"),
  ]
}

extension SwiftUnittest_Names_MessageNames.FixedPoint: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "FixedPoint"),
  ]
}

extension SwiftUnittest_Names_MessageNames.FixedRect: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "FixedRect"),
  ]
}

extension SwiftUnittest_Names_MessageNames.Style: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Style"),
  ]
}

extension SwiftUnittest_Names_MessageNames.StyleParameter: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "StyleParameter"),
  ]
}

extension SwiftUnittest_Names_MessageNames.StyleField: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "StyleField"),
  ]
}

extension SwiftUnittest_Names_MessageNames.TimeScale: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "TimeScale"),
  ]
}

extension SwiftUnittest_Names_MessageNames.TimeBase: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "TimeBase"),
  ]
}

extension SwiftUnittest_Names_MessageNames.TimeRecord: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "TimeRecord"),
  ]
}

extension SwiftUnittest_Names_MessageNames.serializedData: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "serializedData"),
  ]
}

extension SwiftUnittest_Names_MessageNames.jsonUTF8Data: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "jsonUTF8Data"),
  ]
}

extension SwiftUnittest_Names_MessageNames.jsonString: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "jsonString"),
  ]
}

extension SwiftUnittest_Names_MessageNames.Extension: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Extension"),
  ]
}

extension SwiftUnittest_Names_MessageNames.ExtensionsMessage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Extensions"),
  ]
}

extension SwiftUnittest_Names_EnumNames: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()
}

extension SwiftUnittest_Names_EnumNames.StringEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aString"),
  ]
}

extension SwiftUnittest_Names_EnumNames.ProtocolEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aProtocol"),
  ]
}

extension SwiftUnittest_Names_EnumNames.IntEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aInt"),
  ]
}

extension SwiftUnittest_Names_EnumNames.DoubleEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aDouble"),
  ]
}

extension SwiftUnittest_Names_EnumNames.FloatEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aFloat"),
  ]
}

extension SwiftUnittest_Names_EnumNames.UIntEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aUInt"),
  ]
}

extension SwiftUnittest_Names_EnumNames.hashValueEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ahashValue"),
  ]
}

extension SwiftUnittest_Names_EnumNames.descriptionEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "adescription"),
  ]
}

extension SwiftUnittest_Names_EnumNames.debugDescriptionEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "adebugDescription"),
  ]
}

extension SwiftUnittest_Names_EnumNames.Swift: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aSwift"),
  ]
}

extension SwiftUnittest_Names_EnumNames.UNRECOGNIZED: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aUNRECOGNIZED"),
  ]
}

extension SwiftUnittest_Names_EnumNames.classEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aclass"),
  ]
}

extension SwiftUnittest_Names_EnumNames.deinitEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "adeinit"),
  ]
}

extension SwiftUnittest_Names_EnumNames.enumEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aenum"),
  ]
}

extension SwiftUnittest_Names_EnumNames.extensionEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aextension"),
  ]
}

extension SwiftUnittest_Names_EnumNames.funcEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "afunc"),
  ]
}

extension SwiftUnittest_Names_EnumNames.importEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aimport"),
  ]
}

extension SwiftUnittest_Names_EnumNames.initEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ainit"),
  ]
}

extension SwiftUnittest_Names_EnumNames.inoutEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ainout"),
  ]
}

extension SwiftUnittest_Names_EnumNames.internalEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ainternal"),
  ]
}

extension SwiftUnittest_Names_EnumNames.letEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "alet"),
  ]
}

extension SwiftUnittest_Names_EnumNames.operatorEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aoperator"),
  ]
}

extension SwiftUnittest_Names_EnumNames.privateEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aprivate"),
  ]
}

extension SwiftUnittest_Names_EnumNames.protocolEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aprotocol"),
  ]
}

extension SwiftUnittest_Names_EnumNames.publicEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "apublic"),
  ]
}

extension SwiftUnittest_Names_EnumNames.staticEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "astatic"),
  ]
}

extension SwiftUnittest_Names_EnumNames.structEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "astruct"),
  ]
}

extension SwiftUnittest_Names_EnumNames.subscriptEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "asubscript"),
  ]
}

extension SwiftUnittest_Names_EnumNames.typealiasEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "atypealias"),
  ]
}

extension SwiftUnittest_Names_EnumNames.varEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "avar"),
  ]
}

extension SwiftUnittest_Names_EnumNames.breakEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "abreak"),
  ]
}

extension SwiftUnittest_Names_EnumNames.caseEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "acase"),
  ]
}

extension SwiftUnittest_Names_EnumNames.continueEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "acontinue"),
  ]
}

extension SwiftUnittest_Names_EnumNames.defaultEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "adefault"),
  ]
}

extension SwiftUnittest_Names_EnumNames.deferEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "adefer"),
  ]
}

extension SwiftUnittest_Names_EnumNames.doEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ado"),
  ]
}

extension SwiftUnittest_Names_EnumNames.elseEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aelse"),
  ]
}

extension SwiftUnittest_Names_EnumNames.fallthroughEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "afallthrough"),
  ]
}

extension SwiftUnittest_Names_EnumNames.forEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "afor"),
  ]
}

extension SwiftUnittest_Names_EnumNames.guardEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aguard"),
  ]
}

extension SwiftUnittest_Names_EnumNames.ifEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aif"),
  ]
}

extension SwiftUnittest_Names_EnumNames.inEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ain"),
  ]
}

extension SwiftUnittest_Names_EnumNames.repeatEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "arepeat"),
  ]
}

extension SwiftUnittest_Names_EnumNames.returnEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "areturn"),
  ]
}

extension SwiftUnittest_Names_EnumNames.switchEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aswitch"),
  ]
}

extension SwiftUnittest_Names_EnumNames.whereEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "awhere"),
  ]
}

extension SwiftUnittest_Names_EnumNames.whileEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "awhile"),
  ]
}

extension SwiftUnittest_Names_EnumNames.asEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aas"),
  ]
}

extension SwiftUnittest_Names_EnumNames.catchEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "acatch"),
  ]
}

extension SwiftUnittest_Names_EnumNames.dynamicTypeEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "adynamicType"),
  ]
}

extension SwiftUnittest_Names_EnumNames.falseEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "afalse"),
  ]
}

extension SwiftUnittest_Names_EnumNames.isEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ais"),
  ]
}

extension SwiftUnittest_Names_EnumNames.nilEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "anil"),
  ]
}

extension SwiftUnittest_Names_EnumNames.rethrowsEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "arethrows"),
  ]
}

extension SwiftUnittest_Names_EnumNames.superEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "asuper"),
  ]
}

extension SwiftUnittest_Names_EnumNames.selfEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aself"),
  ]
}

extension SwiftUnittest_Names_EnumNames.throwEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "athrow"),
  ]
}

extension SwiftUnittest_Names_EnumNames.throwsEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "athrows"),
  ]
}

extension SwiftUnittest_Names_EnumNames.trueEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "atrue"),
  ]
}

extension SwiftUnittest_Names_EnumNames.tryEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "atry"),
  ]
}

extension SwiftUnittest_Names_EnumNames.__COLUMN__Enum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "a__COLUMN__"),
  ]
}

extension SwiftUnittest_Names_EnumNames.__FILE__Enum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "a__FILE__"),
  ]
}

extension SwiftUnittest_Names_EnumNames.__FUNCTION__Enum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "a__FUNCTION__"),
  ]
}

extension SwiftUnittest_Names_EnumNames.__LINE__Enum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "a__LINE__"),
  ]
}

extension SwiftUnittest_Names_EnumNames._Enum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "a_"),
  ]
}

extension SwiftUnittest_Names_EnumNames.__Enum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "a__"),
  ]
}

extension SwiftUnittest_Names_EnumNames.associativity: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aassociativity"),
  ]
}

extension SwiftUnittest_Names_EnumNames.convenience: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aconvenience"),
  ]
}

extension SwiftUnittest_Names_EnumNames.dynamic: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "adynamic"),
  ]
}

extension SwiftUnittest_Names_EnumNames.didSet: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "adidSet"),
  ]
}

extension SwiftUnittest_Names_EnumNames.final: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "afinal"),
  ]
}

extension SwiftUnittest_Names_EnumNames.get: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aget"),
  ]
}

extension SwiftUnittest_Names_EnumNames.infix: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ainfix"),
  ]
}

extension SwiftUnittest_Names_EnumNames.indirect: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aindirect"),
  ]
}

extension SwiftUnittest_Names_EnumNames.lazy: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "alazy"),
  ]
}

extension SwiftUnittest_Names_EnumNames.left: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aleft"),
  ]
}

extension SwiftUnittest_Names_EnumNames.mutating: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "amutating"),
  ]
}

extension SwiftUnittest_Names_EnumNames.none: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "anone"),
  ]
}

extension SwiftUnittest_Names_EnumNames.nonmutating: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "anonmutating"),
  ]
}

extension SwiftUnittest_Names_EnumNames.optional: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aoptional"),
  ]
}

extension SwiftUnittest_Names_EnumNames.override: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aoverride"),
  ]
}

extension SwiftUnittest_Names_EnumNames.postfix: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "apostfix"),
  ]
}

extension SwiftUnittest_Names_EnumNames.precedence: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aprecedence"),
  ]
}

extension SwiftUnittest_Names_EnumNames.prefix: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aprefix"),
  ]
}

extension SwiftUnittest_Names_EnumNames.required: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "arequired"),
  ]
}

extension SwiftUnittest_Names_EnumNames.right: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aright"),
  ]
}

extension SwiftUnittest_Names_EnumNames.set: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aset"),
  ]
}

extension SwiftUnittest_Names_EnumNames.TypeEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aType"),
  ]
}

extension SwiftUnittest_Names_EnumNames.unowned: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aunowned"),
  ]
}

extension SwiftUnittest_Names_EnumNames.weak: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aweak"),
  ]
}

extension SwiftUnittest_Names_EnumNames.willSet: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "awillSet"),
  ]
}

extension SwiftUnittest_Names_EnumNames.id: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aid"),
  ]
}

extension SwiftUnittest_Names_EnumNames._cmd: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "a_cmd"),
  ]
}

extension SwiftUnittest_Names_EnumNames.out: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aout"),
  ]
}

extension SwiftUnittest_Names_EnumNames.bycopy: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "abycopy"),
  ]
}

extension SwiftUnittest_Names_EnumNames.byref: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "abyref"),
  ]
}

extension SwiftUnittest_Names_EnumNames.oneway: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aoneway"),
  ]
}

extension SwiftUnittest_Names_EnumNames.and: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aand"),
  ]
}

extension SwiftUnittest_Names_EnumNames.and_eq: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aand_eq"),
  ]
}

extension SwiftUnittest_Names_EnumNames.alignas: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aalignas"),
  ]
}

extension SwiftUnittest_Names_EnumNames.alignof: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aalignof"),
  ]
}

extension SwiftUnittest_Names_EnumNames.asm: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aasm"),
  ]
}

extension SwiftUnittest_Names_EnumNames.auto: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aauto"),
  ]
}

extension SwiftUnittest_Names_EnumNames.bitand: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "abitand"),
  ]
}

extension SwiftUnittest_Names_EnumNames.bitor: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "abitor"),
  ]
}

extension SwiftUnittest_Names_EnumNames.bool: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "abool"),
  ]
}

extension SwiftUnittest_Names_EnumNames.char: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "achar"),
  ]
}

extension SwiftUnittest_Names_EnumNames.char16_t: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "achar16_t"),
  ]
}

extension SwiftUnittest_Names_EnumNames.char32_t: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "achar32_t"),
  ]
}

extension SwiftUnittest_Names_EnumNames.compl: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "acompl"),
  ]
}

extension SwiftUnittest_Names_EnumNames.const: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aconst"),
  ]
}

extension SwiftUnittest_Names_EnumNames.constexpr: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aconstexpr"),
  ]
}

extension SwiftUnittest_Names_EnumNames.const_cast: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aconst_cast"),
  ]
}

extension SwiftUnittest_Names_EnumNames.decltype: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "adecltype"),
  ]
}

extension SwiftUnittest_Names_EnumNames.delete: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "adelete"),
  ]
}

extension SwiftUnittest_Names_EnumNames.dynamic_cast: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "adynamic_cast"),
  ]
}

extension SwiftUnittest_Names_EnumNames.explicit: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aexplicit"),
  ]
}

extension SwiftUnittest_Names_EnumNames.export: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aexport"),
  ]
}

extension SwiftUnittest_Names_EnumNames.extern: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aextern"),
  ]
}

extension SwiftUnittest_Names_EnumNames.friend: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "afriend"),
  ]
}

extension SwiftUnittest_Names_EnumNames.goto: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "agoto"),
  ]
}

extension SwiftUnittest_Names_EnumNames.inline: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ainline"),
  ]
}

extension SwiftUnittest_Names_EnumNames.long: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "along"),
  ]
}

extension SwiftUnittest_Names_EnumNames.mutable: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "amutable"),
  ]
}

extension SwiftUnittest_Names_EnumNames.namespace: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "anamespace"),
  ]
}

extension SwiftUnittest_Names_EnumNames.new: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "anew"),
  ]
}

extension SwiftUnittest_Names_EnumNames.noexcept: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "anoexcept"),
  ]
}

extension SwiftUnittest_Names_EnumNames.not: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "anot"),
  ]
}

extension SwiftUnittest_Names_EnumNames.not_eq: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "anot_eq"),
  ]
}

extension SwiftUnittest_Names_EnumNames.nullptr: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "anullptr"),
  ]
}

extension SwiftUnittest_Names_EnumNames.or: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aor"),
  ]
}

extension SwiftUnittest_Names_EnumNames.or_eq: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aor_eq"),
  ]
}

extension SwiftUnittest_Names_EnumNames.protected: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aprotected"),
  ]
}

extension SwiftUnittest_Names_EnumNames.register: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aregister"),
  ]
}

extension SwiftUnittest_Names_EnumNames.reinterpret_cast: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "areinterpret_cast"),
  ]
}

extension SwiftUnittest_Names_EnumNames.short: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ashort"),
  ]
}

extension SwiftUnittest_Names_EnumNames.signed: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "asigned"),
  ]
}

extension SwiftUnittest_Names_EnumNames.sizeof: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "asizeof"),
  ]
}

extension SwiftUnittest_Names_EnumNames.static_assert: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "astatic_assert"),
  ]
}

extension SwiftUnittest_Names_EnumNames.static_cast: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "astatic_cast"),
  ]
}

extension SwiftUnittest_Names_EnumNames.template: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "atemplate"),
  ]
}

extension SwiftUnittest_Names_EnumNames.this: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "athis"),
  ]
}

extension SwiftUnittest_Names_EnumNames.thread_local: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "athread_local"),
  ]
}

extension SwiftUnittest_Names_EnumNames.typedef: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "atypedef"),
  ]
}

extension SwiftUnittest_Names_EnumNames.typeid: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "atypeid"),
  ]
}

extension SwiftUnittest_Names_EnumNames.typename: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "atypename"),
  ]
}

extension SwiftUnittest_Names_EnumNames.union: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aunion"),
  ]
}

extension SwiftUnittest_Names_EnumNames.unsigned: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aunsigned"),
  ]
}

extension SwiftUnittest_Names_EnumNames.using: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ausing"),
  ]
}

extension SwiftUnittest_Names_EnumNames.virtual: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "avirtual"),
  ]
}

extension SwiftUnittest_Names_EnumNames.void: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "avoid"),
  ]
}

extension SwiftUnittest_Names_EnumNames.volatile: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "avolatile"),
  ]
}

extension SwiftUnittest_Names_EnumNames.wchar_t: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "awchar_t"),
  ]
}

extension SwiftUnittest_Names_EnumNames.xor: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "axor"),
  ]
}

extension SwiftUnittest_Names_EnumNames.xor_eq: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "axor_eq"),
  ]
}

extension SwiftUnittest_Names_EnumNames.restrict: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "arestrict"),
  ]
}

extension SwiftUnittest_Names_EnumNames.Category: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aCategory"),
  ]
}

extension SwiftUnittest_Names_EnumNames.Ivar: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aIvar"),
  ]
}

extension SwiftUnittest_Names_EnumNames.Method: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aMethod"),
  ]
}

extension SwiftUnittest_Names_EnumNames.finalize: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "afinalize"),
  ]
}

extension SwiftUnittest_Names_EnumNames.hash: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ahash"),
  ]
}

extension SwiftUnittest_Names_EnumNames.dealloc: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "adealloc"),
  ]
}

extension SwiftUnittest_Names_EnumNames.superclass: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "asuperclass"),
  ]
}

extension SwiftUnittest_Names_EnumNames.retain: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aretain"),
  ]
}

extension SwiftUnittest_Names_EnumNames.release: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "arelease"),
  ]
}

extension SwiftUnittest_Names_EnumNames.autorelease: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aautorelease"),
  ]
}

extension SwiftUnittest_Names_EnumNames.retainCount: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aretainCount"),
  ]
}

extension SwiftUnittest_Names_EnumNames.zone: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "azone"),
  ]
}

extension SwiftUnittest_Names_EnumNames.isProxy: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aisProxy"),
  ]
}

extension SwiftUnittest_Names_EnumNames.copy: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "acopy"),
  ]
}

extension SwiftUnittest_Names_EnumNames.mutableCopy: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "amutableCopy"),
  ]
}

extension SwiftUnittest_Names_EnumNames.classForCoder: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aclassForCoder"),
  ]
}

extension SwiftUnittest_Names_EnumNames.clear: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aclear"),
  ]
}

extension SwiftUnittest_Names_EnumNames.data: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "adata"),
  ]
}

extension SwiftUnittest_Names_EnumNames.delimitedData: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "adelimitedData"),
  ]
}

extension SwiftUnittest_Names_EnumNames.descriptor: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "adescriptor"),
  ]
}

extension SwiftUnittest_Names_EnumNames.extensionRegistry: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aextensionRegistry"),
  ]
}

extension SwiftUnittest_Names_EnumNames.extensionsCurrentlySet: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aextensionsCurrentlySet"),
  ]
}

extension SwiftUnittest_Names_EnumNames.isInitializedEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aisInitialized"),
  ]
}

extension SwiftUnittest_Names_EnumNames.serializedSize: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aserializedSize"),
  ]
}

extension SwiftUnittest_Names_EnumNames.sortedExtensionsInUse: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "asortedExtensionsInUse"),
  ]
}

extension SwiftUnittest_Names_EnumNames.unknownFieldsEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aunknownFields"),
  ]
}

extension SwiftUnittest_Names_EnumNames.Fixed: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aFixed"),
  ]
}

extension SwiftUnittest_Names_EnumNames.Fract: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aFract"),
  ]
}

extension SwiftUnittest_Names_EnumNames.Size: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aSize"),
  ]
}

extension SwiftUnittest_Names_EnumNames.LogicalAddress: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aLogicalAddress"),
  ]
}

extension SwiftUnittest_Names_EnumNames.PhysicalAddress: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aPhysicalAddress"),
  ]
}

extension SwiftUnittest_Names_EnumNames.ByteCount: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aByteCount"),
  ]
}

extension SwiftUnittest_Names_EnumNames.ByteOffset: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aByteOffset"),
  ]
}

extension SwiftUnittest_Names_EnumNames.Duration: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aDuration"),
  ]
}

extension SwiftUnittest_Names_EnumNames.AbsoluteTime: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aAbsoluteTime"),
  ]
}

extension SwiftUnittest_Names_EnumNames.OptionBits: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aOptionBits"),
  ]
}

extension SwiftUnittest_Names_EnumNames.ItemCount: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aItemCount"),
  ]
}

extension SwiftUnittest_Names_EnumNames.PBVersion: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aPBVersion"),
  ]
}

extension SwiftUnittest_Names_EnumNames.ScriptCode: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aScriptCode"),
  ]
}

extension SwiftUnittest_Names_EnumNames.LangCode: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aLangCode"),
  ]
}

extension SwiftUnittest_Names_EnumNames.RegionCode: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aRegionCode"),
  ]
}

extension SwiftUnittest_Names_EnumNames.OSType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aOSType"),
  ]
}

extension SwiftUnittest_Names_EnumNames.ProcessSerialNumber: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aProcessSerialNumber"),
  ]
}

extension SwiftUnittest_Names_EnumNames.Point: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aPoint"),
  ]
}

extension SwiftUnittest_Names_EnumNames.Rect: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aRect"),
  ]
}

extension SwiftUnittest_Names_EnumNames.FixedPoint: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aFixedPoint"),
  ]
}

extension SwiftUnittest_Names_EnumNames.FixedRect: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aFixedRect"),
  ]
}

extension SwiftUnittest_Names_EnumNames.Style: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aStyle"),
  ]
}

extension SwiftUnittest_Names_EnumNames.StyleParameter: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aStyleParameter"),
  ]
}

extension SwiftUnittest_Names_EnumNames.StyleField: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aStyleField"),
  ]
}

extension SwiftUnittest_Names_EnumNames.TimeScale: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aTimeScale"),
  ]
}

extension SwiftUnittest_Names_EnumNames.TimeBase: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aTimeBase"),
  ]
}

extension SwiftUnittest_Names_EnumNames.TimeRecord: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aTimeRecord"),
  ]
}

extension SwiftUnittest_Names_EnumNames.Extension: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aExtension"),
  ]
}

extension SwiftUnittest_Names_EnumNames.ExtensionsEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aExtensions"),
  ]
}

extension SwiftUnittest_Names_FieldNamingInitials: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()
}

extension SwiftUnittest_Names_FieldNamingInitials.Lowers: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "http"),
    2: .standard(proto: "http_request"),
    3: .standard(proto: "the_http_request"),
    4: .standard(proto: "the_http"),
    11: .same(proto: "https"),
    12: .standard(proto: "https_request"),
    13: .standard(proto: "the_https_request"),
    14: .standard(proto: "the_https"),
    21: .same(proto: "url"),
    22: .standard(proto: "url_value"),
    23: .standard(proto: "the_url_value"),
    24: .standard(proto: "the_url"),
    31: .standard(proto: "a_b_c"),
    41: .same(proto: "id"),
    42: .standard(proto: "id_number"),
    43: .standard(proto: "the_id_number"),
    44: .standard(proto: "request_id"),
  ]
}

extension SwiftUnittest_Names_FieldNamingInitials.Uppers: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "HTTP"),
    2: .standard(proto: "HTTP_request"),
    3: .standard(proto: "the_HTTP_request"),
    4: .standard(proto: "the_HTTP"),
    11: .same(proto: "HTTPS"),
    12: .standard(proto: "HTTPS_request"),
    13: .standard(proto: "the_HTTPS_request"),
    14: .standard(proto: "the_HTTPS"),
    21: .same(proto: "URL"),
    22: .standard(proto: "URL_value"),
    23: .standard(proto: "the_URL_value"),
    24: .standard(proto: "the_URL"),
    41: .same(proto: "ID"),
    42: .standard(proto: "ID_number"),
    43: .standard(proto: "the_ID_number"),
    44: .standard(proto: "request_ID"),
  ]
}

extension SwiftUnittest_Names_FieldNamingInitials.WordCase: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Http"),
    2: .same(proto: "HttpRequest"),
    3: .same(proto: "TheHttpRequest"),
    4: .same(proto: "TheHttp"),
    11: .same(proto: "Https"),
    12: .same(proto: "HttpsRequest"),
    13: .same(proto: "TheHttpsRequest"),
    14: .same(proto: "TheHttps"),
    21: .same(proto: "Url"),
    22: .same(proto: "UrlValue"),
    23: .same(proto: "TheUrlValue"),
    24: .same(proto: "TheUrl"),
    41: .same(proto: "Id"),
    42: .same(proto: "IdNumber"),
    43: .same(proto: "TheIdNumber"),
    44: .same(proto: "RequestId"),
  ]
}

extension SwiftUnittest_Names_ExtensionNamingInitials: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()
}

extension SwiftUnittest_Names_Lowers: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()
}

extension SwiftUnittest_Names_Uppers: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()
}

extension SwiftUnittest_Names_WordCase: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()
}

extension SwiftUnittest_Names_ExtensionNamingInitialsLowers: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()
}

extension SwiftUnittest_Names_ExtensionNamingInitialsUppers: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()
}

extension SwiftUnittest_Names_ExtensionNamingInitialsWordCase: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()
}

extension SwiftUnittest_Names_ValidIdentifiers: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "_1field"),
    2: .standard(proto: "_field"),
    3: .standard(proto: "_3field_3"),
    4: .standard(proto: "_4"),
    5: .standard(proto: "_5field"),
    6: .standard(proto: "enum_field"),
  ]
}

extension SwiftUnittest_Names_ValidIdentifiers.TestEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "TEST_ENUM_0"),
    1: .same(proto: "TEST_ENUM_FIRST"),
    2: .same(proto: "_2"),
    3: .same(proto: "_3_VALUE"),
  ]
}

extension SwiftUnittest_Names_SpecialNames1: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "str"),
  ]
}

extension SwiftUnittest_Names_SpecialNames2: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "new_value"),
  ]
}

extension SwiftUnittest_Names_SpecialNames3: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "str"),
    2: .standard(proto: "forces_storage"),
  ]
}

extension SwiftUnittest_Names_SpecialNames4: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "new_value"),
    2: .standard(proto: "forces_storage"),
  ]
}
