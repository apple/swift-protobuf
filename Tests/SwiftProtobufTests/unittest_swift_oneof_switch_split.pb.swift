// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: unittest_swift_oneof_switch_split.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Protos/Tests/SwiftProtobufTests/unittest_swift_oneof_switch_split.proto
// Test for switch statement splitting in oneof traverse generation
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2025 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See http://swift.org/LICENSE.txt for license information
// See http://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
// -----------------------------------------------------------------------------
///
/// This message tests oneof switch splitting with interleaved non-oneof fields.
/// - Regular field at 251 breaks oneof into two chunks
/// - Regular field at 502 breaks oneof into more chunks
/// - With maxCasesInSwitch=500, first chunk (1-250) fits in one switch
/// - Second chunk (252-501) needs to be split into two switches (250 fields each)
/// - Third chunk (503-510) fits in one switch
///
// -----------------------------------------------------------------------------

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct SwiftProtoTesting_SwitchSplit_SwitchSplitMessage: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Regular fields that split the oneof into chunks
  var regularField251: Int32 {
    get {return _regularField251 ?? 0}
    set {_regularField251 = newValue}
  }
  /// Returns true if `regularField251` has been explicitly set.
  var hasRegularField251: Bool {return self._regularField251 != nil}
  /// Clears the value of `regularField251`. Subsequent reads from it will return its default value.
  mutating func clearRegularField251() {self._regularField251 = nil}

  var regularField502: Int32 {
    get {return _regularField502 ?? 0}
    set {_regularField502 = newValue}
  }
  /// Returns true if `regularField502` has been explicitly set.
  var hasRegularField502: Bool {return self._regularField502 != nil}
  /// Clears the value of `regularField502`. Subsequent reads from it will return its default value.
  mutating func clearRegularField502() {self._regularField502 = nil}

  var value: SwiftProtoTesting_SwitchSplit_SwitchSplitMessage.OneOf_Value? = nil

  var field001: Int32 {
    get {
      if case .field001(let v)? = value {return v}
      return 0
    }
    set {value = .field001(newValue)}
  }

  var field002: Int32 {
    get {
      if case .field002(let v)? = value {return v}
      return 0
    }
    set {value = .field002(newValue)}
  }

  var field003: Int32 {
    get {
      if case .field003(let v)? = value {return v}
      return 0
    }
    set {value = .field003(newValue)}
  }

  var field004: Int32 {
    get {
      if case .field004(let v)? = value {return v}
      return 0
    }
    set {value = .field004(newValue)}
  }

  var field005: Int32 {
    get {
      if case .field005(let v)? = value {return v}
      return 0
    }
    set {value = .field005(newValue)}
  }

  var field006: Int32 {
    get {
      if case .field006(let v)? = value {return v}
      return 0
    }
    set {value = .field006(newValue)}
  }

  var field007: Int32 {
    get {
      if case .field007(let v)? = value {return v}
      return 0
    }
    set {value = .field007(newValue)}
  }

  var field008: Int32 {
    get {
      if case .field008(let v)? = value {return v}
      return 0
    }
    set {value = .field008(newValue)}
  }

  var field009: Int32 {
    get {
      if case .field009(let v)? = value {return v}
      return 0
    }
    set {value = .field009(newValue)}
  }

  var field010: Int32 {
    get {
      if case .field010(let v)? = value {return v}
      return 0
    }
    set {value = .field010(newValue)}
  }

  var field011: Int32 {
    get {
      if case .field011(let v)? = value {return v}
      return 0
    }
    set {value = .field011(newValue)}
  }

  var field012: Int32 {
    get {
      if case .field012(let v)? = value {return v}
      return 0
    }
    set {value = .field012(newValue)}
  }

  var field013: Int32 {
    get {
      if case .field013(let v)? = value {return v}
      return 0
    }
    set {value = .field013(newValue)}
  }

  var field014: Int32 {
    get {
      if case .field014(let v)? = value {return v}
      return 0
    }
    set {value = .field014(newValue)}
  }

  var field015: Int32 {
    get {
      if case .field015(let v)? = value {return v}
      return 0
    }
    set {value = .field015(newValue)}
  }

  var field016: Int32 {
    get {
      if case .field016(let v)? = value {return v}
      return 0
    }
    set {value = .field016(newValue)}
  }

  var field017: Int32 {
    get {
      if case .field017(let v)? = value {return v}
      return 0
    }
    set {value = .field017(newValue)}
  }

  var field018: Int32 {
    get {
      if case .field018(let v)? = value {return v}
      return 0
    }
    set {value = .field018(newValue)}
  }

  var field019: Int32 {
    get {
      if case .field019(let v)? = value {return v}
      return 0
    }
    set {value = .field019(newValue)}
  }

  var field020: Int32 {
    get {
      if case .field020(let v)? = value {return v}
      return 0
    }
    set {value = .field020(newValue)}
  }

  var field021: Int32 {
    get {
      if case .field021(let v)? = value {return v}
      return 0
    }
    set {value = .field021(newValue)}
  }

  var field022: Int32 {
    get {
      if case .field022(let v)? = value {return v}
      return 0
    }
    set {value = .field022(newValue)}
  }

  var field023: Int32 {
    get {
      if case .field023(let v)? = value {return v}
      return 0
    }
    set {value = .field023(newValue)}
  }

  var field024: Int32 {
    get {
      if case .field024(let v)? = value {return v}
      return 0
    }
    set {value = .field024(newValue)}
  }

  var field025: Int32 {
    get {
      if case .field025(let v)? = value {return v}
      return 0
    }
    set {value = .field025(newValue)}
  }

  var field026: Int32 {
    get {
      if case .field026(let v)? = value {return v}
      return 0
    }
    set {value = .field026(newValue)}
  }

  var field027: Int32 {
    get {
      if case .field027(let v)? = value {return v}
      return 0
    }
    set {value = .field027(newValue)}
  }

  var field028: Int32 {
    get {
      if case .field028(let v)? = value {return v}
      return 0
    }
    set {value = .field028(newValue)}
  }

  var field029: Int32 {
    get {
      if case .field029(let v)? = value {return v}
      return 0
    }
    set {value = .field029(newValue)}
  }

  var field030: Int32 {
    get {
      if case .field030(let v)? = value {return v}
      return 0
    }
    set {value = .field030(newValue)}
  }

  var field031: Int32 {
    get {
      if case .field031(let v)? = value {return v}
      return 0
    }
    set {value = .field031(newValue)}
  }

  var field032: Int32 {
    get {
      if case .field032(let v)? = value {return v}
      return 0
    }
    set {value = .field032(newValue)}
  }

  var field033: Int32 {
    get {
      if case .field033(let v)? = value {return v}
      return 0
    }
    set {value = .field033(newValue)}
  }

  var field034: Int32 {
    get {
      if case .field034(let v)? = value {return v}
      return 0
    }
    set {value = .field034(newValue)}
  }

  var field035: Int32 {
    get {
      if case .field035(let v)? = value {return v}
      return 0
    }
    set {value = .field035(newValue)}
  }

  var field036: Int32 {
    get {
      if case .field036(let v)? = value {return v}
      return 0
    }
    set {value = .field036(newValue)}
  }

  var field037: Int32 {
    get {
      if case .field037(let v)? = value {return v}
      return 0
    }
    set {value = .field037(newValue)}
  }

  var field038: Int32 {
    get {
      if case .field038(let v)? = value {return v}
      return 0
    }
    set {value = .field038(newValue)}
  }

  var field039: Int32 {
    get {
      if case .field039(let v)? = value {return v}
      return 0
    }
    set {value = .field039(newValue)}
  }

  var field040: Int32 {
    get {
      if case .field040(let v)? = value {return v}
      return 0
    }
    set {value = .field040(newValue)}
  }

  var field041: Int32 {
    get {
      if case .field041(let v)? = value {return v}
      return 0
    }
    set {value = .field041(newValue)}
  }

  var field042: Int32 {
    get {
      if case .field042(let v)? = value {return v}
      return 0
    }
    set {value = .field042(newValue)}
  }

  var field043: Int32 {
    get {
      if case .field043(let v)? = value {return v}
      return 0
    }
    set {value = .field043(newValue)}
  }

  var field044: Int32 {
    get {
      if case .field044(let v)? = value {return v}
      return 0
    }
    set {value = .field044(newValue)}
  }

  var field045: Int32 {
    get {
      if case .field045(let v)? = value {return v}
      return 0
    }
    set {value = .field045(newValue)}
  }

  var field046: Int32 {
    get {
      if case .field046(let v)? = value {return v}
      return 0
    }
    set {value = .field046(newValue)}
  }

  var field047: Int32 {
    get {
      if case .field047(let v)? = value {return v}
      return 0
    }
    set {value = .field047(newValue)}
  }

  var field048: Int32 {
    get {
      if case .field048(let v)? = value {return v}
      return 0
    }
    set {value = .field048(newValue)}
  }

  var field049: Int32 {
    get {
      if case .field049(let v)? = value {return v}
      return 0
    }
    set {value = .field049(newValue)}
  }

  var field050: Int32 {
    get {
      if case .field050(let v)? = value {return v}
      return 0
    }
    set {value = .field050(newValue)}
  }

  var field051: Int32 {
    get {
      if case .field051(let v)? = value {return v}
      return 0
    }
    set {value = .field051(newValue)}
  }

  var field052: Int32 {
    get {
      if case .field052(let v)? = value {return v}
      return 0
    }
    set {value = .field052(newValue)}
  }

  var field053: Int32 {
    get {
      if case .field053(let v)? = value {return v}
      return 0
    }
    set {value = .field053(newValue)}
  }

  var field054: Int32 {
    get {
      if case .field054(let v)? = value {return v}
      return 0
    }
    set {value = .field054(newValue)}
  }

  var field055: Int32 {
    get {
      if case .field055(let v)? = value {return v}
      return 0
    }
    set {value = .field055(newValue)}
  }

  var field056: Int32 {
    get {
      if case .field056(let v)? = value {return v}
      return 0
    }
    set {value = .field056(newValue)}
  }

  var field057: Int32 {
    get {
      if case .field057(let v)? = value {return v}
      return 0
    }
    set {value = .field057(newValue)}
  }

  var field058: Int32 {
    get {
      if case .field058(let v)? = value {return v}
      return 0
    }
    set {value = .field058(newValue)}
  }

  var field059: Int32 {
    get {
      if case .field059(let v)? = value {return v}
      return 0
    }
    set {value = .field059(newValue)}
  }

  var field060: Int32 {
    get {
      if case .field060(let v)? = value {return v}
      return 0
    }
    set {value = .field060(newValue)}
  }

  var field061: Int32 {
    get {
      if case .field061(let v)? = value {return v}
      return 0
    }
    set {value = .field061(newValue)}
  }

  var field062: Int32 {
    get {
      if case .field062(let v)? = value {return v}
      return 0
    }
    set {value = .field062(newValue)}
  }

  var field063: Int32 {
    get {
      if case .field063(let v)? = value {return v}
      return 0
    }
    set {value = .field063(newValue)}
  }

  var field064: Int32 {
    get {
      if case .field064(let v)? = value {return v}
      return 0
    }
    set {value = .field064(newValue)}
  }

  var field065: Int32 {
    get {
      if case .field065(let v)? = value {return v}
      return 0
    }
    set {value = .field065(newValue)}
  }

  var field066: Int32 {
    get {
      if case .field066(let v)? = value {return v}
      return 0
    }
    set {value = .field066(newValue)}
  }

  var field067: Int32 {
    get {
      if case .field067(let v)? = value {return v}
      return 0
    }
    set {value = .field067(newValue)}
  }

  var field068: Int32 {
    get {
      if case .field068(let v)? = value {return v}
      return 0
    }
    set {value = .field068(newValue)}
  }

  var field069: Int32 {
    get {
      if case .field069(let v)? = value {return v}
      return 0
    }
    set {value = .field069(newValue)}
  }

  var field070: Int32 {
    get {
      if case .field070(let v)? = value {return v}
      return 0
    }
    set {value = .field070(newValue)}
  }

  var field071: Int32 {
    get {
      if case .field071(let v)? = value {return v}
      return 0
    }
    set {value = .field071(newValue)}
  }

  var field072: Int32 {
    get {
      if case .field072(let v)? = value {return v}
      return 0
    }
    set {value = .field072(newValue)}
  }

  var field073: Int32 {
    get {
      if case .field073(let v)? = value {return v}
      return 0
    }
    set {value = .field073(newValue)}
  }

  var field074: Int32 {
    get {
      if case .field074(let v)? = value {return v}
      return 0
    }
    set {value = .field074(newValue)}
  }

  var field075: Int32 {
    get {
      if case .field075(let v)? = value {return v}
      return 0
    }
    set {value = .field075(newValue)}
  }

  var field076: Int32 {
    get {
      if case .field076(let v)? = value {return v}
      return 0
    }
    set {value = .field076(newValue)}
  }

  var field077: Int32 {
    get {
      if case .field077(let v)? = value {return v}
      return 0
    }
    set {value = .field077(newValue)}
  }

  var field078: Int32 {
    get {
      if case .field078(let v)? = value {return v}
      return 0
    }
    set {value = .field078(newValue)}
  }

  var field079: Int32 {
    get {
      if case .field079(let v)? = value {return v}
      return 0
    }
    set {value = .field079(newValue)}
  }

  var field080: Int32 {
    get {
      if case .field080(let v)? = value {return v}
      return 0
    }
    set {value = .field080(newValue)}
  }

  var field081: Int32 {
    get {
      if case .field081(let v)? = value {return v}
      return 0
    }
    set {value = .field081(newValue)}
  }

  var field082: Int32 {
    get {
      if case .field082(let v)? = value {return v}
      return 0
    }
    set {value = .field082(newValue)}
  }

  var field083: Int32 {
    get {
      if case .field083(let v)? = value {return v}
      return 0
    }
    set {value = .field083(newValue)}
  }

  var field084: Int32 {
    get {
      if case .field084(let v)? = value {return v}
      return 0
    }
    set {value = .field084(newValue)}
  }

  var field085: Int32 {
    get {
      if case .field085(let v)? = value {return v}
      return 0
    }
    set {value = .field085(newValue)}
  }

  var field086: Int32 {
    get {
      if case .field086(let v)? = value {return v}
      return 0
    }
    set {value = .field086(newValue)}
  }

  var field087: Int32 {
    get {
      if case .field087(let v)? = value {return v}
      return 0
    }
    set {value = .field087(newValue)}
  }

  var field088: Int32 {
    get {
      if case .field088(let v)? = value {return v}
      return 0
    }
    set {value = .field088(newValue)}
  }

  var field089: Int32 {
    get {
      if case .field089(let v)? = value {return v}
      return 0
    }
    set {value = .field089(newValue)}
  }

  var field090: Int32 {
    get {
      if case .field090(let v)? = value {return v}
      return 0
    }
    set {value = .field090(newValue)}
  }

  var field091: Int32 {
    get {
      if case .field091(let v)? = value {return v}
      return 0
    }
    set {value = .field091(newValue)}
  }

  var field092: Int32 {
    get {
      if case .field092(let v)? = value {return v}
      return 0
    }
    set {value = .field092(newValue)}
  }

  var field093: Int32 {
    get {
      if case .field093(let v)? = value {return v}
      return 0
    }
    set {value = .field093(newValue)}
  }

  var field094: Int32 {
    get {
      if case .field094(let v)? = value {return v}
      return 0
    }
    set {value = .field094(newValue)}
  }

  var field095: Int32 {
    get {
      if case .field095(let v)? = value {return v}
      return 0
    }
    set {value = .field095(newValue)}
  }

  var field096: Int32 {
    get {
      if case .field096(let v)? = value {return v}
      return 0
    }
    set {value = .field096(newValue)}
  }

  var field097: Int32 {
    get {
      if case .field097(let v)? = value {return v}
      return 0
    }
    set {value = .field097(newValue)}
  }

  var field098: Int32 {
    get {
      if case .field098(let v)? = value {return v}
      return 0
    }
    set {value = .field098(newValue)}
  }

  var field099: Int32 {
    get {
      if case .field099(let v)? = value {return v}
      return 0
    }
    set {value = .field099(newValue)}
  }

  var field100: Int32 {
    get {
      if case .field100(let v)? = value {return v}
      return 0
    }
    set {value = .field100(newValue)}
  }

  var field101: Int32 {
    get {
      if case .field101(let v)? = value {return v}
      return 0
    }
    set {value = .field101(newValue)}
  }

  var field102: Int32 {
    get {
      if case .field102(let v)? = value {return v}
      return 0
    }
    set {value = .field102(newValue)}
  }

  var field103: Int32 {
    get {
      if case .field103(let v)? = value {return v}
      return 0
    }
    set {value = .field103(newValue)}
  }

  var field104: Int32 {
    get {
      if case .field104(let v)? = value {return v}
      return 0
    }
    set {value = .field104(newValue)}
  }

  var field105: Int32 {
    get {
      if case .field105(let v)? = value {return v}
      return 0
    }
    set {value = .field105(newValue)}
  }

  var field106: Int32 {
    get {
      if case .field106(let v)? = value {return v}
      return 0
    }
    set {value = .field106(newValue)}
  }

  var field107: Int32 {
    get {
      if case .field107(let v)? = value {return v}
      return 0
    }
    set {value = .field107(newValue)}
  }

  var field108: Int32 {
    get {
      if case .field108(let v)? = value {return v}
      return 0
    }
    set {value = .field108(newValue)}
  }

  var field109: Int32 {
    get {
      if case .field109(let v)? = value {return v}
      return 0
    }
    set {value = .field109(newValue)}
  }

  var field110: Int32 {
    get {
      if case .field110(let v)? = value {return v}
      return 0
    }
    set {value = .field110(newValue)}
  }

  var field111: Int32 {
    get {
      if case .field111(let v)? = value {return v}
      return 0
    }
    set {value = .field111(newValue)}
  }

  var field112: Int32 {
    get {
      if case .field112(let v)? = value {return v}
      return 0
    }
    set {value = .field112(newValue)}
  }

  var field113: Int32 {
    get {
      if case .field113(let v)? = value {return v}
      return 0
    }
    set {value = .field113(newValue)}
  }

  var field114: Int32 {
    get {
      if case .field114(let v)? = value {return v}
      return 0
    }
    set {value = .field114(newValue)}
  }

  var field115: Int32 {
    get {
      if case .field115(let v)? = value {return v}
      return 0
    }
    set {value = .field115(newValue)}
  }

  var field116: Int32 {
    get {
      if case .field116(let v)? = value {return v}
      return 0
    }
    set {value = .field116(newValue)}
  }

  var field117: Int32 {
    get {
      if case .field117(let v)? = value {return v}
      return 0
    }
    set {value = .field117(newValue)}
  }

  var field118: Int32 {
    get {
      if case .field118(let v)? = value {return v}
      return 0
    }
    set {value = .field118(newValue)}
  }

  var field119: Int32 {
    get {
      if case .field119(let v)? = value {return v}
      return 0
    }
    set {value = .field119(newValue)}
  }

  var field120: Int32 {
    get {
      if case .field120(let v)? = value {return v}
      return 0
    }
    set {value = .field120(newValue)}
  }

  var field121: Int32 {
    get {
      if case .field121(let v)? = value {return v}
      return 0
    }
    set {value = .field121(newValue)}
  }

  var field122: Int32 {
    get {
      if case .field122(let v)? = value {return v}
      return 0
    }
    set {value = .field122(newValue)}
  }

  var field123: Int32 {
    get {
      if case .field123(let v)? = value {return v}
      return 0
    }
    set {value = .field123(newValue)}
  }

  var field124: Int32 {
    get {
      if case .field124(let v)? = value {return v}
      return 0
    }
    set {value = .field124(newValue)}
  }

  var field125: Int32 {
    get {
      if case .field125(let v)? = value {return v}
      return 0
    }
    set {value = .field125(newValue)}
  }

  var field126: Int32 {
    get {
      if case .field126(let v)? = value {return v}
      return 0
    }
    set {value = .field126(newValue)}
  }

  var field127: Int32 {
    get {
      if case .field127(let v)? = value {return v}
      return 0
    }
    set {value = .field127(newValue)}
  }

  var field128: Int32 {
    get {
      if case .field128(let v)? = value {return v}
      return 0
    }
    set {value = .field128(newValue)}
  }

  var field129: Int32 {
    get {
      if case .field129(let v)? = value {return v}
      return 0
    }
    set {value = .field129(newValue)}
  }

  var field130: Int32 {
    get {
      if case .field130(let v)? = value {return v}
      return 0
    }
    set {value = .field130(newValue)}
  }

  var field131: Int32 {
    get {
      if case .field131(let v)? = value {return v}
      return 0
    }
    set {value = .field131(newValue)}
  }

  var field132: Int32 {
    get {
      if case .field132(let v)? = value {return v}
      return 0
    }
    set {value = .field132(newValue)}
  }

  var field133: Int32 {
    get {
      if case .field133(let v)? = value {return v}
      return 0
    }
    set {value = .field133(newValue)}
  }

  var field134: Int32 {
    get {
      if case .field134(let v)? = value {return v}
      return 0
    }
    set {value = .field134(newValue)}
  }

  var field135: Int32 {
    get {
      if case .field135(let v)? = value {return v}
      return 0
    }
    set {value = .field135(newValue)}
  }

  var field136: Int32 {
    get {
      if case .field136(let v)? = value {return v}
      return 0
    }
    set {value = .field136(newValue)}
  }

  var field137: Int32 {
    get {
      if case .field137(let v)? = value {return v}
      return 0
    }
    set {value = .field137(newValue)}
  }

  var field138: Int32 {
    get {
      if case .field138(let v)? = value {return v}
      return 0
    }
    set {value = .field138(newValue)}
  }

  var field139: Int32 {
    get {
      if case .field139(let v)? = value {return v}
      return 0
    }
    set {value = .field139(newValue)}
  }

  var field140: Int32 {
    get {
      if case .field140(let v)? = value {return v}
      return 0
    }
    set {value = .field140(newValue)}
  }

  var field141: Int32 {
    get {
      if case .field141(let v)? = value {return v}
      return 0
    }
    set {value = .field141(newValue)}
  }

  var field142: Int32 {
    get {
      if case .field142(let v)? = value {return v}
      return 0
    }
    set {value = .field142(newValue)}
  }

  var field143: Int32 {
    get {
      if case .field143(let v)? = value {return v}
      return 0
    }
    set {value = .field143(newValue)}
  }

  var field144: Int32 {
    get {
      if case .field144(let v)? = value {return v}
      return 0
    }
    set {value = .field144(newValue)}
  }

  var field145: Int32 {
    get {
      if case .field145(let v)? = value {return v}
      return 0
    }
    set {value = .field145(newValue)}
  }

  var field146: Int32 {
    get {
      if case .field146(let v)? = value {return v}
      return 0
    }
    set {value = .field146(newValue)}
  }

  var field147: Int32 {
    get {
      if case .field147(let v)? = value {return v}
      return 0
    }
    set {value = .field147(newValue)}
  }

  var field148: Int32 {
    get {
      if case .field148(let v)? = value {return v}
      return 0
    }
    set {value = .field148(newValue)}
  }

  var field149: Int32 {
    get {
      if case .field149(let v)? = value {return v}
      return 0
    }
    set {value = .field149(newValue)}
  }

  var field150: Int32 {
    get {
      if case .field150(let v)? = value {return v}
      return 0
    }
    set {value = .field150(newValue)}
  }

  var field151: Int32 {
    get {
      if case .field151(let v)? = value {return v}
      return 0
    }
    set {value = .field151(newValue)}
  }

  var field152: Int32 {
    get {
      if case .field152(let v)? = value {return v}
      return 0
    }
    set {value = .field152(newValue)}
  }

  var field153: Int32 {
    get {
      if case .field153(let v)? = value {return v}
      return 0
    }
    set {value = .field153(newValue)}
  }

  var field154: Int32 {
    get {
      if case .field154(let v)? = value {return v}
      return 0
    }
    set {value = .field154(newValue)}
  }

  var field155: Int32 {
    get {
      if case .field155(let v)? = value {return v}
      return 0
    }
    set {value = .field155(newValue)}
  }

  var field156: Int32 {
    get {
      if case .field156(let v)? = value {return v}
      return 0
    }
    set {value = .field156(newValue)}
  }

  var field157: Int32 {
    get {
      if case .field157(let v)? = value {return v}
      return 0
    }
    set {value = .field157(newValue)}
  }

  var field158: Int32 {
    get {
      if case .field158(let v)? = value {return v}
      return 0
    }
    set {value = .field158(newValue)}
  }

  var field159: Int32 {
    get {
      if case .field159(let v)? = value {return v}
      return 0
    }
    set {value = .field159(newValue)}
  }

  var field160: Int32 {
    get {
      if case .field160(let v)? = value {return v}
      return 0
    }
    set {value = .field160(newValue)}
  }

  var field161: Int32 {
    get {
      if case .field161(let v)? = value {return v}
      return 0
    }
    set {value = .field161(newValue)}
  }

  var field162: Int32 {
    get {
      if case .field162(let v)? = value {return v}
      return 0
    }
    set {value = .field162(newValue)}
  }

  var field163: Int32 {
    get {
      if case .field163(let v)? = value {return v}
      return 0
    }
    set {value = .field163(newValue)}
  }

  var field164: Int32 {
    get {
      if case .field164(let v)? = value {return v}
      return 0
    }
    set {value = .field164(newValue)}
  }

  var field165: Int32 {
    get {
      if case .field165(let v)? = value {return v}
      return 0
    }
    set {value = .field165(newValue)}
  }

  var field166: Int32 {
    get {
      if case .field166(let v)? = value {return v}
      return 0
    }
    set {value = .field166(newValue)}
  }

  var field167: Int32 {
    get {
      if case .field167(let v)? = value {return v}
      return 0
    }
    set {value = .field167(newValue)}
  }

  var field168: Int32 {
    get {
      if case .field168(let v)? = value {return v}
      return 0
    }
    set {value = .field168(newValue)}
  }

  var field169: Int32 {
    get {
      if case .field169(let v)? = value {return v}
      return 0
    }
    set {value = .field169(newValue)}
  }

  var field170: Int32 {
    get {
      if case .field170(let v)? = value {return v}
      return 0
    }
    set {value = .field170(newValue)}
  }

  var field171: Int32 {
    get {
      if case .field171(let v)? = value {return v}
      return 0
    }
    set {value = .field171(newValue)}
  }

  var field172: Int32 {
    get {
      if case .field172(let v)? = value {return v}
      return 0
    }
    set {value = .field172(newValue)}
  }

  var field173: Int32 {
    get {
      if case .field173(let v)? = value {return v}
      return 0
    }
    set {value = .field173(newValue)}
  }

  var field174: Int32 {
    get {
      if case .field174(let v)? = value {return v}
      return 0
    }
    set {value = .field174(newValue)}
  }

  var field175: Int32 {
    get {
      if case .field175(let v)? = value {return v}
      return 0
    }
    set {value = .field175(newValue)}
  }

  var field176: Int32 {
    get {
      if case .field176(let v)? = value {return v}
      return 0
    }
    set {value = .field176(newValue)}
  }

  var field177: Int32 {
    get {
      if case .field177(let v)? = value {return v}
      return 0
    }
    set {value = .field177(newValue)}
  }

  var field178: Int32 {
    get {
      if case .field178(let v)? = value {return v}
      return 0
    }
    set {value = .field178(newValue)}
  }

  var field179: Int32 {
    get {
      if case .field179(let v)? = value {return v}
      return 0
    }
    set {value = .field179(newValue)}
  }

  var field180: Int32 {
    get {
      if case .field180(let v)? = value {return v}
      return 0
    }
    set {value = .field180(newValue)}
  }

  var field181: Int32 {
    get {
      if case .field181(let v)? = value {return v}
      return 0
    }
    set {value = .field181(newValue)}
  }

  var field182: Int32 {
    get {
      if case .field182(let v)? = value {return v}
      return 0
    }
    set {value = .field182(newValue)}
  }

  var field183: Int32 {
    get {
      if case .field183(let v)? = value {return v}
      return 0
    }
    set {value = .field183(newValue)}
  }

  var field184: Int32 {
    get {
      if case .field184(let v)? = value {return v}
      return 0
    }
    set {value = .field184(newValue)}
  }

  var field185: Int32 {
    get {
      if case .field185(let v)? = value {return v}
      return 0
    }
    set {value = .field185(newValue)}
  }

  var field186: Int32 {
    get {
      if case .field186(let v)? = value {return v}
      return 0
    }
    set {value = .field186(newValue)}
  }

  var field187: Int32 {
    get {
      if case .field187(let v)? = value {return v}
      return 0
    }
    set {value = .field187(newValue)}
  }

  var field188: Int32 {
    get {
      if case .field188(let v)? = value {return v}
      return 0
    }
    set {value = .field188(newValue)}
  }

  var field189: Int32 {
    get {
      if case .field189(let v)? = value {return v}
      return 0
    }
    set {value = .field189(newValue)}
  }

  var field190: Int32 {
    get {
      if case .field190(let v)? = value {return v}
      return 0
    }
    set {value = .field190(newValue)}
  }

  var field191: Int32 {
    get {
      if case .field191(let v)? = value {return v}
      return 0
    }
    set {value = .field191(newValue)}
  }

  var field192: Int32 {
    get {
      if case .field192(let v)? = value {return v}
      return 0
    }
    set {value = .field192(newValue)}
  }

  var field193: Int32 {
    get {
      if case .field193(let v)? = value {return v}
      return 0
    }
    set {value = .field193(newValue)}
  }

  var field194: Int32 {
    get {
      if case .field194(let v)? = value {return v}
      return 0
    }
    set {value = .field194(newValue)}
  }

  var field195: Int32 {
    get {
      if case .field195(let v)? = value {return v}
      return 0
    }
    set {value = .field195(newValue)}
  }

  var field196: Int32 {
    get {
      if case .field196(let v)? = value {return v}
      return 0
    }
    set {value = .field196(newValue)}
  }

  var field197: Int32 {
    get {
      if case .field197(let v)? = value {return v}
      return 0
    }
    set {value = .field197(newValue)}
  }

  var field198: Int32 {
    get {
      if case .field198(let v)? = value {return v}
      return 0
    }
    set {value = .field198(newValue)}
  }

  var field199: Int32 {
    get {
      if case .field199(let v)? = value {return v}
      return 0
    }
    set {value = .field199(newValue)}
  }

  var field200: Int32 {
    get {
      if case .field200(let v)? = value {return v}
      return 0
    }
    set {value = .field200(newValue)}
  }

  var field201: Int32 {
    get {
      if case .field201(let v)? = value {return v}
      return 0
    }
    set {value = .field201(newValue)}
  }

  var field202: Int32 {
    get {
      if case .field202(let v)? = value {return v}
      return 0
    }
    set {value = .field202(newValue)}
  }

  var field203: Int32 {
    get {
      if case .field203(let v)? = value {return v}
      return 0
    }
    set {value = .field203(newValue)}
  }

  var field204: Int32 {
    get {
      if case .field204(let v)? = value {return v}
      return 0
    }
    set {value = .field204(newValue)}
  }

  var field205: Int32 {
    get {
      if case .field205(let v)? = value {return v}
      return 0
    }
    set {value = .field205(newValue)}
  }

  var field206: Int32 {
    get {
      if case .field206(let v)? = value {return v}
      return 0
    }
    set {value = .field206(newValue)}
  }

  var field207: Int32 {
    get {
      if case .field207(let v)? = value {return v}
      return 0
    }
    set {value = .field207(newValue)}
  }

  var field208: Int32 {
    get {
      if case .field208(let v)? = value {return v}
      return 0
    }
    set {value = .field208(newValue)}
  }

  var field209: Int32 {
    get {
      if case .field209(let v)? = value {return v}
      return 0
    }
    set {value = .field209(newValue)}
  }

  var field210: Int32 {
    get {
      if case .field210(let v)? = value {return v}
      return 0
    }
    set {value = .field210(newValue)}
  }

  var field211: Int32 {
    get {
      if case .field211(let v)? = value {return v}
      return 0
    }
    set {value = .field211(newValue)}
  }

  var field212: Int32 {
    get {
      if case .field212(let v)? = value {return v}
      return 0
    }
    set {value = .field212(newValue)}
  }

  var field213: Int32 {
    get {
      if case .field213(let v)? = value {return v}
      return 0
    }
    set {value = .field213(newValue)}
  }

  var field214: Int32 {
    get {
      if case .field214(let v)? = value {return v}
      return 0
    }
    set {value = .field214(newValue)}
  }

  var field215: Int32 {
    get {
      if case .field215(let v)? = value {return v}
      return 0
    }
    set {value = .field215(newValue)}
  }

  var field216: Int32 {
    get {
      if case .field216(let v)? = value {return v}
      return 0
    }
    set {value = .field216(newValue)}
  }

  var field217: Int32 {
    get {
      if case .field217(let v)? = value {return v}
      return 0
    }
    set {value = .field217(newValue)}
  }

  var field218: Int32 {
    get {
      if case .field218(let v)? = value {return v}
      return 0
    }
    set {value = .field218(newValue)}
  }

  var field219: Int32 {
    get {
      if case .field219(let v)? = value {return v}
      return 0
    }
    set {value = .field219(newValue)}
  }

  var field220: Int32 {
    get {
      if case .field220(let v)? = value {return v}
      return 0
    }
    set {value = .field220(newValue)}
  }

  var field221: Int32 {
    get {
      if case .field221(let v)? = value {return v}
      return 0
    }
    set {value = .field221(newValue)}
  }

  var field222: Int32 {
    get {
      if case .field222(let v)? = value {return v}
      return 0
    }
    set {value = .field222(newValue)}
  }

  var field223: Int32 {
    get {
      if case .field223(let v)? = value {return v}
      return 0
    }
    set {value = .field223(newValue)}
  }

  var field224: Int32 {
    get {
      if case .field224(let v)? = value {return v}
      return 0
    }
    set {value = .field224(newValue)}
  }

  var field225: Int32 {
    get {
      if case .field225(let v)? = value {return v}
      return 0
    }
    set {value = .field225(newValue)}
  }

  var field226: Int32 {
    get {
      if case .field226(let v)? = value {return v}
      return 0
    }
    set {value = .field226(newValue)}
  }

  var field227: Int32 {
    get {
      if case .field227(let v)? = value {return v}
      return 0
    }
    set {value = .field227(newValue)}
  }

  var field228: Int32 {
    get {
      if case .field228(let v)? = value {return v}
      return 0
    }
    set {value = .field228(newValue)}
  }

  var field229: Int32 {
    get {
      if case .field229(let v)? = value {return v}
      return 0
    }
    set {value = .field229(newValue)}
  }

  var field230: Int32 {
    get {
      if case .field230(let v)? = value {return v}
      return 0
    }
    set {value = .field230(newValue)}
  }

  var field231: Int32 {
    get {
      if case .field231(let v)? = value {return v}
      return 0
    }
    set {value = .field231(newValue)}
  }

  var field232: Int32 {
    get {
      if case .field232(let v)? = value {return v}
      return 0
    }
    set {value = .field232(newValue)}
  }

  var field233: Int32 {
    get {
      if case .field233(let v)? = value {return v}
      return 0
    }
    set {value = .field233(newValue)}
  }

  var field234: Int32 {
    get {
      if case .field234(let v)? = value {return v}
      return 0
    }
    set {value = .field234(newValue)}
  }

  var field235: Int32 {
    get {
      if case .field235(let v)? = value {return v}
      return 0
    }
    set {value = .field235(newValue)}
  }

  var field236: Int32 {
    get {
      if case .field236(let v)? = value {return v}
      return 0
    }
    set {value = .field236(newValue)}
  }

  var field237: Int32 {
    get {
      if case .field237(let v)? = value {return v}
      return 0
    }
    set {value = .field237(newValue)}
  }

  var field238: Int32 {
    get {
      if case .field238(let v)? = value {return v}
      return 0
    }
    set {value = .field238(newValue)}
  }

  var field239: Int32 {
    get {
      if case .field239(let v)? = value {return v}
      return 0
    }
    set {value = .field239(newValue)}
  }

  var field240: Int32 {
    get {
      if case .field240(let v)? = value {return v}
      return 0
    }
    set {value = .field240(newValue)}
  }

  var field241: Int32 {
    get {
      if case .field241(let v)? = value {return v}
      return 0
    }
    set {value = .field241(newValue)}
  }

  var field242: Int32 {
    get {
      if case .field242(let v)? = value {return v}
      return 0
    }
    set {value = .field242(newValue)}
  }

  var field243: Int32 {
    get {
      if case .field243(let v)? = value {return v}
      return 0
    }
    set {value = .field243(newValue)}
  }

  var field244: Int32 {
    get {
      if case .field244(let v)? = value {return v}
      return 0
    }
    set {value = .field244(newValue)}
  }

  var field245: Int32 {
    get {
      if case .field245(let v)? = value {return v}
      return 0
    }
    set {value = .field245(newValue)}
  }

  var field246: Int32 {
    get {
      if case .field246(let v)? = value {return v}
      return 0
    }
    set {value = .field246(newValue)}
  }

  var field247: Int32 {
    get {
      if case .field247(let v)? = value {return v}
      return 0
    }
    set {value = .field247(newValue)}
  }

  var field248: Int32 {
    get {
      if case .field248(let v)? = value {return v}
      return 0
    }
    set {value = .field248(newValue)}
  }

  var field249: Int32 {
    get {
      if case .field249(let v)? = value {return v}
      return 0
    }
    set {value = .field249(newValue)}
  }

  var field250: Int32 {
    get {
      if case .field250(let v)? = value {return v}
      return 0
    }
    set {value = .field250(newValue)}
  }

  var field252: Int32 {
    get {
      if case .field252(let v)? = value {return v}
      return 0
    }
    set {value = .field252(newValue)}
  }

  var field253: Int32 {
    get {
      if case .field253(let v)? = value {return v}
      return 0
    }
    set {value = .field253(newValue)}
  }

  var field254: Int32 {
    get {
      if case .field254(let v)? = value {return v}
      return 0
    }
    set {value = .field254(newValue)}
  }

  var field255: Int32 {
    get {
      if case .field255(let v)? = value {return v}
      return 0
    }
    set {value = .field255(newValue)}
  }

  var field256: Int32 {
    get {
      if case .field256(let v)? = value {return v}
      return 0
    }
    set {value = .field256(newValue)}
  }

  var field257: Int32 {
    get {
      if case .field257(let v)? = value {return v}
      return 0
    }
    set {value = .field257(newValue)}
  }

  var field258: Int32 {
    get {
      if case .field258(let v)? = value {return v}
      return 0
    }
    set {value = .field258(newValue)}
  }

  var field259: Int32 {
    get {
      if case .field259(let v)? = value {return v}
      return 0
    }
    set {value = .field259(newValue)}
  }

  var field260: Int32 {
    get {
      if case .field260(let v)? = value {return v}
      return 0
    }
    set {value = .field260(newValue)}
  }

  var field261: Int32 {
    get {
      if case .field261(let v)? = value {return v}
      return 0
    }
    set {value = .field261(newValue)}
  }

  var field262: Int32 {
    get {
      if case .field262(let v)? = value {return v}
      return 0
    }
    set {value = .field262(newValue)}
  }

  var field263: Int32 {
    get {
      if case .field263(let v)? = value {return v}
      return 0
    }
    set {value = .field263(newValue)}
  }

  var field264: Int32 {
    get {
      if case .field264(let v)? = value {return v}
      return 0
    }
    set {value = .field264(newValue)}
  }

  var field265: Int32 {
    get {
      if case .field265(let v)? = value {return v}
      return 0
    }
    set {value = .field265(newValue)}
  }

  var field266: Int32 {
    get {
      if case .field266(let v)? = value {return v}
      return 0
    }
    set {value = .field266(newValue)}
  }

  var field267: Int32 {
    get {
      if case .field267(let v)? = value {return v}
      return 0
    }
    set {value = .field267(newValue)}
  }

  var field268: Int32 {
    get {
      if case .field268(let v)? = value {return v}
      return 0
    }
    set {value = .field268(newValue)}
  }

  var field269: Int32 {
    get {
      if case .field269(let v)? = value {return v}
      return 0
    }
    set {value = .field269(newValue)}
  }

  var field270: Int32 {
    get {
      if case .field270(let v)? = value {return v}
      return 0
    }
    set {value = .field270(newValue)}
  }

  var field271: Int32 {
    get {
      if case .field271(let v)? = value {return v}
      return 0
    }
    set {value = .field271(newValue)}
  }

  var field272: Int32 {
    get {
      if case .field272(let v)? = value {return v}
      return 0
    }
    set {value = .field272(newValue)}
  }

  var field273: Int32 {
    get {
      if case .field273(let v)? = value {return v}
      return 0
    }
    set {value = .field273(newValue)}
  }

  var field274: Int32 {
    get {
      if case .field274(let v)? = value {return v}
      return 0
    }
    set {value = .field274(newValue)}
  }

  var field275: Int32 {
    get {
      if case .field275(let v)? = value {return v}
      return 0
    }
    set {value = .field275(newValue)}
  }

  var field276: Int32 {
    get {
      if case .field276(let v)? = value {return v}
      return 0
    }
    set {value = .field276(newValue)}
  }

  var field277: Int32 {
    get {
      if case .field277(let v)? = value {return v}
      return 0
    }
    set {value = .field277(newValue)}
  }

  var field278: Int32 {
    get {
      if case .field278(let v)? = value {return v}
      return 0
    }
    set {value = .field278(newValue)}
  }

  var field279: Int32 {
    get {
      if case .field279(let v)? = value {return v}
      return 0
    }
    set {value = .field279(newValue)}
  }

  var field280: Int32 {
    get {
      if case .field280(let v)? = value {return v}
      return 0
    }
    set {value = .field280(newValue)}
  }

  var field281: Int32 {
    get {
      if case .field281(let v)? = value {return v}
      return 0
    }
    set {value = .field281(newValue)}
  }

  var field282: Int32 {
    get {
      if case .field282(let v)? = value {return v}
      return 0
    }
    set {value = .field282(newValue)}
  }

  var field283: Int32 {
    get {
      if case .field283(let v)? = value {return v}
      return 0
    }
    set {value = .field283(newValue)}
  }

  var field284: Int32 {
    get {
      if case .field284(let v)? = value {return v}
      return 0
    }
    set {value = .field284(newValue)}
  }

  var field285: Int32 {
    get {
      if case .field285(let v)? = value {return v}
      return 0
    }
    set {value = .field285(newValue)}
  }

  var field286: Int32 {
    get {
      if case .field286(let v)? = value {return v}
      return 0
    }
    set {value = .field286(newValue)}
  }

  var field287: Int32 {
    get {
      if case .field287(let v)? = value {return v}
      return 0
    }
    set {value = .field287(newValue)}
  }

  var field288: Int32 {
    get {
      if case .field288(let v)? = value {return v}
      return 0
    }
    set {value = .field288(newValue)}
  }

  var field289: Int32 {
    get {
      if case .field289(let v)? = value {return v}
      return 0
    }
    set {value = .field289(newValue)}
  }

  var field290: Int32 {
    get {
      if case .field290(let v)? = value {return v}
      return 0
    }
    set {value = .field290(newValue)}
  }

  var field291: Int32 {
    get {
      if case .field291(let v)? = value {return v}
      return 0
    }
    set {value = .field291(newValue)}
  }

  var field292: Int32 {
    get {
      if case .field292(let v)? = value {return v}
      return 0
    }
    set {value = .field292(newValue)}
  }

  var field293: Int32 {
    get {
      if case .field293(let v)? = value {return v}
      return 0
    }
    set {value = .field293(newValue)}
  }

  var field294: Int32 {
    get {
      if case .field294(let v)? = value {return v}
      return 0
    }
    set {value = .field294(newValue)}
  }

  var field295: Int32 {
    get {
      if case .field295(let v)? = value {return v}
      return 0
    }
    set {value = .field295(newValue)}
  }

  var field296: Int32 {
    get {
      if case .field296(let v)? = value {return v}
      return 0
    }
    set {value = .field296(newValue)}
  }

  var field297: Int32 {
    get {
      if case .field297(let v)? = value {return v}
      return 0
    }
    set {value = .field297(newValue)}
  }

  var field298: Int32 {
    get {
      if case .field298(let v)? = value {return v}
      return 0
    }
    set {value = .field298(newValue)}
  }

  var field299: Int32 {
    get {
      if case .field299(let v)? = value {return v}
      return 0
    }
    set {value = .field299(newValue)}
  }

  var field300: Int32 {
    get {
      if case .field300(let v)? = value {return v}
      return 0
    }
    set {value = .field300(newValue)}
  }

  var field301: Int32 {
    get {
      if case .field301(let v)? = value {return v}
      return 0
    }
    set {value = .field301(newValue)}
  }

  var field302: Int32 {
    get {
      if case .field302(let v)? = value {return v}
      return 0
    }
    set {value = .field302(newValue)}
  }

  var field303: Int32 {
    get {
      if case .field303(let v)? = value {return v}
      return 0
    }
    set {value = .field303(newValue)}
  }

  var field304: Int32 {
    get {
      if case .field304(let v)? = value {return v}
      return 0
    }
    set {value = .field304(newValue)}
  }

  var field305: Int32 {
    get {
      if case .field305(let v)? = value {return v}
      return 0
    }
    set {value = .field305(newValue)}
  }

  var field306: Int32 {
    get {
      if case .field306(let v)? = value {return v}
      return 0
    }
    set {value = .field306(newValue)}
  }

  var field307: Int32 {
    get {
      if case .field307(let v)? = value {return v}
      return 0
    }
    set {value = .field307(newValue)}
  }

  var field308: Int32 {
    get {
      if case .field308(let v)? = value {return v}
      return 0
    }
    set {value = .field308(newValue)}
  }

  var field309: Int32 {
    get {
      if case .field309(let v)? = value {return v}
      return 0
    }
    set {value = .field309(newValue)}
  }

  var field310: Int32 {
    get {
      if case .field310(let v)? = value {return v}
      return 0
    }
    set {value = .field310(newValue)}
  }

  var field311: Int32 {
    get {
      if case .field311(let v)? = value {return v}
      return 0
    }
    set {value = .field311(newValue)}
  }

  var field312: Int32 {
    get {
      if case .field312(let v)? = value {return v}
      return 0
    }
    set {value = .field312(newValue)}
  }

  var field313: Int32 {
    get {
      if case .field313(let v)? = value {return v}
      return 0
    }
    set {value = .field313(newValue)}
  }

  var field314: Int32 {
    get {
      if case .field314(let v)? = value {return v}
      return 0
    }
    set {value = .field314(newValue)}
  }

  var field315: Int32 {
    get {
      if case .field315(let v)? = value {return v}
      return 0
    }
    set {value = .field315(newValue)}
  }

  var field316: Int32 {
    get {
      if case .field316(let v)? = value {return v}
      return 0
    }
    set {value = .field316(newValue)}
  }

  var field317: Int32 {
    get {
      if case .field317(let v)? = value {return v}
      return 0
    }
    set {value = .field317(newValue)}
  }

  var field318: Int32 {
    get {
      if case .field318(let v)? = value {return v}
      return 0
    }
    set {value = .field318(newValue)}
  }

  var field319: Int32 {
    get {
      if case .field319(let v)? = value {return v}
      return 0
    }
    set {value = .field319(newValue)}
  }

  var field320: Int32 {
    get {
      if case .field320(let v)? = value {return v}
      return 0
    }
    set {value = .field320(newValue)}
  }

  var field321: Int32 {
    get {
      if case .field321(let v)? = value {return v}
      return 0
    }
    set {value = .field321(newValue)}
  }

  var field322: Int32 {
    get {
      if case .field322(let v)? = value {return v}
      return 0
    }
    set {value = .field322(newValue)}
  }

  var field323: Int32 {
    get {
      if case .field323(let v)? = value {return v}
      return 0
    }
    set {value = .field323(newValue)}
  }

  var field324: Int32 {
    get {
      if case .field324(let v)? = value {return v}
      return 0
    }
    set {value = .field324(newValue)}
  }

  var field325: Int32 {
    get {
      if case .field325(let v)? = value {return v}
      return 0
    }
    set {value = .field325(newValue)}
  }

  var field326: Int32 {
    get {
      if case .field326(let v)? = value {return v}
      return 0
    }
    set {value = .field326(newValue)}
  }

  var field327: Int32 {
    get {
      if case .field327(let v)? = value {return v}
      return 0
    }
    set {value = .field327(newValue)}
  }

  var field328: Int32 {
    get {
      if case .field328(let v)? = value {return v}
      return 0
    }
    set {value = .field328(newValue)}
  }

  var field329: Int32 {
    get {
      if case .field329(let v)? = value {return v}
      return 0
    }
    set {value = .field329(newValue)}
  }

  var field330: Int32 {
    get {
      if case .field330(let v)? = value {return v}
      return 0
    }
    set {value = .field330(newValue)}
  }

  var field331: Int32 {
    get {
      if case .field331(let v)? = value {return v}
      return 0
    }
    set {value = .field331(newValue)}
  }

  var field332: Int32 {
    get {
      if case .field332(let v)? = value {return v}
      return 0
    }
    set {value = .field332(newValue)}
  }

  var field333: Int32 {
    get {
      if case .field333(let v)? = value {return v}
      return 0
    }
    set {value = .field333(newValue)}
  }

  var field334: Int32 {
    get {
      if case .field334(let v)? = value {return v}
      return 0
    }
    set {value = .field334(newValue)}
  }

  var field335: Int32 {
    get {
      if case .field335(let v)? = value {return v}
      return 0
    }
    set {value = .field335(newValue)}
  }

  var field336: Int32 {
    get {
      if case .field336(let v)? = value {return v}
      return 0
    }
    set {value = .field336(newValue)}
  }

  var field337: Int32 {
    get {
      if case .field337(let v)? = value {return v}
      return 0
    }
    set {value = .field337(newValue)}
  }

  var field338: Int32 {
    get {
      if case .field338(let v)? = value {return v}
      return 0
    }
    set {value = .field338(newValue)}
  }

  var field339: Int32 {
    get {
      if case .field339(let v)? = value {return v}
      return 0
    }
    set {value = .field339(newValue)}
  }

  var field340: Int32 {
    get {
      if case .field340(let v)? = value {return v}
      return 0
    }
    set {value = .field340(newValue)}
  }

  var field341: Int32 {
    get {
      if case .field341(let v)? = value {return v}
      return 0
    }
    set {value = .field341(newValue)}
  }

  var field342: Int32 {
    get {
      if case .field342(let v)? = value {return v}
      return 0
    }
    set {value = .field342(newValue)}
  }

  var field343: Int32 {
    get {
      if case .field343(let v)? = value {return v}
      return 0
    }
    set {value = .field343(newValue)}
  }

  var field344: Int32 {
    get {
      if case .field344(let v)? = value {return v}
      return 0
    }
    set {value = .field344(newValue)}
  }

  var field345: Int32 {
    get {
      if case .field345(let v)? = value {return v}
      return 0
    }
    set {value = .field345(newValue)}
  }

  var field346: Int32 {
    get {
      if case .field346(let v)? = value {return v}
      return 0
    }
    set {value = .field346(newValue)}
  }

  var field347: Int32 {
    get {
      if case .field347(let v)? = value {return v}
      return 0
    }
    set {value = .field347(newValue)}
  }

  var field348: Int32 {
    get {
      if case .field348(let v)? = value {return v}
      return 0
    }
    set {value = .field348(newValue)}
  }

  var field349: Int32 {
    get {
      if case .field349(let v)? = value {return v}
      return 0
    }
    set {value = .field349(newValue)}
  }

  var field350: Int32 {
    get {
      if case .field350(let v)? = value {return v}
      return 0
    }
    set {value = .field350(newValue)}
  }

  var field351: Int32 {
    get {
      if case .field351(let v)? = value {return v}
      return 0
    }
    set {value = .field351(newValue)}
  }

  var field352: Int32 {
    get {
      if case .field352(let v)? = value {return v}
      return 0
    }
    set {value = .field352(newValue)}
  }

  var field353: Int32 {
    get {
      if case .field353(let v)? = value {return v}
      return 0
    }
    set {value = .field353(newValue)}
  }

  var field354: Int32 {
    get {
      if case .field354(let v)? = value {return v}
      return 0
    }
    set {value = .field354(newValue)}
  }

  var field355: Int32 {
    get {
      if case .field355(let v)? = value {return v}
      return 0
    }
    set {value = .field355(newValue)}
  }

  var field356: Int32 {
    get {
      if case .field356(let v)? = value {return v}
      return 0
    }
    set {value = .field356(newValue)}
  }

  var field357: Int32 {
    get {
      if case .field357(let v)? = value {return v}
      return 0
    }
    set {value = .field357(newValue)}
  }

  var field358: Int32 {
    get {
      if case .field358(let v)? = value {return v}
      return 0
    }
    set {value = .field358(newValue)}
  }

  var field359: Int32 {
    get {
      if case .field359(let v)? = value {return v}
      return 0
    }
    set {value = .field359(newValue)}
  }

  var field360: Int32 {
    get {
      if case .field360(let v)? = value {return v}
      return 0
    }
    set {value = .field360(newValue)}
  }

  var field361: Int32 {
    get {
      if case .field361(let v)? = value {return v}
      return 0
    }
    set {value = .field361(newValue)}
  }

  var field362: Int32 {
    get {
      if case .field362(let v)? = value {return v}
      return 0
    }
    set {value = .field362(newValue)}
  }

  var field363: Int32 {
    get {
      if case .field363(let v)? = value {return v}
      return 0
    }
    set {value = .field363(newValue)}
  }

  var field364: Int32 {
    get {
      if case .field364(let v)? = value {return v}
      return 0
    }
    set {value = .field364(newValue)}
  }

  var field365: Int32 {
    get {
      if case .field365(let v)? = value {return v}
      return 0
    }
    set {value = .field365(newValue)}
  }

  var field366: Int32 {
    get {
      if case .field366(let v)? = value {return v}
      return 0
    }
    set {value = .field366(newValue)}
  }

  var field367: Int32 {
    get {
      if case .field367(let v)? = value {return v}
      return 0
    }
    set {value = .field367(newValue)}
  }

  var field368: Int32 {
    get {
      if case .field368(let v)? = value {return v}
      return 0
    }
    set {value = .field368(newValue)}
  }

  var field369: Int32 {
    get {
      if case .field369(let v)? = value {return v}
      return 0
    }
    set {value = .field369(newValue)}
  }

  var field370: Int32 {
    get {
      if case .field370(let v)? = value {return v}
      return 0
    }
    set {value = .field370(newValue)}
  }

  var field371: Int32 {
    get {
      if case .field371(let v)? = value {return v}
      return 0
    }
    set {value = .field371(newValue)}
  }

  var field372: Int32 {
    get {
      if case .field372(let v)? = value {return v}
      return 0
    }
    set {value = .field372(newValue)}
  }

  var field373: Int32 {
    get {
      if case .field373(let v)? = value {return v}
      return 0
    }
    set {value = .field373(newValue)}
  }

  var field374: Int32 {
    get {
      if case .field374(let v)? = value {return v}
      return 0
    }
    set {value = .field374(newValue)}
  }

  var field375: Int32 {
    get {
      if case .field375(let v)? = value {return v}
      return 0
    }
    set {value = .field375(newValue)}
  }

  var field376: Int32 {
    get {
      if case .field376(let v)? = value {return v}
      return 0
    }
    set {value = .field376(newValue)}
  }

  var field377: Int32 {
    get {
      if case .field377(let v)? = value {return v}
      return 0
    }
    set {value = .field377(newValue)}
  }

  var field378: Int32 {
    get {
      if case .field378(let v)? = value {return v}
      return 0
    }
    set {value = .field378(newValue)}
  }

  var field379: Int32 {
    get {
      if case .field379(let v)? = value {return v}
      return 0
    }
    set {value = .field379(newValue)}
  }

  var field380: Int32 {
    get {
      if case .field380(let v)? = value {return v}
      return 0
    }
    set {value = .field380(newValue)}
  }

  var field381: Int32 {
    get {
      if case .field381(let v)? = value {return v}
      return 0
    }
    set {value = .field381(newValue)}
  }

  var field382: Int32 {
    get {
      if case .field382(let v)? = value {return v}
      return 0
    }
    set {value = .field382(newValue)}
  }

  var field383: Int32 {
    get {
      if case .field383(let v)? = value {return v}
      return 0
    }
    set {value = .field383(newValue)}
  }

  var field384: Int32 {
    get {
      if case .field384(let v)? = value {return v}
      return 0
    }
    set {value = .field384(newValue)}
  }

  var field385: Int32 {
    get {
      if case .field385(let v)? = value {return v}
      return 0
    }
    set {value = .field385(newValue)}
  }

  var field386: Int32 {
    get {
      if case .field386(let v)? = value {return v}
      return 0
    }
    set {value = .field386(newValue)}
  }

  var field387: Int32 {
    get {
      if case .field387(let v)? = value {return v}
      return 0
    }
    set {value = .field387(newValue)}
  }

  var field388: Int32 {
    get {
      if case .field388(let v)? = value {return v}
      return 0
    }
    set {value = .field388(newValue)}
  }

  var field389: Int32 {
    get {
      if case .field389(let v)? = value {return v}
      return 0
    }
    set {value = .field389(newValue)}
  }

  var field390: Int32 {
    get {
      if case .field390(let v)? = value {return v}
      return 0
    }
    set {value = .field390(newValue)}
  }

  var field391: Int32 {
    get {
      if case .field391(let v)? = value {return v}
      return 0
    }
    set {value = .field391(newValue)}
  }

  var field392: Int32 {
    get {
      if case .field392(let v)? = value {return v}
      return 0
    }
    set {value = .field392(newValue)}
  }

  var field393: Int32 {
    get {
      if case .field393(let v)? = value {return v}
      return 0
    }
    set {value = .field393(newValue)}
  }

  var field394: Int32 {
    get {
      if case .field394(let v)? = value {return v}
      return 0
    }
    set {value = .field394(newValue)}
  }

  var field395: Int32 {
    get {
      if case .field395(let v)? = value {return v}
      return 0
    }
    set {value = .field395(newValue)}
  }

  var field396: Int32 {
    get {
      if case .field396(let v)? = value {return v}
      return 0
    }
    set {value = .field396(newValue)}
  }

  var field397: Int32 {
    get {
      if case .field397(let v)? = value {return v}
      return 0
    }
    set {value = .field397(newValue)}
  }

  var field398: Int32 {
    get {
      if case .field398(let v)? = value {return v}
      return 0
    }
    set {value = .field398(newValue)}
  }

  var field399: Int32 {
    get {
      if case .field399(let v)? = value {return v}
      return 0
    }
    set {value = .field399(newValue)}
  }

  var field400: Int32 {
    get {
      if case .field400(let v)? = value {return v}
      return 0
    }
    set {value = .field400(newValue)}
  }

  var field401: Int32 {
    get {
      if case .field401(let v)? = value {return v}
      return 0
    }
    set {value = .field401(newValue)}
  }

  var field402: Int32 {
    get {
      if case .field402(let v)? = value {return v}
      return 0
    }
    set {value = .field402(newValue)}
  }

  var field403: Int32 {
    get {
      if case .field403(let v)? = value {return v}
      return 0
    }
    set {value = .field403(newValue)}
  }

  var field404: Int32 {
    get {
      if case .field404(let v)? = value {return v}
      return 0
    }
    set {value = .field404(newValue)}
  }

  var field405: Int32 {
    get {
      if case .field405(let v)? = value {return v}
      return 0
    }
    set {value = .field405(newValue)}
  }

  var field406: Int32 {
    get {
      if case .field406(let v)? = value {return v}
      return 0
    }
    set {value = .field406(newValue)}
  }

  var field407: Int32 {
    get {
      if case .field407(let v)? = value {return v}
      return 0
    }
    set {value = .field407(newValue)}
  }

  var field408: Int32 {
    get {
      if case .field408(let v)? = value {return v}
      return 0
    }
    set {value = .field408(newValue)}
  }

  var field409: Int32 {
    get {
      if case .field409(let v)? = value {return v}
      return 0
    }
    set {value = .field409(newValue)}
  }

  var field410: Int32 {
    get {
      if case .field410(let v)? = value {return v}
      return 0
    }
    set {value = .field410(newValue)}
  }

  var field411: Int32 {
    get {
      if case .field411(let v)? = value {return v}
      return 0
    }
    set {value = .field411(newValue)}
  }

  var field412: Int32 {
    get {
      if case .field412(let v)? = value {return v}
      return 0
    }
    set {value = .field412(newValue)}
  }

  var field413: Int32 {
    get {
      if case .field413(let v)? = value {return v}
      return 0
    }
    set {value = .field413(newValue)}
  }

  var field414: Int32 {
    get {
      if case .field414(let v)? = value {return v}
      return 0
    }
    set {value = .field414(newValue)}
  }

  var field415: Int32 {
    get {
      if case .field415(let v)? = value {return v}
      return 0
    }
    set {value = .field415(newValue)}
  }

  var field416: Int32 {
    get {
      if case .field416(let v)? = value {return v}
      return 0
    }
    set {value = .field416(newValue)}
  }

  var field417: Int32 {
    get {
      if case .field417(let v)? = value {return v}
      return 0
    }
    set {value = .field417(newValue)}
  }

  var field418: Int32 {
    get {
      if case .field418(let v)? = value {return v}
      return 0
    }
    set {value = .field418(newValue)}
  }

  var field419: Int32 {
    get {
      if case .field419(let v)? = value {return v}
      return 0
    }
    set {value = .field419(newValue)}
  }

  var field420: Int32 {
    get {
      if case .field420(let v)? = value {return v}
      return 0
    }
    set {value = .field420(newValue)}
  }

  var field421: Int32 {
    get {
      if case .field421(let v)? = value {return v}
      return 0
    }
    set {value = .field421(newValue)}
  }

  var field422: Int32 {
    get {
      if case .field422(let v)? = value {return v}
      return 0
    }
    set {value = .field422(newValue)}
  }

  var field423: Int32 {
    get {
      if case .field423(let v)? = value {return v}
      return 0
    }
    set {value = .field423(newValue)}
  }

  var field424: Int32 {
    get {
      if case .field424(let v)? = value {return v}
      return 0
    }
    set {value = .field424(newValue)}
  }

  var field425: Int32 {
    get {
      if case .field425(let v)? = value {return v}
      return 0
    }
    set {value = .field425(newValue)}
  }

  var field426: Int32 {
    get {
      if case .field426(let v)? = value {return v}
      return 0
    }
    set {value = .field426(newValue)}
  }

  var field427: Int32 {
    get {
      if case .field427(let v)? = value {return v}
      return 0
    }
    set {value = .field427(newValue)}
  }

  var field428: Int32 {
    get {
      if case .field428(let v)? = value {return v}
      return 0
    }
    set {value = .field428(newValue)}
  }

  var field429: Int32 {
    get {
      if case .field429(let v)? = value {return v}
      return 0
    }
    set {value = .field429(newValue)}
  }

  var field430: Int32 {
    get {
      if case .field430(let v)? = value {return v}
      return 0
    }
    set {value = .field430(newValue)}
  }

  var field431: Int32 {
    get {
      if case .field431(let v)? = value {return v}
      return 0
    }
    set {value = .field431(newValue)}
  }

  var field432: Int32 {
    get {
      if case .field432(let v)? = value {return v}
      return 0
    }
    set {value = .field432(newValue)}
  }

  var field433: Int32 {
    get {
      if case .field433(let v)? = value {return v}
      return 0
    }
    set {value = .field433(newValue)}
  }

  var field434: Int32 {
    get {
      if case .field434(let v)? = value {return v}
      return 0
    }
    set {value = .field434(newValue)}
  }

  var field435: Int32 {
    get {
      if case .field435(let v)? = value {return v}
      return 0
    }
    set {value = .field435(newValue)}
  }

  var field436: Int32 {
    get {
      if case .field436(let v)? = value {return v}
      return 0
    }
    set {value = .field436(newValue)}
  }

  var field437: Int32 {
    get {
      if case .field437(let v)? = value {return v}
      return 0
    }
    set {value = .field437(newValue)}
  }

  var field438: Int32 {
    get {
      if case .field438(let v)? = value {return v}
      return 0
    }
    set {value = .field438(newValue)}
  }

  var field439: Int32 {
    get {
      if case .field439(let v)? = value {return v}
      return 0
    }
    set {value = .field439(newValue)}
  }

  var field440: Int32 {
    get {
      if case .field440(let v)? = value {return v}
      return 0
    }
    set {value = .field440(newValue)}
  }

  var field441: Int32 {
    get {
      if case .field441(let v)? = value {return v}
      return 0
    }
    set {value = .field441(newValue)}
  }

  var field442: Int32 {
    get {
      if case .field442(let v)? = value {return v}
      return 0
    }
    set {value = .field442(newValue)}
  }

  var field443: Int32 {
    get {
      if case .field443(let v)? = value {return v}
      return 0
    }
    set {value = .field443(newValue)}
  }

  var field444: Int32 {
    get {
      if case .field444(let v)? = value {return v}
      return 0
    }
    set {value = .field444(newValue)}
  }

  var field445: Int32 {
    get {
      if case .field445(let v)? = value {return v}
      return 0
    }
    set {value = .field445(newValue)}
  }

  var field446: Int32 {
    get {
      if case .field446(let v)? = value {return v}
      return 0
    }
    set {value = .field446(newValue)}
  }

  var field447: Int32 {
    get {
      if case .field447(let v)? = value {return v}
      return 0
    }
    set {value = .field447(newValue)}
  }

  var field448: Int32 {
    get {
      if case .field448(let v)? = value {return v}
      return 0
    }
    set {value = .field448(newValue)}
  }

  var field449: Int32 {
    get {
      if case .field449(let v)? = value {return v}
      return 0
    }
    set {value = .field449(newValue)}
  }

  var field450: Int32 {
    get {
      if case .field450(let v)? = value {return v}
      return 0
    }
    set {value = .field450(newValue)}
  }

  var field451: Int32 {
    get {
      if case .field451(let v)? = value {return v}
      return 0
    }
    set {value = .field451(newValue)}
  }

  var field452: Int32 {
    get {
      if case .field452(let v)? = value {return v}
      return 0
    }
    set {value = .field452(newValue)}
  }

  var field453: Int32 {
    get {
      if case .field453(let v)? = value {return v}
      return 0
    }
    set {value = .field453(newValue)}
  }

  var field454: Int32 {
    get {
      if case .field454(let v)? = value {return v}
      return 0
    }
    set {value = .field454(newValue)}
  }

  var field455: Int32 {
    get {
      if case .field455(let v)? = value {return v}
      return 0
    }
    set {value = .field455(newValue)}
  }

  var field456: Int32 {
    get {
      if case .field456(let v)? = value {return v}
      return 0
    }
    set {value = .field456(newValue)}
  }

  var field457: Int32 {
    get {
      if case .field457(let v)? = value {return v}
      return 0
    }
    set {value = .field457(newValue)}
  }

  var field458: Int32 {
    get {
      if case .field458(let v)? = value {return v}
      return 0
    }
    set {value = .field458(newValue)}
  }

  var field459: Int32 {
    get {
      if case .field459(let v)? = value {return v}
      return 0
    }
    set {value = .field459(newValue)}
  }

  var field460: Int32 {
    get {
      if case .field460(let v)? = value {return v}
      return 0
    }
    set {value = .field460(newValue)}
  }

  var field461: Int32 {
    get {
      if case .field461(let v)? = value {return v}
      return 0
    }
    set {value = .field461(newValue)}
  }

  var field462: Int32 {
    get {
      if case .field462(let v)? = value {return v}
      return 0
    }
    set {value = .field462(newValue)}
  }

  var field463: Int32 {
    get {
      if case .field463(let v)? = value {return v}
      return 0
    }
    set {value = .field463(newValue)}
  }

  var field464: Int32 {
    get {
      if case .field464(let v)? = value {return v}
      return 0
    }
    set {value = .field464(newValue)}
  }

  var field465: Int32 {
    get {
      if case .field465(let v)? = value {return v}
      return 0
    }
    set {value = .field465(newValue)}
  }

  var field466: Int32 {
    get {
      if case .field466(let v)? = value {return v}
      return 0
    }
    set {value = .field466(newValue)}
  }

  var field467: Int32 {
    get {
      if case .field467(let v)? = value {return v}
      return 0
    }
    set {value = .field467(newValue)}
  }

  var field468: Int32 {
    get {
      if case .field468(let v)? = value {return v}
      return 0
    }
    set {value = .field468(newValue)}
  }

  var field469: Int32 {
    get {
      if case .field469(let v)? = value {return v}
      return 0
    }
    set {value = .field469(newValue)}
  }

  var field470: Int32 {
    get {
      if case .field470(let v)? = value {return v}
      return 0
    }
    set {value = .field470(newValue)}
  }

  var field471: Int32 {
    get {
      if case .field471(let v)? = value {return v}
      return 0
    }
    set {value = .field471(newValue)}
  }

  var field472: Int32 {
    get {
      if case .field472(let v)? = value {return v}
      return 0
    }
    set {value = .field472(newValue)}
  }

  var field473: Int32 {
    get {
      if case .field473(let v)? = value {return v}
      return 0
    }
    set {value = .field473(newValue)}
  }

  var field474: Int32 {
    get {
      if case .field474(let v)? = value {return v}
      return 0
    }
    set {value = .field474(newValue)}
  }

  var field475: Int32 {
    get {
      if case .field475(let v)? = value {return v}
      return 0
    }
    set {value = .field475(newValue)}
  }

  var field476: Int32 {
    get {
      if case .field476(let v)? = value {return v}
      return 0
    }
    set {value = .field476(newValue)}
  }

  var field477: Int32 {
    get {
      if case .field477(let v)? = value {return v}
      return 0
    }
    set {value = .field477(newValue)}
  }

  var field478: Int32 {
    get {
      if case .field478(let v)? = value {return v}
      return 0
    }
    set {value = .field478(newValue)}
  }

  var field479: Int32 {
    get {
      if case .field479(let v)? = value {return v}
      return 0
    }
    set {value = .field479(newValue)}
  }

  var field480: Int32 {
    get {
      if case .field480(let v)? = value {return v}
      return 0
    }
    set {value = .field480(newValue)}
  }

  var field481: Int32 {
    get {
      if case .field481(let v)? = value {return v}
      return 0
    }
    set {value = .field481(newValue)}
  }

  var field482: Int32 {
    get {
      if case .field482(let v)? = value {return v}
      return 0
    }
    set {value = .field482(newValue)}
  }

  var field483: Int32 {
    get {
      if case .field483(let v)? = value {return v}
      return 0
    }
    set {value = .field483(newValue)}
  }

  var field484: Int32 {
    get {
      if case .field484(let v)? = value {return v}
      return 0
    }
    set {value = .field484(newValue)}
  }

  var field485: Int32 {
    get {
      if case .field485(let v)? = value {return v}
      return 0
    }
    set {value = .field485(newValue)}
  }

  var field486: Int32 {
    get {
      if case .field486(let v)? = value {return v}
      return 0
    }
    set {value = .field486(newValue)}
  }

  var field487: Int32 {
    get {
      if case .field487(let v)? = value {return v}
      return 0
    }
    set {value = .field487(newValue)}
  }

  var field488: Int32 {
    get {
      if case .field488(let v)? = value {return v}
      return 0
    }
    set {value = .field488(newValue)}
  }

  var field489: Int32 {
    get {
      if case .field489(let v)? = value {return v}
      return 0
    }
    set {value = .field489(newValue)}
  }

  var field490: Int32 {
    get {
      if case .field490(let v)? = value {return v}
      return 0
    }
    set {value = .field490(newValue)}
  }

  var field491: Int32 {
    get {
      if case .field491(let v)? = value {return v}
      return 0
    }
    set {value = .field491(newValue)}
  }

  var field492: Int32 {
    get {
      if case .field492(let v)? = value {return v}
      return 0
    }
    set {value = .field492(newValue)}
  }

  var field493: Int32 {
    get {
      if case .field493(let v)? = value {return v}
      return 0
    }
    set {value = .field493(newValue)}
  }

  var field494: Int32 {
    get {
      if case .field494(let v)? = value {return v}
      return 0
    }
    set {value = .field494(newValue)}
  }

  var field495: Int32 {
    get {
      if case .field495(let v)? = value {return v}
      return 0
    }
    set {value = .field495(newValue)}
  }

  var field496: Int32 {
    get {
      if case .field496(let v)? = value {return v}
      return 0
    }
    set {value = .field496(newValue)}
  }

  var field497: Int32 {
    get {
      if case .field497(let v)? = value {return v}
      return 0
    }
    set {value = .field497(newValue)}
  }

  var field498: Int32 {
    get {
      if case .field498(let v)? = value {return v}
      return 0
    }
    set {value = .field498(newValue)}
  }

  var field499: Int32 {
    get {
      if case .field499(let v)? = value {return v}
      return 0
    }
    set {value = .field499(newValue)}
  }

  var field500: Int32 {
    get {
      if case .field500(let v)? = value {return v}
      return 0
    }
    set {value = .field500(newValue)}
  }

  var field501: Int32 {
    get {
      if case .field501(let v)? = value {return v}
      return 0
    }
    set {value = .field501(newValue)}
  }

  var field503: Int32 {
    get {
      if case .field503(let v)? = value {return v}
      return 0
    }
    set {value = .field503(newValue)}
  }

  var field504: Int32 {
    get {
      if case .field504(let v)? = value {return v}
      return 0
    }
    set {value = .field504(newValue)}
  }

  var field505: Int32 {
    get {
      if case .field505(let v)? = value {return v}
      return 0
    }
    set {value = .field505(newValue)}
  }

  var field506: Int32 {
    get {
      if case .field506(let v)? = value {return v}
      return 0
    }
    set {value = .field506(newValue)}
  }

  var field507: Int32 {
    get {
      if case .field507(let v)? = value {return v}
      return 0
    }
    set {value = .field507(newValue)}
  }

  var field508: Int32 {
    get {
      if case .field508(let v)? = value {return v}
      return 0
    }
    set {value = .field508(newValue)}
  }

  var field509: Int32 {
    get {
      if case .field509(let v)? = value {return v}
      return 0
    }
    set {value = .field509(newValue)}
  }

  var field510: Int32 {
    get {
      if case .field510(let v)? = value {return v}
      return 0
    }
    set {value = .field510(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Value: Equatable, Sendable {
    case field001(Int32)
    case field002(Int32)
    case field003(Int32)
    case field004(Int32)
    case field005(Int32)
    case field006(Int32)
    case field007(Int32)
    case field008(Int32)
    case field009(Int32)
    case field010(Int32)
    case field011(Int32)
    case field012(Int32)
    case field013(Int32)
    case field014(Int32)
    case field015(Int32)
    case field016(Int32)
    case field017(Int32)
    case field018(Int32)
    case field019(Int32)
    case field020(Int32)
    case field021(Int32)
    case field022(Int32)
    case field023(Int32)
    case field024(Int32)
    case field025(Int32)
    case field026(Int32)
    case field027(Int32)
    case field028(Int32)
    case field029(Int32)
    case field030(Int32)
    case field031(Int32)
    case field032(Int32)
    case field033(Int32)
    case field034(Int32)
    case field035(Int32)
    case field036(Int32)
    case field037(Int32)
    case field038(Int32)
    case field039(Int32)
    case field040(Int32)
    case field041(Int32)
    case field042(Int32)
    case field043(Int32)
    case field044(Int32)
    case field045(Int32)
    case field046(Int32)
    case field047(Int32)
    case field048(Int32)
    case field049(Int32)
    case field050(Int32)
    case field051(Int32)
    case field052(Int32)
    case field053(Int32)
    case field054(Int32)
    case field055(Int32)
    case field056(Int32)
    case field057(Int32)
    case field058(Int32)
    case field059(Int32)
    case field060(Int32)
    case field061(Int32)
    case field062(Int32)
    case field063(Int32)
    case field064(Int32)
    case field065(Int32)
    case field066(Int32)
    case field067(Int32)
    case field068(Int32)
    case field069(Int32)
    case field070(Int32)
    case field071(Int32)
    case field072(Int32)
    case field073(Int32)
    case field074(Int32)
    case field075(Int32)
    case field076(Int32)
    case field077(Int32)
    case field078(Int32)
    case field079(Int32)
    case field080(Int32)
    case field081(Int32)
    case field082(Int32)
    case field083(Int32)
    case field084(Int32)
    case field085(Int32)
    case field086(Int32)
    case field087(Int32)
    case field088(Int32)
    case field089(Int32)
    case field090(Int32)
    case field091(Int32)
    case field092(Int32)
    case field093(Int32)
    case field094(Int32)
    case field095(Int32)
    case field096(Int32)
    case field097(Int32)
    case field098(Int32)
    case field099(Int32)
    case field100(Int32)
    case field101(Int32)
    case field102(Int32)
    case field103(Int32)
    case field104(Int32)
    case field105(Int32)
    case field106(Int32)
    case field107(Int32)
    case field108(Int32)
    case field109(Int32)
    case field110(Int32)
    case field111(Int32)
    case field112(Int32)
    case field113(Int32)
    case field114(Int32)
    case field115(Int32)
    case field116(Int32)
    case field117(Int32)
    case field118(Int32)
    case field119(Int32)
    case field120(Int32)
    case field121(Int32)
    case field122(Int32)
    case field123(Int32)
    case field124(Int32)
    case field125(Int32)
    case field126(Int32)
    case field127(Int32)
    case field128(Int32)
    case field129(Int32)
    case field130(Int32)
    case field131(Int32)
    case field132(Int32)
    case field133(Int32)
    case field134(Int32)
    case field135(Int32)
    case field136(Int32)
    case field137(Int32)
    case field138(Int32)
    case field139(Int32)
    case field140(Int32)
    case field141(Int32)
    case field142(Int32)
    case field143(Int32)
    case field144(Int32)
    case field145(Int32)
    case field146(Int32)
    case field147(Int32)
    case field148(Int32)
    case field149(Int32)
    case field150(Int32)
    case field151(Int32)
    case field152(Int32)
    case field153(Int32)
    case field154(Int32)
    case field155(Int32)
    case field156(Int32)
    case field157(Int32)
    case field158(Int32)
    case field159(Int32)
    case field160(Int32)
    case field161(Int32)
    case field162(Int32)
    case field163(Int32)
    case field164(Int32)
    case field165(Int32)
    case field166(Int32)
    case field167(Int32)
    case field168(Int32)
    case field169(Int32)
    case field170(Int32)
    case field171(Int32)
    case field172(Int32)
    case field173(Int32)
    case field174(Int32)
    case field175(Int32)
    case field176(Int32)
    case field177(Int32)
    case field178(Int32)
    case field179(Int32)
    case field180(Int32)
    case field181(Int32)
    case field182(Int32)
    case field183(Int32)
    case field184(Int32)
    case field185(Int32)
    case field186(Int32)
    case field187(Int32)
    case field188(Int32)
    case field189(Int32)
    case field190(Int32)
    case field191(Int32)
    case field192(Int32)
    case field193(Int32)
    case field194(Int32)
    case field195(Int32)
    case field196(Int32)
    case field197(Int32)
    case field198(Int32)
    case field199(Int32)
    case field200(Int32)
    case field201(Int32)
    case field202(Int32)
    case field203(Int32)
    case field204(Int32)
    case field205(Int32)
    case field206(Int32)
    case field207(Int32)
    case field208(Int32)
    case field209(Int32)
    case field210(Int32)
    case field211(Int32)
    case field212(Int32)
    case field213(Int32)
    case field214(Int32)
    case field215(Int32)
    case field216(Int32)
    case field217(Int32)
    case field218(Int32)
    case field219(Int32)
    case field220(Int32)
    case field221(Int32)
    case field222(Int32)
    case field223(Int32)
    case field224(Int32)
    case field225(Int32)
    case field226(Int32)
    case field227(Int32)
    case field228(Int32)
    case field229(Int32)
    case field230(Int32)
    case field231(Int32)
    case field232(Int32)
    case field233(Int32)
    case field234(Int32)
    case field235(Int32)
    case field236(Int32)
    case field237(Int32)
    case field238(Int32)
    case field239(Int32)
    case field240(Int32)
    case field241(Int32)
    case field242(Int32)
    case field243(Int32)
    case field244(Int32)
    case field245(Int32)
    case field246(Int32)
    case field247(Int32)
    case field248(Int32)
    case field249(Int32)
    case field250(Int32)
    case field252(Int32)
    case field253(Int32)
    case field254(Int32)
    case field255(Int32)
    case field256(Int32)
    case field257(Int32)
    case field258(Int32)
    case field259(Int32)
    case field260(Int32)
    case field261(Int32)
    case field262(Int32)
    case field263(Int32)
    case field264(Int32)
    case field265(Int32)
    case field266(Int32)
    case field267(Int32)
    case field268(Int32)
    case field269(Int32)
    case field270(Int32)
    case field271(Int32)
    case field272(Int32)
    case field273(Int32)
    case field274(Int32)
    case field275(Int32)
    case field276(Int32)
    case field277(Int32)
    case field278(Int32)
    case field279(Int32)
    case field280(Int32)
    case field281(Int32)
    case field282(Int32)
    case field283(Int32)
    case field284(Int32)
    case field285(Int32)
    case field286(Int32)
    case field287(Int32)
    case field288(Int32)
    case field289(Int32)
    case field290(Int32)
    case field291(Int32)
    case field292(Int32)
    case field293(Int32)
    case field294(Int32)
    case field295(Int32)
    case field296(Int32)
    case field297(Int32)
    case field298(Int32)
    case field299(Int32)
    case field300(Int32)
    case field301(Int32)
    case field302(Int32)
    case field303(Int32)
    case field304(Int32)
    case field305(Int32)
    case field306(Int32)
    case field307(Int32)
    case field308(Int32)
    case field309(Int32)
    case field310(Int32)
    case field311(Int32)
    case field312(Int32)
    case field313(Int32)
    case field314(Int32)
    case field315(Int32)
    case field316(Int32)
    case field317(Int32)
    case field318(Int32)
    case field319(Int32)
    case field320(Int32)
    case field321(Int32)
    case field322(Int32)
    case field323(Int32)
    case field324(Int32)
    case field325(Int32)
    case field326(Int32)
    case field327(Int32)
    case field328(Int32)
    case field329(Int32)
    case field330(Int32)
    case field331(Int32)
    case field332(Int32)
    case field333(Int32)
    case field334(Int32)
    case field335(Int32)
    case field336(Int32)
    case field337(Int32)
    case field338(Int32)
    case field339(Int32)
    case field340(Int32)
    case field341(Int32)
    case field342(Int32)
    case field343(Int32)
    case field344(Int32)
    case field345(Int32)
    case field346(Int32)
    case field347(Int32)
    case field348(Int32)
    case field349(Int32)
    case field350(Int32)
    case field351(Int32)
    case field352(Int32)
    case field353(Int32)
    case field354(Int32)
    case field355(Int32)
    case field356(Int32)
    case field357(Int32)
    case field358(Int32)
    case field359(Int32)
    case field360(Int32)
    case field361(Int32)
    case field362(Int32)
    case field363(Int32)
    case field364(Int32)
    case field365(Int32)
    case field366(Int32)
    case field367(Int32)
    case field368(Int32)
    case field369(Int32)
    case field370(Int32)
    case field371(Int32)
    case field372(Int32)
    case field373(Int32)
    case field374(Int32)
    case field375(Int32)
    case field376(Int32)
    case field377(Int32)
    case field378(Int32)
    case field379(Int32)
    case field380(Int32)
    case field381(Int32)
    case field382(Int32)
    case field383(Int32)
    case field384(Int32)
    case field385(Int32)
    case field386(Int32)
    case field387(Int32)
    case field388(Int32)
    case field389(Int32)
    case field390(Int32)
    case field391(Int32)
    case field392(Int32)
    case field393(Int32)
    case field394(Int32)
    case field395(Int32)
    case field396(Int32)
    case field397(Int32)
    case field398(Int32)
    case field399(Int32)
    case field400(Int32)
    case field401(Int32)
    case field402(Int32)
    case field403(Int32)
    case field404(Int32)
    case field405(Int32)
    case field406(Int32)
    case field407(Int32)
    case field408(Int32)
    case field409(Int32)
    case field410(Int32)
    case field411(Int32)
    case field412(Int32)
    case field413(Int32)
    case field414(Int32)
    case field415(Int32)
    case field416(Int32)
    case field417(Int32)
    case field418(Int32)
    case field419(Int32)
    case field420(Int32)
    case field421(Int32)
    case field422(Int32)
    case field423(Int32)
    case field424(Int32)
    case field425(Int32)
    case field426(Int32)
    case field427(Int32)
    case field428(Int32)
    case field429(Int32)
    case field430(Int32)
    case field431(Int32)
    case field432(Int32)
    case field433(Int32)
    case field434(Int32)
    case field435(Int32)
    case field436(Int32)
    case field437(Int32)
    case field438(Int32)
    case field439(Int32)
    case field440(Int32)
    case field441(Int32)
    case field442(Int32)
    case field443(Int32)
    case field444(Int32)
    case field445(Int32)
    case field446(Int32)
    case field447(Int32)
    case field448(Int32)
    case field449(Int32)
    case field450(Int32)
    case field451(Int32)
    case field452(Int32)
    case field453(Int32)
    case field454(Int32)
    case field455(Int32)
    case field456(Int32)
    case field457(Int32)
    case field458(Int32)
    case field459(Int32)
    case field460(Int32)
    case field461(Int32)
    case field462(Int32)
    case field463(Int32)
    case field464(Int32)
    case field465(Int32)
    case field466(Int32)
    case field467(Int32)
    case field468(Int32)
    case field469(Int32)
    case field470(Int32)
    case field471(Int32)
    case field472(Int32)
    case field473(Int32)
    case field474(Int32)
    case field475(Int32)
    case field476(Int32)
    case field477(Int32)
    case field478(Int32)
    case field479(Int32)
    case field480(Int32)
    case field481(Int32)
    case field482(Int32)
    case field483(Int32)
    case field484(Int32)
    case field485(Int32)
    case field486(Int32)
    case field487(Int32)
    case field488(Int32)
    case field489(Int32)
    case field490(Int32)
    case field491(Int32)
    case field492(Int32)
    case field493(Int32)
    case field494(Int32)
    case field495(Int32)
    case field496(Int32)
    case field497(Int32)
    case field498(Int32)
    case field499(Int32)
    case field500(Int32)
    case field501(Int32)
    case field503(Int32)
    case field504(Int32)
    case field505(Int32)
    case field506(Int32)
    case field507(Int32)
    case field508(Int32)
    case field509(Int32)
    case field510(Int32)

  }

  init() {}

  fileprivate var _regularField251: Int32? = nil
  fileprivate var _regularField502: Int32? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "swift_proto_testing.switch_split"

extension SwiftProtoTesting_SwitchSplit_SwitchSplitMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SwitchSplitMessage"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}field_001\0\u{3}field_002\0\u{3}field_003\0\u{3}field_004\0\u{3}field_005\0\u{3}field_006\0\u{3}field_007\0\u{3}field_008\0\u{3}field_009\0\u{3}field_010\0\u{3}field_011\0\u{3}field_012\0\u{3}field_013\0\u{3}field_014\0\u{3}field_015\0\u{3}field_016\0\u{3}field_017\0\u{3}field_018\0\u{3}field_019\0\u{3}field_020\0\u{3}field_021\0\u{3}field_022\0\u{3}field_023\0\u{3}field_024\0\u{3}field_025\0\u{3}field_026\0\u{3}field_027\0\u{3}field_028\0\u{3}field_029\0\u{3}field_030\0\u{3}field_031\0\u{3}field_032\0\u{3}field_033\0\u{3}field_034\0\u{3}field_035\0\u{3}field_036\0\u{3}field_037\0\u{3}field_038\0\u{3}field_039\0\u{3}field_040\0\u{3}field_041\0\u{3}field_042\0\u{3}field_043\0\u{3}field_044\0\u{3}field_045\0\u{3}field_046\0\u{3}field_047\0\u{3}field_048\0\u{3}field_049\0\u{3}field_050\0\u{3}field_051\0\u{3}field_052\0\u{3}field_053\0\u{3}field_054\0\u{3}field_055\0\u{3}field_056\0\u{3}field_057\0\u{3}field_058\0\u{3}field_059\0\u{3}field_060\0\u{3}field_061\0\u{3}field_062\0\u{3}field_063\0\u{3}field_064\0\u{3}field_065\0\u{3}field_066\0\u{3}field_067\0\u{3}field_068\0\u{3}field_069\0\u{3}field_070\0\u{3}field_071\0\u{3}field_072\0\u{3}field_073\0\u{3}field_074\0\u{3}field_075\0\u{3}field_076\0\u{3}field_077\0\u{3}field_078\0\u{3}field_079\0\u{3}field_080\0\u{3}field_081\0\u{3}field_082\0\u{3}field_083\0\u{3}field_084\0\u{3}field_085\0\u{3}field_086\0\u{3}field_087\0\u{3}field_088\0\u{3}field_089\0\u{3}field_090\0\u{3}field_091\0\u{3}field_092\0\u{3}field_093\0\u{3}field_094\0\u{3}field_095\0\u{3}field_096\0\u{3}field_097\0\u{3}field_098\0\u{3}field_099\0\u{3}field_100\0\u{3}field_101\0\u{3}field_102\0\u{3}field_103\0\u{3}field_104\0\u{3}field_105\0\u{3}field_106\0\u{3}field_107\0\u{3}field_108\0\u{3}field_109\0\u{3}field_110\0\u{3}field_111\0\u{3}field_112\0\u{3}field_113\0\u{3}field_114\0\u{3}field_115\0\u{3}field_116\0\u{3}field_117\0\u{3}field_118\0\u{3}field_119\0\u{3}field_120\0\u{3}field_121\0\u{3}field_122\0\u{3}field_123\0\u{3}field_124\0\u{3}field_125\0\u{3}field_126\0\u{3}field_127\0\u{3}field_128\0\u{3}field_129\0\u{3}field_130\0\u{3}field_131\0\u{3}field_132\0\u{3}field_133\0\u{3}field_134\0\u{3}field_135\0\u{3}field_136\0\u{3}field_137\0\u{3}field_138\0\u{3}field_139\0\u{3}field_140\0\u{3}field_141\0\u{3}field_142\0\u{3}field_143\0\u{3}field_144\0\u{3}field_145\0\u{3}field_146\0\u{3}field_147\0\u{3}field_148\0\u{3}field_149\0\u{3}field_150\0\u{3}field_151\0\u{3}field_152\0\u{3}field_153\0\u{3}field_154\0\u{3}field_155\0\u{3}field_156\0\u{3}field_157\0\u{3}field_158\0\u{3}field_159\0\u{3}field_160\0\u{3}field_161\0\u{3}field_162\0\u{3}field_163\0\u{3}field_164\0\u{3}field_165\0\u{3}field_166\0\u{3}field_167\0\u{3}field_168\0\u{3}field_169\0\u{3}field_170\0\u{3}field_171\0\u{3}field_172\0\u{3}field_173\0\u{3}field_174\0\u{3}field_175\0\u{3}field_176\0\u{3}field_177\0\u{3}field_178\0\u{3}field_179\0\u{3}field_180\0\u{3}field_181\0\u{3}field_182\0\u{3}field_183\0\u{3}field_184\0\u{3}field_185\0\u{3}field_186\0\u{3}field_187\0\u{3}field_188\0\u{3}field_189\0\u{3}field_190\0\u{3}field_191\0\u{3}field_192\0\u{3}field_193\0\u{3}field_194\0\u{3}field_195\0\u{3}field_196\0\u{3}field_197\0\u{3}field_198\0\u{3}field_199\0\u{3}field_200\0\u{3}field_201\0\u{3}field_202\0\u{3}field_203\0\u{3}field_204\0\u{3}field_205\0\u{3}field_206\0\u{3}field_207\0\u{3}field_208\0\u{3}field_209\0\u{3}field_210\0\u{3}field_211\0\u{3}field_212\0\u{3}field_213\0\u{3}field_214\0\u{3}field_215\0\u{3}field_216\0\u{3}field_217\0\u{3}field_218\0\u{3}field_219\0\u{3}field_220\0\u{3}field_221\0\u{3}field_222\0\u{3}field_223\0\u{3}field_224\0\u{3}field_225\0\u{3}field_226\0\u{3}field_227\0\u{3}field_228\0\u{3}field_229\0\u{3}field_230\0\u{3}field_231\0\u{3}field_232\0\u{3}field_233\0\u{3}field_234\0\u{3}field_235\0\u{3}field_236\0\u{3}field_237\0\u{3}field_238\0\u{3}field_239\0\u{3}field_240\0\u{3}field_241\0\u{3}field_242\0\u{3}field_243\0\u{3}field_244\0\u{3}field_245\0\u{3}field_246\0\u{3}field_247\0\u{3}field_248\0\u{3}field_249\0\u{3}field_250\0\u{3}regular_field_251\0\u{3}field_252\0\u{3}field_253\0\u{3}field_254\0\u{3}field_255\0\u{3}field_256\0\u{3}field_257\0\u{3}field_258\0\u{3}field_259\0\u{3}field_260\0\u{3}field_261\0\u{3}field_262\0\u{3}field_263\0\u{3}field_264\0\u{3}field_265\0\u{3}field_266\0\u{3}field_267\0\u{3}field_268\0\u{3}field_269\0\u{3}field_270\0\u{3}field_271\0\u{3}field_272\0\u{3}field_273\0\u{3}field_274\0\u{3}field_275\0\u{3}field_276\0\u{3}field_277\0\u{3}field_278\0\u{3}field_279\0\u{3}field_280\0\u{3}field_281\0\u{3}field_282\0\u{3}field_283\0\u{3}field_284\0\u{3}field_285\0\u{3}field_286\0\u{3}field_287\0\u{3}field_288\0\u{3}field_289\0\u{3}field_290\0\u{3}field_291\0\u{3}field_292\0\u{3}field_293\0\u{3}field_294\0\u{3}field_295\0\u{3}field_296\0\u{3}field_297\0\u{3}field_298\0\u{3}field_299\0\u{3}field_300\0\u{3}field_301\0\u{3}field_302\0\u{3}field_303\0\u{3}field_304\0\u{3}field_305\0\u{3}field_306\0\u{3}field_307\0\u{3}field_308\0\u{3}field_309\0\u{3}field_310\0\u{3}field_311\0\u{3}field_312\0\u{3}field_313\0\u{3}field_314\0\u{3}field_315\0\u{3}field_316\0\u{3}field_317\0\u{3}field_318\0\u{3}field_319\0\u{3}field_320\0\u{3}field_321\0\u{3}field_322\0\u{3}field_323\0\u{3}field_324\0\u{3}field_325\0\u{3}field_326\0\u{3}field_327\0\u{3}field_328\0\u{3}field_329\0\u{3}field_330\0\u{3}field_331\0\u{3}field_332\0\u{3}field_333\0\u{3}field_334\0\u{3}field_335\0\u{3}field_336\0\u{3}field_337\0\u{3}field_338\0\u{3}field_339\0\u{3}field_340\0\u{3}field_341\0\u{3}field_342\0\u{3}field_343\0\u{3}field_344\0\u{3}field_345\0\u{3}field_346\0\u{3}field_347\0\u{3}field_348\0\u{3}field_349\0\u{3}field_350\0\u{3}field_351\0\u{3}field_352\0\u{3}field_353\0\u{3}field_354\0\u{3}field_355\0\u{3}field_356\0\u{3}field_357\0\u{3}field_358\0\u{3}field_359\0\u{3}field_360\0\u{3}field_361\0\u{3}field_362\0\u{3}field_363\0\u{3}field_364\0\u{3}field_365\0\u{3}field_366\0\u{3}field_367\0\u{3}field_368\0\u{3}field_369\0\u{3}field_370\0\u{3}field_371\0\u{3}field_372\0\u{3}field_373\0\u{3}field_374\0\u{3}field_375\0\u{3}field_376\0\u{3}field_377\0\u{3}field_378\0\u{3}field_379\0\u{3}field_380\0\u{3}field_381\0\u{3}field_382\0\u{3}field_383\0\u{3}field_384\0\u{3}field_385\0\u{3}field_386\0\u{3}field_387\0\u{3}field_388\0\u{3}field_389\0\u{3}field_390\0\u{3}field_391\0\u{3}field_392\0\u{3}field_393\0\u{3}field_394\0\u{3}field_395\0\u{3}field_396\0\u{3}field_397\0\u{3}field_398\0\u{3}field_399\0\u{3}field_400\0\u{3}field_401\0\u{3}field_402\0\u{3}field_403\0\u{3}field_404\0\u{3}field_405\0\u{3}field_406\0\u{3}field_407\0\u{3}field_408\0\u{3}field_409\0\u{3}field_410\0\u{3}field_411\0\u{3}field_412\0\u{3}field_413\0\u{3}field_414\0\u{3}field_415\0\u{3}field_416\0\u{3}field_417\0\u{3}field_418\0\u{3}field_419\0\u{3}field_420\0\u{3}field_421\0\u{3}field_422\0\u{3}field_423\0\u{3}field_424\0\u{3}field_425\0\u{3}field_426\0\u{3}field_427\0\u{3}field_428\0\u{3}field_429\0\u{3}field_430\0\u{3}field_431\0\u{3}field_432\0\u{3}field_433\0\u{3}field_434\0\u{3}field_435\0\u{3}field_436\0\u{3}field_437\0\u{3}field_438\0\u{3}field_439\0\u{3}field_440\0\u{3}field_441\0\u{3}field_442\0\u{3}field_443\0\u{3}field_444\0\u{3}field_445\0\u{3}field_446\0\u{3}field_447\0\u{3}field_448\0\u{3}field_449\0\u{3}field_450\0\u{3}field_451\0\u{3}field_452\0\u{3}field_453\0\u{3}field_454\0\u{3}field_455\0\u{3}field_456\0\u{3}field_457\0\u{3}field_458\0\u{3}field_459\0\u{3}field_460\0\u{3}field_461\0\u{3}field_462\0\u{3}field_463\0\u{3}field_464\0\u{3}field_465\0\u{3}field_466\0\u{3}field_467\0\u{3}field_468\0\u{3}field_469\0\u{3}field_470\0\u{3}field_471\0\u{3}field_472\0\u{3}field_473\0\u{3}field_474\0\u{3}field_475\0\u{3}field_476\0\u{3}field_477\0\u{3}field_478\0\u{3}field_479\0\u{3}field_480\0\u{3}field_481\0\u{3}field_482\0\u{3}field_483\0\u{3}field_484\0\u{3}field_485\0\u{3}field_486\0\u{3}field_487\0\u{3}field_488\0\u{3}field_489\0\u{3}field_490\0\u{3}field_491\0\u{3}field_492\0\u{3}field_493\0\u{3}field_494\0\u{3}field_495\0\u{3}field_496\0\u{3}field_497\0\u{3}field_498\0\u{3}field_499\0\u{3}field_500\0\u{3}field_501\0\u{3}regular_field_502\0\u{3}field_503\0\u{3}field_504\0\u{3}field_505\0\u{3}field_506\0\u{3}field_507\0\u{3}field_508\0\u{3}field_509\0\u{3}field_510\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field001(v)
        }
      }()
      case 2: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field002(v)
        }
      }()
      case 3: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field003(v)
        }
      }()
      case 4: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field004(v)
        }
      }()
      case 5: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field005(v)
        }
      }()
      case 6: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field006(v)
        }
      }()
      case 7: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field007(v)
        }
      }()
      case 8: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field008(v)
        }
      }()
      case 9: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field009(v)
        }
      }()
      case 10: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field010(v)
        }
      }()
      case 11: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field011(v)
        }
      }()
      case 12: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field012(v)
        }
      }()
      case 13: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field013(v)
        }
      }()
      case 14: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field014(v)
        }
      }()
      case 15: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field015(v)
        }
      }()
      case 16: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field016(v)
        }
      }()
      case 17: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field017(v)
        }
      }()
      case 18: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field018(v)
        }
      }()
      case 19: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field019(v)
        }
      }()
      case 20: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field020(v)
        }
      }()
      case 21: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field021(v)
        }
      }()
      case 22: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field022(v)
        }
      }()
      case 23: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field023(v)
        }
      }()
      case 24: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field024(v)
        }
      }()
      case 25: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field025(v)
        }
      }()
      case 26: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field026(v)
        }
      }()
      case 27: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field027(v)
        }
      }()
      case 28: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field028(v)
        }
      }()
      case 29: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field029(v)
        }
      }()
      case 30: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field030(v)
        }
      }()
      case 31: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field031(v)
        }
      }()
      case 32: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field032(v)
        }
      }()
      case 33: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field033(v)
        }
      }()
      case 34: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field034(v)
        }
      }()
      case 35: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field035(v)
        }
      }()
      case 36: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field036(v)
        }
      }()
      case 37: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field037(v)
        }
      }()
      case 38: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field038(v)
        }
      }()
      case 39: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field039(v)
        }
      }()
      case 40: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field040(v)
        }
      }()
      case 41: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field041(v)
        }
      }()
      case 42: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field042(v)
        }
      }()
      case 43: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field043(v)
        }
      }()
      case 44: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field044(v)
        }
      }()
      case 45: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field045(v)
        }
      }()
      case 46: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field046(v)
        }
      }()
      case 47: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field047(v)
        }
      }()
      case 48: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field048(v)
        }
      }()
      case 49: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field049(v)
        }
      }()
      case 50: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field050(v)
        }
      }()
      case 51: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field051(v)
        }
      }()
      case 52: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field052(v)
        }
      }()
      case 53: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field053(v)
        }
      }()
      case 54: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field054(v)
        }
      }()
      case 55: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field055(v)
        }
      }()
      case 56: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field056(v)
        }
      }()
      case 57: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field057(v)
        }
      }()
      case 58: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field058(v)
        }
      }()
      case 59: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field059(v)
        }
      }()
      case 60: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field060(v)
        }
      }()
      case 61: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field061(v)
        }
      }()
      case 62: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field062(v)
        }
      }()
      case 63: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field063(v)
        }
      }()
      case 64: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field064(v)
        }
      }()
      case 65: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field065(v)
        }
      }()
      case 66: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field066(v)
        }
      }()
      case 67: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field067(v)
        }
      }()
      case 68: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field068(v)
        }
      }()
      case 69: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field069(v)
        }
      }()
      case 70: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field070(v)
        }
      }()
      case 71: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field071(v)
        }
      }()
      case 72: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field072(v)
        }
      }()
      case 73: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field073(v)
        }
      }()
      case 74: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field074(v)
        }
      }()
      case 75: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field075(v)
        }
      }()
      case 76: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field076(v)
        }
      }()
      case 77: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field077(v)
        }
      }()
      case 78: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field078(v)
        }
      }()
      case 79: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field079(v)
        }
      }()
      case 80: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field080(v)
        }
      }()
      case 81: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field081(v)
        }
      }()
      case 82: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field082(v)
        }
      }()
      case 83: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field083(v)
        }
      }()
      case 84: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field084(v)
        }
      }()
      case 85: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field085(v)
        }
      }()
      case 86: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field086(v)
        }
      }()
      case 87: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field087(v)
        }
      }()
      case 88: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field088(v)
        }
      }()
      case 89: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field089(v)
        }
      }()
      case 90: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field090(v)
        }
      }()
      case 91: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field091(v)
        }
      }()
      case 92: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field092(v)
        }
      }()
      case 93: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field093(v)
        }
      }()
      case 94: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field094(v)
        }
      }()
      case 95: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field095(v)
        }
      }()
      case 96: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field096(v)
        }
      }()
      case 97: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field097(v)
        }
      }()
      case 98: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field098(v)
        }
      }()
      case 99: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field099(v)
        }
      }()
      case 100: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field100(v)
        }
      }()
      case 101: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field101(v)
        }
      }()
      case 102: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field102(v)
        }
      }()
      case 103: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field103(v)
        }
      }()
      case 104: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field104(v)
        }
      }()
      case 105: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field105(v)
        }
      }()
      case 106: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field106(v)
        }
      }()
      case 107: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field107(v)
        }
      }()
      case 108: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field108(v)
        }
      }()
      case 109: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field109(v)
        }
      }()
      case 110: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field110(v)
        }
      }()
      case 111: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field111(v)
        }
      }()
      case 112: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field112(v)
        }
      }()
      case 113: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field113(v)
        }
      }()
      case 114: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field114(v)
        }
      }()
      case 115: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field115(v)
        }
      }()
      case 116: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field116(v)
        }
      }()
      case 117: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field117(v)
        }
      }()
      case 118: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field118(v)
        }
      }()
      case 119: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field119(v)
        }
      }()
      case 120: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field120(v)
        }
      }()
      case 121: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field121(v)
        }
      }()
      case 122: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field122(v)
        }
      }()
      case 123: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field123(v)
        }
      }()
      case 124: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field124(v)
        }
      }()
      case 125: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field125(v)
        }
      }()
      case 126: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field126(v)
        }
      }()
      case 127: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field127(v)
        }
      }()
      case 128: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field128(v)
        }
      }()
      case 129: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field129(v)
        }
      }()
      case 130: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field130(v)
        }
      }()
      case 131: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field131(v)
        }
      }()
      case 132: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field132(v)
        }
      }()
      case 133: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field133(v)
        }
      }()
      case 134: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field134(v)
        }
      }()
      case 135: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field135(v)
        }
      }()
      case 136: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field136(v)
        }
      }()
      case 137: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field137(v)
        }
      }()
      case 138: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field138(v)
        }
      }()
      case 139: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field139(v)
        }
      }()
      case 140: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field140(v)
        }
      }()
      case 141: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field141(v)
        }
      }()
      case 142: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field142(v)
        }
      }()
      case 143: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field143(v)
        }
      }()
      case 144: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field144(v)
        }
      }()
      case 145: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field145(v)
        }
      }()
      case 146: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field146(v)
        }
      }()
      case 147: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field147(v)
        }
      }()
      case 148: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field148(v)
        }
      }()
      case 149: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field149(v)
        }
      }()
      case 150: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field150(v)
        }
      }()
      case 151: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field151(v)
        }
      }()
      case 152: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field152(v)
        }
      }()
      case 153: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field153(v)
        }
      }()
      case 154: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field154(v)
        }
      }()
      case 155: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field155(v)
        }
      }()
      case 156: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field156(v)
        }
      }()
      case 157: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field157(v)
        }
      }()
      case 158: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field158(v)
        }
      }()
      case 159: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field159(v)
        }
      }()
      case 160: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field160(v)
        }
      }()
      case 161: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field161(v)
        }
      }()
      case 162: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field162(v)
        }
      }()
      case 163: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field163(v)
        }
      }()
      case 164: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field164(v)
        }
      }()
      case 165: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field165(v)
        }
      }()
      case 166: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field166(v)
        }
      }()
      case 167: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field167(v)
        }
      }()
      case 168: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field168(v)
        }
      }()
      case 169: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field169(v)
        }
      }()
      case 170: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field170(v)
        }
      }()
      case 171: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field171(v)
        }
      }()
      case 172: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field172(v)
        }
      }()
      case 173: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field173(v)
        }
      }()
      case 174: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field174(v)
        }
      }()
      case 175: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field175(v)
        }
      }()
      case 176: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field176(v)
        }
      }()
      case 177: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field177(v)
        }
      }()
      case 178: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field178(v)
        }
      }()
      case 179: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field179(v)
        }
      }()
      case 180: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field180(v)
        }
      }()
      case 181: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field181(v)
        }
      }()
      case 182: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field182(v)
        }
      }()
      case 183: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field183(v)
        }
      }()
      case 184: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field184(v)
        }
      }()
      case 185: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field185(v)
        }
      }()
      case 186: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field186(v)
        }
      }()
      case 187: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field187(v)
        }
      }()
      case 188: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field188(v)
        }
      }()
      case 189: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field189(v)
        }
      }()
      case 190: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field190(v)
        }
      }()
      case 191: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field191(v)
        }
      }()
      case 192: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field192(v)
        }
      }()
      case 193: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field193(v)
        }
      }()
      case 194: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field194(v)
        }
      }()
      case 195: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field195(v)
        }
      }()
      case 196: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field196(v)
        }
      }()
      case 197: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field197(v)
        }
      }()
      case 198: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field198(v)
        }
      }()
      case 199: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field199(v)
        }
      }()
      case 200: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field200(v)
        }
      }()
      case 201: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field201(v)
        }
      }()
      case 202: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field202(v)
        }
      }()
      case 203: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field203(v)
        }
      }()
      case 204: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field204(v)
        }
      }()
      case 205: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field205(v)
        }
      }()
      case 206: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field206(v)
        }
      }()
      case 207: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field207(v)
        }
      }()
      case 208: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field208(v)
        }
      }()
      case 209: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field209(v)
        }
      }()
      case 210: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field210(v)
        }
      }()
      case 211: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field211(v)
        }
      }()
      case 212: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field212(v)
        }
      }()
      case 213: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field213(v)
        }
      }()
      case 214: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field214(v)
        }
      }()
      case 215: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field215(v)
        }
      }()
      case 216: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field216(v)
        }
      }()
      case 217: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field217(v)
        }
      }()
      case 218: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field218(v)
        }
      }()
      case 219: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field219(v)
        }
      }()
      case 220: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field220(v)
        }
      }()
      case 221: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field221(v)
        }
      }()
      case 222: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field222(v)
        }
      }()
      case 223: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field223(v)
        }
      }()
      case 224: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field224(v)
        }
      }()
      case 225: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field225(v)
        }
      }()
      case 226: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field226(v)
        }
      }()
      case 227: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field227(v)
        }
      }()
      case 228: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field228(v)
        }
      }()
      case 229: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field229(v)
        }
      }()
      case 230: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field230(v)
        }
      }()
      case 231: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field231(v)
        }
      }()
      case 232: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field232(v)
        }
      }()
      case 233: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field233(v)
        }
      }()
      case 234: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field234(v)
        }
      }()
      case 235: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field235(v)
        }
      }()
      case 236: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field236(v)
        }
      }()
      case 237: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field237(v)
        }
      }()
      case 238: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field238(v)
        }
      }()
      case 239: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field239(v)
        }
      }()
      case 240: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field240(v)
        }
      }()
      case 241: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field241(v)
        }
      }()
      case 242: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field242(v)
        }
      }()
      case 243: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field243(v)
        }
      }()
      case 244: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field244(v)
        }
      }()
      case 245: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field245(v)
        }
      }()
      case 246: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field246(v)
        }
      }()
      case 247: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field247(v)
        }
      }()
      case 248: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field248(v)
        }
      }()
      case 249: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field249(v)
        }
      }()
      case 250: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field250(v)
        }
      }()
      case 251: try { try decoder.decodeSingularInt32Field(value: &self._regularField251) }()
      case 252: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field252(v)
        }
      }()
      case 253: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field253(v)
        }
      }()
      case 254: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field254(v)
        }
      }()
      case 255: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field255(v)
        }
      }()
      case 256: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field256(v)
        }
      }()
      case 257: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field257(v)
        }
      }()
      case 258: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field258(v)
        }
      }()
      case 259: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field259(v)
        }
      }()
      case 260: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field260(v)
        }
      }()
      case 261: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field261(v)
        }
      }()
      case 262: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field262(v)
        }
      }()
      case 263: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field263(v)
        }
      }()
      case 264: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field264(v)
        }
      }()
      case 265: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field265(v)
        }
      }()
      case 266: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field266(v)
        }
      }()
      case 267: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field267(v)
        }
      }()
      case 268: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field268(v)
        }
      }()
      case 269: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field269(v)
        }
      }()
      case 270: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field270(v)
        }
      }()
      case 271: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field271(v)
        }
      }()
      case 272: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field272(v)
        }
      }()
      case 273: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field273(v)
        }
      }()
      case 274: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field274(v)
        }
      }()
      case 275: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field275(v)
        }
      }()
      case 276: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field276(v)
        }
      }()
      case 277: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field277(v)
        }
      }()
      case 278: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field278(v)
        }
      }()
      case 279: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field279(v)
        }
      }()
      case 280: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field280(v)
        }
      }()
      case 281: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field281(v)
        }
      }()
      case 282: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field282(v)
        }
      }()
      case 283: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field283(v)
        }
      }()
      case 284: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field284(v)
        }
      }()
      case 285: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field285(v)
        }
      }()
      case 286: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field286(v)
        }
      }()
      case 287: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field287(v)
        }
      }()
      case 288: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field288(v)
        }
      }()
      case 289: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field289(v)
        }
      }()
      case 290: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field290(v)
        }
      }()
      case 291: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field291(v)
        }
      }()
      case 292: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field292(v)
        }
      }()
      case 293: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field293(v)
        }
      }()
      case 294: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field294(v)
        }
      }()
      case 295: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field295(v)
        }
      }()
      case 296: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field296(v)
        }
      }()
      case 297: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field297(v)
        }
      }()
      case 298: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field298(v)
        }
      }()
      case 299: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field299(v)
        }
      }()
      case 300: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field300(v)
        }
      }()
      case 301: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field301(v)
        }
      }()
      case 302: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field302(v)
        }
      }()
      case 303: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field303(v)
        }
      }()
      case 304: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field304(v)
        }
      }()
      case 305: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field305(v)
        }
      }()
      case 306: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field306(v)
        }
      }()
      case 307: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field307(v)
        }
      }()
      case 308: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field308(v)
        }
      }()
      case 309: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field309(v)
        }
      }()
      case 310: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field310(v)
        }
      }()
      case 311: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field311(v)
        }
      }()
      case 312: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field312(v)
        }
      }()
      case 313: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field313(v)
        }
      }()
      case 314: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field314(v)
        }
      }()
      case 315: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field315(v)
        }
      }()
      case 316: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field316(v)
        }
      }()
      case 317: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field317(v)
        }
      }()
      case 318: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field318(v)
        }
      }()
      case 319: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field319(v)
        }
      }()
      case 320: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field320(v)
        }
      }()
      case 321: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field321(v)
        }
      }()
      case 322: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field322(v)
        }
      }()
      case 323: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field323(v)
        }
      }()
      case 324: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field324(v)
        }
      }()
      case 325: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field325(v)
        }
      }()
      case 326: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field326(v)
        }
      }()
      case 327: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field327(v)
        }
      }()
      case 328: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field328(v)
        }
      }()
      case 329: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field329(v)
        }
      }()
      case 330: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field330(v)
        }
      }()
      case 331: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field331(v)
        }
      }()
      case 332: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field332(v)
        }
      }()
      case 333: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field333(v)
        }
      }()
      case 334: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field334(v)
        }
      }()
      case 335: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field335(v)
        }
      }()
      case 336: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field336(v)
        }
      }()
      case 337: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field337(v)
        }
      }()
      case 338: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field338(v)
        }
      }()
      case 339: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field339(v)
        }
      }()
      case 340: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field340(v)
        }
      }()
      case 341: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field341(v)
        }
      }()
      case 342: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field342(v)
        }
      }()
      case 343: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field343(v)
        }
      }()
      case 344: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field344(v)
        }
      }()
      case 345: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field345(v)
        }
      }()
      case 346: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field346(v)
        }
      }()
      case 347: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field347(v)
        }
      }()
      case 348: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field348(v)
        }
      }()
      case 349: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field349(v)
        }
      }()
      case 350: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field350(v)
        }
      }()
      case 351: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field351(v)
        }
      }()
      case 352: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field352(v)
        }
      }()
      case 353: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field353(v)
        }
      }()
      case 354: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field354(v)
        }
      }()
      case 355: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field355(v)
        }
      }()
      case 356: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field356(v)
        }
      }()
      case 357: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field357(v)
        }
      }()
      case 358: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field358(v)
        }
      }()
      case 359: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field359(v)
        }
      }()
      case 360: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field360(v)
        }
      }()
      case 361: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field361(v)
        }
      }()
      case 362: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field362(v)
        }
      }()
      case 363: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field363(v)
        }
      }()
      case 364: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field364(v)
        }
      }()
      case 365: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field365(v)
        }
      }()
      case 366: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field366(v)
        }
      }()
      case 367: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field367(v)
        }
      }()
      case 368: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field368(v)
        }
      }()
      case 369: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field369(v)
        }
      }()
      case 370: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field370(v)
        }
      }()
      case 371: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field371(v)
        }
      }()
      case 372: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field372(v)
        }
      }()
      case 373: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field373(v)
        }
      }()
      case 374: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field374(v)
        }
      }()
      case 375: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field375(v)
        }
      }()
      case 376: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field376(v)
        }
      }()
      case 377: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field377(v)
        }
      }()
      case 378: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field378(v)
        }
      }()
      case 379: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field379(v)
        }
      }()
      case 380: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field380(v)
        }
      }()
      case 381: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field381(v)
        }
      }()
      case 382: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field382(v)
        }
      }()
      case 383: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field383(v)
        }
      }()
      case 384: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field384(v)
        }
      }()
      case 385: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field385(v)
        }
      }()
      case 386: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field386(v)
        }
      }()
      case 387: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field387(v)
        }
      }()
      case 388: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field388(v)
        }
      }()
      case 389: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field389(v)
        }
      }()
      case 390: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field390(v)
        }
      }()
      case 391: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field391(v)
        }
      }()
      case 392: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field392(v)
        }
      }()
      case 393: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field393(v)
        }
      }()
      case 394: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field394(v)
        }
      }()
      case 395: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field395(v)
        }
      }()
      case 396: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field396(v)
        }
      }()
      case 397: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field397(v)
        }
      }()
      case 398: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field398(v)
        }
      }()
      case 399: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field399(v)
        }
      }()
      case 400: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field400(v)
        }
      }()
      case 401: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field401(v)
        }
      }()
      case 402: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field402(v)
        }
      }()
      case 403: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field403(v)
        }
      }()
      case 404: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field404(v)
        }
      }()
      case 405: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field405(v)
        }
      }()
      case 406: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field406(v)
        }
      }()
      case 407: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field407(v)
        }
      }()
      case 408: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field408(v)
        }
      }()
      case 409: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field409(v)
        }
      }()
      case 410: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field410(v)
        }
      }()
      case 411: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field411(v)
        }
      }()
      case 412: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field412(v)
        }
      }()
      case 413: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field413(v)
        }
      }()
      case 414: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field414(v)
        }
      }()
      case 415: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field415(v)
        }
      }()
      case 416: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field416(v)
        }
      }()
      case 417: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field417(v)
        }
      }()
      case 418: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field418(v)
        }
      }()
      case 419: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field419(v)
        }
      }()
      case 420: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field420(v)
        }
      }()
      case 421: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field421(v)
        }
      }()
      case 422: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field422(v)
        }
      }()
      case 423: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field423(v)
        }
      }()
      case 424: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field424(v)
        }
      }()
      case 425: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field425(v)
        }
      }()
      case 426: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field426(v)
        }
      }()
      case 427: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field427(v)
        }
      }()
      case 428: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field428(v)
        }
      }()
      case 429: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field429(v)
        }
      }()
      case 430: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field430(v)
        }
      }()
      case 431: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field431(v)
        }
      }()
      case 432: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field432(v)
        }
      }()
      case 433: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field433(v)
        }
      }()
      case 434: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field434(v)
        }
      }()
      case 435: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field435(v)
        }
      }()
      case 436: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field436(v)
        }
      }()
      case 437: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field437(v)
        }
      }()
      case 438: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field438(v)
        }
      }()
      case 439: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field439(v)
        }
      }()
      case 440: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field440(v)
        }
      }()
      case 441: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field441(v)
        }
      }()
      case 442: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field442(v)
        }
      }()
      case 443: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field443(v)
        }
      }()
      case 444: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field444(v)
        }
      }()
      case 445: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field445(v)
        }
      }()
      case 446: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field446(v)
        }
      }()
      case 447: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field447(v)
        }
      }()
      case 448: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field448(v)
        }
      }()
      case 449: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field449(v)
        }
      }()
      case 450: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field450(v)
        }
      }()
      case 451: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field451(v)
        }
      }()
      case 452: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field452(v)
        }
      }()
      case 453: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field453(v)
        }
      }()
      case 454: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field454(v)
        }
      }()
      case 455: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field455(v)
        }
      }()
      case 456: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field456(v)
        }
      }()
      case 457: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field457(v)
        }
      }()
      case 458: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field458(v)
        }
      }()
      case 459: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field459(v)
        }
      }()
      case 460: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field460(v)
        }
      }()
      case 461: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field461(v)
        }
      }()
      case 462: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field462(v)
        }
      }()
      case 463: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field463(v)
        }
      }()
      case 464: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field464(v)
        }
      }()
      case 465: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field465(v)
        }
      }()
      case 466: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field466(v)
        }
      }()
      case 467: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field467(v)
        }
      }()
      case 468: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field468(v)
        }
      }()
      case 469: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field469(v)
        }
      }()
      case 470: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field470(v)
        }
      }()
      case 471: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field471(v)
        }
      }()
      case 472: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field472(v)
        }
      }()
      case 473: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field473(v)
        }
      }()
      case 474: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field474(v)
        }
      }()
      case 475: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field475(v)
        }
      }()
      case 476: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field476(v)
        }
      }()
      case 477: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field477(v)
        }
      }()
      case 478: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field478(v)
        }
      }()
      case 479: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field479(v)
        }
      }()
      case 480: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field480(v)
        }
      }()
      case 481: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field481(v)
        }
      }()
      case 482: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field482(v)
        }
      }()
      case 483: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field483(v)
        }
      }()
      case 484: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field484(v)
        }
      }()
      case 485: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field485(v)
        }
      }()
      case 486: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field486(v)
        }
      }()
      case 487: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field487(v)
        }
      }()
      case 488: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field488(v)
        }
      }()
      case 489: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field489(v)
        }
      }()
      case 490: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field490(v)
        }
      }()
      case 491: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field491(v)
        }
      }()
      case 492: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field492(v)
        }
      }()
      case 493: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field493(v)
        }
      }()
      case 494: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field494(v)
        }
      }()
      case 495: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field495(v)
        }
      }()
      case 496: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field496(v)
        }
      }()
      case 497: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field497(v)
        }
      }()
      case 498: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field498(v)
        }
      }()
      case 499: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field499(v)
        }
      }()
      case 500: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field500(v)
        }
      }()
      case 501: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field501(v)
        }
      }()
      case 502: try { try decoder.decodeSingularInt32Field(value: &self._regularField502) }()
      case 503: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field503(v)
        }
      }()
      case 504: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field504(v)
        }
      }()
      case 505: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field505(v)
        }
      }()
      case 506: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field506(v)
        }
      }()
      case 507: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field507(v)
        }
      }()
      case 508: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field508(v)
        }
      }()
      case 509: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field509(v)
        }
      }()
      case 510: try {
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .field510(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.value {
    case .field001?: try {
      guard case .field001(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    }()
    case .field002?: try {
      guard case .field002(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    }()
    case .field003?: try {
      guard case .field003(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
    }()
    case .field004?: try {
      guard case .field004(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 4)
    }()
    case .field005?: try {
      guard case .field005(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 5)
    }()
    case .field006?: try {
      guard case .field006(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 6)
    }()
    case .field007?: try {
      guard case .field007(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 7)
    }()
    case .field008?: try {
      guard case .field008(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 8)
    }()
    case .field009?: try {
      guard case .field009(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 9)
    }()
    case .field010?: try {
      guard case .field010(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 10)
    }()
    case .field011?: try {
      guard case .field011(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 11)
    }()
    case .field012?: try {
      guard case .field012(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 12)
    }()
    case .field013?: try {
      guard case .field013(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 13)
    }()
    case .field014?: try {
      guard case .field014(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 14)
    }()
    case .field015?: try {
      guard case .field015(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 15)
    }()
    case .field016?: try {
      guard case .field016(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 16)
    }()
    case .field017?: try {
      guard case .field017(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 17)
    }()
    case .field018?: try {
      guard case .field018(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 18)
    }()
    case .field019?: try {
      guard case .field019(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 19)
    }()
    case .field020?: try {
      guard case .field020(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 20)
    }()
    case .field021?: try {
      guard case .field021(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 21)
    }()
    case .field022?: try {
      guard case .field022(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 22)
    }()
    case .field023?: try {
      guard case .field023(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 23)
    }()
    case .field024?: try {
      guard case .field024(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 24)
    }()
    case .field025?: try {
      guard case .field025(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 25)
    }()
    case .field026?: try {
      guard case .field026(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 26)
    }()
    case .field027?: try {
      guard case .field027(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 27)
    }()
    case .field028?: try {
      guard case .field028(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 28)
    }()
    case .field029?: try {
      guard case .field029(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 29)
    }()
    case .field030?: try {
      guard case .field030(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 30)
    }()
    case .field031?: try {
      guard case .field031(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 31)
    }()
    case .field032?: try {
      guard case .field032(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 32)
    }()
    case .field033?: try {
      guard case .field033(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 33)
    }()
    case .field034?: try {
      guard case .field034(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 34)
    }()
    case .field035?: try {
      guard case .field035(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 35)
    }()
    case .field036?: try {
      guard case .field036(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 36)
    }()
    case .field037?: try {
      guard case .field037(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 37)
    }()
    case .field038?: try {
      guard case .field038(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 38)
    }()
    case .field039?: try {
      guard case .field039(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 39)
    }()
    case .field040?: try {
      guard case .field040(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 40)
    }()
    case .field041?: try {
      guard case .field041(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 41)
    }()
    case .field042?: try {
      guard case .field042(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 42)
    }()
    case .field043?: try {
      guard case .field043(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 43)
    }()
    case .field044?: try {
      guard case .field044(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 44)
    }()
    case .field045?: try {
      guard case .field045(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 45)
    }()
    case .field046?: try {
      guard case .field046(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 46)
    }()
    case .field047?: try {
      guard case .field047(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 47)
    }()
    case .field048?: try {
      guard case .field048(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 48)
    }()
    case .field049?: try {
      guard case .field049(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 49)
    }()
    case .field050?: try {
      guard case .field050(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 50)
    }()
    case .field051?: try {
      guard case .field051(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 51)
    }()
    case .field052?: try {
      guard case .field052(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 52)
    }()
    case .field053?: try {
      guard case .field053(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 53)
    }()
    case .field054?: try {
      guard case .field054(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 54)
    }()
    case .field055?: try {
      guard case .field055(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 55)
    }()
    case .field056?: try {
      guard case .field056(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 56)
    }()
    case .field057?: try {
      guard case .field057(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 57)
    }()
    case .field058?: try {
      guard case .field058(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 58)
    }()
    case .field059?: try {
      guard case .field059(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 59)
    }()
    case .field060?: try {
      guard case .field060(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 60)
    }()
    case .field061?: try {
      guard case .field061(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 61)
    }()
    case .field062?: try {
      guard case .field062(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 62)
    }()
    case .field063?: try {
      guard case .field063(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 63)
    }()
    case .field064?: try {
      guard case .field064(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 64)
    }()
    case .field065?: try {
      guard case .field065(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 65)
    }()
    case .field066?: try {
      guard case .field066(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 66)
    }()
    case .field067?: try {
      guard case .field067(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 67)
    }()
    case .field068?: try {
      guard case .field068(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 68)
    }()
    case .field069?: try {
      guard case .field069(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 69)
    }()
    case .field070?: try {
      guard case .field070(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 70)
    }()
    case .field071?: try {
      guard case .field071(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 71)
    }()
    case .field072?: try {
      guard case .field072(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 72)
    }()
    case .field073?: try {
      guard case .field073(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 73)
    }()
    case .field074?: try {
      guard case .field074(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 74)
    }()
    case .field075?: try {
      guard case .field075(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 75)
    }()
    case .field076?: try {
      guard case .field076(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 76)
    }()
    case .field077?: try {
      guard case .field077(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 77)
    }()
    case .field078?: try {
      guard case .field078(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 78)
    }()
    case .field079?: try {
      guard case .field079(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 79)
    }()
    case .field080?: try {
      guard case .field080(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 80)
    }()
    case .field081?: try {
      guard case .field081(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 81)
    }()
    case .field082?: try {
      guard case .field082(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 82)
    }()
    case .field083?: try {
      guard case .field083(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 83)
    }()
    case .field084?: try {
      guard case .field084(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 84)
    }()
    case .field085?: try {
      guard case .field085(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 85)
    }()
    case .field086?: try {
      guard case .field086(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 86)
    }()
    case .field087?: try {
      guard case .field087(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 87)
    }()
    case .field088?: try {
      guard case .field088(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 88)
    }()
    case .field089?: try {
      guard case .field089(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 89)
    }()
    case .field090?: try {
      guard case .field090(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 90)
    }()
    case .field091?: try {
      guard case .field091(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 91)
    }()
    case .field092?: try {
      guard case .field092(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 92)
    }()
    case .field093?: try {
      guard case .field093(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 93)
    }()
    case .field094?: try {
      guard case .field094(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 94)
    }()
    case .field095?: try {
      guard case .field095(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 95)
    }()
    case .field096?: try {
      guard case .field096(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 96)
    }()
    case .field097?: try {
      guard case .field097(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 97)
    }()
    case .field098?: try {
      guard case .field098(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 98)
    }()
    case .field099?: try {
      guard case .field099(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 99)
    }()
    case .field100?: try {
      guard case .field100(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 100)
    }()
    case .field101?: try {
      guard case .field101(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 101)
    }()
    case .field102?: try {
      guard case .field102(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 102)
    }()
    case .field103?: try {
      guard case .field103(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 103)
    }()
    case .field104?: try {
      guard case .field104(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 104)
    }()
    case .field105?: try {
      guard case .field105(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 105)
    }()
    case .field106?: try {
      guard case .field106(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 106)
    }()
    case .field107?: try {
      guard case .field107(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 107)
    }()
    case .field108?: try {
      guard case .field108(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 108)
    }()
    case .field109?: try {
      guard case .field109(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 109)
    }()
    case .field110?: try {
      guard case .field110(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 110)
    }()
    case .field111?: try {
      guard case .field111(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 111)
    }()
    case .field112?: try {
      guard case .field112(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 112)
    }()
    case .field113?: try {
      guard case .field113(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 113)
    }()
    case .field114?: try {
      guard case .field114(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 114)
    }()
    case .field115?: try {
      guard case .field115(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 115)
    }()
    case .field116?: try {
      guard case .field116(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 116)
    }()
    case .field117?: try {
      guard case .field117(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 117)
    }()
    case .field118?: try {
      guard case .field118(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 118)
    }()
    case .field119?: try {
      guard case .field119(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 119)
    }()
    case .field120?: try {
      guard case .field120(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 120)
    }()
    case .field121?: try {
      guard case .field121(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 121)
    }()
    case .field122?: try {
      guard case .field122(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 122)
    }()
    case .field123?: try {
      guard case .field123(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 123)
    }()
    case .field124?: try {
      guard case .field124(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 124)
    }()
    case .field125?: try {
      guard case .field125(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 125)
    }()
    case .field126?: try {
      guard case .field126(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 126)
    }()
    case .field127?: try {
      guard case .field127(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 127)
    }()
    case .field128?: try {
      guard case .field128(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 128)
    }()
    case .field129?: try {
      guard case .field129(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 129)
    }()
    case .field130?: try {
      guard case .field130(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 130)
    }()
    case .field131?: try {
      guard case .field131(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 131)
    }()
    case .field132?: try {
      guard case .field132(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 132)
    }()
    case .field133?: try {
      guard case .field133(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 133)
    }()
    case .field134?: try {
      guard case .field134(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 134)
    }()
    case .field135?: try {
      guard case .field135(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 135)
    }()
    case .field136?: try {
      guard case .field136(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 136)
    }()
    case .field137?: try {
      guard case .field137(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 137)
    }()
    case .field138?: try {
      guard case .field138(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 138)
    }()
    case .field139?: try {
      guard case .field139(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 139)
    }()
    case .field140?: try {
      guard case .field140(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 140)
    }()
    case .field141?: try {
      guard case .field141(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 141)
    }()
    case .field142?: try {
      guard case .field142(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 142)
    }()
    case .field143?: try {
      guard case .field143(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 143)
    }()
    case .field144?: try {
      guard case .field144(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 144)
    }()
    case .field145?: try {
      guard case .field145(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 145)
    }()
    case .field146?: try {
      guard case .field146(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 146)
    }()
    case .field147?: try {
      guard case .field147(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 147)
    }()
    case .field148?: try {
      guard case .field148(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 148)
    }()
    case .field149?: try {
      guard case .field149(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 149)
    }()
    case .field150?: try {
      guard case .field150(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 150)
    }()
    case .field151?: try {
      guard case .field151(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 151)
    }()
    case .field152?: try {
      guard case .field152(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 152)
    }()
    case .field153?: try {
      guard case .field153(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 153)
    }()
    case .field154?: try {
      guard case .field154(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 154)
    }()
    case .field155?: try {
      guard case .field155(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 155)
    }()
    case .field156?: try {
      guard case .field156(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 156)
    }()
    case .field157?: try {
      guard case .field157(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 157)
    }()
    case .field158?: try {
      guard case .field158(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 158)
    }()
    case .field159?: try {
      guard case .field159(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 159)
    }()
    case .field160?: try {
      guard case .field160(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 160)
    }()
    case .field161?: try {
      guard case .field161(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 161)
    }()
    case .field162?: try {
      guard case .field162(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 162)
    }()
    case .field163?: try {
      guard case .field163(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 163)
    }()
    case .field164?: try {
      guard case .field164(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 164)
    }()
    case .field165?: try {
      guard case .field165(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 165)
    }()
    case .field166?: try {
      guard case .field166(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 166)
    }()
    case .field167?: try {
      guard case .field167(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 167)
    }()
    case .field168?: try {
      guard case .field168(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 168)
    }()
    case .field169?: try {
      guard case .field169(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 169)
    }()
    case .field170?: try {
      guard case .field170(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 170)
    }()
    case .field171?: try {
      guard case .field171(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 171)
    }()
    case .field172?: try {
      guard case .field172(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 172)
    }()
    case .field173?: try {
      guard case .field173(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 173)
    }()
    case .field174?: try {
      guard case .field174(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 174)
    }()
    case .field175?: try {
      guard case .field175(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 175)
    }()
    case .field176?: try {
      guard case .field176(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 176)
    }()
    case .field177?: try {
      guard case .field177(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 177)
    }()
    case .field178?: try {
      guard case .field178(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 178)
    }()
    case .field179?: try {
      guard case .field179(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 179)
    }()
    case .field180?: try {
      guard case .field180(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 180)
    }()
    case .field181?: try {
      guard case .field181(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 181)
    }()
    case .field182?: try {
      guard case .field182(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 182)
    }()
    case .field183?: try {
      guard case .field183(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 183)
    }()
    case .field184?: try {
      guard case .field184(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 184)
    }()
    case .field185?: try {
      guard case .field185(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 185)
    }()
    case .field186?: try {
      guard case .field186(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 186)
    }()
    case .field187?: try {
      guard case .field187(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 187)
    }()
    case .field188?: try {
      guard case .field188(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 188)
    }()
    case .field189?: try {
      guard case .field189(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 189)
    }()
    case .field190?: try {
      guard case .field190(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 190)
    }()
    case .field191?: try {
      guard case .field191(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 191)
    }()
    case .field192?: try {
      guard case .field192(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 192)
    }()
    case .field193?: try {
      guard case .field193(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 193)
    }()
    case .field194?: try {
      guard case .field194(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 194)
    }()
    case .field195?: try {
      guard case .field195(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 195)
    }()
    case .field196?: try {
      guard case .field196(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 196)
    }()
    case .field197?: try {
      guard case .field197(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 197)
    }()
    case .field198?: try {
      guard case .field198(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 198)
    }()
    case .field199?: try {
      guard case .field199(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 199)
    }()
    case .field200?: try {
      guard case .field200(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 200)
    }()
    case .field201?: try {
      guard case .field201(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 201)
    }()
    case .field202?: try {
      guard case .field202(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 202)
    }()
    case .field203?: try {
      guard case .field203(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 203)
    }()
    case .field204?: try {
      guard case .field204(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 204)
    }()
    case .field205?: try {
      guard case .field205(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 205)
    }()
    case .field206?: try {
      guard case .field206(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 206)
    }()
    case .field207?: try {
      guard case .field207(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 207)
    }()
    case .field208?: try {
      guard case .field208(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 208)
    }()
    case .field209?: try {
      guard case .field209(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 209)
    }()
    case .field210?: try {
      guard case .field210(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 210)
    }()
    case .field211?: try {
      guard case .field211(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 211)
    }()
    case .field212?: try {
      guard case .field212(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 212)
    }()
    case .field213?: try {
      guard case .field213(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 213)
    }()
    case .field214?: try {
      guard case .field214(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 214)
    }()
    case .field215?: try {
      guard case .field215(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 215)
    }()
    case .field216?: try {
      guard case .field216(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 216)
    }()
    case .field217?: try {
      guard case .field217(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 217)
    }()
    case .field218?: try {
      guard case .field218(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 218)
    }()
    case .field219?: try {
      guard case .field219(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 219)
    }()
    case .field220?: try {
      guard case .field220(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 220)
    }()
    case .field221?: try {
      guard case .field221(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 221)
    }()
    case .field222?: try {
      guard case .field222(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 222)
    }()
    case .field223?: try {
      guard case .field223(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 223)
    }()
    case .field224?: try {
      guard case .field224(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 224)
    }()
    case .field225?: try {
      guard case .field225(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 225)
    }()
    case .field226?: try {
      guard case .field226(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 226)
    }()
    case .field227?: try {
      guard case .field227(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 227)
    }()
    case .field228?: try {
      guard case .field228(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 228)
    }()
    case .field229?: try {
      guard case .field229(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 229)
    }()
    case .field230?: try {
      guard case .field230(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 230)
    }()
    case .field231?: try {
      guard case .field231(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 231)
    }()
    case .field232?: try {
      guard case .field232(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 232)
    }()
    case .field233?: try {
      guard case .field233(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 233)
    }()
    case .field234?: try {
      guard case .field234(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 234)
    }()
    case .field235?: try {
      guard case .field235(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 235)
    }()
    case .field236?: try {
      guard case .field236(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 236)
    }()
    case .field237?: try {
      guard case .field237(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 237)
    }()
    case .field238?: try {
      guard case .field238(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 238)
    }()
    case .field239?: try {
      guard case .field239(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 239)
    }()
    case .field240?: try {
      guard case .field240(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 240)
    }()
    case .field241?: try {
      guard case .field241(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 241)
    }()
    case .field242?: try {
      guard case .field242(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 242)
    }()
    case .field243?: try {
      guard case .field243(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 243)
    }()
    case .field244?: try {
      guard case .field244(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 244)
    }()
    case .field245?: try {
      guard case .field245(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 245)
    }()
    case .field246?: try {
      guard case .field246(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 246)
    }()
    case .field247?: try {
      guard case .field247(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 247)
    }()
    case .field248?: try {
      guard case .field248(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 248)
    }()
    case .field249?: try {
      guard case .field249(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 249)
    }()
    case .field250?: try {
      guard case .field250(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 250)
    }()
    default: break
    }
    try { if let v = self._regularField251 {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 251)
    } }()
    switch self.value {
    case .field252?: try {
      guard case .field252(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 252)
    }()
    case .field253?: try {
      guard case .field253(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 253)
    }()
    case .field254?: try {
      guard case .field254(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 254)
    }()
    case .field255?: try {
      guard case .field255(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 255)
    }()
    case .field256?: try {
      guard case .field256(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 256)
    }()
    case .field257?: try {
      guard case .field257(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 257)
    }()
    case .field258?: try {
      guard case .field258(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 258)
    }()
    case .field259?: try {
      guard case .field259(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 259)
    }()
    case .field260?: try {
      guard case .field260(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 260)
    }()
    case .field261?: try {
      guard case .field261(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 261)
    }()
    case .field262?: try {
      guard case .field262(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 262)
    }()
    case .field263?: try {
      guard case .field263(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 263)
    }()
    case .field264?: try {
      guard case .field264(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 264)
    }()
    case .field265?: try {
      guard case .field265(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 265)
    }()
    case .field266?: try {
      guard case .field266(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 266)
    }()
    case .field267?: try {
      guard case .field267(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 267)
    }()
    case .field268?: try {
      guard case .field268(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 268)
    }()
    case .field269?: try {
      guard case .field269(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 269)
    }()
    case .field270?: try {
      guard case .field270(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 270)
    }()
    case .field271?: try {
      guard case .field271(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 271)
    }()
    case .field272?: try {
      guard case .field272(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 272)
    }()
    case .field273?: try {
      guard case .field273(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 273)
    }()
    case .field274?: try {
      guard case .field274(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 274)
    }()
    case .field275?: try {
      guard case .field275(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 275)
    }()
    case .field276?: try {
      guard case .field276(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 276)
    }()
    case .field277?: try {
      guard case .field277(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 277)
    }()
    case .field278?: try {
      guard case .field278(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 278)
    }()
    case .field279?: try {
      guard case .field279(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 279)
    }()
    case .field280?: try {
      guard case .field280(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 280)
    }()
    case .field281?: try {
      guard case .field281(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 281)
    }()
    case .field282?: try {
      guard case .field282(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 282)
    }()
    case .field283?: try {
      guard case .field283(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 283)
    }()
    case .field284?: try {
      guard case .field284(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 284)
    }()
    case .field285?: try {
      guard case .field285(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 285)
    }()
    case .field286?: try {
      guard case .field286(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 286)
    }()
    case .field287?: try {
      guard case .field287(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 287)
    }()
    case .field288?: try {
      guard case .field288(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 288)
    }()
    case .field289?: try {
      guard case .field289(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 289)
    }()
    case .field290?: try {
      guard case .field290(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 290)
    }()
    case .field291?: try {
      guard case .field291(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 291)
    }()
    case .field292?: try {
      guard case .field292(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 292)
    }()
    case .field293?: try {
      guard case .field293(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 293)
    }()
    case .field294?: try {
      guard case .field294(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 294)
    }()
    case .field295?: try {
      guard case .field295(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 295)
    }()
    case .field296?: try {
      guard case .field296(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 296)
    }()
    case .field297?: try {
      guard case .field297(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 297)
    }()
    case .field298?: try {
      guard case .field298(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 298)
    }()
    case .field299?: try {
      guard case .field299(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 299)
    }()
    case .field300?: try {
      guard case .field300(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 300)
    }()
    case .field301?: try {
      guard case .field301(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 301)
    }()
    case .field302?: try {
      guard case .field302(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 302)
    }()
    case .field303?: try {
      guard case .field303(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 303)
    }()
    case .field304?: try {
      guard case .field304(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 304)
    }()
    case .field305?: try {
      guard case .field305(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 305)
    }()
    case .field306?: try {
      guard case .field306(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 306)
    }()
    case .field307?: try {
      guard case .field307(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 307)
    }()
    case .field308?: try {
      guard case .field308(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 308)
    }()
    case .field309?: try {
      guard case .field309(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 309)
    }()
    case .field310?: try {
      guard case .field310(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 310)
    }()
    case .field311?: try {
      guard case .field311(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 311)
    }()
    case .field312?: try {
      guard case .field312(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 312)
    }()
    case .field313?: try {
      guard case .field313(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 313)
    }()
    case .field314?: try {
      guard case .field314(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 314)
    }()
    case .field315?: try {
      guard case .field315(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 315)
    }()
    case .field316?: try {
      guard case .field316(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 316)
    }()
    case .field317?: try {
      guard case .field317(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 317)
    }()
    case .field318?: try {
      guard case .field318(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 318)
    }()
    case .field319?: try {
      guard case .field319(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 319)
    }()
    case .field320?: try {
      guard case .field320(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 320)
    }()
    case .field321?: try {
      guard case .field321(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 321)
    }()
    case .field322?: try {
      guard case .field322(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 322)
    }()
    case .field323?: try {
      guard case .field323(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 323)
    }()
    case .field324?: try {
      guard case .field324(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 324)
    }()
    case .field325?: try {
      guard case .field325(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 325)
    }()
    case .field326?: try {
      guard case .field326(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 326)
    }()
    case .field327?: try {
      guard case .field327(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 327)
    }()
    case .field328?: try {
      guard case .field328(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 328)
    }()
    case .field329?: try {
      guard case .field329(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 329)
    }()
    case .field330?: try {
      guard case .field330(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 330)
    }()
    case .field331?: try {
      guard case .field331(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 331)
    }()
    case .field332?: try {
      guard case .field332(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 332)
    }()
    case .field333?: try {
      guard case .field333(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 333)
    }()
    case .field334?: try {
      guard case .field334(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 334)
    }()
    case .field335?: try {
      guard case .field335(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 335)
    }()
    case .field336?: try {
      guard case .field336(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 336)
    }()
    case .field337?: try {
      guard case .field337(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 337)
    }()
    case .field338?: try {
      guard case .field338(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 338)
    }()
    case .field339?: try {
      guard case .field339(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 339)
    }()
    case .field340?: try {
      guard case .field340(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 340)
    }()
    case .field341?: try {
      guard case .field341(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 341)
    }()
    case .field342?: try {
      guard case .field342(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 342)
    }()
    case .field343?: try {
      guard case .field343(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 343)
    }()
    case .field344?: try {
      guard case .field344(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 344)
    }()
    case .field345?: try {
      guard case .field345(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 345)
    }()
    case .field346?: try {
      guard case .field346(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 346)
    }()
    case .field347?: try {
      guard case .field347(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 347)
    }()
    case .field348?: try {
      guard case .field348(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 348)
    }()
    case .field349?: try {
      guard case .field349(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 349)
    }()
    case .field350?: try {
      guard case .field350(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 350)
    }()
    case .field351?: try {
      guard case .field351(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 351)
    }()
    case .field352?: try {
      guard case .field352(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 352)
    }()
    case .field353?: try {
      guard case .field353(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 353)
    }()
    case .field354?: try {
      guard case .field354(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 354)
    }()
    case .field355?: try {
      guard case .field355(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 355)
    }()
    case .field356?: try {
      guard case .field356(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 356)
    }()
    case .field357?: try {
      guard case .field357(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 357)
    }()
    case .field358?: try {
      guard case .field358(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 358)
    }()
    case .field359?: try {
      guard case .field359(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 359)
    }()
    case .field360?: try {
      guard case .field360(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 360)
    }()
    case .field361?: try {
      guard case .field361(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 361)
    }()
    case .field362?: try {
      guard case .field362(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 362)
    }()
    case .field363?: try {
      guard case .field363(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 363)
    }()
    case .field364?: try {
      guard case .field364(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 364)
    }()
    case .field365?: try {
      guard case .field365(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 365)
    }()
    case .field366?: try {
      guard case .field366(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 366)
    }()
    case .field367?: try {
      guard case .field367(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 367)
    }()
    case .field368?: try {
      guard case .field368(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 368)
    }()
    case .field369?: try {
      guard case .field369(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 369)
    }()
    case .field370?: try {
      guard case .field370(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 370)
    }()
    case .field371?: try {
      guard case .field371(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 371)
    }()
    case .field372?: try {
      guard case .field372(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 372)
    }()
    case .field373?: try {
      guard case .field373(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 373)
    }()
    case .field374?: try {
      guard case .field374(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 374)
    }()
    case .field375?: try {
      guard case .field375(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 375)
    }()
    case .field376?: try {
      guard case .field376(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 376)
    }()
    case .field377?: try {
      guard case .field377(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 377)
    }()
    case .field378?: try {
      guard case .field378(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 378)
    }()
    case .field379?: try {
      guard case .field379(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 379)
    }()
    case .field380?: try {
      guard case .field380(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 380)
    }()
    case .field381?: try {
      guard case .field381(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 381)
    }()
    case .field382?: try {
      guard case .field382(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 382)
    }()
    case .field383?: try {
      guard case .field383(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 383)
    }()
    case .field384?: try {
      guard case .field384(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 384)
    }()
    case .field385?: try {
      guard case .field385(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 385)
    }()
    case .field386?: try {
      guard case .field386(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 386)
    }()
    case .field387?: try {
      guard case .field387(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 387)
    }()
    case .field388?: try {
      guard case .field388(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 388)
    }()
    case .field389?: try {
      guard case .field389(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 389)
    }()
    case .field390?: try {
      guard case .field390(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 390)
    }()
    case .field391?: try {
      guard case .field391(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 391)
    }()
    case .field392?: try {
      guard case .field392(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 392)
    }()
    case .field393?: try {
      guard case .field393(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 393)
    }()
    case .field394?: try {
      guard case .field394(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 394)
    }()
    case .field395?: try {
      guard case .field395(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 395)
    }()
    case .field396?: try {
      guard case .field396(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 396)
    }()
    case .field397?: try {
      guard case .field397(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 397)
    }()
    case .field398?: try {
      guard case .field398(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 398)
    }()
    case .field399?: try {
      guard case .field399(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 399)
    }()
    case .field400?: try {
      guard case .field400(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 400)
    }()
    case .field401?: try {
      guard case .field401(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 401)
    }()
    case .field402?: try {
      guard case .field402(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 402)
    }()
    case .field403?: try {
      guard case .field403(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 403)
    }()
    case .field404?: try {
      guard case .field404(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 404)
    }()
    case .field405?: try {
      guard case .field405(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 405)
    }()
    case .field406?: try {
      guard case .field406(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 406)
    }()
    case .field407?: try {
      guard case .field407(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 407)
    }()
    case .field408?: try {
      guard case .field408(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 408)
    }()
    case .field409?: try {
      guard case .field409(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 409)
    }()
    case .field410?: try {
      guard case .field410(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 410)
    }()
    case .field411?: try {
      guard case .field411(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 411)
    }()
    case .field412?: try {
      guard case .field412(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 412)
    }()
    case .field413?: try {
      guard case .field413(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 413)
    }()
    case .field414?: try {
      guard case .field414(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 414)
    }()
    case .field415?: try {
      guard case .field415(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 415)
    }()
    case .field416?: try {
      guard case .field416(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 416)
    }()
    case .field417?: try {
      guard case .field417(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 417)
    }()
    case .field418?: try {
      guard case .field418(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 418)
    }()
    case .field419?: try {
      guard case .field419(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 419)
    }()
    case .field420?: try {
      guard case .field420(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 420)
    }()
    case .field421?: try {
      guard case .field421(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 421)
    }()
    case .field422?: try {
      guard case .field422(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 422)
    }()
    case .field423?: try {
      guard case .field423(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 423)
    }()
    case .field424?: try {
      guard case .field424(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 424)
    }()
    case .field425?: try {
      guard case .field425(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 425)
    }()
    case .field426?: try {
      guard case .field426(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 426)
    }()
    case .field427?: try {
      guard case .field427(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 427)
    }()
    case .field428?: try {
      guard case .field428(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 428)
    }()
    case .field429?: try {
      guard case .field429(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 429)
    }()
    case .field430?: try {
      guard case .field430(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 430)
    }()
    case .field431?: try {
      guard case .field431(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 431)
    }()
    case .field432?: try {
      guard case .field432(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 432)
    }()
    case .field433?: try {
      guard case .field433(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 433)
    }()
    case .field434?: try {
      guard case .field434(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 434)
    }()
    case .field435?: try {
      guard case .field435(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 435)
    }()
    case .field436?: try {
      guard case .field436(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 436)
    }()
    case .field437?: try {
      guard case .field437(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 437)
    }()
    case .field438?: try {
      guard case .field438(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 438)
    }()
    case .field439?: try {
      guard case .field439(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 439)
    }()
    case .field440?: try {
      guard case .field440(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 440)
    }()
    case .field441?: try {
      guard case .field441(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 441)
    }()
    case .field442?: try {
      guard case .field442(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 442)
    }()
    case .field443?: try {
      guard case .field443(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 443)
    }()
    case .field444?: try {
      guard case .field444(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 444)
    }()
    case .field445?: try {
      guard case .field445(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 445)
    }()
    case .field446?: try {
      guard case .field446(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 446)
    }()
    case .field447?: try {
      guard case .field447(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 447)
    }()
    case .field448?: try {
      guard case .field448(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 448)
    }()
    case .field449?: try {
      guard case .field449(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 449)
    }()
    case .field450?: try {
      guard case .field450(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 450)
    }()
    case .field451?: try {
      guard case .field451(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 451)
    }()
    case .field452?: try {
      guard case .field452(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 452)
    }()
    case .field453?: try {
      guard case .field453(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 453)
    }()
    case .field454?: try {
      guard case .field454(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 454)
    }()
    case .field455?: try {
      guard case .field455(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 455)
    }()
    case .field456?: try {
      guard case .field456(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 456)
    }()
    case .field457?: try {
      guard case .field457(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 457)
    }()
    case .field458?: try {
      guard case .field458(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 458)
    }()
    case .field459?: try {
      guard case .field459(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 459)
    }()
    case .field460?: try {
      guard case .field460(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 460)
    }()
    case .field461?: try {
      guard case .field461(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 461)
    }()
    case .field462?: try {
      guard case .field462(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 462)
    }()
    case .field463?: try {
      guard case .field463(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 463)
    }()
    case .field464?: try {
      guard case .field464(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 464)
    }()
    case .field465?: try {
      guard case .field465(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 465)
    }()
    case .field466?: try {
      guard case .field466(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 466)
    }()
    case .field467?: try {
      guard case .field467(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 467)
    }()
    case .field468?: try {
      guard case .field468(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 468)
    }()
    case .field469?: try {
      guard case .field469(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 469)
    }()
    case .field470?: try {
      guard case .field470(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 470)
    }()
    case .field471?: try {
      guard case .field471(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 471)
    }()
    case .field472?: try {
      guard case .field472(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 472)
    }()
    case .field473?: try {
      guard case .field473(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 473)
    }()
    case .field474?: try {
      guard case .field474(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 474)
    }()
    case .field475?: try {
      guard case .field475(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 475)
    }()
    case .field476?: try {
      guard case .field476(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 476)
    }()
    case .field477?: try {
      guard case .field477(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 477)
    }()
    case .field478?: try {
      guard case .field478(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 478)
    }()
    case .field479?: try {
      guard case .field479(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 479)
    }()
    case .field480?: try {
      guard case .field480(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 480)
    }()
    case .field481?: try {
      guard case .field481(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 481)
    }()
    case .field482?: try {
      guard case .field482(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 482)
    }()
    case .field483?: try {
      guard case .field483(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 483)
    }()
    case .field484?: try {
      guard case .field484(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 484)
    }()
    case .field485?: try {
      guard case .field485(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 485)
    }()
    case .field486?: try {
      guard case .field486(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 486)
    }()
    case .field487?: try {
      guard case .field487(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 487)
    }()
    case .field488?: try {
      guard case .field488(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 488)
    }()
    case .field489?: try {
      guard case .field489(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 489)
    }()
    case .field490?: try {
      guard case .field490(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 490)
    }()
    case .field491?: try {
      guard case .field491(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 491)
    }()
    case .field492?: try {
      guard case .field492(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 492)
    }()
    case .field493?: try {
      guard case .field493(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 493)
    }()
    case .field494?: try {
      guard case .field494(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 494)
    }()
    case .field495?: try {
      guard case .field495(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 495)
    }()
    case .field496?: try {
      guard case .field496(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 496)
    }()
    case .field497?: try {
      guard case .field497(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 497)
    }()
    case .field498?: try {
      guard case .field498(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 498)
    }()
    case .field499?: try {
      guard case .field499(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 499)
    }()
    case .field500?: try {
      guard case .field500(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 500)
    }()
    case .field501?: try {
      guard case .field501(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 501)
    }()
    default: break
    }
    try { if let v = self._regularField502 {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 502)
    } }()
    switch self.value {
    case .field503?: try {
      guard case .field503(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 503)
    }()
    case .field504?: try {
      guard case .field504(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 504)
    }()
    case .field505?: try {
      guard case .field505(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 505)
    }()
    case .field506?: try {
      guard case .field506(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 506)
    }()
    case .field507?: try {
      guard case .field507(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 507)
    }()
    case .field508?: try {
      guard case .field508(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 508)
    }()
    case .field509?: try {
      guard case .field509(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 509)
    }()
    case .field510?: try {
      guard case .field510(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 510)
    }()
    default: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SwiftProtoTesting_SwitchSplit_SwitchSplitMessage, rhs: SwiftProtoTesting_SwitchSplit_SwitchSplitMessage) -> Bool {
    if lhs._regularField251 != rhs._regularField251 {return false}
    if lhs._regularField502 != rhs._regularField502 {return false}
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
