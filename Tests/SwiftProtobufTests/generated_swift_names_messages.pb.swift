// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: generated_swift_names_messages.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

/// See Makefile for the logic that generates this
/// Protoc errors imply this file is being generated incorrectly
/// Swift compile errors are probably bugs in protoc-gen-swift

import Foundation
import SwiftProtobufCore

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobufCore.ProtobufAPIVersionCheck {
  struct _3: SwiftProtobufCore.ProtobufAPIVersion_3 {}
  typealias Version = _3
}

struct ProtobufUnittestGenerated_GeneratedSwiftReservedMessages {
  // SwiftProtobufCore.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobufCore.UnknownStorage()

  struct adjusted {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var adjusted: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct aggregateValue {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var aggregateValue: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct allCases {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var allCases: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct allowAlias {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var allowAlias: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct alwaysPrintEnumsAsInts {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var alwaysPrintEnumsAsInts: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct alwaysPrintInt64sAsNumbers {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var alwaysPrintInt64SAsNumbers: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct annotation {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var annotation: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct any {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var any: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct AnyExtensionField {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var anyExtensionField: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct AnyMessageExtension {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var anyMessageExtension: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct AnyMessageStorage {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var anyMessageStorage: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct AnyUnpackError {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var anyUnpackError: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct Api {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var api: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct appended {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var appended: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct appendUIntHex {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var appendUintHex: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct appendUnknown {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var appendUnknown: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct areAllInitialized {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var areAllInitialized: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct Array {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var array: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct arrayDepth {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var arrayDepth: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct arrayLiteral {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var arrayLiteral: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct arraySeparator {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var arraySeparator: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct asMessage {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var `as`: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct asciiOpenCurlyBracket {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var asciiOpenCurlyBracket: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct asciiZero {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var asciiZero: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct available {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var available: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct b {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var b: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct base64Values {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var base64Values: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct baseAddress {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var baseAddress: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct BaseType {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var baseType: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct begin {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var begin: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct binary {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var binary: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct BinaryDecoder {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var binaryDecoder: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct BinaryDecodingError {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var binaryDecodingError: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct BinaryDecodingOptions {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var binaryDecodingOptions: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct BinaryDelimited {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var binaryDelimited: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct BinaryEncoder {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var binaryEncoder: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct BinaryEncodingError {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var binaryEncodingError: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct BinaryEncodingMessageSetSizeVisitor {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var binaryEncodingMessageSetSizeVisitor: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct BinaryEncodingMessageSetVisitor {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var binaryEncodingMessageSetVisitor: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct BinaryEncodingSizeVisitor {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var binaryEncodingSizeVisitor: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct BinaryEncodingVisitor {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var binaryEncodingVisitor: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct binaryOptions {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var binaryOptions: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct bitPattern {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var bitPattern: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct body {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var body: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct BoolMessage {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var bool: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct booleanLiteral {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var booleanLiteral: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct BooleanLiteralType {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var booleanLiteralType: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct boolValue {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var boolValue: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct bytes {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var bytes: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct bytesInGroup {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var bytesInGroup: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct bytesNeeded {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var bytesNeeded: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct bytesRead {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var bytesRead: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct BytesValue {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var bytesValue: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct c {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var c: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct capitalizeNext {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var capitalizeNext: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct cardinality {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var cardinality: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct CaseIterable {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var caseIterable: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct ccEnableArenas {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var ccEnableArenas: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct ccGenericServices {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var ccGenericServices: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct Character {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var character: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct chars {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var chars: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct chunk {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var chunk: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct classMessage {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var `class`: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct clearAggregateValue {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var clearAggregateValue_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct clearAllowAlias {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var clearAllowAlias_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct clearBegin {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var clearBegin_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct clearCcEnableArenas {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var clearCcEnableArenas_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct clearCcGenericServices {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var clearCcGenericServices_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct clearClientStreaming {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var clearClientStreaming_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct clearCsharpNamespace {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var clearCsharpNamespace_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct clearCtype {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var clearCtype_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct clearDebugRedact {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var clearDebugRedact_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct clearDefaultValue {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var clearDefaultValue_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct clearDeprecated {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var clearDeprecated_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct clearDeprecatedLegacyJsonFieldConflicts {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var clearDeprecatedLegacyJsonFieldConflicts_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct clearDoubleValue {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var clearDoubleValue_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct clearEdition {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var clearEdition_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct clearEnd {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var clearEnd_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct clearExtendee {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var clearExtendee_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct clearExtensionValue {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var clearExtensionValue_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct clearGoPackage {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var clearGoPackage_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct clearIdempotencyLevel {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var clearIdempotencyLevel_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct clearIdentifierValue {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var clearIdentifierValue_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct clearInputType {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var clearInputType_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct clearIsExtension {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var clearIsExtension_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct clearJavaGenerateEqualsAndHash {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var clearJavaGenerateEqualsAndHash_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct clearJavaGenericServices {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var clearJavaGenericServices_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct clearJavaMultipleFiles {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var clearJavaMultipleFiles_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct clearJavaOuterClassname {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var clearJavaOuterClassname_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct clearJavaPackage {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var clearJavaPackage_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct clearJavaStringCheckUtf8 {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var clearJavaStringCheckUtf8_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct clearJsonName {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var clearJsonName_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct clearJstype {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var clearJstype_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct clearLabel {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var clearLabel_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct clearLazy {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var clearLazy_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct clearLeadingComments {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var clearLeadingComments_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct clearMapEntry {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var clearMapEntry_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct clearMessageSetWireFormat {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var clearMessageSetWireFormat_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct clearName {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var clearName_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct clearNamePart {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var clearNamePart_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct clearNegativeIntValue {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var clearNegativeIntValue_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct clearNoStandardDescriptorAccessor {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var clearNoStandardDescriptorAccessor_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct clearNumber {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var clearNumber_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct clearObjcClassPrefix {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var clearObjcClassPrefix_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct clearOneofIndex {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var clearOneofIndex_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct clearOptimizeFor {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var clearOptimizeFor_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct clearOptions {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var clearOptions_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct clearOutputType {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var clearOutputType_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct clearPackage {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var clearPackage_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct clearPacked {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var clearPacked_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct clearPhpClassPrefix {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var clearPhpClassPrefix_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct clearPhpGenericServices {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var clearPhpGenericServices_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct clearPhpMetadataNamespace {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var clearPhpMetadataNamespace_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct clearPhpNamespace {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var clearPhpNamespace_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct clearPositiveIntValue {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var clearPositiveIntValue_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct clearProto3Optional {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var clearProto3Optional_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct clearPyGenericServices {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var clearPyGenericServices_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct clearRetention {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var clearRetention_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct clearRubyPackage {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var clearRubyPackage_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct clearSemantic {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var clearSemantic_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct clearServerStreaming {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var clearServerStreaming_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct clearSourceCodeInfo {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var clearSourceCodeInfo_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct clearSourceContext {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var clearSourceContext_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct clearSourceFile {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var clearSourceFile_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct clearStart {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var clearStart_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct clearStringValue {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var clearStringValue_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct clearSwiftPrefix {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var clearSwiftPrefix_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct clearSyntax {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var clearSyntax_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct clearTrailingComments {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var clearTrailingComments_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct clearType {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var clearType_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct clearTypeName {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var clearTypeName_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct clearUnverifiedLazy {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var clearUnverifiedLazy_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct clearValue {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var clearValue_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct clearWeak {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var clearWeak_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct clientStreaming {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var clientStreaming: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct codePoint {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var codePoint: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct codeUnits {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var codeUnits: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct Collection {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var collection: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct com {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var com: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct comma {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var comma: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct contentsOf {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var contentsOf: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct count {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var count: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct countVarintsInBuffer {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var countVarintsInBuffer: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct csharpNamespace {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var csharpNamespace: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct ctype {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var ctype: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct customCodable {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var customCodable: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct CustomDebugStringConvertible {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var customDebugStringConvertible: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct d {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var d: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct DataMessage {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var data: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct dataResult {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var dataResult: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct date {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var date: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct daySec {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var daySec: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct daysSinceEpoch {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var daysSinceEpoch: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct debugDescriptionMessage {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var debugDescription_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct debugRedact {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var debugRedact: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct decoded {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var decoded: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct decodedFromJSONNull {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var decodedFromJsonnull: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct decodeExtensionField {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var decodeExtensionField: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct decodeExtensionFieldsAsMessageSet {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var decodeExtensionFieldsAsMessageSet: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct decodeJSON {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var decodeJson: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct decodeMapField {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var decodeMapField: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct decodeMessageMessage {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var decodeMessage: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct decoder {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var decoder: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct decodeRepeated {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var decodeRepeated: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct decodeRepeatedBoolField {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var decodeRepeatedBoolField: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct decodeRepeatedBytesField {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var decodeRepeatedBytesField: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct decodeRepeatedDoubleField {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var decodeRepeatedDoubleField: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct decodeRepeatedEnumField {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var decodeRepeatedEnumField: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct decodeRepeatedFixed32Field {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var decodeRepeatedFixed32Field: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct decodeRepeatedFixed64Field {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var decodeRepeatedFixed64Field: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct decodeRepeatedFloatField {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var decodeRepeatedFloatField: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct decodeRepeatedGroupField {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var decodeRepeatedGroupField: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct decodeRepeatedInt32Field {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var decodeRepeatedInt32Field: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct decodeRepeatedInt64Field {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var decodeRepeatedInt64Field: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct decodeRepeatedMessageField {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var decodeRepeatedMessageField: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct decodeRepeatedSFixed32Field {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var decodeRepeatedSfixed32Field: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct decodeRepeatedSFixed64Field {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var decodeRepeatedSfixed64Field: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct decodeRepeatedSInt32Field {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var decodeRepeatedSint32Field: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct decodeRepeatedSInt64Field {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var decodeRepeatedSint64Field: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct decodeRepeatedStringField {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var decodeRepeatedStringField: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct decodeRepeatedUInt32Field {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var decodeRepeatedUint32Field: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct decodeRepeatedUInt64Field {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var decodeRepeatedUint64Field: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct decodeSingular {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var decodeSingular: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct decodeSingularBoolField {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var decodeSingularBoolField: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct decodeSingularBytesField {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var decodeSingularBytesField: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct decodeSingularDoubleField {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var decodeSingularDoubleField: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct decodeSingularEnumField {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var decodeSingularEnumField: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct decodeSingularFixed32Field {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var decodeSingularFixed32Field: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct decodeSingularFixed64Field {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var decodeSingularFixed64Field: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct decodeSingularFloatField {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var decodeSingularFloatField: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct decodeSingularGroupField {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var decodeSingularGroupField: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct decodeSingularInt32Field {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var decodeSingularInt32Field: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct decodeSingularInt64Field {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var decodeSingularInt64Field: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct decodeSingularMessageField {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var decodeSingularMessageField: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct decodeSingularSFixed32Field {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var decodeSingularSfixed32Field: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct decodeSingularSFixed64Field {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var decodeSingularSfixed64Field: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct decodeSingularSInt32Field {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var decodeSingularSint32Field: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct decodeSingularSInt64Field {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var decodeSingularSint64Field: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct decodeSingularStringField {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var decodeSingularStringField: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct decodeSingularUInt32Field {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var decodeSingularUint32Field: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct decodeSingularUInt64Field {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var decodeSingularUint64Field: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct decodeTextFormat {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var decodeTextFormat: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct defaultAnyTypeURLPrefix {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var defaultAnyTypeUrlprefix: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct defaultValue {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var defaultValue: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct dependency {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var dependency: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct deprecated {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var deprecated: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct deprecatedLegacyJsonFieldConflicts {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var deprecatedLegacyJsonFieldConflicts: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct descriptionMessage {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var description_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct DescriptorProto {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var descriptorProto: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct Dictionary {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var dictionary: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct dictionaryLiteral {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var dictionaryLiteral: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct digit {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var digit: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct digit0 {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var digit0: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct digit1 {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var digit1: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct digitCount {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var digitCount: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct digits {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var digits: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct digitValue {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var digitValue: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct discardableResult {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var discardableResult: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct discardUnknownFields {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var discardUnknownFields: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct distance {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var distance: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct double {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var double: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct doubleValue {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var doubleValue: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct Duration {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var duration: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct E {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var e: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct edition {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var edition: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct Element {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var element: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct elements {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var elements: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct emitExtensionFieldName {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var emitExtensionFieldName: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct emitFieldName {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var emitFieldName: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct emitFieldNumber {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var emitFieldNumber: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct Empty {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var empty: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct emptyData {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var emptyData: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct encodeAsBytes {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var encodeAsBytes: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct encoded {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var encoded: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct encodedJSONString {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var encodedJsonstring: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct encodedSize {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var encodedSize: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct encodeField {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var encodeField: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct encoder {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var encoder: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct end {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var end: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct endArray {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var endArray: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct endMessageField {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var endMessageField: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct endObject {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var endObject: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct endRegularField {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var endRegularField: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct enumMessage {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var `enum`: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct EnumDescriptorProto {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var enumDescriptorProto: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct EnumOptions {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var enumOptions: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct EnumReservedRange {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var enumReservedRange: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct enumType {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var enumType: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct enumvalue {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var enumvalue: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct EnumValueDescriptorProto {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var enumValueDescriptorProto: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct EnumValueOptions {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var enumValueOptions: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct Equatable {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var equatable: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct Error {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var error: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct ExpressibleByArrayLiteral {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var expressibleByArrayLiteral: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct ExpressibleByDictionaryLiteral {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var expressibleByDictionaryLiteral: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct ext {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var ext: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct extDecoder {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var extDecoder: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct extendedGraphemeClusterLiteral {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var extendedGraphemeClusterLiteral: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct ExtendedGraphemeClusterLiteralType {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var extendedGraphemeClusterLiteralType: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct extendee {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var extendee: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct ExtensibleMessage {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var extensibleMessage: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct extensionMessage {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var `extension`: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct ExtensionField {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var extensionField: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct extensionFieldNumber {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var extensionFieldNumber: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct ExtensionFieldValueSet {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var extensionFieldValueSet: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct ExtensionMap {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var extensionMap: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct extensionRange {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var extensionRange: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct ExtensionRangeOptions {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var extensionRangeOptions: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct extensions {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var extensions: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct extras {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var extras: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct F {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var f: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct falseMessage {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var `false`: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct field {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var field: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct fieldData {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var fieldData: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct FieldDescriptorProto {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var fieldDescriptorProto: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct FieldMask {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var fieldMask: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct fieldName {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var fieldName: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct fieldNameCount {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var fieldNameCount: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct fieldNum {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var fieldNum: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct fieldNumber {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var fieldNumber: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct fieldNumberForProto {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var fieldNumberForProto: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct FieldOptions {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var fieldOptions: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct fields {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var fields: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct fieldSize {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var fieldSize: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct FieldTag {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var fieldTag: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct fieldType {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var fieldType: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct file {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var file: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct FileDescriptorProto {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var fileDescriptorProto: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct FileDescriptorSet {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var fileDescriptorSet: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct fileName {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var fileName: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct FileOptions {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var fileOptions: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct filter {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var filter: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct first {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var first: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct firstItem {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var firstItem: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct float {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var float: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct floatLiteral {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var floatLiteral: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct FloatLiteralType {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var floatLiteralType: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct FloatValue {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var floatValue: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct forMessageName {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var forMessageName: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct formUnion {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var formUnion: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct forReadingFrom {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var forReadingFrom: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct forTypeURL {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var forTypeURL: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct ForwardParser {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var forwardParser: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct forWritingInto {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var forWritingInto: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct from {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var from: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct fromAscii2 {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var fromAscii2: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct fromAscii4 {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var fromAscii4: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct fromByteOffset {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var fromByteOffset: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct fromHexDigit {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var fromHexDigit: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct funcMessage {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var `func`: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct G {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var g: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct GeneratedCodeInfo {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var generatedCodeInfo: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct get {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var get: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct getExtensionValue {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var getExtensionValue: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct googleapis {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var googleapis: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct Google_Protobuf_Any {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var googleProtobufAny: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct Google_Protobuf_Api {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var googleProtobufApi: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct Google_Protobuf_BoolValue {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var googleProtobufBoolValue: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct Google_Protobuf_BytesValue {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var googleProtobufBytesValue: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct Google_Protobuf_DescriptorProto {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var googleProtobufDescriptorProto: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct Google_Protobuf_DoubleValue {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var googleProtobufDoubleValue: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct Google_Protobuf_Duration {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var googleProtobufDuration: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct Google_Protobuf_Empty {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var googleProtobufEmpty: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct Google_Protobuf_Enum {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var googleProtobufEnum: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct Google_Protobuf_EnumDescriptorProto {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var googleProtobufEnumDescriptorProto: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct Google_Protobuf_EnumOptions {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var googleProtobufEnumOptions: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct Google_Protobuf_EnumValue {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var googleProtobufEnumValue: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct Google_Protobuf_EnumValueDescriptorProto {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var googleProtobufEnumValueDescriptorProto: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct Google_Protobuf_EnumValueOptions {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var googleProtobufEnumValueOptions: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct Google_Protobuf_ExtensionRangeOptions {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var googleProtobufExtensionRangeOptions: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct Google_Protobuf_Field {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var googleProtobufField: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct Google_Protobuf_FieldDescriptorProto {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var googleProtobufFieldDescriptorProto: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct Google_Protobuf_FieldMask {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var googleProtobufFieldMask: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct Google_Protobuf_FieldOptions {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var googleProtobufFieldOptions: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct Google_Protobuf_FileDescriptorProto {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var googleProtobufFileDescriptorProto: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct Google_Protobuf_FileDescriptorSet {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var googleProtobufFileDescriptorSet: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct Google_Protobuf_FileOptions {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var googleProtobufFileOptions: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct Google_Protobuf_FloatValue {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var googleProtobufFloatValue: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct Google_Protobuf_GeneratedCodeInfo {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var googleProtobufGeneratedCodeInfo: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct Google_Protobuf_Int32Value {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var googleProtobufInt32Value: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct Google_Protobuf_Int64Value {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var googleProtobufInt64Value: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct Google_Protobuf_ListValue {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var googleProtobufListValue: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct Google_Protobuf_MessageOptions {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var googleProtobufMessageOptions: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct Google_Protobuf_Method {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var googleProtobufMethod: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct Google_Protobuf_MethodDescriptorProto {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var googleProtobufMethodDescriptorProto: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct Google_Protobuf_MethodOptions {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var googleProtobufMethodOptions: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct Google_Protobuf_Mixin {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var googleProtobufMixin: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct Google_Protobuf_NullValue {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var googleProtobufNullValue: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct Google_Protobuf_OneofDescriptorProto {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var googleProtobufOneofDescriptorProto: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct Google_Protobuf_OneofOptions {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var googleProtobufOneofOptions: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct Google_Protobuf_Option {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var googleProtobufOption: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct Google_Protobuf_ServiceDescriptorProto {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var googleProtobufServiceDescriptorProto: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct Google_Protobuf_ServiceOptions {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var googleProtobufServiceOptions: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct Google_Protobuf_SourceCodeInfo {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var googleProtobufSourceCodeInfo: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct Google_Protobuf_SourceContext {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var googleProtobufSourceContext: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct Google_Protobuf_StringValue {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var googleProtobufStringValue: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct Google_Protobuf_Struct {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var googleProtobufStruct: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct Google_Protobuf_Syntax {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var googleProtobufSyntax: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct Google_Protobuf_Timestamp {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var googleProtobufTimestamp: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct Google_Protobuf_Type {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var googleProtobufType: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct Google_Protobuf_UInt32Value {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var googleProtobufUint32Value: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct Google_Protobuf_UInt64Value {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var googleProtobufUint64Value: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct Google_Protobuf_UninterpretedOption {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var googleProtobufUninterpretedOption: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct Google_Protobuf_Value {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var googleProtobufValue: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct goPackage {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var goPackage: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct group {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var group: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct groupFieldNumberStack {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var groupFieldNumberStack: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct groupSize {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var groupSize: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct hadOneofValue {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var hadOneofValue: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct handleConflictingOneOf {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var handleConflictingOneOf: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct hasAggregateValue {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var hasAggregateValue_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct hasAllowAlias {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var hasAllowAlias_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct hasBegin {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var hasBegin_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct hasCcEnableArenas {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var hasCcEnableArenas_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct hasCcGenericServices {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var hasCcGenericServices_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct hasClientStreaming {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var hasClientStreaming_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct hasCsharpNamespace {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var hasCsharpNamespace_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct hasCtype {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var hasCtype_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct hasDebugRedact {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var hasDebugRedact_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct hasDefaultValue {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var hasDefaultValue_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct hasDeprecated {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var hasDeprecated_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct hasDeprecatedLegacyJsonFieldConflicts {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var hasDeprecatedLegacyJsonFieldConflicts_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct hasDoubleValue {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var hasDoubleValue_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct hasEdition {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var hasEdition_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct hasEnd {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var hasEnd_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct hasExtendee {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var hasExtendee_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct hasExtensionValue {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var hasExtensionValue_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct hasGoPackage {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var hasGoPackage_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct hash {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var hash: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct Hashable {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var hashable: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct hasher {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var hasher: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct HashVisitor {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var hashVisitor: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct hasIdempotencyLevel {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var hasIdempotencyLevel_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct hasIdentifierValue {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var hasIdentifierValue_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct hasInputType {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var hasInputType_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct hasIsExtension {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var hasIsExtension_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct hasJavaGenerateEqualsAndHash {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var hasJavaGenerateEqualsAndHash_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct hasJavaGenericServices {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var hasJavaGenericServices_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct hasJavaMultipleFiles {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var hasJavaMultipleFiles_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct hasJavaOuterClassname {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var hasJavaOuterClassname_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct hasJavaPackage {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var hasJavaPackage_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct hasJavaStringCheckUtf8 {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var hasJavaStringCheckUtf8_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct hasJsonName {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var hasJsonName_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct hasJstype {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var hasJstype_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct hasLabel {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var hasLabel_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct hasLazy {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var hasLazy_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct hasLeadingComments {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var hasLeadingComments_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct hasMapEntry {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var hasMapEntry_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct hasMessageSetWireFormat {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var hasMessageSetWireFormat_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct hasName {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var hasName_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct hasNamePart {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var hasNamePart_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct hasNegativeIntValue {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var hasNegativeIntValue_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct hasNoStandardDescriptorAccessor {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var hasNoStandardDescriptorAccessor_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct hasNumber {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var hasNumber_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct hasObjcClassPrefix {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var hasObjcClassPrefix_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct hasOneofIndex {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var hasOneofIndex_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct hasOptimizeFor {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var hasOptimizeFor_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct hasOptions {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var hasOptions_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct hasOutputType {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var hasOutputType_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct hasPackage {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var hasPackage_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct hasPacked {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var hasPacked_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct hasPhpClassPrefix {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var hasPhpClassPrefix_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct hasPhpGenericServices {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var hasPhpGenericServices_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct hasPhpMetadataNamespace {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var hasPhpMetadataNamespace_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct hasPhpNamespace {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var hasPhpNamespace_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct hasPositiveIntValue {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var hasPositiveIntValue_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct hasProto3Optional {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var hasProto3Optional_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct hasPyGenericServices {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var hasPyGenericServices_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct hasRetention {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var hasRetention_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct hasRubyPackage {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var hasRubyPackage_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct hasSemantic {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var hasSemantic_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct hasServerStreaming {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var hasServerStreaming_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct hasSourceCodeInfo {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var hasSourceCodeInfo_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct hasSourceContext {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var hasSourceContext_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct hasSourceFile {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var hasSourceFile_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct hasStart {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var hasStart_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct hasStringValue {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var hasStringValue_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct hasSwiftPrefix {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var hasSwiftPrefix_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct hasSyntax {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var hasSyntax_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct hasTrailingComments {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var hasTrailingComments_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct hasType {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var hasType_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct hasTypeName {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var hasTypeName_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct hasUnverifiedLazy {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var hasUnverifiedLazy_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct hasValue {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var hasValue_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct hasWeak {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var hasWeak_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct hour {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var hour: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct i {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var i: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct idempotencyLevel {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var idempotencyLevel: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct identifierValue {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var identifierValue: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct ifMessage {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var `if`: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct ignoreUnknownFields {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var ignoreUnknownFields: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct index {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var index: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct initMessage {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var init_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct inoutMessage {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var `inout`: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct inputType {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var inputType: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct insert {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var insert: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct IntMessage {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var int: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct Int32Message {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var int32: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct Int32Value {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var int32Value: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct Int64Message {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var int64: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct Int64Value {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var int64Value: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct Int8 {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var int8: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct integerLiteral {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var integerLiteral: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct IntegerLiteralType {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var integerLiteralType: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct intern {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var intern: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct Internal {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var `internal`: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct InternalState {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var internalState: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct into {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var into: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct ints {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var ints: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct isA {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var isA: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct isEqual {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var isEqual: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct isEqualTo {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var isEqualTo: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct isExtension {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var isExtension: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct isInitializedMessage {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var isInitialized_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct isNegative {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var isNegative: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct itemTagsEncodedSize {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var itemTagsEncodedSize: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct Iterator {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var iterator: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct javaGenerateEqualsAndHash {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var javaGenerateEqualsAndHash: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct javaGenericServices {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var javaGenericServices: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct javaMultipleFiles {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var javaMultipleFiles: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct javaOuterClassname {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var javaOuterClassname: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct javaPackage {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var javaPackage: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct javaStringCheckUtf8 {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var javaStringCheckUtf8: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct JSONDecoder {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var jsondecoder: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct JSONDecodingError {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var jsondecodingError: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct JSONDecodingOptions {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var jsondecodingOptions: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct jsonEncoder {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var jsonEncoder: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct JSONEncodingError {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var jsonencodingError: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct JSONEncodingOptions {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var jsonencodingOptions: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct JSONEncodingVisitor {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var jsonencodingVisitor: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct JSONMapEncodingVisitor {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var jsonmapEncodingVisitor: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct jsonName {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var jsonName: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct jsonPath {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var jsonPath: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct jsonPaths {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var jsonPaths: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct JSONScanner {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var jsonscanner: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct jsonString {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var jsonString: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct jsonText {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var jsonText: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct jsonUTF8Data {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var jsonUtf8Data: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct jstype {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var jstype: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct k {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var k: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct kChunkSize {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var kChunkSize: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct Key {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var key: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct keyField {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var keyField: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct keyFieldOpt {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var keyFieldOpt: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct KeyType {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var keyType: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct kind {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var kind: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct l {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var l: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct label {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var label: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct lazy {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var lazy: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct leadingComments {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var leadingComments: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct leadingDetachedComments {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var leadingDetachedComments: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct length {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var length: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct lessThan {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var lessThan: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct letMessage {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var `let`: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct lhs {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var lhs: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct list {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var list: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct listOfMessages {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var listOfMessages: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct listValue {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var listValue: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct littleEndian {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var littleEndian: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct littleEndianBytes {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var littleEndianBytes: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct load {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var load: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct localHasher {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var localHasher: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct location {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var location: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct M {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var m: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct major {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var major: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct makeIterator {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var makeIterator: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct mapEntry {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var mapEntry: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct MapKeyType {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var mapKeyType: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct mapToMessages {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var mapToMessages: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct MapValueType {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var mapValueType: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct mapVisitor {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var mapVisitor: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct mdayStart {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var mdayStart: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct merge {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var merge: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct message {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var message: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct MessageBase {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var messageBase: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct messageDepthLimit {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var messageDepthLimit: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct MessageExtension {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var messageExtension: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct MessageImplementationBase {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var messageImplementationBase: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct MessageOptions {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var messageOptions: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct MessageSet {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var messageSet: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct messageSetWireFormat {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var messageSetWireFormat: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct messageType {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var messageType: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct Method {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var method: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct MethodDescriptorProto {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var methodDescriptorProto: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct MethodOptions {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var methodOptions: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct methods {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var methods: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct min {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var min: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct minor {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var minor: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct Mixin {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var mixin: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct mixins {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var mixins: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct modifier {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var modifier: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct modify {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var modify: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct month {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var month: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct msgExtension {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var msgExtension: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct mutating {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var mutating: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct n {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var n: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct name {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var name: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct NameDescription {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var nameDescription: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct NameMap {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var nameMap: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct NamePart {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var namePart: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct names {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var names: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct nanos {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var nanos: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct nativeEndianBytes {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var nativeEndianBytes: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct negativeIntValue {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var negativeIntValue: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct nestedType {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var nestedType: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct newL {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var newL: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct newList {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var newList: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct newValue {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var newValue: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct nextByte {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var nextByte: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct nextFieldNumber {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var nextFieldNumber: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct nilMessage {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var `nil`: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct nilLiteral {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var nilLiteral: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct noStandardDescriptorAccessor {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var noStandardDescriptorAccessor: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct nullValue {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var nullValue: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct number {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var number: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct numberValue {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var numberValue: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct objcClassPrefix {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var objcClassPrefix: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct of {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var of: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct oneofDecl {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var oneofDecl: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct OneofDescriptorProto {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var oneofDescriptorProto: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct oneofIndex {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var oneofIndex: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct OneofOptions {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var oneofOptions: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct oneofs {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var oneofs: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct OneOf_Kind {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var oneOfKind: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct optimizeFor {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var optimizeFor: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct OptimizeMode {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var optimizeMode: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct Option {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var option: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct OptionalEnumExtensionField {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var optionalEnumExtensionField: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct OptionalExtensionField {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var optionalExtensionField: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct OptionalGroupExtensionField {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var optionalGroupExtensionField: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct OptionalMessageExtensionField {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var optionalMessageExtensionField: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct OptionRetention {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var optionRetention: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct options {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var options: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct OptionTargetType {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var optionTargetType: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct other {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var other: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct others {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var others: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct out {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var out: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct outputType {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var outputType: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct p {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct package {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var package: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct packed {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var packed: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct PackedEnumExtensionField {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var packedEnumExtensionField: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct PackedExtensionField {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var packedExtensionField: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct padding {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var padding: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct parent {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var parent: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct parse {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var parse: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct partial {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var partial: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct path {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var path: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct paths {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var paths: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct payload {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var payload: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct payloadSize {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var payloadSize: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct phpClassPrefix {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var phpClassPrefix: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct phpGenericServices {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var phpGenericServices: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct phpMetadataNamespace {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var phpMetadataNamespace: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct phpNamespace {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var phpNamespace: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct pointer {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var pointer: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct pos {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var pos: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct positiveIntValue {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var positiveIntValue: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct prefix {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var prefix: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct preserveProtoFieldNames {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var preserveProtoFieldNames: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct preTraverse {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var preTraverse: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct printUnknownFields {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var printUnknownFields: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct proto2 {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var proto2: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct proto3DefaultValue {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var proto3DefaultValue: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct proto3Optional {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var proto3Optional: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct ProtobufAPIVersionCheck {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var protobufApiversionCheck: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct ProtobufAPIVersion_3 {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var protobufApiversion3: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct ProtobufBool {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var protobufBool: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct ProtobufBytes {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var protobufBytes: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct ProtobufDouble {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var protobufDouble: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct ProtobufEnumMap {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var protobufEnumMap: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct protobufExtension {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var protobufExtension: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct ProtobufFixed32 {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var protobufFixed32: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct ProtobufFixed64 {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var protobufFixed64: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct ProtobufFloat {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var protobufFloat: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct ProtobufInt32 {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var protobufInt32: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct ProtobufInt64 {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var protobufInt64: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct ProtobufMap {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var protobufMap: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct ProtobufMessageMap {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var protobufMessageMap: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct ProtobufSFixed32 {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var protobufSfixed32: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct ProtobufSFixed64 {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var protobufSfixed64: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct ProtobufSInt32 {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var protobufSint32: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct ProtobufSInt64 {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var protobufSint64: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct ProtobufString {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var protobufString: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct ProtobufUInt32 {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var protobufUint32: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct ProtobufUInt64 {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var protobufUint64: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct protobuf_extensionFieldValues {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var protobufExtensionFieldValues: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct protobuf_fieldNumber {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var protobufFieldNumber: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct protobuf_generated_isEqualTo {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var protobufGeneratedIsEqualTo: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct protobuf_nameMap {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var protobufNameMap: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct protobuf_newField {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var protobufNewField: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct protobuf_package {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var protobufPackage: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct protocolMessage {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var `protocol`: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct protoFieldName {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var protoFieldName: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct protoMessageNameMessage {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var protoMessageName: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct ProtoNameProviding {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var protoNameProviding: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct protoPaths {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var protoPaths: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct ProtoSendable {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var protoSendable: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct publicMessage {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var `public`: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct publicDependency {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var publicDependency: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct putBoolValue {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var putBoolValue: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct putBytesValue {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var putBytesValue: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct putDoubleValue {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var putDoubleValue: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct putEnumValue {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var putEnumValue: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct putFixedUInt32 {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var putFixedUint32: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct putFixedUInt64 {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var putFixedUint64: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct putFloatValue {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var putFloatValue: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct putInt64 {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var putInt64: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct putStringValue {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var putStringValue: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct putUInt64 {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var putUint64: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct putUInt64Hex {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var putUint64Hex: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct putVarInt {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var putVarInt: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct putZigZagVarInt {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var putZigZagVarInt: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct pyGenericServices {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var pyGenericServices: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct R {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var r: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct rawChars {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var rawChars: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct RawRepresentable {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var rawRepresentable: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct RawValue {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var rawValue: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct read4HexDigits {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var read4HexDigits: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct register {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var register: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct RepeatedEnumExtensionField {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var repeatedEnumExtensionField: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct RepeatedExtensionField {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var repeatedExtensionField: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct RepeatedGroupExtensionField {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var repeatedGroupExtensionField: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct RepeatedMessageExtensionField {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var repeatedMessageExtensionField: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct repeating {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var repeating: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct requestStreaming {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var requestStreaming: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct requestTypeURL {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var requestTypeURL: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct requiredSize {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var requiredSize: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct reservedName {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var reservedName: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct reservedRange {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var reservedRange: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct responseStreaming {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var responseStreaming: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct responseTypeURL {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var responseTypeURL: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct result {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var result: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct retention {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var retention: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct rethrowsMessage {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var `rethrows`: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct returnMessage {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var `return`: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct ReturnType {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var returnType: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct revision {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var revision: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct rhs {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var rhs: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct root {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var root: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct rubyPackage {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var rubyPackage: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct s {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var s: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct sawBackslash {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var sawBackslash: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct sawSection4Characters {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var sawSection4Characters: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct sawSection5Characters {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var sawSection5Characters: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct scanner {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var scanner: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct seconds {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var seconds: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct selfMessage {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var self_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct semantic {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var semantic: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct Sendable {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var sendable: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct separator {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var separator: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct serialize {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var serialize: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct serializedBytes {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var serializedBytes: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct serializedSize {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var serializedSize: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct serverStreaming {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var serverStreaming: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct service {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var service: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct ServiceDescriptorProto {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var serviceDescriptorProto: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct ServiceOptions {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var serviceOptions: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct set {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var set: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct setExtensionValue {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var setExtensionValue: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct shift {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var shift: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct SimpleExtensionMap {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var simpleExtensionMap: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct sizer {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var sizer: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct source {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var source: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct sourceCodeInfo {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var sourceCodeInfo: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct sourceContext {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var sourceContext: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct sourceEncoding {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var sourceEncoding: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct sourceFile {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var sourceFile: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct span {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var span: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct split {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var split: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct start {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var start: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct startArray {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var startArray: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct startArrayObject {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var startArrayObject: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct startField {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var startField: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct startIndex {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var startIndex: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct startMessageField {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var startMessageField: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct startObject {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var startObject: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct startRegularField {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var startRegularField: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct state {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var state: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct staticMessage {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var `static`: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct StaticString {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var staticString: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct storage {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var storage: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct StringMessage {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var string: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct stringLiteral {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var stringLiteral: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct StringLiteralType {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var stringLiteralType: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct stringResult {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var stringResult: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct stringValue {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var stringValue: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct structMessage {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var `struct`: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct structValue {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var structValue: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct subDecoder {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var subDecoder: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct subscriptMessage {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var `subscript`: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct subVisitor {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var subVisitor: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct Swift {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var swift: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct swiftPrefix {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var swiftPrefix: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct SwiftProtobufContiguousBytes {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var swiftProtobufContiguousBytes: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct syntax {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var syntax: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct T {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var t: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct tag {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var tag: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct targets {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var targets: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct terminator {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var terminator: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct testDecoder {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var testDecoder: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct text {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var text: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct textDecoder {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var textDecoder: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct TextFormatDecoder {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var textFormatDecoder: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct TextFormatDecodingError {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var textFormatDecodingError: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct TextFormatDecodingOptions {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var textFormatDecodingOptions: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct TextFormatEncodingOptions {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var textFormatEncodingOptions: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct TextFormatEncodingVisitor {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var textFormatEncodingVisitor: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct textFormatString {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var textFormatString: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct throwOrIgnore {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var throwOrIgnore: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct throwsMessage {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var `throws`: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct timeInterval {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var timeInterval: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct timeIntervalSince1970 {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var timeIntervalSince1970: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct timeIntervalSinceReferenceDate {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var timeIntervalSinceReferenceDate: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct Timestamp {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var timestamp: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct total {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var total: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct totalArrayDepth {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var totalArrayDepth: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct totalSize {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var totalSize: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct trailingComments {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var trailingComments: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct traverseMessage {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var traverse: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct trueMessage {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var `true`: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct tryMessage {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var `try`: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct type {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var type: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct typealiasMessage {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var `typealias`: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct TypeEnum {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var typeEnum: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct typeName {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var typeName: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct typePrefix {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var typePrefix: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct typeStart {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var typeStart: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct typeUnknown {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var typeUnknown: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct typeURL {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var typeURL: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct UInt32Message {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var uint32: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct UInt32Value {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var uint32Value: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct UInt64Message {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var uint64: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct UInt64Value {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var uint64Value: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct UInt8 {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var uint8: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct unicodeScalarLiteral {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unicodeScalarLiteral: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct UnicodeScalarLiteralType {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unicodeScalarLiteralType: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct unicodeScalars {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unicodeScalars: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct UnicodeScalarView {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unicodeScalarView: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct uninterpretedOption {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var uninterpretedOption: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct union {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var union: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct uniqueStorage {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var uniqueStorage: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct unknown {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknown: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct unknownFieldsMessage {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields_p: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct UnknownStorage {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownStorage: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct unpackTo {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unpackTo: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct UnsafeBufferPointer {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unsafeBufferPointer: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct UnsafeMutablePointer {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unsafeMutablePointer: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct UnsafeMutableRawBufferPointer {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unsafeMutableRawBufferPointer: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct UnsafeMutableRawPointer {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unsafeMutableRawPointer: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct UnsafeRawBufferPointer {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unsafeRawBufferPointer: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct UnsafeRawPointer {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unsafeRawPointer: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct unverifiedLazy {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unverifiedLazy: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct updatedOptions {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var updatedOptions: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct url {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var url: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct utf8 {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var utf8: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct utf8Ptr {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var utf8Ptr: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct utf8ToDouble {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var utf8ToDouble: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct UTF8View {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var utf8View: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct v {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var v: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct value {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var value: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct valueField {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var valueField: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct values {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var values: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct ValueType {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var valueType: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct varMessage {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var `var`: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct Version {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var version: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct versionString {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var versionString: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct visitExtensionFields {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var visitExtensionFields: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct visitExtensionFieldsAsMessageSet {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var visitExtensionFieldsAsMessageSet: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct visitMapField {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var visitMapField: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct visitor {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var visitor: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct visitPacked {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var visitPacked: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct visitPackedBoolField {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var visitPackedBoolField: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct visitPackedDoubleField {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var visitPackedDoubleField: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct visitPackedEnumField {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var visitPackedEnumField: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct visitPackedFixed32Field {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var visitPackedFixed32Field: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct visitPackedFixed64Field {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var visitPackedFixed64Field: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct visitPackedFloatField {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var visitPackedFloatField: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct visitPackedInt32Field {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var visitPackedInt32Field: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct visitPackedInt64Field {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var visitPackedInt64Field: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct visitPackedSFixed32Field {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var visitPackedSfixed32Field: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct visitPackedSFixed64Field {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var visitPackedSfixed64Field: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct visitPackedSInt32Field {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var visitPackedSint32Field: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct visitPackedSInt64Field {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var visitPackedSint64Field: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct visitPackedUInt32Field {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var visitPackedUint32Field: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct visitPackedUInt64Field {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var visitPackedUint64Field: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct visitRepeated {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var visitRepeated: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct visitRepeatedBoolField {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var visitRepeatedBoolField: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct visitRepeatedBytesField {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var visitRepeatedBytesField: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct visitRepeatedDoubleField {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var visitRepeatedDoubleField: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct visitRepeatedEnumField {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var visitRepeatedEnumField: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct visitRepeatedFixed32Field {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var visitRepeatedFixed32Field: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct visitRepeatedFixed64Field {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var visitRepeatedFixed64Field: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct visitRepeatedFloatField {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var visitRepeatedFloatField: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct visitRepeatedGroupField {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var visitRepeatedGroupField: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct visitRepeatedInt32Field {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var visitRepeatedInt32Field: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct visitRepeatedInt64Field {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var visitRepeatedInt64Field: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct visitRepeatedMessageField {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var visitRepeatedMessageField: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct visitRepeatedSFixed32Field {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var visitRepeatedSfixed32Field: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct visitRepeatedSFixed64Field {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var visitRepeatedSfixed64Field: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct visitRepeatedSInt32Field {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var visitRepeatedSint32Field: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct visitRepeatedSInt64Field {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var visitRepeatedSint64Field: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct visitRepeatedStringField {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var visitRepeatedStringField: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct visitRepeatedUInt32Field {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var visitRepeatedUint32Field: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct visitRepeatedUInt64Field {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var visitRepeatedUint64Field: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct visitSingular {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var visitSingular: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct visitSingularBoolField {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var visitSingularBoolField: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct visitSingularBytesField {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var visitSingularBytesField: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct visitSingularDoubleField {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var visitSingularDoubleField: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct visitSingularEnumField {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var visitSingularEnumField: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct visitSingularFixed32Field {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var visitSingularFixed32Field: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct visitSingularFixed64Field {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var visitSingularFixed64Field: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct visitSingularFloatField {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var visitSingularFloatField: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct visitSingularGroupField {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var visitSingularGroupField: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct visitSingularInt32Field {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var visitSingularInt32Field: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct visitSingularInt64Field {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var visitSingularInt64Field: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct visitSingularMessageField {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var visitSingularMessageField: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct visitSingularSFixed32Field {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var visitSingularSfixed32Field: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct visitSingularSFixed64Field {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var visitSingularSfixed64Field: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct visitSingularSInt32Field {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var visitSingularSint32Field: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct visitSingularSInt64Field {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var visitSingularSint64Field: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct visitSingularStringField {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var visitSingularStringField: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct visitSingularUInt32Field {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var visitSingularUint32Field: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct visitSingularUInt64Field {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var visitSingularUint64Field: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct visitUnknown {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var visitUnknown: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct wasDecoded {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var wasDecoded: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct weak {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var weak: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct weakDependency {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var weakDependency: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct whereMessage {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var `where`: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct wireFormat {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var wireFormat: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct with {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var with: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct withUnsafeBytes {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var withUnsafeBytes: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct withUnsafeMutableBytes {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var withUnsafeMutableBytes: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct work {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var work: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct WrappedType {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var wrappedType: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct written {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var written: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  struct yday {
    // SwiftProtobufCore.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var yday: Int32 = 0

    var unknownFields = SwiftProtobufCore.UnknownStorage()

    init() {}
  }

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.adjusted: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.aggregateValue: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.allCases: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.allowAlias: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.alwaysPrintEnumsAsInts: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.alwaysPrintInt64sAsNumbers: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.annotation: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.any: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.AnyExtensionField: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.AnyMessageExtension: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.AnyMessageStorage: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.AnyUnpackError: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Api: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.appended: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.appendUIntHex: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.appendUnknown: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.areAllInitialized: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Array: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.arrayDepth: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.arrayLiteral: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.arraySeparator: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.asMessage: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.asciiOpenCurlyBracket: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.asciiZero: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.available: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.b: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.base64Values: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.baseAddress: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.BaseType: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.begin: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.binary: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.BinaryDecoder: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.BinaryDecodingError: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.BinaryDecodingOptions: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.BinaryDelimited: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.BinaryEncoder: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.BinaryEncodingError: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.BinaryEncodingMessageSetSizeVisitor: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.BinaryEncodingMessageSetVisitor: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.BinaryEncodingSizeVisitor: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.BinaryEncodingVisitor: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.binaryOptions: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.bitPattern: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.body: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.BoolMessage: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.booleanLiteral: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.BooleanLiteralType: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.boolValue: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.bytes: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.bytesInGroup: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.bytesNeeded: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.bytesRead: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.BytesValue: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.c: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.capitalizeNext: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.cardinality: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.CaseIterable: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ccEnableArenas: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ccGenericServices: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Character: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.chars: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.chunk: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.classMessage: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearAggregateValue: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearAllowAlias: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearBegin: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearCcEnableArenas: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearCcGenericServices: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearClientStreaming: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearCsharpNamespace: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearCtype: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearDebugRedact: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearDefaultValue: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearDeprecated: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearDeprecatedLegacyJsonFieldConflicts: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearDoubleValue: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearEdition: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearEnd: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearExtendee: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearExtensionValue: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearGoPackage: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearIdempotencyLevel: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearIdentifierValue: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearInputType: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearIsExtension: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearJavaGenerateEqualsAndHash: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearJavaGenericServices: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearJavaMultipleFiles: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearJavaOuterClassname: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearJavaPackage: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearJavaStringCheckUtf8: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearJsonName: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearJstype: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearLabel: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearLazy: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearLeadingComments: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearMapEntry: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearMessageSetWireFormat: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearName: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearNamePart: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearNegativeIntValue: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearNoStandardDescriptorAccessor: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearNumber: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearObjcClassPrefix: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearOneofIndex: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearOptimizeFor: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearOptions: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearOutputType: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearPackage: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearPacked: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearPhpClassPrefix: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearPhpGenericServices: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearPhpMetadataNamespace: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearPhpNamespace: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearPositiveIntValue: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearProto3Optional: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearPyGenericServices: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearRetention: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearRubyPackage: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearSemantic: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearServerStreaming: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearSourceCodeInfo: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearSourceContext: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearSourceFile: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearStart: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearStringValue: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearSwiftPrefix: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearSyntax: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearTrailingComments: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearType: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearTypeName: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearUnverifiedLazy: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearValue: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearWeak: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clientStreaming: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.codePoint: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.codeUnits: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Collection: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.com: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.comma: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.contentsOf: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.count: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.countVarintsInBuffer: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.csharpNamespace: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ctype: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.customCodable: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.CustomDebugStringConvertible: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.d: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.DataMessage: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.dataResult: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.date: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.daySec: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.daysSinceEpoch: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.debugDescriptionMessage: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.debugRedact: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decoded: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodedFromJSONNull: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeExtensionField: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeExtensionFieldsAsMessageSet: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeJSON: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeMapField: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeMessageMessage: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decoder: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeRepeated: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeRepeatedBoolField: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeRepeatedBytesField: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeRepeatedDoubleField: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeRepeatedEnumField: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeRepeatedFixed32Field: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeRepeatedFixed64Field: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeRepeatedFloatField: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeRepeatedGroupField: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeRepeatedInt32Field: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeRepeatedInt64Field: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeRepeatedMessageField: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeRepeatedSFixed32Field: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeRepeatedSFixed64Field: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeRepeatedSInt32Field: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeRepeatedSInt64Field: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeRepeatedStringField: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeRepeatedUInt32Field: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeRepeatedUInt64Field: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeSingular: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeSingularBoolField: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeSingularBytesField: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeSingularDoubleField: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeSingularEnumField: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeSingularFixed32Field: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeSingularFixed64Field: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeSingularFloatField: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeSingularGroupField: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeSingularInt32Field: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeSingularInt64Field: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeSingularMessageField: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeSingularSFixed32Field: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeSingularSFixed64Field: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeSingularSInt32Field: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeSingularSInt64Field: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeSingularStringField: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeSingularUInt32Field: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeSingularUInt64Field: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeTextFormat: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.defaultAnyTypeURLPrefix: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.defaultValue: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.dependency: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.deprecated: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.deprecatedLegacyJsonFieldConflicts: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.descriptionMessage: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.DescriptorProto: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Dictionary: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.dictionaryLiteral: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.digit: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.digit0: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.digit1: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.digitCount: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.digits: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.digitValue: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.discardableResult: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.discardUnknownFields: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.distance: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.double: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.doubleValue: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Duration: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.E: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.edition: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Element: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.elements: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.emitExtensionFieldName: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.emitFieldName: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.emitFieldNumber: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Empty: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.emptyData: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.encodeAsBytes: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.encoded: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.encodedJSONString: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.encodedSize: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.encodeField: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.encoder: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.end: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.endArray: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.endMessageField: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.endObject: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.endRegularField: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.enumMessage: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.EnumDescriptorProto: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.EnumOptions: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.EnumReservedRange: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.enumType: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.enumvalue: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.EnumValueDescriptorProto: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.EnumValueOptions: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Equatable: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Error: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ExpressibleByArrayLiteral: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ExpressibleByDictionaryLiteral: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ext: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.extDecoder: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.extendedGraphemeClusterLiteral: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ExtendedGraphemeClusterLiteralType: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.extendee: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ExtensibleMessage: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.extensionMessage: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ExtensionField: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.extensionFieldNumber: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ExtensionFieldValueSet: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ExtensionMap: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.extensionRange: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ExtensionRangeOptions: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.extensions: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.extras: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.F: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.falseMessage: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.field: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.fieldData: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.FieldDescriptorProto: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.FieldMask: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.fieldName: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.fieldNameCount: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.fieldNum: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.fieldNumber: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.fieldNumberForProto: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.FieldOptions: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.fields: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.fieldSize: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.FieldTag: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.fieldType: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.file: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.FileDescriptorProto: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.FileDescriptorSet: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.fileName: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.FileOptions: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.filter: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.first: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.firstItem: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.float: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.floatLiteral: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.FloatLiteralType: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.FloatValue: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.forMessageName: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.formUnion: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.forReadingFrom: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.forTypeURL: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ForwardParser: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.forWritingInto: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.from: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.fromAscii2: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.fromAscii4: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.fromByteOffset: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.fromHexDigit: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.funcMessage: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.G: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.GeneratedCodeInfo: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.get: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.getExtensionValue: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.googleapis: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_Any: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_Api: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_BoolValue: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_BytesValue: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_DescriptorProto: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_DoubleValue: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_Duration: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_Empty: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_Enum: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_EnumDescriptorProto: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_EnumOptions: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_EnumValue: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_EnumValueDescriptorProto: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_EnumValueOptions: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_ExtensionRangeOptions: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_Field: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_FieldDescriptorProto: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_FieldMask: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_FieldOptions: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_FileDescriptorProto: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_FileDescriptorSet: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_FileOptions: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_FloatValue: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_GeneratedCodeInfo: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_Int32Value: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_Int64Value: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_ListValue: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_MessageOptions: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_Method: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_MethodDescriptorProto: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_MethodOptions: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_Mixin: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_NullValue: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_OneofDescriptorProto: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_OneofOptions: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_Option: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_ServiceDescriptorProto: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_ServiceOptions: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_SourceCodeInfo: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_SourceContext: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_StringValue: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_Struct: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_Syntax: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_Timestamp: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_Type: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_UInt32Value: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_UInt64Value: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_UninterpretedOption: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_Value: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.goPackage: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.group: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.groupFieldNumberStack: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.groupSize: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hadOneofValue: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.handleConflictingOneOf: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasAggregateValue: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasAllowAlias: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasBegin: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasCcEnableArenas: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasCcGenericServices: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasClientStreaming: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasCsharpNamespace: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasCtype: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasDebugRedact: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasDefaultValue: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasDeprecated: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasDeprecatedLegacyJsonFieldConflicts: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasDoubleValue: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasEdition: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasEnd: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasExtendee: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasExtensionValue: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasGoPackage: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hash: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Hashable: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasher: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.HashVisitor: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasIdempotencyLevel: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasIdentifierValue: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasInputType: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasIsExtension: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasJavaGenerateEqualsAndHash: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasJavaGenericServices: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasJavaMultipleFiles: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasJavaOuterClassname: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasJavaPackage: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasJavaStringCheckUtf8: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasJsonName: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasJstype: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasLabel: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasLazy: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasLeadingComments: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasMapEntry: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasMessageSetWireFormat: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasName: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasNamePart: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasNegativeIntValue: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasNoStandardDescriptorAccessor: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasNumber: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasObjcClassPrefix: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasOneofIndex: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasOptimizeFor: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasOptions: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasOutputType: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasPackage: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasPacked: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasPhpClassPrefix: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasPhpGenericServices: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasPhpMetadataNamespace: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasPhpNamespace: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasPositiveIntValue: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasProto3Optional: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasPyGenericServices: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasRetention: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasRubyPackage: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasSemantic: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasServerStreaming: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasSourceCodeInfo: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasSourceContext: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasSourceFile: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasStart: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasStringValue: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasSwiftPrefix: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasSyntax: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasTrailingComments: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasType: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasTypeName: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasUnverifiedLazy: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasValue: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasWeak: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hour: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.i: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.idempotencyLevel: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.identifierValue: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ifMessage: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ignoreUnknownFields: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.index: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.initMessage: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.inoutMessage: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.inputType: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.insert: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.IntMessage: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Int32Message: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Int32Value: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Int64Message: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Int64Value: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Int8: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.integerLiteral: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.IntegerLiteralType: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.intern: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Internal: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.InternalState: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.into: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ints: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.isA: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.isEqual: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.isEqualTo: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.isExtension: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.isInitializedMessage: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.isNegative: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.itemTagsEncodedSize: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Iterator: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.javaGenerateEqualsAndHash: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.javaGenericServices: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.javaMultipleFiles: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.javaOuterClassname: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.javaPackage: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.javaStringCheckUtf8: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.JSONDecoder: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.JSONDecodingError: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.JSONDecodingOptions: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.jsonEncoder: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.JSONEncodingError: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.JSONEncodingOptions: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.JSONEncodingVisitor: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.JSONMapEncodingVisitor: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.jsonName: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.jsonPath: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.jsonPaths: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.JSONScanner: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.jsonString: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.jsonText: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.jsonUTF8Data: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.jstype: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.k: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.kChunkSize: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Key: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.keyField: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.keyFieldOpt: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.KeyType: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.kind: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.l: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.label: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.lazy: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.leadingComments: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.leadingDetachedComments: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.length: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.lessThan: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.letMessage: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.lhs: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.list: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.listOfMessages: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.listValue: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.littleEndian: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.littleEndianBytes: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.load: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.localHasher: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.location: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.M: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.major: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.makeIterator: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.mapEntry: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.MapKeyType: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.mapToMessages: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.MapValueType: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.mapVisitor: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.mdayStart: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.merge: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.message: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.MessageBase: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.messageDepthLimit: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.MessageExtension: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.MessageImplementationBase: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.MessageOptions: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.MessageSet: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.messageSetWireFormat: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.messageType: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Method: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.MethodDescriptorProto: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.MethodOptions: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.methods: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.min: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.minor: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Mixin: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.mixins: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.modifier: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.modify: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.month: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.msgExtension: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.mutating: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.n: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.name: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.NameDescription: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.NameMap: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.NamePart: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.names: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.nanos: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.nativeEndianBytes: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.negativeIntValue: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.nestedType: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.newL: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.newList: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.newValue: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.nextByte: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.nextFieldNumber: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.nilMessage: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.nilLiteral: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.noStandardDescriptorAccessor: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.nullValue: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.number: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.numberValue: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.objcClassPrefix: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.of: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.oneofDecl: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.OneofDescriptorProto: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.oneofIndex: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.OneofOptions: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.oneofs: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.OneOf_Kind: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.optimizeFor: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.OptimizeMode: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Option: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.OptionalEnumExtensionField: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.OptionalExtensionField: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.OptionalGroupExtensionField: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.OptionalMessageExtensionField: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.OptionRetention: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.options: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.OptionTargetType: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.other: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.others: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.out: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.outputType: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.p: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.package: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.packed: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.PackedEnumExtensionField: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.PackedExtensionField: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.padding: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.parent: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.parse: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.partial: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.path: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.paths: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.payload: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.payloadSize: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.phpClassPrefix: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.phpGenericServices: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.phpMetadataNamespace: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.phpNamespace: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.pointer: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.pos: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.positiveIntValue: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.prefix: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.preserveProtoFieldNames: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.preTraverse: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.printUnknownFields: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.proto2: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.proto3DefaultValue: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.proto3Optional: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ProtobufAPIVersionCheck: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ProtobufAPIVersion_3: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ProtobufBool: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ProtobufBytes: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ProtobufDouble: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ProtobufEnumMap: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protobufExtension: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ProtobufFixed32: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ProtobufFixed64: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ProtobufFloat: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ProtobufInt32: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ProtobufInt64: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ProtobufMap: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ProtobufMessageMap: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ProtobufSFixed32: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ProtobufSFixed64: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ProtobufSInt32: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ProtobufSInt64: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ProtobufString: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ProtobufUInt32: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ProtobufUInt64: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protobuf_extensionFieldValues: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protobuf_fieldNumber: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protobuf_generated_isEqualTo: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protobuf_nameMap: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protobuf_newField: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protobuf_package: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protocolMessage: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoFieldName: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageNameMessage: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ProtoNameProviding: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoPaths: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ProtoSendable: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.publicMessage: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.publicDependency: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.putBoolValue: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.putBytesValue: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.putDoubleValue: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.putEnumValue: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.putFixedUInt32: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.putFixedUInt64: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.putFloatValue: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.putInt64: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.putStringValue: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.putUInt64: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.putUInt64Hex: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.putVarInt: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.putZigZagVarInt: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.pyGenericServices: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.R: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.rawChars: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.RawRepresentable: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.RawValue: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.read4HexDigits: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.register: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.RepeatedEnumExtensionField: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.RepeatedExtensionField: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.RepeatedGroupExtensionField: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.RepeatedMessageExtensionField: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.repeating: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.requestStreaming: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.requestTypeURL: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.requiredSize: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.reservedName: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.reservedRange: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.responseStreaming: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.responseTypeURL: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.result: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.retention: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.rethrowsMessage: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.returnMessage: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ReturnType: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.revision: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.rhs: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.root: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.rubyPackage: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.s: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.sawBackslash: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.sawSection4Characters: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.sawSection5Characters: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.scanner: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.seconds: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.selfMessage: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.semantic: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Sendable: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.separator: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.serialize: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.serializedBytes: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.serializedSize: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.serverStreaming: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.service: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ServiceDescriptorProto: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ServiceOptions: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.set: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.setExtensionValue: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.shift: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.SimpleExtensionMap: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.sizer: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.source: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.sourceCodeInfo: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.sourceContext: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.sourceEncoding: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.sourceFile: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.span: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.split: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.start: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.startArray: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.startArrayObject: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.startField: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.startIndex: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.startMessageField: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.startObject: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.startRegularField: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.state: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.staticMessage: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.StaticString: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.storage: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.StringMessage: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.stringLiteral: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.StringLiteralType: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.stringResult: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.stringValue: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.structMessage: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.structValue: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.subDecoder: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.subscriptMessage: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.subVisitor: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Swift: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.swiftPrefix: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.SwiftProtobufContiguousBytes: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.syntax: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.T: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.tag: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.targets: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.terminator: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.testDecoder: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.text: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.textDecoder: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.TextFormatDecoder: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.TextFormatDecodingError: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.TextFormatDecodingOptions: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.TextFormatEncodingOptions: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.TextFormatEncodingVisitor: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.textFormatString: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.throwOrIgnore: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.throwsMessage: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.timeInterval: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.timeIntervalSince1970: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.timeIntervalSinceReferenceDate: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Timestamp: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.total: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.totalArrayDepth: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.totalSize: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.trailingComments: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.traverseMessage: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.trueMessage: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.tryMessage: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.type: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.typealiasMessage: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.TypeEnum: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.typeName: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.typePrefix: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.typeStart: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.typeUnknown: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.typeURL: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.UInt32Message: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.UInt32Value: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.UInt64Message: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.UInt64Value: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.UInt8: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.unicodeScalarLiteral: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.UnicodeScalarLiteralType: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.unicodeScalars: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.UnicodeScalarView: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.uninterpretedOption: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.union: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.uniqueStorage: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.unknown: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.unknownFieldsMessage: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.UnknownStorage: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.unpackTo: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.UnsafeBufferPointer: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.UnsafeMutablePointer: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.UnsafeMutableRawBufferPointer: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.UnsafeMutableRawPointer: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.UnsafeRawBufferPointer: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.UnsafeRawPointer: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.unverifiedLazy: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.updatedOptions: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.url: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.utf8: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.utf8Ptr: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.utf8ToDouble: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.UTF8View: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.v: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.value: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.valueField: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.values: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ValueType: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.varMessage: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Version: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.versionString: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitExtensionFields: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitExtensionFieldsAsMessageSet: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitMapField: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitor: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitPacked: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitPackedBoolField: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitPackedDoubleField: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitPackedEnumField: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitPackedFixed32Field: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitPackedFixed64Field: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitPackedFloatField: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitPackedInt32Field: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitPackedInt64Field: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitPackedSFixed32Field: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitPackedSFixed64Field: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitPackedSInt32Field: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitPackedSInt64Field: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitPackedUInt32Field: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitPackedUInt64Field: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitRepeated: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitRepeatedBoolField: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitRepeatedBytesField: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitRepeatedDoubleField: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitRepeatedEnumField: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitRepeatedFixed32Field: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitRepeatedFixed64Field: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitRepeatedFloatField: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitRepeatedGroupField: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitRepeatedInt32Field: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitRepeatedInt64Field: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitRepeatedMessageField: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitRepeatedSFixed32Field: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitRepeatedSFixed64Field: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitRepeatedSInt32Field: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitRepeatedSInt64Field: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitRepeatedStringField: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitRepeatedUInt32Field: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitRepeatedUInt64Field: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitSingular: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitSingularBoolField: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitSingularBytesField: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitSingularDoubleField: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitSingularEnumField: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitSingularFixed32Field: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitSingularFixed64Field: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitSingularFloatField: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitSingularGroupField: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitSingularInt32Field: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitSingularInt64Field: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitSingularMessageField: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitSingularSFixed32Field: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitSingularSFixed64Field: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitSingularSInt32Field: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitSingularSInt64Field: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitSingularStringField: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitSingularUInt32Field: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitSingularUInt64Field: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitUnknown: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.wasDecoded: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.weak: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.weakDependency: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.whereMessage: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.wireFormat: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.with: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.withUnsafeBytes: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.withUnsafeMutableBytes: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.work: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.WrappedType: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.written: @unchecked Sendable {}
extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.yday: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "protobuf_unittest_generated"

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GeneratedSwiftReservedMessages"
  static let _protobuf_nameMap = SwiftProtobufCore._NameMap()

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.adjusted: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".adjusted"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "adjusted"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.adjusted) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.adjusted != 0 {
      try visitor.visitSingularInt32Field(value: self.adjusted, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.adjusted, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.adjusted) -> Bool {
    if lhs.adjusted != rhs.adjusted {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.aggregateValue: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".aggregateValue"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "aggregateValue"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.aggregateValue) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.aggregateValue != 0 {
      try visitor.visitSingularInt32Field(value: self.aggregateValue, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.aggregateValue, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.aggregateValue) -> Bool {
    if lhs.aggregateValue != rhs.aggregateValue {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.allCases: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".allCases"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "allCases"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.allCases) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.allCases != 0 {
      try visitor.visitSingularInt32Field(value: self.allCases, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.allCases, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.allCases) -> Bool {
    if lhs.allCases != rhs.allCases {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.allowAlias: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".allowAlias"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "allowAlias"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.allowAlias) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.allowAlias != 0 {
      try visitor.visitSingularInt32Field(value: self.allowAlias, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.allowAlias, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.allowAlias) -> Bool {
    if lhs.allowAlias != rhs.allowAlias {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.alwaysPrintEnumsAsInts: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".alwaysPrintEnumsAsInts"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "alwaysPrintEnumsAsInts"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.alwaysPrintEnumsAsInts) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.alwaysPrintEnumsAsInts != 0 {
      try visitor.visitSingularInt32Field(value: self.alwaysPrintEnumsAsInts, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.alwaysPrintEnumsAsInts, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.alwaysPrintEnumsAsInts) -> Bool {
    if lhs.alwaysPrintEnumsAsInts != rhs.alwaysPrintEnumsAsInts {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.alwaysPrintInt64sAsNumbers: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".alwaysPrintInt64sAsNumbers"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "alwaysPrintInt64sAsNumbers"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.alwaysPrintInt64SAsNumbers) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.alwaysPrintInt64SAsNumbers != 0 {
      try visitor.visitSingularInt32Field(value: self.alwaysPrintInt64SAsNumbers, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.alwaysPrintInt64sAsNumbers, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.alwaysPrintInt64sAsNumbers) -> Bool {
    if lhs.alwaysPrintInt64SAsNumbers != rhs.alwaysPrintInt64SAsNumbers {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.annotation: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".annotation"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "annotation"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.annotation) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.annotation != 0 {
      try visitor.visitSingularInt32Field(value: self.annotation, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.annotation, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.annotation) -> Bool {
    if lhs.annotation != rhs.annotation {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.any: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".any"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "any"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.any) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.any != 0 {
      try visitor.visitSingularInt32Field(value: self.any, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.any, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.any) -> Bool {
    if lhs.any != rhs.any {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.AnyExtensionField: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".AnyExtensionField"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "AnyExtensionField"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.anyExtensionField) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.anyExtensionField != 0 {
      try visitor.visitSingularInt32Field(value: self.anyExtensionField, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.AnyExtensionField, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.AnyExtensionField) -> Bool {
    if lhs.anyExtensionField != rhs.anyExtensionField {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.AnyMessageExtension: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".AnyMessageExtension"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "AnyMessageExtension"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.anyMessageExtension) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.anyMessageExtension != 0 {
      try visitor.visitSingularInt32Field(value: self.anyMessageExtension, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.AnyMessageExtension, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.AnyMessageExtension) -> Bool {
    if lhs.anyMessageExtension != rhs.anyMessageExtension {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.AnyMessageStorage: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".AnyMessageStorage"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "AnyMessageStorage"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.anyMessageStorage) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.anyMessageStorage != 0 {
      try visitor.visitSingularInt32Field(value: self.anyMessageStorage, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.AnyMessageStorage, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.AnyMessageStorage) -> Bool {
    if lhs.anyMessageStorage != rhs.anyMessageStorage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.AnyUnpackError: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".AnyUnpackError"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "AnyUnpackError"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.anyUnpackError) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.anyUnpackError != 0 {
      try visitor.visitSingularInt32Field(value: self.anyUnpackError, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.AnyUnpackError, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.AnyUnpackError) -> Bool {
    if lhs.anyUnpackError != rhs.anyUnpackError {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Api: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".Api"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "Api"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.api) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.api != 0 {
      try visitor.visitSingularInt32Field(value: self.api, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Api, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Api) -> Bool {
    if lhs.api != rhs.api {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.appended: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".appended"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "appended"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.appended) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.appended != 0 {
      try visitor.visitSingularInt32Field(value: self.appended, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.appended, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.appended) -> Bool {
    if lhs.appended != rhs.appended {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.appendUIntHex: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".appendUIntHex"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "appendUIntHex"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.appendUintHex) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.appendUintHex != 0 {
      try visitor.visitSingularInt32Field(value: self.appendUintHex, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.appendUIntHex, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.appendUIntHex) -> Bool {
    if lhs.appendUintHex != rhs.appendUintHex {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.appendUnknown: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".appendUnknown"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "appendUnknown"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.appendUnknown) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.appendUnknown != 0 {
      try visitor.visitSingularInt32Field(value: self.appendUnknown, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.appendUnknown, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.appendUnknown) -> Bool {
    if lhs.appendUnknown != rhs.appendUnknown {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.areAllInitialized: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".areAllInitialized"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "areAllInitialized"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.areAllInitialized) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.areAllInitialized != 0 {
      try visitor.visitSingularInt32Field(value: self.areAllInitialized, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.areAllInitialized, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.areAllInitialized) -> Bool {
    if lhs.areAllInitialized != rhs.areAllInitialized {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Array: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".Array"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "Array"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.array) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.array != 0 {
      try visitor.visitSingularInt32Field(value: self.array, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Array, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Array) -> Bool {
    if lhs.array != rhs.array {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.arrayDepth: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".arrayDepth"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "arrayDepth"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.arrayDepth) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.arrayDepth != 0 {
      try visitor.visitSingularInt32Field(value: self.arrayDepth, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.arrayDepth, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.arrayDepth) -> Bool {
    if lhs.arrayDepth != rhs.arrayDepth {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.arrayLiteral: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".arrayLiteral"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "arrayLiteral"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.arrayLiteral) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.arrayLiteral != 0 {
      try visitor.visitSingularInt32Field(value: self.arrayLiteral, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.arrayLiteral, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.arrayLiteral) -> Bool {
    if lhs.arrayLiteral != rhs.arrayLiteral {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.arraySeparator: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".arraySeparator"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "arraySeparator"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.arraySeparator) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.arraySeparator != 0 {
      try visitor.visitSingularInt32Field(value: self.arraySeparator, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.arraySeparator, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.arraySeparator) -> Bool {
    if lhs.arraySeparator != rhs.arraySeparator {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.asMessage: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".as"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "as"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.`as`) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.`as` != 0 {
      try visitor.visitSingularInt32Field(value: self.`as`, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.asMessage, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.asMessage) -> Bool {
    if lhs.`as` != rhs.`as` {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.asciiOpenCurlyBracket: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".asciiOpenCurlyBracket"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "asciiOpenCurlyBracket"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.asciiOpenCurlyBracket) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.asciiOpenCurlyBracket != 0 {
      try visitor.visitSingularInt32Field(value: self.asciiOpenCurlyBracket, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.asciiOpenCurlyBracket, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.asciiOpenCurlyBracket) -> Bool {
    if lhs.asciiOpenCurlyBracket != rhs.asciiOpenCurlyBracket {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.asciiZero: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".asciiZero"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "asciiZero"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.asciiZero) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.asciiZero != 0 {
      try visitor.visitSingularInt32Field(value: self.asciiZero, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.asciiZero, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.asciiZero) -> Bool {
    if lhs.asciiZero != rhs.asciiZero {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.available: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".available"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "available"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.available) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.available != 0 {
      try visitor.visitSingularInt32Field(value: self.available, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.available, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.available) -> Bool {
    if lhs.available != rhs.available {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.b: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".b"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "b"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.b) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.b != 0 {
      try visitor.visitSingularInt32Field(value: self.b, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.b, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.b) -> Bool {
    if lhs.b != rhs.b {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.base64Values: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".base64Values"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "base64Values"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.base64Values) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.base64Values != 0 {
      try visitor.visitSingularInt32Field(value: self.base64Values, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.base64Values, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.base64Values) -> Bool {
    if lhs.base64Values != rhs.base64Values {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.baseAddress: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".baseAddress"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "baseAddress"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.baseAddress) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.baseAddress != 0 {
      try visitor.visitSingularInt32Field(value: self.baseAddress, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.baseAddress, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.baseAddress) -> Bool {
    if lhs.baseAddress != rhs.baseAddress {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.BaseType: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".BaseType"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "BaseType"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.baseType) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.baseType != 0 {
      try visitor.visitSingularInt32Field(value: self.baseType, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.BaseType, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.BaseType) -> Bool {
    if lhs.baseType != rhs.baseType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.begin: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".begin"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "begin"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.begin) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.begin != 0 {
      try visitor.visitSingularInt32Field(value: self.begin, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.begin, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.begin) -> Bool {
    if lhs.begin != rhs.begin {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.binary: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".binary"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "binary"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.binary) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.binary != 0 {
      try visitor.visitSingularInt32Field(value: self.binary, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.binary, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.binary) -> Bool {
    if lhs.binary != rhs.binary {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.BinaryDecoder: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".BinaryDecoder"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "BinaryDecoder"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.binaryDecoder) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.binaryDecoder != 0 {
      try visitor.visitSingularInt32Field(value: self.binaryDecoder, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.BinaryDecoder, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.BinaryDecoder) -> Bool {
    if lhs.binaryDecoder != rhs.binaryDecoder {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.BinaryDecodingError: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".BinaryDecodingError"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "BinaryDecodingError"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.binaryDecodingError) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.binaryDecodingError != 0 {
      try visitor.visitSingularInt32Field(value: self.binaryDecodingError, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.BinaryDecodingError, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.BinaryDecodingError) -> Bool {
    if lhs.binaryDecodingError != rhs.binaryDecodingError {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.BinaryDecodingOptions: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".BinaryDecodingOptions"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "BinaryDecodingOptions"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.binaryDecodingOptions) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.binaryDecodingOptions != 0 {
      try visitor.visitSingularInt32Field(value: self.binaryDecodingOptions, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.BinaryDecodingOptions, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.BinaryDecodingOptions) -> Bool {
    if lhs.binaryDecodingOptions != rhs.binaryDecodingOptions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.BinaryDelimited: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".BinaryDelimited"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "BinaryDelimited"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.binaryDelimited) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.binaryDelimited != 0 {
      try visitor.visitSingularInt32Field(value: self.binaryDelimited, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.BinaryDelimited, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.BinaryDelimited) -> Bool {
    if lhs.binaryDelimited != rhs.binaryDelimited {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.BinaryEncoder: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".BinaryEncoder"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "BinaryEncoder"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.binaryEncoder) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.binaryEncoder != 0 {
      try visitor.visitSingularInt32Field(value: self.binaryEncoder, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.BinaryEncoder, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.BinaryEncoder) -> Bool {
    if lhs.binaryEncoder != rhs.binaryEncoder {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.BinaryEncodingError: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".BinaryEncodingError"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "BinaryEncodingError"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.binaryEncodingError) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.binaryEncodingError != 0 {
      try visitor.visitSingularInt32Field(value: self.binaryEncodingError, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.BinaryEncodingError, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.BinaryEncodingError) -> Bool {
    if lhs.binaryEncodingError != rhs.binaryEncodingError {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.BinaryEncodingMessageSetSizeVisitor: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".BinaryEncodingMessageSetSizeVisitor"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "BinaryEncodingMessageSetSizeVisitor"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.binaryEncodingMessageSetSizeVisitor) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.binaryEncodingMessageSetSizeVisitor != 0 {
      try visitor.visitSingularInt32Field(value: self.binaryEncodingMessageSetSizeVisitor, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.BinaryEncodingMessageSetSizeVisitor, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.BinaryEncodingMessageSetSizeVisitor) -> Bool {
    if lhs.binaryEncodingMessageSetSizeVisitor != rhs.binaryEncodingMessageSetSizeVisitor {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.BinaryEncodingMessageSetVisitor: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".BinaryEncodingMessageSetVisitor"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "BinaryEncodingMessageSetVisitor"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.binaryEncodingMessageSetVisitor) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.binaryEncodingMessageSetVisitor != 0 {
      try visitor.visitSingularInt32Field(value: self.binaryEncodingMessageSetVisitor, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.BinaryEncodingMessageSetVisitor, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.BinaryEncodingMessageSetVisitor) -> Bool {
    if lhs.binaryEncodingMessageSetVisitor != rhs.binaryEncodingMessageSetVisitor {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.BinaryEncodingSizeVisitor: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".BinaryEncodingSizeVisitor"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "BinaryEncodingSizeVisitor"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.binaryEncodingSizeVisitor) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.binaryEncodingSizeVisitor != 0 {
      try visitor.visitSingularInt32Field(value: self.binaryEncodingSizeVisitor, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.BinaryEncodingSizeVisitor, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.BinaryEncodingSizeVisitor) -> Bool {
    if lhs.binaryEncodingSizeVisitor != rhs.binaryEncodingSizeVisitor {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.BinaryEncodingVisitor: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".BinaryEncodingVisitor"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "BinaryEncodingVisitor"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.binaryEncodingVisitor) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.binaryEncodingVisitor != 0 {
      try visitor.visitSingularInt32Field(value: self.binaryEncodingVisitor, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.BinaryEncodingVisitor, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.BinaryEncodingVisitor) -> Bool {
    if lhs.binaryEncodingVisitor != rhs.binaryEncodingVisitor {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.binaryOptions: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".binaryOptions"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "binaryOptions"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.binaryOptions) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.binaryOptions != 0 {
      try visitor.visitSingularInt32Field(value: self.binaryOptions, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.binaryOptions, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.binaryOptions) -> Bool {
    if lhs.binaryOptions != rhs.binaryOptions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.bitPattern: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".bitPattern"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "bitPattern"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.bitPattern) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.bitPattern != 0 {
      try visitor.visitSingularInt32Field(value: self.bitPattern, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.bitPattern, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.bitPattern) -> Bool {
    if lhs.bitPattern != rhs.bitPattern {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.body: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".body"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "body"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.body) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.body != 0 {
      try visitor.visitSingularInt32Field(value: self.body, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.body, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.body) -> Bool {
    if lhs.body != rhs.body {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.BoolMessage: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".Bool"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "Bool"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.bool) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.bool != 0 {
      try visitor.visitSingularInt32Field(value: self.bool, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.BoolMessage, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.BoolMessage) -> Bool {
    if lhs.bool != rhs.bool {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.booleanLiteral: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".booleanLiteral"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "booleanLiteral"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.booleanLiteral) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.booleanLiteral != 0 {
      try visitor.visitSingularInt32Field(value: self.booleanLiteral, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.booleanLiteral, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.booleanLiteral) -> Bool {
    if lhs.booleanLiteral != rhs.booleanLiteral {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.BooleanLiteralType: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".BooleanLiteralType"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "BooleanLiteralType"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.booleanLiteralType) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.booleanLiteralType != 0 {
      try visitor.visitSingularInt32Field(value: self.booleanLiteralType, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.BooleanLiteralType, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.BooleanLiteralType) -> Bool {
    if lhs.booleanLiteralType != rhs.booleanLiteralType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.boolValue: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".boolValue"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "boolValue"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.boolValue) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.boolValue != 0 {
      try visitor.visitSingularInt32Field(value: self.boolValue, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.boolValue, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.boolValue) -> Bool {
    if lhs.boolValue != rhs.boolValue {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.bytes: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".bytes"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "bytes"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.bytes) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.bytes != 0 {
      try visitor.visitSingularInt32Field(value: self.bytes, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.bytes, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.bytes) -> Bool {
    if lhs.bytes != rhs.bytes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.bytesInGroup: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".bytesInGroup"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "bytesInGroup"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.bytesInGroup) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.bytesInGroup != 0 {
      try visitor.visitSingularInt32Field(value: self.bytesInGroup, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.bytesInGroup, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.bytesInGroup) -> Bool {
    if lhs.bytesInGroup != rhs.bytesInGroup {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.bytesNeeded: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".bytesNeeded"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "bytesNeeded"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.bytesNeeded) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.bytesNeeded != 0 {
      try visitor.visitSingularInt32Field(value: self.bytesNeeded, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.bytesNeeded, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.bytesNeeded) -> Bool {
    if lhs.bytesNeeded != rhs.bytesNeeded {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.bytesRead: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".bytesRead"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "bytesRead"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.bytesRead) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.bytesRead != 0 {
      try visitor.visitSingularInt32Field(value: self.bytesRead, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.bytesRead, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.bytesRead) -> Bool {
    if lhs.bytesRead != rhs.bytesRead {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.BytesValue: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".BytesValue"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "BytesValue"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.bytesValue) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.bytesValue != 0 {
      try visitor.visitSingularInt32Field(value: self.bytesValue, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.BytesValue, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.BytesValue) -> Bool {
    if lhs.bytesValue != rhs.bytesValue {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.c: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".c"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "c"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.c) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.c != 0 {
      try visitor.visitSingularInt32Field(value: self.c, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.c, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.c) -> Bool {
    if lhs.c != rhs.c {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.capitalizeNext: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".capitalizeNext"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "capitalizeNext"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.capitalizeNext) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.capitalizeNext != 0 {
      try visitor.visitSingularInt32Field(value: self.capitalizeNext, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.capitalizeNext, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.capitalizeNext) -> Bool {
    if lhs.capitalizeNext != rhs.capitalizeNext {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.cardinality: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".cardinality"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "cardinality"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.cardinality) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.cardinality != 0 {
      try visitor.visitSingularInt32Field(value: self.cardinality, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.cardinality, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.cardinality) -> Bool {
    if lhs.cardinality != rhs.cardinality {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.CaseIterable: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".CaseIterable"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "CaseIterable"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.caseIterable) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.caseIterable != 0 {
      try visitor.visitSingularInt32Field(value: self.caseIterable, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.CaseIterable, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.CaseIterable) -> Bool {
    if lhs.caseIterable != rhs.caseIterable {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ccEnableArenas: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".ccEnableArenas"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "ccEnableArenas"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.ccEnableArenas) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.ccEnableArenas != 0 {
      try visitor.visitSingularInt32Field(value: self.ccEnableArenas, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ccEnableArenas, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ccEnableArenas) -> Bool {
    if lhs.ccEnableArenas != rhs.ccEnableArenas {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ccGenericServices: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".ccGenericServices"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "ccGenericServices"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.ccGenericServices) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.ccGenericServices != 0 {
      try visitor.visitSingularInt32Field(value: self.ccGenericServices, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ccGenericServices, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ccGenericServices) -> Bool {
    if lhs.ccGenericServices != rhs.ccGenericServices {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Character: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".Character"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "Character"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.character) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.character != 0 {
      try visitor.visitSingularInt32Field(value: self.character, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Character, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Character) -> Bool {
    if lhs.character != rhs.character {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.chars: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".chars"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "chars"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.chars) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.chars != 0 {
      try visitor.visitSingularInt32Field(value: self.chars, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.chars, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.chars) -> Bool {
    if lhs.chars != rhs.chars {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.chunk: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".chunk"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "chunk"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.chunk) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.chunk != 0 {
      try visitor.visitSingularInt32Field(value: self.chunk, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.chunk, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.chunk) -> Bool {
    if lhs.chunk != rhs.chunk {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.classMessage: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".class"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "class"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.`class`) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.`class` != 0 {
      try visitor.visitSingularInt32Field(value: self.`class`, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.classMessage, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.classMessage) -> Bool {
    if lhs.`class` != rhs.`class` {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearAggregateValue: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".clearAggregateValue"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "clearAggregateValue"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.clearAggregateValue_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.clearAggregateValue_p != 0 {
      try visitor.visitSingularInt32Field(value: self.clearAggregateValue_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearAggregateValue, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearAggregateValue) -> Bool {
    if lhs.clearAggregateValue_p != rhs.clearAggregateValue_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearAllowAlias: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".clearAllowAlias"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "clearAllowAlias"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.clearAllowAlias_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.clearAllowAlias_p != 0 {
      try visitor.visitSingularInt32Field(value: self.clearAllowAlias_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearAllowAlias, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearAllowAlias) -> Bool {
    if lhs.clearAllowAlias_p != rhs.clearAllowAlias_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearBegin: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".clearBegin"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "clearBegin"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.clearBegin_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.clearBegin_p != 0 {
      try visitor.visitSingularInt32Field(value: self.clearBegin_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearBegin, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearBegin) -> Bool {
    if lhs.clearBegin_p != rhs.clearBegin_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearCcEnableArenas: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".clearCcEnableArenas"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "clearCcEnableArenas"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.clearCcEnableArenas_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.clearCcEnableArenas_p != 0 {
      try visitor.visitSingularInt32Field(value: self.clearCcEnableArenas_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearCcEnableArenas, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearCcEnableArenas) -> Bool {
    if lhs.clearCcEnableArenas_p != rhs.clearCcEnableArenas_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearCcGenericServices: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".clearCcGenericServices"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "clearCcGenericServices"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.clearCcGenericServices_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.clearCcGenericServices_p != 0 {
      try visitor.visitSingularInt32Field(value: self.clearCcGenericServices_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearCcGenericServices, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearCcGenericServices) -> Bool {
    if lhs.clearCcGenericServices_p != rhs.clearCcGenericServices_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearClientStreaming: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".clearClientStreaming"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "clearClientStreaming"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.clearClientStreaming_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.clearClientStreaming_p != 0 {
      try visitor.visitSingularInt32Field(value: self.clearClientStreaming_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearClientStreaming, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearClientStreaming) -> Bool {
    if lhs.clearClientStreaming_p != rhs.clearClientStreaming_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearCsharpNamespace: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".clearCsharpNamespace"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "clearCsharpNamespace"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.clearCsharpNamespace_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.clearCsharpNamespace_p != 0 {
      try visitor.visitSingularInt32Field(value: self.clearCsharpNamespace_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearCsharpNamespace, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearCsharpNamespace) -> Bool {
    if lhs.clearCsharpNamespace_p != rhs.clearCsharpNamespace_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearCtype: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".clearCtype"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "clearCtype"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.clearCtype_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.clearCtype_p != 0 {
      try visitor.visitSingularInt32Field(value: self.clearCtype_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearCtype, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearCtype) -> Bool {
    if lhs.clearCtype_p != rhs.clearCtype_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearDebugRedact: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".clearDebugRedact"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "clearDebugRedact"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.clearDebugRedact_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.clearDebugRedact_p != 0 {
      try visitor.visitSingularInt32Field(value: self.clearDebugRedact_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearDebugRedact, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearDebugRedact) -> Bool {
    if lhs.clearDebugRedact_p != rhs.clearDebugRedact_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearDefaultValue: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".clearDefaultValue"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "clearDefaultValue"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.clearDefaultValue_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.clearDefaultValue_p != 0 {
      try visitor.visitSingularInt32Field(value: self.clearDefaultValue_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearDefaultValue, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearDefaultValue) -> Bool {
    if lhs.clearDefaultValue_p != rhs.clearDefaultValue_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearDeprecated: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".clearDeprecated"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "clearDeprecated"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.clearDeprecated_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.clearDeprecated_p != 0 {
      try visitor.visitSingularInt32Field(value: self.clearDeprecated_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearDeprecated, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearDeprecated) -> Bool {
    if lhs.clearDeprecated_p != rhs.clearDeprecated_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearDeprecatedLegacyJsonFieldConflicts: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".clearDeprecatedLegacyJsonFieldConflicts"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "clearDeprecatedLegacyJsonFieldConflicts"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.clearDeprecatedLegacyJsonFieldConflicts_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.clearDeprecatedLegacyJsonFieldConflicts_p != 0 {
      try visitor.visitSingularInt32Field(value: self.clearDeprecatedLegacyJsonFieldConflicts_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearDeprecatedLegacyJsonFieldConflicts, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearDeprecatedLegacyJsonFieldConflicts) -> Bool {
    if lhs.clearDeprecatedLegacyJsonFieldConflicts_p != rhs.clearDeprecatedLegacyJsonFieldConflicts_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearDoubleValue: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".clearDoubleValue"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "clearDoubleValue"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.clearDoubleValue_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.clearDoubleValue_p != 0 {
      try visitor.visitSingularInt32Field(value: self.clearDoubleValue_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearDoubleValue, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearDoubleValue) -> Bool {
    if lhs.clearDoubleValue_p != rhs.clearDoubleValue_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearEdition: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".clearEdition"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "clearEdition"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.clearEdition_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.clearEdition_p != 0 {
      try visitor.visitSingularInt32Field(value: self.clearEdition_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearEdition, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearEdition) -> Bool {
    if lhs.clearEdition_p != rhs.clearEdition_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearEnd: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".clearEnd"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "clearEnd"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.clearEnd_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.clearEnd_p != 0 {
      try visitor.visitSingularInt32Field(value: self.clearEnd_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearEnd, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearEnd) -> Bool {
    if lhs.clearEnd_p != rhs.clearEnd_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearExtendee: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".clearExtendee"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "clearExtendee"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.clearExtendee_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.clearExtendee_p != 0 {
      try visitor.visitSingularInt32Field(value: self.clearExtendee_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearExtendee, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearExtendee) -> Bool {
    if lhs.clearExtendee_p != rhs.clearExtendee_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearExtensionValue: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".clearExtensionValue"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "clearExtensionValue"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.clearExtensionValue_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.clearExtensionValue_p != 0 {
      try visitor.visitSingularInt32Field(value: self.clearExtensionValue_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearExtensionValue, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearExtensionValue) -> Bool {
    if lhs.clearExtensionValue_p != rhs.clearExtensionValue_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearGoPackage: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".clearGoPackage"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "clearGoPackage"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.clearGoPackage_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.clearGoPackage_p != 0 {
      try visitor.visitSingularInt32Field(value: self.clearGoPackage_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearGoPackage, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearGoPackage) -> Bool {
    if lhs.clearGoPackage_p != rhs.clearGoPackage_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearIdempotencyLevel: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".clearIdempotencyLevel"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "clearIdempotencyLevel"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.clearIdempotencyLevel_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.clearIdempotencyLevel_p != 0 {
      try visitor.visitSingularInt32Field(value: self.clearIdempotencyLevel_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearIdempotencyLevel, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearIdempotencyLevel) -> Bool {
    if lhs.clearIdempotencyLevel_p != rhs.clearIdempotencyLevel_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearIdentifierValue: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".clearIdentifierValue"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "clearIdentifierValue"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.clearIdentifierValue_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.clearIdentifierValue_p != 0 {
      try visitor.visitSingularInt32Field(value: self.clearIdentifierValue_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearIdentifierValue, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearIdentifierValue) -> Bool {
    if lhs.clearIdentifierValue_p != rhs.clearIdentifierValue_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearInputType: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".clearInputType"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "clearInputType"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.clearInputType_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.clearInputType_p != 0 {
      try visitor.visitSingularInt32Field(value: self.clearInputType_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearInputType, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearInputType) -> Bool {
    if lhs.clearInputType_p != rhs.clearInputType_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearIsExtension: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".clearIsExtension"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "clearIsExtension"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.clearIsExtension_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.clearIsExtension_p != 0 {
      try visitor.visitSingularInt32Field(value: self.clearIsExtension_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearIsExtension, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearIsExtension) -> Bool {
    if lhs.clearIsExtension_p != rhs.clearIsExtension_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearJavaGenerateEqualsAndHash: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".clearJavaGenerateEqualsAndHash"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "clearJavaGenerateEqualsAndHash"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.clearJavaGenerateEqualsAndHash_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.clearJavaGenerateEqualsAndHash_p != 0 {
      try visitor.visitSingularInt32Field(value: self.clearJavaGenerateEqualsAndHash_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearJavaGenerateEqualsAndHash, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearJavaGenerateEqualsAndHash) -> Bool {
    if lhs.clearJavaGenerateEqualsAndHash_p != rhs.clearJavaGenerateEqualsAndHash_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearJavaGenericServices: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".clearJavaGenericServices"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "clearJavaGenericServices"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.clearJavaGenericServices_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.clearJavaGenericServices_p != 0 {
      try visitor.visitSingularInt32Field(value: self.clearJavaGenericServices_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearJavaGenericServices, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearJavaGenericServices) -> Bool {
    if lhs.clearJavaGenericServices_p != rhs.clearJavaGenericServices_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearJavaMultipleFiles: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".clearJavaMultipleFiles"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "clearJavaMultipleFiles"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.clearJavaMultipleFiles_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.clearJavaMultipleFiles_p != 0 {
      try visitor.visitSingularInt32Field(value: self.clearJavaMultipleFiles_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearJavaMultipleFiles, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearJavaMultipleFiles) -> Bool {
    if lhs.clearJavaMultipleFiles_p != rhs.clearJavaMultipleFiles_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearJavaOuterClassname: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".clearJavaOuterClassname"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "clearJavaOuterClassname"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.clearJavaOuterClassname_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.clearJavaOuterClassname_p != 0 {
      try visitor.visitSingularInt32Field(value: self.clearJavaOuterClassname_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearJavaOuterClassname, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearJavaOuterClassname) -> Bool {
    if lhs.clearJavaOuterClassname_p != rhs.clearJavaOuterClassname_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearJavaPackage: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".clearJavaPackage"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "clearJavaPackage"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.clearJavaPackage_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.clearJavaPackage_p != 0 {
      try visitor.visitSingularInt32Field(value: self.clearJavaPackage_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearJavaPackage, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearJavaPackage) -> Bool {
    if lhs.clearJavaPackage_p != rhs.clearJavaPackage_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearJavaStringCheckUtf8: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".clearJavaStringCheckUtf8"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "clearJavaStringCheckUtf8"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.clearJavaStringCheckUtf8_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.clearJavaStringCheckUtf8_p != 0 {
      try visitor.visitSingularInt32Field(value: self.clearJavaStringCheckUtf8_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearJavaStringCheckUtf8, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearJavaStringCheckUtf8) -> Bool {
    if lhs.clearJavaStringCheckUtf8_p != rhs.clearJavaStringCheckUtf8_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearJsonName: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".clearJsonName"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "clearJsonName"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.clearJsonName_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.clearJsonName_p != 0 {
      try visitor.visitSingularInt32Field(value: self.clearJsonName_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearJsonName, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearJsonName) -> Bool {
    if lhs.clearJsonName_p != rhs.clearJsonName_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearJstype: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".clearJstype"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "clearJstype"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.clearJstype_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.clearJstype_p != 0 {
      try visitor.visitSingularInt32Field(value: self.clearJstype_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearJstype, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearJstype) -> Bool {
    if lhs.clearJstype_p != rhs.clearJstype_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearLabel: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".clearLabel"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "clearLabel"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.clearLabel_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.clearLabel_p != 0 {
      try visitor.visitSingularInt32Field(value: self.clearLabel_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearLabel, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearLabel) -> Bool {
    if lhs.clearLabel_p != rhs.clearLabel_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearLazy: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".clearLazy"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "clearLazy"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.clearLazy_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.clearLazy_p != 0 {
      try visitor.visitSingularInt32Field(value: self.clearLazy_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearLazy, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearLazy) -> Bool {
    if lhs.clearLazy_p != rhs.clearLazy_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearLeadingComments: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".clearLeadingComments"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "clearLeadingComments"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.clearLeadingComments_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.clearLeadingComments_p != 0 {
      try visitor.visitSingularInt32Field(value: self.clearLeadingComments_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearLeadingComments, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearLeadingComments) -> Bool {
    if lhs.clearLeadingComments_p != rhs.clearLeadingComments_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearMapEntry: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".clearMapEntry"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "clearMapEntry"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.clearMapEntry_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.clearMapEntry_p != 0 {
      try visitor.visitSingularInt32Field(value: self.clearMapEntry_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearMapEntry, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearMapEntry) -> Bool {
    if lhs.clearMapEntry_p != rhs.clearMapEntry_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearMessageSetWireFormat: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".clearMessageSetWireFormat"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "clearMessageSetWireFormat"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.clearMessageSetWireFormat_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.clearMessageSetWireFormat_p != 0 {
      try visitor.visitSingularInt32Field(value: self.clearMessageSetWireFormat_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearMessageSetWireFormat, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearMessageSetWireFormat) -> Bool {
    if lhs.clearMessageSetWireFormat_p != rhs.clearMessageSetWireFormat_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearName: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".clearName"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "clearName"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.clearName_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.clearName_p != 0 {
      try visitor.visitSingularInt32Field(value: self.clearName_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearName, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearName) -> Bool {
    if lhs.clearName_p != rhs.clearName_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearNamePart: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".clearNamePart"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "clearNamePart"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.clearNamePart_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.clearNamePart_p != 0 {
      try visitor.visitSingularInt32Field(value: self.clearNamePart_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearNamePart, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearNamePart) -> Bool {
    if lhs.clearNamePart_p != rhs.clearNamePart_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearNegativeIntValue: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".clearNegativeIntValue"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "clearNegativeIntValue"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.clearNegativeIntValue_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.clearNegativeIntValue_p != 0 {
      try visitor.visitSingularInt32Field(value: self.clearNegativeIntValue_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearNegativeIntValue, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearNegativeIntValue) -> Bool {
    if lhs.clearNegativeIntValue_p != rhs.clearNegativeIntValue_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearNoStandardDescriptorAccessor: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".clearNoStandardDescriptorAccessor"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "clearNoStandardDescriptorAccessor"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.clearNoStandardDescriptorAccessor_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.clearNoStandardDescriptorAccessor_p != 0 {
      try visitor.visitSingularInt32Field(value: self.clearNoStandardDescriptorAccessor_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearNoStandardDescriptorAccessor, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearNoStandardDescriptorAccessor) -> Bool {
    if lhs.clearNoStandardDescriptorAccessor_p != rhs.clearNoStandardDescriptorAccessor_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearNumber: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".clearNumber"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "clearNumber"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.clearNumber_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.clearNumber_p != 0 {
      try visitor.visitSingularInt32Field(value: self.clearNumber_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearNumber, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearNumber) -> Bool {
    if lhs.clearNumber_p != rhs.clearNumber_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearObjcClassPrefix: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".clearObjcClassPrefix"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "clearObjcClassPrefix"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.clearObjcClassPrefix_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.clearObjcClassPrefix_p != 0 {
      try visitor.visitSingularInt32Field(value: self.clearObjcClassPrefix_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearObjcClassPrefix, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearObjcClassPrefix) -> Bool {
    if lhs.clearObjcClassPrefix_p != rhs.clearObjcClassPrefix_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearOneofIndex: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".clearOneofIndex"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "clearOneofIndex"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.clearOneofIndex_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.clearOneofIndex_p != 0 {
      try visitor.visitSingularInt32Field(value: self.clearOneofIndex_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearOneofIndex, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearOneofIndex) -> Bool {
    if lhs.clearOneofIndex_p != rhs.clearOneofIndex_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearOptimizeFor: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".clearOptimizeFor"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "clearOptimizeFor"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.clearOptimizeFor_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.clearOptimizeFor_p != 0 {
      try visitor.visitSingularInt32Field(value: self.clearOptimizeFor_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearOptimizeFor, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearOptimizeFor) -> Bool {
    if lhs.clearOptimizeFor_p != rhs.clearOptimizeFor_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearOptions: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".clearOptions"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "clearOptions"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.clearOptions_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.clearOptions_p != 0 {
      try visitor.visitSingularInt32Field(value: self.clearOptions_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearOptions, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearOptions) -> Bool {
    if lhs.clearOptions_p != rhs.clearOptions_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearOutputType: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".clearOutputType"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "clearOutputType"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.clearOutputType_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.clearOutputType_p != 0 {
      try visitor.visitSingularInt32Field(value: self.clearOutputType_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearOutputType, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearOutputType) -> Bool {
    if lhs.clearOutputType_p != rhs.clearOutputType_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearPackage: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".clearPackage"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "clearPackage"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.clearPackage_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.clearPackage_p != 0 {
      try visitor.visitSingularInt32Field(value: self.clearPackage_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearPackage, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearPackage) -> Bool {
    if lhs.clearPackage_p != rhs.clearPackage_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearPacked: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".clearPacked"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "clearPacked"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.clearPacked_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.clearPacked_p != 0 {
      try visitor.visitSingularInt32Field(value: self.clearPacked_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearPacked, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearPacked) -> Bool {
    if lhs.clearPacked_p != rhs.clearPacked_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearPhpClassPrefix: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".clearPhpClassPrefix"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "clearPhpClassPrefix"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.clearPhpClassPrefix_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.clearPhpClassPrefix_p != 0 {
      try visitor.visitSingularInt32Field(value: self.clearPhpClassPrefix_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearPhpClassPrefix, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearPhpClassPrefix) -> Bool {
    if lhs.clearPhpClassPrefix_p != rhs.clearPhpClassPrefix_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearPhpGenericServices: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".clearPhpGenericServices"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "clearPhpGenericServices"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.clearPhpGenericServices_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.clearPhpGenericServices_p != 0 {
      try visitor.visitSingularInt32Field(value: self.clearPhpGenericServices_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearPhpGenericServices, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearPhpGenericServices) -> Bool {
    if lhs.clearPhpGenericServices_p != rhs.clearPhpGenericServices_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearPhpMetadataNamespace: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".clearPhpMetadataNamespace"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "clearPhpMetadataNamespace"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.clearPhpMetadataNamespace_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.clearPhpMetadataNamespace_p != 0 {
      try visitor.visitSingularInt32Field(value: self.clearPhpMetadataNamespace_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearPhpMetadataNamespace, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearPhpMetadataNamespace) -> Bool {
    if lhs.clearPhpMetadataNamespace_p != rhs.clearPhpMetadataNamespace_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearPhpNamespace: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".clearPhpNamespace"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "clearPhpNamespace"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.clearPhpNamespace_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.clearPhpNamespace_p != 0 {
      try visitor.visitSingularInt32Field(value: self.clearPhpNamespace_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearPhpNamespace, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearPhpNamespace) -> Bool {
    if lhs.clearPhpNamespace_p != rhs.clearPhpNamespace_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearPositiveIntValue: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".clearPositiveIntValue"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "clearPositiveIntValue"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.clearPositiveIntValue_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.clearPositiveIntValue_p != 0 {
      try visitor.visitSingularInt32Field(value: self.clearPositiveIntValue_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearPositiveIntValue, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearPositiveIntValue) -> Bool {
    if lhs.clearPositiveIntValue_p != rhs.clearPositiveIntValue_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearProto3Optional: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".clearProto3Optional"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "clearProto3Optional"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.clearProto3Optional_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.clearProto3Optional_p != 0 {
      try visitor.visitSingularInt32Field(value: self.clearProto3Optional_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearProto3Optional, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearProto3Optional) -> Bool {
    if lhs.clearProto3Optional_p != rhs.clearProto3Optional_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearPyGenericServices: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".clearPyGenericServices"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "clearPyGenericServices"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.clearPyGenericServices_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.clearPyGenericServices_p != 0 {
      try visitor.visitSingularInt32Field(value: self.clearPyGenericServices_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearPyGenericServices, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearPyGenericServices) -> Bool {
    if lhs.clearPyGenericServices_p != rhs.clearPyGenericServices_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearRetention: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".clearRetention"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "clearRetention"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.clearRetention_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.clearRetention_p != 0 {
      try visitor.visitSingularInt32Field(value: self.clearRetention_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearRetention, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearRetention) -> Bool {
    if lhs.clearRetention_p != rhs.clearRetention_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearRubyPackage: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".clearRubyPackage"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "clearRubyPackage"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.clearRubyPackage_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.clearRubyPackage_p != 0 {
      try visitor.visitSingularInt32Field(value: self.clearRubyPackage_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearRubyPackage, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearRubyPackage) -> Bool {
    if lhs.clearRubyPackage_p != rhs.clearRubyPackage_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearSemantic: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".clearSemantic"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "clearSemantic"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.clearSemantic_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.clearSemantic_p != 0 {
      try visitor.visitSingularInt32Field(value: self.clearSemantic_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearSemantic, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearSemantic) -> Bool {
    if lhs.clearSemantic_p != rhs.clearSemantic_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearServerStreaming: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".clearServerStreaming"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "clearServerStreaming"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.clearServerStreaming_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.clearServerStreaming_p != 0 {
      try visitor.visitSingularInt32Field(value: self.clearServerStreaming_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearServerStreaming, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearServerStreaming) -> Bool {
    if lhs.clearServerStreaming_p != rhs.clearServerStreaming_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearSourceCodeInfo: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".clearSourceCodeInfo"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "clearSourceCodeInfo"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.clearSourceCodeInfo_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.clearSourceCodeInfo_p != 0 {
      try visitor.visitSingularInt32Field(value: self.clearSourceCodeInfo_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearSourceCodeInfo, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearSourceCodeInfo) -> Bool {
    if lhs.clearSourceCodeInfo_p != rhs.clearSourceCodeInfo_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearSourceContext: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".clearSourceContext"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "clearSourceContext"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.clearSourceContext_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.clearSourceContext_p != 0 {
      try visitor.visitSingularInt32Field(value: self.clearSourceContext_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearSourceContext, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearSourceContext) -> Bool {
    if lhs.clearSourceContext_p != rhs.clearSourceContext_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearSourceFile: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".clearSourceFile"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "clearSourceFile"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.clearSourceFile_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.clearSourceFile_p != 0 {
      try visitor.visitSingularInt32Field(value: self.clearSourceFile_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearSourceFile, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearSourceFile) -> Bool {
    if lhs.clearSourceFile_p != rhs.clearSourceFile_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearStart: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".clearStart"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "clearStart"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.clearStart_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.clearStart_p != 0 {
      try visitor.visitSingularInt32Field(value: self.clearStart_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearStart, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearStart) -> Bool {
    if lhs.clearStart_p != rhs.clearStart_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearStringValue: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".clearStringValue"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "clearStringValue"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.clearStringValue_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.clearStringValue_p != 0 {
      try visitor.visitSingularInt32Field(value: self.clearStringValue_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearStringValue, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearStringValue) -> Bool {
    if lhs.clearStringValue_p != rhs.clearStringValue_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearSwiftPrefix: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".clearSwiftPrefix"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "clearSwiftPrefix"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.clearSwiftPrefix_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.clearSwiftPrefix_p != 0 {
      try visitor.visitSingularInt32Field(value: self.clearSwiftPrefix_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearSwiftPrefix, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearSwiftPrefix) -> Bool {
    if lhs.clearSwiftPrefix_p != rhs.clearSwiftPrefix_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearSyntax: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".clearSyntax"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "clearSyntax"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.clearSyntax_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.clearSyntax_p != 0 {
      try visitor.visitSingularInt32Field(value: self.clearSyntax_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearSyntax, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearSyntax) -> Bool {
    if lhs.clearSyntax_p != rhs.clearSyntax_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearTrailingComments: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".clearTrailingComments"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "clearTrailingComments"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.clearTrailingComments_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.clearTrailingComments_p != 0 {
      try visitor.visitSingularInt32Field(value: self.clearTrailingComments_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearTrailingComments, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearTrailingComments) -> Bool {
    if lhs.clearTrailingComments_p != rhs.clearTrailingComments_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearType: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".clearType"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "clearType"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.clearType_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.clearType_p != 0 {
      try visitor.visitSingularInt32Field(value: self.clearType_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearType, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearType) -> Bool {
    if lhs.clearType_p != rhs.clearType_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearTypeName: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".clearTypeName"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "clearTypeName"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.clearTypeName_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.clearTypeName_p != 0 {
      try visitor.visitSingularInt32Field(value: self.clearTypeName_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearTypeName, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearTypeName) -> Bool {
    if lhs.clearTypeName_p != rhs.clearTypeName_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearUnverifiedLazy: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".clearUnverifiedLazy"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "clearUnverifiedLazy"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.clearUnverifiedLazy_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.clearUnverifiedLazy_p != 0 {
      try visitor.visitSingularInt32Field(value: self.clearUnverifiedLazy_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearUnverifiedLazy, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearUnverifiedLazy) -> Bool {
    if lhs.clearUnverifiedLazy_p != rhs.clearUnverifiedLazy_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearValue: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".clearValue"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "clearValue"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.clearValue_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.clearValue_p != 0 {
      try visitor.visitSingularInt32Field(value: self.clearValue_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearValue, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearValue) -> Bool {
    if lhs.clearValue_p != rhs.clearValue_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearWeak: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".clearWeak"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "clearWeak"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.clearWeak_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.clearWeak_p != 0 {
      try visitor.visitSingularInt32Field(value: self.clearWeak_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearWeak, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clearWeak) -> Bool {
    if lhs.clearWeak_p != rhs.clearWeak_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clientStreaming: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".clientStreaming"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "clientStreaming"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.clientStreaming) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.clientStreaming != 0 {
      try visitor.visitSingularInt32Field(value: self.clientStreaming, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clientStreaming, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.clientStreaming) -> Bool {
    if lhs.clientStreaming != rhs.clientStreaming {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.codePoint: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".codePoint"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "codePoint"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.codePoint) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.codePoint != 0 {
      try visitor.visitSingularInt32Field(value: self.codePoint, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.codePoint, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.codePoint) -> Bool {
    if lhs.codePoint != rhs.codePoint {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.codeUnits: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".codeUnits"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "codeUnits"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.codeUnits) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.codeUnits != 0 {
      try visitor.visitSingularInt32Field(value: self.codeUnits, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.codeUnits, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.codeUnits) -> Bool {
    if lhs.codeUnits != rhs.codeUnits {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Collection: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".Collection"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "Collection"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.collection) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.collection != 0 {
      try visitor.visitSingularInt32Field(value: self.collection, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Collection, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Collection) -> Bool {
    if lhs.collection != rhs.collection {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.com: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".com"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "com"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.com) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.com != 0 {
      try visitor.visitSingularInt32Field(value: self.com, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.com, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.com) -> Bool {
    if lhs.com != rhs.com {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.comma: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".comma"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "comma"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.comma) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.comma != 0 {
      try visitor.visitSingularInt32Field(value: self.comma, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.comma, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.comma) -> Bool {
    if lhs.comma != rhs.comma {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.contentsOf: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".contentsOf"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "contentsOf"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.contentsOf) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.contentsOf != 0 {
      try visitor.visitSingularInt32Field(value: self.contentsOf, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.contentsOf, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.contentsOf) -> Bool {
    if lhs.contentsOf != rhs.contentsOf {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.count: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".count"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "count"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.count) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.count != 0 {
      try visitor.visitSingularInt32Field(value: self.count, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.count, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.count) -> Bool {
    if lhs.count != rhs.count {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.countVarintsInBuffer: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".countVarintsInBuffer"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "countVarintsInBuffer"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.countVarintsInBuffer) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.countVarintsInBuffer != 0 {
      try visitor.visitSingularInt32Field(value: self.countVarintsInBuffer, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.countVarintsInBuffer, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.countVarintsInBuffer) -> Bool {
    if lhs.countVarintsInBuffer != rhs.countVarintsInBuffer {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.csharpNamespace: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".csharpNamespace"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "csharpNamespace"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.csharpNamespace) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.csharpNamespace != 0 {
      try visitor.visitSingularInt32Field(value: self.csharpNamespace, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.csharpNamespace, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.csharpNamespace) -> Bool {
    if lhs.csharpNamespace != rhs.csharpNamespace {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ctype: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".ctype"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "ctype"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.ctype) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.ctype != 0 {
      try visitor.visitSingularInt32Field(value: self.ctype, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ctype, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ctype) -> Bool {
    if lhs.ctype != rhs.ctype {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.customCodable: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".customCodable"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "customCodable"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.customCodable) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.customCodable != 0 {
      try visitor.visitSingularInt32Field(value: self.customCodable, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.customCodable, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.customCodable) -> Bool {
    if lhs.customCodable != rhs.customCodable {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.CustomDebugStringConvertible: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".CustomDebugStringConvertible"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "CustomDebugStringConvertible"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.customDebugStringConvertible) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.customDebugStringConvertible != 0 {
      try visitor.visitSingularInt32Field(value: self.customDebugStringConvertible, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.CustomDebugStringConvertible, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.CustomDebugStringConvertible) -> Bool {
    if lhs.customDebugStringConvertible != rhs.customDebugStringConvertible {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.d: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".d"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "d"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.d) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.d != 0 {
      try visitor.visitSingularInt32Field(value: self.d, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.d, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.d) -> Bool {
    if lhs.d != rhs.d {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.DataMessage: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".Data"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "Data"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.data) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.data != 0 {
      try visitor.visitSingularInt32Field(value: self.data, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.DataMessage, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.DataMessage) -> Bool {
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.dataResult: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".dataResult"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "dataResult"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.dataResult) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.dataResult != 0 {
      try visitor.visitSingularInt32Field(value: self.dataResult, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.dataResult, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.dataResult) -> Bool {
    if lhs.dataResult != rhs.dataResult {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.date: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".date"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "date"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.date) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.date != 0 {
      try visitor.visitSingularInt32Field(value: self.date, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.date, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.date) -> Bool {
    if lhs.date != rhs.date {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.daySec: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".daySec"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "daySec"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.daySec) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.daySec != 0 {
      try visitor.visitSingularInt32Field(value: self.daySec, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.daySec, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.daySec) -> Bool {
    if lhs.daySec != rhs.daySec {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.daysSinceEpoch: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".daysSinceEpoch"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "daysSinceEpoch"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.daysSinceEpoch) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.daysSinceEpoch != 0 {
      try visitor.visitSingularInt32Field(value: self.daysSinceEpoch, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.daysSinceEpoch, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.daysSinceEpoch) -> Bool {
    if lhs.daysSinceEpoch != rhs.daysSinceEpoch {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.debugDescriptionMessage: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".debugDescription"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "debugDescription"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.debugDescription_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.debugDescription_p != 0 {
      try visitor.visitSingularInt32Field(value: self.debugDescription_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.debugDescriptionMessage, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.debugDescriptionMessage) -> Bool {
    if lhs.debugDescription_p != rhs.debugDescription_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.debugRedact: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".debugRedact"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "debugRedact"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.debugRedact) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.debugRedact != 0 {
      try visitor.visitSingularInt32Field(value: self.debugRedact, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.debugRedact, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.debugRedact) -> Bool {
    if lhs.debugRedact != rhs.debugRedact {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decoded: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".decoded"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "decoded"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.decoded) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.decoded != 0 {
      try visitor.visitSingularInt32Field(value: self.decoded, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decoded, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decoded) -> Bool {
    if lhs.decoded != rhs.decoded {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodedFromJSONNull: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".decodedFromJSONNull"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "decodedFromJSONNull"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.decodedFromJsonnull) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.decodedFromJsonnull != 0 {
      try visitor.visitSingularInt32Field(value: self.decodedFromJsonnull, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodedFromJSONNull, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodedFromJSONNull) -> Bool {
    if lhs.decodedFromJsonnull != rhs.decodedFromJsonnull {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeExtensionField: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".decodeExtensionField"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "decodeExtensionField"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.decodeExtensionField) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.decodeExtensionField != 0 {
      try visitor.visitSingularInt32Field(value: self.decodeExtensionField, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeExtensionField, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeExtensionField) -> Bool {
    if lhs.decodeExtensionField != rhs.decodeExtensionField {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeExtensionFieldsAsMessageSet: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".decodeExtensionFieldsAsMessageSet"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "decodeExtensionFieldsAsMessageSet"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.decodeExtensionFieldsAsMessageSet) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.decodeExtensionFieldsAsMessageSet != 0 {
      try visitor.visitSingularInt32Field(value: self.decodeExtensionFieldsAsMessageSet, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeExtensionFieldsAsMessageSet, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeExtensionFieldsAsMessageSet) -> Bool {
    if lhs.decodeExtensionFieldsAsMessageSet != rhs.decodeExtensionFieldsAsMessageSet {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeJSON: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".decodeJSON"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "decodeJSON"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.decodeJson) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.decodeJson != 0 {
      try visitor.visitSingularInt32Field(value: self.decodeJson, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeJSON, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeJSON) -> Bool {
    if lhs.decodeJson != rhs.decodeJson {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeMapField: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".decodeMapField"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "decodeMapField"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.decodeMapField) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.decodeMapField != 0 {
      try visitor.visitSingularInt32Field(value: self.decodeMapField, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeMapField, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeMapField) -> Bool {
    if lhs.decodeMapField != rhs.decodeMapField {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeMessageMessage: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".decodeMessage"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "decodeMessage"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.decodeMessage) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.decodeMessage != 0 {
      try visitor.visitSingularInt32Field(value: self.decodeMessage, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeMessageMessage, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeMessageMessage) -> Bool {
    if lhs.decodeMessage != rhs.decodeMessage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decoder: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".decoder"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "decoder"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.decoder) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.decoder != 0 {
      try visitor.visitSingularInt32Field(value: self.decoder, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decoder, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decoder) -> Bool {
    if lhs.decoder != rhs.decoder {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeRepeated: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".decodeRepeated"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "decodeRepeated"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.decodeRepeated) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.decodeRepeated != 0 {
      try visitor.visitSingularInt32Field(value: self.decodeRepeated, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeRepeated, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeRepeated) -> Bool {
    if lhs.decodeRepeated != rhs.decodeRepeated {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeRepeatedBoolField: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".decodeRepeatedBoolField"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "decodeRepeatedBoolField"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.decodeRepeatedBoolField) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.decodeRepeatedBoolField != 0 {
      try visitor.visitSingularInt32Field(value: self.decodeRepeatedBoolField, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeRepeatedBoolField, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeRepeatedBoolField) -> Bool {
    if lhs.decodeRepeatedBoolField != rhs.decodeRepeatedBoolField {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeRepeatedBytesField: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".decodeRepeatedBytesField"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "decodeRepeatedBytesField"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.decodeRepeatedBytesField) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.decodeRepeatedBytesField != 0 {
      try visitor.visitSingularInt32Field(value: self.decodeRepeatedBytesField, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeRepeatedBytesField, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeRepeatedBytesField) -> Bool {
    if lhs.decodeRepeatedBytesField != rhs.decodeRepeatedBytesField {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeRepeatedDoubleField: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".decodeRepeatedDoubleField"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "decodeRepeatedDoubleField"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.decodeRepeatedDoubleField) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.decodeRepeatedDoubleField != 0 {
      try visitor.visitSingularInt32Field(value: self.decodeRepeatedDoubleField, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeRepeatedDoubleField, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeRepeatedDoubleField) -> Bool {
    if lhs.decodeRepeatedDoubleField != rhs.decodeRepeatedDoubleField {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeRepeatedEnumField: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".decodeRepeatedEnumField"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "decodeRepeatedEnumField"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.decodeRepeatedEnumField) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.decodeRepeatedEnumField != 0 {
      try visitor.visitSingularInt32Field(value: self.decodeRepeatedEnumField, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeRepeatedEnumField, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeRepeatedEnumField) -> Bool {
    if lhs.decodeRepeatedEnumField != rhs.decodeRepeatedEnumField {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeRepeatedFixed32Field: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".decodeRepeatedFixed32Field"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "decodeRepeatedFixed32Field"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.decodeRepeatedFixed32Field) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.decodeRepeatedFixed32Field != 0 {
      try visitor.visitSingularInt32Field(value: self.decodeRepeatedFixed32Field, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeRepeatedFixed32Field, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeRepeatedFixed32Field) -> Bool {
    if lhs.decodeRepeatedFixed32Field != rhs.decodeRepeatedFixed32Field {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeRepeatedFixed64Field: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".decodeRepeatedFixed64Field"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "decodeRepeatedFixed64Field"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.decodeRepeatedFixed64Field) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.decodeRepeatedFixed64Field != 0 {
      try visitor.visitSingularInt32Field(value: self.decodeRepeatedFixed64Field, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeRepeatedFixed64Field, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeRepeatedFixed64Field) -> Bool {
    if lhs.decodeRepeatedFixed64Field != rhs.decodeRepeatedFixed64Field {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeRepeatedFloatField: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".decodeRepeatedFloatField"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "decodeRepeatedFloatField"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.decodeRepeatedFloatField) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.decodeRepeatedFloatField != 0 {
      try visitor.visitSingularInt32Field(value: self.decodeRepeatedFloatField, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeRepeatedFloatField, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeRepeatedFloatField) -> Bool {
    if lhs.decodeRepeatedFloatField != rhs.decodeRepeatedFloatField {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeRepeatedGroupField: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".decodeRepeatedGroupField"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "decodeRepeatedGroupField"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.decodeRepeatedGroupField) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.decodeRepeatedGroupField != 0 {
      try visitor.visitSingularInt32Field(value: self.decodeRepeatedGroupField, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeRepeatedGroupField, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeRepeatedGroupField) -> Bool {
    if lhs.decodeRepeatedGroupField != rhs.decodeRepeatedGroupField {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeRepeatedInt32Field: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".decodeRepeatedInt32Field"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "decodeRepeatedInt32Field"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.decodeRepeatedInt32Field) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.decodeRepeatedInt32Field != 0 {
      try visitor.visitSingularInt32Field(value: self.decodeRepeatedInt32Field, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeRepeatedInt32Field, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeRepeatedInt32Field) -> Bool {
    if lhs.decodeRepeatedInt32Field != rhs.decodeRepeatedInt32Field {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeRepeatedInt64Field: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".decodeRepeatedInt64Field"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "decodeRepeatedInt64Field"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.decodeRepeatedInt64Field) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.decodeRepeatedInt64Field != 0 {
      try visitor.visitSingularInt32Field(value: self.decodeRepeatedInt64Field, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeRepeatedInt64Field, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeRepeatedInt64Field) -> Bool {
    if lhs.decodeRepeatedInt64Field != rhs.decodeRepeatedInt64Field {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeRepeatedMessageField: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".decodeRepeatedMessageField"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "decodeRepeatedMessageField"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.decodeRepeatedMessageField) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.decodeRepeatedMessageField != 0 {
      try visitor.visitSingularInt32Field(value: self.decodeRepeatedMessageField, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeRepeatedMessageField, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeRepeatedMessageField) -> Bool {
    if lhs.decodeRepeatedMessageField != rhs.decodeRepeatedMessageField {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeRepeatedSFixed32Field: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".decodeRepeatedSFixed32Field"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "decodeRepeatedSFixed32Field"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.decodeRepeatedSfixed32Field) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.decodeRepeatedSfixed32Field != 0 {
      try visitor.visitSingularInt32Field(value: self.decodeRepeatedSfixed32Field, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeRepeatedSFixed32Field, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeRepeatedSFixed32Field) -> Bool {
    if lhs.decodeRepeatedSfixed32Field != rhs.decodeRepeatedSfixed32Field {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeRepeatedSFixed64Field: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".decodeRepeatedSFixed64Field"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "decodeRepeatedSFixed64Field"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.decodeRepeatedSfixed64Field) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.decodeRepeatedSfixed64Field != 0 {
      try visitor.visitSingularInt32Field(value: self.decodeRepeatedSfixed64Field, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeRepeatedSFixed64Field, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeRepeatedSFixed64Field) -> Bool {
    if lhs.decodeRepeatedSfixed64Field != rhs.decodeRepeatedSfixed64Field {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeRepeatedSInt32Field: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".decodeRepeatedSInt32Field"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "decodeRepeatedSInt32Field"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.decodeRepeatedSint32Field) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.decodeRepeatedSint32Field != 0 {
      try visitor.visitSingularInt32Field(value: self.decodeRepeatedSint32Field, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeRepeatedSInt32Field, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeRepeatedSInt32Field) -> Bool {
    if lhs.decodeRepeatedSint32Field != rhs.decodeRepeatedSint32Field {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeRepeatedSInt64Field: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".decodeRepeatedSInt64Field"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "decodeRepeatedSInt64Field"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.decodeRepeatedSint64Field) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.decodeRepeatedSint64Field != 0 {
      try visitor.visitSingularInt32Field(value: self.decodeRepeatedSint64Field, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeRepeatedSInt64Field, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeRepeatedSInt64Field) -> Bool {
    if lhs.decodeRepeatedSint64Field != rhs.decodeRepeatedSint64Field {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeRepeatedStringField: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".decodeRepeatedStringField"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "decodeRepeatedStringField"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.decodeRepeatedStringField) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.decodeRepeatedStringField != 0 {
      try visitor.visitSingularInt32Field(value: self.decodeRepeatedStringField, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeRepeatedStringField, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeRepeatedStringField) -> Bool {
    if lhs.decodeRepeatedStringField != rhs.decodeRepeatedStringField {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeRepeatedUInt32Field: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".decodeRepeatedUInt32Field"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "decodeRepeatedUInt32Field"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.decodeRepeatedUint32Field) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.decodeRepeatedUint32Field != 0 {
      try visitor.visitSingularInt32Field(value: self.decodeRepeatedUint32Field, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeRepeatedUInt32Field, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeRepeatedUInt32Field) -> Bool {
    if lhs.decodeRepeatedUint32Field != rhs.decodeRepeatedUint32Field {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeRepeatedUInt64Field: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".decodeRepeatedUInt64Field"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "decodeRepeatedUInt64Field"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.decodeRepeatedUint64Field) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.decodeRepeatedUint64Field != 0 {
      try visitor.visitSingularInt32Field(value: self.decodeRepeatedUint64Field, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeRepeatedUInt64Field, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeRepeatedUInt64Field) -> Bool {
    if lhs.decodeRepeatedUint64Field != rhs.decodeRepeatedUint64Field {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeSingular: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".decodeSingular"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "decodeSingular"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.decodeSingular) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.decodeSingular != 0 {
      try visitor.visitSingularInt32Field(value: self.decodeSingular, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeSingular, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeSingular) -> Bool {
    if lhs.decodeSingular != rhs.decodeSingular {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeSingularBoolField: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".decodeSingularBoolField"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "decodeSingularBoolField"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.decodeSingularBoolField) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.decodeSingularBoolField != 0 {
      try visitor.visitSingularInt32Field(value: self.decodeSingularBoolField, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeSingularBoolField, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeSingularBoolField) -> Bool {
    if lhs.decodeSingularBoolField != rhs.decodeSingularBoolField {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeSingularBytesField: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".decodeSingularBytesField"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "decodeSingularBytesField"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.decodeSingularBytesField) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.decodeSingularBytesField != 0 {
      try visitor.visitSingularInt32Field(value: self.decodeSingularBytesField, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeSingularBytesField, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeSingularBytesField) -> Bool {
    if lhs.decodeSingularBytesField != rhs.decodeSingularBytesField {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeSingularDoubleField: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".decodeSingularDoubleField"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "decodeSingularDoubleField"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.decodeSingularDoubleField) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.decodeSingularDoubleField != 0 {
      try visitor.visitSingularInt32Field(value: self.decodeSingularDoubleField, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeSingularDoubleField, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeSingularDoubleField) -> Bool {
    if lhs.decodeSingularDoubleField != rhs.decodeSingularDoubleField {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeSingularEnumField: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".decodeSingularEnumField"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "decodeSingularEnumField"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.decodeSingularEnumField) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.decodeSingularEnumField != 0 {
      try visitor.visitSingularInt32Field(value: self.decodeSingularEnumField, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeSingularEnumField, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeSingularEnumField) -> Bool {
    if lhs.decodeSingularEnumField != rhs.decodeSingularEnumField {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeSingularFixed32Field: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".decodeSingularFixed32Field"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "decodeSingularFixed32Field"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.decodeSingularFixed32Field) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.decodeSingularFixed32Field != 0 {
      try visitor.visitSingularInt32Field(value: self.decodeSingularFixed32Field, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeSingularFixed32Field, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeSingularFixed32Field) -> Bool {
    if lhs.decodeSingularFixed32Field != rhs.decodeSingularFixed32Field {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeSingularFixed64Field: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".decodeSingularFixed64Field"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "decodeSingularFixed64Field"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.decodeSingularFixed64Field) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.decodeSingularFixed64Field != 0 {
      try visitor.visitSingularInt32Field(value: self.decodeSingularFixed64Field, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeSingularFixed64Field, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeSingularFixed64Field) -> Bool {
    if lhs.decodeSingularFixed64Field != rhs.decodeSingularFixed64Field {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeSingularFloatField: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".decodeSingularFloatField"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "decodeSingularFloatField"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.decodeSingularFloatField) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.decodeSingularFloatField != 0 {
      try visitor.visitSingularInt32Field(value: self.decodeSingularFloatField, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeSingularFloatField, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeSingularFloatField) -> Bool {
    if lhs.decodeSingularFloatField != rhs.decodeSingularFloatField {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeSingularGroupField: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".decodeSingularGroupField"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "decodeSingularGroupField"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.decodeSingularGroupField) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.decodeSingularGroupField != 0 {
      try visitor.visitSingularInt32Field(value: self.decodeSingularGroupField, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeSingularGroupField, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeSingularGroupField) -> Bool {
    if lhs.decodeSingularGroupField != rhs.decodeSingularGroupField {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeSingularInt32Field: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".decodeSingularInt32Field"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "decodeSingularInt32Field"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.decodeSingularInt32Field) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.decodeSingularInt32Field != 0 {
      try visitor.visitSingularInt32Field(value: self.decodeSingularInt32Field, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeSingularInt32Field, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeSingularInt32Field) -> Bool {
    if lhs.decodeSingularInt32Field != rhs.decodeSingularInt32Field {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeSingularInt64Field: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".decodeSingularInt64Field"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "decodeSingularInt64Field"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.decodeSingularInt64Field) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.decodeSingularInt64Field != 0 {
      try visitor.visitSingularInt32Field(value: self.decodeSingularInt64Field, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeSingularInt64Field, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeSingularInt64Field) -> Bool {
    if lhs.decodeSingularInt64Field != rhs.decodeSingularInt64Field {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeSingularMessageField: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".decodeSingularMessageField"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "decodeSingularMessageField"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.decodeSingularMessageField) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.decodeSingularMessageField != 0 {
      try visitor.visitSingularInt32Field(value: self.decodeSingularMessageField, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeSingularMessageField, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeSingularMessageField) -> Bool {
    if lhs.decodeSingularMessageField != rhs.decodeSingularMessageField {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeSingularSFixed32Field: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".decodeSingularSFixed32Field"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "decodeSingularSFixed32Field"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.decodeSingularSfixed32Field) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.decodeSingularSfixed32Field != 0 {
      try visitor.visitSingularInt32Field(value: self.decodeSingularSfixed32Field, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeSingularSFixed32Field, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeSingularSFixed32Field) -> Bool {
    if lhs.decodeSingularSfixed32Field != rhs.decodeSingularSfixed32Field {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeSingularSFixed64Field: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".decodeSingularSFixed64Field"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "decodeSingularSFixed64Field"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.decodeSingularSfixed64Field) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.decodeSingularSfixed64Field != 0 {
      try visitor.visitSingularInt32Field(value: self.decodeSingularSfixed64Field, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeSingularSFixed64Field, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeSingularSFixed64Field) -> Bool {
    if lhs.decodeSingularSfixed64Field != rhs.decodeSingularSfixed64Field {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeSingularSInt32Field: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".decodeSingularSInt32Field"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "decodeSingularSInt32Field"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.decodeSingularSint32Field) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.decodeSingularSint32Field != 0 {
      try visitor.visitSingularInt32Field(value: self.decodeSingularSint32Field, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeSingularSInt32Field, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeSingularSInt32Field) -> Bool {
    if lhs.decodeSingularSint32Field != rhs.decodeSingularSint32Field {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeSingularSInt64Field: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".decodeSingularSInt64Field"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "decodeSingularSInt64Field"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.decodeSingularSint64Field) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.decodeSingularSint64Field != 0 {
      try visitor.visitSingularInt32Field(value: self.decodeSingularSint64Field, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeSingularSInt64Field, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeSingularSInt64Field) -> Bool {
    if lhs.decodeSingularSint64Field != rhs.decodeSingularSint64Field {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeSingularStringField: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".decodeSingularStringField"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "decodeSingularStringField"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.decodeSingularStringField) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.decodeSingularStringField != 0 {
      try visitor.visitSingularInt32Field(value: self.decodeSingularStringField, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeSingularStringField, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeSingularStringField) -> Bool {
    if lhs.decodeSingularStringField != rhs.decodeSingularStringField {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeSingularUInt32Field: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".decodeSingularUInt32Field"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "decodeSingularUInt32Field"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.decodeSingularUint32Field) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.decodeSingularUint32Field != 0 {
      try visitor.visitSingularInt32Field(value: self.decodeSingularUint32Field, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeSingularUInt32Field, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeSingularUInt32Field) -> Bool {
    if lhs.decodeSingularUint32Field != rhs.decodeSingularUint32Field {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeSingularUInt64Field: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".decodeSingularUInt64Field"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "decodeSingularUInt64Field"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.decodeSingularUint64Field) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.decodeSingularUint64Field != 0 {
      try visitor.visitSingularInt32Field(value: self.decodeSingularUint64Field, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeSingularUInt64Field, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeSingularUInt64Field) -> Bool {
    if lhs.decodeSingularUint64Field != rhs.decodeSingularUint64Field {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeTextFormat: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".decodeTextFormat"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "decodeTextFormat"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.decodeTextFormat) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.decodeTextFormat != 0 {
      try visitor.visitSingularInt32Field(value: self.decodeTextFormat, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeTextFormat, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.decodeTextFormat) -> Bool {
    if lhs.decodeTextFormat != rhs.decodeTextFormat {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.defaultAnyTypeURLPrefix: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".defaultAnyTypeURLPrefix"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "defaultAnyTypeURLPrefix"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.defaultAnyTypeUrlprefix) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.defaultAnyTypeUrlprefix != 0 {
      try visitor.visitSingularInt32Field(value: self.defaultAnyTypeUrlprefix, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.defaultAnyTypeURLPrefix, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.defaultAnyTypeURLPrefix) -> Bool {
    if lhs.defaultAnyTypeUrlprefix != rhs.defaultAnyTypeUrlprefix {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.defaultValue: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".defaultValue"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "defaultValue"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.defaultValue) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.defaultValue != 0 {
      try visitor.visitSingularInt32Field(value: self.defaultValue, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.defaultValue, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.defaultValue) -> Bool {
    if lhs.defaultValue != rhs.defaultValue {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.dependency: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".dependency"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "dependency"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.dependency) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.dependency != 0 {
      try visitor.visitSingularInt32Field(value: self.dependency, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.dependency, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.dependency) -> Bool {
    if lhs.dependency != rhs.dependency {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.deprecated: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".deprecated"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "deprecated"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.deprecated) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.deprecated != 0 {
      try visitor.visitSingularInt32Field(value: self.deprecated, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.deprecated, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.deprecated) -> Bool {
    if lhs.deprecated != rhs.deprecated {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.deprecatedLegacyJsonFieldConflicts: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".deprecatedLegacyJsonFieldConflicts"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "deprecatedLegacyJsonFieldConflicts"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.deprecatedLegacyJsonFieldConflicts) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.deprecatedLegacyJsonFieldConflicts != 0 {
      try visitor.visitSingularInt32Field(value: self.deprecatedLegacyJsonFieldConflicts, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.deprecatedLegacyJsonFieldConflicts, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.deprecatedLegacyJsonFieldConflicts) -> Bool {
    if lhs.deprecatedLegacyJsonFieldConflicts != rhs.deprecatedLegacyJsonFieldConflicts {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.descriptionMessage: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".description"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.description_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.description_p != 0 {
      try visitor.visitSingularInt32Field(value: self.description_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.descriptionMessage, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.descriptionMessage) -> Bool {
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.DescriptorProto: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".DescriptorProto"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "DescriptorProto"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.descriptorProto) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.descriptorProto != 0 {
      try visitor.visitSingularInt32Field(value: self.descriptorProto, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.DescriptorProto, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.DescriptorProto) -> Bool {
    if lhs.descriptorProto != rhs.descriptorProto {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Dictionary: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".Dictionary"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "Dictionary"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.dictionary) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.dictionary != 0 {
      try visitor.visitSingularInt32Field(value: self.dictionary, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Dictionary, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Dictionary) -> Bool {
    if lhs.dictionary != rhs.dictionary {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.dictionaryLiteral: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".dictionaryLiteral"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "dictionaryLiteral"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.dictionaryLiteral) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.dictionaryLiteral != 0 {
      try visitor.visitSingularInt32Field(value: self.dictionaryLiteral, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.dictionaryLiteral, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.dictionaryLiteral) -> Bool {
    if lhs.dictionaryLiteral != rhs.dictionaryLiteral {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.digit: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".digit"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "digit"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.digit) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.digit != 0 {
      try visitor.visitSingularInt32Field(value: self.digit, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.digit, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.digit) -> Bool {
    if lhs.digit != rhs.digit {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.digit0: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".digit0"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "digit0"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.digit0) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.digit0 != 0 {
      try visitor.visitSingularInt32Field(value: self.digit0, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.digit0, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.digit0) -> Bool {
    if lhs.digit0 != rhs.digit0 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.digit1: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".digit1"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "digit1"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.digit1) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.digit1 != 0 {
      try visitor.visitSingularInt32Field(value: self.digit1, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.digit1, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.digit1) -> Bool {
    if lhs.digit1 != rhs.digit1 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.digitCount: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".digitCount"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "digitCount"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.digitCount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.digitCount != 0 {
      try visitor.visitSingularInt32Field(value: self.digitCount, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.digitCount, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.digitCount) -> Bool {
    if lhs.digitCount != rhs.digitCount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.digits: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".digits"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "digits"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.digits) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.digits != 0 {
      try visitor.visitSingularInt32Field(value: self.digits, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.digits, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.digits) -> Bool {
    if lhs.digits != rhs.digits {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.digitValue: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".digitValue"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "digitValue"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.digitValue) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.digitValue != 0 {
      try visitor.visitSingularInt32Field(value: self.digitValue, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.digitValue, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.digitValue) -> Bool {
    if lhs.digitValue != rhs.digitValue {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.discardableResult: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".discardableResult"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "discardableResult"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.discardableResult) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.discardableResult != 0 {
      try visitor.visitSingularInt32Field(value: self.discardableResult, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.discardableResult, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.discardableResult) -> Bool {
    if lhs.discardableResult != rhs.discardableResult {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.discardUnknownFields: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".discardUnknownFields"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "discardUnknownFields"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.discardUnknownFields) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.discardUnknownFields != 0 {
      try visitor.visitSingularInt32Field(value: self.discardUnknownFields, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.discardUnknownFields, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.discardUnknownFields) -> Bool {
    if lhs.discardUnknownFields != rhs.discardUnknownFields {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.distance: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".distance"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "distance"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.distance) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.distance != 0 {
      try visitor.visitSingularInt32Field(value: self.distance, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.distance, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.distance) -> Bool {
    if lhs.distance != rhs.distance {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.double: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".double"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "double"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.double) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.double != 0 {
      try visitor.visitSingularInt32Field(value: self.double, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.double, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.double) -> Bool {
    if lhs.double != rhs.double {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.doubleValue: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".doubleValue"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "doubleValue"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.doubleValue) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.doubleValue != 0 {
      try visitor.visitSingularInt32Field(value: self.doubleValue, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.doubleValue, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.doubleValue) -> Bool {
    if lhs.doubleValue != rhs.doubleValue {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Duration: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".Duration"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "Duration"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.duration) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.duration != 0 {
      try visitor.visitSingularInt32Field(value: self.duration, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Duration, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Duration) -> Bool {
    if lhs.duration != rhs.duration {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.E: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".E"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "E"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.e) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.e != 0 {
      try visitor.visitSingularInt32Field(value: self.e, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.E, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.E) -> Bool {
    if lhs.e != rhs.e {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.edition: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".edition"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "edition"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.edition) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.edition != 0 {
      try visitor.visitSingularInt32Field(value: self.edition, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.edition, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.edition) -> Bool {
    if lhs.edition != rhs.edition {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Element: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".Element"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "Element"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.element) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.element != 0 {
      try visitor.visitSingularInt32Field(value: self.element, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Element, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Element) -> Bool {
    if lhs.element != rhs.element {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.elements: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".elements"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "elements"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.elements) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.elements != 0 {
      try visitor.visitSingularInt32Field(value: self.elements, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.elements, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.elements) -> Bool {
    if lhs.elements != rhs.elements {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.emitExtensionFieldName: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".emitExtensionFieldName"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "emitExtensionFieldName"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.emitExtensionFieldName) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.emitExtensionFieldName != 0 {
      try visitor.visitSingularInt32Field(value: self.emitExtensionFieldName, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.emitExtensionFieldName, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.emitExtensionFieldName) -> Bool {
    if lhs.emitExtensionFieldName != rhs.emitExtensionFieldName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.emitFieldName: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".emitFieldName"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "emitFieldName"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.emitFieldName) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.emitFieldName != 0 {
      try visitor.visitSingularInt32Field(value: self.emitFieldName, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.emitFieldName, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.emitFieldName) -> Bool {
    if lhs.emitFieldName != rhs.emitFieldName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.emitFieldNumber: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".emitFieldNumber"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "emitFieldNumber"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.emitFieldNumber) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.emitFieldNumber != 0 {
      try visitor.visitSingularInt32Field(value: self.emitFieldNumber, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.emitFieldNumber, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.emitFieldNumber) -> Bool {
    if lhs.emitFieldNumber != rhs.emitFieldNumber {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Empty: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".Empty"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "Empty"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.empty) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.empty != 0 {
      try visitor.visitSingularInt32Field(value: self.empty, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Empty, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Empty) -> Bool {
    if lhs.empty != rhs.empty {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.emptyData: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".emptyData"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "emptyData"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.emptyData) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.emptyData != 0 {
      try visitor.visitSingularInt32Field(value: self.emptyData, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.emptyData, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.emptyData) -> Bool {
    if lhs.emptyData != rhs.emptyData {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.encodeAsBytes: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".encodeAsBytes"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "encodeAsBytes"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.encodeAsBytes) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.encodeAsBytes != 0 {
      try visitor.visitSingularInt32Field(value: self.encodeAsBytes, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.encodeAsBytes, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.encodeAsBytes) -> Bool {
    if lhs.encodeAsBytes != rhs.encodeAsBytes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.encoded: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".encoded"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "encoded"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.encoded) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.encoded != 0 {
      try visitor.visitSingularInt32Field(value: self.encoded, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.encoded, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.encoded) -> Bool {
    if lhs.encoded != rhs.encoded {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.encodedJSONString: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".encodedJSONString"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "encodedJSONString"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.encodedJsonstring) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.encodedJsonstring != 0 {
      try visitor.visitSingularInt32Field(value: self.encodedJsonstring, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.encodedJSONString, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.encodedJSONString) -> Bool {
    if lhs.encodedJsonstring != rhs.encodedJsonstring {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.encodedSize: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".encodedSize"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "encodedSize"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.encodedSize) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.encodedSize != 0 {
      try visitor.visitSingularInt32Field(value: self.encodedSize, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.encodedSize, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.encodedSize) -> Bool {
    if lhs.encodedSize != rhs.encodedSize {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.encodeField: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".encodeField"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "encodeField"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.encodeField) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.encodeField != 0 {
      try visitor.visitSingularInt32Field(value: self.encodeField, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.encodeField, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.encodeField) -> Bool {
    if lhs.encodeField != rhs.encodeField {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.encoder: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".encoder"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "encoder"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.encoder) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.encoder != 0 {
      try visitor.visitSingularInt32Field(value: self.encoder, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.encoder, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.encoder) -> Bool {
    if lhs.encoder != rhs.encoder {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.end: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".end"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "end"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.end) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.end != 0 {
      try visitor.visitSingularInt32Field(value: self.end, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.end, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.end) -> Bool {
    if lhs.end != rhs.end {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.endArray: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".endArray"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "endArray"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.endArray) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.endArray != 0 {
      try visitor.visitSingularInt32Field(value: self.endArray, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.endArray, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.endArray) -> Bool {
    if lhs.endArray != rhs.endArray {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.endMessageField: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".endMessageField"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "endMessageField"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.endMessageField) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.endMessageField != 0 {
      try visitor.visitSingularInt32Field(value: self.endMessageField, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.endMessageField, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.endMessageField) -> Bool {
    if lhs.endMessageField != rhs.endMessageField {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.endObject: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".endObject"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "endObject"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.endObject) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.endObject != 0 {
      try visitor.visitSingularInt32Field(value: self.endObject, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.endObject, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.endObject) -> Bool {
    if lhs.endObject != rhs.endObject {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.endRegularField: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".endRegularField"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "endRegularField"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.endRegularField) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.endRegularField != 0 {
      try visitor.visitSingularInt32Field(value: self.endRegularField, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.endRegularField, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.endRegularField) -> Bool {
    if lhs.endRegularField != rhs.endRegularField {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.enumMessage: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".enum"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "enum"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.`enum`) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.`enum` != 0 {
      try visitor.visitSingularInt32Field(value: self.`enum`, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.enumMessage, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.enumMessage) -> Bool {
    if lhs.`enum` != rhs.`enum` {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.EnumDescriptorProto: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".EnumDescriptorProto"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "EnumDescriptorProto"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.enumDescriptorProto) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.enumDescriptorProto != 0 {
      try visitor.visitSingularInt32Field(value: self.enumDescriptorProto, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.EnumDescriptorProto, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.EnumDescriptorProto) -> Bool {
    if lhs.enumDescriptorProto != rhs.enumDescriptorProto {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.EnumOptions: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".EnumOptions"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "EnumOptions"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.enumOptions) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.enumOptions != 0 {
      try visitor.visitSingularInt32Field(value: self.enumOptions, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.EnumOptions, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.EnumOptions) -> Bool {
    if lhs.enumOptions != rhs.enumOptions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.EnumReservedRange: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".EnumReservedRange"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "EnumReservedRange"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.enumReservedRange) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.enumReservedRange != 0 {
      try visitor.visitSingularInt32Field(value: self.enumReservedRange, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.EnumReservedRange, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.EnumReservedRange) -> Bool {
    if lhs.enumReservedRange != rhs.enumReservedRange {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.enumType: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".enumType"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "enumType"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.enumType) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.enumType != 0 {
      try visitor.visitSingularInt32Field(value: self.enumType, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.enumType, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.enumType) -> Bool {
    if lhs.enumType != rhs.enumType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.enumvalue: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".enumvalue"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "enumvalue"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.enumvalue) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.enumvalue != 0 {
      try visitor.visitSingularInt32Field(value: self.enumvalue, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.enumvalue, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.enumvalue) -> Bool {
    if lhs.enumvalue != rhs.enumvalue {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.EnumValueDescriptorProto: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".EnumValueDescriptorProto"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "EnumValueDescriptorProto"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.enumValueDescriptorProto) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.enumValueDescriptorProto != 0 {
      try visitor.visitSingularInt32Field(value: self.enumValueDescriptorProto, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.EnumValueDescriptorProto, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.EnumValueDescriptorProto) -> Bool {
    if lhs.enumValueDescriptorProto != rhs.enumValueDescriptorProto {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.EnumValueOptions: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".EnumValueOptions"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "EnumValueOptions"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.enumValueOptions) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.enumValueOptions != 0 {
      try visitor.visitSingularInt32Field(value: self.enumValueOptions, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.EnumValueOptions, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.EnumValueOptions) -> Bool {
    if lhs.enumValueOptions != rhs.enumValueOptions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Equatable: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".Equatable"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "Equatable"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.equatable) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.equatable != 0 {
      try visitor.visitSingularInt32Field(value: self.equatable, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Equatable, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Equatable) -> Bool {
    if lhs.equatable != rhs.equatable {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Error: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".Error"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "Error"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.error) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.error != 0 {
      try visitor.visitSingularInt32Field(value: self.error, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Error, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Error) -> Bool {
    if lhs.error != rhs.error {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ExpressibleByArrayLiteral: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".ExpressibleByArrayLiteral"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "ExpressibleByArrayLiteral"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.expressibleByArrayLiteral) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.expressibleByArrayLiteral != 0 {
      try visitor.visitSingularInt32Field(value: self.expressibleByArrayLiteral, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ExpressibleByArrayLiteral, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ExpressibleByArrayLiteral) -> Bool {
    if lhs.expressibleByArrayLiteral != rhs.expressibleByArrayLiteral {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ExpressibleByDictionaryLiteral: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".ExpressibleByDictionaryLiteral"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "ExpressibleByDictionaryLiteral"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.expressibleByDictionaryLiteral) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.expressibleByDictionaryLiteral != 0 {
      try visitor.visitSingularInt32Field(value: self.expressibleByDictionaryLiteral, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ExpressibleByDictionaryLiteral, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ExpressibleByDictionaryLiteral) -> Bool {
    if lhs.expressibleByDictionaryLiteral != rhs.expressibleByDictionaryLiteral {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ext: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".ext"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "ext"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.ext) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.ext != 0 {
      try visitor.visitSingularInt32Field(value: self.ext, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ext, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ext) -> Bool {
    if lhs.ext != rhs.ext {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.extDecoder: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".extDecoder"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "extDecoder"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.extDecoder) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.extDecoder != 0 {
      try visitor.visitSingularInt32Field(value: self.extDecoder, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.extDecoder, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.extDecoder) -> Bool {
    if lhs.extDecoder != rhs.extDecoder {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.extendedGraphemeClusterLiteral: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".extendedGraphemeClusterLiteral"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "extendedGraphemeClusterLiteral"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.extendedGraphemeClusterLiteral) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.extendedGraphemeClusterLiteral != 0 {
      try visitor.visitSingularInt32Field(value: self.extendedGraphemeClusterLiteral, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.extendedGraphemeClusterLiteral, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.extendedGraphemeClusterLiteral) -> Bool {
    if lhs.extendedGraphemeClusterLiteral != rhs.extendedGraphemeClusterLiteral {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ExtendedGraphemeClusterLiteralType: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".ExtendedGraphemeClusterLiteralType"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "ExtendedGraphemeClusterLiteralType"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.extendedGraphemeClusterLiteralType) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.extendedGraphemeClusterLiteralType != 0 {
      try visitor.visitSingularInt32Field(value: self.extendedGraphemeClusterLiteralType, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ExtendedGraphemeClusterLiteralType, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ExtendedGraphemeClusterLiteralType) -> Bool {
    if lhs.extendedGraphemeClusterLiteralType != rhs.extendedGraphemeClusterLiteralType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.extendee: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".extendee"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "extendee"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.extendee) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.extendee != 0 {
      try visitor.visitSingularInt32Field(value: self.extendee, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.extendee, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.extendee) -> Bool {
    if lhs.extendee != rhs.extendee {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ExtensibleMessage: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".ExtensibleMessage"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "ExtensibleMessage"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.extensibleMessage) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.extensibleMessage != 0 {
      try visitor.visitSingularInt32Field(value: self.extensibleMessage, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ExtensibleMessage, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ExtensibleMessage) -> Bool {
    if lhs.extensibleMessage != rhs.extensibleMessage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.extensionMessage: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".extension"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "extension"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.`extension`) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.`extension` != 0 {
      try visitor.visitSingularInt32Field(value: self.`extension`, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.extensionMessage, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.extensionMessage) -> Bool {
    if lhs.`extension` != rhs.`extension` {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ExtensionField: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".ExtensionField"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "ExtensionField"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.extensionField) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.extensionField != 0 {
      try visitor.visitSingularInt32Field(value: self.extensionField, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ExtensionField, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ExtensionField) -> Bool {
    if lhs.extensionField != rhs.extensionField {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.extensionFieldNumber: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".extensionFieldNumber"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "extensionFieldNumber"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.extensionFieldNumber) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.extensionFieldNumber != 0 {
      try visitor.visitSingularInt32Field(value: self.extensionFieldNumber, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.extensionFieldNumber, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.extensionFieldNumber) -> Bool {
    if lhs.extensionFieldNumber != rhs.extensionFieldNumber {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ExtensionFieldValueSet: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".ExtensionFieldValueSet"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "ExtensionFieldValueSet"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.extensionFieldValueSet) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.extensionFieldValueSet != 0 {
      try visitor.visitSingularInt32Field(value: self.extensionFieldValueSet, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ExtensionFieldValueSet, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ExtensionFieldValueSet) -> Bool {
    if lhs.extensionFieldValueSet != rhs.extensionFieldValueSet {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ExtensionMap: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".ExtensionMap"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "ExtensionMap"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.extensionMap) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.extensionMap != 0 {
      try visitor.visitSingularInt32Field(value: self.extensionMap, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ExtensionMap, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ExtensionMap) -> Bool {
    if lhs.extensionMap != rhs.extensionMap {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.extensionRange: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".extensionRange"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "extensionRange"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.extensionRange) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.extensionRange != 0 {
      try visitor.visitSingularInt32Field(value: self.extensionRange, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.extensionRange, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.extensionRange) -> Bool {
    if lhs.extensionRange != rhs.extensionRange {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ExtensionRangeOptions: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".ExtensionRangeOptions"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "ExtensionRangeOptions"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.extensionRangeOptions) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.extensionRangeOptions != 0 {
      try visitor.visitSingularInt32Field(value: self.extensionRangeOptions, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ExtensionRangeOptions, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ExtensionRangeOptions) -> Bool {
    if lhs.extensionRangeOptions != rhs.extensionRangeOptions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.extensions: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".extensions"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "extensions"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.extensions) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.extensions != 0 {
      try visitor.visitSingularInt32Field(value: self.extensions, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.extensions, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.extensions) -> Bool {
    if lhs.extensions != rhs.extensions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.extras: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".extras"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "extras"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.extras) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.extras != 0 {
      try visitor.visitSingularInt32Field(value: self.extras, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.extras, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.extras) -> Bool {
    if lhs.extras != rhs.extras {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.F: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".F"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "F"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.f) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.f != 0 {
      try visitor.visitSingularInt32Field(value: self.f, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.F, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.F) -> Bool {
    if lhs.f != rhs.f {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.falseMessage: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".false"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "false"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.`false`) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.`false` != 0 {
      try visitor.visitSingularInt32Field(value: self.`false`, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.falseMessage, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.falseMessage) -> Bool {
    if lhs.`false` != rhs.`false` {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.field: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".field"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "field"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.field) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.field != 0 {
      try visitor.visitSingularInt32Field(value: self.field, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.field, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.field) -> Bool {
    if lhs.field != rhs.field {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.fieldData: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".fieldData"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "fieldData"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.fieldData) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.fieldData != 0 {
      try visitor.visitSingularInt32Field(value: self.fieldData, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.fieldData, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.fieldData) -> Bool {
    if lhs.fieldData != rhs.fieldData {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.FieldDescriptorProto: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".FieldDescriptorProto"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "FieldDescriptorProto"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.fieldDescriptorProto) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.fieldDescriptorProto != 0 {
      try visitor.visitSingularInt32Field(value: self.fieldDescriptorProto, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.FieldDescriptorProto, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.FieldDescriptorProto) -> Bool {
    if lhs.fieldDescriptorProto != rhs.fieldDescriptorProto {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.FieldMask: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".FieldMask"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "FieldMask"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.fieldMask) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.fieldMask != 0 {
      try visitor.visitSingularInt32Field(value: self.fieldMask, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.FieldMask, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.FieldMask) -> Bool {
    if lhs.fieldMask != rhs.fieldMask {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.fieldName: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".fieldName"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "fieldName"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.fieldName) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.fieldName != 0 {
      try visitor.visitSingularInt32Field(value: self.fieldName, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.fieldName, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.fieldName) -> Bool {
    if lhs.fieldName != rhs.fieldName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.fieldNameCount: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".fieldNameCount"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "fieldNameCount"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.fieldNameCount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.fieldNameCount != 0 {
      try visitor.visitSingularInt32Field(value: self.fieldNameCount, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.fieldNameCount, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.fieldNameCount) -> Bool {
    if lhs.fieldNameCount != rhs.fieldNameCount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.fieldNum: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".fieldNum"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "fieldNum"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.fieldNum) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.fieldNum != 0 {
      try visitor.visitSingularInt32Field(value: self.fieldNum, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.fieldNum, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.fieldNum) -> Bool {
    if lhs.fieldNum != rhs.fieldNum {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.fieldNumber: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".fieldNumber"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "fieldNumber"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.fieldNumber) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.fieldNumber != 0 {
      try visitor.visitSingularInt32Field(value: self.fieldNumber, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.fieldNumber, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.fieldNumber) -> Bool {
    if lhs.fieldNumber != rhs.fieldNumber {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.fieldNumberForProto: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".fieldNumberForProto"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "fieldNumberForProto"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.fieldNumberForProto) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.fieldNumberForProto != 0 {
      try visitor.visitSingularInt32Field(value: self.fieldNumberForProto, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.fieldNumberForProto, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.fieldNumberForProto) -> Bool {
    if lhs.fieldNumberForProto != rhs.fieldNumberForProto {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.FieldOptions: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".FieldOptions"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "FieldOptions"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.fieldOptions) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.fieldOptions != 0 {
      try visitor.visitSingularInt32Field(value: self.fieldOptions, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.FieldOptions, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.FieldOptions) -> Bool {
    if lhs.fieldOptions != rhs.fieldOptions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.fields: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".fields"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "fields"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.fields) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.fields != 0 {
      try visitor.visitSingularInt32Field(value: self.fields, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.fields, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.fields) -> Bool {
    if lhs.fields != rhs.fields {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.fieldSize: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".fieldSize"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "fieldSize"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.fieldSize) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.fieldSize != 0 {
      try visitor.visitSingularInt32Field(value: self.fieldSize, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.fieldSize, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.fieldSize) -> Bool {
    if lhs.fieldSize != rhs.fieldSize {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.FieldTag: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".FieldTag"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "FieldTag"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.fieldTag) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.fieldTag != 0 {
      try visitor.visitSingularInt32Field(value: self.fieldTag, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.FieldTag, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.FieldTag) -> Bool {
    if lhs.fieldTag != rhs.fieldTag {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.fieldType: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".fieldType"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "fieldType"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.fieldType) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.fieldType != 0 {
      try visitor.visitSingularInt32Field(value: self.fieldType, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.fieldType, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.fieldType) -> Bool {
    if lhs.fieldType != rhs.fieldType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.file: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".file"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "file"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.file) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.file != 0 {
      try visitor.visitSingularInt32Field(value: self.file, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.file, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.file) -> Bool {
    if lhs.file != rhs.file {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.FileDescriptorProto: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".FileDescriptorProto"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "FileDescriptorProto"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.fileDescriptorProto) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.fileDescriptorProto != 0 {
      try visitor.visitSingularInt32Field(value: self.fileDescriptorProto, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.FileDescriptorProto, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.FileDescriptorProto) -> Bool {
    if lhs.fileDescriptorProto != rhs.fileDescriptorProto {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.FileDescriptorSet: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".FileDescriptorSet"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "FileDescriptorSet"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.fileDescriptorSet) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.fileDescriptorSet != 0 {
      try visitor.visitSingularInt32Field(value: self.fileDescriptorSet, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.FileDescriptorSet, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.FileDescriptorSet) -> Bool {
    if lhs.fileDescriptorSet != rhs.fileDescriptorSet {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.fileName: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".fileName"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "fileName"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.fileName) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.fileName != 0 {
      try visitor.visitSingularInt32Field(value: self.fileName, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.fileName, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.fileName) -> Bool {
    if lhs.fileName != rhs.fileName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.FileOptions: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".FileOptions"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "FileOptions"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.fileOptions) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.fileOptions != 0 {
      try visitor.visitSingularInt32Field(value: self.fileOptions, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.FileOptions, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.FileOptions) -> Bool {
    if lhs.fileOptions != rhs.fileOptions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.filter: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".filter"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "filter"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.filter) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.filter != 0 {
      try visitor.visitSingularInt32Field(value: self.filter, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.filter, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.filter) -> Bool {
    if lhs.filter != rhs.filter {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.first: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".first"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "first"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.first) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.first != 0 {
      try visitor.visitSingularInt32Field(value: self.first, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.first, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.first) -> Bool {
    if lhs.first != rhs.first {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.firstItem: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".firstItem"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "firstItem"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.firstItem) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.firstItem != 0 {
      try visitor.visitSingularInt32Field(value: self.firstItem, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.firstItem, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.firstItem) -> Bool {
    if lhs.firstItem != rhs.firstItem {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.float: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".float"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "float"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.float) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.float != 0 {
      try visitor.visitSingularInt32Field(value: self.float, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.float, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.float) -> Bool {
    if lhs.float != rhs.float {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.floatLiteral: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".floatLiteral"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "floatLiteral"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.floatLiteral) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.floatLiteral != 0 {
      try visitor.visitSingularInt32Field(value: self.floatLiteral, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.floatLiteral, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.floatLiteral) -> Bool {
    if lhs.floatLiteral != rhs.floatLiteral {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.FloatLiteralType: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".FloatLiteralType"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "FloatLiteralType"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.floatLiteralType) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.floatLiteralType != 0 {
      try visitor.visitSingularInt32Field(value: self.floatLiteralType, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.FloatLiteralType, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.FloatLiteralType) -> Bool {
    if lhs.floatLiteralType != rhs.floatLiteralType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.FloatValue: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".FloatValue"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "FloatValue"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.floatValue) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.floatValue != 0 {
      try visitor.visitSingularInt32Field(value: self.floatValue, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.FloatValue, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.FloatValue) -> Bool {
    if lhs.floatValue != rhs.floatValue {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.forMessageName: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".forMessageName"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "forMessageName"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.forMessageName) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.forMessageName != 0 {
      try visitor.visitSingularInt32Field(value: self.forMessageName, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.forMessageName, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.forMessageName) -> Bool {
    if lhs.forMessageName != rhs.forMessageName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.formUnion: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".formUnion"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "formUnion"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.formUnion) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.formUnion != 0 {
      try visitor.visitSingularInt32Field(value: self.formUnion, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.formUnion, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.formUnion) -> Bool {
    if lhs.formUnion != rhs.formUnion {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.forReadingFrom: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".forReadingFrom"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "forReadingFrom"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.forReadingFrom) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.forReadingFrom != 0 {
      try visitor.visitSingularInt32Field(value: self.forReadingFrom, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.forReadingFrom, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.forReadingFrom) -> Bool {
    if lhs.forReadingFrom != rhs.forReadingFrom {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.forTypeURL: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".forTypeURL"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "forTypeURL"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.forTypeURL) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.forTypeURL != 0 {
      try visitor.visitSingularInt32Field(value: self.forTypeURL, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.forTypeURL, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.forTypeURL) -> Bool {
    if lhs.forTypeURL != rhs.forTypeURL {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ForwardParser: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".ForwardParser"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "ForwardParser"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.forwardParser) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.forwardParser != 0 {
      try visitor.visitSingularInt32Field(value: self.forwardParser, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ForwardParser, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ForwardParser) -> Bool {
    if lhs.forwardParser != rhs.forwardParser {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.forWritingInto: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".forWritingInto"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "forWritingInto"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.forWritingInto) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.forWritingInto != 0 {
      try visitor.visitSingularInt32Field(value: self.forWritingInto, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.forWritingInto, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.forWritingInto) -> Bool {
    if lhs.forWritingInto != rhs.forWritingInto {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.from: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".from"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "from"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.from) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.from != 0 {
      try visitor.visitSingularInt32Field(value: self.from, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.from, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.from) -> Bool {
    if lhs.from != rhs.from {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.fromAscii2: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".fromAscii2"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "fromAscii2"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.fromAscii2) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.fromAscii2 != 0 {
      try visitor.visitSingularInt32Field(value: self.fromAscii2, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.fromAscii2, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.fromAscii2) -> Bool {
    if lhs.fromAscii2 != rhs.fromAscii2 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.fromAscii4: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".fromAscii4"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "fromAscii4"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.fromAscii4) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.fromAscii4 != 0 {
      try visitor.visitSingularInt32Field(value: self.fromAscii4, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.fromAscii4, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.fromAscii4) -> Bool {
    if lhs.fromAscii4 != rhs.fromAscii4 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.fromByteOffset: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".fromByteOffset"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "fromByteOffset"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.fromByteOffset) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.fromByteOffset != 0 {
      try visitor.visitSingularInt32Field(value: self.fromByteOffset, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.fromByteOffset, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.fromByteOffset) -> Bool {
    if lhs.fromByteOffset != rhs.fromByteOffset {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.fromHexDigit: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".fromHexDigit"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "fromHexDigit"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.fromHexDigit) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.fromHexDigit != 0 {
      try visitor.visitSingularInt32Field(value: self.fromHexDigit, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.fromHexDigit, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.fromHexDigit) -> Bool {
    if lhs.fromHexDigit != rhs.fromHexDigit {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.funcMessage: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".func"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "func"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.`func`) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.`func` != 0 {
      try visitor.visitSingularInt32Field(value: self.`func`, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.funcMessage, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.funcMessage) -> Bool {
    if lhs.`func` != rhs.`func` {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.G: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".G"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "G"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.g) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.g != 0 {
      try visitor.visitSingularInt32Field(value: self.g, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.G, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.G) -> Bool {
    if lhs.g != rhs.g {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.GeneratedCodeInfo: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".GeneratedCodeInfo"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "GeneratedCodeInfo"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.generatedCodeInfo) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.generatedCodeInfo != 0 {
      try visitor.visitSingularInt32Field(value: self.generatedCodeInfo, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.GeneratedCodeInfo, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.GeneratedCodeInfo) -> Bool {
    if lhs.generatedCodeInfo != rhs.generatedCodeInfo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.get: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".get"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "get"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.get) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.get != 0 {
      try visitor.visitSingularInt32Field(value: self.get, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.get, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.get) -> Bool {
    if lhs.get != rhs.get {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.getExtensionValue: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".getExtensionValue"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "getExtensionValue"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.getExtensionValue) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.getExtensionValue != 0 {
      try visitor.visitSingularInt32Field(value: self.getExtensionValue, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.getExtensionValue, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.getExtensionValue) -> Bool {
    if lhs.getExtensionValue != rhs.getExtensionValue {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.googleapis: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".googleapis"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "googleapis"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.googleapis) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.googleapis != 0 {
      try visitor.visitSingularInt32Field(value: self.googleapis, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.googleapis, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.googleapis) -> Bool {
    if lhs.googleapis != rhs.googleapis {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_Any: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".Google_Protobuf_Any"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .standard(proto: "Google_Protobuf_Any"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.googleProtobufAny) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.googleProtobufAny != 0 {
      try visitor.visitSingularInt32Field(value: self.googleProtobufAny, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_Any, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_Any) -> Bool {
    if lhs.googleProtobufAny != rhs.googleProtobufAny {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_Api: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".Google_Protobuf_Api"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .standard(proto: "Google_Protobuf_Api"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.googleProtobufApi) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.googleProtobufApi != 0 {
      try visitor.visitSingularInt32Field(value: self.googleProtobufApi, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_Api, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_Api) -> Bool {
    if lhs.googleProtobufApi != rhs.googleProtobufApi {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_BoolValue: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".Google_Protobuf_BoolValue"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .standard(proto: "Google_Protobuf_BoolValue"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.googleProtobufBoolValue) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.googleProtobufBoolValue != 0 {
      try visitor.visitSingularInt32Field(value: self.googleProtobufBoolValue, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_BoolValue, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_BoolValue) -> Bool {
    if lhs.googleProtobufBoolValue != rhs.googleProtobufBoolValue {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_BytesValue: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".Google_Protobuf_BytesValue"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .standard(proto: "Google_Protobuf_BytesValue"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.googleProtobufBytesValue) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.googleProtobufBytesValue != 0 {
      try visitor.visitSingularInt32Field(value: self.googleProtobufBytesValue, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_BytesValue, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_BytesValue) -> Bool {
    if lhs.googleProtobufBytesValue != rhs.googleProtobufBytesValue {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_DescriptorProto: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".Google_Protobuf_DescriptorProto"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .standard(proto: "Google_Protobuf_DescriptorProto"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.googleProtobufDescriptorProto) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.googleProtobufDescriptorProto != 0 {
      try visitor.visitSingularInt32Field(value: self.googleProtobufDescriptorProto, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_DescriptorProto, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_DescriptorProto) -> Bool {
    if lhs.googleProtobufDescriptorProto != rhs.googleProtobufDescriptorProto {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_DoubleValue: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".Google_Protobuf_DoubleValue"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .standard(proto: "Google_Protobuf_DoubleValue"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.googleProtobufDoubleValue) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.googleProtobufDoubleValue != 0 {
      try visitor.visitSingularInt32Field(value: self.googleProtobufDoubleValue, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_DoubleValue, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_DoubleValue) -> Bool {
    if lhs.googleProtobufDoubleValue != rhs.googleProtobufDoubleValue {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_Duration: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".Google_Protobuf_Duration"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .standard(proto: "Google_Protobuf_Duration"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.googleProtobufDuration) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.googleProtobufDuration != 0 {
      try visitor.visitSingularInt32Field(value: self.googleProtobufDuration, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_Duration, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_Duration) -> Bool {
    if lhs.googleProtobufDuration != rhs.googleProtobufDuration {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_Empty: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".Google_Protobuf_Empty"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .standard(proto: "Google_Protobuf_Empty"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.googleProtobufEmpty) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.googleProtobufEmpty != 0 {
      try visitor.visitSingularInt32Field(value: self.googleProtobufEmpty, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_Empty, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_Empty) -> Bool {
    if lhs.googleProtobufEmpty != rhs.googleProtobufEmpty {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_Enum: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".Google_Protobuf_Enum"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .standard(proto: "Google_Protobuf_Enum"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.googleProtobufEnum) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.googleProtobufEnum != 0 {
      try visitor.visitSingularInt32Field(value: self.googleProtobufEnum, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_Enum, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_Enum) -> Bool {
    if lhs.googleProtobufEnum != rhs.googleProtobufEnum {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_EnumDescriptorProto: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".Google_Protobuf_EnumDescriptorProto"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .standard(proto: "Google_Protobuf_EnumDescriptorProto"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.googleProtobufEnumDescriptorProto) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.googleProtobufEnumDescriptorProto != 0 {
      try visitor.visitSingularInt32Field(value: self.googleProtobufEnumDescriptorProto, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_EnumDescriptorProto, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_EnumDescriptorProto) -> Bool {
    if lhs.googleProtobufEnumDescriptorProto != rhs.googleProtobufEnumDescriptorProto {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_EnumOptions: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".Google_Protobuf_EnumOptions"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .standard(proto: "Google_Protobuf_EnumOptions"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.googleProtobufEnumOptions) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.googleProtobufEnumOptions != 0 {
      try visitor.visitSingularInt32Field(value: self.googleProtobufEnumOptions, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_EnumOptions, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_EnumOptions) -> Bool {
    if lhs.googleProtobufEnumOptions != rhs.googleProtobufEnumOptions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_EnumValue: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".Google_Protobuf_EnumValue"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .standard(proto: "Google_Protobuf_EnumValue"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.googleProtobufEnumValue) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.googleProtobufEnumValue != 0 {
      try visitor.visitSingularInt32Field(value: self.googleProtobufEnumValue, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_EnumValue, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_EnumValue) -> Bool {
    if lhs.googleProtobufEnumValue != rhs.googleProtobufEnumValue {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_EnumValueDescriptorProto: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".Google_Protobuf_EnumValueDescriptorProto"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .standard(proto: "Google_Protobuf_EnumValueDescriptorProto"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.googleProtobufEnumValueDescriptorProto) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.googleProtobufEnumValueDescriptorProto != 0 {
      try visitor.visitSingularInt32Field(value: self.googleProtobufEnumValueDescriptorProto, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_EnumValueDescriptorProto, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_EnumValueDescriptorProto) -> Bool {
    if lhs.googleProtobufEnumValueDescriptorProto != rhs.googleProtobufEnumValueDescriptorProto {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_EnumValueOptions: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".Google_Protobuf_EnumValueOptions"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .standard(proto: "Google_Protobuf_EnumValueOptions"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.googleProtobufEnumValueOptions) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.googleProtobufEnumValueOptions != 0 {
      try visitor.visitSingularInt32Field(value: self.googleProtobufEnumValueOptions, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_EnumValueOptions, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_EnumValueOptions) -> Bool {
    if lhs.googleProtobufEnumValueOptions != rhs.googleProtobufEnumValueOptions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_ExtensionRangeOptions: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".Google_Protobuf_ExtensionRangeOptions"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .standard(proto: "Google_Protobuf_ExtensionRangeOptions"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.googleProtobufExtensionRangeOptions) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.googleProtobufExtensionRangeOptions != 0 {
      try visitor.visitSingularInt32Field(value: self.googleProtobufExtensionRangeOptions, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_ExtensionRangeOptions, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_ExtensionRangeOptions) -> Bool {
    if lhs.googleProtobufExtensionRangeOptions != rhs.googleProtobufExtensionRangeOptions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_Field: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".Google_Protobuf_Field"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .standard(proto: "Google_Protobuf_Field"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.googleProtobufField) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.googleProtobufField != 0 {
      try visitor.visitSingularInt32Field(value: self.googleProtobufField, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_Field, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_Field) -> Bool {
    if lhs.googleProtobufField != rhs.googleProtobufField {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_FieldDescriptorProto: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".Google_Protobuf_FieldDescriptorProto"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .standard(proto: "Google_Protobuf_FieldDescriptorProto"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.googleProtobufFieldDescriptorProto) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.googleProtobufFieldDescriptorProto != 0 {
      try visitor.visitSingularInt32Field(value: self.googleProtobufFieldDescriptorProto, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_FieldDescriptorProto, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_FieldDescriptorProto) -> Bool {
    if lhs.googleProtobufFieldDescriptorProto != rhs.googleProtobufFieldDescriptorProto {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_FieldMask: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".Google_Protobuf_FieldMask"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .standard(proto: "Google_Protobuf_FieldMask"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.googleProtobufFieldMask) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.googleProtobufFieldMask != 0 {
      try visitor.visitSingularInt32Field(value: self.googleProtobufFieldMask, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_FieldMask, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_FieldMask) -> Bool {
    if lhs.googleProtobufFieldMask != rhs.googleProtobufFieldMask {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_FieldOptions: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".Google_Protobuf_FieldOptions"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .standard(proto: "Google_Protobuf_FieldOptions"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.googleProtobufFieldOptions) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.googleProtobufFieldOptions != 0 {
      try visitor.visitSingularInt32Field(value: self.googleProtobufFieldOptions, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_FieldOptions, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_FieldOptions) -> Bool {
    if lhs.googleProtobufFieldOptions != rhs.googleProtobufFieldOptions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_FileDescriptorProto: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".Google_Protobuf_FileDescriptorProto"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .standard(proto: "Google_Protobuf_FileDescriptorProto"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.googleProtobufFileDescriptorProto) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.googleProtobufFileDescriptorProto != 0 {
      try visitor.visitSingularInt32Field(value: self.googleProtobufFileDescriptorProto, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_FileDescriptorProto, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_FileDescriptorProto) -> Bool {
    if lhs.googleProtobufFileDescriptorProto != rhs.googleProtobufFileDescriptorProto {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_FileDescriptorSet: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".Google_Protobuf_FileDescriptorSet"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .standard(proto: "Google_Protobuf_FileDescriptorSet"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.googleProtobufFileDescriptorSet) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.googleProtobufFileDescriptorSet != 0 {
      try visitor.visitSingularInt32Field(value: self.googleProtobufFileDescriptorSet, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_FileDescriptorSet, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_FileDescriptorSet) -> Bool {
    if lhs.googleProtobufFileDescriptorSet != rhs.googleProtobufFileDescriptorSet {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_FileOptions: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".Google_Protobuf_FileOptions"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .standard(proto: "Google_Protobuf_FileOptions"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.googleProtobufFileOptions) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.googleProtobufFileOptions != 0 {
      try visitor.visitSingularInt32Field(value: self.googleProtobufFileOptions, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_FileOptions, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_FileOptions) -> Bool {
    if lhs.googleProtobufFileOptions != rhs.googleProtobufFileOptions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_FloatValue: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".Google_Protobuf_FloatValue"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .standard(proto: "Google_Protobuf_FloatValue"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.googleProtobufFloatValue) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.googleProtobufFloatValue != 0 {
      try visitor.visitSingularInt32Field(value: self.googleProtobufFloatValue, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_FloatValue, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_FloatValue) -> Bool {
    if lhs.googleProtobufFloatValue != rhs.googleProtobufFloatValue {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_GeneratedCodeInfo: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".Google_Protobuf_GeneratedCodeInfo"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .standard(proto: "Google_Protobuf_GeneratedCodeInfo"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.googleProtobufGeneratedCodeInfo) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.googleProtobufGeneratedCodeInfo != 0 {
      try visitor.visitSingularInt32Field(value: self.googleProtobufGeneratedCodeInfo, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_GeneratedCodeInfo, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_GeneratedCodeInfo) -> Bool {
    if lhs.googleProtobufGeneratedCodeInfo != rhs.googleProtobufGeneratedCodeInfo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_Int32Value: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".Google_Protobuf_Int32Value"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .standard(proto: "Google_Protobuf_Int32Value"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.googleProtobufInt32Value) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.googleProtobufInt32Value != 0 {
      try visitor.visitSingularInt32Field(value: self.googleProtobufInt32Value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_Int32Value, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_Int32Value) -> Bool {
    if lhs.googleProtobufInt32Value != rhs.googleProtobufInt32Value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_Int64Value: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".Google_Protobuf_Int64Value"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .standard(proto: "Google_Protobuf_Int64Value"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.googleProtobufInt64Value) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.googleProtobufInt64Value != 0 {
      try visitor.visitSingularInt32Field(value: self.googleProtobufInt64Value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_Int64Value, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_Int64Value) -> Bool {
    if lhs.googleProtobufInt64Value != rhs.googleProtobufInt64Value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_ListValue: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".Google_Protobuf_ListValue"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .standard(proto: "Google_Protobuf_ListValue"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.googleProtobufListValue) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.googleProtobufListValue != 0 {
      try visitor.visitSingularInt32Field(value: self.googleProtobufListValue, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_ListValue, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_ListValue) -> Bool {
    if lhs.googleProtobufListValue != rhs.googleProtobufListValue {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_MessageOptions: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".Google_Protobuf_MessageOptions"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .standard(proto: "Google_Protobuf_MessageOptions"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.googleProtobufMessageOptions) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.googleProtobufMessageOptions != 0 {
      try visitor.visitSingularInt32Field(value: self.googleProtobufMessageOptions, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_MessageOptions, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_MessageOptions) -> Bool {
    if lhs.googleProtobufMessageOptions != rhs.googleProtobufMessageOptions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_Method: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".Google_Protobuf_Method"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .standard(proto: "Google_Protobuf_Method"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.googleProtobufMethod) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.googleProtobufMethod != 0 {
      try visitor.visitSingularInt32Field(value: self.googleProtobufMethod, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_Method, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_Method) -> Bool {
    if lhs.googleProtobufMethod != rhs.googleProtobufMethod {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_MethodDescriptorProto: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".Google_Protobuf_MethodDescriptorProto"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .standard(proto: "Google_Protobuf_MethodDescriptorProto"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.googleProtobufMethodDescriptorProto) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.googleProtobufMethodDescriptorProto != 0 {
      try visitor.visitSingularInt32Field(value: self.googleProtobufMethodDescriptorProto, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_MethodDescriptorProto, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_MethodDescriptorProto) -> Bool {
    if lhs.googleProtobufMethodDescriptorProto != rhs.googleProtobufMethodDescriptorProto {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_MethodOptions: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".Google_Protobuf_MethodOptions"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .standard(proto: "Google_Protobuf_MethodOptions"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.googleProtobufMethodOptions) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.googleProtobufMethodOptions != 0 {
      try visitor.visitSingularInt32Field(value: self.googleProtobufMethodOptions, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_MethodOptions, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_MethodOptions) -> Bool {
    if lhs.googleProtobufMethodOptions != rhs.googleProtobufMethodOptions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_Mixin: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".Google_Protobuf_Mixin"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .standard(proto: "Google_Protobuf_Mixin"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.googleProtobufMixin) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.googleProtobufMixin != 0 {
      try visitor.visitSingularInt32Field(value: self.googleProtobufMixin, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_Mixin, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_Mixin) -> Bool {
    if lhs.googleProtobufMixin != rhs.googleProtobufMixin {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_NullValue: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".Google_Protobuf_NullValue"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .standard(proto: "Google_Protobuf_NullValue"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.googleProtobufNullValue) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.googleProtobufNullValue != 0 {
      try visitor.visitSingularInt32Field(value: self.googleProtobufNullValue, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_NullValue, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_NullValue) -> Bool {
    if lhs.googleProtobufNullValue != rhs.googleProtobufNullValue {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_OneofDescriptorProto: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".Google_Protobuf_OneofDescriptorProto"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .standard(proto: "Google_Protobuf_OneofDescriptorProto"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.googleProtobufOneofDescriptorProto) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.googleProtobufOneofDescriptorProto != 0 {
      try visitor.visitSingularInt32Field(value: self.googleProtobufOneofDescriptorProto, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_OneofDescriptorProto, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_OneofDescriptorProto) -> Bool {
    if lhs.googleProtobufOneofDescriptorProto != rhs.googleProtobufOneofDescriptorProto {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_OneofOptions: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".Google_Protobuf_OneofOptions"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .standard(proto: "Google_Protobuf_OneofOptions"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.googleProtobufOneofOptions) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.googleProtobufOneofOptions != 0 {
      try visitor.visitSingularInt32Field(value: self.googleProtobufOneofOptions, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_OneofOptions, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_OneofOptions) -> Bool {
    if lhs.googleProtobufOneofOptions != rhs.googleProtobufOneofOptions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_Option: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".Google_Protobuf_Option"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .standard(proto: "Google_Protobuf_Option"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.googleProtobufOption) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.googleProtobufOption != 0 {
      try visitor.visitSingularInt32Field(value: self.googleProtobufOption, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_Option, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_Option) -> Bool {
    if lhs.googleProtobufOption != rhs.googleProtobufOption {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_ServiceDescriptorProto: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".Google_Protobuf_ServiceDescriptorProto"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .standard(proto: "Google_Protobuf_ServiceDescriptorProto"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.googleProtobufServiceDescriptorProto) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.googleProtobufServiceDescriptorProto != 0 {
      try visitor.visitSingularInt32Field(value: self.googleProtobufServiceDescriptorProto, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_ServiceDescriptorProto, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_ServiceDescriptorProto) -> Bool {
    if lhs.googleProtobufServiceDescriptorProto != rhs.googleProtobufServiceDescriptorProto {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_ServiceOptions: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".Google_Protobuf_ServiceOptions"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .standard(proto: "Google_Protobuf_ServiceOptions"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.googleProtobufServiceOptions) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.googleProtobufServiceOptions != 0 {
      try visitor.visitSingularInt32Field(value: self.googleProtobufServiceOptions, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_ServiceOptions, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_ServiceOptions) -> Bool {
    if lhs.googleProtobufServiceOptions != rhs.googleProtobufServiceOptions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_SourceCodeInfo: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".Google_Protobuf_SourceCodeInfo"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .standard(proto: "Google_Protobuf_SourceCodeInfo"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.googleProtobufSourceCodeInfo) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.googleProtobufSourceCodeInfo != 0 {
      try visitor.visitSingularInt32Field(value: self.googleProtobufSourceCodeInfo, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_SourceCodeInfo, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_SourceCodeInfo) -> Bool {
    if lhs.googleProtobufSourceCodeInfo != rhs.googleProtobufSourceCodeInfo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_SourceContext: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".Google_Protobuf_SourceContext"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .standard(proto: "Google_Protobuf_SourceContext"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.googleProtobufSourceContext) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.googleProtobufSourceContext != 0 {
      try visitor.visitSingularInt32Field(value: self.googleProtobufSourceContext, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_SourceContext, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_SourceContext) -> Bool {
    if lhs.googleProtobufSourceContext != rhs.googleProtobufSourceContext {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_StringValue: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".Google_Protobuf_StringValue"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .standard(proto: "Google_Protobuf_StringValue"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.googleProtobufStringValue) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.googleProtobufStringValue != 0 {
      try visitor.visitSingularInt32Field(value: self.googleProtobufStringValue, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_StringValue, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_StringValue) -> Bool {
    if lhs.googleProtobufStringValue != rhs.googleProtobufStringValue {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_Struct: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".Google_Protobuf_Struct"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .standard(proto: "Google_Protobuf_Struct"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.googleProtobufStruct) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.googleProtobufStruct != 0 {
      try visitor.visitSingularInt32Field(value: self.googleProtobufStruct, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_Struct, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_Struct) -> Bool {
    if lhs.googleProtobufStruct != rhs.googleProtobufStruct {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_Syntax: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".Google_Protobuf_Syntax"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .standard(proto: "Google_Protobuf_Syntax"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.googleProtobufSyntax) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.googleProtobufSyntax != 0 {
      try visitor.visitSingularInt32Field(value: self.googleProtobufSyntax, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_Syntax, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_Syntax) -> Bool {
    if lhs.googleProtobufSyntax != rhs.googleProtobufSyntax {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_Timestamp: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".Google_Protobuf_Timestamp"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .standard(proto: "Google_Protobuf_Timestamp"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.googleProtobufTimestamp) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.googleProtobufTimestamp != 0 {
      try visitor.visitSingularInt32Field(value: self.googleProtobufTimestamp, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_Timestamp, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_Timestamp) -> Bool {
    if lhs.googleProtobufTimestamp != rhs.googleProtobufTimestamp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_Type: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".Google_Protobuf_Type"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .standard(proto: "Google_Protobuf_Type"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.googleProtobufType) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.googleProtobufType != 0 {
      try visitor.visitSingularInt32Field(value: self.googleProtobufType, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_Type, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_Type) -> Bool {
    if lhs.googleProtobufType != rhs.googleProtobufType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_UInt32Value: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".Google_Protobuf_UInt32Value"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .standard(proto: "Google_Protobuf_UInt32Value"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.googleProtobufUint32Value) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.googleProtobufUint32Value != 0 {
      try visitor.visitSingularInt32Field(value: self.googleProtobufUint32Value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_UInt32Value, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_UInt32Value) -> Bool {
    if lhs.googleProtobufUint32Value != rhs.googleProtobufUint32Value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_UInt64Value: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".Google_Protobuf_UInt64Value"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .standard(proto: "Google_Protobuf_UInt64Value"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.googleProtobufUint64Value) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.googleProtobufUint64Value != 0 {
      try visitor.visitSingularInt32Field(value: self.googleProtobufUint64Value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_UInt64Value, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_UInt64Value) -> Bool {
    if lhs.googleProtobufUint64Value != rhs.googleProtobufUint64Value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_UninterpretedOption: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".Google_Protobuf_UninterpretedOption"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .standard(proto: "Google_Protobuf_UninterpretedOption"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.googleProtobufUninterpretedOption) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.googleProtobufUninterpretedOption != 0 {
      try visitor.visitSingularInt32Field(value: self.googleProtobufUninterpretedOption, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_UninterpretedOption, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_UninterpretedOption) -> Bool {
    if lhs.googleProtobufUninterpretedOption != rhs.googleProtobufUninterpretedOption {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_Value: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".Google_Protobuf_Value"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .standard(proto: "Google_Protobuf_Value"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.googleProtobufValue) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.googleProtobufValue != 0 {
      try visitor.visitSingularInt32Field(value: self.googleProtobufValue, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_Value, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Google_Protobuf_Value) -> Bool {
    if lhs.googleProtobufValue != rhs.googleProtobufValue {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.goPackage: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".goPackage"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "goPackage"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.goPackage) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.goPackage != 0 {
      try visitor.visitSingularInt32Field(value: self.goPackage, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.goPackage, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.goPackage) -> Bool {
    if lhs.goPackage != rhs.goPackage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.group: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".group"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "group"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.group) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.group != 0 {
      try visitor.visitSingularInt32Field(value: self.group, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.group, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.group) -> Bool {
    if lhs.group != rhs.group {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.groupFieldNumberStack: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".groupFieldNumberStack"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "groupFieldNumberStack"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.groupFieldNumberStack) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.groupFieldNumberStack != 0 {
      try visitor.visitSingularInt32Field(value: self.groupFieldNumberStack, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.groupFieldNumberStack, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.groupFieldNumberStack) -> Bool {
    if lhs.groupFieldNumberStack != rhs.groupFieldNumberStack {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.groupSize: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".groupSize"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "groupSize"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.groupSize) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.groupSize != 0 {
      try visitor.visitSingularInt32Field(value: self.groupSize, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.groupSize, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.groupSize) -> Bool {
    if lhs.groupSize != rhs.groupSize {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hadOneofValue: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".hadOneofValue"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "hadOneofValue"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.hadOneofValue) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.hadOneofValue != 0 {
      try visitor.visitSingularInt32Field(value: self.hadOneofValue, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hadOneofValue, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hadOneofValue) -> Bool {
    if lhs.hadOneofValue != rhs.hadOneofValue {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.handleConflictingOneOf: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".handleConflictingOneOf"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "handleConflictingOneOf"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.handleConflictingOneOf) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.handleConflictingOneOf != 0 {
      try visitor.visitSingularInt32Field(value: self.handleConflictingOneOf, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.handleConflictingOneOf, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.handleConflictingOneOf) -> Bool {
    if lhs.handleConflictingOneOf != rhs.handleConflictingOneOf {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasAggregateValue: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".hasAggregateValue"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "hasAggregateValue"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.hasAggregateValue_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.hasAggregateValue_p != 0 {
      try visitor.visitSingularInt32Field(value: self.hasAggregateValue_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasAggregateValue, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasAggregateValue) -> Bool {
    if lhs.hasAggregateValue_p != rhs.hasAggregateValue_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasAllowAlias: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".hasAllowAlias"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "hasAllowAlias"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.hasAllowAlias_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.hasAllowAlias_p != 0 {
      try visitor.visitSingularInt32Field(value: self.hasAllowAlias_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasAllowAlias, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasAllowAlias) -> Bool {
    if lhs.hasAllowAlias_p != rhs.hasAllowAlias_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasBegin: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".hasBegin"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "hasBegin"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.hasBegin_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.hasBegin_p != 0 {
      try visitor.visitSingularInt32Field(value: self.hasBegin_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasBegin, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasBegin) -> Bool {
    if lhs.hasBegin_p != rhs.hasBegin_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasCcEnableArenas: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".hasCcEnableArenas"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "hasCcEnableArenas"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.hasCcEnableArenas_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.hasCcEnableArenas_p != 0 {
      try visitor.visitSingularInt32Field(value: self.hasCcEnableArenas_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasCcEnableArenas, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasCcEnableArenas) -> Bool {
    if lhs.hasCcEnableArenas_p != rhs.hasCcEnableArenas_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasCcGenericServices: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".hasCcGenericServices"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "hasCcGenericServices"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.hasCcGenericServices_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.hasCcGenericServices_p != 0 {
      try visitor.visitSingularInt32Field(value: self.hasCcGenericServices_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasCcGenericServices, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasCcGenericServices) -> Bool {
    if lhs.hasCcGenericServices_p != rhs.hasCcGenericServices_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasClientStreaming: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".hasClientStreaming"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "hasClientStreaming"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.hasClientStreaming_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.hasClientStreaming_p != 0 {
      try visitor.visitSingularInt32Field(value: self.hasClientStreaming_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasClientStreaming, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasClientStreaming) -> Bool {
    if lhs.hasClientStreaming_p != rhs.hasClientStreaming_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasCsharpNamespace: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".hasCsharpNamespace"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "hasCsharpNamespace"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.hasCsharpNamespace_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.hasCsharpNamespace_p != 0 {
      try visitor.visitSingularInt32Field(value: self.hasCsharpNamespace_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasCsharpNamespace, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasCsharpNamespace) -> Bool {
    if lhs.hasCsharpNamespace_p != rhs.hasCsharpNamespace_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasCtype: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".hasCtype"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "hasCtype"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.hasCtype_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.hasCtype_p != 0 {
      try visitor.visitSingularInt32Field(value: self.hasCtype_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasCtype, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasCtype) -> Bool {
    if lhs.hasCtype_p != rhs.hasCtype_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasDebugRedact: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".hasDebugRedact"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "hasDebugRedact"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.hasDebugRedact_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.hasDebugRedact_p != 0 {
      try visitor.visitSingularInt32Field(value: self.hasDebugRedact_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasDebugRedact, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasDebugRedact) -> Bool {
    if lhs.hasDebugRedact_p != rhs.hasDebugRedact_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasDefaultValue: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".hasDefaultValue"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "hasDefaultValue"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.hasDefaultValue_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.hasDefaultValue_p != 0 {
      try visitor.visitSingularInt32Field(value: self.hasDefaultValue_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasDefaultValue, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasDefaultValue) -> Bool {
    if lhs.hasDefaultValue_p != rhs.hasDefaultValue_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasDeprecated: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".hasDeprecated"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "hasDeprecated"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.hasDeprecated_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.hasDeprecated_p != 0 {
      try visitor.visitSingularInt32Field(value: self.hasDeprecated_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasDeprecated, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasDeprecated) -> Bool {
    if lhs.hasDeprecated_p != rhs.hasDeprecated_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasDeprecatedLegacyJsonFieldConflicts: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".hasDeprecatedLegacyJsonFieldConflicts"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "hasDeprecatedLegacyJsonFieldConflicts"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.hasDeprecatedLegacyJsonFieldConflicts_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.hasDeprecatedLegacyJsonFieldConflicts_p != 0 {
      try visitor.visitSingularInt32Field(value: self.hasDeprecatedLegacyJsonFieldConflicts_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasDeprecatedLegacyJsonFieldConflicts, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasDeprecatedLegacyJsonFieldConflicts) -> Bool {
    if lhs.hasDeprecatedLegacyJsonFieldConflicts_p != rhs.hasDeprecatedLegacyJsonFieldConflicts_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasDoubleValue: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".hasDoubleValue"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "hasDoubleValue"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.hasDoubleValue_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.hasDoubleValue_p != 0 {
      try visitor.visitSingularInt32Field(value: self.hasDoubleValue_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasDoubleValue, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasDoubleValue) -> Bool {
    if lhs.hasDoubleValue_p != rhs.hasDoubleValue_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasEdition: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".hasEdition"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "hasEdition"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.hasEdition_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.hasEdition_p != 0 {
      try visitor.visitSingularInt32Field(value: self.hasEdition_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasEdition, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasEdition) -> Bool {
    if lhs.hasEdition_p != rhs.hasEdition_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasEnd: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".hasEnd"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "hasEnd"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.hasEnd_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.hasEnd_p != 0 {
      try visitor.visitSingularInt32Field(value: self.hasEnd_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasEnd, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasEnd) -> Bool {
    if lhs.hasEnd_p != rhs.hasEnd_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasExtendee: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".hasExtendee"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "hasExtendee"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.hasExtendee_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.hasExtendee_p != 0 {
      try visitor.visitSingularInt32Field(value: self.hasExtendee_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasExtendee, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasExtendee) -> Bool {
    if lhs.hasExtendee_p != rhs.hasExtendee_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasExtensionValue: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".hasExtensionValue"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "hasExtensionValue"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.hasExtensionValue_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.hasExtensionValue_p != 0 {
      try visitor.visitSingularInt32Field(value: self.hasExtensionValue_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasExtensionValue, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasExtensionValue) -> Bool {
    if lhs.hasExtensionValue_p != rhs.hasExtensionValue_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasGoPackage: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".hasGoPackage"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "hasGoPackage"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.hasGoPackage_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.hasGoPackage_p != 0 {
      try visitor.visitSingularInt32Field(value: self.hasGoPackage_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasGoPackage, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasGoPackage) -> Bool {
    if lhs.hasGoPackage_p != rhs.hasGoPackage_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hash: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".hash"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "hash"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.hash) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.hash != 0 {
      try visitor.visitSingularInt32Field(value: self.hash, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hash, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hash) -> Bool {
    if lhs.hash != rhs.hash {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Hashable: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".Hashable"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "Hashable"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.hashable) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.hashable != 0 {
      try visitor.visitSingularInt32Field(value: self.hashable, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Hashable, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Hashable) -> Bool {
    if lhs.hashable != rhs.hashable {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasher: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".hasher"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "hasher"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.hasher) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.hasher != 0 {
      try visitor.visitSingularInt32Field(value: self.hasher, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasher, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasher) -> Bool {
    if lhs.hasher != rhs.hasher {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.HashVisitor: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".HashVisitor"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "HashVisitor"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.hashVisitor) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.hashVisitor != 0 {
      try visitor.visitSingularInt32Field(value: self.hashVisitor, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.HashVisitor, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.HashVisitor) -> Bool {
    if lhs.hashVisitor != rhs.hashVisitor {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasIdempotencyLevel: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".hasIdempotencyLevel"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "hasIdempotencyLevel"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.hasIdempotencyLevel_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.hasIdempotencyLevel_p != 0 {
      try visitor.visitSingularInt32Field(value: self.hasIdempotencyLevel_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasIdempotencyLevel, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasIdempotencyLevel) -> Bool {
    if lhs.hasIdempotencyLevel_p != rhs.hasIdempotencyLevel_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasIdentifierValue: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".hasIdentifierValue"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "hasIdentifierValue"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.hasIdentifierValue_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.hasIdentifierValue_p != 0 {
      try visitor.visitSingularInt32Field(value: self.hasIdentifierValue_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasIdentifierValue, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasIdentifierValue) -> Bool {
    if lhs.hasIdentifierValue_p != rhs.hasIdentifierValue_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasInputType: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".hasInputType"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "hasInputType"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.hasInputType_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.hasInputType_p != 0 {
      try visitor.visitSingularInt32Field(value: self.hasInputType_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasInputType, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasInputType) -> Bool {
    if lhs.hasInputType_p != rhs.hasInputType_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasIsExtension: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".hasIsExtension"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "hasIsExtension"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.hasIsExtension_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.hasIsExtension_p != 0 {
      try visitor.visitSingularInt32Field(value: self.hasIsExtension_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasIsExtension, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasIsExtension) -> Bool {
    if lhs.hasIsExtension_p != rhs.hasIsExtension_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasJavaGenerateEqualsAndHash: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".hasJavaGenerateEqualsAndHash"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "hasJavaGenerateEqualsAndHash"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.hasJavaGenerateEqualsAndHash_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.hasJavaGenerateEqualsAndHash_p != 0 {
      try visitor.visitSingularInt32Field(value: self.hasJavaGenerateEqualsAndHash_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasJavaGenerateEqualsAndHash, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasJavaGenerateEqualsAndHash) -> Bool {
    if lhs.hasJavaGenerateEqualsAndHash_p != rhs.hasJavaGenerateEqualsAndHash_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasJavaGenericServices: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".hasJavaGenericServices"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "hasJavaGenericServices"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.hasJavaGenericServices_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.hasJavaGenericServices_p != 0 {
      try visitor.visitSingularInt32Field(value: self.hasJavaGenericServices_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasJavaGenericServices, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasJavaGenericServices) -> Bool {
    if lhs.hasJavaGenericServices_p != rhs.hasJavaGenericServices_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasJavaMultipleFiles: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".hasJavaMultipleFiles"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "hasJavaMultipleFiles"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.hasJavaMultipleFiles_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.hasJavaMultipleFiles_p != 0 {
      try visitor.visitSingularInt32Field(value: self.hasJavaMultipleFiles_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasJavaMultipleFiles, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasJavaMultipleFiles) -> Bool {
    if lhs.hasJavaMultipleFiles_p != rhs.hasJavaMultipleFiles_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasJavaOuterClassname: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".hasJavaOuterClassname"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "hasJavaOuterClassname"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.hasJavaOuterClassname_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.hasJavaOuterClassname_p != 0 {
      try visitor.visitSingularInt32Field(value: self.hasJavaOuterClassname_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasJavaOuterClassname, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasJavaOuterClassname) -> Bool {
    if lhs.hasJavaOuterClassname_p != rhs.hasJavaOuterClassname_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasJavaPackage: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".hasJavaPackage"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "hasJavaPackage"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.hasJavaPackage_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.hasJavaPackage_p != 0 {
      try visitor.visitSingularInt32Field(value: self.hasJavaPackage_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasJavaPackage, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasJavaPackage) -> Bool {
    if lhs.hasJavaPackage_p != rhs.hasJavaPackage_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasJavaStringCheckUtf8: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".hasJavaStringCheckUtf8"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "hasJavaStringCheckUtf8"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.hasJavaStringCheckUtf8_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.hasJavaStringCheckUtf8_p != 0 {
      try visitor.visitSingularInt32Field(value: self.hasJavaStringCheckUtf8_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasJavaStringCheckUtf8, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasJavaStringCheckUtf8) -> Bool {
    if lhs.hasJavaStringCheckUtf8_p != rhs.hasJavaStringCheckUtf8_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasJsonName: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".hasJsonName"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "hasJsonName"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.hasJsonName_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.hasJsonName_p != 0 {
      try visitor.visitSingularInt32Field(value: self.hasJsonName_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasJsonName, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasJsonName) -> Bool {
    if lhs.hasJsonName_p != rhs.hasJsonName_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasJstype: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".hasJstype"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "hasJstype"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.hasJstype_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.hasJstype_p != 0 {
      try visitor.visitSingularInt32Field(value: self.hasJstype_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasJstype, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasJstype) -> Bool {
    if lhs.hasJstype_p != rhs.hasJstype_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasLabel: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".hasLabel"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "hasLabel"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.hasLabel_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.hasLabel_p != 0 {
      try visitor.visitSingularInt32Field(value: self.hasLabel_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasLabel, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasLabel) -> Bool {
    if lhs.hasLabel_p != rhs.hasLabel_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasLazy: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".hasLazy"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "hasLazy"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.hasLazy_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.hasLazy_p != 0 {
      try visitor.visitSingularInt32Field(value: self.hasLazy_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasLazy, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasLazy) -> Bool {
    if lhs.hasLazy_p != rhs.hasLazy_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasLeadingComments: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".hasLeadingComments"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "hasLeadingComments"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.hasLeadingComments_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.hasLeadingComments_p != 0 {
      try visitor.visitSingularInt32Field(value: self.hasLeadingComments_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasLeadingComments, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasLeadingComments) -> Bool {
    if lhs.hasLeadingComments_p != rhs.hasLeadingComments_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasMapEntry: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".hasMapEntry"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "hasMapEntry"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.hasMapEntry_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.hasMapEntry_p != 0 {
      try visitor.visitSingularInt32Field(value: self.hasMapEntry_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasMapEntry, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasMapEntry) -> Bool {
    if lhs.hasMapEntry_p != rhs.hasMapEntry_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasMessageSetWireFormat: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".hasMessageSetWireFormat"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "hasMessageSetWireFormat"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.hasMessageSetWireFormat_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.hasMessageSetWireFormat_p != 0 {
      try visitor.visitSingularInt32Field(value: self.hasMessageSetWireFormat_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasMessageSetWireFormat, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasMessageSetWireFormat) -> Bool {
    if lhs.hasMessageSetWireFormat_p != rhs.hasMessageSetWireFormat_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasName: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".hasName"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "hasName"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.hasName_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.hasName_p != 0 {
      try visitor.visitSingularInt32Field(value: self.hasName_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasName, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasName) -> Bool {
    if lhs.hasName_p != rhs.hasName_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasNamePart: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".hasNamePart"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "hasNamePart"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.hasNamePart_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.hasNamePart_p != 0 {
      try visitor.visitSingularInt32Field(value: self.hasNamePart_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasNamePart, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasNamePart) -> Bool {
    if lhs.hasNamePart_p != rhs.hasNamePart_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasNegativeIntValue: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".hasNegativeIntValue"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "hasNegativeIntValue"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.hasNegativeIntValue_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.hasNegativeIntValue_p != 0 {
      try visitor.visitSingularInt32Field(value: self.hasNegativeIntValue_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasNegativeIntValue, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasNegativeIntValue) -> Bool {
    if lhs.hasNegativeIntValue_p != rhs.hasNegativeIntValue_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasNoStandardDescriptorAccessor: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".hasNoStandardDescriptorAccessor"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "hasNoStandardDescriptorAccessor"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.hasNoStandardDescriptorAccessor_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.hasNoStandardDescriptorAccessor_p != 0 {
      try visitor.visitSingularInt32Field(value: self.hasNoStandardDescriptorAccessor_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasNoStandardDescriptorAccessor, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasNoStandardDescriptorAccessor) -> Bool {
    if lhs.hasNoStandardDescriptorAccessor_p != rhs.hasNoStandardDescriptorAccessor_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasNumber: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".hasNumber"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "hasNumber"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.hasNumber_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.hasNumber_p != 0 {
      try visitor.visitSingularInt32Field(value: self.hasNumber_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasNumber, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasNumber) -> Bool {
    if lhs.hasNumber_p != rhs.hasNumber_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasObjcClassPrefix: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".hasObjcClassPrefix"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "hasObjcClassPrefix"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.hasObjcClassPrefix_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.hasObjcClassPrefix_p != 0 {
      try visitor.visitSingularInt32Field(value: self.hasObjcClassPrefix_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasObjcClassPrefix, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasObjcClassPrefix) -> Bool {
    if lhs.hasObjcClassPrefix_p != rhs.hasObjcClassPrefix_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasOneofIndex: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".hasOneofIndex"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "hasOneofIndex"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.hasOneofIndex_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.hasOneofIndex_p != 0 {
      try visitor.visitSingularInt32Field(value: self.hasOneofIndex_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasOneofIndex, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasOneofIndex) -> Bool {
    if lhs.hasOneofIndex_p != rhs.hasOneofIndex_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasOptimizeFor: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".hasOptimizeFor"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "hasOptimizeFor"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.hasOptimizeFor_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.hasOptimizeFor_p != 0 {
      try visitor.visitSingularInt32Field(value: self.hasOptimizeFor_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasOptimizeFor, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasOptimizeFor) -> Bool {
    if lhs.hasOptimizeFor_p != rhs.hasOptimizeFor_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasOptions: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".hasOptions"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "hasOptions"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.hasOptions_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.hasOptions_p != 0 {
      try visitor.visitSingularInt32Field(value: self.hasOptions_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasOptions, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasOptions) -> Bool {
    if lhs.hasOptions_p != rhs.hasOptions_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasOutputType: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".hasOutputType"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "hasOutputType"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.hasOutputType_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.hasOutputType_p != 0 {
      try visitor.visitSingularInt32Field(value: self.hasOutputType_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasOutputType, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasOutputType) -> Bool {
    if lhs.hasOutputType_p != rhs.hasOutputType_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasPackage: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".hasPackage"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "hasPackage"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.hasPackage_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.hasPackage_p != 0 {
      try visitor.visitSingularInt32Field(value: self.hasPackage_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasPackage, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasPackage) -> Bool {
    if lhs.hasPackage_p != rhs.hasPackage_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasPacked: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".hasPacked"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "hasPacked"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.hasPacked_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.hasPacked_p != 0 {
      try visitor.visitSingularInt32Field(value: self.hasPacked_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasPacked, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasPacked) -> Bool {
    if lhs.hasPacked_p != rhs.hasPacked_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasPhpClassPrefix: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".hasPhpClassPrefix"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "hasPhpClassPrefix"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.hasPhpClassPrefix_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.hasPhpClassPrefix_p != 0 {
      try visitor.visitSingularInt32Field(value: self.hasPhpClassPrefix_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasPhpClassPrefix, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasPhpClassPrefix) -> Bool {
    if lhs.hasPhpClassPrefix_p != rhs.hasPhpClassPrefix_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasPhpGenericServices: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".hasPhpGenericServices"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "hasPhpGenericServices"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.hasPhpGenericServices_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.hasPhpGenericServices_p != 0 {
      try visitor.visitSingularInt32Field(value: self.hasPhpGenericServices_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasPhpGenericServices, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasPhpGenericServices) -> Bool {
    if lhs.hasPhpGenericServices_p != rhs.hasPhpGenericServices_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasPhpMetadataNamespace: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".hasPhpMetadataNamespace"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "hasPhpMetadataNamespace"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.hasPhpMetadataNamespace_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.hasPhpMetadataNamespace_p != 0 {
      try visitor.visitSingularInt32Field(value: self.hasPhpMetadataNamespace_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasPhpMetadataNamespace, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasPhpMetadataNamespace) -> Bool {
    if lhs.hasPhpMetadataNamespace_p != rhs.hasPhpMetadataNamespace_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasPhpNamespace: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".hasPhpNamespace"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "hasPhpNamespace"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.hasPhpNamespace_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.hasPhpNamespace_p != 0 {
      try visitor.visitSingularInt32Field(value: self.hasPhpNamespace_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasPhpNamespace, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasPhpNamespace) -> Bool {
    if lhs.hasPhpNamespace_p != rhs.hasPhpNamespace_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasPositiveIntValue: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".hasPositiveIntValue"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "hasPositiveIntValue"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.hasPositiveIntValue_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.hasPositiveIntValue_p != 0 {
      try visitor.visitSingularInt32Field(value: self.hasPositiveIntValue_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasPositiveIntValue, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasPositiveIntValue) -> Bool {
    if lhs.hasPositiveIntValue_p != rhs.hasPositiveIntValue_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasProto3Optional: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".hasProto3Optional"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "hasProto3Optional"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.hasProto3Optional_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.hasProto3Optional_p != 0 {
      try visitor.visitSingularInt32Field(value: self.hasProto3Optional_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasProto3Optional, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasProto3Optional) -> Bool {
    if lhs.hasProto3Optional_p != rhs.hasProto3Optional_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasPyGenericServices: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".hasPyGenericServices"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "hasPyGenericServices"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.hasPyGenericServices_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.hasPyGenericServices_p != 0 {
      try visitor.visitSingularInt32Field(value: self.hasPyGenericServices_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasPyGenericServices, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasPyGenericServices) -> Bool {
    if lhs.hasPyGenericServices_p != rhs.hasPyGenericServices_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasRetention: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".hasRetention"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "hasRetention"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.hasRetention_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.hasRetention_p != 0 {
      try visitor.visitSingularInt32Field(value: self.hasRetention_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasRetention, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasRetention) -> Bool {
    if lhs.hasRetention_p != rhs.hasRetention_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasRubyPackage: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".hasRubyPackage"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "hasRubyPackage"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.hasRubyPackage_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.hasRubyPackage_p != 0 {
      try visitor.visitSingularInt32Field(value: self.hasRubyPackage_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasRubyPackage, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasRubyPackage) -> Bool {
    if lhs.hasRubyPackage_p != rhs.hasRubyPackage_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasSemantic: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".hasSemantic"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "hasSemantic"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.hasSemantic_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.hasSemantic_p != 0 {
      try visitor.visitSingularInt32Field(value: self.hasSemantic_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasSemantic, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasSemantic) -> Bool {
    if lhs.hasSemantic_p != rhs.hasSemantic_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasServerStreaming: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".hasServerStreaming"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "hasServerStreaming"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.hasServerStreaming_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.hasServerStreaming_p != 0 {
      try visitor.visitSingularInt32Field(value: self.hasServerStreaming_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasServerStreaming, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasServerStreaming) -> Bool {
    if lhs.hasServerStreaming_p != rhs.hasServerStreaming_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasSourceCodeInfo: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".hasSourceCodeInfo"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "hasSourceCodeInfo"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.hasSourceCodeInfo_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.hasSourceCodeInfo_p != 0 {
      try visitor.visitSingularInt32Field(value: self.hasSourceCodeInfo_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasSourceCodeInfo, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasSourceCodeInfo) -> Bool {
    if lhs.hasSourceCodeInfo_p != rhs.hasSourceCodeInfo_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasSourceContext: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".hasSourceContext"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "hasSourceContext"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.hasSourceContext_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.hasSourceContext_p != 0 {
      try visitor.visitSingularInt32Field(value: self.hasSourceContext_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasSourceContext, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasSourceContext) -> Bool {
    if lhs.hasSourceContext_p != rhs.hasSourceContext_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasSourceFile: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".hasSourceFile"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "hasSourceFile"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.hasSourceFile_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.hasSourceFile_p != 0 {
      try visitor.visitSingularInt32Field(value: self.hasSourceFile_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasSourceFile, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasSourceFile) -> Bool {
    if lhs.hasSourceFile_p != rhs.hasSourceFile_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasStart: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".hasStart"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "hasStart"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.hasStart_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.hasStart_p != 0 {
      try visitor.visitSingularInt32Field(value: self.hasStart_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasStart, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasStart) -> Bool {
    if lhs.hasStart_p != rhs.hasStart_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasStringValue: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".hasStringValue"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "hasStringValue"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.hasStringValue_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.hasStringValue_p != 0 {
      try visitor.visitSingularInt32Field(value: self.hasStringValue_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasStringValue, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasStringValue) -> Bool {
    if lhs.hasStringValue_p != rhs.hasStringValue_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasSwiftPrefix: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".hasSwiftPrefix"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "hasSwiftPrefix"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.hasSwiftPrefix_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.hasSwiftPrefix_p != 0 {
      try visitor.visitSingularInt32Field(value: self.hasSwiftPrefix_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasSwiftPrefix, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasSwiftPrefix) -> Bool {
    if lhs.hasSwiftPrefix_p != rhs.hasSwiftPrefix_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasSyntax: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".hasSyntax"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "hasSyntax"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.hasSyntax_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.hasSyntax_p != 0 {
      try visitor.visitSingularInt32Field(value: self.hasSyntax_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasSyntax, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasSyntax) -> Bool {
    if lhs.hasSyntax_p != rhs.hasSyntax_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasTrailingComments: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".hasTrailingComments"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "hasTrailingComments"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.hasTrailingComments_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.hasTrailingComments_p != 0 {
      try visitor.visitSingularInt32Field(value: self.hasTrailingComments_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasTrailingComments, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasTrailingComments) -> Bool {
    if lhs.hasTrailingComments_p != rhs.hasTrailingComments_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasType: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".hasType"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "hasType"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.hasType_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.hasType_p != 0 {
      try visitor.visitSingularInt32Field(value: self.hasType_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasType, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasType) -> Bool {
    if lhs.hasType_p != rhs.hasType_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasTypeName: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".hasTypeName"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "hasTypeName"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.hasTypeName_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.hasTypeName_p != 0 {
      try visitor.visitSingularInt32Field(value: self.hasTypeName_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasTypeName, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasTypeName) -> Bool {
    if lhs.hasTypeName_p != rhs.hasTypeName_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasUnverifiedLazy: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".hasUnverifiedLazy"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "hasUnverifiedLazy"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.hasUnverifiedLazy_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.hasUnverifiedLazy_p != 0 {
      try visitor.visitSingularInt32Field(value: self.hasUnverifiedLazy_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasUnverifiedLazy, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasUnverifiedLazy) -> Bool {
    if lhs.hasUnverifiedLazy_p != rhs.hasUnverifiedLazy_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasValue: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".hasValue"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "hasValue"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.hasValue_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.hasValue_p != 0 {
      try visitor.visitSingularInt32Field(value: self.hasValue_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasValue, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasValue) -> Bool {
    if lhs.hasValue_p != rhs.hasValue_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasWeak: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".hasWeak"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "hasWeak"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.hasWeak_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.hasWeak_p != 0 {
      try visitor.visitSingularInt32Field(value: self.hasWeak_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasWeak, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hasWeak) -> Bool {
    if lhs.hasWeak_p != rhs.hasWeak_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hour: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".hour"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "hour"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.hour) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.hour != 0 {
      try visitor.visitSingularInt32Field(value: self.hour, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hour, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.hour) -> Bool {
    if lhs.hour != rhs.hour {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.i: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".i"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "i"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.i) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.i != 0 {
      try visitor.visitSingularInt32Field(value: self.i, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.i, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.i) -> Bool {
    if lhs.i != rhs.i {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.idempotencyLevel: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".idempotencyLevel"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "idempotencyLevel"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.idempotencyLevel) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.idempotencyLevel != 0 {
      try visitor.visitSingularInt32Field(value: self.idempotencyLevel, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.idempotencyLevel, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.idempotencyLevel) -> Bool {
    if lhs.idempotencyLevel != rhs.idempotencyLevel {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.identifierValue: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".identifierValue"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "identifierValue"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.identifierValue) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.identifierValue != 0 {
      try visitor.visitSingularInt32Field(value: self.identifierValue, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.identifierValue, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.identifierValue) -> Bool {
    if lhs.identifierValue != rhs.identifierValue {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ifMessage: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".if"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "if"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.`if`) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.`if` != 0 {
      try visitor.visitSingularInt32Field(value: self.`if`, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ifMessage, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ifMessage) -> Bool {
    if lhs.`if` != rhs.`if` {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ignoreUnknownFields: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".ignoreUnknownFields"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "ignoreUnknownFields"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.ignoreUnknownFields) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.ignoreUnknownFields != 0 {
      try visitor.visitSingularInt32Field(value: self.ignoreUnknownFields, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ignoreUnknownFields, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ignoreUnknownFields) -> Bool {
    if lhs.ignoreUnknownFields != rhs.ignoreUnknownFields {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.index: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".index"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "index"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.index) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.index != 0 {
      try visitor.visitSingularInt32Field(value: self.index, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.index, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.index) -> Bool {
    if lhs.index != rhs.index {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.initMessage: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".init"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "init"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.init_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.init_p != 0 {
      try visitor.visitSingularInt32Field(value: self.init_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.initMessage, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.initMessage) -> Bool {
    if lhs.init_p != rhs.init_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.inoutMessage: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".inout"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "inout"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.`inout`) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.`inout` != 0 {
      try visitor.visitSingularInt32Field(value: self.`inout`, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.inoutMessage, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.inoutMessage) -> Bool {
    if lhs.`inout` != rhs.`inout` {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.inputType: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".inputType"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "inputType"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.inputType) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.inputType != 0 {
      try visitor.visitSingularInt32Field(value: self.inputType, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.inputType, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.inputType) -> Bool {
    if lhs.inputType != rhs.inputType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.insert: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".insert"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "insert"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.insert) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.insert != 0 {
      try visitor.visitSingularInt32Field(value: self.insert, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.insert, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.insert) -> Bool {
    if lhs.insert != rhs.insert {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.IntMessage: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".Int"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "Int"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.int) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.int != 0 {
      try visitor.visitSingularInt32Field(value: self.int, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.IntMessage, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.IntMessage) -> Bool {
    if lhs.int != rhs.int {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Int32Message: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".Int32"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "Int32"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.int32) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.int32 != 0 {
      try visitor.visitSingularInt32Field(value: self.int32, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Int32Message, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Int32Message) -> Bool {
    if lhs.int32 != rhs.int32 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Int32Value: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".Int32Value"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "Int32Value"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.int32Value) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.int32Value != 0 {
      try visitor.visitSingularInt32Field(value: self.int32Value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Int32Value, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Int32Value) -> Bool {
    if lhs.int32Value != rhs.int32Value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Int64Message: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".Int64"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "Int64"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.int64) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.int64 != 0 {
      try visitor.visitSingularInt32Field(value: self.int64, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Int64Message, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Int64Message) -> Bool {
    if lhs.int64 != rhs.int64 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Int64Value: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".Int64Value"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "Int64Value"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.int64Value) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.int64Value != 0 {
      try visitor.visitSingularInt32Field(value: self.int64Value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Int64Value, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Int64Value) -> Bool {
    if lhs.int64Value != rhs.int64Value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Int8: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".Int8"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "Int8"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.int8) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.int8 != 0 {
      try visitor.visitSingularInt32Field(value: self.int8, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Int8, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Int8) -> Bool {
    if lhs.int8 != rhs.int8 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.integerLiteral: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".integerLiteral"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "integerLiteral"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.integerLiteral) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.integerLiteral != 0 {
      try visitor.visitSingularInt32Field(value: self.integerLiteral, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.integerLiteral, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.integerLiteral) -> Bool {
    if lhs.integerLiteral != rhs.integerLiteral {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.IntegerLiteralType: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".IntegerLiteralType"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "IntegerLiteralType"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.integerLiteralType) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.integerLiteralType != 0 {
      try visitor.visitSingularInt32Field(value: self.integerLiteralType, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.IntegerLiteralType, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.IntegerLiteralType) -> Bool {
    if lhs.integerLiteralType != rhs.integerLiteralType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.intern: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".intern"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "intern"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.intern) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.intern != 0 {
      try visitor.visitSingularInt32Field(value: self.intern, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.intern, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.intern) -> Bool {
    if lhs.intern != rhs.intern {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Internal: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".Internal"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "Internal"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.`internal`) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.`internal` != 0 {
      try visitor.visitSingularInt32Field(value: self.`internal`, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Internal, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Internal) -> Bool {
    if lhs.`internal` != rhs.`internal` {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.InternalState: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".InternalState"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "InternalState"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.internalState) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.internalState != 0 {
      try visitor.visitSingularInt32Field(value: self.internalState, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.InternalState, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.InternalState) -> Bool {
    if lhs.internalState != rhs.internalState {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.into: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".into"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "into"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.into) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.into != 0 {
      try visitor.visitSingularInt32Field(value: self.into, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.into, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.into) -> Bool {
    if lhs.into != rhs.into {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ints: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".ints"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "ints"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.ints) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.ints != 0 {
      try visitor.visitSingularInt32Field(value: self.ints, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ints, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ints) -> Bool {
    if lhs.ints != rhs.ints {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.isA: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".isA"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "isA"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.isA) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.isA != 0 {
      try visitor.visitSingularInt32Field(value: self.isA, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.isA, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.isA) -> Bool {
    if lhs.isA != rhs.isA {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.isEqual: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".isEqual"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "isEqual"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.isEqual) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.isEqual != 0 {
      try visitor.visitSingularInt32Field(value: self.isEqual, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.isEqual, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.isEqual) -> Bool {
    if lhs.isEqual != rhs.isEqual {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.isEqualTo: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".isEqualTo"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "isEqualTo"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.isEqualTo) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.isEqualTo != 0 {
      try visitor.visitSingularInt32Field(value: self.isEqualTo, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.isEqualTo, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.isEqualTo) -> Bool {
    if lhs.isEqualTo != rhs.isEqualTo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.isExtension: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".isExtension"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "isExtension"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.isExtension) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.isExtension != 0 {
      try visitor.visitSingularInt32Field(value: self.isExtension, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.isExtension, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.isExtension) -> Bool {
    if lhs.isExtension != rhs.isExtension {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.isInitializedMessage: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".isInitialized"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "isInitialized"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.isInitialized_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.isInitialized_p != 0 {
      try visitor.visitSingularInt32Field(value: self.isInitialized_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.isInitializedMessage, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.isInitializedMessage) -> Bool {
    if lhs.isInitialized_p != rhs.isInitialized_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.isNegative: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".isNegative"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "isNegative"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.isNegative) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.isNegative != 0 {
      try visitor.visitSingularInt32Field(value: self.isNegative, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.isNegative, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.isNegative) -> Bool {
    if lhs.isNegative != rhs.isNegative {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.itemTagsEncodedSize: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".itemTagsEncodedSize"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "itemTagsEncodedSize"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.itemTagsEncodedSize) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.itemTagsEncodedSize != 0 {
      try visitor.visitSingularInt32Field(value: self.itemTagsEncodedSize, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.itemTagsEncodedSize, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.itemTagsEncodedSize) -> Bool {
    if lhs.itemTagsEncodedSize != rhs.itemTagsEncodedSize {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Iterator: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".Iterator"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "Iterator"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.iterator) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.iterator != 0 {
      try visitor.visitSingularInt32Field(value: self.iterator, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Iterator, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Iterator) -> Bool {
    if lhs.iterator != rhs.iterator {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.javaGenerateEqualsAndHash: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".javaGenerateEqualsAndHash"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "javaGenerateEqualsAndHash"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.javaGenerateEqualsAndHash) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.javaGenerateEqualsAndHash != 0 {
      try visitor.visitSingularInt32Field(value: self.javaGenerateEqualsAndHash, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.javaGenerateEqualsAndHash, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.javaGenerateEqualsAndHash) -> Bool {
    if lhs.javaGenerateEqualsAndHash != rhs.javaGenerateEqualsAndHash {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.javaGenericServices: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".javaGenericServices"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "javaGenericServices"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.javaGenericServices) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.javaGenericServices != 0 {
      try visitor.visitSingularInt32Field(value: self.javaGenericServices, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.javaGenericServices, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.javaGenericServices) -> Bool {
    if lhs.javaGenericServices != rhs.javaGenericServices {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.javaMultipleFiles: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".javaMultipleFiles"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "javaMultipleFiles"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.javaMultipleFiles) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.javaMultipleFiles != 0 {
      try visitor.visitSingularInt32Field(value: self.javaMultipleFiles, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.javaMultipleFiles, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.javaMultipleFiles) -> Bool {
    if lhs.javaMultipleFiles != rhs.javaMultipleFiles {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.javaOuterClassname: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".javaOuterClassname"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "javaOuterClassname"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.javaOuterClassname) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.javaOuterClassname != 0 {
      try visitor.visitSingularInt32Field(value: self.javaOuterClassname, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.javaOuterClassname, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.javaOuterClassname) -> Bool {
    if lhs.javaOuterClassname != rhs.javaOuterClassname {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.javaPackage: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".javaPackage"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "javaPackage"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.javaPackage) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.javaPackage != 0 {
      try visitor.visitSingularInt32Field(value: self.javaPackage, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.javaPackage, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.javaPackage) -> Bool {
    if lhs.javaPackage != rhs.javaPackage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.javaStringCheckUtf8: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".javaStringCheckUtf8"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "javaStringCheckUtf8"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.javaStringCheckUtf8) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.javaStringCheckUtf8 != 0 {
      try visitor.visitSingularInt32Field(value: self.javaStringCheckUtf8, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.javaStringCheckUtf8, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.javaStringCheckUtf8) -> Bool {
    if lhs.javaStringCheckUtf8 != rhs.javaStringCheckUtf8 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.JSONDecoder: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".JSONDecoder"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "JSONDecoder"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.jsondecoder) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.jsondecoder != 0 {
      try visitor.visitSingularInt32Field(value: self.jsondecoder, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.JSONDecoder, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.JSONDecoder) -> Bool {
    if lhs.jsondecoder != rhs.jsondecoder {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.JSONDecodingError: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".JSONDecodingError"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "JSONDecodingError"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.jsondecodingError) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.jsondecodingError != 0 {
      try visitor.visitSingularInt32Field(value: self.jsondecodingError, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.JSONDecodingError, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.JSONDecodingError) -> Bool {
    if lhs.jsondecodingError != rhs.jsondecodingError {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.JSONDecodingOptions: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".JSONDecodingOptions"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "JSONDecodingOptions"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.jsondecodingOptions) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.jsondecodingOptions != 0 {
      try visitor.visitSingularInt32Field(value: self.jsondecodingOptions, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.JSONDecodingOptions, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.JSONDecodingOptions) -> Bool {
    if lhs.jsondecodingOptions != rhs.jsondecodingOptions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.jsonEncoder: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".jsonEncoder"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "jsonEncoder"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.jsonEncoder) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.jsonEncoder != 0 {
      try visitor.visitSingularInt32Field(value: self.jsonEncoder, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.jsonEncoder, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.jsonEncoder) -> Bool {
    if lhs.jsonEncoder != rhs.jsonEncoder {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.JSONEncodingError: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".JSONEncodingError"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "JSONEncodingError"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.jsonencodingError) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.jsonencodingError != 0 {
      try visitor.visitSingularInt32Field(value: self.jsonencodingError, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.JSONEncodingError, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.JSONEncodingError) -> Bool {
    if lhs.jsonencodingError != rhs.jsonencodingError {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.JSONEncodingOptions: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".JSONEncodingOptions"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "JSONEncodingOptions"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.jsonencodingOptions) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.jsonencodingOptions != 0 {
      try visitor.visitSingularInt32Field(value: self.jsonencodingOptions, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.JSONEncodingOptions, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.JSONEncodingOptions) -> Bool {
    if lhs.jsonencodingOptions != rhs.jsonencodingOptions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.JSONEncodingVisitor: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".JSONEncodingVisitor"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "JSONEncodingVisitor"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.jsonencodingVisitor) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.jsonencodingVisitor != 0 {
      try visitor.visitSingularInt32Field(value: self.jsonencodingVisitor, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.JSONEncodingVisitor, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.JSONEncodingVisitor) -> Bool {
    if lhs.jsonencodingVisitor != rhs.jsonencodingVisitor {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.JSONMapEncodingVisitor: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".JSONMapEncodingVisitor"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "JSONMapEncodingVisitor"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.jsonmapEncodingVisitor) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.jsonmapEncodingVisitor != 0 {
      try visitor.visitSingularInt32Field(value: self.jsonmapEncodingVisitor, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.JSONMapEncodingVisitor, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.JSONMapEncodingVisitor) -> Bool {
    if lhs.jsonmapEncodingVisitor != rhs.jsonmapEncodingVisitor {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.jsonName: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".jsonName"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "jsonName"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.jsonName) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.jsonName != 0 {
      try visitor.visitSingularInt32Field(value: self.jsonName, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.jsonName, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.jsonName) -> Bool {
    if lhs.jsonName != rhs.jsonName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.jsonPath: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".jsonPath"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "jsonPath"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.jsonPath) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.jsonPath != 0 {
      try visitor.visitSingularInt32Field(value: self.jsonPath, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.jsonPath, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.jsonPath) -> Bool {
    if lhs.jsonPath != rhs.jsonPath {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.jsonPaths: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".jsonPaths"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "jsonPaths"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.jsonPaths) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.jsonPaths != 0 {
      try visitor.visitSingularInt32Field(value: self.jsonPaths, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.jsonPaths, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.jsonPaths) -> Bool {
    if lhs.jsonPaths != rhs.jsonPaths {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.JSONScanner: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".JSONScanner"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "JSONScanner"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.jsonscanner) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.jsonscanner != 0 {
      try visitor.visitSingularInt32Field(value: self.jsonscanner, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.JSONScanner, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.JSONScanner) -> Bool {
    if lhs.jsonscanner != rhs.jsonscanner {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.jsonString: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".jsonString"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "jsonString"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.jsonString) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.jsonString != 0 {
      try visitor.visitSingularInt32Field(value: self.jsonString, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.jsonString, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.jsonString) -> Bool {
    if lhs.jsonString != rhs.jsonString {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.jsonText: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".jsonText"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "jsonText"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.jsonText) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.jsonText != 0 {
      try visitor.visitSingularInt32Field(value: self.jsonText, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.jsonText, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.jsonText) -> Bool {
    if lhs.jsonText != rhs.jsonText {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.jsonUTF8Data: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".jsonUTF8Data"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "jsonUTF8Data"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.jsonUtf8Data) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.jsonUtf8Data != 0 {
      try visitor.visitSingularInt32Field(value: self.jsonUtf8Data, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.jsonUTF8Data, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.jsonUTF8Data) -> Bool {
    if lhs.jsonUtf8Data != rhs.jsonUtf8Data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.jstype: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".jstype"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "jstype"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.jstype) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.jstype != 0 {
      try visitor.visitSingularInt32Field(value: self.jstype, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.jstype, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.jstype) -> Bool {
    if lhs.jstype != rhs.jstype {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.k: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".k"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "k"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.k) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.k != 0 {
      try visitor.visitSingularInt32Field(value: self.k, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.k, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.k) -> Bool {
    if lhs.k != rhs.k {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.kChunkSize: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".kChunkSize"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "kChunkSize"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.kChunkSize) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.kChunkSize != 0 {
      try visitor.visitSingularInt32Field(value: self.kChunkSize, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.kChunkSize, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.kChunkSize) -> Bool {
    if lhs.kChunkSize != rhs.kChunkSize {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Key: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".Key"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "Key"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.key) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.key != 0 {
      try visitor.visitSingularInt32Field(value: self.key, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Key, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Key) -> Bool {
    if lhs.key != rhs.key {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.keyField: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".keyField"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "keyField"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.keyField) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.keyField != 0 {
      try visitor.visitSingularInt32Field(value: self.keyField, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.keyField, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.keyField) -> Bool {
    if lhs.keyField != rhs.keyField {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.keyFieldOpt: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".keyFieldOpt"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "keyFieldOpt"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.keyFieldOpt) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.keyFieldOpt != 0 {
      try visitor.visitSingularInt32Field(value: self.keyFieldOpt, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.keyFieldOpt, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.keyFieldOpt) -> Bool {
    if lhs.keyFieldOpt != rhs.keyFieldOpt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.KeyType: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".KeyType"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "KeyType"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.keyType) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.keyType != 0 {
      try visitor.visitSingularInt32Field(value: self.keyType, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.KeyType, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.KeyType) -> Bool {
    if lhs.keyType != rhs.keyType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.kind: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".kind"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "kind"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.kind) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.kind != 0 {
      try visitor.visitSingularInt32Field(value: self.kind, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.kind, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.kind) -> Bool {
    if lhs.kind != rhs.kind {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.l: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".l"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "l"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.l) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.l != 0 {
      try visitor.visitSingularInt32Field(value: self.l, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.l, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.l) -> Bool {
    if lhs.l != rhs.l {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.label: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".label"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "label"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.label) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.label != 0 {
      try visitor.visitSingularInt32Field(value: self.label, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.label, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.label) -> Bool {
    if lhs.label != rhs.label {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.lazy: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".lazy"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "lazy"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.lazy) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.lazy != 0 {
      try visitor.visitSingularInt32Field(value: self.lazy, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.lazy, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.lazy) -> Bool {
    if lhs.lazy != rhs.lazy {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.leadingComments: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".leadingComments"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "leadingComments"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.leadingComments) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.leadingComments != 0 {
      try visitor.visitSingularInt32Field(value: self.leadingComments, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.leadingComments, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.leadingComments) -> Bool {
    if lhs.leadingComments != rhs.leadingComments {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.leadingDetachedComments: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".leadingDetachedComments"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "leadingDetachedComments"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.leadingDetachedComments) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.leadingDetachedComments != 0 {
      try visitor.visitSingularInt32Field(value: self.leadingDetachedComments, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.leadingDetachedComments, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.leadingDetachedComments) -> Bool {
    if lhs.leadingDetachedComments != rhs.leadingDetachedComments {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.length: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".length"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "length"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.length) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.length != 0 {
      try visitor.visitSingularInt32Field(value: self.length, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.length, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.length) -> Bool {
    if lhs.length != rhs.length {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.lessThan: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".lessThan"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "lessThan"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.lessThan) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.lessThan != 0 {
      try visitor.visitSingularInt32Field(value: self.lessThan, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.lessThan, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.lessThan) -> Bool {
    if lhs.lessThan != rhs.lessThan {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.letMessage: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".let"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "let"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.`let`) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.`let` != 0 {
      try visitor.visitSingularInt32Field(value: self.`let`, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.letMessage, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.letMessage) -> Bool {
    if lhs.`let` != rhs.`let` {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.lhs: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".lhs"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "lhs"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.lhs) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.lhs != 0 {
      try visitor.visitSingularInt32Field(value: self.lhs, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.lhs, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.lhs) -> Bool {
    if lhs.lhs != rhs.lhs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.list: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".list"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "list"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.list) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.list != 0 {
      try visitor.visitSingularInt32Field(value: self.list, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.list, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.list) -> Bool {
    if lhs.list != rhs.list {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.listOfMessages: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".listOfMessages"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "listOfMessages"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.listOfMessages) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.listOfMessages != 0 {
      try visitor.visitSingularInt32Field(value: self.listOfMessages, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.listOfMessages, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.listOfMessages) -> Bool {
    if lhs.listOfMessages != rhs.listOfMessages {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.listValue: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".listValue"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "listValue"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.listValue) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.listValue != 0 {
      try visitor.visitSingularInt32Field(value: self.listValue, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.listValue, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.listValue) -> Bool {
    if lhs.listValue != rhs.listValue {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.littleEndian: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".littleEndian"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "littleEndian"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.littleEndian) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.littleEndian != 0 {
      try visitor.visitSingularInt32Field(value: self.littleEndian, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.littleEndian, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.littleEndian) -> Bool {
    if lhs.littleEndian != rhs.littleEndian {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.littleEndianBytes: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".littleEndianBytes"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "littleEndianBytes"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.littleEndianBytes) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.littleEndianBytes != 0 {
      try visitor.visitSingularInt32Field(value: self.littleEndianBytes, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.littleEndianBytes, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.littleEndianBytes) -> Bool {
    if lhs.littleEndianBytes != rhs.littleEndianBytes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.load: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".load"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "load"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.load) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.load != 0 {
      try visitor.visitSingularInt32Field(value: self.load, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.load, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.load) -> Bool {
    if lhs.load != rhs.load {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.localHasher: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".localHasher"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "localHasher"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.localHasher) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.localHasher != 0 {
      try visitor.visitSingularInt32Field(value: self.localHasher, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.localHasher, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.localHasher) -> Bool {
    if lhs.localHasher != rhs.localHasher {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.location: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".location"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "location"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.location) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.location != 0 {
      try visitor.visitSingularInt32Field(value: self.location, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.location, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.location) -> Bool {
    if lhs.location != rhs.location {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.M: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".M"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "M"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.m) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.m != 0 {
      try visitor.visitSingularInt32Field(value: self.m, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.M, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.M) -> Bool {
    if lhs.m != rhs.m {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.major: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".major"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "major"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.major) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.major != 0 {
      try visitor.visitSingularInt32Field(value: self.major, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.major, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.major) -> Bool {
    if lhs.major != rhs.major {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.makeIterator: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".makeIterator"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "makeIterator"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.makeIterator) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.makeIterator != 0 {
      try visitor.visitSingularInt32Field(value: self.makeIterator, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.makeIterator, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.makeIterator) -> Bool {
    if lhs.makeIterator != rhs.makeIterator {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.mapEntry: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".mapEntry"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "mapEntry"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.mapEntry) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.mapEntry != 0 {
      try visitor.visitSingularInt32Field(value: self.mapEntry, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.mapEntry, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.mapEntry) -> Bool {
    if lhs.mapEntry != rhs.mapEntry {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.MapKeyType: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".MapKeyType"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "MapKeyType"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.mapKeyType) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.mapKeyType != 0 {
      try visitor.visitSingularInt32Field(value: self.mapKeyType, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.MapKeyType, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.MapKeyType) -> Bool {
    if lhs.mapKeyType != rhs.mapKeyType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.mapToMessages: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".mapToMessages"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "mapToMessages"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.mapToMessages) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.mapToMessages != 0 {
      try visitor.visitSingularInt32Field(value: self.mapToMessages, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.mapToMessages, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.mapToMessages) -> Bool {
    if lhs.mapToMessages != rhs.mapToMessages {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.MapValueType: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".MapValueType"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "MapValueType"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.mapValueType) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.mapValueType != 0 {
      try visitor.visitSingularInt32Field(value: self.mapValueType, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.MapValueType, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.MapValueType) -> Bool {
    if lhs.mapValueType != rhs.mapValueType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.mapVisitor: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".mapVisitor"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "mapVisitor"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.mapVisitor) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.mapVisitor != 0 {
      try visitor.visitSingularInt32Field(value: self.mapVisitor, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.mapVisitor, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.mapVisitor) -> Bool {
    if lhs.mapVisitor != rhs.mapVisitor {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.mdayStart: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".mdayStart"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "mdayStart"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.mdayStart) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.mdayStart != 0 {
      try visitor.visitSingularInt32Field(value: self.mdayStart, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.mdayStart, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.mdayStart) -> Bool {
    if lhs.mdayStart != rhs.mdayStart {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.merge: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".merge"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "merge"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.merge) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.merge != 0 {
      try visitor.visitSingularInt32Field(value: self.merge, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.merge, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.merge) -> Bool {
    if lhs.merge != rhs.merge {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.message: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".message"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "message"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.message) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.message != 0 {
      try visitor.visitSingularInt32Field(value: self.message, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.message, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.message) -> Bool {
    if lhs.message != rhs.message {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.MessageBase: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".MessageBase"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "MessageBase"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.messageBase) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.messageBase != 0 {
      try visitor.visitSingularInt32Field(value: self.messageBase, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.MessageBase, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.MessageBase) -> Bool {
    if lhs.messageBase != rhs.messageBase {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.messageDepthLimit: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".messageDepthLimit"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "messageDepthLimit"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.messageDepthLimit) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.messageDepthLimit != 0 {
      try visitor.visitSingularInt32Field(value: self.messageDepthLimit, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.messageDepthLimit, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.messageDepthLimit) -> Bool {
    if lhs.messageDepthLimit != rhs.messageDepthLimit {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.MessageExtension: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".MessageExtension"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "MessageExtension"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.messageExtension) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.messageExtension != 0 {
      try visitor.visitSingularInt32Field(value: self.messageExtension, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.MessageExtension, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.MessageExtension) -> Bool {
    if lhs.messageExtension != rhs.messageExtension {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.MessageImplementationBase: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".MessageImplementationBase"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "MessageImplementationBase"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.messageImplementationBase) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.messageImplementationBase != 0 {
      try visitor.visitSingularInt32Field(value: self.messageImplementationBase, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.MessageImplementationBase, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.MessageImplementationBase) -> Bool {
    if lhs.messageImplementationBase != rhs.messageImplementationBase {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.MessageOptions: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".MessageOptions"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "MessageOptions"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.messageOptions) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.messageOptions != 0 {
      try visitor.visitSingularInt32Field(value: self.messageOptions, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.MessageOptions, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.MessageOptions) -> Bool {
    if lhs.messageOptions != rhs.messageOptions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.MessageSet: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".MessageSet"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "MessageSet"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.messageSet) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.messageSet != 0 {
      try visitor.visitSingularInt32Field(value: self.messageSet, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.MessageSet, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.MessageSet) -> Bool {
    if lhs.messageSet != rhs.messageSet {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.messageSetWireFormat: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".messageSetWireFormat"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "messageSetWireFormat"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.messageSetWireFormat) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.messageSetWireFormat != 0 {
      try visitor.visitSingularInt32Field(value: self.messageSetWireFormat, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.messageSetWireFormat, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.messageSetWireFormat) -> Bool {
    if lhs.messageSetWireFormat != rhs.messageSetWireFormat {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.messageType: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".messageType"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "messageType"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.messageType) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.messageType != 0 {
      try visitor.visitSingularInt32Field(value: self.messageType, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.messageType, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.messageType) -> Bool {
    if lhs.messageType != rhs.messageType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Method: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".Method"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "Method"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.method) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.method != 0 {
      try visitor.visitSingularInt32Field(value: self.method, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Method, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Method) -> Bool {
    if lhs.method != rhs.method {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.MethodDescriptorProto: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".MethodDescriptorProto"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "MethodDescriptorProto"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.methodDescriptorProto) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.methodDescriptorProto != 0 {
      try visitor.visitSingularInt32Field(value: self.methodDescriptorProto, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.MethodDescriptorProto, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.MethodDescriptorProto) -> Bool {
    if lhs.methodDescriptorProto != rhs.methodDescriptorProto {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.MethodOptions: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".MethodOptions"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "MethodOptions"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.methodOptions) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.methodOptions != 0 {
      try visitor.visitSingularInt32Field(value: self.methodOptions, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.MethodOptions, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.MethodOptions) -> Bool {
    if lhs.methodOptions != rhs.methodOptions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.methods: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".methods"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "methods"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.methods) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.methods != 0 {
      try visitor.visitSingularInt32Field(value: self.methods, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.methods, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.methods) -> Bool {
    if lhs.methods != rhs.methods {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.min: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".min"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "min"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.min) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.min != 0 {
      try visitor.visitSingularInt32Field(value: self.min, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.min, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.min) -> Bool {
    if lhs.min != rhs.min {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.minor: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".minor"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "minor"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.minor) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.minor != 0 {
      try visitor.visitSingularInt32Field(value: self.minor, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.minor, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.minor) -> Bool {
    if lhs.minor != rhs.minor {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Mixin: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".Mixin"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "Mixin"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.mixin) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.mixin != 0 {
      try visitor.visitSingularInt32Field(value: self.mixin, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Mixin, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Mixin) -> Bool {
    if lhs.mixin != rhs.mixin {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.mixins: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".mixins"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "mixins"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.mixins) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.mixins != 0 {
      try visitor.visitSingularInt32Field(value: self.mixins, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.mixins, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.mixins) -> Bool {
    if lhs.mixins != rhs.mixins {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.modifier: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".modifier"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "modifier"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.modifier) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.modifier != 0 {
      try visitor.visitSingularInt32Field(value: self.modifier, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.modifier, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.modifier) -> Bool {
    if lhs.modifier != rhs.modifier {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.modify: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".modify"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "modify"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.modify) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.modify != 0 {
      try visitor.visitSingularInt32Field(value: self.modify, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.modify, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.modify) -> Bool {
    if lhs.modify != rhs.modify {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.month: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".month"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "month"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.month) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.month != 0 {
      try visitor.visitSingularInt32Field(value: self.month, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.month, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.month) -> Bool {
    if lhs.month != rhs.month {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.msgExtension: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".msgExtension"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "msgExtension"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.msgExtension) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.msgExtension != 0 {
      try visitor.visitSingularInt32Field(value: self.msgExtension, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.msgExtension, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.msgExtension) -> Bool {
    if lhs.msgExtension != rhs.msgExtension {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.mutating: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".mutating"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "mutating"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.mutating) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.mutating != 0 {
      try visitor.visitSingularInt32Field(value: self.mutating, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.mutating, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.mutating) -> Bool {
    if lhs.mutating != rhs.mutating {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.n: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".n"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "n"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.n) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.n != 0 {
      try visitor.visitSingularInt32Field(value: self.n, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.n, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.n) -> Bool {
    if lhs.n != rhs.n {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.name: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".name"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "name"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.name) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.name != 0 {
      try visitor.visitSingularInt32Field(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.name, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.name) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.NameDescription: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".NameDescription"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "NameDescription"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.nameDescription) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.nameDescription != 0 {
      try visitor.visitSingularInt32Field(value: self.nameDescription, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.NameDescription, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.NameDescription) -> Bool {
    if lhs.nameDescription != rhs.nameDescription {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.NameMap: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".NameMap"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "NameMap"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.nameMap) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.nameMap != 0 {
      try visitor.visitSingularInt32Field(value: self.nameMap, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.NameMap, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.NameMap) -> Bool {
    if lhs.nameMap != rhs.nameMap {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.NamePart: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".NamePart"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "NamePart"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.namePart) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.namePart != 0 {
      try visitor.visitSingularInt32Field(value: self.namePart, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.NamePart, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.NamePart) -> Bool {
    if lhs.namePart != rhs.namePart {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.names: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".names"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "names"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.names) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.names != 0 {
      try visitor.visitSingularInt32Field(value: self.names, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.names, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.names) -> Bool {
    if lhs.names != rhs.names {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.nanos: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".nanos"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "nanos"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.nanos) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.nanos != 0 {
      try visitor.visitSingularInt32Field(value: self.nanos, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.nanos, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.nanos) -> Bool {
    if lhs.nanos != rhs.nanos {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.nativeEndianBytes: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".nativeEndianBytes"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "nativeEndianBytes"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.nativeEndianBytes) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.nativeEndianBytes != 0 {
      try visitor.visitSingularInt32Field(value: self.nativeEndianBytes, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.nativeEndianBytes, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.nativeEndianBytes) -> Bool {
    if lhs.nativeEndianBytes != rhs.nativeEndianBytes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.negativeIntValue: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".negativeIntValue"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "negativeIntValue"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.negativeIntValue) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.negativeIntValue != 0 {
      try visitor.visitSingularInt32Field(value: self.negativeIntValue, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.negativeIntValue, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.negativeIntValue) -> Bool {
    if lhs.negativeIntValue != rhs.negativeIntValue {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.nestedType: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".nestedType"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "nestedType"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.nestedType) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.nestedType != 0 {
      try visitor.visitSingularInt32Field(value: self.nestedType, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.nestedType, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.nestedType) -> Bool {
    if lhs.nestedType != rhs.nestedType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.newL: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".newL"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "newL"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.newL) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.newL != 0 {
      try visitor.visitSingularInt32Field(value: self.newL, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.newL, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.newL) -> Bool {
    if lhs.newL != rhs.newL {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.newList: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".newList"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "newList"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.newList) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.newList != 0 {
      try visitor.visitSingularInt32Field(value: self.newList, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.newList, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.newList) -> Bool {
    if lhs.newList != rhs.newList {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.newValue: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".newValue"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "newValue"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.newValue) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.newValue != 0 {
      try visitor.visitSingularInt32Field(value: self.newValue, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.newValue, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.newValue) -> Bool {
    if lhs.newValue != rhs.newValue {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.nextByte: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".nextByte"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "nextByte"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.nextByte) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.nextByte != 0 {
      try visitor.visitSingularInt32Field(value: self.nextByte, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.nextByte, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.nextByte) -> Bool {
    if lhs.nextByte != rhs.nextByte {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.nextFieldNumber: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".nextFieldNumber"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "nextFieldNumber"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.nextFieldNumber) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.nextFieldNumber != 0 {
      try visitor.visitSingularInt32Field(value: self.nextFieldNumber, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.nextFieldNumber, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.nextFieldNumber) -> Bool {
    if lhs.nextFieldNumber != rhs.nextFieldNumber {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.nilMessage: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".nil"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "nil"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.`nil`) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.`nil` != 0 {
      try visitor.visitSingularInt32Field(value: self.`nil`, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.nilMessage, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.nilMessage) -> Bool {
    if lhs.`nil` != rhs.`nil` {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.nilLiteral: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".nilLiteral"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "nilLiteral"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.nilLiteral) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.nilLiteral != 0 {
      try visitor.visitSingularInt32Field(value: self.nilLiteral, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.nilLiteral, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.nilLiteral) -> Bool {
    if lhs.nilLiteral != rhs.nilLiteral {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.noStandardDescriptorAccessor: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".noStandardDescriptorAccessor"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "noStandardDescriptorAccessor"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.noStandardDescriptorAccessor) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.noStandardDescriptorAccessor != 0 {
      try visitor.visitSingularInt32Field(value: self.noStandardDescriptorAccessor, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.noStandardDescriptorAccessor, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.noStandardDescriptorAccessor) -> Bool {
    if lhs.noStandardDescriptorAccessor != rhs.noStandardDescriptorAccessor {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.nullValue: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".nullValue"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "nullValue"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.nullValue) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.nullValue != 0 {
      try visitor.visitSingularInt32Field(value: self.nullValue, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.nullValue, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.nullValue) -> Bool {
    if lhs.nullValue != rhs.nullValue {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.number: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".number"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "number"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.number) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.number != 0 {
      try visitor.visitSingularInt32Field(value: self.number, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.number, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.number) -> Bool {
    if lhs.number != rhs.number {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.numberValue: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".numberValue"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "numberValue"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.numberValue) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.numberValue != 0 {
      try visitor.visitSingularInt32Field(value: self.numberValue, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.numberValue, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.numberValue) -> Bool {
    if lhs.numberValue != rhs.numberValue {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.objcClassPrefix: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".objcClassPrefix"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "objcClassPrefix"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.objcClassPrefix) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.objcClassPrefix != 0 {
      try visitor.visitSingularInt32Field(value: self.objcClassPrefix, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.objcClassPrefix, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.objcClassPrefix) -> Bool {
    if lhs.objcClassPrefix != rhs.objcClassPrefix {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.of: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".of"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "of"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.of) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.of != 0 {
      try visitor.visitSingularInt32Field(value: self.of, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.of, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.of) -> Bool {
    if lhs.of != rhs.of {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.oneofDecl: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".oneofDecl"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "oneofDecl"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.oneofDecl) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.oneofDecl != 0 {
      try visitor.visitSingularInt32Field(value: self.oneofDecl, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.oneofDecl, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.oneofDecl) -> Bool {
    if lhs.oneofDecl != rhs.oneofDecl {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.OneofDescriptorProto: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".OneofDescriptorProto"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "OneofDescriptorProto"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.oneofDescriptorProto) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.oneofDescriptorProto != 0 {
      try visitor.visitSingularInt32Field(value: self.oneofDescriptorProto, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.OneofDescriptorProto, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.OneofDescriptorProto) -> Bool {
    if lhs.oneofDescriptorProto != rhs.oneofDescriptorProto {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.oneofIndex: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".oneofIndex"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "oneofIndex"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.oneofIndex) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.oneofIndex != 0 {
      try visitor.visitSingularInt32Field(value: self.oneofIndex, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.oneofIndex, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.oneofIndex) -> Bool {
    if lhs.oneofIndex != rhs.oneofIndex {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.OneofOptions: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".OneofOptions"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "OneofOptions"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.oneofOptions) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.oneofOptions != 0 {
      try visitor.visitSingularInt32Field(value: self.oneofOptions, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.OneofOptions, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.OneofOptions) -> Bool {
    if lhs.oneofOptions != rhs.oneofOptions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.oneofs: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".oneofs"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "oneofs"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.oneofs) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.oneofs != 0 {
      try visitor.visitSingularInt32Field(value: self.oneofs, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.oneofs, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.oneofs) -> Bool {
    if lhs.oneofs != rhs.oneofs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.OneOf_Kind: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".OneOf_Kind"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .standard(proto: "OneOf_Kind"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.oneOfKind) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.oneOfKind != 0 {
      try visitor.visitSingularInt32Field(value: self.oneOfKind, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.OneOf_Kind, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.OneOf_Kind) -> Bool {
    if lhs.oneOfKind != rhs.oneOfKind {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.optimizeFor: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".optimizeFor"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "optimizeFor"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.optimizeFor) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.optimizeFor != 0 {
      try visitor.visitSingularInt32Field(value: self.optimizeFor, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.optimizeFor, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.optimizeFor) -> Bool {
    if lhs.optimizeFor != rhs.optimizeFor {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.OptimizeMode: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".OptimizeMode"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "OptimizeMode"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.optimizeMode) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.optimizeMode != 0 {
      try visitor.visitSingularInt32Field(value: self.optimizeMode, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.OptimizeMode, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.OptimizeMode) -> Bool {
    if lhs.optimizeMode != rhs.optimizeMode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Option: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".Option"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "Option"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.option) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.option != 0 {
      try visitor.visitSingularInt32Field(value: self.option, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Option, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Option) -> Bool {
    if lhs.option != rhs.option {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.OptionalEnumExtensionField: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".OptionalEnumExtensionField"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "OptionalEnumExtensionField"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.optionalEnumExtensionField) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.optionalEnumExtensionField != 0 {
      try visitor.visitSingularInt32Field(value: self.optionalEnumExtensionField, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.OptionalEnumExtensionField, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.OptionalEnumExtensionField) -> Bool {
    if lhs.optionalEnumExtensionField != rhs.optionalEnumExtensionField {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.OptionalExtensionField: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".OptionalExtensionField"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "OptionalExtensionField"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.optionalExtensionField) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.optionalExtensionField != 0 {
      try visitor.visitSingularInt32Field(value: self.optionalExtensionField, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.OptionalExtensionField, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.OptionalExtensionField) -> Bool {
    if lhs.optionalExtensionField != rhs.optionalExtensionField {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.OptionalGroupExtensionField: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".OptionalGroupExtensionField"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "OptionalGroupExtensionField"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.optionalGroupExtensionField) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.optionalGroupExtensionField != 0 {
      try visitor.visitSingularInt32Field(value: self.optionalGroupExtensionField, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.OptionalGroupExtensionField, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.OptionalGroupExtensionField) -> Bool {
    if lhs.optionalGroupExtensionField != rhs.optionalGroupExtensionField {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.OptionalMessageExtensionField: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".OptionalMessageExtensionField"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "OptionalMessageExtensionField"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.optionalMessageExtensionField) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.optionalMessageExtensionField != 0 {
      try visitor.visitSingularInt32Field(value: self.optionalMessageExtensionField, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.OptionalMessageExtensionField, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.OptionalMessageExtensionField) -> Bool {
    if lhs.optionalMessageExtensionField != rhs.optionalMessageExtensionField {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.OptionRetention: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".OptionRetention"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "OptionRetention"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.optionRetention) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.optionRetention != 0 {
      try visitor.visitSingularInt32Field(value: self.optionRetention, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.OptionRetention, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.OptionRetention) -> Bool {
    if lhs.optionRetention != rhs.optionRetention {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.options: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".options"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "options"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.options) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.options != 0 {
      try visitor.visitSingularInt32Field(value: self.options, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.options, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.options) -> Bool {
    if lhs.options != rhs.options {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.OptionTargetType: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".OptionTargetType"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "OptionTargetType"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.optionTargetType) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.optionTargetType != 0 {
      try visitor.visitSingularInt32Field(value: self.optionTargetType, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.OptionTargetType, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.OptionTargetType) -> Bool {
    if lhs.optionTargetType != rhs.optionTargetType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.other: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".other"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "other"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.other) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.other != 0 {
      try visitor.visitSingularInt32Field(value: self.other, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.other, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.other) -> Bool {
    if lhs.other != rhs.other {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.others: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".others"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "others"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.others) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.others != 0 {
      try visitor.visitSingularInt32Field(value: self.others, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.others, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.others) -> Bool {
    if lhs.others != rhs.others {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.out: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".out"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "out"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.out) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.out != 0 {
      try visitor.visitSingularInt32Field(value: self.out, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.out, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.out) -> Bool {
    if lhs.out != rhs.out {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.outputType: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".outputType"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "outputType"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.outputType) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.outputType != 0 {
      try visitor.visitSingularInt32Field(value: self.outputType, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.outputType, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.outputType) -> Bool {
    if lhs.outputType != rhs.outputType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.p: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".p"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "p"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.p != 0 {
      try visitor.visitSingularInt32Field(value: self.p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.p, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.p) -> Bool {
    if lhs.p != rhs.p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.package: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".package"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "package"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.package) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.package != 0 {
      try visitor.visitSingularInt32Field(value: self.package, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.package, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.package) -> Bool {
    if lhs.package != rhs.package {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.packed: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".packed"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "packed"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.packed) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.packed != 0 {
      try visitor.visitSingularInt32Field(value: self.packed, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.packed, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.packed) -> Bool {
    if lhs.packed != rhs.packed {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.PackedEnumExtensionField: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".PackedEnumExtensionField"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "PackedEnumExtensionField"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.packedEnumExtensionField) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.packedEnumExtensionField != 0 {
      try visitor.visitSingularInt32Field(value: self.packedEnumExtensionField, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.PackedEnumExtensionField, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.PackedEnumExtensionField) -> Bool {
    if lhs.packedEnumExtensionField != rhs.packedEnumExtensionField {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.PackedExtensionField: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".PackedExtensionField"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "PackedExtensionField"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.packedExtensionField) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.packedExtensionField != 0 {
      try visitor.visitSingularInt32Field(value: self.packedExtensionField, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.PackedExtensionField, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.PackedExtensionField) -> Bool {
    if lhs.packedExtensionField != rhs.packedExtensionField {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.padding: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".padding"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "padding"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.padding) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.padding != 0 {
      try visitor.visitSingularInt32Field(value: self.padding, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.padding, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.padding) -> Bool {
    if lhs.padding != rhs.padding {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.parent: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".parent"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "parent"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.parent) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.parent != 0 {
      try visitor.visitSingularInt32Field(value: self.parent, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.parent, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.parent) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.parse: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".parse"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "parse"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.parse) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.parse != 0 {
      try visitor.visitSingularInt32Field(value: self.parse, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.parse, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.parse) -> Bool {
    if lhs.parse != rhs.parse {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.partial: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".partial"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "partial"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.partial) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.partial != 0 {
      try visitor.visitSingularInt32Field(value: self.partial, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.partial, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.partial) -> Bool {
    if lhs.partial != rhs.partial {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.path: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".path"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "path"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.path) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.path != 0 {
      try visitor.visitSingularInt32Field(value: self.path, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.path, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.path) -> Bool {
    if lhs.path != rhs.path {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.paths: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".paths"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "paths"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.paths) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.paths != 0 {
      try visitor.visitSingularInt32Field(value: self.paths, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.paths, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.paths) -> Bool {
    if lhs.paths != rhs.paths {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.payload: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".payload"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "payload"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.payload) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.payload != 0 {
      try visitor.visitSingularInt32Field(value: self.payload, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.payload, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.payload) -> Bool {
    if lhs.payload != rhs.payload {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.payloadSize: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".payloadSize"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "payloadSize"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.payloadSize) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.payloadSize != 0 {
      try visitor.visitSingularInt32Field(value: self.payloadSize, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.payloadSize, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.payloadSize) -> Bool {
    if lhs.payloadSize != rhs.payloadSize {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.phpClassPrefix: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".phpClassPrefix"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "phpClassPrefix"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.phpClassPrefix) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.phpClassPrefix != 0 {
      try visitor.visitSingularInt32Field(value: self.phpClassPrefix, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.phpClassPrefix, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.phpClassPrefix) -> Bool {
    if lhs.phpClassPrefix != rhs.phpClassPrefix {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.phpGenericServices: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".phpGenericServices"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "phpGenericServices"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.phpGenericServices) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.phpGenericServices != 0 {
      try visitor.visitSingularInt32Field(value: self.phpGenericServices, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.phpGenericServices, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.phpGenericServices) -> Bool {
    if lhs.phpGenericServices != rhs.phpGenericServices {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.phpMetadataNamespace: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".phpMetadataNamespace"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "phpMetadataNamespace"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.phpMetadataNamespace) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.phpMetadataNamespace != 0 {
      try visitor.visitSingularInt32Field(value: self.phpMetadataNamespace, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.phpMetadataNamespace, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.phpMetadataNamespace) -> Bool {
    if lhs.phpMetadataNamespace != rhs.phpMetadataNamespace {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.phpNamespace: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".phpNamespace"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "phpNamespace"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.phpNamespace) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.phpNamespace != 0 {
      try visitor.visitSingularInt32Field(value: self.phpNamespace, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.phpNamespace, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.phpNamespace) -> Bool {
    if lhs.phpNamespace != rhs.phpNamespace {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.pointer: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".pointer"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "pointer"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.pointer) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.pointer != 0 {
      try visitor.visitSingularInt32Field(value: self.pointer, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.pointer, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.pointer) -> Bool {
    if lhs.pointer != rhs.pointer {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.pos: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".pos"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "pos"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.pos) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.pos != 0 {
      try visitor.visitSingularInt32Field(value: self.pos, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.pos, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.pos) -> Bool {
    if lhs.pos != rhs.pos {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.positiveIntValue: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".positiveIntValue"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "positiveIntValue"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.positiveIntValue) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.positiveIntValue != 0 {
      try visitor.visitSingularInt32Field(value: self.positiveIntValue, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.positiveIntValue, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.positiveIntValue) -> Bool {
    if lhs.positiveIntValue != rhs.positiveIntValue {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.prefix: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".prefix"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "prefix"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.prefix) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.prefix != 0 {
      try visitor.visitSingularInt32Field(value: self.prefix, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.prefix, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.prefix) -> Bool {
    if lhs.prefix != rhs.prefix {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.preserveProtoFieldNames: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".preserveProtoFieldNames"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "preserveProtoFieldNames"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.preserveProtoFieldNames) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.preserveProtoFieldNames != 0 {
      try visitor.visitSingularInt32Field(value: self.preserveProtoFieldNames, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.preserveProtoFieldNames, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.preserveProtoFieldNames) -> Bool {
    if lhs.preserveProtoFieldNames != rhs.preserveProtoFieldNames {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.preTraverse: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".preTraverse"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "preTraverse"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.preTraverse) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.preTraverse != 0 {
      try visitor.visitSingularInt32Field(value: self.preTraverse, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.preTraverse, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.preTraverse) -> Bool {
    if lhs.preTraverse != rhs.preTraverse {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.printUnknownFields: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".printUnknownFields"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "printUnknownFields"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.printUnknownFields) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.printUnknownFields != 0 {
      try visitor.visitSingularInt32Field(value: self.printUnknownFields, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.printUnknownFields, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.printUnknownFields) -> Bool {
    if lhs.printUnknownFields != rhs.printUnknownFields {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.proto2: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".proto2"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "proto2"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.proto2) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.proto2 != 0 {
      try visitor.visitSingularInt32Field(value: self.proto2, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.proto2, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.proto2) -> Bool {
    if lhs.proto2 != rhs.proto2 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.proto3DefaultValue: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".proto3DefaultValue"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "proto3DefaultValue"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.proto3DefaultValue) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.proto3DefaultValue != 0 {
      try visitor.visitSingularInt32Field(value: self.proto3DefaultValue, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.proto3DefaultValue, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.proto3DefaultValue) -> Bool {
    if lhs.proto3DefaultValue != rhs.proto3DefaultValue {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.proto3Optional: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".proto3Optional"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "proto3Optional"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.proto3Optional) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.proto3Optional != 0 {
      try visitor.visitSingularInt32Field(value: self.proto3Optional, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.proto3Optional, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.proto3Optional) -> Bool {
    if lhs.proto3Optional != rhs.proto3Optional {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ProtobufAPIVersionCheck: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".ProtobufAPIVersionCheck"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "ProtobufAPIVersionCheck"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.protobufApiversionCheck) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.protobufApiversionCheck != 0 {
      try visitor.visitSingularInt32Field(value: self.protobufApiversionCheck, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ProtobufAPIVersionCheck, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ProtobufAPIVersionCheck) -> Bool {
    if lhs.protobufApiversionCheck != rhs.protobufApiversionCheck {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ProtobufAPIVersion_3: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".ProtobufAPIVersion_3"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .standard(proto: "ProtobufAPIVersion_3"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.protobufApiversion3) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.protobufApiversion3 != 0 {
      try visitor.visitSingularInt32Field(value: self.protobufApiversion3, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ProtobufAPIVersion_3, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ProtobufAPIVersion_3) -> Bool {
    if lhs.protobufApiversion3 != rhs.protobufApiversion3 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ProtobufBool: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".ProtobufBool"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "ProtobufBool"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.protobufBool) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.protobufBool != 0 {
      try visitor.visitSingularInt32Field(value: self.protobufBool, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ProtobufBool, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ProtobufBool) -> Bool {
    if lhs.protobufBool != rhs.protobufBool {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ProtobufBytes: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".ProtobufBytes"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "ProtobufBytes"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.protobufBytes) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.protobufBytes != 0 {
      try visitor.visitSingularInt32Field(value: self.protobufBytes, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ProtobufBytes, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ProtobufBytes) -> Bool {
    if lhs.protobufBytes != rhs.protobufBytes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ProtobufDouble: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".ProtobufDouble"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "ProtobufDouble"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.protobufDouble) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.protobufDouble != 0 {
      try visitor.visitSingularInt32Field(value: self.protobufDouble, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ProtobufDouble, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ProtobufDouble) -> Bool {
    if lhs.protobufDouble != rhs.protobufDouble {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ProtobufEnumMap: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".ProtobufEnumMap"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "ProtobufEnumMap"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.protobufEnumMap) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.protobufEnumMap != 0 {
      try visitor.visitSingularInt32Field(value: self.protobufEnumMap, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ProtobufEnumMap, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ProtobufEnumMap) -> Bool {
    if lhs.protobufEnumMap != rhs.protobufEnumMap {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protobufExtension: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".protobufExtension"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "protobufExtension"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.protobufExtension) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.protobufExtension != 0 {
      try visitor.visitSingularInt32Field(value: self.protobufExtension, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protobufExtension, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protobufExtension) -> Bool {
    if lhs.protobufExtension != rhs.protobufExtension {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ProtobufFixed32: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".ProtobufFixed32"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "ProtobufFixed32"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.protobufFixed32) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.protobufFixed32 != 0 {
      try visitor.visitSingularInt32Field(value: self.protobufFixed32, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ProtobufFixed32, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ProtobufFixed32) -> Bool {
    if lhs.protobufFixed32 != rhs.protobufFixed32 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ProtobufFixed64: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".ProtobufFixed64"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "ProtobufFixed64"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.protobufFixed64) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.protobufFixed64 != 0 {
      try visitor.visitSingularInt32Field(value: self.protobufFixed64, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ProtobufFixed64, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ProtobufFixed64) -> Bool {
    if lhs.protobufFixed64 != rhs.protobufFixed64 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ProtobufFloat: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".ProtobufFloat"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "ProtobufFloat"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.protobufFloat) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.protobufFloat != 0 {
      try visitor.visitSingularInt32Field(value: self.protobufFloat, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ProtobufFloat, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ProtobufFloat) -> Bool {
    if lhs.protobufFloat != rhs.protobufFloat {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ProtobufInt32: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".ProtobufInt32"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "ProtobufInt32"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.protobufInt32) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.protobufInt32 != 0 {
      try visitor.visitSingularInt32Field(value: self.protobufInt32, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ProtobufInt32, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ProtobufInt32) -> Bool {
    if lhs.protobufInt32 != rhs.protobufInt32 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ProtobufInt64: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".ProtobufInt64"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "ProtobufInt64"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.protobufInt64) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.protobufInt64 != 0 {
      try visitor.visitSingularInt32Field(value: self.protobufInt64, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ProtobufInt64, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ProtobufInt64) -> Bool {
    if lhs.protobufInt64 != rhs.protobufInt64 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ProtobufMap: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".ProtobufMap"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "ProtobufMap"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.protobufMap) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.protobufMap != 0 {
      try visitor.visitSingularInt32Field(value: self.protobufMap, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ProtobufMap, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ProtobufMap) -> Bool {
    if lhs.protobufMap != rhs.protobufMap {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ProtobufMessageMap: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".ProtobufMessageMap"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "ProtobufMessageMap"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.protobufMessageMap) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.protobufMessageMap != 0 {
      try visitor.visitSingularInt32Field(value: self.protobufMessageMap, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ProtobufMessageMap, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ProtobufMessageMap) -> Bool {
    if lhs.protobufMessageMap != rhs.protobufMessageMap {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ProtobufSFixed32: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".ProtobufSFixed32"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "ProtobufSFixed32"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.protobufSfixed32) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.protobufSfixed32 != 0 {
      try visitor.visitSingularInt32Field(value: self.protobufSfixed32, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ProtobufSFixed32, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ProtobufSFixed32) -> Bool {
    if lhs.protobufSfixed32 != rhs.protobufSfixed32 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ProtobufSFixed64: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".ProtobufSFixed64"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "ProtobufSFixed64"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.protobufSfixed64) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.protobufSfixed64 != 0 {
      try visitor.visitSingularInt32Field(value: self.protobufSfixed64, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ProtobufSFixed64, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ProtobufSFixed64) -> Bool {
    if lhs.protobufSfixed64 != rhs.protobufSfixed64 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ProtobufSInt32: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".ProtobufSInt32"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "ProtobufSInt32"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.protobufSint32) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.protobufSint32 != 0 {
      try visitor.visitSingularInt32Field(value: self.protobufSint32, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ProtobufSInt32, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ProtobufSInt32) -> Bool {
    if lhs.protobufSint32 != rhs.protobufSint32 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ProtobufSInt64: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".ProtobufSInt64"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "ProtobufSInt64"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.protobufSint64) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.protobufSint64 != 0 {
      try visitor.visitSingularInt32Field(value: self.protobufSint64, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ProtobufSInt64, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ProtobufSInt64) -> Bool {
    if lhs.protobufSint64 != rhs.protobufSint64 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ProtobufString: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".ProtobufString"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "ProtobufString"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.protobufString) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.protobufString != 0 {
      try visitor.visitSingularInt32Field(value: self.protobufString, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ProtobufString, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ProtobufString) -> Bool {
    if lhs.protobufString != rhs.protobufString {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ProtobufUInt32: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".ProtobufUInt32"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "ProtobufUInt32"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.protobufUint32) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.protobufUint32 != 0 {
      try visitor.visitSingularInt32Field(value: self.protobufUint32, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ProtobufUInt32, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ProtobufUInt32) -> Bool {
    if lhs.protobufUint32 != rhs.protobufUint32 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ProtobufUInt64: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".ProtobufUInt64"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "ProtobufUInt64"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.protobufUint64) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.protobufUint64 != 0 {
      try visitor.visitSingularInt32Field(value: self.protobufUint64, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ProtobufUInt64, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ProtobufUInt64) -> Bool {
    if lhs.protobufUint64 != rhs.protobufUint64 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protobuf_extensionFieldValues: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".protobuf_extensionFieldValues"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .standard(proto: "protobuf_extensionFieldValues"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.protobufExtensionFieldValues) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.protobufExtensionFieldValues != 0 {
      try visitor.visitSingularInt32Field(value: self.protobufExtensionFieldValues, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protobuf_extensionFieldValues, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protobuf_extensionFieldValues) -> Bool {
    if lhs.protobufExtensionFieldValues != rhs.protobufExtensionFieldValues {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protobuf_fieldNumber: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".protobuf_fieldNumber"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .standard(proto: "protobuf_fieldNumber"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.protobufFieldNumber) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.protobufFieldNumber != 0 {
      try visitor.visitSingularInt32Field(value: self.protobufFieldNumber, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protobuf_fieldNumber, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protobuf_fieldNumber) -> Bool {
    if lhs.protobufFieldNumber != rhs.protobufFieldNumber {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protobuf_generated_isEqualTo: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".protobuf_generated_isEqualTo"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .standard(proto: "protobuf_generated_isEqualTo"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.protobufGeneratedIsEqualTo) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.protobufGeneratedIsEqualTo != 0 {
      try visitor.visitSingularInt32Field(value: self.protobufGeneratedIsEqualTo, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protobuf_generated_isEqualTo, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protobuf_generated_isEqualTo) -> Bool {
    if lhs.protobufGeneratedIsEqualTo != rhs.protobufGeneratedIsEqualTo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protobuf_nameMap: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".protobuf_nameMap"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .standard(proto: "protobuf_nameMap"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.protobufNameMap) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.protobufNameMap != 0 {
      try visitor.visitSingularInt32Field(value: self.protobufNameMap, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protobuf_nameMap, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protobuf_nameMap) -> Bool {
    if lhs.protobufNameMap != rhs.protobufNameMap {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protobuf_newField: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".protobuf_newField"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .standard(proto: "protobuf_newField"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.protobufNewField) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.protobufNewField != 0 {
      try visitor.visitSingularInt32Field(value: self.protobufNewField, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protobuf_newField, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protobuf_newField) -> Bool {
    if lhs.protobufNewField != rhs.protobufNewField {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protobuf_package: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".protobuf_package"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .standard(proto: "protobuf_package"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.protobufPackage) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.protobufPackage != 0 {
      try visitor.visitSingularInt32Field(value: self.protobufPackage, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protobuf_package, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protobuf_package) -> Bool {
    if lhs.protobufPackage != rhs.protobufPackage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protocolMessage: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".protocol"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "protocol"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.`protocol`) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.`protocol` != 0 {
      try visitor.visitSingularInt32Field(value: self.`protocol`, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protocolMessage, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protocolMessage) -> Bool {
    if lhs.`protocol` != rhs.`protocol` {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoFieldName: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".protoFieldName"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "protoFieldName"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.protoFieldName) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.protoFieldName != 0 {
      try visitor.visitSingularInt32Field(value: self.protoFieldName, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoFieldName, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoFieldName) -> Bool {
    if lhs.protoFieldName != rhs.protoFieldName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageNameMessage: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".protoMessageName"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "protoMessageName"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.protoMessageName) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.protoMessageName != 0 {
      try visitor.visitSingularInt32Field(value: self.protoMessageName, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageNameMessage, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageNameMessage) -> Bool {
    if lhs.protoMessageName != rhs.protoMessageName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ProtoNameProviding: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".ProtoNameProviding"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "ProtoNameProviding"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.protoNameProviding) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.protoNameProviding != 0 {
      try visitor.visitSingularInt32Field(value: self.protoNameProviding, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ProtoNameProviding, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ProtoNameProviding) -> Bool {
    if lhs.protoNameProviding != rhs.protoNameProviding {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoPaths: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".protoPaths"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "protoPaths"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.protoPaths) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.protoPaths != 0 {
      try visitor.visitSingularInt32Field(value: self.protoPaths, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoPaths, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoPaths) -> Bool {
    if lhs.protoPaths != rhs.protoPaths {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ProtoSendable: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".ProtoSendable"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "ProtoSendable"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.protoSendable) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.protoSendable != 0 {
      try visitor.visitSingularInt32Field(value: self.protoSendable, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ProtoSendable, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ProtoSendable) -> Bool {
    if lhs.protoSendable != rhs.protoSendable {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.publicMessage: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".public"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "public"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.`public`) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.`public` != 0 {
      try visitor.visitSingularInt32Field(value: self.`public`, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.publicMessage, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.publicMessage) -> Bool {
    if lhs.`public` != rhs.`public` {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.publicDependency: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".publicDependency"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "publicDependency"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.publicDependency) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.publicDependency != 0 {
      try visitor.visitSingularInt32Field(value: self.publicDependency, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.publicDependency, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.publicDependency) -> Bool {
    if lhs.publicDependency != rhs.publicDependency {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.putBoolValue: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".putBoolValue"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "putBoolValue"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.putBoolValue) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.putBoolValue != 0 {
      try visitor.visitSingularInt32Field(value: self.putBoolValue, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.putBoolValue, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.putBoolValue) -> Bool {
    if lhs.putBoolValue != rhs.putBoolValue {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.putBytesValue: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".putBytesValue"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "putBytesValue"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.putBytesValue) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.putBytesValue != 0 {
      try visitor.visitSingularInt32Field(value: self.putBytesValue, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.putBytesValue, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.putBytesValue) -> Bool {
    if lhs.putBytesValue != rhs.putBytesValue {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.putDoubleValue: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".putDoubleValue"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "putDoubleValue"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.putDoubleValue) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.putDoubleValue != 0 {
      try visitor.visitSingularInt32Field(value: self.putDoubleValue, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.putDoubleValue, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.putDoubleValue) -> Bool {
    if lhs.putDoubleValue != rhs.putDoubleValue {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.putEnumValue: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".putEnumValue"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "putEnumValue"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.putEnumValue) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.putEnumValue != 0 {
      try visitor.visitSingularInt32Field(value: self.putEnumValue, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.putEnumValue, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.putEnumValue) -> Bool {
    if lhs.putEnumValue != rhs.putEnumValue {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.putFixedUInt32: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".putFixedUInt32"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "putFixedUInt32"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.putFixedUint32) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.putFixedUint32 != 0 {
      try visitor.visitSingularInt32Field(value: self.putFixedUint32, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.putFixedUInt32, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.putFixedUInt32) -> Bool {
    if lhs.putFixedUint32 != rhs.putFixedUint32 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.putFixedUInt64: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".putFixedUInt64"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "putFixedUInt64"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.putFixedUint64) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.putFixedUint64 != 0 {
      try visitor.visitSingularInt32Field(value: self.putFixedUint64, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.putFixedUInt64, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.putFixedUInt64) -> Bool {
    if lhs.putFixedUint64 != rhs.putFixedUint64 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.putFloatValue: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".putFloatValue"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "putFloatValue"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.putFloatValue) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.putFloatValue != 0 {
      try visitor.visitSingularInt32Field(value: self.putFloatValue, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.putFloatValue, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.putFloatValue) -> Bool {
    if lhs.putFloatValue != rhs.putFloatValue {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.putInt64: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".putInt64"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "putInt64"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.putInt64) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.putInt64 != 0 {
      try visitor.visitSingularInt32Field(value: self.putInt64, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.putInt64, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.putInt64) -> Bool {
    if lhs.putInt64 != rhs.putInt64 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.putStringValue: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".putStringValue"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "putStringValue"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.putStringValue) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.putStringValue != 0 {
      try visitor.visitSingularInt32Field(value: self.putStringValue, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.putStringValue, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.putStringValue) -> Bool {
    if lhs.putStringValue != rhs.putStringValue {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.putUInt64: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".putUInt64"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "putUInt64"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.putUint64) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.putUint64 != 0 {
      try visitor.visitSingularInt32Field(value: self.putUint64, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.putUInt64, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.putUInt64) -> Bool {
    if lhs.putUint64 != rhs.putUint64 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.putUInt64Hex: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".putUInt64Hex"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "putUInt64Hex"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.putUint64Hex) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.putUint64Hex != 0 {
      try visitor.visitSingularInt32Field(value: self.putUint64Hex, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.putUInt64Hex, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.putUInt64Hex) -> Bool {
    if lhs.putUint64Hex != rhs.putUint64Hex {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.putVarInt: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".putVarInt"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "putVarInt"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.putVarInt) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.putVarInt != 0 {
      try visitor.visitSingularInt32Field(value: self.putVarInt, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.putVarInt, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.putVarInt) -> Bool {
    if lhs.putVarInt != rhs.putVarInt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.putZigZagVarInt: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".putZigZagVarInt"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "putZigZagVarInt"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.putZigZagVarInt) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.putZigZagVarInt != 0 {
      try visitor.visitSingularInt32Field(value: self.putZigZagVarInt, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.putZigZagVarInt, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.putZigZagVarInt) -> Bool {
    if lhs.putZigZagVarInt != rhs.putZigZagVarInt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.pyGenericServices: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".pyGenericServices"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "pyGenericServices"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.pyGenericServices) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.pyGenericServices != 0 {
      try visitor.visitSingularInt32Field(value: self.pyGenericServices, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.pyGenericServices, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.pyGenericServices) -> Bool {
    if lhs.pyGenericServices != rhs.pyGenericServices {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.R: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".R"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "R"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.r) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.r != 0 {
      try visitor.visitSingularInt32Field(value: self.r, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.R, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.R) -> Bool {
    if lhs.r != rhs.r {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.rawChars: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".rawChars"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "rawChars"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.rawChars) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.rawChars != 0 {
      try visitor.visitSingularInt32Field(value: self.rawChars, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.rawChars, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.rawChars) -> Bool {
    if lhs.rawChars != rhs.rawChars {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.RawRepresentable: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".RawRepresentable"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "RawRepresentable"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.rawRepresentable) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.rawRepresentable != 0 {
      try visitor.visitSingularInt32Field(value: self.rawRepresentable, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.RawRepresentable, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.RawRepresentable) -> Bool {
    if lhs.rawRepresentable != rhs.rawRepresentable {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.RawValue: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".RawValue"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "RawValue"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.rawValue) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.rawValue != 0 {
      try visitor.visitSingularInt32Field(value: self.rawValue, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.RawValue, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.RawValue) -> Bool {
    if lhs.rawValue != rhs.rawValue {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.read4HexDigits: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".read4HexDigits"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "read4HexDigits"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.read4HexDigits) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.read4HexDigits != 0 {
      try visitor.visitSingularInt32Field(value: self.read4HexDigits, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.read4HexDigits, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.read4HexDigits) -> Bool {
    if lhs.read4HexDigits != rhs.read4HexDigits {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.register: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".register"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "register"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.register) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.register != 0 {
      try visitor.visitSingularInt32Field(value: self.register, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.register, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.register) -> Bool {
    if lhs.register != rhs.register {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.RepeatedEnumExtensionField: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".RepeatedEnumExtensionField"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "RepeatedEnumExtensionField"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.repeatedEnumExtensionField) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.repeatedEnumExtensionField != 0 {
      try visitor.visitSingularInt32Field(value: self.repeatedEnumExtensionField, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.RepeatedEnumExtensionField, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.RepeatedEnumExtensionField) -> Bool {
    if lhs.repeatedEnumExtensionField != rhs.repeatedEnumExtensionField {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.RepeatedExtensionField: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".RepeatedExtensionField"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "RepeatedExtensionField"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.repeatedExtensionField) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.repeatedExtensionField != 0 {
      try visitor.visitSingularInt32Field(value: self.repeatedExtensionField, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.RepeatedExtensionField, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.RepeatedExtensionField) -> Bool {
    if lhs.repeatedExtensionField != rhs.repeatedExtensionField {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.RepeatedGroupExtensionField: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".RepeatedGroupExtensionField"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "RepeatedGroupExtensionField"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.repeatedGroupExtensionField) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.repeatedGroupExtensionField != 0 {
      try visitor.visitSingularInt32Field(value: self.repeatedGroupExtensionField, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.RepeatedGroupExtensionField, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.RepeatedGroupExtensionField) -> Bool {
    if lhs.repeatedGroupExtensionField != rhs.repeatedGroupExtensionField {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.RepeatedMessageExtensionField: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".RepeatedMessageExtensionField"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "RepeatedMessageExtensionField"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.repeatedMessageExtensionField) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.repeatedMessageExtensionField != 0 {
      try visitor.visitSingularInt32Field(value: self.repeatedMessageExtensionField, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.RepeatedMessageExtensionField, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.RepeatedMessageExtensionField) -> Bool {
    if lhs.repeatedMessageExtensionField != rhs.repeatedMessageExtensionField {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.repeating: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".repeating"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "repeating"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.repeating) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.repeating != 0 {
      try visitor.visitSingularInt32Field(value: self.repeating, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.repeating, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.repeating) -> Bool {
    if lhs.repeating != rhs.repeating {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.requestStreaming: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".requestStreaming"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "requestStreaming"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.requestStreaming) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.requestStreaming != 0 {
      try visitor.visitSingularInt32Field(value: self.requestStreaming, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.requestStreaming, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.requestStreaming) -> Bool {
    if lhs.requestStreaming != rhs.requestStreaming {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.requestTypeURL: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".requestTypeURL"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "requestTypeURL"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.requestTypeURL) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.requestTypeURL != 0 {
      try visitor.visitSingularInt32Field(value: self.requestTypeURL, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.requestTypeURL, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.requestTypeURL) -> Bool {
    if lhs.requestTypeURL != rhs.requestTypeURL {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.requiredSize: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".requiredSize"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "requiredSize"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.requiredSize) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.requiredSize != 0 {
      try visitor.visitSingularInt32Field(value: self.requiredSize, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.requiredSize, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.requiredSize) -> Bool {
    if lhs.requiredSize != rhs.requiredSize {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.reservedName: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".reservedName"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "reservedName"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.reservedName) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.reservedName != 0 {
      try visitor.visitSingularInt32Field(value: self.reservedName, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.reservedName, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.reservedName) -> Bool {
    if lhs.reservedName != rhs.reservedName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.reservedRange: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".reservedRange"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "reservedRange"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.reservedRange) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.reservedRange != 0 {
      try visitor.visitSingularInt32Field(value: self.reservedRange, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.reservedRange, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.reservedRange) -> Bool {
    if lhs.reservedRange != rhs.reservedRange {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.responseStreaming: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".responseStreaming"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "responseStreaming"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.responseStreaming) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.responseStreaming != 0 {
      try visitor.visitSingularInt32Field(value: self.responseStreaming, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.responseStreaming, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.responseStreaming) -> Bool {
    if lhs.responseStreaming != rhs.responseStreaming {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.responseTypeURL: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".responseTypeURL"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "responseTypeURL"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.responseTypeURL) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.responseTypeURL != 0 {
      try visitor.visitSingularInt32Field(value: self.responseTypeURL, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.responseTypeURL, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.responseTypeURL) -> Bool {
    if lhs.responseTypeURL != rhs.responseTypeURL {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.result: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".result"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "result"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.result) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.result != 0 {
      try visitor.visitSingularInt32Field(value: self.result, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.result, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.result) -> Bool {
    if lhs.result != rhs.result {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.retention: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".retention"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "retention"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.retention) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.retention != 0 {
      try visitor.visitSingularInt32Field(value: self.retention, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.retention, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.retention) -> Bool {
    if lhs.retention != rhs.retention {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.rethrowsMessage: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".rethrows"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "rethrows"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.`rethrows`) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.`rethrows` != 0 {
      try visitor.visitSingularInt32Field(value: self.`rethrows`, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.rethrowsMessage, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.rethrowsMessage) -> Bool {
    if lhs.`rethrows` != rhs.`rethrows` {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.returnMessage: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".return"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "return"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.`return`) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.`return` != 0 {
      try visitor.visitSingularInt32Field(value: self.`return`, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.returnMessage, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.returnMessage) -> Bool {
    if lhs.`return` != rhs.`return` {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ReturnType: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".ReturnType"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "ReturnType"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.returnType) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.returnType != 0 {
      try visitor.visitSingularInt32Field(value: self.returnType, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ReturnType, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ReturnType) -> Bool {
    if lhs.returnType != rhs.returnType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.revision: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".revision"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "revision"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.revision) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.revision != 0 {
      try visitor.visitSingularInt32Field(value: self.revision, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.revision, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.revision) -> Bool {
    if lhs.revision != rhs.revision {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.rhs: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".rhs"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "rhs"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.rhs) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.rhs != 0 {
      try visitor.visitSingularInt32Field(value: self.rhs, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.rhs, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.rhs) -> Bool {
    if lhs.rhs != rhs.rhs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.root: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".root"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "root"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.root) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.root != 0 {
      try visitor.visitSingularInt32Field(value: self.root, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.root, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.root) -> Bool {
    if lhs.root != rhs.root {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.rubyPackage: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".rubyPackage"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "rubyPackage"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.rubyPackage) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.rubyPackage != 0 {
      try visitor.visitSingularInt32Field(value: self.rubyPackage, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.rubyPackage, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.rubyPackage) -> Bool {
    if lhs.rubyPackage != rhs.rubyPackage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.s: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".s"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "s"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.s) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.s != 0 {
      try visitor.visitSingularInt32Field(value: self.s, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.s, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.s) -> Bool {
    if lhs.s != rhs.s {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.sawBackslash: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".sawBackslash"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "sawBackslash"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.sawBackslash) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.sawBackslash != 0 {
      try visitor.visitSingularInt32Field(value: self.sawBackslash, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.sawBackslash, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.sawBackslash) -> Bool {
    if lhs.sawBackslash != rhs.sawBackslash {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.sawSection4Characters: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".sawSection4Characters"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "sawSection4Characters"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.sawSection4Characters) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.sawSection4Characters != 0 {
      try visitor.visitSingularInt32Field(value: self.sawSection4Characters, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.sawSection4Characters, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.sawSection4Characters) -> Bool {
    if lhs.sawSection4Characters != rhs.sawSection4Characters {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.sawSection5Characters: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".sawSection5Characters"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "sawSection5Characters"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.sawSection5Characters) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.sawSection5Characters != 0 {
      try visitor.visitSingularInt32Field(value: self.sawSection5Characters, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.sawSection5Characters, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.sawSection5Characters) -> Bool {
    if lhs.sawSection5Characters != rhs.sawSection5Characters {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.scanner: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".scanner"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "scanner"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.scanner) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.scanner != 0 {
      try visitor.visitSingularInt32Field(value: self.scanner, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.scanner, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.scanner) -> Bool {
    if lhs.scanner != rhs.scanner {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.seconds: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".seconds"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "seconds"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.seconds) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.seconds != 0 {
      try visitor.visitSingularInt32Field(value: self.seconds, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.seconds, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.seconds) -> Bool {
    if lhs.seconds != rhs.seconds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.selfMessage: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".self"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "self"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.self_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.self_p != 0 {
      try visitor.visitSingularInt32Field(value: self.self_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.selfMessage, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.selfMessage) -> Bool {
    if lhs.self_p != rhs.self_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.semantic: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".semantic"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "semantic"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.semantic) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.semantic != 0 {
      try visitor.visitSingularInt32Field(value: self.semantic, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.semantic, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.semantic) -> Bool {
    if lhs.semantic != rhs.semantic {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Sendable: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".Sendable"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "Sendable"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.sendable) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.sendable != 0 {
      try visitor.visitSingularInt32Field(value: self.sendable, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Sendable, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Sendable) -> Bool {
    if lhs.sendable != rhs.sendable {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.separator: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".separator"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "separator"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.separator) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.separator != 0 {
      try visitor.visitSingularInt32Field(value: self.separator, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.separator, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.separator) -> Bool {
    if lhs.separator != rhs.separator {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.serialize: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".serialize"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "serialize"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.serialize) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.serialize != 0 {
      try visitor.visitSingularInt32Field(value: self.serialize, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.serialize, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.serialize) -> Bool {
    if lhs.serialize != rhs.serialize {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.serializedBytes: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".serializedBytes"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "serializedBytes"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.serializedBytes) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.serializedBytes != 0 {
      try visitor.visitSingularInt32Field(value: self.serializedBytes, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.serializedBytes, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.serializedBytes) -> Bool {
    if lhs.serializedBytes != rhs.serializedBytes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.serializedSize: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".serializedSize"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "serializedSize"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.serializedSize) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.serializedSize != 0 {
      try visitor.visitSingularInt32Field(value: self.serializedSize, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.serializedSize, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.serializedSize) -> Bool {
    if lhs.serializedSize != rhs.serializedSize {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.serverStreaming: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".serverStreaming"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "serverStreaming"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.serverStreaming) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.serverStreaming != 0 {
      try visitor.visitSingularInt32Field(value: self.serverStreaming, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.serverStreaming, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.serverStreaming) -> Bool {
    if lhs.serverStreaming != rhs.serverStreaming {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.service: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".service"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "service"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.service) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.service != 0 {
      try visitor.visitSingularInt32Field(value: self.service, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.service, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.service) -> Bool {
    if lhs.service != rhs.service {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ServiceDescriptorProto: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".ServiceDescriptorProto"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "ServiceDescriptorProto"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.serviceDescriptorProto) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.serviceDescriptorProto != 0 {
      try visitor.visitSingularInt32Field(value: self.serviceDescriptorProto, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ServiceDescriptorProto, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ServiceDescriptorProto) -> Bool {
    if lhs.serviceDescriptorProto != rhs.serviceDescriptorProto {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ServiceOptions: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".ServiceOptions"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "ServiceOptions"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.serviceOptions) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.serviceOptions != 0 {
      try visitor.visitSingularInt32Field(value: self.serviceOptions, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ServiceOptions, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ServiceOptions) -> Bool {
    if lhs.serviceOptions != rhs.serviceOptions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.set: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".set"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "set"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.set) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.set != 0 {
      try visitor.visitSingularInt32Field(value: self.set, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.set, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.set) -> Bool {
    if lhs.set != rhs.set {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.setExtensionValue: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".setExtensionValue"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "setExtensionValue"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.setExtensionValue) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.setExtensionValue != 0 {
      try visitor.visitSingularInt32Field(value: self.setExtensionValue, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.setExtensionValue, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.setExtensionValue) -> Bool {
    if lhs.setExtensionValue != rhs.setExtensionValue {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.shift: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".shift"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "shift"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.shift) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.shift != 0 {
      try visitor.visitSingularInt32Field(value: self.shift, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.shift, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.shift) -> Bool {
    if lhs.shift != rhs.shift {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.SimpleExtensionMap: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".SimpleExtensionMap"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "SimpleExtensionMap"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.simpleExtensionMap) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.simpleExtensionMap != 0 {
      try visitor.visitSingularInt32Field(value: self.simpleExtensionMap, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.SimpleExtensionMap, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.SimpleExtensionMap) -> Bool {
    if lhs.simpleExtensionMap != rhs.simpleExtensionMap {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.sizer: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".sizer"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "sizer"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.sizer) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.sizer != 0 {
      try visitor.visitSingularInt32Field(value: self.sizer, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.sizer, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.sizer) -> Bool {
    if lhs.sizer != rhs.sizer {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.source: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".source"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "source"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.source) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.source != 0 {
      try visitor.visitSingularInt32Field(value: self.source, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.source, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.source) -> Bool {
    if lhs.source != rhs.source {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.sourceCodeInfo: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".sourceCodeInfo"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "sourceCodeInfo"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.sourceCodeInfo) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.sourceCodeInfo != 0 {
      try visitor.visitSingularInt32Field(value: self.sourceCodeInfo, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.sourceCodeInfo, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.sourceCodeInfo) -> Bool {
    if lhs.sourceCodeInfo != rhs.sourceCodeInfo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.sourceContext: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".sourceContext"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "sourceContext"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.sourceContext) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.sourceContext != 0 {
      try visitor.visitSingularInt32Field(value: self.sourceContext, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.sourceContext, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.sourceContext) -> Bool {
    if lhs.sourceContext != rhs.sourceContext {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.sourceEncoding: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".sourceEncoding"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "sourceEncoding"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.sourceEncoding) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.sourceEncoding != 0 {
      try visitor.visitSingularInt32Field(value: self.sourceEncoding, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.sourceEncoding, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.sourceEncoding) -> Bool {
    if lhs.sourceEncoding != rhs.sourceEncoding {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.sourceFile: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".sourceFile"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "sourceFile"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.sourceFile) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.sourceFile != 0 {
      try visitor.visitSingularInt32Field(value: self.sourceFile, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.sourceFile, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.sourceFile) -> Bool {
    if lhs.sourceFile != rhs.sourceFile {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.span: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".span"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "span"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.span) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.span != 0 {
      try visitor.visitSingularInt32Field(value: self.span, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.span, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.span) -> Bool {
    if lhs.span != rhs.span {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.split: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".split"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "split"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.split) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.split != 0 {
      try visitor.visitSingularInt32Field(value: self.split, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.split, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.split) -> Bool {
    if lhs.split != rhs.split {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.start: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".start"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "start"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.start) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.start != 0 {
      try visitor.visitSingularInt32Field(value: self.start, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.start, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.start) -> Bool {
    if lhs.start != rhs.start {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.startArray: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".startArray"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "startArray"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.startArray) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.startArray != 0 {
      try visitor.visitSingularInt32Field(value: self.startArray, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.startArray, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.startArray) -> Bool {
    if lhs.startArray != rhs.startArray {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.startArrayObject: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".startArrayObject"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "startArrayObject"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.startArrayObject) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.startArrayObject != 0 {
      try visitor.visitSingularInt32Field(value: self.startArrayObject, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.startArrayObject, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.startArrayObject) -> Bool {
    if lhs.startArrayObject != rhs.startArrayObject {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.startField: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".startField"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "startField"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.startField) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.startField != 0 {
      try visitor.visitSingularInt32Field(value: self.startField, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.startField, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.startField) -> Bool {
    if lhs.startField != rhs.startField {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.startIndex: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".startIndex"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "startIndex"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.startIndex) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.startIndex != 0 {
      try visitor.visitSingularInt32Field(value: self.startIndex, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.startIndex, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.startIndex) -> Bool {
    if lhs.startIndex != rhs.startIndex {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.startMessageField: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".startMessageField"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "startMessageField"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.startMessageField) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.startMessageField != 0 {
      try visitor.visitSingularInt32Field(value: self.startMessageField, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.startMessageField, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.startMessageField) -> Bool {
    if lhs.startMessageField != rhs.startMessageField {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.startObject: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".startObject"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "startObject"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.startObject) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.startObject != 0 {
      try visitor.visitSingularInt32Field(value: self.startObject, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.startObject, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.startObject) -> Bool {
    if lhs.startObject != rhs.startObject {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.startRegularField: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".startRegularField"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "startRegularField"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.startRegularField) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.startRegularField != 0 {
      try visitor.visitSingularInt32Field(value: self.startRegularField, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.startRegularField, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.startRegularField) -> Bool {
    if lhs.startRegularField != rhs.startRegularField {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.state: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".state"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "state"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.state) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.state != 0 {
      try visitor.visitSingularInt32Field(value: self.state, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.state, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.state) -> Bool {
    if lhs.state != rhs.state {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.staticMessage: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".static"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "static"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.`static`) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.`static` != 0 {
      try visitor.visitSingularInt32Field(value: self.`static`, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.staticMessage, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.staticMessage) -> Bool {
    if lhs.`static` != rhs.`static` {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.StaticString: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".StaticString"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "StaticString"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.staticString) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.staticString != 0 {
      try visitor.visitSingularInt32Field(value: self.staticString, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.StaticString, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.StaticString) -> Bool {
    if lhs.staticString != rhs.staticString {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.storage: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".storage"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "storage"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.storage) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.storage != 0 {
      try visitor.visitSingularInt32Field(value: self.storage, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.storage, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.storage) -> Bool {
    if lhs.storage != rhs.storage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.StringMessage: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".String"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "String"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.string) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.string != 0 {
      try visitor.visitSingularInt32Field(value: self.string, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.StringMessage, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.StringMessage) -> Bool {
    if lhs.string != rhs.string {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.stringLiteral: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".stringLiteral"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "stringLiteral"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.stringLiteral) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.stringLiteral != 0 {
      try visitor.visitSingularInt32Field(value: self.stringLiteral, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.stringLiteral, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.stringLiteral) -> Bool {
    if lhs.stringLiteral != rhs.stringLiteral {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.StringLiteralType: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".StringLiteralType"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "StringLiteralType"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.stringLiteralType) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.stringLiteralType != 0 {
      try visitor.visitSingularInt32Field(value: self.stringLiteralType, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.StringLiteralType, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.StringLiteralType) -> Bool {
    if lhs.stringLiteralType != rhs.stringLiteralType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.stringResult: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".stringResult"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "stringResult"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.stringResult) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.stringResult != 0 {
      try visitor.visitSingularInt32Field(value: self.stringResult, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.stringResult, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.stringResult) -> Bool {
    if lhs.stringResult != rhs.stringResult {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.stringValue: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".stringValue"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "stringValue"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.stringValue) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.stringValue != 0 {
      try visitor.visitSingularInt32Field(value: self.stringValue, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.stringValue, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.stringValue) -> Bool {
    if lhs.stringValue != rhs.stringValue {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.structMessage: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".struct"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "struct"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.`struct`) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.`struct` != 0 {
      try visitor.visitSingularInt32Field(value: self.`struct`, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.structMessage, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.structMessage) -> Bool {
    if lhs.`struct` != rhs.`struct` {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.structValue: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".structValue"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "structValue"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.structValue) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.structValue != 0 {
      try visitor.visitSingularInt32Field(value: self.structValue, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.structValue, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.structValue) -> Bool {
    if lhs.structValue != rhs.structValue {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.subDecoder: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".subDecoder"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "subDecoder"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.subDecoder) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.subDecoder != 0 {
      try visitor.visitSingularInt32Field(value: self.subDecoder, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.subDecoder, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.subDecoder) -> Bool {
    if lhs.subDecoder != rhs.subDecoder {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.subscriptMessage: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".subscript"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "subscript"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.`subscript`) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.`subscript` != 0 {
      try visitor.visitSingularInt32Field(value: self.`subscript`, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.subscriptMessage, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.subscriptMessage) -> Bool {
    if lhs.`subscript` != rhs.`subscript` {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.subVisitor: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".subVisitor"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "subVisitor"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.subVisitor) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.subVisitor != 0 {
      try visitor.visitSingularInt32Field(value: self.subVisitor, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.subVisitor, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.subVisitor) -> Bool {
    if lhs.subVisitor != rhs.subVisitor {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Swift: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".Swift"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "Swift"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.swift) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.swift != 0 {
      try visitor.visitSingularInt32Field(value: self.swift, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Swift, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Swift) -> Bool {
    if lhs.swift != rhs.swift {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.swiftPrefix: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".swiftPrefix"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "swiftPrefix"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.swiftPrefix) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.swiftPrefix != 0 {
      try visitor.visitSingularInt32Field(value: self.swiftPrefix, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.swiftPrefix, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.swiftPrefix) -> Bool {
    if lhs.swiftPrefix != rhs.swiftPrefix {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.SwiftProtobufContiguousBytes: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".SwiftProtobufContiguousBytes"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "SwiftProtobufContiguousBytes"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.swiftProtobufContiguousBytes) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.swiftProtobufContiguousBytes != 0 {
      try visitor.visitSingularInt32Field(value: self.swiftProtobufContiguousBytes, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.SwiftProtobufContiguousBytes, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.SwiftProtobufContiguousBytes) -> Bool {
    if lhs.swiftProtobufContiguousBytes != rhs.swiftProtobufContiguousBytes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.syntax: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".syntax"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "syntax"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.syntax) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.syntax != 0 {
      try visitor.visitSingularInt32Field(value: self.syntax, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.syntax, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.syntax) -> Bool {
    if lhs.syntax != rhs.syntax {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.T: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".T"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "T"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.t) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.t != 0 {
      try visitor.visitSingularInt32Field(value: self.t, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.T, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.T) -> Bool {
    if lhs.t != rhs.t {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.tag: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".tag"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "tag"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.tag) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.tag != 0 {
      try visitor.visitSingularInt32Field(value: self.tag, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.tag, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.tag) -> Bool {
    if lhs.tag != rhs.tag {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.targets: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".targets"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "targets"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.targets) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.targets != 0 {
      try visitor.visitSingularInt32Field(value: self.targets, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.targets, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.targets) -> Bool {
    if lhs.targets != rhs.targets {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.terminator: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".terminator"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "terminator"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.terminator) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.terminator != 0 {
      try visitor.visitSingularInt32Field(value: self.terminator, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.terminator, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.terminator) -> Bool {
    if lhs.terminator != rhs.terminator {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.testDecoder: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".testDecoder"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "testDecoder"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.testDecoder) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.testDecoder != 0 {
      try visitor.visitSingularInt32Field(value: self.testDecoder, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.testDecoder, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.testDecoder) -> Bool {
    if lhs.testDecoder != rhs.testDecoder {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.text: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".text"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "text"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.text) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.text != 0 {
      try visitor.visitSingularInt32Field(value: self.text, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.text, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.text) -> Bool {
    if lhs.text != rhs.text {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.textDecoder: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".textDecoder"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "textDecoder"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.textDecoder) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.textDecoder != 0 {
      try visitor.visitSingularInt32Field(value: self.textDecoder, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.textDecoder, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.textDecoder) -> Bool {
    if lhs.textDecoder != rhs.textDecoder {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.TextFormatDecoder: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".TextFormatDecoder"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "TextFormatDecoder"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.textFormatDecoder) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.textFormatDecoder != 0 {
      try visitor.visitSingularInt32Field(value: self.textFormatDecoder, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.TextFormatDecoder, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.TextFormatDecoder) -> Bool {
    if lhs.textFormatDecoder != rhs.textFormatDecoder {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.TextFormatDecodingError: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".TextFormatDecodingError"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "TextFormatDecodingError"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.textFormatDecodingError) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.textFormatDecodingError != 0 {
      try visitor.visitSingularInt32Field(value: self.textFormatDecodingError, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.TextFormatDecodingError, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.TextFormatDecodingError) -> Bool {
    if lhs.textFormatDecodingError != rhs.textFormatDecodingError {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.TextFormatDecodingOptions: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".TextFormatDecodingOptions"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "TextFormatDecodingOptions"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.textFormatDecodingOptions) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.textFormatDecodingOptions != 0 {
      try visitor.visitSingularInt32Field(value: self.textFormatDecodingOptions, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.TextFormatDecodingOptions, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.TextFormatDecodingOptions) -> Bool {
    if lhs.textFormatDecodingOptions != rhs.textFormatDecodingOptions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.TextFormatEncodingOptions: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".TextFormatEncodingOptions"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "TextFormatEncodingOptions"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.textFormatEncodingOptions) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.textFormatEncodingOptions != 0 {
      try visitor.visitSingularInt32Field(value: self.textFormatEncodingOptions, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.TextFormatEncodingOptions, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.TextFormatEncodingOptions) -> Bool {
    if lhs.textFormatEncodingOptions != rhs.textFormatEncodingOptions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.TextFormatEncodingVisitor: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".TextFormatEncodingVisitor"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "TextFormatEncodingVisitor"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.textFormatEncodingVisitor) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.textFormatEncodingVisitor != 0 {
      try visitor.visitSingularInt32Field(value: self.textFormatEncodingVisitor, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.TextFormatEncodingVisitor, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.TextFormatEncodingVisitor) -> Bool {
    if lhs.textFormatEncodingVisitor != rhs.textFormatEncodingVisitor {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.textFormatString: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".textFormatString"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "textFormatString"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.textFormatString) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.textFormatString != 0 {
      try visitor.visitSingularInt32Field(value: self.textFormatString, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.textFormatString, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.textFormatString) -> Bool {
    if lhs.textFormatString != rhs.textFormatString {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.throwOrIgnore: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".throwOrIgnore"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "throwOrIgnore"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.throwOrIgnore) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.throwOrIgnore != 0 {
      try visitor.visitSingularInt32Field(value: self.throwOrIgnore, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.throwOrIgnore, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.throwOrIgnore) -> Bool {
    if lhs.throwOrIgnore != rhs.throwOrIgnore {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.throwsMessage: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".throws"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "throws"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.`throws`) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.`throws` != 0 {
      try visitor.visitSingularInt32Field(value: self.`throws`, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.throwsMessage, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.throwsMessage) -> Bool {
    if lhs.`throws` != rhs.`throws` {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.timeInterval: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".timeInterval"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "timeInterval"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.timeInterval) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.timeInterval != 0 {
      try visitor.visitSingularInt32Field(value: self.timeInterval, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.timeInterval, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.timeInterval) -> Bool {
    if lhs.timeInterval != rhs.timeInterval {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.timeIntervalSince1970: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".timeIntervalSince1970"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "timeIntervalSince1970"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.timeIntervalSince1970) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.timeIntervalSince1970 != 0 {
      try visitor.visitSingularInt32Field(value: self.timeIntervalSince1970, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.timeIntervalSince1970, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.timeIntervalSince1970) -> Bool {
    if lhs.timeIntervalSince1970 != rhs.timeIntervalSince1970 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.timeIntervalSinceReferenceDate: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".timeIntervalSinceReferenceDate"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "timeIntervalSinceReferenceDate"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.timeIntervalSinceReferenceDate) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.timeIntervalSinceReferenceDate != 0 {
      try visitor.visitSingularInt32Field(value: self.timeIntervalSinceReferenceDate, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.timeIntervalSinceReferenceDate, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.timeIntervalSinceReferenceDate) -> Bool {
    if lhs.timeIntervalSinceReferenceDate != rhs.timeIntervalSinceReferenceDate {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Timestamp: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".Timestamp"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "Timestamp"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.timestamp) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.timestamp != 0 {
      try visitor.visitSingularInt32Field(value: self.timestamp, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Timestamp, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Timestamp) -> Bool {
    if lhs.timestamp != rhs.timestamp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.total: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".total"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "total"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.total) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.total != 0 {
      try visitor.visitSingularInt32Field(value: self.total, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.total, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.total) -> Bool {
    if lhs.total != rhs.total {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.totalArrayDepth: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".totalArrayDepth"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "totalArrayDepth"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.totalArrayDepth) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.totalArrayDepth != 0 {
      try visitor.visitSingularInt32Field(value: self.totalArrayDepth, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.totalArrayDepth, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.totalArrayDepth) -> Bool {
    if lhs.totalArrayDepth != rhs.totalArrayDepth {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.totalSize: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".totalSize"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "totalSize"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.totalSize) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.totalSize != 0 {
      try visitor.visitSingularInt32Field(value: self.totalSize, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.totalSize, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.totalSize) -> Bool {
    if lhs.totalSize != rhs.totalSize {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.trailingComments: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".trailingComments"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "trailingComments"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.trailingComments) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.trailingComments != 0 {
      try visitor.visitSingularInt32Field(value: self.trailingComments, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.trailingComments, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.trailingComments) -> Bool {
    if lhs.trailingComments != rhs.trailingComments {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.traverseMessage: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".traverse"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "traverse"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.traverse) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.traverse != 0 {
      try visitor.visitSingularInt32Field(value: self.traverse, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.traverseMessage, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.traverseMessage) -> Bool {
    if lhs.traverse != rhs.traverse {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.trueMessage: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".true"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "true"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.`true`) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.`true` != 0 {
      try visitor.visitSingularInt32Field(value: self.`true`, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.trueMessage, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.trueMessage) -> Bool {
    if lhs.`true` != rhs.`true` {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.tryMessage: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".try"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "try"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.`try`) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.`try` != 0 {
      try visitor.visitSingularInt32Field(value: self.`try`, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.tryMessage, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.tryMessage) -> Bool {
    if lhs.`try` != rhs.`try` {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.type: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".type"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "type"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.type) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.type != 0 {
      try visitor.visitSingularInt32Field(value: self.type, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.type, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.type) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.typealiasMessage: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".typealias"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "typealias"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.`typealias`) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.`typealias` != 0 {
      try visitor.visitSingularInt32Field(value: self.`typealias`, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.typealiasMessage, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.typealiasMessage) -> Bool {
    if lhs.`typealias` != rhs.`typealias` {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.TypeEnum: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".TypeEnum"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "TypeEnum"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.typeEnum) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.typeEnum != 0 {
      try visitor.visitSingularInt32Field(value: self.typeEnum, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.TypeEnum, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.TypeEnum) -> Bool {
    if lhs.typeEnum != rhs.typeEnum {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.typeName: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".typeName"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "typeName"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.typeName) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.typeName != 0 {
      try visitor.visitSingularInt32Field(value: self.typeName, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.typeName, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.typeName) -> Bool {
    if lhs.typeName != rhs.typeName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.typePrefix: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".typePrefix"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "typePrefix"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.typePrefix) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.typePrefix != 0 {
      try visitor.visitSingularInt32Field(value: self.typePrefix, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.typePrefix, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.typePrefix) -> Bool {
    if lhs.typePrefix != rhs.typePrefix {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.typeStart: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".typeStart"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "typeStart"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.typeStart) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.typeStart != 0 {
      try visitor.visitSingularInt32Field(value: self.typeStart, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.typeStart, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.typeStart) -> Bool {
    if lhs.typeStart != rhs.typeStart {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.typeUnknown: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".typeUnknown"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "typeUnknown"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.typeUnknown) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.typeUnknown != 0 {
      try visitor.visitSingularInt32Field(value: self.typeUnknown, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.typeUnknown, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.typeUnknown) -> Bool {
    if lhs.typeUnknown != rhs.typeUnknown {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.typeURL: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".typeURL"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "typeURL"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.typeURL) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.typeURL != 0 {
      try visitor.visitSingularInt32Field(value: self.typeURL, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.typeURL, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.typeURL) -> Bool {
    if lhs.typeURL != rhs.typeURL {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.UInt32Message: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".UInt32"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "UInt32"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.uint32) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.uint32 != 0 {
      try visitor.visitSingularInt32Field(value: self.uint32, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.UInt32Message, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.UInt32Message) -> Bool {
    if lhs.uint32 != rhs.uint32 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.UInt32Value: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".UInt32Value"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "UInt32Value"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.uint32Value) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.uint32Value != 0 {
      try visitor.visitSingularInt32Field(value: self.uint32Value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.UInt32Value, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.UInt32Value) -> Bool {
    if lhs.uint32Value != rhs.uint32Value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.UInt64Message: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".UInt64"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "UInt64"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.uint64) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.uint64 != 0 {
      try visitor.visitSingularInt32Field(value: self.uint64, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.UInt64Message, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.UInt64Message) -> Bool {
    if lhs.uint64 != rhs.uint64 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.UInt64Value: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".UInt64Value"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "UInt64Value"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.uint64Value) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.uint64Value != 0 {
      try visitor.visitSingularInt32Field(value: self.uint64Value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.UInt64Value, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.UInt64Value) -> Bool {
    if lhs.uint64Value != rhs.uint64Value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.UInt8: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".UInt8"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "UInt8"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.uint8) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.uint8 != 0 {
      try visitor.visitSingularInt32Field(value: self.uint8, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.UInt8, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.UInt8) -> Bool {
    if lhs.uint8 != rhs.uint8 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.unicodeScalarLiteral: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".unicodeScalarLiteral"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "unicodeScalarLiteral"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.unicodeScalarLiteral) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.unicodeScalarLiteral != 0 {
      try visitor.visitSingularInt32Field(value: self.unicodeScalarLiteral, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.unicodeScalarLiteral, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.unicodeScalarLiteral) -> Bool {
    if lhs.unicodeScalarLiteral != rhs.unicodeScalarLiteral {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.UnicodeScalarLiteralType: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".UnicodeScalarLiteralType"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "UnicodeScalarLiteralType"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.unicodeScalarLiteralType) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.unicodeScalarLiteralType != 0 {
      try visitor.visitSingularInt32Field(value: self.unicodeScalarLiteralType, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.UnicodeScalarLiteralType, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.UnicodeScalarLiteralType) -> Bool {
    if lhs.unicodeScalarLiteralType != rhs.unicodeScalarLiteralType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.unicodeScalars: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".unicodeScalars"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "unicodeScalars"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.unicodeScalars) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.unicodeScalars != 0 {
      try visitor.visitSingularInt32Field(value: self.unicodeScalars, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.unicodeScalars, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.unicodeScalars) -> Bool {
    if lhs.unicodeScalars != rhs.unicodeScalars {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.UnicodeScalarView: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".UnicodeScalarView"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "UnicodeScalarView"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.unicodeScalarView) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.unicodeScalarView != 0 {
      try visitor.visitSingularInt32Field(value: self.unicodeScalarView, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.UnicodeScalarView, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.UnicodeScalarView) -> Bool {
    if lhs.unicodeScalarView != rhs.unicodeScalarView {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.uninterpretedOption: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".uninterpretedOption"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "uninterpretedOption"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.uninterpretedOption) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.uninterpretedOption != 0 {
      try visitor.visitSingularInt32Field(value: self.uninterpretedOption, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.uninterpretedOption, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.uninterpretedOption) -> Bool {
    if lhs.uninterpretedOption != rhs.uninterpretedOption {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.union: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".union"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "union"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.union) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.union != 0 {
      try visitor.visitSingularInt32Field(value: self.union, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.union, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.union) -> Bool {
    if lhs.union != rhs.union {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.uniqueStorage: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".uniqueStorage"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "uniqueStorage"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.uniqueStorage) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.uniqueStorage != 0 {
      try visitor.visitSingularInt32Field(value: self.uniqueStorage, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.uniqueStorage, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.uniqueStorage) -> Bool {
    if lhs.uniqueStorage != rhs.uniqueStorage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.unknown: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".unknown"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "unknown"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.unknown) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.unknown != 0 {
      try visitor.visitSingularInt32Field(value: self.unknown, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.unknown, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.unknown) -> Bool {
    if lhs.unknown != rhs.unknown {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.unknownFieldsMessage: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".unknownFields"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "unknownFields"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.unknownFields_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.unknownFields_p != 0 {
      try visitor.visitSingularInt32Field(value: self.unknownFields_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.unknownFieldsMessage, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.unknownFieldsMessage) -> Bool {
    if lhs.unknownFields_p != rhs.unknownFields_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.UnknownStorage: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".UnknownStorage"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "UnknownStorage"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.unknownStorage) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.unknownStorage != 0 {
      try visitor.visitSingularInt32Field(value: self.unknownStorage, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.UnknownStorage, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.UnknownStorage) -> Bool {
    if lhs.unknownStorage != rhs.unknownStorage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.unpackTo: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".unpackTo"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "unpackTo"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.unpackTo) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.unpackTo != 0 {
      try visitor.visitSingularInt32Field(value: self.unpackTo, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.unpackTo, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.unpackTo) -> Bool {
    if lhs.unpackTo != rhs.unpackTo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.UnsafeBufferPointer: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".UnsafeBufferPointer"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "UnsafeBufferPointer"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.unsafeBufferPointer) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.unsafeBufferPointer != 0 {
      try visitor.visitSingularInt32Field(value: self.unsafeBufferPointer, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.UnsafeBufferPointer, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.UnsafeBufferPointer) -> Bool {
    if lhs.unsafeBufferPointer != rhs.unsafeBufferPointer {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.UnsafeMutablePointer: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".UnsafeMutablePointer"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "UnsafeMutablePointer"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.unsafeMutablePointer) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.unsafeMutablePointer != 0 {
      try visitor.visitSingularInt32Field(value: self.unsafeMutablePointer, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.UnsafeMutablePointer, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.UnsafeMutablePointer) -> Bool {
    if lhs.unsafeMutablePointer != rhs.unsafeMutablePointer {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.UnsafeMutableRawBufferPointer: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".UnsafeMutableRawBufferPointer"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "UnsafeMutableRawBufferPointer"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.unsafeMutableRawBufferPointer) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.unsafeMutableRawBufferPointer != 0 {
      try visitor.visitSingularInt32Field(value: self.unsafeMutableRawBufferPointer, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.UnsafeMutableRawBufferPointer, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.UnsafeMutableRawBufferPointer) -> Bool {
    if lhs.unsafeMutableRawBufferPointer != rhs.unsafeMutableRawBufferPointer {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.UnsafeMutableRawPointer: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".UnsafeMutableRawPointer"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "UnsafeMutableRawPointer"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.unsafeMutableRawPointer) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.unsafeMutableRawPointer != 0 {
      try visitor.visitSingularInt32Field(value: self.unsafeMutableRawPointer, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.UnsafeMutableRawPointer, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.UnsafeMutableRawPointer) -> Bool {
    if lhs.unsafeMutableRawPointer != rhs.unsafeMutableRawPointer {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.UnsafeRawBufferPointer: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".UnsafeRawBufferPointer"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "UnsafeRawBufferPointer"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.unsafeRawBufferPointer) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.unsafeRawBufferPointer != 0 {
      try visitor.visitSingularInt32Field(value: self.unsafeRawBufferPointer, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.UnsafeRawBufferPointer, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.UnsafeRawBufferPointer) -> Bool {
    if lhs.unsafeRawBufferPointer != rhs.unsafeRawBufferPointer {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.UnsafeRawPointer: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".UnsafeRawPointer"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "UnsafeRawPointer"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.unsafeRawPointer) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.unsafeRawPointer != 0 {
      try visitor.visitSingularInt32Field(value: self.unsafeRawPointer, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.UnsafeRawPointer, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.UnsafeRawPointer) -> Bool {
    if lhs.unsafeRawPointer != rhs.unsafeRawPointer {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.unverifiedLazy: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".unverifiedLazy"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "unverifiedLazy"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.unverifiedLazy) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.unverifiedLazy != 0 {
      try visitor.visitSingularInt32Field(value: self.unverifiedLazy, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.unverifiedLazy, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.unverifiedLazy) -> Bool {
    if lhs.unverifiedLazy != rhs.unverifiedLazy {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.updatedOptions: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".updatedOptions"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "updatedOptions"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.updatedOptions) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.updatedOptions != 0 {
      try visitor.visitSingularInt32Field(value: self.updatedOptions, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.updatedOptions, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.updatedOptions) -> Bool {
    if lhs.updatedOptions != rhs.updatedOptions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.url: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".url"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "url"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.url) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.url != 0 {
      try visitor.visitSingularInt32Field(value: self.url, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.url, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.url) -> Bool {
    if lhs.url != rhs.url {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.utf8: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".utf8"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "utf8"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.utf8) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.utf8 != 0 {
      try visitor.visitSingularInt32Field(value: self.utf8, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.utf8, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.utf8) -> Bool {
    if lhs.utf8 != rhs.utf8 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.utf8Ptr: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".utf8Ptr"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "utf8Ptr"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.utf8Ptr) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.utf8Ptr != 0 {
      try visitor.visitSingularInt32Field(value: self.utf8Ptr, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.utf8Ptr, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.utf8Ptr) -> Bool {
    if lhs.utf8Ptr != rhs.utf8Ptr {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.utf8ToDouble: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".utf8ToDouble"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "utf8ToDouble"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.utf8ToDouble) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.utf8ToDouble != 0 {
      try visitor.visitSingularInt32Field(value: self.utf8ToDouble, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.utf8ToDouble, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.utf8ToDouble) -> Bool {
    if lhs.utf8ToDouble != rhs.utf8ToDouble {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.UTF8View: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".UTF8View"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "UTF8View"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.utf8View) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.utf8View != 0 {
      try visitor.visitSingularInt32Field(value: self.utf8View, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.UTF8View, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.UTF8View) -> Bool {
    if lhs.utf8View != rhs.utf8View {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.v: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".v"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "v"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.v) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.v != 0 {
      try visitor.visitSingularInt32Field(value: self.v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.v, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.v) -> Bool {
    if lhs.v != rhs.v {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.value: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".value"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.value) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.value != 0 {
      try visitor.visitSingularInt32Field(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.value, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.value) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.valueField: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".valueField"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "valueField"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.valueField) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.valueField != 0 {
      try visitor.visitSingularInt32Field(value: self.valueField, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.valueField, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.valueField) -> Bool {
    if lhs.valueField != rhs.valueField {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.values: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".values"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "values"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.values) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.values != 0 {
      try visitor.visitSingularInt32Field(value: self.values, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.values, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.values) -> Bool {
    if lhs.values != rhs.values {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ValueType: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".ValueType"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "ValueType"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.valueType) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.valueType != 0 {
      try visitor.visitSingularInt32Field(value: self.valueType, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ValueType, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.ValueType) -> Bool {
    if lhs.valueType != rhs.valueType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.varMessage: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".var"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "var"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.`var`) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.`var` != 0 {
      try visitor.visitSingularInt32Field(value: self.`var`, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.varMessage, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.varMessage) -> Bool {
    if lhs.`var` != rhs.`var` {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Version: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".Version"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "Version"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.version) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.version != 0 {
      try visitor.visitSingularInt32Field(value: self.version, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Version, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.Version) -> Bool {
    if lhs.version != rhs.version {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.versionString: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".versionString"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "versionString"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.versionString) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.versionString != 0 {
      try visitor.visitSingularInt32Field(value: self.versionString, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.versionString, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.versionString) -> Bool {
    if lhs.versionString != rhs.versionString {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitExtensionFields: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".visitExtensionFields"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "visitExtensionFields"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.visitExtensionFields) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.visitExtensionFields != 0 {
      try visitor.visitSingularInt32Field(value: self.visitExtensionFields, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitExtensionFields, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitExtensionFields) -> Bool {
    if lhs.visitExtensionFields != rhs.visitExtensionFields {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitExtensionFieldsAsMessageSet: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".visitExtensionFieldsAsMessageSet"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "visitExtensionFieldsAsMessageSet"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.visitExtensionFieldsAsMessageSet) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.visitExtensionFieldsAsMessageSet != 0 {
      try visitor.visitSingularInt32Field(value: self.visitExtensionFieldsAsMessageSet, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitExtensionFieldsAsMessageSet, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitExtensionFieldsAsMessageSet) -> Bool {
    if lhs.visitExtensionFieldsAsMessageSet != rhs.visitExtensionFieldsAsMessageSet {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitMapField: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".visitMapField"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "visitMapField"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.visitMapField) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.visitMapField != 0 {
      try visitor.visitSingularInt32Field(value: self.visitMapField, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitMapField, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitMapField) -> Bool {
    if lhs.visitMapField != rhs.visitMapField {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitor: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".visitor"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "visitor"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.visitor) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.visitor != 0 {
      try visitor.visitSingularInt32Field(value: self.visitor, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitor, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitor) -> Bool {
    if lhs.visitor != rhs.visitor {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitPacked: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".visitPacked"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "visitPacked"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.visitPacked) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.visitPacked != 0 {
      try visitor.visitSingularInt32Field(value: self.visitPacked, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitPacked, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitPacked) -> Bool {
    if lhs.visitPacked != rhs.visitPacked {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitPackedBoolField: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".visitPackedBoolField"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "visitPackedBoolField"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.visitPackedBoolField) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.visitPackedBoolField != 0 {
      try visitor.visitSingularInt32Field(value: self.visitPackedBoolField, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitPackedBoolField, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitPackedBoolField) -> Bool {
    if lhs.visitPackedBoolField != rhs.visitPackedBoolField {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitPackedDoubleField: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".visitPackedDoubleField"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "visitPackedDoubleField"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.visitPackedDoubleField) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.visitPackedDoubleField != 0 {
      try visitor.visitSingularInt32Field(value: self.visitPackedDoubleField, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitPackedDoubleField, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitPackedDoubleField) -> Bool {
    if lhs.visitPackedDoubleField != rhs.visitPackedDoubleField {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitPackedEnumField: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".visitPackedEnumField"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "visitPackedEnumField"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.visitPackedEnumField) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.visitPackedEnumField != 0 {
      try visitor.visitSingularInt32Field(value: self.visitPackedEnumField, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitPackedEnumField, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitPackedEnumField) -> Bool {
    if lhs.visitPackedEnumField != rhs.visitPackedEnumField {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitPackedFixed32Field: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".visitPackedFixed32Field"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "visitPackedFixed32Field"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.visitPackedFixed32Field) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.visitPackedFixed32Field != 0 {
      try visitor.visitSingularInt32Field(value: self.visitPackedFixed32Field, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitPackedFixed32Field, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitPackedFixed32Field) -> Bool {
    if lhs.visitPackedFixed32Field != rhs.visitPackedFixed32Field {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitPackedFixed64Field: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".visitPackedFixed64Field"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "visitPackedFixed64Field"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.visitPackedFixed64Field) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.visitPackedFixed64Field != 0 {
      try visitor.visitSingularInt32Field(value: self.visitPackedFixed64Field, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitPackedFixed64Field, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitPackedFixed64Field) -> Bool {
    if lhs.visitPackedFixed64Field != rhs.visitPackedFixed64Field {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitPackedFloatField: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".visitPackedFloatField"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "visitPackedFloatField"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.visitPackedFloatField) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.visitPackedFloatField != 0 {
      try visitor.visitSingularInt32Field(value: self.visitPackedFloatField, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitPackedFloatField, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitPackedFloatField) -> Bool {
    if lhs.visitPackedFloatField != rhs.visitPackedFloatField {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitPackedInt32Field: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".visitPackedInt32Field"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "visitPackedInt32Field"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.visitPackedInt32Field) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.visitPackedInt32Field != 0 {
      try visitor.visitSingularInt32Field(value: self.visitPackedInt32Field, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitPackedInt32Field, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitPackedInt32Field) -> Bool {
    if lhs.visitPackedInt32Field != rhs.visitPackedInt32Field {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitPackedInt64Field: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".visitPackedInt64Field"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "visitPackedInt64Field"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.visitPackedInt64Field) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.visitPackedInt64Field != 0 {
      try visitor.visitSingularInt32Field(value: self.visitPackedInt64Field, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitPackedInt64Field, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitPackedInt64Field) -> Bool {
    if lhs.visitPackedInt64Field != rhs.visitPackedInt64Field {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitPackedSFixed32Field: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".visitPackedSFixed32Field"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "visitPackedSFixed32Field"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.visitPackedSfixed32Field) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.visitPackedSfixed32Field != 0 {
      try visitor.visitSingularInt32Field(value: self.visitPackedSfixed32Field, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitPackedSFixed32Field, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitPackedSFixed32Field) -> Bool {
    if lhs.visitPackedSfixed32Field != rhs.visitPackedSfixed32Field {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitPackedSFixed64Field: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".visitPackedSFixed64Field"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "visitPackedSFixed64Field"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.visitPackedSfixed64Field) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.visitPackedSfixed64Field != 0 {
      try visitor.visitSingularInt32Field(value: self.visitPackedSfixed64Field, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitPackedSFixed64Field, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitPackedSFixed64Field) -> Bool {
    if lhs.visitPackedSfixed64Field != rhs.visitPackedSfixed64Field {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitPackedSInt32Field: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".visitPackedSInt32Field"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "visitPackedSInt32Field"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.visitPackedSint32Field) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.visitPackedSint32Field != 0 {
      try visitor.visitSingularInt32Field(value: self.visitPackedSint32Field, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitPackedSInt32Field, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitPackedSInt32Field) -> Bool {
    if lhs.visitPackedSint32Field != rhs.visitPackedSint32Field {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitPackedSInt64Field: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".visitPackedSInt64Field"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "visitPackedSInt64Field"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.visitPackedSint64Field) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.visitPackedSint64Field != 0 {
      try visitor.visitSingularInt32Field(value: self.visitPackedSint64Field, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitPackedSInt64Field, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitPackedSInt64Field) -> Bool {
    if lhs.visitPackedSint64Field != rhs.visitPackedSint64Field {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitPackedUInt32Field: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".visitPackedUInt32Field"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "visitPackedUInt32Field"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.visitPackedUint32Field) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.visitPackedUint32Field != 0 {
      try visitor.visitSingularInt32Field(value: self.visitPackedUint32Field, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitPackedUInt32Field, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitPackedUInt32Field) -> Bool {
    if lhs.visitPackedUint32Field != rhs.visitPackedUint32Field {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitPackedUInt64Field: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".visitPackedUInt64Field"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "visitPackedUInt64Field"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.visitPackedUint64Field) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.visitPackedUint64Field != 0 {
      try visitor.visitSingularInt32Field(value: self.visitPackedUint64Field, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitPackedUInt64Field, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitPackedUInt64Field) -> Bool {
    if lhs.visitPackedUint64Field != rhs.visitPackedUint64Field {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitRepeated: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".visitRepeated"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "visitRepeated"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.visitRepeated) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.visitRepeated != 0 {
      try visitor.visitSingularInt32Field(value: self.visitRepeated, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitRepeated, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitRepeated) -> Bool {
    if lhs.visitRepeated != rhs.visitRepeated {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitRepeatedBoolField: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".visitRepeatedBoolField"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "visitRepeatedBoolField"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.visitRepeatedBoolField) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.visitRepeatedBoolField != 0 {
      try visitor.visitSingularInt32Field(value: self.visitRepeatedBoolField, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitRepeatedBoolField, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitRepeatedBoolField) -> Bool {
    if lhs.visitRepeatedBoolField != rhs.visitRepeatedBoolField {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitRepeatedBytesField: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".visitRepeatedBytesField"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "visitRepeatedBytesField"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.visitRepeatedBytesField) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.visitRepeatedBytesField != 0 {
      try visitor.visitSingularInt32Field(value: self.visitRepeatedBytesField, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitRepeatedBytesField, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitRepeatedBytesField) -> Bool {
    if lhs.visitRepeatedBytesField != rhs.visitRepeatedBytesField {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitRepeatedDoubleField: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".visitRepeatedDoubleField"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "visitRepeatedDoubleField"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.visitRepeatedDoubleField) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.visitRepeatedDoubleField != 0 {
      try visitor.visitSingularInt32Field(value: self.visitRepeatedDoubleField, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitRepeatedDoubleField, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitRepeatedDoubleField) -> Bool {
    if lhs.visitRepeatedDoubleField != rhs.visitRepeatedDoubleField {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitRepeatedEnumField: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".visitRepeatedEnumField"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "visitRepeatedEnumField"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.visitRepeatedEnumField) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.visitRepeatedEnumField != 0 {
      try visitor.visitSingularInt32Field(value: self.visitRepeatedEnumField, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitRepeatedEnumField, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitRepeatedEnumField) -> Bool {
    if lhs.visitRepeatedEnumField != rhs.visitRepeatedEnumField {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitRepeatedFixed32Field: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".visitRepeatedFixed32Field"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "visitRepeatedFixed32Field"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.visitRepeatedFixed32Field) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.visitRepeatedFixed32Field != 0 {
      try visitor.visitSingularInt32Field(value: self.visitRepeatedFixed32Field, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitRepeatedFixed32Field, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitRepeatedFixed32Field) -> Bool {
    if lhs.visitRepeatedFixed32Field != rhs.visitRepeatedFixed32Field {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitRepeatedFixed64Field: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".visitRepeatedFixed64Field"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "visitRepeatedFixed64Field"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.visitRepeatedFixed64Field) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.visitRepeatedFixed64Field != 0 {
      try visitor.visitSingularInt32Field(value: self.visitRepeatedFixed64Field, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitRepeatedFixed64Field, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitRepeatedFixed64Field) -> Bool {
    if lhs.visitRepeatedFixed64Field != rhs.visitRepeatedFixed64Field {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitRepeatedFloatField: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".visitRepeatedFloatField"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "visitRepeatedFloatField"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.visitRepeatedFloatField) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.visitRepeatedFloatField != 0 {
      try visitor.visitSingularInt32Field(value: self.visitRepeatedFloatField, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitRepeatedFloatField, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitRepeatedFloatField) -> Bool {
    if lhs.visitRepeatedFloatField != rhs.visitRepeatedFloatField {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitRepeatedGroupField: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".visitRepeatedGroupField"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "visitRepeatedGroupField"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.visitRepeatedGroupField) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.visitRepeatedGroupField != 0 {
      try visitor.visitSingularInt32Field(value: self.visitRepeatedGroupField, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitRepeatedGroupField, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitRepeatedGroupField) -> Bool {
    if lhs.visitRepeatedGroupField != rhs.visitRepeatedGroupField {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitRepeatedInt32Field: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".visitRepeatedInt32Field"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "visitRepeatedInt32Field"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.visitRepeatedInt32Field) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.visitRepeatedInt32Field != 0 {
      try visitor.visitSingularInt32Field(value: self.visitRepeatedInt32Field, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitRepeatedInt32Field, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitRepeatedInt32Field) -> Bool {
    if lhs.visitRepeatedInt32Field != rhs.visitRepeatedInt32Field {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitRepeatedInt64Field: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".visitRepeatedInt64Field"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "visitRepeatedInt64Field"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.visitRepeatedInt64Field) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.visitRepeatedInt64Field != 0 {
      try visitor.visitSingularInt32Field(value: self.visitRepeatedInt64Field, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitRepeatedInt64Field, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitRepeatedInt64Field) -> Bool {
    if lhs.visitRepeatedInt64Field != rhs.visitRepeatedInt64Field {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitRepeatedMessageField: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".visitRepeatedMessageField"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "visitRepeatedMessageField"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.visitRepeatedMessageField) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.visitRepeatedMessageField != 0 {
      try visitor.visitSingularInt32Field(value: self.visitRepeatedMessageField, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitRepeatedMessageField, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitRepeatedMessageField) -> Bool {
    if lhs.visitRepeatedMessageField != rhs.visitRepeatedMessageField {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitRepeatedSFixed32Field: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".visitRepeatedSFixed32Field"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "visitRepeatedSFixed32Field"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.visitRepeatedSfixed32Field) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.visitRepeatedSfixed32Field != 0 {
      try visitor.visitSingularInt32Field(value: self.visitRepeatedSfixed32Field, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitRepeatedSFixed32Field, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitRepeatedSFixed32Field) -> Bool {
    if lhs.visitRepeatedSfixed32Field != rhs.visitRepeatedSfixed32Field {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitRepeatedSFixed64Field: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".visitRepeatedSFixed64Field"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "visitRepeatedSFixed64Field"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.visitRepeatedSfixed64Field) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.visitRepeatedSfixed64Field != 0 {
      try visitor.visitSingularInt32Field(value: self.visitRepeatedSfixed64Field, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitRepeatedSFixed64Field, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitRepeatedSFixed64Field) -> Bool {
    if lhs.visitRepeatedSfixed64Field != rhs.visitRepeatedSfixed64Field {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitRepeatedSInt32Field: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".visitRepeatedSInt32Field"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "visitRepeatedSInt32Field"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.visitRepeatedSint32Field) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.visitRepeatedSint32Field != 0 {
      try visitor.visitSingularInt32Field(value: self.visitRepeatedSint32Field, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitRepeatedSInt32Field, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitRepeatedSInt32Field) -> Bool {
    if lhs.visitRepeatedSint32Field != rhs.visitRepeatedSint32Field {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitRepeatedSInt64Field: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".visitRepeatedSInt64Field"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "visitRepeatedSInt64Field"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.visitRepeatedSint64Field) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.visitRepeatedSint64Field != 0 {
      try visitor.visitSingularInt32Field(value: self.visitRepeatedSint64Field, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitRepeatedSInt64Field, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitRepeatedSInt64Field) -> Bool {
    if lhs.visitRepeatedSint64Field != rhs.visitRepeatedSint64Field {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitRepeatedStringField: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".visitRepeatedStringField"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "visitRepeatedStringField"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.visitRepeatedStringField) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.visitRepeatedStringField != 0 {
      try visitor.visitSingularInt32Field(value: self.visitRepeatedStringField, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitRepeatedStringField, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitRepeatedStringField) -> Bool {
    if lhs.visitRepeatedStringField != rhs.visitRepeatedStringField {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitRepeatedUInt32Field: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".visitRepeatedUInt32Field"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "visitRepeatedUInt32Field"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.visitRepeatedUint32Field) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.visitRepeatedUint32Field != 0 {
      try visitor.visitSingularInt32Field(value: self.visitRepeatedUint32Field, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitRepeatedUInt32Field, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitRepeatedUInt32Field) -> Bool {
    if lhs.visitRepeatedUint32Field != rhs.visitRepeatedUint32Field {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitRepeatedUInt64Field: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".visitRepeatedUInt64Field"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "visitRepeatedUInt64Field"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.visitRepeatedUint64Field) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.visitRepeatedUint64Field != 0 {
      try visitor.visitSingularInt32Field(value: self.visitRepeatedUint64Field, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitRepeatedUInt64Field, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitRepeatedUInt64Field) -> Bool {
    if lhs.visitRepeatedUint64Field != rhs.visitRepeatedUint64Field {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitSingular: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".visitSingular"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "visitSingular"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.visitSingular) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.visitSingular != 0 {
      try visitor.visitSingularInt32Field(value: self.visitSingular, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitSingular, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitSingular) -> Bool {
    if lhs.visitSingular != rhs.visitSingular {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitSingularBoolField: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".visitSingularBoolField"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "visitSingularBoolField"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.visitSingularBoolField) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.visitSingularBoolField != 0 {
      try visitor.visitSingularInt32Field(value: self.visitSingularBoolField, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitSingularBoolField, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitSingularBoolField) -> Bool {
    if lhs.visitSingularBoolField != rhs.visitSingularBoolField {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitSingularBytesField: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".visitSingularBytesField"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "visitSingularBytesField"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.visitSingularBytesField) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.visitSingularBytesField != 0 {
      try visitor.visitSingularInt32Field(value: self.visitSingularBytesField, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitSingularBytesField, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitSingularBytesField) -> Bool {
    if lhs.visitSingularBytesField != rhs.visitSingularBytesField {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitSingularDoubleField: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".visitSingularDoubleField"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "visitSingularDoubleField"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.visitSingularDoubleField) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.visitSingularDoubleField != 0 {
      try visitor.visitSingularInt32Field(value: self.visitSingularDoubleField, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitSingularDoubleField, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitSingularDoubleField) -> Bool {
    if lhs.visitSingularDoubleField != rhs.visitSingularDoubleField {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitSingularEnumField: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".visitSingularEnumField"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "visitSingularEnumField"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.visitSingularEnumField) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.visitSingularEnumField != 0 {
      try visitor.visitSingularInt32Field(value: self.visitSingularEnumField, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitSingularEnumField, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitSingularEnumField) -> Bool {
    if lhs.visitSingularEnumField != rhs.visitSingularEnumField {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitSingularFixed32Field: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".visitSingularFixed32Field"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "visitSingularFixed32Field"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.visitSingularFixed32Field) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.visitSingularFixed32Field != 0 {
      try visitor.visitSingularInt32Field(value: self.visitSingularFixed32Field, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitSingularFixed32Field, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitSingularFixed32Field) -> Bool {
    if lhs.visitSingularFixed32Field != rhs.visitSingularFixed32Field {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitSingularFixed64Field: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".visitSingularFixed64Field"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "visitSingularFixed64Field"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.visitSingularFixed64Field) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.visitSingularFixed64Field != 0 {
      try visitor.visitSingularInt32Field(value: self.visitSingularFixed64Field, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitSingularFixed64Field, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitSingularFixed64Field) -> Bool {
    if lhs.visitSingularFixed64Field != rhs.visitSingularFixed64Field {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitSingularFloatField: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".visitSingularFloatField"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "visitSingularFloatField"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.visitSingularFloatField) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.visitSingularFloatField != 0 {
      try visitor.visitSingularInt32Field(value: self.visitSingularFloatField, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitSingularFloatField, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitSingularFloatField) -> Bool {
    if lhs.visitSingularFloatField != rhs.visitSingularFloatField {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitSingularGroupField: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".visitSingularGroupField"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "visitSingularGroupField"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.visitSingularGroupField) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.visitSingularGroupField != 0 {
      try visitor.visitSingularInt32Field(value: self.visitSingularGroupField, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitSingularGroupField, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitSingularGroupField) -> Bool {
    if lhs.visitSingularGroupField != rhs.visitSingularGroupField {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitSingularInt32Field: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".visitSingularInt32Field"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "visitSingularInt32Field"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.visitSingularInt32Field) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.visitSingularInt32Field != 0 {
      try visitor.visitSingularInt32Field(value: self.visitSingularInt32Field, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitSingularInt32Field, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitSingularInt32Field) -> Bool {
    if lhs.visitSingularInt32Field != rhs.visitSingularInt32Field {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitSingularInt64Field: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".visitSingularInt64Field"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "visitSingularInt64Field"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.visitSingularInt64Field) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.visitSingularInt64Field != 0 {
      try visitor.visitSingularInt32Field(value: self.visitSingularInt64Field, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitSingularInt64Field, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitSingularInt64Field) -> Bool {
    if lhs.visitSingularInt64Field != rhs.visitSingularInt64Field {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitSingularMessageField: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".visitSingularMessageField"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "visitSingularMessageField"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.visitSingularMessageField) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.visitSingularMessageField != 0 {
      try visitor.visitSingularInt32Field(value: self.visitSingularMessageField, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitSingularMessageField, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitSingularMessageField) -> Bool {
    if lhs.visitSingularMessageField != rhs.visitSingularMessageField {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitSingularSFixed32Field: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".visitSingularSFixed32Field"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "visitSingularSFixed32Field"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.visitSingularSfixed32Field) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.visitSingularSfixed32Field != 0 {
      try visitor.visitSingularInt32Field(value: self.visitSingularSfixed32Field, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitSingularSFixed32Field, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitSingularSFixed32Field) -> Bool {
    if lhs.visitSingularSfixed32Field != rhs.visitSingularSfixed32Field {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitSingularSFixed64Field: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".visitSingularSFixed64Field"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "visitSingularSFixed64Field"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.visitSingularSfixed64Field) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.visitSingularSfixed64Field != 0 {
      try visitor.visitSingularInt32Field(value: self.visitSingularSfixed64Field, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitSingularSFixed64Field, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitSingularSFixed64Field) -> Bool {
    if lhs.visitSingularSfixed64Field != rhs.visitSingularSfixed64Field {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitSingularSInt32Field: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".visitSingularSInt32Field"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "visitSingularSInt32Field"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.visitSingularSint32Field) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.visitSingularSint32Field != 0 {
      try visitor.visitSingularInt32Field(value: self.visitSingularSint32Field, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitSingularSInt32Field, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitSingularSInt32Field) -> Bool {
    if lhs.visitSingularSint32Field != rhs.visitSingularSint32Field {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitSingularSInt64Field: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".visitSingularSInt64Field"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "visitSingularSInt64Field"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.visitSingularSint64Field) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.visitSingularSint64Field != 0 {
      try visitor.visitSingularInt32Field(value: self.visitSingularSint64Field, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitSingularSInt64Field, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitSingularSInt64Field) -> Bool {
    if lhs.visitSingularSint64Field != rhs.visitSingularSint64Field {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitSingularStringField: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".visitSingularStringField"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "visitSingularStringField"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.visitSingularStringField) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.visitSingularStringField != 0 {
      try visitor.visitSingularInt32Field(value: self.visitSingularStringField, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitSingularStringField, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitSingularStringField) -> Bool {
    if lhs.visitSingularStringField != rhs.visitSingularStringField {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitSingularUInt32Field: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".visitSingularUInt32Field"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "visitSingularUInt32Field"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.visitSingularUint32Field) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.visitSingularUint32Field != 0 {
      try visitor.visitSingularInt32Field(value: self.visitSingularUint32Field, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitSingularUInt32Field, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitSingularUInt32Field) -> Bool {
    if lhs.visitSingularUint32Field != rhs.visitSingularUint32Field {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitSingularUInt64Field: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".visitSingularUInt64Field"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "visitSingularUInt64Field"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.visitSingularUint64Field) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.visitSingularUint64Field != 0 {
      try visitor.visitSingularInt32Field(value: self.visitSingularUint64Field, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitSingularUInt64Field, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitSingularUInt64Field) -> Bool {
    if lhs.visitSingularUint64Field != rhs.visitSingularUint64Field {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitUnknown: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".visitUnknown"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "visitUnknown"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.visitUnknown) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.visitUnknown != 0 {
      try visitor.visitSingularInt32Field(value: self.visitUnknown, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitUnknown, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.visitUnknown) -> Bool {
    if lhs.visitUnknown != rhs.visitUnknown {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.wasDecoded: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".wasDecoded"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "wasDecoded"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.wasDecoded) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.wasDecoded != 0 {
      try visitor.visitSingularInt32Field(value: self.wasDecoded, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.wasDecoded, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.wasDecoded) -> Bool {
    if lhs.wasDecoded != rhs.wasDecoded {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.weak: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".weak"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "weak"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.weak) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.weak != 0 {
      try visitor.visitSingularInt32Field(value: self.weak, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.weak, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.weak) -> Bool {
    if lhs.weak != rhs.weak {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.weakDependency: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".weakDependency"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "weakDependency"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.weakDependency) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.weakDependency != 0 {
      try visitor.visitSingularInt32Field(value: self.weakDependency, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.weakDependency, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.weakDependency) -> Bool {
    if lhs.weakDependency != rhs.weakDependency {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.whereMessage: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".where"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "where"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.`where`) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.`where` != 0 {
      try visitor.visitSingularInt32Field(value: self.`where`, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.whereMessage, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.whereMessage) -> Bool {
    if lhs.`where` != rhs.`where` {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.wireFormat: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".wireFormat"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "wireFormat"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.wireFormat) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.wireFormat != 0 {
      try visitor.visitSingularInt32Field(value: self.wireFormat, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.wireFormat, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.wireFormat) -> Bool {
    if lhs.wireFormat != rhs.wireFormat {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.with: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".with"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "with"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.with) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.with != 0 {
      try visitor.visitSingularInt32Field(value: self.with, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.with, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.with) -> Bool {
    if lhs.with != rhs.with {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.withUnsafeBytes: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".withUnsafeBytes"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "withUnsafeBytes"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.withUnsafeBytes) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.withUnsafeBytes != 0 {
      try visitor.visitSingularInt32Field(value: self.withUnsafeBytes, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.withUnsafeBytes, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.withUnsafeBytes) -> Bool {
    if lhs.withUnsafeBytes != rhs.withUnsafeBytes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.withUnsafeMutableBytes: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".withUnsafeMutableBytes"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "withUnsafeMutableBytes"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.withUnsafeMutableBytes) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.withUnsafeMutableBytes != 0 {
      try visitor.visitSingularInt32Field(value: self.withUnsafeMutableBytes, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.withUnsafeMutableBytes, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.withUnsafeMutableBytes) -> Bool {
    if lhs.withUnsafeMutableBytes != rhs.withUnsafeMutableBytes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.work: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".work"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "work"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.work) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.work != 0 {
      try visitor.visitSingularInt32Field(value: self.work, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.work, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.work) -> Bool {
    if lhs.work != rhs.work {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.WrappedType: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".WrappedType"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "WrappedType"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.wrappedType) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.wrappedType != 0 {
      try visitor.visitSingularInt32Field(value: self.wrappedType, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.WrappedType, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.WrappedType) -> Bool {
    if lhs.wrappedType != rhs.wrappedType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.written: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".written"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "written"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.written) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.written != 0 {
      try visitor.visitSingularInt32Field(value: self.written, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.written, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.written) -> Bool {
    if lhs.written != rhs.written {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.yday: SwiftProtobufCore.Message, SwiftProtobufCore._MessageImplementationBase, SwiftProtobufCore._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.protoMessageName + ".yday"
  static let _protobuf_nameMap: SwiftProtobufCore._NameMap = [
    1: .same(proto: "yday"),
  ]

  mutating func decodeMessage<D: SwiftProtobufCore.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.yday) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobufCore.Visitor>(visitor: inout V) throws {
    if self.yday != 0 {
      try visitor.visitSingularInt32Field(value: self.yday, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.yday, rhs: ProtobufUnittestGenerated_GeneratedSwiftReservedMessages.yday) -> Bool {
    if lhs.yday != rhs.yday {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
