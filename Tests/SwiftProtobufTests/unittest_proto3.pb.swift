/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: google/protobuf/unittest_proto3.proto
 *
 */

//  Protocol Buffers - Google's data interchange format
//  Copyright 2008 Google Inc.  All rights reserved.
//  https://developers.google.com/protocol-buffers/
// 
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are
//  met:
// 
//      * Redistributions of source code must retain the above copyright
//  notice, this list of conditions and the following disclaimer.
//      * Redistributions in binary form must reproduce the above
//  copyright notice, this list of conditions and the following disclaimer
//  in the documentation and/or other materials provided with the
//  distribution.
//      * Neither the name of Google Inc. nor the names of its
//  contributors may be used to endorse or promote products derived from
//  this software without specific prior written permission.
// 
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
//  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
//  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
//  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
//  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
//  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
//  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

//  Author: kenton@google.com (Kenton Varda)
//   Based on original Protocol Buffers design by
//   Sanjay Ghemawat, Jeff Dean, and others.
// 
//  A proto file we will use for unit testing.

import Foundation
import SwiftProtobuf


public enum Proto3ForeignEnum: ProtobufEnum {
  public typealias RawValue = Int
  case foreignUnspecified // = 0
  case foreignFoo // = 4
  case foreignBar // = 5
  case foreignBaz // = 6
  case UNRECOGNIZED(Int)

  public init() {
    self = .foreignUnspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .foreignUnspecified
    case 4: self = .foreignFoo
    case 5: self = .foreignBar
    case 6: self = .foreignBaz
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public init?(name: String) {
    switch name {
    case "foreignUnspecified": self = .foreignUnspecified
    case "foreignFoo": self = .foreignFoo
    case "foreignBar": self = .foreignBar
    case "foreignBaz": self = .foreignBaz
    default: return nil
    }
  }

  public init?(jsonName: String) {
    switch jsonName {
    case "FOREIGN_UNSPECIFIED": self = .foreignUnspecified
    case "FOREIGN_FOO": self = .foreignFoo
    case "FOREIGN_BAR": self = .foreignBar
    case "FOREIGN_BAZ": self = .foreignBaz
    default: return nil
    }
  }

  public init?(protoName: String) {
    switch protoName {
    case "FOREIGN_UNSPECIFIED": self = .foreignUnspecified
    case "FOREIGN_FOO": self = .foreignFoo
    case "FOREIGN_BAR": self = .foreignBar
    case "FOREIGN_BAZ": self = .foreignBaz
    default: return nil
    }
  }

  public var rawValue: Int {
    get {
      switch self {
      case .foreignUnspecified: return 0
      case .foreignFoo: return 4
      case .foreignBar: return 5
      case .foreignBaz: return 6
      case .UNRECOGNIZED(let i): return i
      }
    }
  }

  public var json: String {
    get {
      switch self {
      case .foreignUnspecified: return "\"FOREIGN_UNSPECIFIED\""
      case .foreignFoo: return "\"FOREIGN_FOO\""
      case .foreignBar: return "\"FOREIGN_BAR\""
      case .foreignBaz: return "\"FOREIGN_BAZ\""
      case .UNRECOGNIZED(let i): return String(i)
      }
    }
  }

  public var hashValue: Int { return rawValue }

  public var debugDescription: String {
    get {
      switch self {
      case .foreignUnspecified: return ".foreignUnspecified"
      case .foreignFoo: return ".foreignFoo"
      case .foreignBar: return ".foreignBar"
      case .foreignBaz: return ".foreignBaz"
      case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
      }
    }
  }

}

///   Test an enum that has multiple values with the same number.
public enum Proto3TestEnumWithDupValue: ProtobufEnum {
  public typealias RawValue = Int
  case testEnumWithDupValueUnspecified // = 0
  case foo1 // = 1
  case bar1 // = 2
  case baz // = 3
  case foo2 // = 1
  case bar2 // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .testEnumWithDupValueUnspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .testEnumWithDupValueUnspecified
    case 1: self = .foo1
    case 2: self = .bar1
    case 3: self = .baz
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public init?(name: String) {
    switch name {
    case "testEnumWithDupValueUnspecified": self = .testEnumWithDupValueUnspecified
    case "foo1": self = .foo1
    case "bar1": self = .bar1
    case "baz": self = .baz
    case "foo2": self = .foo2
    case "bar2": self = .bar2
    default: return nil
    }
  }

  public init?(jsonName: String) {
    switch jsonName {
    case "TEST_ENUM_WITH_DUP_VALUE_UNSPECIFIED": self = .testEnumWithDupValueUnspecified
    case "FOO1": self = .foo1
    case "BAR1": self = .bar1
    case "BAZ": self = .baz
    case "FOO2": self = .foo2
    case "BAR2": self = .bar2
    default: return nil
    }
  }

  public init?(protoName: String) {
    switch protoName {
    case "TEST_ENUM_WITH_DUP_VALUE_UNSPECIFIED": self = .testEnumWithDupValueUnspecified
    case "FOO1": self = .foo1
    case "BAR1": self = .bar1
    case "BAZ": self = .baz
    case "FOO2": self = .foo2
    case "BAR2": self = .bar2
    default: return nil
    }
  }

  public var rawValue: Int {
    get {
      switch self {
      case .testEnumWithDupValueUnspecified: return 0
      case .foo1: return 1
      case .bar1: return 2
      case .baz: return 3
      case .foo2: return 1
      case .bar2: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }
  }

  public var json: String {
    get {
      switch self {
      case .testEnumWithDupValueUnspecified: return "\"TEST_ENUM_WITH_DUP_VALUE_UNSPECIFIED\""
      case .foo1: return "\"FOO1\""
      case .bar1: return "\"BAR1\""
      case .baz: return "\"BAZ\""
      case .foo2: return "\"FOO2\""
      case .bar2: return "\"BAR2\""
      case .UNRECOGNIZED(let i): return String(i)
      }
    }
  }

  public var hashValue: Int { return rawValue }

  public var debugDescription: String {
    get {
      switch self {
      case .testEnumWithDupValueUnspecified: return ".testEnumWithDupValueUnspecified"
      case .foo1: return ".foo1"
      case .bar1: return ".bar1"
      case .baz: return ".baz"
      case .foo2: return ".foo2"
      case .bar2: return ".bar2"
      case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
      }
    }
  }

}

///   Test an enum with large, unordered values.
public enum Proto3TestSparseEnum: ProtobufEnum {
  public typealias RawValue = Int
  case testSparseEnumUnspecified // = 0
  case sparseA // = 123
  case sparseB // = 62374
  case sparseC // = 12589234
  case sparseD // = -15
  case sparseE // = -53452

  ///   In proto3, value 0 must be the first one specified
  ///   SPARSE_F = 0;
  case sparseG // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .testSparseEnumUnspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .testSparseEnumUnspecified
    case 123: self = .sparseA
    case 62374: self = .sparseB
    case 12589234: self = .sparseC
    case -15: self = .sparseD
    case -53452: self = .sparseE
    case 2: self = .sparseG
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public init?(name: String) {
    switch name {
    case "testSparseEnumUnspecified": self = .testSparseEnumUnspecified
    case "sparseA": self = .sparseA
    case "sparseB": self = .sparseB
    case "sparseC": self = .sparseC
    case "sparseD": self = .sparseD
    case "sparseE": self = .sparseE
    case "sparseG": self = .sparseG
    default: return nil
    }
  }

  public init?(jsonName: String) {
    switch jsonName {
    case "TEST_SPARSE_ENUM_UNSPECIFIED": self = .testSparseEnumUnspecified
    case "SPARSE_A": self = .sparseA
    case "SPARSE_B": self = .sparseB
    case "SPARSE_C": self = .sparseC
    case "SPARSE_D": self = .sparseD
    case "SPARSE_E": self = .sparseE
    case "SPARSE_G": self = .sparseG
    default: return nil
    }
  }

  public init?(protoName: String) {
    switch protoName {
    case "TEST_SPARSE_ENUM_UNSPECIFIED": self = .testSparseEnumUnspecified
    case "SPARSE_A": self = .sparseA
    case "SPARSE_B": self = .sparseB
    case "SPARSE_C": self = .sparseC
    case "SPARSE_D": self = .sparseD
    case "SPARSE_E": self = .sparseE
    case "SPARSE_G": self = .sparseG
    default: return nil
    }
  }

  public var rawValue: Int {
    get {
      switch self {
      case .testSparseEnumUnspecified: return 0
      case .sparseA: return 123
      case .sparseB: return 62374
      case .sparseC: return 12589234
      case .sparseD: return -15
      case .sparseE: return -53452
      case .sparseG: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }
  }

  public var json: String {
    get {
      switch self {
      case .testSparseEnumUnspecified: return "\"TEST_SPARSE_ENUM_UNSPECIFIED\""
      case .sparseA: return "\"SPARSE_A\""
      case .sparseB: return "\"SPARSE_B\""
      case .sparseC: return "\"SPARSE_C\""
      case .sparseD: return "\"SPARSE_D\""
      case .sparseE: return "\"SPARSE_E\""
      case .sparseG: return "\"SPARSE_G\""
      case .UNRECOGNIZED(let i): return String(i)
      }
    }
  }

  public var hashValue: Int { return rawValue }

  public var debugDescription: String {
    get {
      switch self {
      case .testSparseEnumUnspecified: return ".testSparseEnumUnspecified"
      case .sparseA: return ".sparseA"
      case .sparseB: return ".sparseB"
      case .sparseC: return ".sparseC"
      case .sparseD: return ".sparseD"
      case .sparseE: return ".sparseE"
      case .sparseG: return ".sparseG"
      case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
      }
    }
  }

}

///   This proto includes every type of field in both singular and repeated
///   forms.
public struct Proto3TestAllTypes: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Proto3TestAllTypes"}
  public var protoMessageName: String {return "TestAllTypes"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [
    "singleInt32": 1,
    "singleInt64": 2,
    "singleUint32": 3,
    "singleUint64": 4,
    "singleSint32": 5,
    "singleSint64": 6,
    "singleFixed32": 7,
    "singleFixed64": 8,
    "singleSfixed32": 9,
    "singleSfixed64": 10,
    "singleFloat": 11,
    "singleDouble": 12,
    "singleBool": 13,
    "singleString": 14,
    "singleBytes": 15,
    "singleNestedMessage": 18,
    "singleForeignMessage": 19,
    "singleImportMessage": 20,
    "singleNestedEnum": 21,
    "singleForeignEnum": 22,
    "singleImportEnum": 23,
    "singlePublicImportMessage": 26,
    "repeatedInt32": 31,
    "repeatedInt64": 32,
    "repeatedUint32": 33,
    "repeatedUint64": 34,
    "repeatedSint32": 35,
    "repeatedSint64": 36,
    "repeatedFixed32": 37,
    "repeatedFixed64": 38,
    "repeatedSfixed32": 39,
    "repeatedSfixed64": 40,
    "repeatedFloat": 41,
    "repeatedDouble": 42,
    "repeatedBool": 43,
    "repeatedString": 44,
    "repeatedBytes": 45,
    "repeatedNestedMessage": 48,
    "repeatedForeignMessage": 49,
    "repeatedImportMessage": 50,
    "repeatedNestedEnum": 51,
    "repeatedForeignEnum": 52,
    "repeatedImportEnum": 53,
    "repeatedPublicImportMessage": 54,
    "oneofUint32": 111,
    "oneofNestedMessage": 112,
    "oneofString": 113,
    "oneofBytes": 114,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "single_int32": 1,
    "single_int64": 2,
    "single_uint32": 3,
    "single_uint64": 4,
    "single_sint32": 5,
    "single_sint64": 6,
    "single_fixed32": 7,
    "single_fixed64": 8,
    "single_sfixed32": 9,
    "single_sfixed64": 10,
    "single_float": 11,
    "single_double": 12,
    "single_bool": 13,
    "single_string": 14,
    "single_bytes": 15,
    "single_nested_message": 18,
    "single_foreign_message": 19,
    "single_import_message": 20,
    "single_nested_enum": 21,
    "single_foreign_enum": 22,
    "single_import_enum": 23,
    "single_public_import_message": 26,
    "repeated_int32": 31,
    "repeated_int64": 32,
    "repeated_uint32": 33,
    "repeated_uint64": 34,
    "repeated_sint32": 35,
    "repeated_sint64": 36,
    "repeated_fixed32": 37,
    "repeated_fixed64": 38,
    "repeated_sfixed32": 39,
    "repeated_sfixed64": 40,
    "repeated_float": 41,
    "repeated_double": 42,
    "repeated_bool": 43,
    "repeated_string": 44,
    "repeated_bytes": 45,
    "repeated_nested_message": 48,
    "repeated_foreign_message": 49,
    "repeated_import_message": 50,
    "repeated_nested_enum": 51,
    "repeated_foreign_enum": 52,
    "repeated_import_enum": 53,
    "repeated_public_import_message": 54,
    "oneof_uint32": 111,
    "oneof_nested_message": 112,
    "oneof_string": 113,
    "oneof_bytes": 114,
  ]}

  private class _StorageClass {
    typealias ProtobufExtendedMessage = Proto3TestAllTypes
    var _singleInt32: Int32 = 0
    var _singleInt64: Int64 = 0
    var _singleUint32: UInt32 = 0
    var _singleUint64: UInt64 = 0
    var _singleSint32: Int32 = 0
    var _singleSint64: Int64 = 0
    var _singleFixed32: UInt32 = 0
    var _singleFixed64: UInt64 = 0
    var _singleSfixed32: Int32 = 0
    var _singleSfixed64: Int64 = 0
    var _singleFloat: Float = 0
    var _singleDouble: Double = 0
    var _singleBool: Bool = false
    var _singleString: String = ""
    var _singleBytes: Data = Data()
    var _singleNestedMessage: Proto3TestAllTypes.NestedMessage? = nil
    var _singleForeignMessage: Proto3ForeignMessage? = nil
    var _singleImportMessage: Proto3ImportMessage? = nil
    var _singleNestedEnum: Proto3TestAllTypes.NestedEnum = Proto3TestAllTypes.NestedEnum.nestedEnumUnspecified
    var _singleForeignEnum: Proto3ForeignEnum = Proto3ForeignEnum.foreignUnspecified
    var _singleImportEnum: Proto3ImportEnum = Proto3ImportEnum.importEnumUnspecified
    var _singlePublicImportMessage: Proto3PublicImportMessage? = nil
    var _repeatedInt32: [Int32] = []
    var _repeatedInt64: [Int64] = []
    var _repeatedUint32: [UInt32] = []
    var _repeatedUint64: [UInt64] = []
    var _repeatedSint32: [Int32] = []
    var _repeatedSint64: [Int64] = []
    var _repeatedFixed32: [UInt32] = []
    var _repeatedFixed64: [UInt64] = []
    var _repeatedSfixed32: [Int32] = []
    var _repeatedSfixed64: [Int64] = []
    var _repeatedFloat: [Float] = []
    var _repeatedDouble: [Double] = []
    var _repeatedBool: [Bool] = []
    var _repeatedString: [String] = []
    var _repeatedBytes: [Data] = []
    var _repeatedNestedMessage: [Proto3TestAllTypes.NestedMessage] = []
    var _repeatedForeignMessage: [Proto3ForeignMessage] = []
    var _repeatedImportMessage: [Proto3ImportMessage] = []
    var _repeatedNestedEnum: [Proto3TestAllTypes.NestedEnum] = []
    var _repeatedForeignEnum: [Proto3ForeignEnum] = []
    var _repeatedImportEnum: [Proto3ImportEnum] = []
    var _repeatedPublicImportMessage: [Proto3PublicImportMessage] = []
    var _oneofField = Proto3TestAllTypes.OneOf_OneofField()

    init() {}

    func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_singleInt32)
      case 2: handled = try setter.decodeSingularField(fieldType: ProtobufInt64.self, value: &_singleInt64)
      case 3: handled = try setter.decodeSingularField(fieldType: ProtobufUInt32.self, value: &_singleUint32)
      case 4: handled = try setter.decodeSingularField(fieldType: ProtobufUInt64.self, value: &_singleUint64)
      case 5: handled = try setter.decodeSingularField(fieldType: ProtobufSInt32.self, value: &_singleSint32)
      case 6: handled = try setter.decodeSingularField(fieldType: ProtobufSInt64.self, value: &_singleSint64)
      case 7: handled = try setter.decodeSingularField(fieldType: ProtobufFixed32.self, value: &_singleFixed32)
      case 8: handled = try setter.decodeSingularField(fieldType: ProtobufFixed64.self, value: &_singleFixed64)
      case 9: handled = try setter.decodeSingularField(fieldType: ProtobufSFixed32.self, value: &_singleSfixed32)
      case 10: handled = try setter.decodeSingularField(fieldType: ProtobufSFixed64.self, value: &_singleSfixed64)
      case 11: handled = try setter.decodeSingularField(fieldType: ProtobufFloat.self, value: &_singleFloat)
      case 12: handled = try setter.decodeSingularField(fieldType: ProtobufDouble.self, value: &_singleDouble)
      case 13: handled = try setter.decodeSingularField(fieldType: ProtobufBool.self, value: &_singleBool)
      case 14: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &_singleString)
      case 15: handled = try setter.decodeSingularField(fieldType: ProtobufBytes.self, value: &_singleBytes)
      case 18: handled = try setter.decodeSingularMessageField(fieldType: Proto3TestAllTypes.NestedMessage.self, value: &_singleNestedMessage)
      case 19: handled = try setter.decodeSingularMessageField(fieldType: Proto3ForeignMessage.self, value: &_singleForeignMessage)
      case 20: handled = try setter.decodeSingularMessageField(fieldType: Proto3ImportMessage.self, value: &_singleImportMessage)
      case 21: handled = try setter.decodeSingularField(fieldType: Proto3TestAllTypes.NestedEnum.self, value: &_singleNestedEnum)
      case 22: handled = try setter.decodeSingularField(fieldType: Proto3ForeignEnum.self, value: &_singleForeignEnum)
      case 23: handled = try setter.decodeSingularField(fieldType: Proto3ImportEnum.self, value: &_singleImportEnum)
      case 26: handled = try setter.decodeSingularMessageField(fieldType: Proto3PublicImportMessage.self, value: &_singlePublicImportMessage)
      case 31: handled = try setter.decodePackedField(fieldType: ProtobufInt32.self, value: &_repeatedInt32)
      case 32: handled = try setter.decodePackedField(fieldType: ProtobufInt64.self, value: &_repeatedInt64)
      case 33: handled = try setter.decodePackedField(fieldType: ProtobufUInt32.self, value: &_repeatedUint32)
      case 34: handled = try setter.decodePackedField(fieldType: ProtobufUInt64.self, value: &_repeatedUint64)
      case 35: handled = try setter.decodePackedField(fieldType: ProtobufSInt32.self, value: &_repeatedSint32)
      case 36: handled = try setter.decodePackedField(fieldType: ProtobufSInt64.self, value: &_repeatedSint64)
      case 37: handled = try setter.decodePackedField(fieldType: ProtobufFixed32.self, value: &_repeatedFixed32)
      case 38: handled = try setter.decodePackedField(fieldType: ProtobufFixed64.self, value: &_repeatedFixed64)
      case 39: handled = try setter.decodePackedField(fieldType: ProtobufSFixed32.self, value: &_repeatedSfixed32)
      case 40: handled = try setter.decodePackedField(fieldType: ProtobufSFixed64.self, value: &_repeatedSfixed64)
      case 41: handled = try setter.decodePackedField(fieldType: ProtobufFloat.self, value: &_repeatedFloat)
      case 42: handled = try setter.decodePackedField(fieldType: ProtobufDouble.self, value: &_repeatedDouble)
      case 43: handled = try setter.decodePackedField(fieldType: ProtobufBool.self, value: &_repeatedBool)
      case 44: handled = try setter.decodeRepeatedField(fieldType: ProtobufString.self, value: &_repeatedString)
      case 45: handled = try setter.decodeRepeatedField(fieldType: ProtobufBytes.self, value: &_repeatedBytes)
      case 48: handled = try setter.decodeRepeatedMessageField(fieldType: Proto3TestAllTypes.NestedMessage.self, value: &_repeatedNestedMessage)
      case 49: handled = try setter.decodeRepeatedMessageField(fieldType: Proto3ForeignMessage.self, value: &_repeatedForeignMessage)
      case 50: handled = try setter.decodeRepeatedMessageField(fieldType: Proto3ImportMessage.self, value: &_repeatedImportMessage)
      case 51: handled = try setter.decodePackedField(fieldType: Proto3TestAllTypes.NestedEnum.self, value: &_repeatedNestedEnum)
      case 52: handled = try setter.decodePackedField(fieldType: Proto3ForeignEnum.self, value: &_repeatedForeignEnum)
      case 53: handled = try setter.decodePackedField(fieldType: Proto3ImportEnum.self, value: &_repeatedImportEnum)
      case 54: handled = try setter.decodeRepeatedMessageField(fieldType: Proto3PublicImportMessage.self, value: &_repeatedPublicImportMessage)
      case 111, 112, 113, 114:
        handled = try _oneofField.decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
      default:
        handled = false
      }
      return handled
    }

    func traverse(visitor: inout ProtobufVisitor) throws {
      if _singleInt32 != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _singleInt32, protoFieldNumber: 1, protoFieldName: "single_int32", jsonFieldName: "singleInt32", swiftFieldName: "singleInt32")
      }
      if _singleInt64 != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt64.self, value: _singleInt64, protoFieldNumber: 2, protoFieldName: "single_int64", jsonFieldName: "singleInt64", swiftFieldName: "singleInt64")
      }
      if _singleUint32 != 0 {
        try visitor.visitSingularField(fieldType: ProtobufUInt32.self, value: _singleUint32, protoFieldNumber: 3, protoFieldName: "single_uint32", jsonFieldName: "singleUint32", swiftFieldName: "singleUint32")
      }
      if _singleUint64 != 0 {
        try visitor.visitSingularField(fieldType: ProtobufUInt64.self, value: _singleUint64, protoFieldNumber: 4, protoFieldName: "single_uint64", jsonFieldName: "singleUint64", swiftFieldName: "singleUint64")
      }
      if _singleSint32 != 0 {
        try visitor.visitSingularField(fieldType: ProtobufSInt32.self, value: _singleSint32, protoFieldNumber: 5, protoFieldName: "single_sint32", jsonFieldName: "singleSint32", swiftFieldName: "singleSint32")
      }
      if _singleSint64 != 0 {
        try visitor.visitSingularField(fieldType: ProtobufSInt64.self, value: _singleSint64, protoFieldNumber: 6, protoFieldName: "single_sint64", jsonFieldName: "singleSint64", swiftFieldName: "singleSint64")
      }
      if _singleFixed32 != 0 {
        try visitor.visitSingularField(fieldType: ProtobufFixed32.self, value: _singleFixed32, protoFieldNumber: 7, protoFieldName: "single_fixed32", jsonFieldName: "singleFixed32", swiftFieldName: "singleFixed32")
      }
      if _singleFixed64 != 0 {
        try visitor.visitSingularField(fieldType: ProtobufFixed64.self, value: _singleFixed64, protoFieldNumber: 8, protoFieldName: "single_fixed64", jsonFieldName: "singleFixed64", swiftFieldName: "singleFixed64")
      }
      if _singleSfixed32 != 0 {
        try visitor.visitSingularField(fieldType: ProtobufSFixed32.self, value: _singleSfixed32, protoFieldNumber: 9, protoFieldName: "single_sfixed32", jsonFieldName: "singleSfixed32", swiftFieldName: "singleSfixed32")
      }
      if _singleSfixed64 != 0 {
        try visitor.visitSingularField(fieldType: ProtobufSFixed64.self, value: _singleSfixed64, protoFieldNumber: 10, protoFieldName: "single_sfixed64", jsonFieldName: "singleSfixed64", swiftFieldName: "singleSfixed64")
      }
      if _singleFloat != 0 {
        try visitor.visitSingularField(fieldType: ProtobufFloat.self, value: _singleFloat, protoFieldNumber: 11, protoFieldName: "single_float", jsonFieldName: "singleFloat", swiftFieldName: "singleFloat")
      }
      if _singleDouble != 0 {
        try visitor.visitSingularField(fieldType: ProtobufDouble.self, value: _singleDouble, protoFieldNumber: 12, protoFieldName: "single_double", jsonFieldName: "singleDouble", swiftFieldName: "singleDouble")
      }
      if _singleBool != false {
        try visitor.visitSingularField(fieldType: ProtobufBool.self, value: _singleBool, protoFieldNumber: 13, protoFieldName: "single_bool", jsonFieldName: "singleBool", swiftFieldName: "singleBool")
      }
      if _singleString != "" {
        try visitor.visitSingularField(fieldType: ProtobufString.self, value: _singleString, protoFieldNumber: 14, protoFieldName: "single_string", jsonFieldName: "singleString", swiftFieldName: "singleString")
      }
      if _singleBytes != Data() {
        try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: _singleBytes, protoFieldNumber: 15, protoFieldName: "single_bytes", jsonFieldName: "singleBytes", swiftFieldName: "singleBytes")
      }
      if let v = _singleNestedMessage {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 18, protoFieldName: "single_nested_message", jsonFieldName: "singleNestedMessage", swiftFieldName: "singleNestedMessage")
      }
      if let v = _singleForeignMessage {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 19, protoFieldName: "single_foreign_message", jsonFieldName: "singleForeignMessage", swiftFieldName: "singleForeignMessage")
      }
      if let v = _singleImportMessage {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 20, protoFieldName: "single_import_message", jsonFieldName: "singleImportMessage", swiftFieldName: "singleImportMessage")
      }
      if _singleNestedEnum != Proto3TestAllTypes.NestedEnum.nestedEnumUnspecified {
        try visitor.visitSingularField(fieldType: Proto3TestAllTypes.NestedEnum.self, value: _singleNestedEnum, protoFieldNumber: 21, protoFieldName: "single_nested_enum", jsonFieldName: "singleNestedEnum", swiftFieldName: "singleNestedEnum")
      }
      if _singleForeignEnum != Proto3ForeignEnum.foreignUnspecified {
        try visitor.visitSingularField(fieldType: Proto3ForeignEnum.self, value: _singleForeignEnum, protoFieldNumber: 22, protoFieldName: "single_foreign_enum", jsonFieldName: "singleForeignEnum", swiftFieldName: "singleForeignEnum")
      }
      if _singleImportEnum != Proto3ImportEnum.importEnumUnspecified {
        try visitor.visitSingularField(fieldType: Proto3ImportEnum.self, value: _singleImportEnum, protoFieldNumber: 23, protoFieldName: "single_import_enum", jsonFieldName: "singleImportEnum", swiftFieldName: "singleImportEnum")
      }
      if let v = _singlePublicImportMessage {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 26, protoFieldName: "single_public_import_message", jsonFieldName: "singlePublicImportMessage", swiftFieldName: "singlePublicImportMessage")
      }
      if !_repeatedInt32.isEmpty {
        try visitor.visitPackedField(fieldType: ProtobufInt32.self, value: _repeatedInt32, protoFieldNumber: 31, protoFieldName: "repeated_int32", jsonFieldName: "repeatedInt32", swiftFieldName: "repeatedInt32")
      }
      if !_repeatedInt64.isEmpty {
        try visitor.visitPackedField(fieldType: ProtobufInt64.self, value: _repeatedInt64, protoFieldNumber: 32, protoFieldName: "repeated_int64", jsonFieldName: "repeatedInt64", swiftFieldName: "repeatedInt64")
      }
      if !_repeatedUint32.isEmpty {
        try visitor.visitPackedField(fieldType: ProtobufUInt32.self, value: _repeatedUint32, protoFieldNumber: 33, protoFieldName: "repeated_uint32", jsonFieldName: "repeatedUint32", swiftFieldName: "repeatedUint32")
      }
      if !_repeatedUint64.isEmpty {
        try visitor.visitPackedField(fieldType: ProtobufUInt64.self, value: _repeatedUint64, protoFieldNumber: 34, protoFieldName: "repeated_uint64", jsonFieldName: "repeatedUint64", swiftFieldName: "repeatedUint64")
      }
      if !_repeatedSint32.isEmpty {
        try visitor.visitPackedField(fieldType: ProtobufSInt32.self, value: _repeatedSint32, protoFieldNumber: 35, protoFieldName: "repeated_sint32", jsonFieldName: "repeatedSint32", swiftFieldName: "repeatedSint32")
      }
      if !_repeatedSint64.isEmpty {
        try visitor.visitPackedField(fieldType: ProtobufSInt64.self, value: _repeatedSint64, protoFieldNumber: 36, protoFieldName: "repeated_sint64", jsonFieldName: "repeatedSint64", swiftFieldName: "repeatedSint64")
      }
      if !_repeatedFixed32.isEmpty {
        try visitor.visitPackedField(fieldType: ProtobufFixed32.self, value: _repeatedFixed32, protoFieldNumber: 37, protoFieldName: "repeated_fixed32", jsonFieldName: "repeatedFixed32", swiftFieldName: "repeatedFixed32")
      }
      if !_repeatedFixed64.isEmpty {
        try visitor.visitPackedField(fieldType: ProtobufFixed64.self, value: _repeatedFixed64, protoFieldNumber: 38, protoFieldName: "repeated_fixed64", jsonFieldName: "repeatedFixed64", swiftFieldName: "repeatedFixed64")
      }
      if !_repeatedSfixed32.isEmpty {
        try visitor.visitPackedField(fieldType: ProtobufSFixed32.self, value: _repeatedSfixed32, protoFieldNumber: 39, protoFieldName: "repeated_sfixed32", jsonFieldName: "repeatedSfixed32", swiftFieldName: "repeatedSfixed32")
      }
      if !_repeatedSfixed64.isEmpty {
        try visitor.visitPackedField(fieldType: ProtobufSFixed64.self, value: _repeatedSfixed64, protoFieldNumber: 40, protoFieldName: "repeated_sfixed64", jsonFieldName: "repeatedSfixed64", swiftFieldName: "repeatedSfixed64")
      }
      if !_repeatedFloat.isEmpty {
        try visitor.visitPackedField(fieldType: ProtobufFloat.self, value: _repeatedFloat, protoFieldNumber: 41, protoFieldName: "repeated_float", jsonFieldName: "repeatedFloat", swiftFieldName: "repeatedFloat")
      }
      if !_repeatedDouble.isEmpty {
        try visitor.visitPackedField(fieldType: ProtobufDouble.self, value: _repeatedDouble, protoFieldNumber: 42, protoFieldName: "repeated_double", jsonFieldName: "repeatedDouble", swiftFieldName: "repeatedDouble")
      }
      if !_repeatedBool.isEmpty {
        try visitor.visitPackedField(fieldType: ProtobufBool.self, value: _repeatedBool, protoFieldNumber: 43, protoFieldName: "repeated_bool", jsonFieldName: "repeatedBool", swiftFieldName: "repeatedBool")
      }
      if !_repeatedString.isEmpty {
        try visitor.visitRepeatedField(fieldType: ProtobufString.self, value: _repeatedString, protoFieldNumber: 44, protoFieldName: "repeated_string", jsonFieldName: "repeatedString", swiftFieldName: "repeatedString")
      }
      if !_repeatedBytes.isEmpty {
        try visitor.visitRepeatedField(fieldType: ProtobufBytes.self, value: _repeatedBytes, protoFieldNumber: 45, protoFieldName: "repeated_bytes", jsonFieldName: "repeatedBytes", swiftFieldName: "repeatedBytes")
      }
      if !_repeatedNestedMessage.isEmpty {
        try visitor.visitRepeatedMessageField(value: _repeatedNestedMessage, protoFieldNumber: 48, protoFieldName: "repeated_nested_message", jsonFieldName: "repeatedNestedMessage", swiftFieldName: "repeatedNestedMessage")
      }
      if !_repeatedForeignMessage.isEmpty {
        try visitor.visitRepeatedMessageField(value: _repeatedForeignMessage, protoFieldNumber: 49, protoFieldName: "repeated_foreign_message", jsonFieldName: "repeatedForeignMessage", swiftFieldName: "repeatedForeignMessage")
      }
      if !_repeatedImportMessage.isEmpty {
        try visitor.visitRepeatedMessageField(value: _repeatedImportMessage, protoFieldNumber: 50, protoFieldName: "repeated_import_message", jsonFieldName: "repeatedImportMessage", swiftFieldName: "repeatedImportMessage")
      }
      if !_repeatedNestedEnum.isEmpty {
        try visitor.visitPackedField(fieldType: Proto3TestAllTypes.NestedEnum.self, value: _repeatedNestedEnum, protoFieldNumber: 51, protoFieldName: "repeated_nested_enum", jsonFieldName: "repeatedNestedEnum", swiftFieldName: "repeatedNestedEnum")
      }
      if !_repeatedForeignEnum.isEmpty {
        try visitor.visitPackedField(fieldType: Proto3ForeignEnum.self, value: _repeatedForeignEnum, protoFieldNumber: 52, protoFieldName: "repeated_foreign_enum", jsonFieldName: "repeatedForeignEnum", swiftFieldName: "repeatedForeignEnum")
      }
      if !_repeatedImportEnum.isEmpty {
        try visitor.visitPackedField(fieldType: Proto3ImportEnum.self, value: _repeatedImportEnum, protoFieldNumber: 53, protoFieldName: "repeated_import_enum", jsonFieldName: "repeatedImportEnum", swiftFieldName: "repeatedImportEnum")
      }
      if !_repeatedPublicImportMessage.isEmpty {
        try visitor.visitRepeatedMessageField(value: _repeatedPublicImportMessage, protoFieldNumber: 54, protoFieldName: "repeated_public_import_message", jsonFieldName: "repeatedPublicImportMessage", swiftFieldName: "repeatedPublicImportMessage")
      }
      try _oneofField.traverse(visitor: &visitor, start: 111, end: 115)
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _singleInt32 != other._singleInt32 {return false}
      if _singleInt64 != other._singleInt64 {return false}
      if _singleUint32 != other._singleUint32 {return false}
      if _singleUint64 != other._singleUint64 {return false}
      if _singleSint32 != other._singleSint32 {return false}
      if _singleSint64 != other._singleSint64 {return false}
      if _singleFixed32 != other._singleFixed32 {return false}
      if _singleFixed64 != other._singleFixed64 {return false}
      if _singleSfixed32 != other._singleSfixed32 {return false}
      if _singleSfixed64 != other._singleSfixed64 {return false}
      if _singleFloat != other._singleFloat {return false}
      if _singleDouble != other._singleDouble {return false}
      if _singleBool != other._singleBool {return false}
      if _singleString != other._singleString {return false}
      if _singleBytes != other._singleBytes {return false}
      if _singleNestedMessage != other._singleNestedMessage {return false}
      if _singleForeignMessage != other._singleForeignMessage {return false}
      if _singleImportMessage != other._singleImportMessage {return false}
      if _singleNestedEnum != other._singleNestedEnum {return false}
      if _singleForeignEnum != other._singleForeignEnum {return false}
      if _singleImportEnum != other._singleImportEnum {return false}
      if _singlePublicImportMessage != other._singlePublicImportMessage {return false}
      if _repeatedInt32 != other._repeatedInt32 {return false}
      if _repeatedInt64 != other._repeatedInt64 {return false}
      if _repeatedUint32 != other._repeatedUint32 {return false}
      if _repeatedUint64 != other._repeatedUint64 {return false}
      if _repeatedSint32 != other._repeatedSint32 {return false}
      if _repeatedSint64 != other._repeatedSint64 {return false}
      if _repeatedFixed32 != other._repeatedFixed32 {return false}
      if _repeatedFixed64 != other._repeatedFixed64 {return false}
      if _repeatedSfixed32 != other._repeatedSfixed32 {return false}
      if _repeatedSfixed64 != other._repeatedSfixed64 {return false}
      if _repeatedFloat != other._repeatedFloat {return false}
      if _repeatedDouble != other._repeatedDouble {return false}
      if _repeatedBool != other._repeatedBool {return false}
      if _repeatedString != other._repeatedString {return false}
      if _repeatedBytes != other._repeatedBytes {return false}
      if _repeatedNestedMessage != other._repeatedNestedMessage {return false}
      if _repeatedForeignMessage != other._repeatedForeignMessage {return false}
      if _repeatedImportMessage != other._repeatedImportMessage {return false}
      if _repeatedNestedEnum != other._repeatedNestedEnum {return false}
      if _repeatedForeignEnum != other._repeatedForeignEnum {return false}
      if _repeatedImportEnum != other._repeatedImportEnum {return false}
      if _repeatedPublicImportMessage != other._repeatedPublicImportMessage {return false}
      if _oneofField != other._oneofField {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._singleInt32 = _singleInt32
      clone._singleInt64 = _singleInt64
      clone._singleUint32 = _singleUint32
      clone._singleUint64 = _singleUint64
      clone._singleSint32 = _singleSint32
      clone._singleSint64 = _singleSint64
      clone._singleFixed32 = _singleFixed32
      clone._singleFixed64 = _singleFixed64
      clone._singleSfixed32 = _singleSfixed32
      clone._singleSfixed64 = _singleSfixed64
      clone._singleFloat = _singleFloat
      clone._singleDouble = _singleDouble
      clone._singleBool = _singleBool
      clone._singleString = _singleString
      clone._singleBytes = _singleBytes
      clone._singleNestedMessage = _singleNestedMessage
      clone._singleForeignMessage = _singleForeignMessage
      clone._singleImportMessage = _singleImportMessage
      clone._singleNestedEnum = _singleNestedEnum
      clone._singleForeignEnum = _singleForeignEnum
      clone._singleImportEnum = _singleImportEnum
      clone._singlePublicImportMessage = _singlePublicImportMessage
      clone._repeatedInt32 = _repeatedInt32
      clone._repeatedInt64 = _repeatedInt64
      clone._repeatedUint32 = _repeatedUint32
      clone._repeatedUint64 = _repeatedUint64
      clone._repeatedSint32 = _repeatedSint32
      clone._repeatedSint64 = _repeatedSint64
      clone._repeatedFixed32 = _repeatedFixed32
      clone._repeatedFixed64 = _repeatedFixed64
      clone._repeatedSfixed32 = _repeatedSfixed32
      clone._repeatedSfixed64 = _repeatedSfixed64
      clone._repeatedFloat = _repeatedFloat
      clone._repeatedDouble = _repeatedDouble
      clone._repeatedBool = _repeatedBool
      clone._repeatedString = _repeatedString
      clone._repeatedBytes = _repeatedBytes
      clone._repeatedNestedMessage = _repeatedNestedMessage
      clone._repeatedForeignMessage = _repeatedForeignMessage
      clone._repeatedImportMessage = _repeatedImportMessage
      clone._repeatedNestedEnum = _repeatedNestedEnum
      clone._repeatedForeignEnum = _repeatedForeignEnum
      clone._repeatedImportEnum = _repeatedImportEnum
      clone._repeatedPublicImportMessage = _repeatedPublicImportMessage
      clone._oneofField = _oneofField
      return clone
    }
  }

  private var _storage = _StorageClass()

  public enum OneOf_OneofField: ExpressibleByNilLiteral, ProtobufOneofEnum {
    case oneofUint32(UInt32)
    case oneofNestedMessage(Proto3TestAllTypes.NestedMessage)
    case oneofString(String)
    case oneofBytes(Data)
    case None

    public init(nilLiteral: ()) {
      self = .None
    }

    public init() {
      self = .None
    }

    public mutating func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      if self != .None && setter.rejectConflictingOneof {
        throw ProtobufDecodingError.duplicatedOneOf
      }
      let handled: Bool
      switch protoFieldNumber {
      case 111:
        var value = UInt32()
        handled = try setter.decodeSingularField(fieldType: ProtobufUInt32.self, value: &value)
        self = .oneofUint32(value)
      case 112:
        var value: Proto3TestAllTypes.NestedMessage?
        handled = try setter.decodeOptionalMessageField(fieldType: Proto3TestAllTypes.NestedMessage.self, value: &value)
        if let value = value, handled {
          self = .oneofNestedMessage(value)
        }
      case 113:
        var value = String()
        handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &value)
        self = .oneofString(value)
      case 114:
        var value = Data()
        handled = try setter.decodeSingularField(fieldType: ProtobufBytes.self, value: &value)
        self = .oneofBytes(value)
      default:
        handled = false
        self = .None
      }
      return handled
    }

    public func traverse(visitor: inout ProtobufVisitor, start: Int, end: Int) throws {
      switch self {
      case .oneofUint32(let v):
        if start <= 111 && 111 < end {
          try visitor.visitSingularField(fieldType: ProtobufUInt32.self, value: v, protoFieldNumber: 111, protoFieldName: "oneof_uint32", jsonFieldName: "oneofUint32", swiftFieldName: "oneofUint32")
        }
      case .oneofNestedMessage(let v):
        if start <= 112 && 112 < end {
          try visitor.visitSingularMessageField(value: v, protoFieldNumber: 112, protoFieldName: "oneof_nested_message", jsonFieldName: "oneofNestedMessage", swiftFieldName: "oneofNestedMessage")
        }
      case .oneofString(let v):
        if start <= 113 && 113 < end {
          try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 113, protoFieldName: "oneof_string", jsonFieldName: "oneofString", swiftFieldName: "oneofString")
        }
      case .oneofBytes(let v):
        if start <= 114 && 114 < end {
          try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: v, protoFieldNumber: 114, protoFieldName: "oneof_bytes", jsonFieldName: "oneofBytes", swiftFieldName: "oneofBytes")
        }
      case .None:
        break
      }
    }
  }

  public enum NestedEnum: ProtobufEnum {
    public typealias RawValue = Int
    case nestedEnumUnspecified // = 0
    case foo // = 1
    case bar // = 2
    case baz // = 3

    ///   Intentionally negative.
    case neg // = -1
    case UNRECOGNIZED(Int)

    public init() {
      self = .nestedEnumUnspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .nestedEnumUnspecified
      case 1: self = .foo
      case 2: self = .bar
      case 3: self = .baz
      case -1: self = .neg
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "nestedEnumUnspecified": self = .nestedEnumUnspecified
      case "foo": self = .foo
      case "bar": self = .bar
      case "baz": self = .baz
      case "neg": self = .neg
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "NESTED_ENUM_UNSPECIFIED": self = .nestedEnumUnspecified
      case "FOO": self = .foo
      case "BAR": self = .bar
      case "BAZ": self = .baz
      case "NEG": self = .neg
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "NESTED_ENUM_UNSPECIFIED": self = .nestedEnumUnspecified
      case "FOO": self = .foo
      case "BAR": self = .bar
      case "BAZ": self = .baz
      case "NEG": self = .neg
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .nestedEnumUnspecified: return 0
        case .foo: return 1
        case .bar: return 2
        case .baz: return 3
        case .neg: return -1
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .nestedEnumUnspecified: return "\"NESTED_ENUM_UNSPECIFIED\""
        case .foo: return "\"FOO\""
        case .bar: return "\"BAR\""
        case .baz: return "\"BAZ\""
        case .neg: return "\"NEG\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .nestedEnumUnspecified: return ".nestedEnumUnspecified"
        case .foo: return ".foo"
        case .bar: return ".bar"
        case .baz: return ".baz"
        case .neg: return ".neg"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public struct NestedMessage: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "Proto3TestAllTypes.NestedMessage"}
    public var protoMessageName: String {return "NestedMessage"}
    public var protoPackageName: String {return "protobuf_unittest"}
    public var jsonFieldNames: [String: Int] {return [
      "bb": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "bb": 1,
    ]}

    ///   The field name "b" fails to compile in proto1 because it conflicts with
    ///   a local variable named "b" in one of the generated methods.  Doh.
    ///   This file needs to compile in proto1 to test backwards-compatibility.
    public var bb: Int32 = 0

    public init() {}

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &bb)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if bb != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: bb, protoFieldNumber: 1, protoFieldName: "bb", jsonFieldName: "bb", swiftFieldName: "bb")
      }
    }

    public func _protoc_generated_isEqualTo(other: Proto3TestAllTypes.NestedMessage) -> Bool {
      if bb != other.bb {return false}
      return true
    }
  }

  ///   Singular
  public var singleInt32: Int32 {
    get {return _storage._singleInt32}
    set {_uniqueStorage()._singleInt32 = newValue}
  }

  public var singleInt64: Int64 {
    get {return _storage._singleInt64}
    set {_uniqueStorage()._singleInt64 = newValue}
  }

  public var singleUint32: UInt32 {
    get {return _storage._singleUint32}
    set {_uniqueStorage()._singleUint32 = newValue}
  }

  public var singleUint64: UInt64 {
    get {return _storage._singleUint64}
    set {_uniqueStorage()._singleUint64 = newValue}
  }

  public var singleSint32: Int32 {
    get {return _storage._singleSint32}
    set {_uniqueStorage()._singleSint32 = newValue}
  }

  public var singleSint64: Int64 {
    get {return _storage._singleSint64}
    set {_uniqueStorage()._singleSint64 = newValue}
  }

  public var singleFixed32: UInt32 {
    get {return _storage._singleFixed32}
    set {_uniqueStorage()._singleFixed32 = newValue}
  }

  public var singleFixed64: UInt64 {
    get {return _storage._singleFixed64}
    set {_uniqueStorage()._singleFixed64 = newValue}
  }

  public var singleSfixed32: Int32 {
    get {return _storage._singleSfixed32}
    set {_uniqueStorage()._singleSfixed32 = newValue}
  }

  public var singleSfixed64: Int64 {
    get {return _storage._singleSfixed64}
    set {_uniqueStorage()._singleSfixed64 = newValue}
  }

  public var singleFloat: Float {
    get {return _storage._singleFloat}
    set {_uniqueStorage()._singleFloat = newValue}
  }

  public var singleDouble: Double {
    get {return _storage._singleDouble}
    set {_uniqueStorage()._singleDouble = newValue}
  }

  public var singleBool: Bool {
    get {return _storage._singleBool}
    set {_uniqueStorage()._singleBool = newValue}
  }

  public var singleString: String {
    get {return _storage._singleString}
    set {_uniqueStorage()._singleString = newValue}
  }

  public var singleBytes: Data {
    get {return _storage._singleBytes}
    set {_uniqueStorage()._singleBytes = newValue}
  }

  public var singleNestedMessage: Proto3TestAllTypes.NestedMessage {
    get {return _storage._singleNestedMessage ?? Proto3TestAllTypes.NestedMessage()}
    set {_uniqueStorage()._singleNestedMessage = newValue}
  }
  public var hasSingleNestedMessage: Bool {
    return _storage._singleNestedMessage != nil
  }
  public mutating func clearSingleNestedMessage() {
    return _storage._singleNestedMessage = nil
  }

  public var singleForeignMessage: Proto3ForeignMessage {
    get {return _storage._singleForeignMessage ?? Proto3ForeignMessage()}
    set {_uniqueStorage()._singleForeignMessage = newValue}
  }
  public var hasSingleForeignMessage: Bool {
    return _storage._singleForeignMessage != nil
  }
  public mutating func clearSingleForeignMessage() {
    return _storage._singleForeignMessage = nil
  }

  public var singleImportMessage: Proto3ImportMessage {
    get {return _storage._singleImportMessage ?? Proto3ImportMessage()}
    set {_uniqueStorage()._singleImportMessage = newValue}
  }
  public var hasSingleImportMessage: Bool {
    return _storage._singleImportMessage != nil
  }
  public mutating func clearSingleImportMessage() {
    return _storage._singleImportMessage = nil
  }

  public var singleNestedEnum: Proto3TestAllTypes.NestedEnum {
    get {return _storage._singleNestedEnum}
    set {_uniqueStorage()._singleNestedEnum = newValue}
  }

  public var singleForeignEnum: Proto3ForeignEnum {
    get {return _storage._singleForeignEnum}
    set {_uniqueStorage()._singleForeignEnum = newValue}
  }

  public var singleImportEnum: Proto3ImportEnum {
    get {return _storage._singleImportEnum}
    set {_uniqueStorage()._singleImportEnum = newValue}
  }

  ///   Defined in unittest_import_public.proto
  public var singlePublicImportMessage: Proto3PublicImportMessage {
    get {return _storage._singlePublicImportMessage ?? Proto3PublicImportMessage()}
    set {_uniqueStorage()._singlePublicImportMessage = newValue}
  }
  public var hasSinglePublicImportMessage: Bool {
    return _storage._singlePublicImportMessage != nil
  }
  public mutating func clearSinglePublicImportMessage() {
    return _storage._singlePublicImportMessage = nil
  }

  ///   Repeated
  public var repeatedInt32: [Int32] {
    get {return _storage._repeatedInt32}
    set {_uniqueStorage()._repeatedInt32 = newValue}
  }

  public var repeatedInt64: [Int64] {
    get {return _storage._repeatedInt64}
    set {_uniqueStorage()._repeatedInt64 = newValue}
  }

  public var repeatedUint32: [UInt32] {
    get {return _storage._repeatedUint32}
    set {_uniqueStorage()._repeatedUint32 = newValue}
  }

  public var repeatedUint64: [UInt64] {
    get {return _storage._repeatedUint64}
    set {_uniqueStorage()._repeatedUint64 = newValue}
  }

  public var repeatedSint32: [Int32] {
    get {return _storage._repeatedSint32}
    set {_uniqueStorage()._repeatedSint32 = newValue}
  }

  public var repeatedSint64: [Int64] {
    get {return _storage._repeatedSint64}
    set {_uniqueStorage()._repeatedSint64 = newValue}
  }

  public var repeatedFixed32: [UInt32] {
    get {return _storage._repeatedFixed32}
    set {_uniqueStorage()._repeatedFixed32 = newValue}
  }

  public var repeatedFixed64: [UInt64] {
    get {return _storage._repeatedFixed64}
    set {_uniqueStorage()._repeatedFixed64 = newValue}
  }

  public var repeatedSfixed32: [Int32] {
    get {return _storage._repeatedSfixed32}
    set {_uniqueStorage()._repeatedSfixed32 = newValue}
  }

  public var repeatedSfixed64: [Int64] {
    get {return _storage._repeatedSfixed64}
    set {_uniqueStorage()._repeatedSfixed64 = newValue}
  }

  public var repeatedFloat: [Float] {
    get {return _storage._repeatedFloat}
    set {_uniqueStorage()._repeatedFloat = newValue}
  }

  public var repeatedDouble: [Double] {
    get {return _storage._repeatedDouble}
    set {_uniqueStorage()._repeatedDouble = newValue}
  }

  public var repeatedBool: [Bool] {
    get {return _storage._repeatedBool}
    set {_uniqueStorage()._repeatedBool = newValue}
  }

  public var repeatedString: [String] {
    get {return _storage._repeatedString}
    set {_uniqueStorage()._repeatedString = newValue}
  }

  public var repeatedBytes: [Data] {
    get {return _storage._repeatedBytes}
    set {_uniqueStorage()._repeatedBytes = newValue}
  }

  public var repeatedNestedMessage: [Proto3TestAllTypes.NestedMessage] {
    get {return _storage._repeatedNestedMessage}
    set {_uniqueStorage()._repeatedNestedMessage = newValue}
  }

  public var repeatedForeignMessage: [Proto3ForeignMessage] {
    get {return _storage._repeatedForeignMessage}
    set {_uniqueStorage()._repeatedForeignMessage = newValue}
  }

  public var repeatedImportMessage: [Proto3ImportMessage] {
    get {return _storage._repeatedImportMessage}
    set {_uniqueStorage()._repeatedImportMessage = newValue}
  }

  public var repeatedNestedEnum: [Proto3TestAllTypes.NestedEnum] {
    get {return _storage._repeatedNestedEnum}
    set {_uniqueStorage()._repeatedNestedEnum = newValue}
  }

  public var repeatedForeignEnum: [Proto3ForeignEnum] {
    get {return _storage._repeatedForeignEnum}
    set {_uniqueStorage()._repeatedForeignEnum = newValue}
  }

  public var repeatedImportEnum: [Proto3ImportEnum] {
    get {return _storage._repeatedImportEnum}
    set {_uniqueStorage()._repeatedImportEnum = newValue}
  }

  ///   Defined in unittest_import_public.proto
  public var repeatedPublicImportMessage: [Proto3PublicImportMessage] {
    get {return _storage._repeatedPublicImportMessage}
    set {_uniqueStorage()._repeatedPublicImportMessage = newValue}
  }

  public var oneofUint32: UInt32 {
    get {
      if case .oneofUint32(let v) = _storage._oneofField {
        return v
      }
      return 0
    }
    set {
      _uniqueStorage()._oneofField = .oneofUint32(newValue)
    }
  }

  public var oneofNestedMessage: Proto3TestAllTypes.NestedMessage {
    get {
      if case .oneofNestedMessage(let v) = _storage._oneofField {
        return v
      }
      return Proto3TestAllTypes.NestedMessage()
    }
    set {
      _uniqueStorage()._oneofField = .oneofNestedMessage(newValue)
    }
  }

  public var oneofString: String {
    get {
      if case .oneofString(let v) = _storage._oneofField {
        return v
      }
      return ""
    }
    set {
      _uniqueStorage()._oneofField = .oneofString(newValue)
    }
  }

  public var oneofBytes: Data {
    get {
      if case .oneofBytes(let v) = _storage._oneofField {
        return v
      }
      return Data()
    }
    set {
      _uniqueStorage()._oneofField = .oneofBytes(newValue)
    }
  }

  public var oneofField: OneOf_OneofField {
    get {return _storage._oneofField}
    set {
      _uniqueStorage()._oneofField = newValue
    }
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Proto3TestAllTypes) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

///   This proto includes a recusively nested message.
public struct Proto3NestedTestAllTypes: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Proto3NestedTestAllTypes"}
  public var protoMessageName: String {return "NestedTestAllTypes"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [
    "child": 1,
    "payload": 2,
    "repeatedChild": 3,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "child": 1,
    "payload": 2,
    "repeated_child": 3,
  ]}

  private class _StorageClass {
    typealias ProtobufExtendedMessage = Proto3NestedTestAllTypes
    var _child: Proto3NestedTestAllTypes? = nil
    var _payload: Proto3TestAllTypes? = nil
    var _repeatedChild: [Proto3NestedTestAllTypes] = []

    init() {}

    func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularMessageField(fieldType: Proto3NestedTestAllTypes.self, value: &_child)
      case 2: handled = try setter.decodeSingularMessageField(fieldType: Proto3TestAllTypes.self, value: &_payload)
      case 3: handled = try setter.decodeRepeatedMessageField(fieldType: Proto3NestedTestAllTypes.self, value: &_repeatedChild)
      default:
        handled = false
      }
      return handled
    }

    func traverse(visitor: inout ProtobufVisitor) throws {
      if let v = _child {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 1, protoFieldName: "child", jsonFieldName: "child", swiftFieldName: "child")
      }
      if let v = _payload {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 2, protoFieldName: "payload", jsonFieldName: "payload", swiftFieldName: "payload")
      }
      if !_repeatedChild.isEmpty {
        try visitor.visitRepeatedMessageField(value: _repeatedChild, protoFieldNumber: 3, protoFieldName: "repeated_child", jsonFieldName: "repeatedChild", swiftFieldName: "repeatedChild")
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _child != other._child {return false}
      if _payload != other._payload {return false}
      if _repeatedChild != other._repeatedChild {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._child = _child
      clone._payload = _payload
      clone._repeatedChild = _repeatedChild
      return clone
    }
  }

  private var _storage = _StorageClass()

  public var child: Proto3NestedTestAllTypes {
    get {return _storage._child ?? Proto3NestedTestAllTypes()}
    set {_uniqueStorage()._child = newValue}
  }
  public var hasChild: Bool {
    return _storage._child != nil
  }
  public mutating func clearChild() {
    return _storage._child = nil
  }

  public var payload: Proto3TestAllTypes {
    get {return _storage._payload ?? Proto3TestAllTypes()}
    set {_uniqueStorage()._payload = newValue}
  }
  public var hasPayload: Bool {
    return _storage._payload != nil
  }
  public mutating func clearPayload() {
    return _storage._payload = nil
  }

  public var repeatedChild: [Proto3NestedTestAllTypes] {
    get {return _storage._repeatedChild}
    set {_uniqueStorage()._repeatedChild = newValue}
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Proto3NestedTestAllTypes) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

public struct Proto3TestDeprecatedFields: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Proto3TestDeprecatedFields"}
  public var protoMessageName: String {return "TestDeprecatedFields"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [
    "deprecatedInt32": 1,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "deprecated_int32": 1,
  ]}

  public var deprecatedInt32: Int32 = 0

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &deprecatedInt32)
    default:
      handled = false
    }
    return handled
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    if deprecatedInt32 != 0 {
      try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: deprecatedInt32, protoFieldNumber: 1, protoFieldName: "deprecated_int32", jsonFieldName: "deprecatedInt32", swiftFieldName: "deprecatedInt32")
    }
  }

  public func _protoc_generated_isEqualTo(other: Proto3TestDeprecatedFields) -> Bool {
    if deprecatedInt32 != other.deprecatedInt32 {return false}
    return true
  }
}

///   Define these after TestAllTypes to make sure the compiler can handle
///   that.
public struct Proto3ForeignMessage: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Proto3ForeignMessage"}
  public var protoMessageName: String {return "ForeignMessage"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [
    "c": 1,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "c": 1,
  ]}

  public var c: Int32 = 0

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &c)
    default:
      handled = false
    }
    return handled
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    if c != 0 {
      try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: c, protoFieldNumber: 1, protoFieldName: "c", jsonFieldName: "c", swiftFieldName: "c")
    }
  }

  public func _protoc_generated_isEqualTo(other: Proto3ForeignMessage) -> Bool {
    if c != other.c {return false}
    return true
  }
}

public struct Proto3TestReservedFields: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Proto3TestReservedFields"}
  public var protoMessageName: String {return "TestReservedFields"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [:]}
  public var protoFieldNames: [String: Int] {return [:]}

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return false // Proto3 ignores unknown fields
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
  }

  public func _protoc_generated_isEqualTo(other: Proto3TestReservedFields) -> Bool {
    return true
  }
}

///   Test that we can use NestedMessage from outside TestAllTypes.
public struct Proto3TestForeignNested: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Proto3TestForeignNested"}
  public var protoMessageName: String {return "TestForeignNested"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [
    "foreignNested": 1,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "foreign_nested": 1,
  ]}

  private class _StorageClass {
    typealias ProtobufExtendedMessage = Proto3TestForeignNested
    var _foreignNested: Proto3TestAllTypes.NestedMessage? = nil

    init() {}

    func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularMessageField(fieldType: Proto3TestAllTypes.NestedMessage.self, value: &_foreignNested)
      default:
        handled = false
      }
      return handled
    }

    func traverse(visitor: inout ProtobufVisitor) throws {
      if let v = _foreignNested {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 1, protoFieldName: "foreign_nested", jsonFieldName: "foreignNested", swiftFieldName: "foreignNested")
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _foreignNested != other._foreignNested {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._foreignNested = _foreignNested
      return clone
    }
  }

  private var _storage = _StorageClass()

  public var foreignNested: Proto3TestAllTypes.NestedMessage {
    get {return _storage._foreignNested ?? Proto3TestAllTypes.NestedMessage()}
    set {_uniqueStorage()._foreignNested = newValue}
  }
  public var hasForeignNested: Bool {
    return _storage._foreignNested != nil
  }
  public mutating func clearForeignNested() {
    return _storage._foreignNested = nil
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Proto3TestForeignNested) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

///   Test that really large tag numbers don't break anything.
public struct Proto3TestReallyLargeTagNumber: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Proto3TestReallyLargeTagNumber"}
  public var protoMessageName: String {return "TestReallyLargeTagNumber"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [
    "a": 1,
    "bb": 268435455,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "a": 1,
    "bb": 268435455,
  ]}

  ///   The largest possible tag number is 2^28 - 1, since the wire format uses
  ///   three bits to communicate wire type.
  public var a: Int32 = 0

  public var bb: Int32 = 0

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
    case 268435455: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &bb)
    default:
      handled = false
    }
    return handled
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    if a != 0 {
      try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
    }
    if bb != 0 {
      try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: bb, protoFieldNumber: 268435455, protoFieldName: "bb", jsonFieldName: "bb", swiftFieldName: "bb")
    }
  }

  public func _protoc_generated_isEqualTo(other: Proto3TestReallyLargeTagNumber) -> Bool {
    if a != other.a {return false}
    if bb != other.bb {return false}
    return true
  }
}

public struct Proto3TestRecursiveMessage: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Proto3TestRecursiveMessage"}
  public var protoMessageName: String {return "TestRecursiveMessage"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [
    "a": 1,
    "i": 2,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "a": 1,
    "i": 2,
  ]}

  private class _StorageClass {
    typealias ProtobufExtendedMessage = Proto3TestRecursiveMessage
    var _a: Proto3TestRecursiveMessage? = nil
    var _i: Int32 = 0

    init() {}

    func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularMessageField(fieldType: Proto3TestRecursiveMessage.self, value: &_a)
      case 2: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_i)
      default:
        handled = false
      }
      return handled
    }

    func traverse(visitor: inout ProtobufVisitor) throws {
      if let v = _a {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
      if _i != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _i, protoFieldNumber: 2, protoFieldName: "i", jsonFieldName: "i", swiftFieldName: "i")
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _a != other._a {return false}
      if _i != other._i {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._a = _a
      clone._i = _i
      return clone
    }
  }

  private var _storage = _StorageClass()

  public var a: Proto3TestRecursiveMessage {
    get {return _storage._a ?? Proto3TestRecursiveMessage()}
    set {_uniqueStorage()._a = newValue}
  }
  public var hasA: Bool {
    return _storage._a != nil
  }
  public mutating func clearA() {
    return _storage._a = nil
  }

  public var i: Int32 {
    get {return _storage._i}
    set {_uniqueStorage()._i = newValue}
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Proto3TestRecursiveMessage) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

///   Test that mutual recursion works.
public struct Proto3TestMutualRecursionA: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Proto3TestMutualRecursionA"}
  public var protoMessageName: String {return "TestMutualRecursionA"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [
    "bb": 1,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "bb": 1,
  ]}

  private class _StorageClass {
    typealias ProtobufExtendedMessage = Proto3TestMutualRecursionA
    var _bb: Proto3TestMutualRecursionB? = nil

    init() {}

    func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularMessageField(fieldType: Proto3TestMutualRecursionB.self, value: &_bb)
      default:
        handled = false
      }
      return handled
    }

    func traverse(visitor: inout ProtobufVisitor) throws {
      if let v = _bb {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 1, protoFieldName: "bb", jsonFieldName: "bb", swiftFieldName: "bb")
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _bb != other._bb {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._bb = _bb
      return clone
    }
  }

  private var _storage = _StorageClass()

  public var bb: Proto3TestMutualRecursionB {
    get {return _storage._bb ?? Proto3TestMutualRecursionB()}
    set {_uniqueStorage()._bb = newValue}
  }
  public var hasBb: Bool {
    return _storage._bb != nil
  }
  public mutating func clearBb() {
    return _storage._bb = nil
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Proto3TestMutualRecursionA) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

public struct Proto3TestMutualRecursionB: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Proto3TestMutualRecursionB"}
  public var protoMessageName: String {return "TestMutualRecursionB"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [
    "a": 1,
    "optionalInt32": 2,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "a": 1,
    "optional_int32": 2,
  ]}

  private class _StorageClass {
    typealias ProtobufExtendedMessage = Proto3TestMutualRecursionB
    var _a: Proto3TestMutualRecursionA? = nil
    var _optionalInt32: Int32 = 0

    init() {}

    func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularMessageField(fieldType: Proto3TestMutualRecursionA.self, value: &_a)
      case 2: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_optionalInt32)
      default:
        handled = false
      }
      return handled
    }

    func traverse(visitor: inout ProtobufVisitor) throws {
      if let v = _a {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
      if _optionalInt32 != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _optionalInt32, protoFieldNumber: 2, protoFieldName: "optional_int32", jsonFieldName: "optionalInt32", swiftFieldName: "optionalInt32")
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _a != other._a {return false}
      if _optionalInt32 != other._optionalInt32 {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._a = _a
      clone._optionalInt32 = _optionalInt32
      return clone
    }
  }

  private var _storage = _StorageClass()

  public var a: Proto3TestMutualRecursionA {
    get {return _storage._a ?? Proto3TestMutualRecursionA()}
    set {_uniqueStorage()._a = newValue}
  }
  public var hasA: Bool {
    return _storage._a != nil
  }
  public mutating func clearA() {
    return _storage._a = nil
  }

  public var optionalInt32: Int32 {
    get {return _storage._optionalInt32}
    set {_uniqueStorage()._optionalInt32 = newValue}
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Proto3TestMutualRecursionB) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

///   Test message with CamelCase field names.  This violates Protocol Buffer
///   standard style.
public struct Proto3TestCamelCaseFieldNames: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Proto3TestCamelCaseFieldNames"}
  public var protoMessageName: String {return "TestCamelCaseFieldNames"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [
    "PrimitiveField": 1,
    "StringField": 2,
    "EnumField": 3,
    "MessageField": 4,
    "RepeatedPrimitiveField": 7,
    "RepeatedStringField": 8,
    "RepeatedEnumField": 9,
    "RepeatedMessageField": 10,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "PrimitiveField": 1,
    "StringField": 2,
    "EnumField": 3,
    "MessageField": 4,
    "RepeatedPrimitiveField": 7,
    "RepeatedStringField": 8,
    "RepeatedEnumField": 9,
    "RepeatedMessageField": 10,
  ]}

  private class _StorageClass {
    typealias ProtobufExtendedMessage = Proto3TestCamelCaseFieldNames
    var _primitiveField: Int32 = 0
    var _stringField: String = ""
    var _enumField: Proto3ForeignEnum = Proto3ForeignEnum.foreignUnspecified
    var _messageField: Proto3ForeignMessage? = nil
    var _repeatedPrimitiveField: [Int32] = []
    var _repeatedStringField: [String] = []
    var _repeatedEnumField: [Proto3ForeignEnum] = []
    var _repeatedMessageField: [Proto3ForeignMessage] = []

    init() {}

    func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_primitiveField)
      case 2: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &_stringField)
      case 3: handled = try setter.decodeSingularField(fieldType: Proto3ForeignEnum.self, value: &_enumField)
      case 4: handled = try setter.decodeSingularMessageField(fieldType: Proto3ForeignMessage.self, value: &_messageField)
      case 7: handled = try setter.decodePackedField(fieldType: ProtobufInt32.self, value: &_repeatedPrimitiveField)
      case 8: handled = try setter.decodeRepeatedField(fieldType: ProtobufString.self, value: &_repeatedStringField)
      case 9: handled = try setter.decodePackedField(fieldType: Proto3ForeignEnum.self, value: &_repeatedEnumField)
      case 10: handled = try setter.decodeRepeatedMessageField(fieldType: Proto3ForeignMessage.self, value: &_repeatedMessageField)
      default:
        handled = false
      }
      return handled
    }

    func traverse(visitor: inout ProtobufVisitor) throws {
      if _primitiveField != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _primitiveField, protoFieldNumber: 1, protoFieldName: "PrimitiveField", jsonFieldName: "PrimitiveField", swiftFieldName: "primitiveField")
      }
      if _stringField != "" {
        try visitor.visitSingularField(fieldType: ProtobufString.self, value: _stringField, protoFieldNumber: 2, protoFieldName: "StringField", jsonFieldName: "StringField", swiftFieldName: "stringField")
      }
      if _enumField != Proto3ForeignEnum.foreignUnspecified {
        try visitor.visitSingularField(fieldType: Proto3ForeignEnum.self, value: _enumField, protoFieldNumber: 3, protoFieldName: "EnumField", jsonFieldName: "EnumField", swiftFieldName: "enumField")
      }
      if let v = _messageField {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 4, protoFieldName: "MessageField", jsonFieldName: "MessageField", swiftFieldName: "messageField")
      }
      if !_repeatedPrimitiveField.isEmpty {
        try visitor.visitPackedField(fieldType: ProtobufInt32.self, value: _repeatedPrimitiveField, protoFieldNumber: 7, protoFieldName: "RepeatedPrimitiveField", jsonFieldName: "RepeatedPrimitiveField", swiftFieldName: "repeatedPrimitiveField")
      }
      if !_repeatedStringField.isEmpty {
        try visitor.visitRepeatedField(fieldType: ProtobufString.self, value: _repeatedStringField, protoFieldNumber: 8, protoFieldName: "RepeatedStringField", jsonFieldName: "RepeatedStringField", swiftFieldName: "repeatedStringField")
      }
      if !_repeatedEnumField.isEmpty {
        try visitor.visitPackedField(fieldType: Proto3ForeignEnum.self, value: _repeatedEnumField, protoFieldNumber: 9, protoFieldName: "RepeatedEnumField", jsonFieldName: "RepeatedEnumField", swiftFieldName: "repeatedEnumField")
      }
      if !_repeatedMessageField.isEmpty {
        try visitor.visitRepeatedMessageField(value: _repeatedMessageField, protoFieldNumber: 10, protoFieldName: "RepeatedMessageField", jsonFieldName: "RepeatedMessageField", swiftFieldName: "repeatedMessageField")
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _primitiveField != other._primitiveField {return false}
      if _stringField != other._stringField {return false}
      if _enumField != other._enumField {return false}
      if _messageField != other._messageField {return false}
      if _repeatedPrimitiveField != other._repeatedPrimitiveField {return false}
      if _repeatedStringField != other._repeatedStringField {return false}
      if _repeatedEnumField != other._repeatedEnumField {return false}
      if _repeatedMessageField != other._repeatedMessageField {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._primitiveField = _primitiveField
      clone._stringField = _stringField
      clone._enumField = _enumField
      clone._messageField = _messageField
      clone._repeatedPrimitiveField = _repeatedPrimitiveField
      clone._repeatedStringField = _repeatedStringField
      clone._repeatedEnumField = _repeatedEnumField
      clone._repeatedMessageField = _repeatedMessageField
      return clone
    }
  }

  private var _storage = _StorageClass()

  public var primitiveField: Int32 {
    get {return _storage._primitiveField}
    set {_uniqueStorage()._primitiveField = newValue}
  }

  public var stringField: String {
    get {return _storage._stringField}
    set {_uniqueStorage()._stringField = newValue}
  }

  public var enumField: Proto3ForeignEnum {
    get {return _storage._enumField}
    set {_uniqueStorage()._enumField = newValue}
  }

  public var messageField: Proto3ForeignMessage {
    get {return _storage._messageField ?? Proto3ForeignMessage()}
    set {_uniqueStorage()._messageField = newValue}
  }
  public var hasMessageField: Bool {
    return _storage._messageField != nil
  }
  public mutating func clearMessageField() {
    return _storage._messageField = nil
  }

  public var repeatedPrimitiveField: [Int32] {
    get {return _storage._repeatedPrimitiveField}
    set {_uniqueStorage()._repeatedPrimitiveField = newValue}
  }

  public var repeatedStringField: [String] {
    get {return _storage._repeatedStringField}
    set {_uniqueStorage()._repeatedStringField = newValue}
  }

  public var repeatedEnumField: [Proto3ForeignEnum] {
    get {return _storage._repeatedEnumField}
    set {_uniqueStorage()._repeatedEnumField = newValue}
  }

  public var repeatedMessageField: [Proto3ForeignMessage] {
    get {return _storage._repeatedMessageField}
    set {_uniqueStorage()._repeatedMessageField = newValue}
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Proto3TestCamelCaseFieldNames) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

///   We list fields out of order, to ensure that we're using field number and not
///   field index to determine serialization order.
public struct Proto3TestFieldOrderings: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Proto3TestFieldOrderings"}
  public var protoMessageName: String {return "TestFieldOrderings"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [
    "myString": 11,
    "myInt": 1,
    "myFloat": 101,
    "singleNestedMessage": 200,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "my_string": 11,
    "my_int": 1,
    "my_float": 101,
    "single_nested_message": 200,
  ]}

  private class _StorageClass {
    typealias ProtobufExtendedMessage = Proto3TestFieldOrderings
    var _myString: String = ""
    var _myInt: Int64 = 0
    var _myFloat: Float = 0
    var _singleNestedMessage: Proto3TestFieldOrderings.NestedMessage? = nil

    init() {}

    func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 11: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &_myString)
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt64.self, value: &_myInt)
      case 101: handled = try setter.decodeSingularField(fieldType: ProtobufFloat.self, value: &_myFloat)
      case 200: handled = try setter.decodeSingularMessageField(fieldType: Proto3TestFieldOrderings.NestedMessage.self, value: &_singleNestedMessage)
      default:
        handled = false
      }
      return handled
    }

    func traverse(visitor: inout ProtobufVisitor) throws {
      if _myInt != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt64.self, value: _myInt, protoFieldNumber: 1, protoFieldName: "my_int", jsonFieldName: "myInt", swiftFieldName: "myInt")
      }
      if _myString != "" {
        try visitor.visitSingularField(fieldType: ProtobufString.self, value: _myString, protoFieldNumber: 11, protoFieldName: "my_string", jsonFieldName: "myString", swiftFieldName: "myString")
      }
      if _myFloat != 0 {
        try visitor.visitSingularField(fieldType: ProtobufFloat.self, value: _myFloat, protoFieldNumber: 101, protoFieldName: "my_float", jsonFieldName: "myFloat", swiftFieldName: "myFloat")
      }
      if let v = _singleNestedMessage {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 200, protoFieldName: "single_nested_message", jsonFieldName: "singleNestedMessage", swiftFieldName: "singleNestedMessage")
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _myString != other._myString {return false}
      if _myInt != other._myInt {return false}
      if _myFloat != other._myFloat {return false}
      if _singleNestedMessage != other._singleNestedMessage {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._myString = _myString
      clone._myInt = _myInt
      clone._myFloat = _myFloat
      clone._singleNestedMessage = _singleNestedMessage
      return clone
    }
  }

  private var _storage = _StorageClass()

  public struct NestedMessage: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "Proto3TestFieldOrderings.NestedMessage"}
    public var protoMessageName: String {return "NestedMessage"}
    public var protoPackageName: String {return "protobuf_unittest"}
    public var jsonFieldNames: [String: Int] {return [
      "oo": 2,
      "bb": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "oo": 2,
      "bb": 1,
    ]}

    public var oo: Int64 = 0

    ///   The field name "b" fails to compile in proto1 because it conflicts with
    ///   a local variable named "b" in one of the generated methods.  Doh.
    ///   This file needs to compile in proto1 to test backwards-compatibility.
    public var bb: Int32 = 0

    public init() {}

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 2: handled = try setter.decodeSingularField(fieldType: ProtobufInt64.self, value: &oo)
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &bb)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if bb != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: bb, protoFieldNumber: 1, protoFieldName: "bb", jsonFieldName: "bb", swiftFieldName: "bb")
      }
      if oo != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt64.self, value: oo, protoFieldNumber: 2, protoFieldName: "oo", jsonFieldName: "oo", swiftFieldName: "oo")
      }
    }

    public func _protoc_generated_isEqualTo(other: Proto3TestFieldOrderings.NestedMessage) -> Bool {
      if oo != other.oo {return false}
      if bb != other.bb {return false}
      return true
    }
  }

  public var myString: String {
    get {return _storage._myString}
    set {_uniqueStorage()._myString = newValue}
  }

  public var myInt: Int64 {
    get {return _storage._myInt}
    set {_uniqueStorage()._myInt = newValue}
  }

  public var myFloat: Float {
    get {return _storage._myFloat}
    set {_uniqueStorage()._myFloat = newValue}
  }

  public var singleNestedMessage: Proto3TestFieldOrderings.NestedMessage {
    get {return _storage._singleNestedMessage ?? Proto3TestFieldOrderings.NestedMessage()}
    set {_uniqueStorage()._singleNestedMessage = newValue}
  }
  public var hasSingleNestedMessage: Bool {
    return _storage._singleNestedMessage != nil
  }
  public mutating func clearSingleNestedMessage() {
    return _storage._singleNestedMessage = nil
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Proto3TestFieldOrderings) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

public struct Proto3SparseEnumMessage: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Proto3SparseEnumMessage"}
  public var protoMessageName: String {return "SparseEnumMessage"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [
    "sparseEnum": 1,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "sparse_enum": 1,
  ]}

  public var sparseEnum: Proto3TestSparseEnum = Proto3TestSparseEnum.testSparseEnumUnspecified

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeSingularField(fieldType: Proto3TestSparseEnum.self, value: &sparseEnum)
    default:
      handled = false
    }
    return handled
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    if sparseEnum != Proto3TestSparseEnum.testSparseEnumUnspecified {
      try visitor.visitSingularField(fieldType: Proto3TestSparseEnum.self, value: sparseEnum, protoFieldNumber: 1, protoFieldName: "sparse_enum", jsonFieldName: "sparseEnum", swiftFieldName: "sparseEnum")
    }
  }

  public func _protoc_generated_isEqualTo(other: Proto3SparseEnumMessage) -> Bool {
    if sparseEnum != other.sparseEnum {return false}
    return true
  }
}

///   Test String and Bytes: string is for valid UTF-8 strings
public struct Proto3OneString: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Proto3OneString"}
  public var protoMessageName: String {return "OneString"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [
    "data": 1,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "data": 1,
  ]}

  public var data: String = ""

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &data)
    default:
      handled = false
    }
    return handled
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    if data != "" {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: data, protoFieldNumber: 1, protoFieldName: "data", jsonFieldName: "data", swiftFieldName: "data")
    }
  }

  public func _protoc_generated_isEqualTo(other: Proto3OneString) -> Bool {
    if data != other.data {return false}
    return true
  }
}

public struct Proto3MoreString: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Proto3MoreString"}
  public var protoMessageName: String {return "MoreString"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [
    "data": 1,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "data": 1,
  ]}

  public var data: [String] = []

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeRepeatedField(fieldType: ProtobufString.self, value: &data)
    default:
      handled = false
    }
    return handled
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    if !data.isEmpty {
      try visitor.visitRepeatedField(fieldType: ProtobufString.self, value: data, protoFieldNumber: 1, protoFieldName: "data", jsonFieldName: "data", swiftFieldName: "data")
    }
  }

  public func _protoc_generated_isEqualTo(other: Proto3MoreString) -> Bool {
    if data != other.data {return false}
    return true
  }
}

public struct Proto3OneBytes: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Proto3OneBytes"}
  public var protoMessageName: String {return "OneBytes"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [
    "data": 1,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "data": 1,
  ]}

  public var data: Data = Data()

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeSingularField(fieldType: ProtobufBytes.self, value: &data)
    default:
      handled = false
    }
    return handled
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    if data != Data() {
      try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: data, protoFieldNumber: 1, protoFieldName: "data", jsonFieldName: "data", swiftFieldName: "data")
    }
  }

  public func _protoc_generated_isEqualTo(other: Proto3OneBytes) -> Bool {
    if data != other.data {return false}
    return true
  }
}

public struct Proto3MoreBytes: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Proto3MoreBytes"}
  public var protoMessageName: String {return "MoreBytes"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [
    "data": 1,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "data": 1,
  ]}

  public var data: Data = Data()

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeSingularField(fieldType: ProtobufBytes.self, value: &data)
    default:
      handled = false
    }
    return handled
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    if data != Data() {
      try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: data, protoFieldNumber: 1, protoFieldName: "data", jsonFieldName: "data", swiftFieldName: "data")
    }
  }

  public func _protoc_generated_isEqualTo(other: Proto3MoreBytes) -> Bool {
    if data != other.data {return false}
    return true
  }
}

///   Test int32, uint32, int64, uint64, and bool are all compatible
public struct Proto3Int32Message: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Proto3Int32Message"}
  public var protoMessageName: String {return "Int32Message"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [
    "data": 1,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "data": 1,
  ]}

  public var data: Int32 = 0

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &data)
    default:
      handled = false
    }
    return handled
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    if data != 0 {
      try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: data, protoFieldNumber: 1, protoFieldName: "data", jsonFieldName: "data", swiftFieldName: "data")
    }
  }

  public func _protoc_generated_isEqualTo(other: Proto3Int32Message) -> Bool {
    if data != other.data {return false}
    return true
  }
}

public struct Proto3Uint32Message: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Proto3Uint32Message"}
  public var protoMessageName: String {return "Uint32Message"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [
    "data": 1,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "data": 1,
  ]}

  public var data: UInt32 = 0

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeSingularField(fieldType: ProtobufUInt32.self, value: &data)
    default:
      handled = false
    }
    return handled
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    if data != 0 {
      try visitor.visitSingularField(fieldType: ProtobufUInt32.self, value: data, protoFieldNumber: 1, protoFieldName: "data", jsonFieldName: "data", swiftFieldName: "data")
    }
  }

  public func _protoc_generated_isEqualTo(other: Proto3Uint32Message) -> Bool {
    if data != other.data {return false}
    return true
  }
}

public struct Proto3Int64Message: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Proto3Int64Message"}
  public var protoMessageName: String {return "Int64Message"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [
    "data": 1,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "data": 1,
  ]}

  public var data: Int64 = 0

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt64.self, value: &data)
    default:
      handled = false
    }
    return handled
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    if data != 0 {
      try visitor.visitSingularField(fieldType: ProtobufInt64.self, value: data, protoFieldNumber: 1, protoFieldName: "data", jsonFieldName: "data", swiftFieldName: "data")
    }
  }

  public func _protoc_generated_isEqualTo(other: Proto3Int64Message) -> Bool {
    if data != other.data {return false}
    return true
  }
}

public struct Proto3Uint64Message: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Proto3Uint64Message"}
  public var protoMessageName: String {return "Uint64Message"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [
    "data": 1,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "data": 1,
  ]}

  public var data: UInt64 = 0

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeSingularField(fieldType: ProtobufUInt64.self, value: &data)
    default:
      handled = false
    }
    return handled
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    if data != 0 {
      try visitor.visitSingularField(fieldType: ProtobufUInt64.self, value: data, protoFieldNumber: 1, protoFieldName: "data", jsonFieldName: "data", swiftFieldName: "data")
    }
  }

  public func _protoc_generated_isEqualTo(other: Proto3Uint64Message) -> Bool {
    if data != other.data {return false}
    return true
  }
}

public struct Proto3BoolMessage: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Proto3BoolMessage"}
  public var protoMessageName: String {return "BoolMessage"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [
    "data": 1,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "data": 1,
  ]}

  public var data: Bool = false

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeSingularField(fieldType: ProtobufBool.self, value: &data)
    default:
      handled = false
    }
    return handled
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    if data != false {
      try visitor.visitSingularField(fieldType: ProtobufBool.self, value: data, protoFieldNumber: 1, protoFieldName: "data", jsonFieldName: "data", swiftFieldName: "data")
    }
  }

  public func _protoc_generated_isEqualTo(other: Proto3BoolMessage) -> Bool {
    if data != other.data {return false}
    return true
  }
}

///   Test oneofs.
public struct Proto3TestOneof: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Proto3TestOneof"}
  public var protoMessageName: String {return "TestOneof"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [
    "fooInt": 1,
    "fooString": 2,
    "fooMessage": 3,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "foo_int": 1,
    "foo_string": 2,
    "foo_message": 3,
  ]}

  private class _StorageClass {
    typealias ProtobufExtendedMessage = Proto3TestOneof
    var _foo = Proto3TestOneof.OneOf_Foo()

    init() {}

    func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1, 2, 3:
        handled = try _foo.decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
      default:
        handled = false
      }
      return handled
    }

    func traverse(visitor: inout ProtobufVisitor) throws {
      try _foo.traverse(visitor: &visitor, start: 1, end: 4)
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _foo != other._foo {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._foo = _foo
      return clone
    }
  }

  private var _storage = _StorageClass()

  public enum OneOf_Foo: ExpressibleByNilLiteral, ProtobufOneofEnum {
    case fooInt(Int32)
    case fooString(String)
    case fooMessage(Proto3TestAllTypes)
    case None

    public init(nilLiteral: ()) {
      self = .None
    }

    public init() {
      self = .None
    }

    public mutating func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      if self != .None && setter.rejectConflictingOneof {
        throw ProtobufDecodingError.duplicatedOneOf
      }
      let handled: Bool
      switch protoFieldNumber {
      case 1:
        var value = Int32()
        handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &value)
        self = .fooInt(value)
      case 2:
        var value = String()
        handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &value)
        self = .fooString(value)
      case 3:
        var value: Proto3TestAllTypes?
        handled = try setter.decodeOptionalMessageField(fieldType: Proto3TestAllTypes.self, value: &value)
        if let value = value, handled {
          self = .fooMessage(value)
        }
      default:
        handled = false
        self = .None
      }
      return handled
    }

    public func traverse(visitor: inout ProtobufVisitor, start: Int, end: Int) throws {
      switch self {
      case .fooInt(let v):
        if start <= 1 && 1 < end {
          try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: v, protoFieldNumber: 1, protoFieldName: "foo_int", jsonFieldName: "fooInt", swiftFieldName: "fooInt")
        }
      case .fooString(let v):
        if start <= 2 && 2 < end {
          try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 2, protoFieldName: "foo_string", jsonFieldName: "fooString", swiftFieldName: "fooString")
        }
      case .fooMessage(let v):
        if start <= 3 && 3 < end {
          try visitor.visitSingularMessageField(value: v, protoFieldNumber: 3, protoFieldName: "foo_message", jsonFieldName: "fooMessage", swiftFieldName: "fooMessage")
        }
      case .None:
        break
      }
    }
  }

  public var fooInt: Int32 {
    get {
      if case .fooInt(let v) = _storage._foo {
        return v
      }
      return 0
    }
    set {
      _uniqueStorage()._foo = .fooInt(newValue)
    }
  }

  public var fooString: String {
    get {
      if case .fooString(let v) = _storage._foo {
        return v
      }
      return ""
    }
    set {
      _uniqueStorage()._foo = .fooString(newValue)
    }
  }

  public var fooMessage: Proto3TestAllTypes {
    get {
      if case .fooMessage(let v) = _storage._foo {
        return v
      }
      return Proto3TestAllTypes()
    }
    set {
      _uniqueStorage()._foo = .fooMessage(newValue)
    }
  }

  public var foo: OneOf_Foo {
    get {return _storage._foo}
    set {
      _uniqueStorage()._foo = newValue
    }
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Proto3TestOneof) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

//  Test messages for packed fields

public struct Proto3TestPackedTypes: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Proto3TestPackedTypes"}
  public var protoMessageName: String {return "TestPackedTypes"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [
    "packedInt32": 90,
    "packedInt64": 91,
    "packedUint32": 92,
    "packedUint64": 93,
    "packedSint32": 94,
    "packedSint64": 95,
    "packedFixed32": 96,
    "packedFixed64": 97,
    "packedSfixed32": 98,
    "packedSfixed64": 99,
    "packedFloat": 100,
    "packedDouble": 101,
    "packedBool": 102,
    "packedEnum": 103,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "packed_int32": 90,
    "packed_int64": 91,
    "packed_uint32": 92,
    "packed_uint64": 93,
    "packed_sint32": 94,
    "packed_sint64": 95,
    "packed_fixed32": 96,
    "packed_fixed64": 97,
    "packed_sfixed32": 98,
    "packed_sfixed64": 99,
    "packed_float": 100,
    "packed_double": 101,
    "packed_bool": 102,
    "packed_enum": 103,
  ]}

  public var packedInt32: [Int32] = []

  public var packedInt64: [Int64] = []

  public var packedUint32: [UInt32] = []

  public var packedUint64: [UInt64] = []

  public var packedSint32: [Int32] = []

  public var packedSint64: [Int64] = []

  public var packedFixed32: [UInt32] = []

  public var packedFixed64: [UInt64] = []

  public var packedSfixed32: [Int32] = []

  public var packedSfixed64: [Int64] = []

  public var packedFloat: [Float] = []

  public var packedDouble: [Double] = []

  public var packedBool: [Bool] = []

  public var packedEnum: [Proto3ForeignEnum] = []

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 90: handled = try setter.decodePackedField(fieldType: ProtobufInt32.self, value: &packedInt32)
    case 91: handled = try setter.decodePackedField(fieldType: ProtobufInt64.self, value: &packedInt64)
    case 92: handled = try setter.decodePackedField(fieldType: ProtobufUInt32.self, value: &packedUint32)
    case 93: handled = try setter.decodePackedField(fieldType: ProtobufUInt64.self, value: &packedUint64)
    case 94: handled = try setter.decodePackedField(fieldType: ProtobufSInt32.self, value: &packedSint32)
    case 95: handled = try setter.decodePackedField(fieldType: ProtobufSInt64.self, value: &packedSint64)
    case 96: handled = try setter.decodePackedField(fieldType: ProtobufFixed32.self, value: &packedFixed32)
    case 97: handled = try setter.decodePackedField(fieldType: ProtobufFixed64.self, value: &packedFixed64)
    case 98: handled = try setter.decodePackedField(fieldType: ProtobufSFixed32.self, value: &packedSfixed32)
    case 99: handled = try setter.decodePackedField(fieldType: ProtobufSFixed64.self, value: &packedSfixed64)
    case 100: handled = try setter.decodePackedField(fieldType: ProtobufFloat.self, value: &packedFloat)
    case 101: handled = try setter.decodePackedField(fieldType: ProtobufDouble.self, value: &packedDouble)
    case 102: handled = try setter.decodePackedField(fieldType: ProtobufBool.self, value: &packedBool)
    case 103: handled = try setter.decodePackedField(fieldType: Proto3ForeignEnum.self, value: &packedEnum)
    default:
      handled = false
    }
    return handled
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    if !packedInt32.isEmpty {
      try visitor.visitPackedField(fieldType: ProtobufInt32.self, value: packedInt32, protoFieldNumber: 90, protoFieldName: "packed_int32", jsonFieldName: "packedInt32", swiftFieldName: "packedInt32")
    }
    if !packedInt64.isEmpty {
      try visitor.visitPackedField(fieldType: ProtobufInt64.self, value: packedInt64, protoFieldNumber: 91, protoFieldName: "packed_int64", jsonFieldName: "packedInt64", swiftFieldName: "packedInt64")
    }
    if !packedUint32.isEmpty {
      try visitor.visitPackedField(fieldType: ProtobufUInt32.self, value: packedUint32, protoFieldNumber: 92, protoFieldName: "packed_uint32", jsonFieldName: "packedUint32", swiftFieldName: "packedUint32")
    }
    if !packedUint64.isEmpty {
      try visitor.visitPackedField(fieldType: ProtobufUInt64.self, value: packedUint64, protoFieldNumber: 93, protoFieldName: "packed_uint64", jsonFieldName: "packedUint64", swiftFieldName: "packedUint64")
    }
    if !packedSint32.isEmpty {
      try visitor.visitPackedField(fieldType: ProtobufSInt32.self, value: packedSint32, protoFieldNumber: 94, protoFieldName: "packed_sint32", jsonFieldName: "packedSint32", swiftFieldName: "packedSint32")
    }
    if !packedSint64.isEmpty {
      try visitor.visitPackedField(fieldType: ProtobufSInt64.self, value: packedSint64, protoFieldNumber: 95, protoFieldName: "packed_sint64", jsonFieldName: "packedSint64", swiftFieldName: "packedSint64")
    }
    if !packedFixed32.isEmpty {
      try visitor.visitPackedField(fieldType: ProtobufFixed32.self, value: packedFixed32, protoFieldNumber: 96, protoFieldName: "packed_fixed32", jsonFieldName: "packedFixed32", swiftFieldName: "packedFixed32")
    }
    if !packedFixed64.isEmpty {
      try visitor.visitPackedField(fieldType: ProtobufFixed64.self, value: packedFixed64, protoFieldNumber: 97, protoFieldName: "packed_fixed64", jsonFieldName: "packedFixed64", swiftFieldName: "packedFixed64")
    }
    if !packedSfixed32.isEmpty {
      try visitor.visitPackedField(fieldType: ProtobufSFixed32.self, value: packedSfixed32, protoFieldNumber: 98, protoFieldName: "packed_sfixed32", jsonFieldName: "packedSfixed32", swiftFieldName: "packedSfixed32")
    }
    if !packedSfixed64.isEmpty {
      try visitor.visitPackedField(fieldType: ProtobufSFixed64.self, value: packedSfixed64, protoFieldNumber: 99, protoFieldName: "packed_sfixed64", jsonFieldName: "packedSfixed64", swiftFieldName: "packedSfixed64")
    }
    if !packedFloat.isEmpty {
      try visitor.visitPackedField(fieldType: ProtobufFloat.self, value: packedFloat, protoFieldNumber: 100, protoFieldName: "packed_float", jsonFieldName: "packedFloat", swiftFieldName: "packedFloat")
    }
    if !packedDouble.isEmpty {
      try visitor.visitPackedField(fieldType: ProtobufDouble.self, value: packedDouble, protoFieldNumber: 101, protoFieldName: "packed_double", jsonFieldName: "packedDouble", swiftFieldName: "packedDouble")
    }
    if !packedBool.isEmpty {
      try visitor.visitPackedField(fieldType: ProtobufBool.self, value: packedBool, protoFieldNumber: 102, protoFieldName: "packed_bool", jsonFieldName: "packedBool", swiftFieldName: "packedBool")
    }
    if !packedEnum.isEmpty {
      try visitor.visitPackedField(fieldType: Proto3ForeignEnum.self, value: packedEnum, protoFieldNumber: 103, protoFieldName: "packed_enum", jsonFieldName: "packedEnum", swiftFieldName: "packedEnum")
    }
  }

  public func _protoc_generated_isEqualTo(other: Proto3TestPackedTypes) -> Bool {
    if packedInt32 != other.packedInt32 {return false}
    if packedInt64 != other.packedInt64 {return false}
    if packedUint32 != other.packedUint32 {return false}
    if packedUint64 != other.packedUint64 {return false}
    if packedSint32 != other.packedSint32 {return false}
    if packedSint64 != other.packedSint64 {return false}
    if packedFixed32 != other.packedFixed32 {return false}
    if packedFixed64 != other.packedFixed64 {return false}
    if packedSfixed32 != other.packedSfixed32 {return false}
    if packedSfixed64 != other.packedSfixed64 {return false}
    if packedFloat != other.packedFloat {return false}
    if packedDouble != other.packedDouble {return false}
    if packedBool != other.packedBool {return false}
    if packedEnum != other.packedEnum {return false}
    return true
  }
}

///   A message with the same fields as TestPackedTypes, but without packing. Used
///   to test packed <-> unpacked wire compatibility.
public struct Proto3TestUnpackedTypes: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Proto3TestUnpackedTypes"}
  public var protoMessageName: String {return "TestUnpackedTypes"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [
    "unpackedInt32": 90,
    "unpackedInt64": 91,
    "unpackedUint32": 92,
    "unpackedUint64": 93,
    "unpackedSint32": 94,
    "unpackedSint64": 95,
    "unpackedFixed32": 96,
    "unpackedFixed64": 97,
    "unpackedSfixed32": 98,
    "unpackedSfixed64": 99,
    "unpackedFloat": 100,
    "unpackedDouble": 101,
    "unpackedBool": 102,
    "unpackedEnum": 103,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "unpacked_int32": 90,
    "unpacked_int64": 91,
    "unpacked_uint32": 92,
    "unpacked_uint64": 93,
    "unpacked_sint32": 94,
    "unpacked_sint64": 95,
    "unpacked_fixed32": 96,
    "unpacked_fixed64": 97,
    "unpacked_sfixed32": 98,
    "unpacked_sfixed64": 99,
    "unpacked_float": 100,
    "unpacked_double": 101,
    "unpacked_bool": 102,
    "unpacked_enum": 103,
  ]}

  public var unpackedInt32: [Int32] = []

  public var unpackedInt64: [Int64] = []

  public var unpackedUint32: [UInt32] = []

  public var unpackedUint64: [UInt64] = []

  public var unpackedSint32: [Int32] = []

  public var unpackedSint64: [Int64] = []

  public var unpackedFixed32: [UInt32] = []

  public var unpackedFixed64: [UInt64] = []

  public var unpackedSfixed32: [Int32] = []

  public var unpackedSfixed64: [Int64] = []

  public var unpackedFloat: [Float] = []

  public var unpackedDouble: [Double] = []

  public var unpackedBool: [Bool] = []

  public var unpackedEnum: [Proto3ForeignEnum] = []

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 90: handled = try setter.decodeRepeatedField(fieldType: ProtobufInt32.self, value: &unpackedInt32)
    case 91: handled = try setter.decodeRepeatedField(fieldType: ProtobufInt64.self, value: &unpackedInt64)
    case 92: handled = try setter.decodeRepeatedField(fieldType: ProtobufUInt32.self, value: &unpackedUint32)
    case 93: handled = try setter.decodeRepeatedField(fieldType: ProtobufUInt64.self, value: &unpackedUint64)
    case 94: handled = try setter.decodeRepeatedField(fieldType: ProtobufSInt32.self, value: &unpackedSint32)
    case 95: handled = try setter.decodeRepeatedField(fieldType: ProtobufSInt64.self, value: &unpackedSint64)
    case 96: handled = try setter.decodeRepeatedField(fieldType: ProtobufFixed32.self, value: &unpackedFixed32)
    case 97: handled = try setter.decodeRepeatedField(fieldType: ProtobufFixed64.self, value: &unpackedFixed64)
    case 98: handled = try setter.decodeRepeatedField(fieldType: ProtobufSFixed32.self, value: &unpackedSfixed32)
    case 99: handled = try setter.decodeRepeatedField(fieldType: ProtobufSFixed64.self, value: &unpackedSfixed64)
    case 100: handled = try setter.decodeRepeatedField(fieldType: ProtobufFloat.self, value: &unpackedFloat)
    case 101: handled = try setter.decodeRepeatedField(fieldType: ProtobufDouble.self, value: &unpackedDouble)
    case 102: handled = try setter.decodeRepeatedField(fieldType: ProtobufBool.self, value: &unpackedBool)
    case 103: handled = try setter.decodeRepeatedField(fieldType: Proto3ForeignEnum.self, value: &unpackedEnum)
    default:
      handled = false
    }
    return handled
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    if !unpackedInt32.isEmpty {
      try visitor.visitRepeatedField(fieldType: ProtobufInt32.self, value: unpackedInt32, protoFieldNumber: 90, protoFieldName: "unpacked_int32", jsonFieldName: "unpackedInt32", swiftFieldName: "unpackedInt32")
    }
    if !unpackedInt64.isEmpty {
      try visitor.visitRepeatedField(fieldType: ProtobufInt64.self, value: unpackedInt64, protoFieldNumber: 91, protoFieldName: "unpacked_int64", jsonFieldName: "unpackedInt64", swiftFieldName: "unpackedInt64")
    }
    if !unpackedUint32.isEmpty {
      try visitor.visitRepeatedField(fieldType: ProtobufUInt32.self, value: unpackedUint32, protoFieldNumber: 92, protoFieldName: "unpacked_uint32", jsonFieldName: "unpackedUint32", swiftFieldName: "unpackedUint32")
    }
    if !unpackedUint64.isEmpty {
      try visitor.visitRepeatedField(fieldType: ProtobufUInt64.self, value: unpackedUint64, protoFieldNumber: 93, protoFieldName: "unpacked_uint64", jsonFieldName: "unpackedUint64", swiftFieldName: "unpackedUint64")
    }
    if !unpackedSint32.isEmpty {
      try visitor.visitRepeatedField(fieldType: ProtobufSInt32.self, value: unpackedSint32, protoFieldNumber: 94, protoFieldName: "unpacked_sint32", jsonFieldName: "unpackedSint32", swiftFieldName: "unpackedSint32")
    }
    if !unpackedSint64.isEmpty {
      try visitor.visitRepeatedField(fieldType: ProtobufSInt64.self, value: unpackedSint64, protoFieldNumber: 95, protoFieldName: "unpacked_sint64", jsonFieldName: "unpackedSint64", swiftFieldName: "unpackedSint64")
    }
    if !unpackedFixed32.isEmpty {
      try visitor.visitRepeatedField(fieldType: ProtobufFixed32.self, value: unpackedFixed32, protoFieldNumber: 96, protoFieldName: "unpacked_fixed32", jsonFieldName: "unpackedFixed32", swiftFieldName: "unpackedFixed32")
    }
    if !unpackedFixed64.isEmpty {
      try visitor.visitRepeatedField(fieldType: ProtobufFixed64.self, value: unpackedFixed64, protoFieldNumber: 97, protoFieldName: "unpacked_fixed64", jsonFieldName: "unpackedFixed64", swiftFieldName: "unpackedFixed64")
    }
    if !unpackedSfixed32.isEmpty {
      try visitor.visitRepeatedField(fieldType: ProtobufSFixed32.self, value: unpackedSfixed32, protoFieldNumber: 98, protoFieldName: "unpacked_sfixed32", jsonFieldName: "unpackedSfixed32", swiftFieldName: "unpackedSfixed32")
    }
    if !unpackedSfixed64.isEmpty {
      try visitor.visitRepeatedField(fieldType: ProtobufSFixed64.self, value: unpackedSfixed64, protoFieldNumber: 99, protoFieldName: "unpacked_sfixed64", jsonFieldName: "unpackedSfixed64", swiftFieldName: "unpackedSfixed64")
    }
    if !unpackedFloat.isEmpty {
      try visitor.visitRepeatedField(fieldType: ProtobufFloat.self, value: unpackedFloat, protoFieldNumber: 100, protoFieldName: "unpacked_float", jsonFieldName: "unpackedFloat", swiftFieldName: "unpackedFloat")
    }
    if !unpackedDouble.isEmpty {
      try visitor.visitRepeatedField(fieldType: ProtobufDouble.self, value: unpackedDouble, protoFieldNumber: 101, protoFieldName: "unpacked_double", jsonFieldName: "unpackedDouble", swiftFieldName: "unpackedDouble")
    }
    if !unpackedBool.isEmpty {
      try visitor.visitRepeatedField(fieldType: ProtobufBool.self, value: unpackedBool, protoFieldNumber: 102, protoFieldName: "unpacked_bool", jsonFieldName: "unpackedBool", swiftFieldName: "unpackedBool")
    }
    if !unpackedEnum.isEmpty {
      try visitor.visitRepeatedField(fieldType: Proto3ForeignEnum.self, value: unpackedEnum, protoFieldNumber: 103, protoFieldName: "unpacked_enum", jsonFieldName: "unpackedEnum", swiftFieldName: "unpackedEnum")
    }
  }

  public func _protoc_generated_isEqualTo(other: Proto3TestUnpackedTypes) -> Bool {
    if unpackedInt32 != other.unpackedInt32 {return false}
    if unpackedInt64 != other.unpackedInt64 {return false}
    if unpackedUint32 != other.unpackedUint32 {return false}
    if unpackedUint64 != other.unpackedUint64 {return false}
    if unpackedSint32 != other.unpackedSint32 {return false}
    if unpackedSint64 != other.unpackedSint64 {return false}
    if unpackedFixed32 != other.unpackedFixed32 {return false}
    if unpackedFixed64 != other.unpackedFixed64 {return false}
    if unpackedSfixed32 != other.unpackedSfixed32 {return false}
    if unpackedSfixed64 != other.unpackedSfixed64 {return false}
    if unpackedFloat != other.unpackedFloat {return false}
    if unpackedDouble != other.unpackedDouble {return false}
    if unpackedBool != other.unpackedBool {return false}
    if unpackedEnum != other.unpackedEnum {return false}
    return true
  }
}

public struct Proto3TestRepeatedScalarDifferentTagSizes: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Proto3TestRepeatedScalarDifferentTagSizes"}
  public var protoMessageName: String {return "TestRepeatedScalarDifferentTagSizes"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [
    "repeatedFixed32": 12,
    "repeatedInt32": 13,
    "repeatedFixed64": 2046,
    "repeatedInt64": 2047,
    "repeatedFloat": 262142,
    "repeatedUint64": 262143,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "repeated_fixed32": 12,
    "repeated_int32": 13,
    "repeated_fixed64": 2046,
    "repeated_int64": 2047,
    "repeated_float": 262142,
    "repeated_uint64": 262143,
  ]}

  ///   Parsing repeated fixed size values used to fail. This message needs to be
  ///   used in order to get a tag of the right size; all of the repeated fields
  ///   in TestAllTypes didn't trigger the check.
  public var repeatedFixed32: [UInt32] = []

  ///   Check for a varint type, just for good measure.
  public var repeatedInt32: [Int32] = []

  ///   These have two-byte tags.
  public var repeatedFixed64: [UInt64] = []

  public var repeatedInt64: [Int64] = []

  ///   Three byte tags.
  public var repeatedFloat: [Float] = []

  public var repeatedUint64: [UInt64] = []

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 12: handled = try setter.decodePackedField(fieldType: ProtobufFixed32.self, value: &repeatedFixed32)
    case 13: handled = try setter.decodePackedField(fieldType: ProtobufInt32.self, value: &repeatedInt32)
    case 2046: handled = try setter.decodePackedField(fieldType: ProtobufFixed64.self, value: &repeatedFixed64)
    case 2047: handled = try setter.decodePackedField(fieldType: ProtobufInt64.self, value: &repeatedInt64)
    case 262142: handled = try setter.decodePackedField(fieldType: ProtobufFloat.self, value: &repeatedFloat)
    case 262143: handled = try setter.decodePackedField(fieldType: ProtobufUInt64.self, value: &repeatedUint64)
    default:
      handled = false
    }
    return handled
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    if !repeatedFixed32.isEmpty {
      try visitor.visitPackedField(fieldType: ProtobufFixed32.self, value: repeatedFixed32, protoFieldNumber: 12, protoFieldName: "repeated_fixed32", jsonFieldName: "repeatedFixed32", swiftFieldName: "repeatedFixed32")
    }
    if !repeatedInt32.isEmpty {
      try visitor.visitPackedField(fieldType: ProtobufInt32.self, value: repeatedInt32, protoFieldNumber: 13, protoFieldName: "repeated_int32", jsonFieldName: "repeatedInt32", swiftFieldName: "repeatedInt32")
    }
    if !repeatedFixed64.isEmpty {
      try visitor.visitPackedField(fieldType: ProtobufFixed64.self, value: repeatedFixed64, protoFieldNumber: 2046, protoFieldName: "repeated_fixed64", jsonFieldName: "repeatedFixed64", swiftFieldName: "repeatedFixed64")
    }
    if !repeatedInt64.isEmpty {
      try visitor.visitPackedField(fieldType: ProtobufInt64.self, value: repeatedInt64, protoFieldNumber: 2047, protoFieldName: "repeated_int64", jsonFieldName: "repeatedInt64", swiftFieldName: "repeatedInt64")
    }
    if !repeatedFloat.isEmpty {
      try visitor.visitPackedField(fieldType: ProtobufFloat.self, value: repeatedFloat, protoFieldNumber: 262142, protoFieldName: "repeated_float", jsonFieldName: "repeatedFloat", swiftFieldName: "repeatedFloat")
    }
    if !repeatedUint64.isEmpty {
      try visitor.visitPackedField(fieldType: ProtobufUInt64.self, value: repeatedUint64, protoFieldNumber: 262143, protoFieldName: "repeated_uint64", jsonFieldName: "repeatedUint64", swiftFieldName: "repeatedUint64")
    }
  }

  public func _protoc_generated_isEqualTo(other: Proto3TestRepeatedScalarDifferentTagSizes) -> Bool {
    if repeatedFixed32 != other.repeatedFixed32 {return false}
    if repeatedInt32 != other.repeatedInt32 {return false}
    if repeatedFixed64 != other.repeatedFixed64 {return false}
    if repeatedInt64 != other.repeatedInt64 {return false}
    if repeatedFloat != other.repeatedFloat {return false}
    if repeatedUint64 != other.repeatedUint64 {return false}
    return true
  }
}

public struct Proto3TestCommentInjectionMessage: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Proto3TestCommentInjectionMessage"}
  public var protoMessageName: String {return "TestCommentInjectionMessage"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [
    "a": 1,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "a": 1,
  ]}

  ///   */ <- This should not close the generated doc comment
  public var a: String = ""

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &a)
    default:
      handled = false
    }
    return handled
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    if a != "" {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
    }
  }

  public func _protoc_generated_isEqualTo(other: Proto3TestCommentInjectionMessage) -> Bool {
    if a != other.a {return false}
    return true
  }
}

///   Test that RPC services work.
public struct Proto3FooRequest: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Proto3FooRequest"}
  public var protoMessageName: String {return "FooRequest"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [:]}
  public var protoFieldNames: [String: Int] {return [:]}

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return false // Proto3 ignores unknown fields
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
  }

  public func _protoc_generated_isEqualTo(other: Proto3FooRequest) -> Bool {
    return true
  }
}

public struct Proto3FooResponse: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Proto3FooResponse"}
  public var protoMessageName: String {return "FooResponse"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [:]}
  public var protoFieldNames: [String: Int] {return [:]}

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return false // Proto3 ignores unknown fields
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
  }

  public func _protoc_generated_isEqualTo(other: Proto3FooResponse) -> Bool {
    return true
  }
}

public struct Proto3FooClientMessage: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Proto3FooClientMessage"}
  public var protoMessageName: String {return "FooClientMessage"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [:]}
  public var protoFieldNames: [String: Int] {return [:]}

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return false // Proto3 ignores unknown fields
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
  }

  public func _protoc_generated_isEqualTo(other: Proto3FooClientMessage) -> Bool {
    return true
  }
}

public struct Proto3FooServerMessage: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Proto3FooServerMessage"}
  public var protoMessageName: String {return "FooServerMessage"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [:]}
  public var protoFieldNames: [String: Int] {return [:]}

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return false // Proto3 ignores unknown fields
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
  }

  public func _protoc_generated_isEqualTo(other: Proto3FooServerMessage) -> Bool {
    return true
  }
}

public struct Proto3BarRequest: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Proto3BarRequest"}
  public var protoMessageName: String {return "BarRequest"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [:]}
  public var protoFieldNames: [String: Int] {return [:]}

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return false // Proto3 ignores unknown fields
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
  }

  public func _protoc_generated_isEqualTo(other: Proto3BarRequest) -> Bool {
    return true
  }
}

public struct Proto3BarResponse: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Proto3BarResponse"}
  public var protoMessageName: String {return "BarResponse"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [:]}
  public var protoFieldNames: [String: Int] {return [:]}

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return false // Proto3 ignores unknown fields
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
  }

  public func _protoc_generated_isEqualTo(other: Proto3BarResponse) -> Bool {
    return true
  }
}

public func ==(lhs: Proto3TestAllTypes.OneOf_OneofField, rhs: Proto3TestAllTypes.OneOf_OneofField) -> Bool {
  switch (lhs, rhs) {
  case (.oneofUint32(let l), .oneofUint32(let r)): return l == r
  case (.oneofNestedMessage(let l), .oneofNestedMessage(let r)): return l == r
  case (.oneofString(let l), .oneofString(let r)): return l == r
  case (.oneofBytes(let l), .oneofBytes(let r)): return l == r
  case (.None, .None): return true
  default: return false
  }
}

public func ==(lhs: Proto3TestOneof.OneOf_Foo, rhs: Proto3TestOneof.OneOf_Foo) -> Bool {
  switch (lhs, rhs) {
  case (.fooInt(let l), .fooInt(let r)): return l == r
  case (.fooString(let l), .fooString(let r)): return l == r
  case (.fooMessage(let l), .fooMessage(let r)): return l == r
  case (.None, .None): return true
  default: return false
  }
}
