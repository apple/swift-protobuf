// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: generated_swift_names_fields.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

/// See Makefile for the logic that generates this
/// Protoc errors imply this file is being generated incorrectly
/// Swift compile errors are probably bugs in protoc-gen-swift

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct ProtobufUnittestGenerated_GeneratedSwiftReservedFields {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var adjusted: Int32 {
    get {return _storage._adjusted}
    set {_uniqueStorage()._adjusted = newValue}
  }

  var allocate: Int32 {
    get {return _storage._allocate}
    set {_uniqueStorage()._allocate = newValue}
  }

  var any: Int32 {
    get {return _storage._any}
    set {_uniqueStorage()._any = newValue}
  }

  var anyExtensionField: Int32 {
    get {return _storage._anyExtensionField}
    set {_uniqueStorage()._anyExtensionField = newValue}
  }

  var anyMessageExtension: Int32 {
    get {return _storage._anyMessageExtension}
    set {_uniqueStorage()._anyMessageExtension = newValue}
  }

  var anyMessageStorage: Int32 {
    get {return _storage._anyMessageStorage}
    set {_uniqueStorage()._anyMessageStorage = newValue}
  }

  var anyUnpackError: Int32 {
    get {return _storage._anyUnpackError}
    set {_uniqueStorage()._anyUnpackError = newValue}
  }

  var api: Int32 {
    get {return _storage._api}
    set {_uniqueStorage()._api = newValue}
  }

  var appended: Int32 {
    get {return _storage._appended}
    set {_uniqueStorage()._appended = newValue}
  }

  var appendUintHex: Int32 {
    get {return _storage._appendUintHex}
    set {_uniqueStorage()._appendUintHex = newValue}
  }

  var appendUnknown: Int32 {
    get {return _storage._appendUnknown}
    set {_uniqueStorage()._appendUnknown = newValue}
  }

  var areAllInitialized: Int32 {
    get {return _storage._areAllInitialized}
    set {_uniqueStorage()._areAllInitialized = newValue}
  }

  var array: Int32 {
    get {return _storage._array}
    set {_uniqueStorage()._array = newValue}
  }

  var arrayLiteral: Int32 {
    get {return _storage._arrayLiteral}
    set {_uniqueStorage()._arrayLiteral = newValue}
  }

  var arraySeparator: Int32 {
    get {return _storage._arraySeparator}
    set {_uniqueStorage()._arraySeparator = newValue}
  }

  var `as`: Int32 {
    get {return _storage._as}
    set {_uniqueStorage()._as = newValue}
  }

  var asciiOpenCurlyBracket: Int32 {
    get {return _storage._asciiOpenCurlyBracket}
    set {_uniqueStorage()._asciiOpenCurlyBracket = newValue}
  }

  var asciiZero: Int32 {
    get {return _storage._asciiZero}
    set {_uniqueStorage()._asciiZero = newValue}
  }

  var available: Int32 {
    get {return _storage._available}
    set {_uniqueStorage()._available = newValue}
  }

  var b: Int32 {
    get {return _storage._b}
    set {_uniqueStorage()._b = newValue}
  }

  var baseType: Int32 {
    get {return _storage._baseType}
    set {_uniqueStorage()._baseType = newValue}
  }

  var binary: Int32 {
    get {return _storage._binary}
    set {_uniqueStorage()._binary = newValue}
  }

  var binaryDecoder: Int32 {
    get {return _storage._binaryDecoder}
    set {_uniqueStorage()._binaryDecoder = newValue}
  }

  var binaryDecodingError: Int32 {
    get {return _storage._binaryDecodingError}
    set {_uniqueStorage()._binaryDecodingError = newValue}
  }

  var binaryDecodingOptions: Int32 {
    get {return _storage._binaryDecodingOptions}
    set {_uniqueStorage()._binaryDecodingOptions = newValue}
  }

  var binaryDelimited: Int32 {
    get {return _storage._binaryDelimited}
    set {_uniqueStorage()._binaryDelimited = newValue}
  }

  var binaryEncoder: Int32 {
    get {return _storage._binaryEncoder}
    set {_uniqueStorage()._binaryEncoder = newValue}
  }

  var binaryEncodingError: Int32 {
    get {return _storage._binaryEncodingError}
    set {_uniqueStorage()._binaryEncodingError = newValue}
  }

  var binaryEncodingMessageSetSizeVisitor: Int32 {
    get {return _storage._binaryEncodingMessageSetSizeVisitor}
    set {_uniqueStorage()._binaryEncodingMessageSetSizeVisitor = newValue}
  }

  var binaryEncodingMessageSetVisitor: Int32 {
    get {return _storage._binaryEncodingMessageSetVisitor}
    set {_uniqueStorage()._binaryEncodingMessageSetVisitor = newValue}
  }

  var binaryEncodingSizeVisitor: Int32 {
    get {return _storage._binaryEncodingSizeVisitor}
    set {_uniqueStorage()._binaryEncodingSizeVisitor = newValue}
  }

  var binaryEncodingVisitor: Int32 {
    get {return _storage._binaryEncodingVisitor}
    set {_uniqueStorage()._binaryEncodingVisitor = newValue}
  }

  var bodySize: Int32 {
    get {return _storage._bodySize}
    set {_uniqueStorage()._bodySize = newValue}
  }

  var bool: Int32 {
    get {return _storage._bool}
    set {_uniqueStorage()._bool = newValue}
  }

  var booleanLiteral: Int32 {
    get {return _storage._booleanLiteral}
    set {_uniqueStorage()._booleanLiteral = newValue}
  }

  var booleanLiteralType: Int32 {
    get {return _storage._booleanLiteralType}
    set {_uniqueStorage()._booleanLiteralType = newValue}
  }

  var boolValue: Int32 {
    get {return _storage._boolValue}
    set {_uniqueStorage()._boolValue = newValue}
  }

  var buffer: Int32 {
    get {return _storage._buffer}
    set {_uniqueStorage()._buffer = newValue}
  }

  var bytes: Int32 {
    get {return _storage._bytes}
    set {_uniqueStorage()._bytes = newValue}
  }

  var bytesInGroup: Int32 {
    get {return _storage._bytesInGroup}
    set {_uniqueStorage()._bytesInGroup = newValue}
  }

  var bytesRead: Int32 {
    get {return _storage._bytesRead}
    set {_uniqueStorage()._bytesRead = newValue}
  }

  var bytesValue: Int32 {
    get {return _storage._bytesValue}
    set {_uniqueStorage()._bytesValue = newValue}
  }

  var c: Int32 {
    get {return _storage._c}
    set {_uniqueStorage()._c = newValue}
  }

  var capacity: Int32 {
    get {return _storage._capacity}
    set {_uniqueStorage()._capacity = newValue}
  }

  var capitalizeNext: Int32 {
    get {return _storage._capitalizeNext}
    set {_uniqueStorage()._capitalizeNext = newValue}
  }

  var cardinality: Int32 {
    get {return _storage._cardinality}
    set {_uniqueStorage()._cardinality = newValue}
  }

  var character: Int32 {
    get {return _storage._character}
    set {_uniqueStorage()._character = newValue}
  }

  var characters: Int32 {
    get {return _storage._characters}
    set {_uniqueStorage()._characters = newValue}
  }

  var chars: Int32 {
    get {return _storage._chars}
    set {_uniqueStorage()._chars = newValue}
  }

  var `class`: Int32 {
    get {return _storage._class}
    set {_uniqueStorage()._class = newValue}
  }

  var clearExtensionValue_p: Int32 {
    get {return _storage._clearExtensionValue_p}
    set {_uniqueStorage()._clearExtensionValue_p = newValue}
  }

  var clearSourceContext_p: Int32 {
    get {return _storage._clearSourceContext_p}
    set {_uniqueStorage()._clearSourceContext_p = newValue}
  }

  var clearValue_p: Int32 {
    get {return _storage._clearValue_p}
    set {_uniqueStorage()._clearValue_p = newValue}
  }

  var codeUnits: Int32 {
    get {return _storage._codeUnits}
    set {_uniqueStorage()._codeUnits = newValue}
  }

  var collection: Int32 {
    get {return _storage._collection}
    set {_uniqueStorage()._collection = newValue}
  }

  var com: Int32 {
    get {return _storage._com}
    set {_uniqueStorage()._com = newValue}
  }

  var comma: Int32 {
    get {return _storage._comma}
    set {_uniqueStorage()._comma = newValue}
  }

  var contentsOf: Int32 {
    get {return _storage._contentsOf}
    set {_uniqueStorage()._contentsOf = newValue}
  }

  var count: Int32 {
    get {return _storage._count}
    set {_uniqueStorage()._count = newValue}
  }

  var countVarintsInBuffer: Int32 {
    get {return _storage._countVarintsInBuffer}
    set {_uniqueStorage()._countVarintsInBuffer = newValue}
  }

  var customCodable: Int32 {
    get {return _storage._customCodable}
    set {_uniqueStorage()._customCodable = newValue}
  }

  var customDebugStringConvertible: Int32 {
    get {return _storage._customDebugStringConvertible}
    set {_uniqueStorage()._customDebugStringConvertible = newValue}
  }

  var d: Int32 {
    get {return _storage._d}
    set {_uniqueStorage()._d = newValue}
  }

  var data: Int32 {
    get {return _storage._data}
    set {_uniqueStorage()._data = newValue}
  }

  var dataPointer: Int32 {
    get {return _storage._dataPointer}
    set {_uniqueStorage()._dataPointer = newValue}
  }

  var dataResult: Int32 {
    get {return _storage._dataResult}
    set {_uniqueStorage()._dataResult = newValue}
  }

  var dataSize: Int32 {
    get {return _storage._dataSize}
    set {_uniqueStorage()._dataSize = newValue}
  }

  var date: Int32 {
    get {return _storage._date}
    set {_uniqueStorage()._date = newValue}
  }

  var daySec: Int32 {
    get {return _storage._daySec}
    set {_uniqueStorage()._daySec = newValue}
  }

  var daysSinceEpoch: Int32 {
    get {return _storage._daysSinceEpoch}
    set {_uniqueStorage()._daysSinceEpoch = newValue}
  }

  var debugDescription_p: Int32 {
    get {return _storage._debugDescription_p}
    set {_uniqueStorage()._debugDescription_p = newValue}
  }

  var decoded: Int32 {
    get {return _storage._decoded}
    set {_uniqueStorage()._decoded = newValue}
  }

  var decodedFromJsonnull: Int32 {
    get {return _storage._decodedFromJsonnull}
    set {_uniqueStorage()._decodedFromJsonnull = newValue}
  }

  var decodeExtensionField: Int32 {
    get {return _storage._decodeExtensionField}
    set {_uniqueStorage()._decodeExtensionField = newValue}
  }

  var decodeExtensionFieldsAsMessageSet: Int32 {
    get {return _storage._decodeExtensionFieldsAsMessageSet}
    set {_uniqueStorage()._decodeExtensionFieldsAsMessageSet = newValue}
  }

  var decodeJson: Int32 {
    get {return _storage._decodeJson}
    set {_uniqueStorage()._decodeJson = newValue}
  }

  var decodeMapField: Int32 {
    get {return _storage._decodeMapField}
    set {_uniqueStorage()._decodeMapField = newValue}
  }

  var decodeMessage: Int32 {
    get {return _storage._decodeMessage}
    set {_uniqueStorage()._decodeMessage = newValue}
  }

  var decoder: Int32 {
    get {return _storage._decoder}
    set {_uniqueStorage()._decoder = newValue}
  }

  var decodeRepeated: Int32 {
    get {return _storage._decodeRepeated}
    set {_uniqueStorage()._decodeRepeated = newValue}
  }

  var decodeRepeatedBoolField: Int32 {
    get {return _storage._decodeRepeatedBoolField}
    set {_uniqueStorage()._decodeRepeatedBoolField = newValue}
  }

  var decodeRepeatedBytesField: Int32 {
    get {return _storage._decodeRepeatedBytesField}
    set {_uniqueStorage()._decodeRepeatedBytesField = newValue}
  }

  var decodeRepeatedDoubleField: Int32 {
    get {return _storage._decodeRepeatedDoubleField}
    set {_uniqueStorage()._decodeRepeatedDoubleField = newValue}
  }

  var decodeRepeatedEnumField: Int32 {
    get {return _storage._decodeRepeatedEnumField}
    set {_uniqueStorage()._decodeRepeatedEnumField = newValue}
  }

  var decodeRepeatedFixed32Field: Int32 {
    get {return _storage._decodeRepeatedFixed32Field}
    set {_uniqueStorage()._decodeRepeatedFixed32Field = newValue}
  }

  var decodeRepeatedFixed64Field: Int32 {
    get {return _storage._decodeRepeatedFixed64Field}
    set {_uniqueStorage()._decodeRepeatedFixed64Field = newValue}
  }

  var decodeRepeatedFloatField: Int32 {
    get {return _storage._decodeRepeatedFloatField}
    set {_uniqueStorage()._decodeRepeatedFloatField = newValue}
  }

  var decodeRepeatedGroupField: Int32 {
    get {return _storage._decodeRepeatedGroupField}
    set {_uniqueStorage()._decodeRepeatedGroupField = newValue}
  }

  var decodeRepeatedInt32Field: Int32 {
    get {return _storage._decodeRepeatedInt32Field}
    set {_uniqueStorage()._decodeRepeatedInt32Field = newValue}
  }

  var decodeRepeatedInt64Field: Int32 {
    get {return _storage._decodeRepeatedInt64Field}
    set {_uniqueStorage()._decodeRepeatedInt64Field = newValue}
  }

  var decodeRepeatedMessageField: Int32 {
    get {return _storage._decodeRepeatedMessageField}
    set {_uniqueStorage()._decodeRepeatedMessageField = newValue}
  }

  var decodeRepeatedSfixed32Field: Int32 {
    get {return _storage._decodeRepeatedSfixed32Field}
    set {_uniqueStorage()._decodeRepeatedSfixed32Field = newValue}
  }

  var decodeRepeatedSfixed64Field: Int32 {
    get {return _storage._decodeRepeatedSfixed64Field}
    set {_uniqueStorage()._decodeRepeatedSfixed64Field = newValue}
  }

  var decodeRepeatedSint32Field: Int32 {
    get {return _storage._decodeRepeatedSint32Field}
    set {_uniqueStorage()._decodeRepeatedSint32Field = newValue}
  }

  var decodeRepeatedSint64Field: Int32 {
    get {return _storage._decodeRepeatedSint64Field}
    set {_uniqueStorage()._decodeRepeatedSint64Field = newValue}
  }

  var decodeRepeatedStringField: Int32 {
    get {return _storage._decodeRepeatedStringField}
    set {_uniqueStorage()._decodeRepeatedStringField = newValue}
  }

  var decodeRepeatedUint32Field: Int32 {
    get {return _storage._decodeRepeatedUint32Field}
    set {_uniqueStorage()._decodeRepeatedUint32Field = newValue}
  }

  var decodeRepeatedUint64Field: Int32 {
    get {return _storage._decodeRepeatedUint64Field}
    set {_uniqueStorage()._decodeRepeatedUint64Field = newValue}
  }

  var decodeSingular: Int32 {
    get {return _storage._decodeSingular}
    set {_uniqueStorage()._decodeSingular = newValue}
  }

  var decodeSingularBoolField: Int32 {
    get {return _storage._decodeSingularBoolField}
    set {_uniqueStorage()._decodeSingularBoolField = newValue}
  }

  var decodeSingularBytesField: Int32 {
    get {return _storage._decodeSingularBytesField}
    set {_uniqueStorage()._decodeSingularBytesField = newValue}
  }

  var decodeSingularDoubleField: Int32 {
    get {return _storage._decodeSingularDoubleField}
    set {_uniqueStorage()._decodeSingularDoubleField = newValue}
  }

  var decodeSingularEnumField: Int32 {
    get {return _storage._decodeSingularEnumField}
    set {_uniqueStorage()._decodeSingularEnumField = newValue}
  }

  var decodeSingularFixed32Field: Int32 {
    get {return _storage._decodeSingularFixed32Field}
    set {_uniqueStorage()._decodeSingularFixed32Field = newValue}
  }

  var decodeSingularFixed64Field: Int32 {
    get {return _storage._decodeSingularFixed64Field}
    set {_uniqueStorage()._decodeSingularFixed64Field = newValue}
  }

  var decodeSingularFloatField: Int32 {
    get {return _storage._decodeSingularFloatField}
    set {_uniqueStorage()._decodeSingularFloatField = newValue}
  }

  var decodeSingularGroupField: Int32 {
    get {return _storage._decodeSingularGroupField}
    set {_uniqueStorage()._decodeSingularGroupField = newValue}
  }

  var decodeSingularInt32Field: Int32 {
    get {return _storage._decodeSingularInt32Field}
    set {_uniqueStorage()._decodeSingularInt32Field = newValue}
  }

  var decodeSingularInt64Field: Int32 {
    get {return _storage._decodeSingularInt64Field}
    set {_uniqueStorage()._decodeSingularInt64Field = newValue}
  }

  var decodeSingularMessageField: Int32 {
    get {return _storage._decodeSingularMessageField}
    set {_uniqueStorage()._decodeSingularMessageField = newValue}
  }

  var decodeSingularSfixed32Field: Int32 {
    get {return _storage._decodeSingularSfixed32Field}
    set {_uniqueStorage()._decodeSingularSfixed32Field = newValue}
  }

  var decodeSingularSfixed64Field: Int32 {
    get {return _storage._decodeSingularSfixed64Field}
    set {_uniqueStorage()._decodeSingularSfixed64Field = newValue}
  }

  var decodeSingularSint32Field: Int32 {
    get {return _storage._decodeSingularSint32Field}
    set {_uniqueStorage()._decodeSingularSint32Field = newValue}
  }

  var decodeSingularSint64Field: Int32 {
    get {return _storage._decodeSingularSint64Field}
    set {_uniqueStorage()._decodeSingularSint64Field = newValue}
  }

  var decodeSingularStringField: Int32 {
    get {return _storage._decodeSingularStringField}
    set {_uniqueStorage()._decodeSingularStringField = newValue}
  }

  var decodeSingularUint32Field: Int32 {
    get {return _storage._decodeSingularUint32Field}
    set {_uniqueStorage()._decodeSingularUint32Field = newValue}
  }

  var decodeSingularUint64Field: Int32 {
    get {return _storage._decodeSingularUint64Field}
    set {_uniqueStorage()._decodeSingularUint64Field = newValue}
  }

  var decodeTextFormat: Int32 {
    get {return _storage._decodeTextFormat}
    set {_uniqueStorage()._decodeTextFormat = newValue}
  }

  var defaultAnyTypeUrlprefix: Int32 {
    get {return _storage._defaultAnyTypeUrlprefix}
    set {_uniqueStorage()._defaultAnyTypeUrlprefix = newValue}
  }

  var defaultValue: Int32 {
    get {return _storage._defaultValue}
    set {_uniqueStorage()._defaultValue = newValue}
  }

  var description_p: Int32 {
    get {return _storage._description_p}
    set {_uniqueStorage()._description_p = newValue}
  }

  var dictionary: Int32 {
    get {return _storage._dictionary}
    set {_uniqueStorage()._dictionary = newValue}
  }

  var dictionaryLiteral: Int32 {
    get {return _storage._dictionaryLiteral}
    set {_uniqueStorage()._dictionaryLiteral = newValue}
  }

  var digit: Int32 {
    get {return _storage._digit}
    set {_uniqueStorage()._digit = newValue}
  }

  var digit0: Int32 {
    get {return _storage._digit0}
    set {_uniqueStorage()._digit0 = newValue}
  }

  var digit1: Int32 {
    get {return _storage._digit1}
    set {_uniqueStorage()._digit1 = newValue}
  }

  var digitCount: Int32 {
    get {return _storage._digitCount}
    set {_uniqueStorage()._digitCount = newValue}
  }

  var digits: Int32 {
    get {return _storage._digits}
    set {_uniqueStorage()._digits = newValue}
  }

  var digitValue: Int32 {
    get {return _storage._digitValue}
    set {_uniqueStorage()._digitValue = newValue}
  }

  var discardableResult: Int32 {
    get {return _storage._discardableResult}
    set {_uniqueStorage()._discardableResult = newValue}
  }

  var discardUnknownFields: Int32 {
    get {return _storage._discardUnknownFields}
    set {_uniqueStorage()._discardUnknownFields = newValue}
  }

  var distance: Int32 {
    get {return _storage._distance}
    set {_uniqueStorage()._distance = newValue}
  }

  var double: Int32 {
    get {return _storage._double}
    set {_uniqueStorage()._double = newValue}
  }

  var doubleToUtf8: Int32 {
    get {return _storage._doubleToUtf8}
    set {_uniqueStorage()._doubleToUtf8 = newValue}
  }

  var doubleValue: Int32 {
    get {return _storage._doubleValue}
    set {_uniqueStorage()._doubleValue = newValue}
  }

  var duration: Int32 {
    get {return _storage._duration}
    set {_uniqueStorage()._duration = newValue}
  }

  var e: Int32 {
    get {return _storage._e}
    set {_uniqueStorage()._e = newValue}
  }

  var element: Int32 {
    get {return _storage._element}
    set {_uniqueStorage()._element = newValue}
  }

  var elements: Int32 {
    get {return _storage._elements}
    set {_uniqueStorage()._elements = newValue}
  }

  var emitExtensionFieldName: Int32 {
    get {return _storage._emitExtensionFieldName}
    set {_uniqueStorage()._emitExtensionFieldName = newValue}
  }

  var emitFieldName: Int32 {
    get {return _storage._emitFieldName}
    set {_uniqueStorage()._emitFieldName = newValue}
  }

  var emitFieldNumber: Int32 {
    get {return _storage._emitFieldNumber}
    set {_uniqueStorage()._emitFieldNumber = newValue}
  }

  var empty: Int32 {
    get {return _storage._empty}
    set {_uniqueStorage()._empty = newValue}
  }

  var emptyData: Int32 {
    get {return _storage._emptyData}
    set {_uniqueStorage()._emptyData = newValue}
  }

  var encoded: Int32 {
    get {return _storage._encoded}
    set {_uniqueStorage()._encoded = newValue}
  }

  var encodedJsonstring: Int32 {
    get {return _storage._encodedJsonstring}
    set {_uniqueStorage()._encodedJsonstring = newValue}
  }

  var encodedSize: Int32 {
    get {return _storage._encodedSize}
    set {_uniqueStorage()._encodedSize = newValue}
  }

  var encodeField: Int32 {
    get {return _storage._encodeField}
    set {_uniqueStorage()._encodeField = newValue}
  }

  var encoder: Int32 {
    get {return _storage._encoder}
    set {_uniqueStorage()._encoder = newValue}
  }

  var end: Int32 {
    get {return _storage._end}
    set {_uniqueStorage()._end = newValue}
  }

  var endArray: Int32 {
    get {return _storage._endArray}
    set {_uniqueStorage()._endArray = newValue}
  }

  var endMessageField: Int32 {
    get {return _storage._endMessageField}
    set {_uniqueStorage()._endMessageField = newValue}
  }

  var endObject: Int32 {
    get {return _storage._endObject}
    set {_uniqueStorage()._endObject = newValue}
  }

  var endRegularField: Int32 {
    get {return _storage._endRegularField}
    set {_uniqueStorage()._endRegularField = newValue}
  }

  var `enum`: Int32 {
    get {return _storage._enum}
    set {_uniqueStorage()._enum = newValue}
  }

  var enumvalue: Int32 {
    get {return _storage._enumvalue}
    set {_uniqueStorage()._enumvalue = newValue}
  }

  var equatable: Int32 {
    get {return _storage._equatable}
    set {_uniqueStorage()._equatable = newValue}
  }

  var error: Int32 {
    get {return _storage._error}
    set {_uniqueStorage()._error = newValue}
  }

  var expressibleByArrayLiteral: Int32 {
    get {return _storage._expressibleByArrayLiteral}
    set {_uniqueStorage()._expressibleByArrayLiteral = newValue}
  }

  var expressibleByDictionaryLiteral: Int32 {
    get {return _storage._expressibleByDictionaryLiteral}
    set {_uniqueStorage()._expressibleByDictionaryLiteral = newValue}
  }

  var ext: Int32 {
    get {return _storage._ext}
    set {_uniqueStorage()._ext = newValue}
  }

  var extDecoder: Int32 {
    get {return _storage._extDecoder}
    set {_uniqueStorage()._extDecoder = newValue}
  }

  var extendedGraphemeClusterLiteral: Int32 {
    get {return _storage._extendedGraphemeClusterLiteral}
    set {_uniqueStorage()._extendedGraphemeClusterLiteral = newValue}
  }

  var extendedGraphemeClusterLiteralType: Int32 {
    get {return _storage._extendedGraphemeClusterLiteralType}
    set {_uniqueStorage()._extendedGraphemeClusterLiteralType = newValue}
  }

  var extensibleMessage: Int32 {
    get {return _storage._extensibleMessage}
    set {_uniqueStorage()._extensibleMessage = newValue}
  }

  var `extension`: Int32 {
    get {return _storage._extension}
    set {_uniqueStorage()._extension = newValue}
  }

  var extensionField: Int32 {
    get {return _storage._extensionField}
    set {_uniqueStorage()._extensionField = newValue}
  }

  var extensionFieldNumber: Int32 {
    get {return _storage._extensionFieldNumber}
    set {_uniqueStorage()._extensionFieldNumber = newValue}
  }

  var extensionFieldValueSet: Int32 {
    get {return _storage._extensionFieldValueSet}
    set {_uniqueStorage()._extensionFieldValueSet = newValue}
  }

  var extensionMap: Int32 {
    get {return _storage._extensionMap}
    set {_uniqueStorage()._extensionMap = newValue}
  }

  var extensions: Int32 {
    get {return _storage._extensions}
    set {_uniqueStorage()._extensions = newValue}
  }

  var extras: Int32 {
    get {return _storage._extras}
    set {_uniqueStorage()._extras = newValue}
  }

  var f: Int32 {
    get {return _storage._f}
    set {_uniqueStorage()._f = newValue}
  }

  var `false`: Int32 {
    get {return _storage._false}
    set {_uniqueStorage()._false = newValue}
  }

  var field: Int32 {
    get {return _storage._field}
    set {_uniqueStorage()._field = newValue}
  }

  var fieldData: Int32 {
    get {return _storage._fieldData}
    set {_uniqueStorage()._fieldData = newValue}
  }

  var fieldMask: Int32 {
    get {return _storage._fieldMask}
    set {_uniqueStorage()._fieldMask = newValue}
  }

  var fieldName: Int32 {
    get {return _storage._fieldName}
    set {_uniqueStorage()._fieldName = newValue}
  }

  var fieldNameCount: Int32 {
    get {return _storage._fieldNameCount}
    set {_uniqueStorage()._fieldNameCount = newValue}
  }

  var fieldNum: Int32 {
    get {return _storage._fieldNum}
    set {_uniqueStorage()._fieldNum = newValue}
  }

  var fieldNumber: Int32 {
    get {return _storage._fieldNumber}
    set {_uniqueStorage()._fieldNumber = newValue}
  }

  var fieldNumberForProto: Int32 {
    get {return _storage._fieldNumberForProto}
    set {_uniqueStorage()._fieldNumberForProto = newValue}
  }

  var fields: Int32 {
    get {return _storage._fields}
    set {_uniqueStorage()._fields = newValue}
  }

  var fieldSize: Int32 {
    get {return _storage._fieldSize}
    set {_uniqueStorage()._fieldSize = newValue}
  }

  var fieldTag: Int32 {
    get {return _storage._fieldTag}
    set {_uniqueStorage()._fieldTag = newValue}
  }

  var fieldType: Int32 {
    get {return _storage._fieldType}
    set {_uniqueStorage()._fieldType = newValue}
  }

  var fieldValue: Int32 {
    get {return _storage._fieldValue}
    set {_uniqueStorage()._fieldValue = newValue}
  }

  var fileName: Int32 {
    get {return _storage._fileName}
    set {_uniqueStorage()._fileName = newValue}
  }

  var filter: Int32 {
    get {return _storage._filter}
    set {_uniqueStorage()._filter = newValue}
  }

  var firstItem: Int32 {
    get {return _storage._firstItem}
    set {_uniqueStorage()._firstItem = newValue}
  }

  var float: Int32 {
    get {return _storage._float}
    set {_uniqueStorage()._float = newValue}
  }

  var floatLiteral: Int32 {
    get {return _storage._floatLiteral}
    set {_uniqueStorage()._floatLiteral = newValue}
  }

  var floatLiteralType: Int32 {
    get {return _storage._floatLiteralType}
    set {_uniqueStorage()._floatLiteralType = newValue}
  }

  var floatToUtf8: Int32 {
    get {return _storage._floatToUtf8}
    set {_uniqueStorage()._floatToUtf8 = newValue}
  }

  var floatValue: Int32 {
    get {return _storage._floatValue}
    set {_uniqueStorage()._floatValue = newValue}
  }

  var forMessageName: Int32 {
    get {return _storage._forMessageName}
    set {_uniqueStorage()._forMessageName = newValue}
  }

  var formUnion: Int32 {
    get {return _storage._formUnion}
    set {_uniqueStorage()._formUnion = newValue}
  }

  var forReadingFrom: Int32 {
    get {return _storage._forReadingFrom}
    set {_uniqueStorage()._forReadingFrom = newValue}
  }

  var forTypeURL: Int32 {
    get {return _storage._forTypeURL}
    set {_uniqueStorage()._forTypeURL = newValue}
  }

  var forwardParser: Int32 {
    get {return _storage._forwardParser}
    set {_uniqueStorage()._forwardParser = newValue}
  }

  var forWritingInto: Int32 {
    get {return _storage._forWritingInto}
    set {_uniqueStorage()._forWritingInto = newValue}
  }

  var from: Int32 {
    get {return _storage._from}
    set {_uniqueStorage()._from = newValue}
  }

  var fromAscii2: Int32 {
    get {return _storage._fromAscii2}
    set {_uniqueStorage()._fromAscii2 = newValue}
  }

  var fromAscii4: Int32 {
    get {return _storage._fromAscii4}
    set {_uniqueStorage()._fromAscii4 = newValue}
  }

  var fromHexDigit: Int32 {
    get {return _storage._fromHexDigit}
    set {_uniqueStorage()._fromHexDigit = newValue}
  }

  var `func`: Int32 {
    get {return _storage._func}
    set {_uniqueStorage()._func = newValue}
  }

  var g: Int32 {
    get {return _storage._g}
    set {_uniqueStorage()._g = newValue}
  }

  var get: Int32 {
    get {return _storage._get}
    set {_uniqueStorage()._get = newValue}
  }

  var getExtensionValue: Int32 {
    get {return _storage._getExtensionValue}
    set {_uniqueStorage()._getExtensionValue = newValue}
  }

  var googleapis: Int32 {
    get {return _storage._googleapis}
    set {_uniqueStorage()._googleapis = newValue}
  }

  var googleProtobufAny: Int32 {
    get {return _storage._googleProtobufAny}
    set {_uniqueStorage()._googleProtobufAny = newValue}
  }

  var googleProtobufApi: Int32 {
    get {return _storage._googleProtobufApi}
    set {_uniqueStorage()._googleProtobufApi = newValue}
  }

  var googleProtobufBoolValue: Int32 {
    get {return _storage._googleProtobufBoolValue}
    set {_uniqueStorage()._googleProtobufBoolValue = newValue}
  }

  var googleProtobufBytesValue: Int32 {
    get {return _storage._googleProtobufBytesValue}
    set {_uniqueStorage()._googleProtobufBytesValue = newValue}
  }

  var googleProtobufDoubleValue: Int32 {
    get {return _storage._googleProtobufDoubleValue}
    set {_uniqueStorage()._googleProtobufDoubleValue = newValue}
  }

  var googleProtobufDuration: Int32 {
    get {return _storage._googleProtobufDuration}
    set {_uniqueStorage()._googleProtobufDuration = newValue}
  }

  var googleProtobufEmpty: Int32 {
    get {return _storage._googleProtobufEmpty}
    set {_uniqueStorage()._googleProtobufEmpty = newValue}
  }

  var googleProtobufEnum: Int32 {
    get {return _storage._googleProtobufEnum}
    set {_uniqueStorage()._googleProtobufEnum = newValue}
  }

  var googleProtobufEnumValue: Int32 {
    get {return _storage._googleProtobufEnumValue}
    set {_uniqueStorage()._googleProtobufEnumValue = newValue}
  }

  var googleProtobufField: Int32 {
    get {return _storage._googleProtobufField}
    set {_uniqueStorage()._googleProtobufField = newValue}
  }

  var googleProtobufFieldMask: Int32 {
    get {return _storage._googleProtobufFieldMask}
    set {_uniqueStorage()._googleProtobufFieldMask = newValue}
  }

  var googleProtobufFloatValue: Int32 {
    get {return _storage._googleProtobufFloatValue}
    set {_uniqueStorage()._googleProtobufFloatValue = newValue}
  }

  var googleProtobufInt32Value: Int32 {
    get {return _storage._googleProtobufInt32Value}
    set {_uniqueStorage()._googleProtobufInt32Value = newValue}
  }

  var googleProtobufInt64Value: Int32 {
    get {return _storage._googleProtobufInt64Value}
    set {_uniqueStorage()._googleProtobufInt64Value = newValue}
  }

  var googleProtobufListValue: Int32 {
    get {return _storage._googleProtobufListValue}
    set {_uniqueStorage()._googleProtobufListValue = newValue}
  }

  var googleProtobufMethod: Int32 {
    get {return _storage._googleProtobufMethod}
    set {_uniqueStorage()._googleProtobufMethod = newValue}
  }

  var googleProtobufMixin: Int32 {
    get {return _storage._googleProtobufMixin}
    set {_uniqueStorage()._googleProtobufMixin = newValue}
  }

  var googleProtobufNullValue: Int32 {
    get {return _storage._googleProtobufNullValue}
    set {_uniqueStorage()._googleProtobufNullValue = newValue}
  }

  var googleProtobufOption: Int32 {
    get {return _storage._googleProtobufOption}
    set {_uniqueStorage()._googleProtobufOption = newValue}
  }

  var googleProtobufSourceContext: Int32 {
    get {return _storage._googleProtobufSourceContext}
    set {_uniqueStorage()._googleProtobufSourceContext = newValue}
  }

  var googleProtobufStringValue: Int32 {
    get {return _storage._googleProtobufStringValue}
    set {_uniqueStorage()._googleProtobufStringValue = newValue}
  }

  var googleProtobufStruct: Int32 {
    get {return _storage._googleProtobufStruct}
    set {_uniqueStorage()._googleProtobufStruct = newValue}
  }

  var googleProtobufSyntax: Int32 {
    get {return _storage._googleProtobufSyntax}
    set {_uniqueStorage()._googleProtobufSyntax = newValue}
  }

  var googleProtobufTimestamp: Int32 {
    get {return _storage._googleProtobufTimestamp}
    set {_uniqueStorage()._googleProtobufTimestamp = newValue}
  }

  var googleProtobufType: Int32 {
    get {return _storage._googleProtobufType}
    set {_uniqueStorage()._googleProtobufType = newValue}
  }

  var googleProtobufUint32Value: Int32 {
    get {return _storage._googleProtobufUint32Value}
    set {_uniqueStorage()._googleProtobufUint32Value = newValue}
  }

  var googleProtobufUint64Value: Int32 {
    get {return _storage._googleProtobufUint64Value}
    set {_uniqueStorage()._googleProtobufUint64Value = newValue}
  }

  var googleProtobufValue: Int32 {
    get {return _storage._googleProtobufValue}
    set {_uniqueStorage()._googleProtobufValue = newValue}
  }

  var group: Int32 {
    get {return _storage._group}
    set {_uniqueStorage()._group = newValue}
  }

  var groupSize: Int32 {
    get {return _storage._groupSize}
    set {_uniqueStorage()._groupSize = newValue}
  }

  var h: Int32 {
    get {return _storage._h}
    set {_uniqueStorage()._h = newValue}
  }

  var handleConflictingOneOf: Int32 {
    get {return _storage._handleConflictingOneOf}
    set {_uniqueStorage()._handleConflictingOneOf = newValue}
  }

  var hasExtensionValue_p: Int32 {
    get {return _storage._hasExtensionValue_p}
    set {_uniqueStorage()._hasExtensionValue_p = newValue}
  }

  var hash: Int32 {
    get {return _storage._hash}
    set {_uniqueStorage()._hash = newValue}
  }

  var hashable: Int32 {
    get {return _storage._hashable}
    set {_uniqueStorage()._hashable = newValue}
  }

  var hashValue_p: Int32 {
    get {return _storage._hashValue_p}
    set {_uniqueStorage()._hashValue_p = newValue}
  }

  var hashVisitor: Int32 {
    get {return _storage._hashVisitor}
    set {_uniqueStorage()._hashVisitor = newValue}
  }

  var hasSourceContext_p: Int32 {
    get {return _storage._hasSourceContext_p}
    set {_uniqueStorage()._hasSourceContext_p = newValue}
  }

  var hasValue_p: Int32 {
    get {return _storage._hasValue_p}
    set {_uniqueStorage()._hasValue_p = newValue}
  }

  var hour: Int32 {
    get {return _storage._hour}
    set {_uniqueStorage()._hour = newValue}
  }

  var i: Int32 {
    get {return _storage._i}
    set {_uniqueStorage()._i = newValue}
  }

  var index: Int32 {
    get {return _storage._index}
    set {_uniqueStorage()._index = newValue}
  }

  var init_p: Int32 {
    get {return _storage._init_p}
    set {_uniqueStorage()._init_p = newValue}
  }

  var `inout`: Int32 {
    get {return _storage._inout}
    set {_uniqueStorage()._inout = newValue}
  }

  var insert: Int32 {
    get {return _storage._insert}
    set {_uniqueStorage()._insert = newValue}
  }

  var int: Int32 {
    get {return _storage._int}
    set {_uniqueStorage()._int = newValue}
  }

  var int32: Int32 {
    get {return _storage._int32}
    set {_uniqueStorage()._int32 = newValue}
  }

  var int32Value: Int32 {
    get {return _storage._int32Value}
    set {_uniqueStorage()._int32Value = newValue}
  }

  var int64: Int32 {
    get {return _storage._int64}
    set {_uniqueStorage()._int64 = newValue}
  }

  var int64Value: Int32 {
    get {return _storage._int64Value}
    set {_uniqueStorage()._int64Value = newValue}
  }

  var int8: Int32 {
    get {return _storage._int8}
    set {_uniqueStorage()._int8 = newValue}
  }

  var integerLiteral: Int32 {
    get {return _storage._integerLiteral}
    set {_uniqueStorage()._integerLiteral = newValue}
  }

  var integerLiteralType: Int32 {
    get {return _storage._integerLiteralType}
    set {_uniqueStorage()._integerLiteralType = newValue}
  }

  var intern: Int32 {
    get {return _storage._intern}
    set {_uniqueStorage()._intern = newValue}
  }

  var `internal`: Int32 {
    get {return _storage._internal}
    set {_uniqueStorage()._internal = newValue}
  }

  var internalState: Int32 {
    get {return _storage._internalState}
    set {_uniqueStorage()._internalState = newValue}
  }

  var ints: Int32 {
    get {return _storage._ints}
    set {_uniqueStorage()._ints = newValue}
  }

  var isA: Int32 {
    get {return _storage._isA}
    set {_uniqueStorage()._isA = newValue}
  }

  var isEqual: Int32 {
    get {return _storage._isEqual}
    set {_uniqueStorage()._isEqual = newValue}
  }

  var isEqualTo: Int32 {
    get {return _storage._isEqualTo}
    set {_uniqueStorage()._isEqualTo = newValue}
  }

  var isInitialized_p: Int32 {
    get {return _storage._isInitialized_p}
    set {_uniqueStorage()._isInitialized_p = newValue}
  }

  var it: Int32 {
    get {return _storage._it}
    set {_uniqueStorage()._it = newValue}
  }

  var itemTagsEncodedSize: Int32 {
    get {return _storage._itemTagsEncodedSize}
    set {_uniqueStorage()._itemTagsEncodedSize = newValue}
  }

  var iterator: Int32 {
    get {return _storage._iterator}
    set {_uniqueStorage()._iterator = newValue}
  }

  var i2166136261: Int32 {
    get {return _storage._i2166136261}
    set {_uniqueStorage()._i2166136261 = newValue}
  }

  var jsondecoder: Int32 {
    get {return _storage._jsondecoder}
    set {_uniqueStorage()._jsondecoder = newValue}
  }

  var jsondecodingError: Int32 {
    get {return _storage._jsondecodingError}
    set {_uniqueStorage()._jsondecodingError = newValue}
  }

  var jsondecodingOptions: Int32 {
    get {return _storage._jsondecodingOptions}
    set {_uniqueStorage()._jsondecodingOptions = newValue}
  }

  var jsonEncoder: Int32 {
    get {return _storage._jsonEncoder}
    set {_uniqueStorage()._jsonEncoder = newValue}
  }

  var jsonencodingError: Int32 {
    get {return _storage._jsonencodingError}
    set {_uniqueStorage()._jsonencodingError = newValue}
  }

  var jsonencodingVisitor: Int32 {
    get {return _storage._jsonencodingVisitor}
    set {_uniqueStorage()._jsonencodingVisitor = newValue}
  }

  var jsonmapEncodingVisitor: Int32 {
    get {return _storage._jsonmapEncodingVisitor}
    set {_uniqueStorage()._jsonmapEncodingVisitor = newValue}
  }

  var jsonName: Int32 {
    get {return _storage._jsonName}
    set {_uniqueStorage()._jsonName = newValue}
  }

  var jsonPath: Int32 {
    get {return _storage._jsonPath}
    set {_uniqueStorage()._jsonPath = newValue}
  }

  var jsonPaths: Int32 {
    get {return _storage._jsonPaths}
    set {_uniqueStorage()._jsonPaths = newValue}
  }

  var jsonscanner: Int32 {
    get {return _storage._jsonscanner}
    set {_uniqueStorage()._jsonscanner = newValue}
  }

  var jsonString: Int32 {
    get {return _storage._jsonString}
    set {_uniqueStorage()._jsonString = newValue}
  }

  var jsonText: Int32 {
    get {return _storage._jsonText}
    set {_uniqueStorage()._jsonText = newValue}
  }

  var jsonUtf8Data: Int32 {
    get {return _storage._jsonUtf8Data}
    set {_uniqueStorage()._jsonUtf8Data = newValue}
  }

  var k: Int32 {
    get {return _storage._k}
    set {_uniqueStorage()._k = newValue}
  }

  var key: Int32 {
    get {return _storage._key}
    set {_uniqueStorage()._key = newValue}
  }

  var keyField: Int32 {
    get {return _storage._keyField}
    set {_uniqueStorage()._keyField = newValue}
  }

  var keyType: Int32 {
    get {return _storage._keyType}
    set {_uniqueStorage()._keyType = newValue}
  }

  var kind: Int32 {
    get {return _storage._kind}
    set {_uniqueStorage()._kind = newValue}
  }

  var l: Int32 {
    get {return _storage._l}
    set {_uniqueStorage()._l = newValue}
  }

  var length: Int32 {
    get {return _storage._length}
    set {_uniqueStorage()._length = newValue}
  }

  var `let`: Int32 {
    get {return _storage._let}
    set {_uniqueStorage()._let = newValue}
  }

  var lhs: Int32 {
    get {return _storage._lhs}
    set {_uniqueStorage()._lhs = newValue}
  }

  var list: Int32 {
    get {return _storage._list}
    set {_uniqueStorage()._list = newValue}
  }

  var listOfMessages: Int32 {
    get {return _storage._listOfMessages}
    set {_uniqueStorage()._listOfMessages = newValue}
  }

  var listValue: Int32 {
    get {return _storage._listValue}
    set {_uniqueStorage()._listValue = newValue}
  }

  var littleEndian: Int32 {
    get {return _storage._littleEndian}
    set {_uniqueStorage()._littleEndian = newValue}
  }

  var littleEndianBytes: Int32 {
    get {return _storage._littleEndianBytes}
    set {_uniqueStorage()._littleEndianBytes = newValue}
  }

  var m: Int32 {
    get {return _storage._m}
    set {_uniqueStorage()._m = newValue}
  }

  var major: Int32 {
    get {return _storage._major}
    set {_uniqueStorage()._major = newValue}
  }

  var makeIterator: Int32 {
    get {return _storage._makeIterator}
    set {_uniqueStorage()._makeIterator = newValue}
  }

  var mapHash: Int32 {
    get {return _storage._mapHash}
    set {_uniqueStorage()._mapHash = newValue}
  }

  var mapKeyType: Int32 {
    get {return _storage._mapKeyType}
    set {_uniqueStorage()._mapKeyType = newValue}
  }

  var mapNameResolver: Int32 {
    get {return _storage._mapNameResolver}
    set {_uniqueStorage()._mapNameResolver = newValue}
  }

  var mapToMessages: Int32 {
    get {return _storage._mapToMessages}
    set {_uniqueStorage()._mapToMessages = newValue}
  }

  var mapValueType: Int32 {
    get {return _storage._mapValueType}
    set {_uniqueStorage()._mapValueType = newValue}
  }

  var mapVisitor: Int32 {
    get {return _storage._mapVisitor}
    set {_uniqueStorage()._mapVisitor = newValue}
  }

  var mdayStart: Int32 {
    get {return _storage._mdayStart}
    set {_uniqueStorage()._mdayStart = newValue}
  }

  var merge: Int32 {
    get {return _storage._merge}
    set {_uniqueStorage()._merge = newValue}
  }

  var message: Int32 {
    get {return _storage._message}
    set {_uniqueStorage()._message = newValue}
  }

  var messageDepthLimit: Int32 {
    get {return _storage._messageDepthLimit}
    set {_uniqueStorage()._messageDepthLimit = newValue}
  }

  var messageExtension: Int32 {
    get {return _storage._messageExtension}
    set {_uniqueStorage()._messageExtension = newValue}
  }

  var messageImplementationBase: Int32 {
    get {return _storage._messageImplementationBase}
    set {_uniqueStorage()._messageImplementationBase = newValue}
  }

  var messageSet: Int32 {
    get {return _storage._messageSet}
    set {_uniqueStorage()._messageSet = newValue}
  }

  var messageType: Int32 {
    get {return _storage._messageType}
    set {_uniqueStorage()._messageType = newValue}
  }

  var method: Int32 {
    get {return _storage._method}
    set {_uniqueStorage()._method = newValue}
  }

  var methods: Int32 {
    get {return _storage._methods}
    set {_uniqueStorage()._methods = newValue}
  }

  var minor: Int32 {
    get {return _storage._minor}
    set {_uniqueStorage()._minor = newValue}
  }

  var mixin: Int32 {
    get {return _storage._mixin}
    set {_uniqueStorage()._mixin = newValue}
  }

  var mixins: Int32 {
    get {return _storage._mixins}
    set {_uniqueStorage()._mixins = newValue}
  }

  var month: Int32 {
    get {return _storage._month}
    set {_uniqueStorage()._month = newValue}
  }

  var msgExtension: Int32 {
    get {return _storage._msgExtension}
    set {_uniqueStorage()._msgExtension = newValue}
  }

  var mutating: Int32 {
    get {return _storage._mutating}
    set {_uniqueStorage()._mutating = newValue}
  }

  var n: Int32 {
    get {return _storage._n}
    set {_uniqueStorage()._n = newValue}
  }

  var name: Int32 {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  var nameDescription: Int32 {
    get {return _storage._nameDescription}
    set {_uniqueStorage()._nameDescription = newValue}
  }

  var nameMap: Int32 {
    get {return _storage._nameMap}
    set {_uniqueStorage()._nameMap = newValue}
  }

  var nameResolver: Int32 {
    get {return _storage._nameResolver}
    set {_uniqueStorage()._nameResolver = newValue}
  }

  var names: Int32 {
    get {return _storage._names}
    set {_uniqueStorage()._names = newValue}
  }

  var nanos: Int32 {
    get {return _storage._nanos}
    set {_uniqueStorage()._nanos = newValue}
  }

  var nativeBytes: Int32 {
    get {return _storage._nativeBytes}
    set {_uniqueStorage()._nativeBytes = newValue}
  }

  var nativeEndianBytes: Int32 {
    get {return _storage._nativeEndianBytes}
    set {_uniqueStorage()._nativeEndianBytes = newValue}
  }

  var newL: Int32 {
    get {return _storage._newL}
    set {_uniqueStorage()._newL = newValue}
  }

  var newList: Int32 {
    get {return _storage._newList}
    set {_uniqueStorage()._newList = newValue}
  }

  var newValue: Int32 {
    get {return _storage._newValue}
    set {_uniqueStorage()._newValue = newValue}
  }

  var nextByte: Int32 {
    get {return _storage._nextByte}
    set {_uniqueStorage()._nextByte = newValue}
  }

  var nextFieldNumber: Int32 {
    get {return _storage._nextFieldNumber}
    set {_uniqueStorage()._nextFieldNumber = newValue}
  }

  var `nil`: Int32 {
    get {return _storage._nil}
    set {_uniqueStorage()._nil = newValue}
  }

  var nilLiteral: Int32 {
    get {return _storage._nilLiteral}
    set {_uniqueStorage()._nilLiteral = newValue}
  }

  var nullValue: Int32 {
    get {return _storage._nullValue}
    set {_uniqueStorage()._nullValue = newValue}
  }

  var number: Int32 {
    get {return _storage._number}
    set {_uniqueStorage()._number = newValue}
  }

  var numberValue: Int32 {
    get {return _storage._numberValue}
    set {_uniqueStorage()._numberValue = newValue}
  }

  var of: Int32 {
    get {return _storage._of}
    set {_uniqueStorage()._of = newValue}
  }

  var oneofIndex: Int32 {
    get {return _storage._oneofIndex}
    set {_uniqueStorage()._oneofIndex = newValue}
  }

  var oneofs: Int32 {
    get {return _storage._oneofs}
    set {_uniqueStorage()._oneofs = newValue}
  }

  var oneOfKind: Int32 {
    get {return _storage._oneOfKind}
    set {_uniqueStorage()._oneOfKind = newValue}
  }

  var option: Int32 {
    get {return _storage._option}
    set {_uniqueStorage()._option = newValue}
  }

  var optionalEnumExtensionField: Int32 {
    get {return _storage._optionalEnumExtensionField}
    set {_uniqueStorage()._optionalEnumExtensionField = newValue}
  }

  var optionalExtensionField: Int32 {
    get {return _storage._optionalExtensionField}
    set {_uniqueStorage()._optionalExtensionField = newValue}
  }

  var optionalGroupExtensionField: Int32 {
    get {return _storage._optionalGroupExtensionField}
    set {_uniqueStorage()._optionalGroupExtensionField = newValue}
  }

  var optionalMessageExtensionField: Int32 {
    get {return _storage._optionalMessageExtensionField}
    set {_uniqueStorage()._optionalMessageExtensionField = newValue}
  }

  var options: Int32 {
    get {return _storage._options}
    set {_uniqueStorage()._options = newValue}
  }

  var other: Int32 {
    get {return _storage._other}
    set {_uniqueStorage()._other = newValue}
  }

  var others: Int32 {
    get {return _storage._others}
    set {_uniqueStorage()._others = newValue}
  }

  var out: Int32 {
    get {return _storage._out}
    set {_uniqueStorage()._out = newValue}
  }

  var output: Int32 {
    get {return _storage._output}
    set {_uniqueStorage()._output = newValue}
  }

  var p: Int32 {
    get {return _storage._p}
    set {_uniqueStorage()._p = newValue}
  }

  var packed: Int32 {
    get {return _storage._packed}
    set {_uniqueStorage()._packed = newValue}
  }

  var packedEnumExtensionField: Int32 {
    get {return _storage._packedEnumExtensionField}
    set {_uniqueStorage()._packedEnumExtensionField = newValue}
  }

  var packedExtensionField: Int32 {
    get {return _storage._packedExtensionField}
    set {_uniqueStorage()._packedExtensionField = newValue}
  }

  var packedSize: Int32 {
    get {return _storage._packedSize}
    set {_uniqueStorage()._packedSize = newValue}
  }

  var padding: Int32 {
    get {return _storage._padding}
    set {_uniqueStorage()._padding = newValue}
  }

  var parent: Int32 {
    get {return _storage._parent}
    set {_uniqueStorage()._parent = newValue}
  }

  var parse: Int32 {
    get {return _storage._parse}
    set {_uniqueStorage()._parse = newValue}
  }

  var partial: Int32 {
    get {return _storage._partial}
    set {_uniqueStorage()._partial = newValue}
  }

  var path: Int32 {
    get {return _storage._path}
    set {_uniqueStorage()._path = newValue}
  }

  var paths: Int32 {
    get {return _storage._paths}
    set {_uniqueStorage()._paths = newValue}
  }

  var payload: Int32 {
    get {return _storage._payload}
    set {_uniqueStorage()._payload = newValue}
  }

  var payloadSize: Int32 {
    get {return _storage._payloadSize}
    set {_uniqueStorage()._payloadSize = newValue}
  }

  var pointer: Int32 {
    get {return _storage._pointer}
    set {_uniqueStorage()._pointer = newValue}
  }

  var pos: Int32 {
    get {return _storage._pos}
    set {_uniqueStorage()._pos = newValue}
  }

  var prefix: Int32 {
    get {return _storage._prefix}
    set {_uniqueStorage()._prefix = newValue}
  }

  var preTraverse: Int32 {
    get {return _storage._preTraverse}
    set {_uniqueStorage()._preTraverse = newValue}
  }

  var proto2: Int32 {
    get {return _storage._proto2}
    set {_uniqueStorage()._proto2 = newValue}
  }

  var proto3DefaultValue: Int32 {
    get {return _storage._proto3DefaultValue}
    set {_uniqueStorage()._proto3DefaultValue = newValue}
  }

  var protobufApiversionCheck: Int32 {
    get {return _storage._protobufApiversionCheck}
    set {_uniqueStorage()._protobufApiversionCheck = newValue}
  }

  var protobufApiversion2: Int32 {
    get {return _storage._protobufApiversion2}
    set {_uniqueStorage()._protobufApiversion2 = newValue}
  }

  var protobufBool: Int32 {
    get {return _storage._protobufBool}
    set {_uniqueStorage()._protobufBool = newValue}
  }

  var protobufBytes: Int32 {
    get {return _storage._protobufBytes}
    set {_uniqueStorage()._protobufBytes = newValue}
  }

  var protobufDouble: Int32 {
    get {return _storage._protobufDouble}
    set {_uniqueStorage()._protobufDouble = newValue}
  }

  var protobufEnumMap: Int32 {
    get {return _storage._protobufEnumMap}
    set {_uniqueStorage()._protobufEnumMap = newValue}
  }

  var protobufExtension: Int32 {
    get {return _storage._protobufExtension}
    set {_uniqueStorage()._protobufExtension = newValue}
  }

  var protobufFixed32: Int32 {
    get {return _storage._protobufFixed32}
    set {_uniqueStorage()._protobufFixed32 = newValue}
  }

  var protobufFixed64: Int32 {
    get {return _storage._protobufFixed64}
    set {_uniqueStorage()._protobufFixed64 = newValue}
  }

  var protobufFloat: Int32 {
    get {return _storage._protobufFloat}
    set {_uniqueStorage()._protobufFloat = newValue}
  }

  var protobufInt32: Int32 {
    get {return _storage._protobufInt32}
    set {_uniqueStorage()._protobufInt32 = newValue}
  }

  var protobufInt64: Int32 {
    get {return _storage._protobufInt64}
    set {_uniqueStorage()._protobufInt64 = newValue}
  }

  var protobufMap: Int32 {
    get {return _storage._protobufMap}
    set {_uniqueStorage()._protobufMap = newValue}
  }

  var protobufMessageMap: Int32 {
    get {return _storage._protobufMessageMap}
    set {_uniqueStorage()._protobufMessageMap = newValue}
  }

  var protobufSfixed32: Int32 {
    get {return _storage._protobufSfixed32}
    set {_uniqueStorage()._protobufSfixed32 = newValue}
  }

  var protobufSfixed64: Int32 {
    get {return _storage._protobufSfixed64}
    set {_uniqueStorage()._protobufSfixed64 = newValue}
  }

  var protobufSint32: Int32 {
    get {return _storage._protobufSint32}
    set {_uniqueStorage()._protobufSint32 = newValue}
  }

  var protobufSint64: Int32 {
    get {return _storage._protobufSint64}
    set {_uniqueStorage()._protobufSint64 = newValue}
  }

  var protobufString: Int32 {
    get {return _storage._protobufString}
    set {_uniqueStorage()._protobufString = newValue}
  }

  var protobufUint32: Int32 {
    get {return _storage._protobufUint32}
    set {_uniqueStorage()._protobufUint32 = newValue}
  }

  var protobufUint64: Int32 {
    get {return _storage._protobufUint64}
    set {_uniqueStorage()._protobufUint64 = newValue}
  }

  var protobufExtensionFieldValues: Int32 {
    get {return _storage._protobufExtensionFieldValues}
    set {_uniqueStorage()._protobufExtensionFieldValues = newValue}
  }

  var protobufFieldNumber: Int32 {
    get {return _storage._protobufFieldNumber}
    set {_uniqueStorage()._protobufFieldNumber = newValue}
  }

  var protobufGeneratedIsEqualTo: Int32 {
    get {return _storage._protobufGeneratedIsEqualTo}
    set {_uniqueStorage()._protobufGeneratedIsEqualTo = newValue}
  }

  var protobufNameMap: Int32 {
    get {return _storage._protobufNameMap}
    set {_uniqueStorage()._protobufNameMap = newValue}
  }

  var protobufNewField: Int32 {
    get {return _storage._protobufNewField}
    set {_uniqueStorage()._protobufNewField = newValue}
  }

  var protobufPackage: Int32 {
    get {return _storage._protobufPackage}
    set {_uniqueStorage()._protobufPackage = newValue}
  }

  var `protocol`: Int32 {
    get {return _storage._protocol}
    set {_uniqueStorage()._protocol = newValue}
  }

  var protoFieldName: Int32 {
    get {return _storage._protoFieldName}
    set {_uniqueStorage()._protoFieldName = newValue}
  }

  var protoMessageName: Int32 {
    get {return _storage._protoMessageName}
    set {_uniqueStorage()._protoMessageName = newValue}
  }

  var protoNameProviding: Int32 {
    get {return _storage._protoNameProviding}
    set {_uniqueStorage()._protoNameProviding = newValue}
  }

  var protoPaths: Int32 {
    get {return _storage._protoPaths}
    set {_uniqueStorage()._protoPaths = newValue}
  }

  var `public`: Int32 {
    get {return _storage._public}
    set {_uniqueStorage()._public = newValue}
  }

  var putBoolValue: Int32 {
    get {return _storage._putBoolValue}
    set {_uniqueStorage()._putBoolValue = newValue}
  }

  var putBytesValue: Int32 {
    get {return _storage._putBytesValue}
    set {_uniqueStorage()._putBytesValue = newValue}
  }

  var putDoubleValue: Int32 {
    get {return _storage._putDoubleValue}
    set {_uniqueStorage()._putDoubleValue = newValue}
  }

  var putEnumValue: Int32 {
    get {return _storage._putEnumValue}
    set {_uniqueStorage()._putEnumValue = newValue}
  }

  var putFixedUint32: Int32 {
    get {return _storage._putFixedUint32}
    set {_uniqueStorage()._putFixedUint32 = newValue}
  }

  var putFixedUint64: Int32 {
    get {return _storage._putFixedUint64}
    set {_uniqueStorage()._putFixedUint64 = newValue}
  }

  var putFloatValue: Int32 {
    get {return _storage._putFloatValue}
    set {_uniqueStorage()._putFloatValue = newValue}
  }

  var putInt64: Int32 {
    get {return _storage._putInt64}
    set {_uniqueStorage()._putInt64 = newValue}
  }

  var putStringValue: Int32 {
    get {return _storage._putStringValue}
    set {_uniqueStorage()._putStringValue = newValue}
  }

  var putUint64: Int32 {
    get {return _storage._putUint64}
    set {_uniqueStorage()._putUint64 = newValue}
  }

  var putUint64Hex: Int32 {
    get {return _storage._putUint64Hex}
    set {_uniqueStorage()._putUint64Hex = newValue}
  }

  var putVarInt: Int32 {
    get {return _storage._putVarInt}
    set {_uniqueStorage()._putVarInt = newValue}
  }

  var putZigZagVarInt: Int32 {
    get {return _storage._putZigZagVarInt}
    set {_uniqueStorage()._putZigZagVarInt = newValue}
  }

  var rawChars: Int32 {
    get {return _storage._rawChars}
    set {_uniqueStorage()._rawChars = newValue}
  }

  var rawRepresentable: Int32 {
    get {return _storage._rawRepresentable}
    set {_uniqueStorage()._rawRepresentable = newValue}
  }

  var rawValue: Int32 {
    get {return _storage._rawValue}
    set {_uniqueStorage()._rawValue = newValue}
  }

  var readBuffer: Int32 {
    get {return _storage._readBuffer}
    set {_uniqueStorage()._readBuffer = newValue}
  }

  var register: Int32 {
    get {return _storage._register}
    set {_uniqueStorage()._register = newValue}
  }

  var repeatedEnumExtensionField: Int32 {
    get {return _storage._repeatedEnumExtensionField}
    set {_uniqueStorage()._repeatedEnumExtensionField = newValue}
  }

  var repeatedExtensionField: Int32 {
    get {return _storage._repeatedExtensionField}
    set {_uniqueStorage()._repeatedExtensionField = newValue}
  }

  var repeatedGroupExtensionField: Int32 {
    get {return _storage._repeatedGroupExtensionField}
    set {_uniqueStorage()._repeatedGroupExtensionField = newValue}
  }

  var repeatedMessageExtensionField: Int32 {
    get {return _storage._repeatedMessageExtensionField}
    set {_uniqueStorage()._repeatedMessageExtensionField = newValue}
  }

  var requestStreaming: Int32 {
    get {return _storage._requestStreaming}
    set {_uniqueStorage()._requestStreaming = newValue}
  }

  var requestTypeURL: Int32 {
    get {return _storage._requestTypeURL}
    set {_uniqueStorage()._requestTypeURL = newValue}
  }

  var requiredSize: Int32 {
    get {return _storage._requiredSize}
    set {_uniqueStorage()._requiredSize = newValue}
  }

  var responseStreaming: Int32 {
    get {return _storage._responseStreaming}
    set {_uniqueStorage()._responseStreaming = newValue}
  }

  var responseTypeURL: Int32 {
    get {return _storage._responseTypeURL}
    set {_uniqueStorage()._responseTypeURL = newValue}
  }

  var result: Int32 {
    get {return _storage._result}
    set {_uniqueStorage()._result = newValue}
  }

  var `return`: Int32 {
    get {return _storage._return}
    set {_uniqueStorage()._return = newValue}
  }

  var revision: Int32 {
    get {return _storage._revision}
    set {_uniqueStorage()._revision = newValue}
  }

  var rhs: Int32 {
    get {return _storage._rhs}
    set {_uniqueStorage()._rhs = newValue}
  }

  var root: Int32 {
    get {return _storage._root}
    set {_uniqueStorage()._root = newValue}
  }

  var s: Int32 {
    get {return _storage._s}
    set {_uniqueStorage()._s = newValue}
  }

  var sawBackslash: Int32 {
    get {return _storage._sawBackslash}
    set {_uniqueStorage()._sawBackslash = newValue}
  }

  var sawSection4Characters: Int32 {
    get {return _storage._sawSection4Characters}
    set {_uniqueStorage()._sawSection4Characters = newValue}
  }

  var sawSection5Characters: Int32 {
    get {return _storage._sawSection5Characters}
    set {_uniqueStorage()._sawSection5Characters = newValue}
  }

  var scanner: Int32 {
    get {return _storage._scanner}
    set {_uniqueStorage()._scanner = newValue}
  }

  var seconds: Int32 {
    get {return _storage._seconds}
    set {_uniqueStorage()._seconds = newValue}
  }

  var self_p: Int32 {
    get {return _storage._self_p}
    set {_uniqueStorage()._self_p = newValue}
  }

  var separator: Int32 {
    get {return _storage._separator}
    set {_uniqueStorage()._separator = newValue}
  }

  var serialize: Int32 {
    get {return _storage._serialize}
    set {_uniqueStorage()._serialize = newValue}
  }

  var serializedData: Int32 {
    get {return _storage._serializedData}
    set {_uniqueStorage()._serializedData = newValue}
  }

  var serializedSize: Int32 {
    get {return _storage._serializedSize}
    set {_uniqueStorage()._serializedSize = newValue}
  }

  var set: Int32 {
    get {return _storage._set}
    set {_uniqueStorage()._set = newValue}
  }

  var setExtensionValue: Int32 {
    get {return _storage._setExtensionValue}
    set {_uniqueStorage()._setExtensionValue = newValue}
  }

  var shift: Int32 {
    get {return _storage._shift}
    set {_uniqueStorage()._shift = newValue}
  }

  var simpleExtensionMap: Int32 {
    get {return _storage._simpleExtensionMap}
    set {_uniqueStorage()._simpleExtensionMap = newValue}
  }

  var sizer: Int32 {
    get {return _storage._sizer}
    set {_uniqueStorage()._sizer = newValue}
  }

  var source: Int32 {
    get {return _storage._source}
    set {_uniqueStorage()._source = newValue}
  }

  var sourceContext: Int32 {
    get {return _storage._sourceContext}
    set {_uniqueStorage()._sourceContext = newValue}
  }

  var sourceEncoding: Int32 {
    get {return _storage._sourceEncoding}
    set {_uniqueStorage()._sourceEncoding = newValue}
  }

  var split: Int32 {
    get {return _storage._split}
    set {_uniqueStorage()._split = newValue}
  }

  var start: Int32 {
    get {return _storage._start}
    set {_uniqueStorage()._start = newValue}
  }

  var startArray: Int32 {
    get {return _storage._startArray}
    set {_uniqueStorage()._startArray = newValue}
  }

  var startField: Int32 {
    get {return _storage._startField}
    set {_uniqueStorage()._startField = newValue}
  }

  var startIndex: Int32 {
    get {return _storage._startIndex}
    set {_uniqueStorage()._startIndex = newValue}
  }

  var startMessageField: Int32 {
    get {return _storage._startMessageField}
    set {_uniqueStorage()._startMessageField = newValue}
  }

  var startObject: Int32 {
    get {return _storage._startObject}
    set {_uniqueStorage()._startObject = newValue}
  }

  var startRegularField: Int32 {
    get {return _storage._startRegularField}
    set {_uniqueStorage()._startRegularField = newValue}
  }

  var state: Int32 {
    get {return _storage._state}
    set {_uniqueStorage()._state = newValue}
  }

  var `static`: Int32 {
    get {return _storage._static}
    set {_uniqueStorage()._static = newValue}
  }

  var staticString: Int32 {
    get {return _storage._staticString}
    set {_uniqueStorage()._staticString = newValue}
  }

  var storage: Int32 {
    get {return _storage._storage}
    set {_uniqueStorage()._storage = newValue}
  }

  var string: Int32 {
    get {return _storage._string}
    set {_uniqueStorage()._string = newValue}
  }

  var stringLiteral: Int32 {
    get {return _storage._stringLiteral}
    set {_uniqueStorage()._stringLiteral = newValue}
  }

  var stringLiteralType: Int32 {
    get {return _storage._stringLiteralType}
    set {_uniqueStorage()._stringLiteralType = newValue}
  }

  var stringResult: Int32 {
    get {return _storage._stringResult}
    set {_uniqueStorage()._stringResult = newValue}
  }

  var stringValue: Int32 {
    get {return _storage._stringValue}
    set {_uniqueStorage()._stringValue = newValue}
  }

  var `struct`: Int32 {
    get {return _storage._struct}
    set {_uniqueStorage()._struct = newValue}
  }

  var structValue: Int32 {
    get {return _storage._structValue}
    set {_uniqueStorage()._structValue = newValue}
  }

  var subDecoder: Int32 {
    get {return _storage._subDecoder}
    set {_uniqueStorage()._subDecoder = newValue}
  }

  var `subscript`: Int32 {
    get {return _storage._subscript}
    set {_uniqueStorage()._subscript = newValue}
  }

  var subVisitor: Int32 {
    get {return _storage._subVisitor}
    set {_uniqueStorage()._subVisitor = newValue}
  }

  var swift: Int32 {
    get {return _storage._swift}
    set {_uniqueStorage()._swift = newValue}
  }

  var swiftProtobuf: Int32 {
    get {return _storage._swiftProtobuf}
    set {_uniqueStorage()._swiftProtobuf = newValue}
  }

  var syntax: Int32 {
    get {return _storage._syntax}
    set {_uniqueStorage()._syntax = newValue}
  }

  var t: Int32 {
    get {return _storage._t}
    set {_uniqueStorage()._t = newValue}
  }

  var tag: Int32 {
    get {return _storage._tag}
    set {_uniqueStorage()._tag = newValue}
  }

  var terminator: Int32 {
    get {return _storage._terminator}
    set {_uniqueStorage()._terminator = newValue}
  }

  var testDecoder: Int32 {
    get {return _storage._testDecoder}
    set {_uniqueStorage()._testDecoder = newValue}
  }

  var text: Int32 {
    get {return _storage._text}
    set {_uniqueStorage()._text = newValue}
  }

  var textDecoder: Int32 {
    get {return _storage._textDecoder}
    set {_uniqueStorage()._textDecoder = newValue}
  }

  var textFormatDecoder: Int32 {
    get {return _storage._textFormatDecoder}
    set {_uniqueStorage()._textFormatDecoder = newValue}
  }

  var textFormatDecodingError: Int32 {
    get {return _storage._textFormatDecodingError}
    set {_uniqueStorage()._textFormatDecodingError = newValue}
  }

  var textFormatEncodingVisitor: Int32 {
    get {return _storage._textFormatEncodingVisitor}
    set {_uniqueStorage()._textFormatEncodingVisitor = newValue}
  }

  var textFormatString: Int32 {
    get {return _storage._textFormatString}
    set {_uniqueStorage()._textFormatString = newValue}
  }

  var `throws`: Int32 {
    get {return _storage._throws}
    set {_uniqueStorage()._throws = newValue}
  }

  var timeInterval: Int32 {
    get {return _storage._timeInterval}
    set {_uniqueStorage()._timeInterval = newValue}
  }

  var timeIntervalSince1970: Int32 {
    get {return _storage._timeIntervalSince1970}
    set {_uniqueStorage()._timeIntervalSince1970 = newValue}
  }

  var timeIntervalSinceReferenceDate: Int32 {
    get {return _storage._timeIntervalSinceReferenceDate}
    set {_uniqueStorage()._timeIntervalSinceReferenceDate = newValue}
  }

  var timestamp: Int32 {
    get {return _storage._timestamp}
    set {_uniqueStorage()._timestamp = newValue}
  }

  var total: Int32 {
    get {return _storage._total}
    set {_uniqueStorage()._total = newValue}
  }

  var totalSize: Int32 {
    get {return _storage._totalSize}
    set {_uniqueStorage()._totalSize = newValue}
  }

  var traverse: Int32 {
    get {return _storage._traverse}
    set {_uniqueStorage()._traverse = newValue}
  }

  var `true`: Int32 {
    get {return _storage._true}
    set {_uniqueStorage()._true = newValue}
  }

  var `try`: Int32 {
    get {return _storage._try}
    set {_uniqueStorage()._try = newValue}
  }

  var type: Int32 {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  var `typealias`: Int32 {
    get {return _storage._typealias}
    set {_uniqueStorage()._typealias = newValue}
  }

  var typePrefix: Int32 {
    get {return _storage._typePrefix}
    set {_uniqueStorage()._typePrefix = newValue}
  }

  var typeStart: Int32 {
    get {return _storage._typeStart}
    set {_uniqueStorage()._typeStart = newValue}
  }

  var typeUnknown: Int32 {
    get {return _storage._typeUnknown}
    set {_uniqueStorage()._typeUnknown = newValue}
  }

  var typeURL: Int32 {
    get {return _storage._typeURL}
    set {_uniqueStorage()._typeURL = newValue}
  }

  var uint32: Int32 {
    get {return _storage._uint32}
    set {_uniqueStorage()._uint32 = newValue}
  }

  var uint32Value: Int32 {
    get {return _storage._uint32Value}
    set {_uniqueStorage()._uint32Value = newValue}
  }

  var uint64: Int32 {
    get {return _storage._uint64}
    set {_uniqueStorage()._uint64 = newValue}
  }

  var uint64Value: Int32 {
    get {return _storage._uint64Value}
    set {_uniqueStorage()._uint64Value = newValue}
  }

  var uint8: Int32 {
    get {return _storage._uint8}
    set {_uniqueStorage()._uint8 = newValue}
  }

  var unicodeScalarLiteral: Int32 {
    get {return _storage._unicodeScalarLiteral}
    set {_uniqueStorage()._unicodeScalarLiteral = newValue}
  }

  var unicodeScalarLiteralType: Int32 {
    get {return _storage._unicodeScalarLiteralType}
    set {_uniqueStorage()._unicodeScalarLiteralType = newValue}
  }

  var unicodeScalars: Int32 {
    get {return _storage._unicodeScalars}
    set {_uniqueStorage()._unicodeScalars = newValue}
  }

  var unicodeScalarView: Int32 {
    get {return _storage._unicodeScalarView}
    set {_uniqueStorage()._unicodeScalarView = newValue}
  }

  var union: Int32 {
    get {return _storage._union}
    set {_uniqueStorage()._union = newValue}
  }

  var unknown: Int32 {
    get {return _storage._unknown}
    set {_uniqueStorage()._unknown = newValue}
  }

  var unknownFields_p: Int32 {
    get {return _storage._unknownFields_p}
    set {_uniqueStorage()._unknownFields_p = newValue}
  }

  var unknownStorage: Int32 {
    get {return _storage._unknownStorage}
    set {_uniqueStorage()._unknownStorage = newValue}
  }

  var unpackTo: Int32 {
    get {return _storage._unpackTo}
    set {_uniqueStorage()._unpackTo = newValue}
  }

  var unsafeBufferPointer: Int32 {
    get {return _storage._unsafeBufferPointer}
    set {_uniqueStorage()._unsafeBufferPointer = newValue}
  }

  var unsafeMutablePointer: Int32 {
    get {return _storage._unsafeMutablePointer}
    set {_uniqueStorage()._unsafeMutablePointer = newValue}
  }

  var unsafePointer: Int32 {
    get {return _storage._unsafePointer}
    set {_uniqueStorage()._unsafePointer = newValue}
  }

  var updatedOptions: Int32 {
    get {return _storage._updatedOptions}
    set {_uniqueStorage()._updatedOptions = newValue}
  }

  var url: Int32 {
    get {return _storage._url}
    set {_uniqueStorage()._url = newValue}
  }

  var utf8: Int32 {
    get {return _storage._utf8}
    set {_uniqueStorage()._utf8 = newValue}
  }

  var utf8Codec: Int32 {
    get {return _storage._utf8Codec}
    set {_uniqueStorage()._utf8Codec = newValue}
  }

  var utf8ToDouble: Int32 {
    get {return _storage._utf8ToDouble}
    set {_uniqueStorage()._utf8ToDouble = newValue}
  }

  var utf8View: Int32 {
    get {return _storage._utf8View}
    set {_uniqueStorage()._utf8View = newValue}
  }

  var v: Int32 {
    get {return _storage._v}
    set {_uniqueStorage()._v = newValue}
  }

  var value: Int32 {
    get {return _storage._value}
    set {_uniqueStorage()._value = newValue}
  }

  var valueField: Int32 {
    get {return _storage._valueField}
    set {_uniqueStorage()._valueField = newValue}
  }

  var values: Int32 {
    get {return _storage._values}
    set {_uniqueStorage()._values = newValue}
  }

  var valueType: Int32 {
    get {return _storage._valueType}
    set {_uniqueStorage()._valueType = newValue}
  }

  var `var`: Int32 {
    get {return _storage._var}
    set {_uniqueStorage()._var = newValue}
  }

  var version: Int32 {
    get {return _storage._version}
    set {_uniqueStorage()._version = newValue}
  }

  var versionString: Int32 {
    get {return _storage._versionString}
    set {_uniqueStorage()._versionString = newValue}
  }

  var visitExtensionFields: Int32 {
    get {return _storage._visitExtensionFields}
    set {_uniqueStorage()._visitExtensionFields = newValue}
  }

  var visitExtensionFieldsAsMessageSet: Int32 {
    get {return _storage._visitExtensionFieldsAsMessageSet}
    set {_uniqueStorage()._visitExtensionFieldsAsMessageSet = newValue}
  }

  var visitMapField: Int32 {
    get {return _storage._visitMapField}
    set {_uniqueStorage()._visitMapField = newValue}
  }

  var visitor: Int32 {
    get {return _storage._visitor}
    set {_uniqueStorage()._visitor = newValue}
  }

  var visitPacked: Int32 {
    get {return _storage._visitPacked}
    set {_uniqueStorage()._visitPacked = newValue}
  }

  var visitPackedBoolField: Int32 {
    get {return _storage._visitPackedBoolField}
    set {_uniqueStorage()._visitPackedBoolField = newValue}
  }

  var visitPackedDoubleField: Int32 {
    get {return _storage._visitPackedDoubleField}
    set {_uniqueStorage()._visitPackedDoubleField = newValue}
  }

  var visitPackedEnumField: Int32 {
    get {return _storage._visitPackedEnumField}
    set {_uniqueStorage()._visitPackedEnumField = newValue}
  }

  var visitPackedFixed32Field: Int32 {
    get {return _storage._visitPackedFixed32Field}
    set {_uniqueStorage()._visitPackedFixed32Field = newValue}
  }

  var visitPackedFixed64Field: Int32 {
    get {return _storage._visitPackedFixed64Field}
    set {_uniqueStorage()._visitPackedFixed64Field = newValue}
  }

  var visitPackedFloatField: Int32 {
    get {return _storage._visitPackedFloatField}
    set {_uniqueStorage()._visitPackedFloatField = newValue}
  }

  var visitPackedInt32Field: Int32 {
    get {return _storage._visitPackedInt32Field}
    set {_uniqueStorage()._visitPackedInt32Field = newValue}
  }

  var visitPackedInt64Field: Int32 {
    get {return _storage._visitPackedInt64Field}
    set {_uniqueStorage()._visitPackedInt64Field = newValue}
  }

  var visitPackedSfixed32Field: Int32 {
    get {return _storage._visitPackedSfixed32Field}
    set {_uniqueStorage()._visitPackedSfixed32Field = newValue}
  }

  var visitPackedSfixed64Field: Int32 {
    get {return _storage._visitPackedSfixed64Field}
    set {_uniqueStorage()._visitPackedSfixed64Field = newValue}
  }

  var visitPackedSint32Field: Int32 {
    get {return _storage._visitPackedSint32Field}
    set {_uniqueStorage()._visitPackedSint32Field = newValue}
  }

  var visitPackedSint64Field: Int32 {
    get {return _storage._visitPackedSint64Field}
    set {_uniqueStorage()._visitPackedSint64Field = newValue}
  }

  var visitPackedUint32Field: Int32 {
    get {return _storage._visitPackedUint32Field}
    set {_uniqueStorage()._visitPackedUint32Field = newValue}
  }

  var visitPackedUint64Field: Int32 {
    get {return _storage._visitPackedUint64Field}
    set {_uniqueStorage()._visitPackedUint64Field = newValue}
  }

  var visitRepeated: Int32 {
    get {return _storage._visitRepeated}
    set {_uniqueStorage()._visitRepeated = newValue}
  }

  var visitRepeatedBoolField: Int32 {
    get {return _storage._visitRepeatedBoolField}
    set {_uniqueStorage()._visitRepeatedBoolField = newValue}
  }

  var visitRepeatedBytesField: Int32 {
    get {return _storage._visitRepeatedBytesField}
    set {_uniqueStorage()._visitRepeatedBytesField = newValue}
  }

  var visitRepeatedDoubleField: Int32 {
    get {return _storage._visitRepeatedDoubleField}
    set {_uniqueStorage()._visitRepeatedDoubleField = newValue}
  }

  var visitRepeatedEnumField: Int32 {
    get {return _storage._visitRepeatedEnumField}
    set {_uniqueStorage()._visitRepeatedEnumField = newValue}
  }

  var visitRepeatedFixed32Field: Int32 {
    get {return _storage._visitRepeatedFixed32Field}
    set {_uniqueStorage()._visitRepeatedFixed32Field = newValue}
  }

  var visitRepeatedFixed64Field: Int32 {
    get {return _storage._visitRepeatedFixed64Field}
    set {_uniqueStorage()._visitRepeatedFixed64Field = newValue}
  }

  var visitRepeatedFloatField: Int32 {
    get {return _storage._visitRepeatedFloatField}
    set {_uniqueStorage()._visitRepeatedFloatField = newValue}
  }

  var visitRepeatedGroupField: Int32 {
    get {return _storage._visitRepeatedGroupField}
    set {_uniqueStorage()._visitRepeatedGroupField = newValue}
  }

  var visitRepeatedInt32Field: Int32 {
    get {return _storage._visitRepeatedInt32Field}
    set {_uniqueStorage()._visitRepeatedInt32Field = newValue}
  }

  var visitRepeatedInt64Field: Int32 {
    get {return _storage._visitRepeatedInt64Field}
    set {_uniqueStorage()._visitRepeatedInt64Field = newValue}
  }

  var visitRepeatedMessageField: Int32 {
    get {return _storage._visitRepeatedMessageField}
    set {_uniqueStorage()._visitRepeatedMessageField = newValue}
  }

  var visitRepeatedSfixed32Field: Int32 {
    get {return _storage._visitRepeatedSfixed32Field}
    set {_uniqueStorage()._visitRepeatedSfixed32Field = newValue}
  }

  var visitRepeatedSfixed64Field: Int32 {
    get {return _storage._visitRepeatedSfixed64Field}
    set {_uniqueStorage()._visitRepeatedSfixed64Field = newValue}
  }

  var visitRepeatedSint32Field: Int32 {
    get {return _storage._visitRepeatedSint32Field}
    set {_uniqueStorage()._visitRepeatedSint32Field = newValue}
  }

  var visitRepeatedSint64Field: Int32 {
    get {return _storage._visitRepeatedSint64Field}
    set {_uniqueStorage()._visitRepeatedSint64Field = newValue}
  }

  var visitRepeatedStringField: Int32 {
    get {return _storage._visitRepeatedStringField}
    set {_uniqueStorage()._visitRepeatedStringField = newValue}
  }

  var visitRepeatedUint32Field: Int32 {
    get {return _storage._visitRepeatedUint32Field}
    set {_uniqueStorage()._visitRepeatedUint32Field = newValue}
  }

  var visitRepeatedUint64Field: Int32 {
    get {return _storage._visitRepeatedUint64Field}
    set {_uniqueStorage()._visitRepeatedUint64Field = newValue}
  }

  var visitSingular: Int32 {
    get {return _storage._visitSingular}
    set {_uniqueStorage()._visitSingular = newValue}
  }

  var visitSingularBoolField: Int32 {
    get {return _storage._visitSingularBoolField}
    set {_uniqueStorage()._visitSingularBoolField = newValue}
  }

  var visitSingularBytesField: Int32 {
    get {return _storage._visitSingularBytesField}
    set {_uniqueStorage()._visitSingularBytesField = newValue}
  }

  var visitSingularDoubleField: Int32 {
    get {return _storage._visitSingularDoubleField}
    set {_uniqueStorage()._visitSingularDoubleField = newValue}
  }

  var visitSingularEnumField: Int32 {
    get {return _storage._visitSingularEnumField}
    set {_uniqueStorage()._visitSingularEnumField = newValue}
  }

  var visitSingularFixed32Field: Int32 {
    get {return _storage._visitSingularFixed32Field}
    set {_uniqueStorage()._visitSingularFixed32Field = newValue}
  }

  var visitSingularFixed64Field: Int32 {
    get {return _storage._visitSingularFixed64Field}
    set {_uniqueStorage()._visitSingularFixed64Field = newValue}
  }

  var visitSingularFloatField: Int32 {
    get {return _storage._visitSingularFloatField}
    set {_uniqueStorage()._visitSingularFloatField = newValue}
  }

  var visitSingularGroupField: Int32 {
    get {return _storage._visitSingularGroupField}
    set {_uniqueStorage()._visitSingularGroupField = newValue}
  }

  var visitSingularInt32Field: Int32 {
    get {return _storage._visitSingularInt32Field}
    set {_uniqueStorage()._visitSingularInt32Field = newValue}
  }

  var visitSingularInt64Field: Int32 {
    get {return _storage._visitSingularInt64Field}
    set {_uniqueStorage()._visitSingularInt64Field = newValue}
  }

  var visitSingularMessageField: Int32 {
    get {return _storage._visitSingularMessageField}
    set {_uniqueStorage()._visitSingularMessageField = newValue}
  }

  var visitSingularSfixed32Field: Int32 {
    get {return _storage._visitSingularSfixed32Field}
    set {_uniqueStorage()._visitSingularSfixed32Field = newValue}
  }

  var visitSingularSfixed64Field: Int32 {
    get {return _storage._visitSingularSfixed64Field}
    set {_uniqueStorage()._visitSingularSfixed64Field = newValue}
  }

  var visitSingularSint32Field: Int32 {
    get {return _storage._visitSingularSint32Field}
    set {_uniqueStorage()._visitSingularSint32Field = newValue}
  }

  var visitSingularSint64Field: Int32 {
    get {return _storage._visitSingularSint64Field}
    set {_uniqueStorage()._visitSingularSint64Field = newValue}
  }

  var visitSingularStringField: Int32 {
    get {return _storage._visitSingularStringField}
    set {_uniqueStorage()._visitSingularStringField = newValue}
  }

  var visitSingularUint32Field: Int32 {
    get {return _storage._visitSingularUint32Field}
    set {_uniqueStorage()._visitSingularUint32Field = newValue}
  }

  var visitSingularUint64Field: Int32 {
    get {return _storage._visitSingularUint64Field}
    set {_uniqueStorage()._visitSingularUint64Field = newValue}
  }

  var visitUnknown: Int32 {
    get {return _storage._visitUnknown}
    set {_uniqueStorage()._visitUnknown = newValue}
  }

  var wasDecoded: Int32 {
    get {return _storage._wasDecoded}
    set {_uniqueStorage()._wasDecoded = newValue}
  }

  var `where`: Int32 {
    get {return _storage._where}
    set {_uniqueStorage()._where = newValue}
  }

  var wireFormat: Int32 {
    get {return _storage._wireFormat}
    set {_uniqueStorage()._wireFormat = newValue}
  }

  var with: Int32 {
    get {return _storage._with}
    set {_uniqueStorage()._with = newValue}
  }

  var wrappedType: Int32 {
    get {return _storage._wrappedType}
    set {_uniqueStorage()._wrappedType = newValue}
  }

  var written: Int32 {
    get {return _storage._written}
    set {_uniqueStorage()._written = newValue}
  }

  var yday: Int32 {
    get {return _storage._yday}
    set {_uniqueStorage()._yday = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "protobuf_unittest_generated"

extension ProtobufUnittestGenerated_GeneratedSwiftReservedFields: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GeneratedSwiftReservedFields"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "adjusted"),
    2: .same(proto: "allocate"),
    3: .same(proto: "any"),
    4: .same(proto: "AnyExtensionField"),
    5: .same(proto: "AnyMessageExtension"),
    6: .same(proto: "AnyMessageStorage"),
    7: .same(proto: "AnyUnpackError"),
    8: .same(proto: "Api"),
    9: .same(proto: "appended"),
    10: .same(proto: "appendUIntHex"),
    11: .same(proto: "appendUnknown"),
    12: .same(proto: "areAllInitialized"),
    13: .same(proto: "array"),
    14: .same(proto: "arrayLiteral"),
    15: .same(proto: "arraySeparator"),
    16: .same(proto: "as"),
    17: .same(proto: "asciiOpenCurlyBracket"),
    18: .same(proto: "asciiZero"),
    19: .same(proto: "available"),
    20: .same(proto: "b"),
    21: .same(proto: "BaseType"),
    22: .same(proto: "binary"),
    23: .same(proto: "BinaryDecoder"),
    24: .same(proto: "BinaryDecodingError"),
    25: .same(proto: "BinaryDecodingOptions"),
    26: .same(proto: "BinaryDelimited"),
    27: .same(proto: "BinaryEncoder"),
    28: .same(proto: "BinaryEncodingError"),
    29: .same(proto: "BinaryEncodingMessageSetSizeVisitor"),
    30: .same(proto: "BinaryEncodingMessageSetVisitor"),
    31: .same(proto: "BinaryEncodingSizeVisitor"),
    32: .same(proto: "BinaryEncodingVisitor"),
    33: .same(proto: "bodySize"),
    34: .same(proto: "Bool"),
    35: .same(proto: "booleanLiteral"),
    36: .same(proto: "BooleanLiteralType"),
    37: .same(proto: "boolValue"),
    38: .same(proto: "buffer"),
    39: .same(proto: "bytes"),
    40: .same(proto: "bytesInGroup"),
    41: .same(proto: "bytesRead"),
    42: .same(proto: "BytesValue"),
    43: .same(proto: "c"),
    44: .same(proto: "capacity"),
    45: .same(proto: "capitalizeNext"),
    46: .same(proto: "cardinality"),
    47: .same(proto: "Character"),
    48: .same(proto: "characters"),
    49: .same(proto: "chars"),
    50: .same(proto: "class"),
    51: .same(proto: "clearExtensionValue"),
    52: .same(proto: "clearSourceContext"),
    53: .same(proto: "clearValue"),
    54: .same(proto: "codeUnits"),
    55: .same(proto: "Collection"),
    56: .same(proto: "com"),
    57: .same(proto: "comma"),
    58: .same(proto: "contentsOf"),
    59: .same(proto: "count"),
    60: .same(proto: "countVarintsInBuffer"),
    61: .same(proto: "customCodable"),
    62: .same(proto: "CustomDebugStringConvertible"),
    63: .same(proto: "d"),
    64: .same(proto: "Data"),
    65: .same(proto: "dataPointer"),
    66: .same(proto: "dataResult"),
    67: .same(proto: "dataSize"),
    68: .same(proto: "date"),
    69: .same(proto: "daySec"),
    70: .same(proto: "daysSinceEpoch"),
    71: .same(proto: "debugDescription"),
    72: .same(proto: "decoded"),
    73: .same(proto: "decodedFromJSONNull"),
    74: .same(proto: "decodeExtensionField"),
    75: .same(proto: "decodeExtensionFieldsAsMessageSet"),
    76: .same(proto: "decodeJSON"),
    77: .same(proto: "decodeMapField"),
    78: .same(proto: "decodeMessage"),
    79: .same(proto: "decoder"),
    80: .same(proto: "decodeRepeated"),
    81: .same(proto: "decodeRepeatedBoolField"),
    82: .same(proto: "decodeRepeatedBytesField"),
    83: .same(proto: "decodeRepeatedDoubleField"),
    84: .same(proto: "decodeRepeatedEnumField"),
    85: .same(proto: "decodeRepeatedFixed32Field"),
    86: .same(proto: "decodeRepeatedFixed64Field"),
    87: .same(proto: "decodeRepeatedFloatField"),
    88: .same(proto: "decodeRepeatedGroupField"),
    89: .same(proto: "decodeRepeatedInt32Field"),
    90: .same(proto: "decodeRepeatedInt64Field"),
    91: .same(proto: "decodeRepeatedMessageField"),
    92: .same(proto: "decodeRepeatedSFixed32Field"),
    93: .same(proto: "decodeRepeatedSFixed64Field"),
    94: .same(proto: "decodeRepeatedSInt32Field"),
    95: .same(proto: "decodeRepeatedSInt64Field"),
    96: .same(proto: "decodeRepeatedStringField"),
    97: .same(proto: "decodeRepeatedUInt32Field"),
    98: .same(proto: "decodeRepeatedUInt64Field"),
    99: .same(proto: "decodeSingular"),
    100: .same(proto: "decodeSingularBoolField"),
    101: .same(proto: "decodeSingularBytesField"),
    102: .same(proto: "decodeSingularDoubleField"),
    103: .same(proto: "decodeSingularEnumField"),
    104: .same(proto: "decodeSingularFixed32Field"),
    105: .same(proto: "decodeSingularFixed64Field"),
    106: .same(proto: "decodeSingularFloatField"),
    107: .same(proto: "decodeSingularGroupField"),
    108: .same(proto: "decodeSingularInt32Field"),
    109: .same(proto: "decodeSingularInt64Field"),
    110: .same(proto: "decodeSingularMessageField"),
    111: .same(proto: "decodeSingularSFixed32Field"),
    112: .same(proto: "decodeSingularSFixed64Field"),
    113: .same(proto: "decodeSingularSInt32Field"),
    114: .same(proto: "decodeSingularSInt64Field"),
    115: .same(proto: "decodeSingularStringField"),
    116: .same(proto: "decodeSingularUInt32Field"),
    117: .same(proto: "decodeSingularUInt64Field"),
    118: .same(proto: "decodeTextFormat"),
    119: .same(proto: "defaultAnyTypeURLPrefix"),
    120: .same(proto: "defaultValue"),
    121: .same(proto: "description"),
    122: .same(proto: "Dictionary"),
    123: .same(proto: "dictionaryLiteral"),
    124: .same(proto: "digit"),
    125: .same(proto: "digit0"),
    126: .same(proto: "digit1"),
    127: .same(proto: "digitCount"),
    128: .same(proto: "digits"),
    129: .same(proto: "digitValue"),
    130: .same(proto: "discardableResult"),
    131: .same(proto: "discardUnknownFields"),
    132: .same(proto: "distance"),
    133: .same(proto: "double"),
    134: .same(proto: "doubleToUtf8"),
    135: .same(proto: "DoubleValue"),
    136: .same(proto: "Duration"),
    137: .same(proto: "E"),
    138: .same(proto: "Element"),
    139: .same(proto: "elements"),
    140: .same(proto: "emitExtensionFieldName"),
    141: .same(proto: "emitFieldName"),
    142: .same(proto: "emitFieldNumber"),
    143: .same(proto: "Empty"),
    144: .same(proto: "emptyData"),
    145: .same(proto: "encoded"),
    146: .same(proto: "encodedJSONString"),
    147: .same(proto: "encodedSize"),
    148: .same(proto: "encodeField"),
    149: .same(proto: "encoder"),
    150: .same(proto: "end"),
    151: .same(proto: "endArray"),
    152: .same(proto: "endMessageField"),
    153: .same(proto: "endObject"),
    154: .same(proto: "endRegularField"),
    155: .same(proto: "enum"),
    156: .same(proto: "enumvalue"),
    157: .same(proto: "Equatable"),
    158: .same(proto: "Error"),
    159: .same(proto: "ExpressibleByArrayLiteral"),
    160: .same(proto: "ExpressibleByDictionaryLiteral"),
    161: .same(proto: "ext"),
    162: .same(proto: "extDecoder"),
    163: .same(proto: "extendedGraphemeClusterLiteral"),
    164: .same(proto: "ExtendedGraphemeClusterLiteralType"),
    165: .same(proto: "ExtensibleMessage"),
    166: .same(proto: "extension"),
    167: .same(proto: "ExtensionField"),
    168: .same(proto: "extensionFieldNumber"),
    169: .same(proto: "ExtensionFieldValueSet"),
    170: .same(proto: "ExtensionMap"),
    171: .same(proto: "extensions"),
    172: .same(proto: "extras"),
    173: .same(proto: "f"),
    174: .same(proto: "false"),
    175: .same(proto: "field"),
    176: .same(proto: "fieldData"),
    177: .same(proto: "FieldMask"),
    178: .same(proto: "fieldName"),
    179: .same(proto: "fieldNameCount"),
    180: .same(proto: "fieldNum"),
    181: .same(proto: "fieldNumber"),
    182: .same(proto: "fieldNumberForProto"),
    183: .same(proto: "fields"),
    184: .same(proto: "fieldSize"),
    185: .same(proto: "FieldTag"),
    186: .same(proto: "fieldType"),
    187: .same(proto: "fieldValue"),
    188: .same(proto: "fileName"),
    189: .same(proto: "filter"),
    190: .same(proto: "firstItem"),
    191: .same(proto: "float"),
    192: .same(proto: "floatLiteral"),
    193: .same(proto: "FloatLiteralType"),
    194: .same(proto: "floatToUtf8"),
    195: .same(proto: "FloatValue"),
    196: .same(proto: "forMessageName"),
    197: .same(proto: "formUnion"),
    198: .same(proto: "forReadingFrom"),
    199: .same(proto: "forTypeURL"),
    200: .same(proto: "ForwardParser"),
    201: .same(proto: "forWritingInto"),
    202: .same(proto: "from"),
    203: .same(proto: "fromAscii2"),
    204: .same(proto: "fromAscii4"),
    205: .same(proto: "fromHexDigit"),
    206: .same(proto: "func"),
    207: .same(proto: "G"),
    208: .same(proto: "get"),
    209: .same(proto: "getExtensionValue"),
    210: .same(proto: "googleapis"),
    211: .standard(proto: "Google_Protobuf_Any"),
    212: .standard(proto: "Google_Protobuf_Api"),
    213: .standard(proto: "Google_Protobuf_BoolValue"),
    214: .standard(proto: "Google_Protobuf_BytesValue"),
    215: .standard(proto: "Google_Protobuf_DoubleValue"),
    216: .standard(proto: "Google_Protobuf_Duration"),
    217: .standard(proto: "Google_Protobuf_Empty"),
    218: .standard(proto: "Google_Protobuf_Enum"),
    219: .standard(proto: "Google_Protobuf_EnumValue"),
    220: .standard(proto: "Google_Protobuf_Field"),
    221: .standard(proto: "Google_Protobuf_FieldMask"),
    222: .standard(proto: "Google_Protobuf_FloatValue"),
    223: .standard(proto: "Google_Protobuf_Int32Value"),
    224: .standard(proto: "Google_Protobuf_Int64Value"),
    225: .standard(proto: "Google_Protobuf_ListValue"),
    226: .standard(proto: "Google_Protobuf_Method"),
    227: .standard(proto: "Google_Protobuf_Mixin"),
    228: .standard(proto: "Google_Protobuf_NullValue"),
    229: .standard(proto: "Google_Protobuf_Option"),
    230: .standard(proto: "Google_Protobuf_SourceContext"),
    231: .standard(proto: "Google_Protobuf_StringValue"),
    232: .standard(proto: "Google_Protobuf_Struct"),
    233: .standard(proto: "Google_Protobuf_Syntax"),
    234: .standard(proto: "Google_Protobuf_Timestamp"),
    235: .standard(proto: "Google_Protobuf_Type"),
    236: .standard(proto: "Google_Protobuf_UInt32Value"),
    237: .standard(proto: "Google_Protobuf_UInt64Value"),
    238: .standard(proto: "Google_Protobuf_Value"),
    239: .same(proto: "group"),
    240: .same(proto: "groupSize"),
    241: .same(proto: "h"),
    242: .same(proto: "handleConflictingOneOf"),
    243: .same(proto: "hasExtensionValue"),
    244: .same(proto: "hash"),
    245: .same(proto: "Hashable"),
    246: .same(proto: "hashValue"),
    247: .same(proto: "HashVisitor"),
    248: .same(proto: "hasSourceContext"),
    249: .same(proto: "hasValue"),
    250: .same(proto: "hour"),
    251: .same(proto: "i"),
    252: .same(proto: "index"),
    253: .same(proto: "init"),
    254: .same(proto: "inout"),
    255: .same(proto: "insert"),
    256: .same(proto: "Int"),
    257: .same(proto: "Int32"),
    258: .same(proto: "Int32Value"),
    259: .same(proto: "Int64"),
    260: .same(proto: "Int64Value"),
    261: .same(proto: "Int8"),
    262: .same(proto: "integerLiteral"),
    263: .same(proto: "IntegerLiteralType"),
    264: .same(proto: "intern"),
    265: .same(proto: "Internal"),
    266: .same(proto: "InternalState"),
    267: .same(proto: "ints"),
    268: .same(proto: "isA"),
    269: .same(proto: "isEqual"),
    270: .same(proto: "isEqualTo"),
    271: .same(proto: "isInitialized"),
    272: .same(proto: "it"),
    273: .same(proto: "itemTagsEncodedSize"),
    274: .same(proto: "Iterator"),
    275: .standard(proto: "i_2166136261"),
    276: .same(proto: "JSONDecoder"),
    277: .same(proto: "JSONDecodingError"),
    278: .same(proto: "JSONDecodingOptions"),
    279: .same(proto: "jsonEncoder"),
    280: .same(proto: "JSONEncodingError"),
    281: .same(proto: "JSONEncodingVisitor"),
    282: .same(proto: "JSONMapEncodingVisitor"),
    283: .same(proto: "jsonName"),
    284: .same(proto: "jsonPath"),
    285: .same(proto: "jsonPaths"),
    286: .same(proto: "JSONScanner"),
    287: .same(proto: "jsonString"),
    288: .same(proto: "jsonText"),
    289: .same(proto: "jsonUTF8Data"),
    290: .same(proto: "k"),
    291: .same(proto: "Key"),
    292: .same(proto: "keyField"),
    293: .same(proto: "KeyType"),
    294: .same(proto: "kind"),
    295: .same(proto: "l"),
    296: .same(proto: "length"),
    297: .same(proto: "let"),
    298: .same(proto: "lhs"),
    299: .same(proto: "list"),
    300: .same(proto: "listOfMessages"),
    301: .same(proto: "listValue"),
    302: .same(proto: "littleEndian"),
    303: .same(proto: "littleEndianBytes"),
    304: .same(proto: "M"),
    305: .same(proto: "major"),
    306: .same(proto: "makeIterator"),
    307: .same(proto: "mapHash"),
    308: .same(proto: "MapKeyType"),
    309: .same(proto: "mapNameResolver"),
    310: .same(proto: "mapToMessages"),
    311: .same(proto: "MapValueType"),
    312: .same(proto: "mapVisitor"),
    313: .same(proto: "mdayStart"),
    314: .same(proto: "merge"),
    315: .same(proto: "message"),
    316: .same(proto: "messageDepthLimit"),
    317: .same(proto: "MessageExtension"),
    318: .same(proto: "MessageImplementationBase"),
    319: .same(proto: "MessageSet"),
    320: .same(proto: "messageType"),
    321: .same(proto: "Method"),
    322: .same(proto: "methods"),
    323: .same(proto: "minor"),
    324: .same(proto: "Mixin"),
    325: .same(proto: "mixins"),
    326: .same(proto: "month"),
    327: .same(proto: "msgExtension"),
    328: .same(proto: "mutating"),
    329: .same(proto: "n"),
    330: .same(proto: "name"),
    331: .same(proto: "NameDescription"),
    332: .same(proto: "NameMap"),
    333: .same(proto: "nameResolver"),
    334: .same(proto: "names"),
    335: .same(proto: "nanos"),
    336: .same(proto: "nativeBytes"),
    337: .same(proto: "nativeEndianBytes"),
    338: .same(proto: "newL"),
    339: .same(proto: "newList"),
    340: .same(proto: "newValue"),
    341: .same(proto: "nextByte"),
    342: .same(proto: "nextFieldNumber"),
    343: .same(proto: "nil"),
    344: .same(proto: "nilLiteral"),
    345: .same(proto: "nullValue"),
    346: .same(proto: "number"),
    347: .same(proto: "numberValue"),
    348: .same(proto: "of"),
    349: .same(proto: "oneofIndex"),
    350: .same(proto: "oneofs"),
    351: .standard(proto: "OneOf_Kind"),
    352: .same(proto: "Option"),
    353: .same(proto: "OptionalEnumExtensionField"),
    354: .same(proto: "OptionalExtensionField"),
    355: .same(proto: "OptionalGroupExtensionField"),
    356: .same(proto: "OptionalMessageExtensionField"),
    357: .same(proto: "options"),
    358: .same(proto: "other"),
    359: .same(proto: "others"),
    360: .same(proto: "out"),
    361: .same(proto: "output"),
    362: .same(proto: "p"),
    363: .same(proto: "packed"),
    364: .same(proto: "PackedEnumExtensionField"),
    365: .same(proto: "PackedExtensionField"),
    366: .same(proto: "packedSize"),
    367: .same(proto: "padding"),
    368: .same(proto: "parent"),
    369: .same(proto: "parse"),
    370: .same(proto: "partial"),
    371: .same(proto: "path"),
    372: .same(proto: "paths"),
    373: .same(proto: "payload"),
    374: .same(proto: "payloadSize"),
    375: .same(proto: "pointer"),
    376: .same(proto: "pos"),
    377: .same(proto: "prefix"),
    378: .same(proto: "preTraverse"),
    379: .same(proto: "proto2"),
    380: .same(proto: "proto3DefaultValue"),
    381: .same(proto: "ProtobufAPIVersionCheck"),
    382: .standard(proto: "ProtobufAPIVersion_2"),
    383: .same(proto: "ProtobufBool"),
    384: .same(proto: "ProtobufBytes"),
    385: .same(proto: "ProtobufDouble"),
    386: .same(proto: "ProtobufEnumMap"),
    387: .same(proto: "protobufExtension"),
    388: .same(proto: "ProtobufFixed32"),
    389: .same(proto: "ProtobufFixed64"),
    390: .same(proto: "ProtobufFloat"),
    391: .same(proto: "ProtobufInt32"),
    392: .same(proto: "ProtobufInt64"),
    393: .same(proto: "ProtobufMap"),
    394: .same(proto: "ProtobufMessageMap"),
    395: .same(proto: "ProtobufSFixed32"),
    396: .same(proto: "ProtobufSFixed64"),
    397: .same(proto: "ProtobufSInt32"),
    398: .same(proto: "ProtobufSInt64"),
    399: .same(proto: "ProtobufString"),
    400: .same(proto: "ProtobufUInt32"),
    401: .same(proto: "ProtobufUInt64"),
    402: .standard(proto: "protobuf_extensionFieldValues"),
    403: .standard(proto: "protobuf_fieldNumber"),
    404: .standard(proto: "protobuf_generated_isEqualTo"),
    405: .standard(proto: "protobuf_nameMap"),
    406: .standard(proto: "protobuf_newField"),
    407: .standard(proto: "protobuf_package"),
    408: .same(proto: "protocol"),
    409: .same(proto: "protoFieldName"),
    410: .same(proto: "protoMessageName"),
    411: .same(proto: "ProtoNameProviding"),
    412: .same(proto: "protoPaths"),
    413: .same(proto: "public"),
    414: .same(proto: "putBoolValue"),
    415: .same(proto: "putBytesValue"),
    416: .same(proto: "putDoubleValue"),
    417: .same(proto: "putEnumValue"),
    418: .same(proto: "putFixedUInt32"),
    419: .same(proto: "putFixedUInt64"),
    420: .same(proto: "putFloatValue"),
    421: .same(proto: "putInt64"),
    422: .same(proto: "putStringValue"),
    423: .same(proto: "putUInt64"),
    424: .same(proto: "putUInt64Hex"),
    425: .same(proto: "putVarInt"),
    426: .same(proto: "putZigZagVarInt"),
    427: .same(proto: "rawChars"),
    428: .same(proto: "RawRepresentable"),
    429: .same(proto: "RawValue"),
    430: .same(proto: "readBuffer"),
    431: .same(proto: "register"),
    432: .same(proto: "RepeatedEnumExtensionField"),
    433: .same(proto: "RepeatedExtensionField"),
    434: .same(proto: "RepeatedGroupExtensionField"),
    435: .same(proto: "RepeatedMessageExtensionField"),
    436: .same(proto: "requestStreaming"),
    437: .same(proto: "requestTypeURL"),
    438: .same(proto: "requiredSize"),
    439: .same(proto: "responseStreaming"),
    440: .same(proto: "responseTypeURL"),
    441: .same(proto: "result"),
    442: .same(proto: "return"),
    443: .same(proto: "revision"),
    444: .same(proto: "rhs"),
    445: .same(proto: "root"),
    446: .same(proto: "s"),
    447: .same(proto: "sawBackslash"),
    448: .same(proto: "sawSection4Characters"),
    449: .same(proto: "sawSection5Characters"),
    450: .same(proto: "scanner"),
    451: .same(proto: "seconds"),
    452: .same(proto: "self"),
    453: .same(proto: "separator"),
    454: .same(proto: "serialize"),
    455: .same(proto: "serializedData"),
    456: .same(proto: "serializedSize"),
    457: .same(proto: "set"),
    458: .same(proto: "setExtensionValue"),
    459: .same(proto: "shift"),
    460: .same(proto: "SimpleExtensionMap"),
    461: .same(proto: "sizer"),
    462: .same(proto: "source"),
    463: .same(proto: "sourceContext"),
    464: .same(proto: "sourceEncoding"),
    465: .same(proto: "split"),
    466: .same(proto: "start"),
    467: .same(proto: "startArray"),
    468: .same(proto: "startField"),
    469: .same(proto: "startIndex"),
    470: .same(proto: "startMessageField"),
    471: .same(proto: "startObject"),
    472: .same(proto: "startRegularField"),
    473: .same(proto: "state"),
    474: .same(proto: "static"),
    475: .same(proto: "StaticString"),
    476: .same(proto: "storage"),
    477: .same(proto: "String"),
    478: .same(proto: "stringLiteral"),
    479: .same(proto: "StringLiteralType"),
    480: .same(proto: "stringResult"),
    481: .same(proto: "stringValue"),
    482: .same(proto: "struct"),
    483: .same(proto: "structValue"),
    484: .same(proto: "subDecoder"),
    485: .same(proto: "subscript"),
    486: .same(proto: "subVisitor"),
    487: .same(proto: "Swift"),
    488: .same(proto: "SwiftProtobuf"),
    489: .same(proto: "syntax"),
    490: .same(proto: "T"),
    491: .same(proto: "tag"),
    492: .same(proto: "terminator"),
    493: .same(proto: "testDecoder"),
    494: .same(proto: "text"),
    495: .same(proto: "textDecoder"),
    496: .same(proto: "TextFormatDecoder"),
    497: .same(proto: "TextFormatDecodingError"),
    498: .same(proto: "TextFormatEncodingVisitor"),
    499: .same(proto: "textFormatString"),
    500: .same(proto: "throws"),
    501: .same(proto: "timeInterval"),
    502: .same(proto: "timeIntervalSince1970"),
    503: .same(proto: "timeIntervalSinceReferenceDate"),
    504: .same(proto: "Timestamp"),
    505: .same(proto: "total"),
    506: .same(proto: "totalSize"),
    507: .same(proto: "traverse"),
    508: .same(proto: "true"),
    509: .same(proto: "try"),
    510: .same(proto: "type"),
    511: .same(proto: "typealias"),
    512: .same(proto: "typePrefix"),
    513: .same(proto: "typeStart"),
    514: .same(proto: "typeUnknown"),
    515: .same(proto: "typeURL"),
    516: .same(proto: "UInt32"),
    517: .same(proto: "UInt32Value"),
    518: .same(proto: "UInt64"),
    519: .same(proto: "UInt64Value"),
    520: .same(proto: "UInt8"),
    521: .same(proto: "unicodeScalarLiteral"),
    522: .same(proto: "UnicodeScalarLiteralType"),
    523: .same(proto: "unicodeScalars"),
    524: .same(proto: "UnicodeScalarView"),
    525: .same(proto: "union"),
    526: .same(proto: "unknown"),
    527: .same(proto: "unknownFields"),
    528: .same(proto: "UnknownStorage"),
    529: .same(proto: "unpackTo"),
    530: .same(proto: "UnsafeBufferPointer"),
    531: .same(proto: "UnsafeMutablePointer"),
    532: .same(proto: "UnsafePointer"),
    533: .same(proto: "updatedOptions"),
    534: .same(proto: "url"),
    535: .same(proto: "utf8"),
    536: .same(proto: "utf8Codec"),
    537: .same(proto: "utf8ToDouble"),
    538: .same(proto: "UTF8View"),
    539: .same(proto: "v"),
    540: .same(proto: "value"),
    541: .same(proto: "valueField"),
    542: .same(proto: "values"),
    543: .same(proto: "ValueType"),
    544: .same(proto: "var"),
    545: .same(proto: "Version"),
    546: .same(proto: "versionString"),
    547: .same(proto: "visitExtensionFields"),
    548: .same(proto: "visitExtensionFieldsAsMessageSet"),
    549: .same(proto: "visitMapField"),
    550: .same(proto: "visitor"),
    551: .same(proto: "visitPacked"),
    552: .same(proto: "visitPackedBoolField"),
    553: .same(proto: "visitPackedDoubleField"),
    554: .same(proto: "visitPackedEnumField"),
    555: .same(proto: "visitPackedFixed32Field"),
    556: .same(proto: "visitPackedFixed64Field"),
    557: .same(proto: "visitPackedFloatField"),
    558: .same(proto: "visitPackedInt32Field"),
    559: .same(proto: "visitPackedInt64Field"),
    560: .same(proto: "visitPackedSFixed32Field"),
    561: .same(proto: "visitPackedSFixed64Field"),
    562: .same(proto: "visitPackedSInt32Field"),
    563: .same(proto: "visitPackedSInt64Field"),
    564: .same(proto: "visitPackedUInt32Field"),
    565: .same(proto: "visitPackedUInt64Field"),
    566: .same(proto: "visitRepeated"),
    567: .same(proto: "visitRepeatedBoolField"),
    568: .same(proto: "visitRepeatedBytesField"),
    569: .same(proto: "visitRepeatedDoubleField"),
    570: .same(proto: "visitRepeatedEnumField"),
    571: .same(proto: "visitRepeatedFixed32Field"),
    572: .same(proto: "visitRepeatedFixed64Field"),
    573: .same(proto: "visitRepeatedFloatField"),
    574: .same(proto: "visitRepeatedGroupField"),
    575: .same(proto: "visitRepeatedInt32Field"),
    576: .same(proto: "visitRepeatedInt64Field"),
    577: .same(proto: "visitRepeatedMessageField"),
    578: .same(proto: "visitRepeatedSFixed32Field"),
    579: .same(proto: "visitRepeatedSFixed64Field"),
    580: .same(proto: "visitRepeatedSInt32Field"),
    581: .same(proto: "visitRepeatedSInt64Field"),
    582: .same(proto: "visitRepeatedStringField"),
    583: .same(proto: "visitRepeatedUInt32Field"),
    584: .same(proto: "visitRepeatedUInt64Field"),
    585: .same(proto: "visitSingular"),
    586: .same(proto: "visitSingularBoolField"),
    587: .same(proto: "visitSingularBytesField"),
    588: .same(proto: "visitSingularDoubleField"),
    589: .same(proto: "visitSingularEnumField"),
    590: .same(proto: "visitSingularFixed32Field"),
    591: .same(proto: "visitSingularFixed64Field"),
    592: .same(proto: "visitSingularFloatField"),
    593: .same(proto: "visitSingularGroupField"),
    594: .same(proto: "visitSingularInt32Field"),
    595: .same(proto: "visitSingularInt64Field"),
    596: .same(proto: "visitSingularMessageField"),
    597: .same(proto: "visitSingularSFixed32Field"),
    598: .same(proto: "visitSingularSFixed64Field"),
    599: .same(proto: "visitSingularSInt32Field"),
    600: .same(proto: "visitSingularSInt64Field"),
    601: .same(proto: "visitSingularStringField"),
    602: .same(proto: "visitSingularUInt32Field"),
    603: .same(proto: "visitSingularUInt64Field"),
    604: .same(proto: "visitUnknown"),
    605: .same(proto: "wasDecoded"),
    606: .same(proto: "where"),
    607: .same(proto: "wireFormat"),
    608: .same(proto: "with"),
    609: .same(proto: "WrappedType"),
    610: .same(proto: "written"),
    611: .same(proto: "yday"),
  ]

  fileprivate class _StorageClass {
    var _adjusted: Int32 = 0
    var _allocate: Int32 = 0
    var _any: Int32 = 0
    var _anyExtensionField: Int32 = 0
    var _anyMessageExtension: Int32 = 0
    var _anyMessageStorage: Int32 = 0
    var _anyUnpackError: Int32 = 0
    var _api: Int32 = 0
    var _appended: Int32 = 0
    var _appendUintHex: Int32 = 0
    var _appendUnknown: Int32 = 0
    var _areAllInitialized: Int32 = 0
    var _array: Int32 = 0
    var _arrayLiteral: Int32 = 0
    var _arraySeparator: Int32 = 0
    var _as: Int32 = 0
    var _asciiOpenCurlyBracket: Int32 = 0
    var _asciiZero: Int32 = 0
    var _available: Int32 = 0
    var _b: Int32 = 0
    var _baseType: Int32 = 0
    var _binary: Int32 = 0
    var _binaryDecoder: Int32 = 0
    var _binaryDecodingError: Int32 = 0
    var _binaryDecodingOptions: Int32 = 0
    var _binaryDelimited: Int32 = 0
    var _binaryEncoder: Int32 = 0
    var _binaryEncodingError: Int32 = 0
    var _binaryEncodingMessageSetSizeVisitor: Int32 = 0
    var _binaryEncodingMessageSetVisitor: Int32 = 0
    var _binaryEncodingSizeVisitor: Int32 = 0
    var _binaryEncodingVisitor: Int32 = 0
    var _bodySize: Int32 = 0
    var _bool: Int32 = 0
    var _booleanLiteral: Int32 = 0
    var _booleanLiteralType: Int32 = 0
    var _boolValue: Int32 = 0
    var _buffer: Int32 = 0
    var _bytes: Int32 = 0
    var _bytesInGroup: Int32 = 0
    var _bytesRead: Int32 = 0
    var _bytesValue: Int32 = 0
    var _c: Int32 = 0
    var _capacity: Int32 = 0
    var _capitalizeNext: Int32 = 0
    var _cardinality: Int32 = 0
    var _character: Int32 = 0
    var _characters: Int32 = 0
    var _chars: Int32 = 0
    var _class: Int32 = 0
    var _clearExtensionValue_p: Int32 = 0
    var _clearSourceContext_p: Int32 = 0
    var _clearValue_p: Int32 = 0
    var _codeUnits: Int32 = 0
    var _collection: Int32 = 0
    var _com: Int32 = 0
    var _comma: Int32 = 0
    var _contentsOf: Int32 = 0
    var _count: Int32 = 0
    var _countVarintsInBuffer: Int32 = 0
    var _customCodable: Int32 = 0
    var _customDebugStringConvertible: Int32 = 0
    var _d: Int32 = 0
    var _data: Int32 = 0
    var _dataPointer: Int32 = 0
    var _dataResult: Int32 = 0
    var _dataSize: Int32 = 0
    var _date: Int32 = 0
    var _daySec: Int32 = 0
    var _daysSinceEpoch: Int32 = 0
    var _debugDescription_p: Int32 = 0
    var _decoded: Int32 = 0
    var _decodedFromJsonnull: Int32 = 0
    var _decodeExtensionField: Int32 = 0
    var _decodeExtensionFieldsAsMessageSet: Int32 = 0
    var _decodeJson: Int32 = 0
    var _decodeMapField: Int32 = 0
    var _decodeMessage: Int32 = 0
    var _decoder: Int32 = 0
    var _decodeRepeated: Int32 = 0
    var _decodeRepeatedBoolField: Int32 = 0
    var _decodeRepeatedBytesField: Int32 = 0
    var _decodeRepeatedDoubleField: Int32 = 0
    var _decodeRepeatedEnumField: Int32 = 0
    var _decodeRepeatedFixed32Field: Int32 = 0
    var _decodeRepeatedFixed64Field: Int32 = 0
    var _decodeRepeatedFloatField: Int32 = 0
    var _decodeRepeatedGroupField: Int32 = 0
    var _decodeRepeatedInt32Field: Int32 = 0
    var _decodeRepeatedInt64Field: Int32 = 0
    var _decodeRepeatedMessageField: Int32 = 0
    var _decodeRepeatedSfixed32Field: Int32 = 0
    var _decodeRepeatedSfixed64Field: Int32 = 0
    var _decodeRepeatedSint32Field: Int32 = 0
    var _decodeRepeatedSint64Field: Int32 = 0
    var _decodeRepeatedStringField: Int32 = 0
    var _decodeRepeatedUint32Field: Int32 = 0
    var _decodeRepeatedUint64Field: Int32 = 0
    var _decodeSingular: Int32 = 0
    var _decodeSingularBoolField: Int32 = 0
    var _decodeSingularBytesField: Int32 = 0
    var _decodeSingularDoubleField: Int32 = 0
    var _decodeSingularEnumField: Int32 = 0
    var _decodeSingularFixed32Field: Int32 = 0
    var _decodeSingularFixed64Field: Int32 = 0
    var _decodeSingularFloatField: Int32 = 0
    var _decodeSingularGroupField: Int32 = 0
    var _decodeSingularInt32Field: Int32 = 0
    var _decodeSingularInt64Field: Int32 = 0
    var _decodeSingularMessageField: Int32 = 0
    var _decodeSingularSfixed32Field: Int32 = 0
    var _decodeSingularSfixed64Field: Int32 = 0
    var _decodeSingularSint32Field: Int32 = 0
    var _decodeSingularSint64Field: Int32 = 0
    var _decodeSingularStringField: Int32 = 0
    var _decodeSingularUint32Field: Int32 = 0
    var _decodeSingularUint64Field: Int32 = 0
    var _decodeTextFormat: Int32 = 0
    var _defaultAnyTypeUrlprefix: Int32 = 0
    var _defaultValue: Int32 = 0
    var _description_p: Int32 = 0
    var _dictionary: Int32 = 0
    var _dictionaryLiteral: Int32 = 0
    var _digit: Int32 = 0
    var _digit0: Int32 = 0
    var _digit1: Int32 = 0
    var _digitCount: Int32 = 0
    var _digits: Int32 = 0
    var _digitValue: Int32 = 0
    var _discardableResult: Int32 = 0
    var _discardUnknownFields: Int32 = 0
    var _distance: Int32 = 0
    var _double: Int32 = 0
    var _doubleToUtf8: Int32 = 0
    var _doubleValue: Int32 = 0
    var _duration: Int32 = 0
    var _e: Int32 = 0
    var _element: Int32 = 0
    var _elements: Int32 = 0
    var _emitExtensionFieldName: Int32 = 0
    var _emitFieldName: Int32 = 0
    var _emitFieldNumber: Int32 = 0
    var _empty: Int32 = 0
    var _emptyData: Int32 = 0
    var _encoded: Int32 = 0
    var _encodedJsonstring: Int32 = 0
    var _encodedSize: Int32 = 0
    var _encodeField: Int32 = 0
    var _encoder: Int32 = 0
    var _end: Int32 = 0
    var _endArray: Int32 = 0
    var _endMessageField: Int32 = 0
    var _endObject: Int32 = 0
    var _endRegularField: Int32 = 0
    var _enum: Int32 = 0
    var _enumvalue: Int32 = 0
    var _equatable: Int32 = 0
    var _error: Int32 = 0
    var _expressibleByArrayLiteral: Int32 = 0
    var _expressibleByDictionaryLiteral: Int32 = 0
    var _ext: Int32 = 0
    var _extDecoder: Int32 = 0
    var _extendedGraphemeClusterLiteral: Int32 = 0
    var _extendedGraphemeClusterLiteralType: Int32 = 0
    var _extensibleMessage: Int32 = 0
    var _extension: Int32 = 0
    var _extensionField: Int32 = 0
    var _extensionFieldNumber: Int32 = 0
    var _extensionFieldValueSet: Int32 = 0
    var _extensionMap: Int32 = 0
    var _extensions: Int32 = 0
    var _extras: Int32 = 0
    var _f: Int32 = 0
    var _false: Int32 = 0
    var _field: Int32 = 0
    var _fieldData: Int32 = 0
    var _fieldMask: Int32 = 0
    var _fieldName: Int32 = 0
    var _fieldNameCount: Int32 = 0
    var _fieldNum: Int32 = 0
    var _fieldNumber: Int32 = 0
    var _fieldNumberForProto: Int32 = 0
    var _fields: Int32 = 0
    var _fieldSize: Int32 = 0
    var _fieldTag: Int32 = 0
    var _fieldType: Int32 = 0
    var _fieldValue: Int32 = 0
    var _fileName: Int32 = 0
    var _filter: Int32 = 0
    var _firstItem: Int32 = 0
    var _float: Int32 = 0
    var _floatLiteral: Int32 = 0
    var _floatLiteralType: Int32 = 0
    var _floatToUtf8: Int32 = 0
    var _floatValue: Int32 = 0
    var _forMessageName: Int32 = 0
    var _formUnion: Int32 = 0
    var _forReadingFrom: Int32 = 0
    var _forTypeURL: Int32 = 0
    var _forwardParser: Int32 = 0
    var _forWritingInto: Int32 = 0
    var _from: Int32 = 0
    var _fromAscii2: Int32 = 0
    var _fromAscii4: Int32 = 0
    var _fromHexDigit: Int32 = 0
    var _func: Int32 = 0
    var _g: Int32 = 0
    var _get: Int32 = 0
    var _getExtensionValue: Int32 = 0
    var _googleapis: Int32 = 0
    var _googleProtobufAny: Int32 = 0
    var _googleProtobufApi: Int32 = 0
    var _googleProtobufBoolValue: Int32 = 0
    var _googleProtobufBytesValue: Int32 = 0
    var _googleProtobufDoubleValue: Int32 = 0
    var _googleProtobufDuration: Int32 = 0
    var _googleProtobufEmpty: Int32 = 0
    var _googleProtobufEnum: Int32 = 0
    var _googleProtobufEnumValue: Int32 = 0
    var _googleProtobufField: Int32 = 0
    var _googleProtobufFieldMask: Int32 = 0
    var _googleProtobufFloatValue: Int32 = 0
    var _googleProtobufInt32Value: Int32 = 0
    var _googleProtobufInt64Value: Int32 = 0
    var _googleProtobufListValue: Int32 = 0
    var _googleProtobufMethod: Int32 = 0
    var _googleProtobufMixin: Int32 = 0
    var _googleProtobufNullValue: Int32 = 0
    var _googleProtobufOption: Int32 = 0
    var _googleProtobufSourceContext: Int32 = 0
    var _googleProtobufStringValue: Int32 = 0
    var _googleProtobufStruct: Int32 = 0
    var _googleProtobufSyntax: Int32 = 0
    var _googleProtobufTimestamp: Int32 = 0
    var _googleProtobufType: Int32 = 0
    var _googleProtobufUint32Value: Int32 = 0
    var _googleProtobufUint64Value: Int32 = 0
    var _googleProtobufValue: Int32 = 0
    var _group: Int32 = 0
    var _groupSize: Int32 = 0
    var _h: Int32 = 0
    var _handleConflictingOneOf: Int32 = 0
    var _hasExtensionValue_p: Int32 = 0
    var _hash: Int32 = 0
    var _hashable: Int32 = 0
    var _hashValue_p: Int32 = 0
    var _hashVisitor: Int32 = 0
    var _hasSourceContext_p: Int32 = 0
    var _hasValue_p: Int32 = 0
    var _hour: Int32 = 0
    var _i: Int32 = 0
    var _index: Int32 = 0
    var _init_p: Int32 = 0
    var _inout: Int32 = 0
    var _insert: Int32 = 0
    var _int: Int32 = 0
    var _int32: Int32 = 0
    var _int32Value: Int32 = 0
    var _int64: Int32 = 0
    var _int64Value: Int32 = 0
    var _int8: Int32 = 0
    var _integerLiteral: Int32 = 0
    var _integerLiteralType: Int32 = 0
    var _intern: Int32 = 0
    var _internal: Int32 = 0
    var _internalState: Int32 = 0
    var _ints: Int32 = 0
    var _isA: Int32 = 0
    var _isEqual: Int32 = 0
    var _isEqualTo: Int32 = 0
    var _isInitialized_p: Int32 = 0
    var _it: Int32 = 0
    var _itemTagsEncodedSize: Int32 = 0
    var _iterator: Int32 = 0
    var _i2166136261: Int32 = 0
    var _jsondecoder: Int32 = 0
    var _jsondecodingError: Int32 = 0
    var _jsondecodingOptions: Int32 = 0
    var _jsonEncoder: Int32 = 0
    var _jsonencodingError: Int32 = 0
    var _jsonencodingVisitor: Int32 = 0
    var _jsonmapEncodingVisitor: Int32 = 0
    var _jsonName: Int32 = 0
    var _jsonPath: Int32 = 0
    var _jsonPaths: Int32 = 0
    var _jsonscanner: Int32 = 0
    var _jsonString: Int32 = 0
    var _jsonText: Int32 = 0
    var _jsonUtf8Data: Int32 = 0
    var _k: Int32 = 0
    var _key: Int32 = 0
    var _keyField: Int32 = 0
    var _keyType: Int32 = 0
    var _kind: Int32 = 0
    var _l: Int32 = 0
    var _length: Int32 = 0
    var _let: Int32 = 0
    var _lhs: Int32 = 0
    var _list: Int32 = 0
    var _listOfMessages: Int32 = 0
    var _listValue: Int32 = 0
    var _littleEndian: Int32 = 0
    var _littleEndianBytes: Int32 = 0
    var _m: Int32 = 0
    var _major: Int32 = 0
    var _makeIterator: Int32 = 0
    var _mapHash: Int32 = 0
    var _mapKeyType: Int32 = 0
    var _mapNameResolver: Int32 = 0
    var _mapToMessages: Int32 = 0
    var _mapValueType: Int32 = 0
    var _mapVisitor: Int32 = 0
    var _mdayStart: Int32 = 0
    var _merge: Int32 = 0
    var _message: Int32 = 0
    var _messageDepthLimit: Int32 = 0
    var _messageExtension: Int32 = 0
    var _messageImplementationBase: Int32 = 0
    var _messageSet: Int32 = 0
    var _messageType: Int32 = 0
    var _method: Int32 = 0
    var _methods: Int32 = 0
    var _minor: Int32 = 0
    var _mixin: Int32 = 0
    var _mixins: Int32 = 0
    var _month: Int32 = 0
    var _msgExtension: Int32 = 0
    var _mutating: Int32 = 0
    var _n: Int32 = 0
    var _name: Int32 = 0
    var _nameDescription: Int32 = 0
    var _nameMap: Int32 = 0
    var _nameResolver: Int32 = 0
    var _names: Int32 = 0
    var _nanos: Int32 = 0
    var _nativeBytes: Int32 = 0
    var _nativeEndianBytes: Int32 = 0
    var _newL: Int32 = 0
    var _newList: Int32 = 0
    var _newValue: Int32 = 0
    var _nextByte: Int32 = 0
    var _nextFieldNumber: Int32 = 0
    var _nil: Int32 = 0
    var _nilLiteral: Int32 = 0
    var _nullValue: Int32 = 0
    var _number: Int32 = 0
    var _numberValue: Int32 = 0
    var _of: Int32 = 0
    var _oneofIndex: Int32 = 0
    var _oneofs: Int32 = 0
    var _oneOfKind: Int32 = 0
    var _option: Int32 = 0
    var _optionalEnumExtensionField: Int32 = 0
    var _optionalExtensionField: Int32 = 0
    var _optionalGroupExtensionField: Int32 = 0
    var _optionalMessageExtensionField: Int32 = 0
    var _options: Int32 = 0
    var _other: Int32 = 0
    var _others: Int32 = 0
    var _out: Int32 = 0
    var _output: Int32 = 0
    var _p: Int32 = 0
    var _packed: Int32 = 0
    var _packedEnumExtensionField: Int32 = 0
    var _packedExtensionField: Int32 = 0
    var _packedSize: Int32 = 0
    var _padding: Int32 = 0
    var _parent: Int32 = 0
    var _parse: Int32 = 0
    var _partial: Int32 = 0
    var _path: Int32 = 0
    var _paths: Int32 = 0
    var _payload: Int32 = 0
    var _payloadSize: Int32 = 0
    var _pointer: Int32 = 0
    var _pos: Int32 = 0
    var _prefix: Int32 = 0
    var _preTraverse: Int32 = 0
    var _proto2: Int32 = 0
    var _proto3DefaultValue: Int32 = 0
    var _protobufApiversionCheck: Int32 = 0
    var _protobufApiversion2: Int32 = 0
    var _protobufBool: Int32 = 0
    var _protobufBytes: Int32 = 0
    var _protobufDouble: Int32 = 0
    var _protobufEnumMap: Int32 = 0
    var _protobufExtension: Int32 = 0
    var _protobufFixed32: Int32 = 0
    var _protobufFixed64: Int32 = 0
    var _protobufFloat: Int32 = 0
    var _protobufInt32: Int32 = 0
    var _protobufInt64: Int32 = 0
    var _protobufMap: Int32 = 0
    var _protobufMessageMap: Int32 = 0
    var _protobufSfixed32: Int32 = 0
    var _protobufSfixed64: Int32 = 0
    var _protobufSint32: Int32 = 0
    var _protobufSint64: Int32 = 0
    var _protobufString: Int32 = 0
    var _protobufUint32: Int32 = 0
    var _protobufUint64: Int32 = 0
    var _protobufExtensionFieldValues: Int32 = 0
    var _protobufFieldNumber: Int32 = 0
    var _protobufGeneratedIsEqualTo: Int32 = 0
    var _protobufNameMap: Int32 = 0
    var _protobufNewField: Int32 = 0
    var _protobufPackage: Int32 = 0
    var _protocol: Int32 = 0
    var _protoFieldName: Int32 = 0
    var _protoMessageName: Int32 = 0
    var _protoNameProviding: Int32 = 0
    var _protoPaths: Int32 = 0
    var _public: Int32 = 0
    var _putBoolValue: Int32 = 0
    var _putBytesValue: Int32 = 0
    var _putDoubleValue: Int32 = 0
    var _putEnumValue: Int32 = 0
    var _putFixedUint32: Int32 = 0
    var _putFixedUint64: Int32 = 0
    var _putFloatValue: Int32 = 0
    var _putInt64: Int32 = 0
    var _putStringValue: Int32 = 0
    var _putUint64: Int32 = 0
    var _putUint64Hex: Int32 = 0
    var _putVarInt: Int32 = 0
    var _putZigZagVarInt: Int32 = 0
    var _rawChars: Int32 = 0
    var _rawRepresentable: Int32 = 0
    var _rawValue: Int32 = 0
    var _readBuffer: Int32 = 0
    var _register: Int32 = 0
    var _repeatedEnumExtensionField: Int32 = 0
    var _repeatedExtensionField: Int32 = 0
    var _repeatedGroupExtensionField: Int32 = 0
    var _repeatedMessageExtensionField: Int32 = 0
    var _requestStreaming: Int32 = 0
    var _requestTypeURL: Int32 = 0
    var _requiredSize: Int32 = 0
    var _responseStreaming: Int32 = 0
    var _responseTypeURL: Int32 = 0
    var _result: Int32 = 0
    var _return: Int32 = 0
    var _revision: Int32 = 0
    var _rhs: Int32 = 0
    var _root: Int32 = 0
    var _s: Int32 = 0
    var _sawBackslash: Int32 = 0
    var _sawSection4Characters: Int32 = 0
    var _sawSection5Characters: Int32 = 0
    var _scanner: Int32 = 0
    var _seconds: Int32 = 0
    var _self_p: Int32 = 0
    var _separator: Int32 = 0
    var _serialize: Int32 = 0
    var _serializedData: Int32 = 0
    var _serializedSize: Int32 = 0
    var _set: Int32 = 0
    var _setExtensionValue: Int32 = 0
    var _shift: Int32 = 0
    var _simpleExtensionMap: Int32 = 0
    var _sizer: Int32 = 0
    var _source: Int32 = 0
    var _sourceContext: Int32 = 0
    var _sourceEncoding: Int32 = 0
    var _split: Int32 = 0
    var _start: Int32 = 0
    var _startArray: Int32 = 0
    var _startField: Int32 = 0
    var _startIndex: Int32 = 0
    var _startMessageField: Int32 = 0
    var _startObject: Int32 = 0
    var _startRegularField: Int32 = 0
    var _state: Int32 = 0
    var _static: Int32 = 0
    var _staticString: Int32 = 0
    var _storage: Int32 = 0
    var _string: Int32 = 0
    var _stringLiteral: Int32 = 0
    var _stringLiteralType: Int32 = 0
    var _stringResult: Int32 = 0
    var _stringValue: Int32 = 0
    var _struct: Int32 = 0
    var _structValue: Int32 = 0
    var _subDecoder: Int32 = 0
    var _subscript: Int32 = 0
    var _subVisitor: Int32 = 0
    var _swift: Int32 = 0
    var _swiftProtobuf: Int32 = 0
    var _syntax: Int32 = 0
    var _t: Int32 = 0
    var _tag: Int32 = 0
    var _terminator: Int32 = 0
    var _testDecoder: Int32 = 0
    var _text: Int32 = 0
    var _textDecoder: Int32 = 0
    var _textFormatDecoder: Int32 = 0
    var _textFormatDecodingError: Int32 = 0
    var _textFormatEncodingVisitor: Int32 = 0
    var _textFormatString: Int32 = 0
    var _throws: Int32 = 0
    var _timeInterval: Int32 = 0
    var _timeIntervalSince1970: Int32 = 0
    var _timeIntervalSinceReferenceDate: Int32 = 0
    var _timestamp: Int32 = 0
    var _total: Int32 = 0
    var _totalSize: Int32 = 0
    var _traverse: Int32 = 0
    var _true: Int32 = 0
    var _try: Int32 = 0
    var _type: Int32 = 0
    var _typealias: Int32 = 0
    var _typePrefix: Int32 = 0
    var _typeStart: Int32 = 0
    var _typeUnknown: Int32 = 0
    var _typeURL: Int32 = 0
    var _uint32: Int32 = 0
    var _uint32Value: Int32 = 0
    var _uint64: Int32 = 0
    var _uint64Value: Int32 = 0
    var _uint8: Int32 = 0
    var _unicodeScalarLiteral: Int32 = 0
    var _unicodeScalarLiteralType: Int32 = 0
    var _unicodeScalars: Int32 = 0
    var _unicodeScalarView: Int32 = 0
    var _union: Int32 = 0
    var _unknown: Int32 = 0
    var _unknownFields_p: Int32 = 0
    var _unknownStorage: Int32 = 0
    var _unpackTo: Int32 = 0
    var _unsafeBufferPointer: Int32 = 0
    var _unsafeMutablePointer: Int32 = 0
    var _unsafePointer: Int32 = 0
    var _updatedOptions: Int32 = 0
    var _url: Int32 = 0
    var _utf8: Int32 = 0
    var _utf8Codec: Int32 = 0
    var _utf8ToDouble: Int32 = 0
    var _utf8View: Int32 = 0
    var _v: Int32 = 0
    var _value: Int32 = 0
    var _valueField: Int32 = 0
    var _values: Int32 = 0
    var _valueType: Int32 = 0
    var _var: Int32 = 0
    var _version: Int32 = 0
    var _versionString: Int32 = 0
    var _visitExtensionFields: Int32 = 0
    var _visitExtensionFieldsAsMessageSet: Int32 = 0
    var _visitMapField: Int32 = 0
    var _visitor: Int32 = 0
    var _visitPacked: Int32 = 0
    var _visitPackedBoolField: Int32 = 0
    var _visitPackedDoubleField: Int32 = 0
    var _visitPackedEnumField: Int32 = 0
    var _visitPackedFixed32Field: Int32 = 0
    var _visitPackedFixed64Field: Int32 = 0
    var _visitPackedFloatField: Int32 = 0
    var _visitPackedInt32Field: Int32 = 0
    var _visitPackedInt64Field: Int32 = 0
    var _visitPackedSfixed32Field: Int32 = 0
    var _visitPackedSfixed64Field: Int32 = 0
    var _visitPackedSint32Field: Int32 = 0
    var _visitPackedSint64Field: Int32 = 0
    var _visitPackedUint32Field: Int32 = 0
    var _visitPackedUint64Field: Int32 = 0
    var _visitRepeated: Int32 = 0
    var _visitRepeatedBoolField: Int32 = 0
    var _visitRepeatedBytesField: Int32 = 0
    var _visitRepeatedDoubleField: Int32 = 0
    var _visitRepeatedEnumField: Int32 = 0
    var _visitRepeatedFixed32Field: Int32 = 0
    var _visitRepeatedFixed64Field: Int32 = 0
    var _visitRepeatedFloatField: Int32 = 0
    var _visitRepeatedGroupField: Int32 = 0
    var _visitRepeatedInt32Field: Int32 = 0
    var _visitRepeatedInt64Field: Int32 = 0
    var _visitRepeatedMessageField: Int32 = 0
    var _visitRepeatedSfixed32Field: Int32 = 0
    var _visitRepeatedSfixed64Field: Int32 = 0
    var _visitRepeatedSint32Field: Int32 = 0
    var _visitRepeatedSint64Field: Int32 = 0
    var _visitRepeatedStringField: Int32 = 0
    var _visitRepeatedUint32Field: Int32 = 0
    var _visitRepeatedUint64Field: Int32 = 0
    var _visitSingular: Int32 = 0
    var _visitSingularBoolField: Int32 = 0
    var _visitSingularBytesField: Int32 = 0
    var _visitSingularDoubleField: Int32 = 0
    var _visitSingularEnumField: Int32 = 0
    var _visitSingularFixed32Field: Int32 = 0
    var _visitSingularFixed64Field: Int32 = 0
    var _visitSingularFloatField: Int32 = 0
    var _visitSingularGroupField: Int32 = 0
    var _visitSingularInt32Field: Int32 = 0
    var _visitSingularInt64Field: Int32 = 0
    var _visitSingularMessageField: Int32 = 0
    var _visitSingularSfixed32Field: Int32 = 0
    var _visitSingularSfixed64Field: Int32 = 0
    var _visitSingularSint32Field: Int32 = 0
    var _visitSingularSint64Field: Int32 = 0
    var _visitSingularStringField: Int32 = 0
    var _visitSingularUint32Field: Int32 = 0
    var _visitSingularUint64Field: Int32 = 0
    var _visitUnknown: Int32 = 0
    var _wasDecoded: Int32 = 0
    var _where: Int32 = 0
    var _wireFormat: Int32 = 0
    var _with: Int32 = 0
    var _wrappedType: Int32 = 0
    var _written: Int32 = 0
    var _yday: Int32 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _adjusted = source._adjusted
      _allocate = source._allocate
      _any = source._any
      _anyExtensionField = source._anyExtensionField
      _anyMessageExtension = source._anyMessageExtension
      _anyMessageStorage = source._anyMessageStorage
      _anyUnpackError = source._anyUnpackError
      _api = source._api
      _appended = source._appended
      _appendUintHex = source._appendUintHex
      _appendUnknown = source._appendUnknown
      _areAllInitialized = source._areAllInitialized
      _array = source._array
      _arrayLiteral = source._arrayLiteral
      _arraySeparator = source._arraySeparator
      _as = source._as
      _asciiOpenCurlyBracket = source._asciiOpenCurlyBracket
      _asciiZero = source._asciiZero
      _available = source._available
      _b = source._b
      _baseType = source._baseType
      _binary = source._binary
      _binaryDecoder = source._binaryDecoder
      _binaryDecodingError = source._binaryDecodingError
      _binaryDecodingOptions = source._binaryDecodingOptions
      _binaryDelimited = source._binaryDelimited
      _binaryEncoder = source._binaryEncoder
      _binaryEncodingError = source._binaryEncodingError
      _binaryEncodingMessageSetSizeVisitor = source._binaryEncodingMessageSetSizeVisitor
      _binaryEncodingMessageSetVisitor = source._binaryEncodingMessageSetVisitor
      _binaryEncodingSizeVisitor = source._binaryEncodingSizeVisitor
      _binaryEncodingVisitor = source._binaryEncodingVisitor
      _bodySize = source._bodySize
      _bool = source._bool
      _booleanLiteral = source._booleanLiteral
      _booleanLiteralType = source._booleanLiteralType
      _boolValue = source._boolValue
      _buffer = source._buffer
      _bytes = source._bytes
      _bytesInGroup = source._bytesInGroup
      _bytesRead = source._bytesRead
      _bytesValue = source._bytesValue
      _c = source._c
      _capacity = source._capacity
      _capitalizeNext = source._capitalizeNext
      _cardinality = source._cardinality
      _character = source._character
      _characters = source._characters
      _chars = source._chars
      _class = source._class
      _clearExtensionValue_p = source._clearExtensionValue_p
      _clearSourceContext_p = source._clearSourceContext_p
      _clearValue_p = source._clearValue_p
      _codeUnits = source._codeUnits
      _collection = source._collection
      _com = source._com
      _comma = source._comma
      _contentsOf = source._contentsOf
      _count = source._count
      _countVarintsInBuffer = source._countVarintsInBuffer
      _customCodable = source._customCodable
      _customDebugStringConvertible = source._customDebugStringConvertible
      _d = source._d
      _data = source._data
      _dataPointer = source._dataPointer
      _dataResult = source._dataResult
      _dataSize = source._dataSize
      _date = source._date
      _daySec = source._daySec
      _daysSinceEpoch = source._daysSinceEpoch
      _debugDescription_p = source._debugDescription_p
      _decoded = source._decoded
      _decodedFromJsonnull = source._decodedFromJsonnull
      _decodeExtensionField = source._decodeExtensionField
      _decodeExtensionFieldsAsMessageSet = source._decodeExtensionFieldsAsMessageSet
      _decodeJson = source._decodeJson
      _decodeMapField = source._decodeMapField
      _decodeMessage = source._decodeMessage
      _decoder = source._decoder
      _decodeRepeated = source._decodeRepeated
      _decodeRepeatedBoolField = source._decodeRepeatedBoolField
      _decodeRepeatedBytesField = source._decodeRepeatedBytesField
      _decodeRepeatedDoubleField = source._decodeRepeatedDoubleField
      _decodeRepeatedEnumField = source._decodeRepeatedEnumField
      _decodeRepeatedFixed32Field = source._decodeRepeatedFixed32Field
      _decodeRepeatedFixed64Field = source._decodeRepeatedFixed64Field
      _decodeRepeatedFloatField = source._decodeRepeatedFloatField
      _decodeRepeatedGroupField = source._decodeRepeatedGroupField
      _decodeRepeatedInt32Field = source._decodeRepeatedInt32Field
      _decodeRepeatedInt64Field = source._decodeRepeatedInt64Field
      _decodeRepeatedMessageField = source._decodeRepeatedMessageField
      _decodeRepeatedSfixed32Field = source._decodeRepeatedSfixed32Field
      _decodeRepeatedSfixed64Field = source._decodeRepeatedSfixed64Field
      _decodeRepeatedSint32Field = source._decodeRepeatedSint32Field
      _decodeRepeatedSint64Field = source._decodeRepeatedSint64Field
      _decodeRepeatedStringField = source._decodeRepeatedStringField
      _decodeRepeatedUint32Field = source._decodeRepeatedUint32Field
      _decodeRepeatedUint64Field = source._decodeRepeatedUint64Field
      _decodeSingular = source._decodeSingular
      _decodeSingularBoolField = source._decodeSingularBoolField
      _decodeSingularBytesField = source._decodeSingularBytesField
      _decodeSingularDoubleField = source._decodeSingularDoubleField
      _decodeSingularEnumField = source._decodeSingularEnumField
      _decodeSingularFixed32Field = source._decodeSingularFixed32Field
      _decodeSingularFixed64Field = source._decodeSingularFixed64Field
      _decodeSingularFloatField = source._decodeSingularFloatField
      _decodeSingularGroupField = source._decodeSingularGroupField
      _decodeSingularInt32Field = source._decodeSingularInt32Field
      _decodeSingularInt64Field = source._decodeSingularInt64Field
      _decodeSingularMessageField = source._decodeSingularMessageField
      _decodeSingularSfixed32Field = source._decodeSingularSfixed32Field
      _decodeSingularSfixed64Field = source._decodeSingularSfixed64Field
      _decodeSingularSint32Field = source._decodeSingularSint32Field
      _decodeSingularSint64Field = source._decodeSingularSint64Field
      _decodeSingularStringField = source._decodeSingularStringField
      _decodeSingularUint32Field = source._decodeSingularUint32Field
      _decodeSingularUint64Field = source._decodeSingularUint64Field
      _decodeTextFormat = source._decodeTextFormat
      _defaultAnyTypeUrlprefix = source._defaultAnyTypeUrlprefix
      _defaultValue = source._defaultValue
      _description_p = source._description_p
      _dictionary = source._dictionary
      _dictionaryLiteral = source._dictionaryLiteral
      _digit = source._digit
      _digit0 = source._digit0
      _digit1 = source._digit1
      _digitCount = source._digitCount
      _digits = source._digits
      _digitValue = source._digitValue
      _discardableResult = source._discardableResult
      _discardUnknownFields = source._discardUnknownFields
      _distance = source._distance
      _double = source._double
      _doubleToUtf8 = source._doubleToUtf8
      _doubleValue = source._doubleValue
      _duration = source._duration
      _e = source._e
      _element = source._element
      _elements = source._elements
      _emitExtensionFieldName = source._emitExtensionFieldName
      _emitFieldName = source._emitFieldName
      _emitFieldNumber = source._emitFieldNumber
      _empty = source._empty
      _emptyData = source._emptyData
      _encoded = source._encoded
      _encodedJsonstring = source._encodedJsonstring
      _encodedSize = source._encodedSize
      _encodeField = source._encodeField
      _encoder = source._encoder
      _end = source._end
      _endArray = source._endArray
      _endMessageField = source._endMessageField
      _endObject = source._endObject
      _endRegularField = source._endRegularField
      _enum = source._enum
      _enumvalue = source._enumvalue
      _equatable = source._equatable
      _error = source._error
      _expressibleByArrayLiteral = source._expressibleByArrayLiteral
      _expressibleByDictionaryLiteral = source._expressibleByDictionaryLiteral
      _ext = source._ext
      _extDecoder = source._extDecoder
      _extendedGraphemeClusterLiteral = source._extendedGraphemeClusterLiteral
      _extendedGraphemeClusterLiteralType = source._extendedGraphemeClusterLiteralType
      _extensibleMessage = source._extensibleMessage
      _extension = source._extension
      _extensionField = source._extensionField
      _extensionFieldNumber = source._extensionFieldNumber
      _extensionFieldValueSet = source._extensionFieldValueSet
      _extensionMap = source._extensionMap
      _extensions = source._extensions
      _extras = source._extras
      _f = source._f
      _false = source._false
      _field = source._field
      _fieldData = source._fieldData
      _fieldMask = source._fieldMask
      _fieldName = source._fieldName
      _fieldNameCount = source._fieldNameCount
      _fieldNum = source._fieldNum
      _fieldNumber = source._fieldNumber
      _fieldNumberForProto = source._fieldNumberForProto
      _fields = source._fields
      _fieldSize = source._fieldSize
      _fieldTag = source._fieldTag
      _fieldType = source._fieldType
      _fieldValue = source._fieldValue
      _fileName = source._fileName
      _filter = source._filter
      _firstItem = source._firstItem
      _float = source._float
      _floatLiteral = source._floatLiteral
      _floatLiteralType = source._floatLiteralType
      _floatToUtf8 = source._floatToUtf8
      _floatValue = source._floatValue
      _forMessageName = source._forMessageName
      _formUnion = source._formUnion
      _forReadingFrom = source._forReadingFrom
      _forTypeURL = source._forTypeURL
      _forwardParser = source._forwardParser
      _forWritingInto = source._forWritingInto
      _from = source._from
      _fromAscii2 = source._fromAscii2
      _fromAscii4 = source._fromAscii4
      _fromHexDigit = source._fromHexDigit
      _func = source._func
      _g = source._g
      _get = source._get
      _getExtensionValue = source._getExtensionValue
      _googleapis = source._googleapis
      _googleProtobufAny = source._googleProtobufAny
      _googleProtobufApi = source._googleProtobufApi
      _googleProtobufBoolValue = source._googleProtobufBoolValue
      _googleProtobufBytesValue = source._googleProtobufBytesValue
      _googleProtobufDoubleValue = source._googleProtobufDoubleValue
      _googleProtobufDuration = source._googleProtobufDuration
      _googleProtobufEmpty = source._googleProtobufEmpty
      _googleProtobufEnum = source._googleProtobufEnum
      _googleProtobufEnumValue = source._googleProtobufEnumValue
      _googleProtobufField = source._googleProtobufField
      _googleProtobufFieldMask = source._googleProtobufFieldMask
      _googleProtobufFloatValue = source._googleProtobufFloatValue
      _googleProtobufInt32Value = source._googleProtobufInt32Value
      _googleProtobufInt64Value = source._googleProtobufInt64Value
      _googleProtobufListValue = source._googleProtobufListValue
      _googleProtobufMethod = source._googleProtobufMethod
      _googleProtobufMixin = source._googleProtobufMixin
      _googleProtobufNullValue = source._googleProtobufNullValue
      _googleProtobufOption = source._googleProtobufOption
      _googleProtobufSourceContext = source._googleProtobufSourceContext
      _googleProtobufStringValue = source._googleProtobufStringValue
      _googleProtobufStruct = source._googleProtobufStruct
      _googleProtobufSyntax = source._googleProtobufSyntax
      _googleProtobufTimestamp = source._googleProtobufTimestamp
      _googleProtobufType = source._googleProtobufType
      _googleProtobufUint32Value = source._googleProtobufUint32Value
      _googleProtobufUint64Value = source._googleProtobufUint64Value
      _googleProtobufValue = source._googleProtobufValue
      _group = source._group
      _groupSize = source._groupSize
      _h = source._h
      _handleConflictingOneOf = source._handleConflictingOneOf
      _hasExtensionValue_p = source._hasExtensionValue_p
      _hash = source._hash
      _hashable = source._hashable
      _hashValue_p = source._hashValue_p
      _hashVisitor = source._hashVisitor
      _hasSourceContext_p = source._hasSourceContext_p
      _hasValue_p = source._hasValue_p
      _hour = source._hour
      _i = source._i
      _index = source._index
      _init_p = source._init_p
      _inout = source._inout
      _insert = source._insert
      _int = source._int
      _int32 = source._int32
      _int32Value = source._int32Value
      _int64 = source._int64
      _int64Value = source._int64Value
      _int8 = source._int8
      _integerLiteral = source._integerLiteral
      _integerLiteralType = source._integerLiteralType
      _intern = source._intern
      _internal = source._internal
      _internalState = source._internalState
      _ints = source._ints
      _isA = source._isA
      _isEqual = source._isEqual
      _isEqualTo = source._isEqualTo
      _isInitialized_p = source._isInitialized_p
      _it = source._it
      _itemTagsEncodedSize = source._itemTagsEncodedSize
      _iterator = source._iterator
      _i2166136261 = source._i2166136261
      _jsondecoder = source._jsondecoder
      _jsondecodingError = source._jsondecodingError
      _jsondecodingOptions = source._jsondecodingOptions
      _jsonEncoder = source._jsonEncoder
      _jsonencodingError = source._jsonencodingError
      _jsonencodingVisitor = source._jsonencodingVisitor
      _jsonmapEncodingVisitor = source._jsonmapEncodingVisitor
      _jsonName = source._jsonName
      _jsonPath = source._jsonPath
      _jsonPaths = source._jsonPaths
      _jsonscanner = source._jsonscanner
      _jsonString = source._jsonString
      _jsonText = source._jsonText
      _jsonUtf8Data = source._jsonUtf8Data
      _k = source._k
      _key = source._key
      _keyField = source._keyField
      _keyType = source._keyType
      _kind = source._kind
      _l = source._l
      _length = source._length
      _let = source._let
      _lhs = source._lhs
      _list = source._list
      _listOfMessages = source._listOfMessages
      _listValue = source._listValue
      _littleEndian = source._littleEndian
      _littleEndianBytes = source._littleEndianBytes
      _m = source._m
      _major = source._major
      _makeIterator = source._makeIterator
      _mapHash = source._mapHash
      _mapKeyType = source._mapKeyType
      _mapNameResolver = source._mapNameResolver
      _mapToMessages = source._mapToMessages
      _mapValueType = source._mapValueType
      _mapVisitor = source._mapVisitor
      _mdayStart = source._mdayStart
      _merge = source._merge
      _message = source._message
      _messageDepthLimit = source._messageDepthLimit
      _messageExtension = source._messageExtension
      _messageImplementationBase = source._messageImplementationBase
      _messageSet = source._messageSet
      _messageType = source._messageType
      _method = source._method
      _methods = source._methods
      _minor = source._minor
      _mixin = source._mixin
      _mixins = source._mixins
      _month = source._month
      _msgExtension = source._msgExtension
      _mutating = source._mutating
      _n = source._n
      _name = source._name
      _nameDescription = source._nameDescription
      _nameMap = source._nameMap
      _nameResolver = source._nameResolver
      _names = source._names
      _nanos = source._nanos
      _nativeBytes = source._nativeBytes
      _nativeEndianBytes = source._nativeEndianBytes
      _newL = source._newL
      _newList = source._newList
      _newValue = source._newValue
      _nextByte = source._nextByte
      _nextFieldNumber = source._nextFieldNumber
      _nil = source._nil
      _nilLiteral = source._nilLiteral
      _nullValue = source._nullValue
      _number = source._number
      _numberValue = source._numberValue
      _of = source._of
      _oneofIndex = source._oneofIndex
      _oneofs = source._oneofs
      _oneOfKind = source._oneOfKind
      _option = source._option
      _optionalEnumExtensionField = source._optionalEnumExtensionField
      _optionalExtensionField = source._optionalExtensionField
      _optionalGroupExtensionField = source._optionalGroupExtensionField
      _optionalMessageExtensionField = source._optionalMessageExtensionField
      _options = source._options
      _other = source._other
      _others = source._others
      _out = source._out
      _output = source._output
      _p = source._p
      _packed = source._packed
      _packedEnumExtensionField = source._packedEnumExtensionField
      _packedExtensionField = source._packedExtensionField
      _packedSize = source._packedSize
      _padding = source._padding
      _parent = source._parent
      _parse = source._parse
      _partial = source._partial
      _path = source._path
      _paths = source._paths
      _payload = source._payload
      _payloadSize = source._payloadSize
      _pointer = source._pointer
      _pos = source._pos
      _prefix = source._prefix
      _preTraverse = source._preTraverse
      _proto2 = source._proto2
      _proto3DefaultValue = source._proto3DefaultValue
      _protobufApiversionCheck = source._protobufApiversionCheck
      _protobufApiversion2 = source._protobufApiversion2
      _protobufBool = source._protobufBool
      _protobufBytes = source._protobufBytes
      _protobufDouble = source._protobufDouble
      _protobufEnumMap = source._protobufEnumMap
      _protobufExtension = source._protobufExtension
      _protobufFixed32 = source._protobufFixed32
      _protobufFixed64 = source._protobufFixed64
      _protobufFloat = source._protobufFloat
      _protobufInt32 = source._protobufInt32
      _protobufInt64 = source._protobufInt64
      _protobufMap = source._protobufMap
      _protobufMessageMap = source._protobufMessageMap
      _protobufSfixed32 = source._protobufSfixed32
      _protobufSfixed64 = source._protobufSfixed64
      _protobufSint32 = source._protobufSint32
      _protobufSint64 = source._protobufSint64
      _protobufString = source._protobufString
      _protobufUint32 = source._protobufUint32
      _protobufUint64 = source._protobufUint64
      _protobufExtensionFieldValues = source._protobufExtensionFieldValues
      _protobufFieldNumber = source._protobufFieldNumber
      _protobufGeneratedIsEqualTo = source._protobufGeneratedIsEqualTo
      _protobufNameMap = source._protobufNameMap
      _protobufNewField = source._protobufNewField
      _protobufPackage = source._protobufPackage
      _protocol = source._protocol
      _protoFieldName = source._protoFieldName
      _protoMessageName = source._protoMessageName
      _protoNameProviding = source._protoNameProviding
      _protoPaths = source._protoPaths
      _public = source._public
      _putBoolValue = source._putBoolValue
      _putBytesValue = source._putBytesValue
      _putDoubleValue = source._putDoubleValue
      _putEnumValue = source._putEnumValue
      _putFixedUint32 = source._putFixedUint32
      _putFixedUint64 = source._putFixedUint64
      _putFloatValue = source._putFloatValue
      _putInt64 = source._putInt64
      _putStringValue = source._putStringValue
      _putUint64 = source._putUint64
      _putUint64Hex = source._putUint64Hex
      _putVarInt = source._putVarInt
      _putZigZagVarInt = source._putZigZagVarInt
      _rawChars = source._rawChars
      _rawRepresentable = source._rawRepresentable
      _rawValue = source._rawValue
      _readBuffer = source._readBuffer
      _register = source._register
      _repeatedEnumExtensionField = source._repeatedEnumExtensionField
      _repeatedExtensionField = source._repeatedExtensionField
      _repeatedGroupExtensionField = source._repeatedGroupExtensionField
      _repeatedMessageExtensionField = source._repeatedMessageExtensionField
      _requestStreaming = source._requestStreaming
      _requestTypeURL = source._requestTypeURL
      _requiredSize = source._requiredSize
      _responseStreaming = source._responseStreaming
      _responseTypeURL = source._responseTypeURL
      _result = source._result
      _return = source._return
      _revision = source._revision
      _rhs = source._rhs
      _root = source._root
      _s = source._s
      _sawBackslash = source._sawBackslash
      _sawSection4Characters = source._sawSection4Characters
      _sawSection5Characters = source._sawSection5Characters
      _scanner = source._scanner
      _seconds = source._seconds
      _self_p = source._self_p
      _separator = source._separator
      _serialize = source._serialize
      _serializedData = source._serializedData
      _serializedSize = source._serializedSize
      _set = source._set
      _setExtensionValue = source._setExtensionValue
      _shift = source._shift
      _simpleExtensionMap = source._simpleExtensionMap
      _sizer = source._sizer
      _source = source._source
      _sourceContext = source._sourceContext
      _sourceEncoding = source._sourceEncoding
      _split = source._split
      _start = source._start
      _startArray = source._startArray
      _startField = source._startField
      _startIndex = source._startIndex
      _startMessageField = source._startMessageField
      _startObject = source._startObject
      _startRegularField = source._startRegularField
      _state = source._state
      _static = source._static
      _staticString = source._staticString
      _storage = source._storage
      _string = source._string
      _stringLiteral = source._stringLiteral
      _stringLiteralType = source._stringLiteralType
      _stringResult = source._stringResult
      _stringValue = source._stringValue
      _struct = source._struct
      _structValue = source._structValue
      _subDecoder = source._subDecoder
      _subscript = source._subscript
      _subVisitor = source._subVisitor
      _swift = source._swift
      _swiftProtobuf = source._swiftProtobuf
      _syntax = source._syntax
      _t = source._t
      _tag = source._tag
      _terminator = source._terminator
      _testDecoder = source._testDecoder
      _text = source._text
      _textDecoder = source._textDecoder
      _textFormatDecoder = source._textFormatDecoder
      _textFormatDecodingError = source._textFormatDecodingError
      _textFormatEncodingVisitor = source._textFormatEncodingVisitor
      _textFormatString = source._textFormatString
      _throws = source._throws
      _timeInterval = source._timeInterval
      _timeIntervalSince1970 = source._timeIntervalSince1970
      _timeIntervalSinceReferenceDate = source._timeIntervalSinceReferenceDate
      _timestamp = source._timestamp
      _total = source._total
      _totalSize = source._totalSize
      _traverse = source._traverse
      _true = source._true
      _try = source._try
      _type = source._type
      _typealias = source._typealias
      _typePrefix = source._typePrefix
      _typeStart = source._typeStart
      _typeUnknown = source._typeUnknown
      _typeURL = source._typeURL
      _uint32 = source._uint32
      _uint32Value = source._uint32Value
      _uint64 = source._uint64
      _uint64Value = source._uint64Value
      _uint8 = source._uint8
      _unicodeScalarLiteral = source._unicodeScalarLiteral
      _unicodeScalarLiteralType = source._unicodeScalarLiteralType
      _unicodeScalars = source._unicodeScalars
      _unicodeScalarView = source._unicodeScalarView
      _union = source._union
      _unknown = source._unknown
      _unknownFields_p = source._unknownFields_p
      _unknownStorage = source._unknownStorage
      _unpackTo = source._unpackTo
      _unsafeBufferPointer = source._unsafeBufferPointer
      _unsafeMutablePointer = source._unsafeMutablePointer
      _unsafePointer = source._unsafePointer
      _updatedOptions = source._updatedOptions
      _url = source._url
      _utf8 = source._utf8
      _utf8Codec = source._utf8Codec
      _utf8ToDouble = source._utf8ToDouble
      _utf8View = source._utf8View
      _v = source._v
      _value = source._value
      _valueField = source._valueField
      _values = source._values
      _valueType = source._valueType
      _var = source._var
      _version = source._version
      _versionString = source._versionString
      _visitExtensionFields = source._visitExtensionFields
      _visitExtensionFieldsAsMessageSet = source._visitExtensionFieldsAsMessageSet
      _visitMapField = source._visitMapField
      _visitor = source._visitor
      _visitPacked = source._visitPacked
      _visitPackedBoolField = source._visitPackedBoolField
      _visitPackedDoubleField = source._visitPackedDoubleField
      _visitPackedEnumField = source._visitPackedEnumField
      _visitPackedFixed32Field = source._visitPackedFixed32Field
      _visitPackedFixed64Field = source._visitPackedFixed64Field
      _visitPackedFloatField = source._visitPackedFloatField
      _visitPackedInt32Field = source._visitPackedInt32Field
      _visitPackedInt64Field = source._visitPackedInt64Field
      _visitPackedSfixed32Field = source._visitPackedSfixed32Field
      _visitPackedSfixed64Field = source._visitPackedSfixed64Field
      _visitPackedSint32Field = source._visitPackedSint32Field
      _visitPackedSint64Field = source._visitPackedSint64Field
      _visitPackedUint32Field = source._visitPackedUint32Field
      _visitPackedUint64Field = source._visitPackedUint64Field
      _visitRepeated = source._visitRepeated
      _visitRepeatedBoolField = source._visitRepeatedBoolField
      _visitRepeatedBytesField = source._visitRepeatedBytesField
      _visitRepeatedDoubleField = source._visitRepeatedDoubleField
      _visitRepeatedEnumField = source._visitRepeatedEnumField
      _visitRepeatedFixed32Field = source._visitRepeatedFixed32Field
      _visitRepeatedFixed64Field = source._visitRepeatedFixed64Field
      _visitRepeatedFloatField = source._visitRepeatedFloatField
      _visitRepeatedGroupField = source._visitRepeatedGroupField
      _visitRepeatedInt32Field = source._visitRepeatedInt32Field
      _visitRepeatedInt64Field = source._visitRepeatedInt64Field
      _visitRepeatedMessageField = source._visitRepeatedMessageField
      _visitRepeatedSfixed32Field = source._visitRepeatedSfixed32Field
      _visitRepeatedSfixed64Field = source._visitRepeatedSfixed64Field
      _visitRepeatedSint32Field = source._visitRepeatedSint32Field
      _visitRepeatedSint64Field = source._visitRepeatedSint64Field
      _visitRepeatedStringField = source._visitRepeatedStringField
      _visitRepeatedUint32Field = source._visitRepeatedUint32Field
      _visitRepeatedUint64Field = source._visitRepeatedUint64Field
      _visitSingular = source._visitSingular
      _visitSingularBoolField = source._visitSingularBoolField
      _visitSingularBytesField = source._visitSingularBytesField
      _visitSingularDoubleField = source._visitSingularDoubleField
      _visitSingularEnumField = source._visitSingularEnumField
      _visitSingularFixed32Field = source._visitSingularFixed32Field
      _visitSingularFixed64Field = source._visitSingularFixed64Field
      _visitSingularFloatField = source._visitSingularFloatField
      _visitSingularGroupField = source._visitSingularGroupField
      _visitSingularInt32Field = source._visitSingularInt32Field
      _visitSingularInt64Field = source._visitSingularInt64Field
      _visitSingularMessageField = source._visitSingularMessageField
      _visitSingularSfixed32Field = source._visitSingularSfixed32Field
      _visitSingularSfixed64Field = source._visitSingularSfixed64Field
      _visitSingularSint32Field = source._visitSingularSint32Field
      _visitSingularSint64Field = source._visitSingularSint64Field
      _visitSingularStringField = source._visitSingularStringField
      _visitSingularUint32Field = source._visitSingularUint32Field
      _visitSingularUint64Field = source._visitSingularUint64Field
      _visitUnknown = source._visitUnknown
      _wasDecoded = source._wasDecoded
      _where = source._where
      _wireFormat = source._wireFormat
      _with = source._with
      _wrappedType = source._wrappedType
      _written = source._written
      _yday = source._yday
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._adjusted)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._allocate)
        case 3: try decoder.decodeSingularInt32Field(value: &_storage._any)
        case 4: try decoder.decodeSingularInt32Field(value: &_storage._anyExtensionField)
        case 5: try decoder.decodeSingularInt32Field(value: &_storage._anyMessageExtension)
        case 6: try decoder.decodeSingularInt32Field(value: &_storage._anyMessageStorage)
        case 7: try decoder.decodeSingularInt32Field(value: &_storage._anyUnpackError)
        case 8: try decoder.decodeSingularInt32Field(value: &_storage._api)
        case 9: try decoder.decodeSingularInt32Field(value: &_storage._appended)
        case 10: try decoder.decodeSingularInt32Field(value: &_storage._appendUintHex)
        case 11: try decoder.decodeSingularInt32Field(value: &_storage._appendUnknown)
        case 12: try decoder.decodeSingularInt32Field(value: &_storage._areAllInitialized)
        case 13: try decoder.decodeSingularInt32Field(value: &_storage._array)
        case 14: try decoder.decodeSingularInt32Field(value: &_storage._arrayLiteral)
        case 15: try decoder.decodeSingularInt32Field(value: &_storage._arraySeparator)
        case 16: try decoder.decodeSingularInt32Field(value: &_storage._as)
        case 17: try decoder.decodeSingularInt32Field(value: &_storage._asciiOpenCurlyBracket)
        case 18: try decoder.decodeSingularInt32Field(value: &_storage._asciiZero)
        case 19: try decoder.decodeSingularInt32Field(value: &_storage._available)
        case 20: try decoder.decodeSingularInt32Field(value: &_storage._b)
        case 21: try decoder.decodeSingularInt32Field(value: &_storage._baseType)
        case 22: try decoder.decodeSingularInt32Field(value: &_storage._binary)
        case 23: try decoder.decodeSingularInt32Field(value: &_storage._binaryDecoder)
        case 24: try decoder.decodeSingularInt32Field(value: &_storage._binaryDecodingError)
        case 25: try decoder.decodeSingularInt32Field(value: &_storage._binaryDecodingOptions)
        case 26: try decoder.decodeSingularInt32Field(value: &_storage._binaryDelimited)
        case 27: try decoder.decodeSingularInt32Field(value: &_storage._binaryEncoder)
        case 28: try decoder.decodeSingularInt32Field(value: &_storage._binaryEncodingError)
        case 29: try decoder.decodeSingularInt32Field(value: &_storage._binaryEncodingMessageSetSizeVisitor)
        case 30: try decoder.decodeSingularInt32Field(value: &_storage._binaryEncodingMessageSetVisitor)
        case 31: try decoder.decodeSingularInt32Field(value: &_storage._binaryEncodingSizeVisitor)
        case 32: try decoder.decodeSingularInt32Field(value: &_storage._binaryEncodingVisitor)
        case 33: try decoder.decodeSingularInt32Field(value: &_storage._bodySize)
        case 34: try decoder.decodeSingularInt32Field(value: &_storage._bool)
        case 35: try decoder.decodeSingularInt32Field(value: &_storage._booleanLiteral)
        case 36: try decoder.decodeSingularInt32Field(value: &_storage._booleanLiteralType)
        case 37: try decoder.decodeSingularInt32Field(value: &_storage._boolValue)
        case 38: try decoder.decodeSingularInt32Field(value: &_storage._buffer)
        case 39: try decoder.decodeSingularInt32Field(value: &_storage._bytes)
        case 40: try decoder.decodeSingularInt32Field(value: &_storage._bytesInGroup)
        case 41: try decoder.decodeSingularInt32Field(value: &_storage._bytesRead)
        case 42: try decoder.decodeSingularInt32Field(value: &_storage._bytesValue)
        case 43: try decoder.decodeSingularInt32Field(value: &_storage._c)
        case 44: try decoder.decodeSingularInt32Field(value: &_storage._capacity)
        case 45: try decoder.decodeSingularInt32Field(value: &_storage._capitalizeNext)
        case 46: try decoder.decodeSingularInt32Field(value: &_storage._cardinality)
        case 47: try decoder.decodeSingularInt32Field(value: &_storage._character)
        case 48: try decoder.decodeSingularInt32Field(value: &_storage._characters)
        case 49: try decoder.decodeSingularInt32Field(value: &_storage._chars)
        case 50: try decoder.decodeSingularInt32Field(value: &_storage._class)
        case 51: try decoder.decodeSingularInt32Field(value: &_storage._clearExtensionValue_p)
        case 52: try decoder.decodeSingularInt32Field(value: &_storage._clearSourceContext_p)
        case 53: try decoder.decodeSingularInt32Field(value: &_storage._clearValue_p)
        case 54: try decoder.decodeSingularInt32Field(value: &_storage._codeUnits)
        case 55: try decoder.decodeSingularInt32Field(value: &_storage._collection)
        case 56: try decoder.decodeSingularInt32Field(value: &_storage._com)
        case 57: try decoder.decodeSingularInt32Field(value: &_storage._comma)
        case 58: try decoder.decodeSingularInt32Field(value: &_storage._contentsOf)
        case 59: try decoder.decodeSingularInt32Field(value: &_storage._count)
        case 60: try decoder.decodeSingularInt32Field(value: &_storage._countVarintsInBuffer)
        case 61: try decoder.decodeSingularInt32Field(value: &_storage._customCodable)
        case 62: try decoder.decodeSingularInt32Field(value: &_storage._customDebugStringConvertible)
        case 63: try decoder.decodeSingularInt32Field(value: &_storage._d)
        case 64: try decoder.decodeSingularInt32Field(value: &_storage._data)
        case 65: try decoder.decodeSingularInt32Field(value: &_storage._dataPointer)
        case 66: try decoder.decodeSingularInt32Field(value: &_storage._dataResult)
        case 67: try decoder.decodeSingularInt32Field(value: &_storage._dataSize)
        case 68: try decoder.decodeSingularInt32Field(value: &_storage._date)
        case 69: try decoder.decodeSingularInt32Field(value: &_storage._daySec)
        case 70: try decoder.decodeSingularInt32Field(value: &_storage._daysSinceEpoch)
        case 71: try decoder.decodeSingularInt32Field(value: &_storage._debugDescription_p)
        case 72: try decoder.decodeSingularInt32Field(value: &_storage._decoded)
        case 73: try decoder.decodeSingularInt32Field(value: &_storage._decodedFromJsonnull)
        case 74: try decoder.decodeSingularInt32Field(value: &_storage._decodeExtensionField)
        case 75: try decoder.decodeSingularInt32Field(value: &_storage._decodeExtensionFieldsAsMessageSet)
        case 76: try decoder.decodeSingularInt32Field(value: &_storage._decodeJson)
        case 77: try decoder.decodeSingularInt32Field(value: &_storage._decodeMapField)
        case 78: try decoder.decodeSingularInt32Field(value: &_storage._decodeMessage)
        case 79: try decoder.decodeSingularInt32Field(value: &_storage._decoder)
        case 80: try decoder.decodeSingularInt32Field(value: &_storage._decodeRepeated)
        case 81: try decoder.decodeSingularInt32Field(value: &_storage._decodeRepeatedBoolField)
        case 82: try decoder.decodeSingularInt32Field(value: &_storage._decodeRepeatedBytesField)
        case 83: try decoder.decodeSingularInt32Field(value: &_storage._decodeRepeatedDoubleField)
        case 84: try decoder.decodeSingularInt32Field(value: &_storage._decodeRepeatedEnumField)
        case 85: try decoder.decodeSingularInt32Field(value: &_storage._decodeRepeatedFixed32Field)
        case 86: try decoder.decodeSingularInt32Field(value: &_storage._decodeRepeatedFixed64Field)
        case 87: try decoder.decodeSingularInt32Field(value: &_storage._decodeRepeatedFloatField)
        case 88: try decoder.decodeSingularInt32Field(value: &_storage._decodeRepeatedGroupField)
        case 89: try decoder.decodeSingularInt32Field(value: &_storage._decodeRepeatedInt32Field)
        case 90: try decoder.decodeSingularInt32Field(value: &_storage._decodeRepeatedInt64Field)
        case 91: try decoder.decodeSingularInt32Field(value: &_storage._decodeRepeatedMessageField)
        case 92: try decoder.decodeSingularInt32Field(value: &_storage._decodeRepeatedSfixed32Field)
        case 93: try decoder.decodeSingularInt32Field(value: &_storage._decodeRepeatedSfixed64Field)
        case 94: try decoder.decodeSingularInt32Field(value: &_storage._decodeRepeatedSint32Field)
        case 95: try decoder.decodeSingularInt32Field(value: &_storage._decodeRepeatedSint64Field)
        case 96: try decoder.decodeSingularInt32Field(value: &_storage._decodeRepeatedStringField)
        case 97: try decoder.decodeSingularInt32Field(value: &_storage._decodeRepeatedUint32Field)
        case 98: try decoder.decodeSingularInt32Field(value: &_storage._decodeRepeatedUint64Field)
        case 99: try decoder.decodeSingularInt32Field(value: &_storage._decodeSingular)
        case 100: try decoder.decodeSingularInt32Field(value: &_storage._decodeSingularBoolField)
        case 101: try decoder.decodeSingularInt32Field(value: &_storage._decodeSingularBytesField)
        case 102: try decoder.decodeSingularInt32Field(value: &_storage._decodeSingularDoubleField)
        case 103: try decoder.decodeSingularInt32Field(value: &_storage._decodeSingularEnumField)
        case 104: try decoder.decodeSingularInt32Field(value: &_storage._decodeSingularFixed32Field)
        case 105: try decoder.decodeSingularInt32Field(value: &_storage._decodeSingularFixed64Field)
        case 106: try decoder.decodeSingularInt32Field(value: &_storage._decodeSingularFloatField)
        case 107: try decoder.decodeSingularInt32Field(value: &_storage._decodeSingularGroupField)
        case 108: try decoder.decodeSingularInt32Field(value: &_storage._decodeSingularInt32Field)
        case 109: try decoder.decodeSingularInt32Field(value: &_storage._decodeSingularInt64Field)
        case 110: try decoder.decodeSingularInt32Field(value: &_storage._decodeSingularMessageField)
        case 111: try decoder.decodeSingularInt32Field(value: &_storage._decodeSingularSfixed32Field)
        case 112: try decoder.decodeSingularInt32Field(value: &_storage._decodeSingularSfixed64Field)
        case 113: try decoder.decodeSingularInt32Field(value: &_storage._decodeSingularSint32Field)
        case 114: try decoder.decodeSingularInt32Field(value: &_storage._decodeSingularSint64Field)
        case 115: try decoder.decodeSingularInt32Field(value: &_storage._decodeSingularStringField)
        case 116: try decoder.decodeSingularInt32Field(value: &_storage._decodeSingularUint32Field)
        case 117: try decoder.decodeSingularInt32Field(value: &_storage._decodeSingularUint64Field)
        case 118: try decoder.decodeSingularInt32Field(value: &_storage._decodeTextFormat)
        case 119: try decoder.decodeSingularInt32Field(value: &_storage._defaultAnyTypeUrlprefix)
        case 120: try decoder.decodeSingularInt32Field(value: &_storage._defaultValue)
        case 121: try decoder.decodeSingularInt32Field(value: &_storage._description_p)
        case 122: try decoder.decodeSingularInt32Field(value: &_storage._dictionary)
        case 123: try decoder.decodeSingularInt32Field(value: &_storage._dictionaryLiteral)
        case 124: try decoder.decodeSingularInt32Field(value: &_storage._digit)
        case 125: try decoder.decodeSingularInt32Field(value: &_storage._digit0)
        case 126: try decoder.decodeSingularInt32Field(value: &_storage._digit1)
        case 127: try decoder.decodeSingularInt32Field(value: &_storage._digitCount)
        case 128: try decoder.decodeSingularInt32Field(value: &_storage._digits)
        case 129: try decoder.decodeSingularInt32Field(value: &_storage._digitValue)
        case 130: try decoder.decodeSingularInt32Field(value: &_storage._discardableResult)
        case 131: try decoder.decodeSingularInt32Field(value: &_storage._discardUnknownFields)
        case 132: try decoder.decodeSingularInt32Field(value: &_storage._distance)
        case 133: try decoder.decodeSingularInt32Field(value: &_storage._double)
        case 134: try decoder.decodeSingularInt32Field(value: &_storage._doubleToUtf8)
        case 135: try decoder.decodeSingularInt32Field(value: &_storage._doubleValue)
        case 136: try decoder.decodeSingularInt32Field(value: &_storage._duration)
        case 137: try decoder.decodeSingularInt32Field(value: &_storage._e)
        case 138: try decoder.decodeSingularInt32Field(value: &_storage._element)
        case 139: try decoder.decodeSingularInt32Field(value: &_storage._elements)
        case 140: try decoder.decodeSingularInt32Field(value: &_storage._emitExtensionFieldName)
        case 141: try decoder.decodeSingularInt32Field(value: &_storage._emitFieldName)
        case 142: try decoder.decodeSingularInt32Field(value: &_storage._emitFieldNumber)
        case 143: try decoder.decodeSingularInt32Field(value: &_storage._empty)
        case 144: try decoder.decodeSingularInt32Field(value: &_storage._emptyData)
        case 145: try decoder.decodeSingularInt32Field(value: &_storage._encoded)
        case 146: try decoder.decodeSingularInt32Field(value: &_storage._encodedJsonstring)
        case 147: try decoder.decodeSingularInt32Field(value: &_storage._encodedSize)
        case 148: try decoder.decodeSingularInt32Field(value: &_storage._encodeField)
        case 149: try decoder.decodeSingularInt32Field(value: &_storage._encoder)
        case 150: try decoder.decodeSingularInt32Field(value: &_storage._end)
        case 151: try decoder.decodeSingularInt32Field(value: &_storage._endArray)
        case 152: try decoder.decodeSingularInt32Field(value: &_storage._endMessageField)
        case 153: try decoder.decodeSingularInt32Field(value: &_storage._endObject)
        case 154: try decoder.decodeSingularInt32Field(value: &_storage._endRegularField)
        case 155: try decoder.decodeSingularInt32Field(value: &_storage._enum)
        case 156: try decoder.decodeSingularInt32Field(value: &_storage._enumvalue)
        case 157: try decoder.decodeSingularInt32Field(value: &_storage._equatable)
        case 158: try decoder.decodeSingularInt32Field(value: &_storage._error)
        case 159: try decoder.decodeSingularInt32Field(value: &_storage._expressibleByArrayLiteral)
        case 160: try decoder.decodeSingularInt32Field(value: &_storage._expressibleByDictionaryLiteral)
        case 161: try decoder.decodeSingularInt32Field(value: &_storage._ext)
        case 162: try decoder.decodeSingularInt32Field(value: &_storage._extDecoder)
        case 163: try decoder.decodeSingularInt32Field(value: &_storage._extendedGraphemeClusterLiteral)
        case 164: try decoder.decodeSingularInt32Field(value: &_storage._extendedGraphemeClusterLiteralType)
        case 165: try decoder.decodeSingularInt32Field(value: &_storage._extensibleMessage)
        case 166: try decoder.decodeSingularInt32Field(value: &_storage._extension)
        case 167: try decoder.decodeSingularInt32Field(value: &_storage._extensionField)
        case 168: try decoder.decodeSingularInt32Field(value: &_storage._extensionFieldNumber)
        case 169: try decoder.decodeSingularInt32Field(value: &_storage._extensionFieldValueSet)
        case 170: try decoder.decodeSingularInt32Field(value: &_storage._extensionMap)
        case 171: try decoder.decodeSingularInt32Field(value: &_storage._extensions)
        case 172: try decoder.decodeSingularInt32Field(value: &_storage._extras)
        case 173: try decoder.decodeSingularInt32Field(value: &_storage._f)
        case 174: try decoder.decodeSingularInt32Field(value: &_storage._false)
        case 175: try decoder.decodeSingularInt32Field(value: &_storage._field)
        case 176: try decoder.decodeSingularInt32Field(value: &_storage._fieldData)
        case 177: try decoder.decodeSingularInt32Field(value: &_storage._fieldMask)
        case 178: try decoder.decodeSingularInt32Field(value: &_storage._fieldName)
        case 179: try decoder.decodeSingularInt32Field(value: &_storage._fieldNameCount)
        case 180: try decoder.decodeSingularInt32Field(value: &_storage._fieldNum)
        case 181: try decoder.decodeSingularInt32Field(value: &_storage._fieldNumber)
        case 182: try decoder.decodeSingularInt32Field(value: &_storage._fieldNumberForProto)
        case 183: try decoder.decodeSingularInt32Field(value: &_storage._fields)
        case 184: try decoder.decodeSingularInt32Field(value: &_storage._fieldSize)
        case 185: try decoder.decodeSingularInt32Field(value: &_storage._fieldTag)
        case 186: try decoder.decodeSingularInt32Field(value: &_storage._fieldType)
        case 187: try decoder.decodeSingularInt32Field(value: &_storage._fieldValue)
        case 188: try decoder.decodeSingularInt32Field(value: &_storage._fileName)
        case 189: try decoder.decodeSingularInt32Field(value: &_storage._filter)
        case 190: try decoder.decodeSingularInt32Field(value: &_storage._firstItem)
        case 191: try decoder.decodeSingularInt32Field(value: &_storage._float)
        case 192: try decoder.decodeSingularInt32Field(value: &_storage._floatLiteral)
        case 193: try decoder.decodeSingularInt32Field(value: &_storage._floatLiteralType)
        case 194: try decoder.decodeSingularInt32Field(value: &_storage._floatToUtf8)
        case 195: try decoder.decodeSingularInt32Field(value: &_storage._floatValue)
        case 196: try decoder.decodeSingularInt32Field(value: &_storage._forMessageName)
        case 197: try decoder.decodeSingularInt32Field(value: &_storage._formUnion)
        case 198: try decoder.decodeSingularInt32Field(value: &_storage._forReadingFrom)
        case 199: try decoder.decodeSingularInt32Field(value: &_storage._forTypeURL)
        case 200: try decoder.decodeSingularInt32Field(value: &_storage._forwardParser)
        case 201: try decoder.decodeSingularInt32Field(value: &_storage._forWritingInto)
        case 202: try decoder.decodeSingularInt32Field(value: &_storage._from)
        case 203: try decoder.decodeSingularInt32Field(value: &_storage._fromAscii2)
        case 204: try decoder.decodeSingularInt32Field(value: &_storage._fromAscii4)
        case 205: try decoder.decodeSingularInt32Field(value: &_storage._fromHexDigit)
        case 206: try decoder.decodeSingularInt32Field(value: &_storage._func)
        case 207: try decoder.decodeSingularInt32Field(value: &_storage._g)
        case 208: try decoder.decodeSingularInt32Field(value: &_storage._get)
        case 209: try decoder.decodeSingularInt32Field(value: &_storage._getExtensionValue)
        case 210: try decoder.decodeSingularInt32Field(value: &_storage._googleapis)
        case 211: try decoder.decodeSingularInt32Field(value: &_storage._googleProtobufAny)
        case 212: try decoder.decodeSingularInt32Field(value: &_storage._googleProtobufApi)
        case 213: try decoder.decodeSingularInt32Field(value: &_storage._googleProtobufBoolValue)
        case 214: try decoder.decodeSingularInt32Field(value: &_storage._googleProtobufBytesValue)
        case 215: try decoder.decodeSingularInt32Field(value: &_storage._googleProtobufDoubleValue)
        case 216: try decoder.decodeSingularInt32Field(value: &_storage._googleProtobufDuration)
        case 217: try decoder.decodeSingularInt32Field(value: &_storage._googleProtobufEmpty)
        case 218: try decoder.decodeSingularInt32Field(value: &_storage._googleProtobufEnum)
        case 219: try decoder.decodeSingularInt32Field(value: &_storage._googleProtobufEnumValue)
        case 220: try decoder.decodeSingularInt32Field(value: &_storage._googleProtobufField)
        case 221: try decoder.decodeSingularInt32Field(value: &_storage._googleProtobufFieldMask)
        case 222: try decoder.decodeSingularInt32Field(value: &_storage._googleProtobufFloatValue)
        case 223: try decoder.decodeSingularInt32Field(value: &_storage._googleProtobufInt32Value)
        case 224: try decoder.decodeSingularInt32Field(value: &_storage._googleProtobufInt64Value)
        case 225: try decoder.decodeSingularInt32Field(value: &_storage._googleProtobufListValue)
        case 226: try decoder.decodeSingularInt32Field(value: &_storage._googleProtobufMethod)
        case 227: try decoder.decodeSingularInt32Field(value: &_storage._googleProtobufMixin)
        case 228: try decoder.decodeSingularInt32Field(value: &_storage._googleProtobufNullValue)
        case 229: try decoder.decodeSingularInt32Field(value: &_storage._googleProtobufOption)
        case 230: try decoder.decodeSingularInt32Field(value: &_storage._googleProtobufSourceContext)
        case 231: try decoder.decodeSingularInt32Field(value: &_storage._googleProtobufStringValue)
        case 232: try decoder.decodeSingularInt32Field(value: &_storage._googleProtobufStruct)
        case 233: try decoder.decodeSingularInt32Field(value: &_storage._googleProtobufSyntax)
        case 234: try decoder.decodeSingularInt32Field(value: &_storage._googleProtobufTimestamp)
        case 235: try decoder.decodeSingularInt32Field(value: &_storage._googleProtobufType)
        case 236: try decoder.decodeSingularInt32Field(value: &_storage._googleProtobufUint32Value)
        case 237: try decoder.decodeSingularInt32Field(value: &_storage._googleProtobufUint64Value)
        case 238: try decoder.decodeSingularInt32Field(value: &_storage._googleProtobufValue)
        case 239: try decoder.decodeSingularInt32Field(value: &_storage._group)
        case 240: try decoder.decodeSingularInt32Field(value: &_storage._groupSize)
        case 241: try decoder.decodeSingularInt32Field(value: &_storage._h)
        case 242: try decoder.decodeSingularInt32Field(value: &_storage._handleConflictingOneOf)
        case 243: try decoder.decodeSingularInt32Field(value: &_storage._hasExtensionValue_p)
        case 244: try decoder.decodeSingularInt32Field(value: &_storage._hash)
        case 245: try decoder.decodeSingularInt32Field(value: &_storage._hashable)
        case 246: try decoder.decodeSingularInt32Field(value: &_storage._hashValue_p)
        case 247: try decoder.decodeSingularInt32Field(value: &_storage._hashVisitor)
        case 248: try decoder.decodeSingularInt32Field(value: &_storage._hasSourceContext_p)
        case 249: try decoder.decodeSingularInt32Field(value: &_storage._hasValue_p)
        case 250: try decoder.decodeSingularInt32Field(value: &_storage._hour)
        case 251: try decoder.decodeSingularInt32Field(value: &_storage._i)
        case 252: try decoder.decodeSingularInt32Field(value: &_storage._index)
        case 253: try decoder.decodeSingularInt32Field(value: &_storage._init_p)
        case 254: try decoder.decodeSingularInt32Field(value: &_storage._inout)
        case 255: try decoder.decodeSingularInt32Field(value: &_storage._insert)
        case 256: try decoder.decodeSingularInt32Field(value: &_storage._int)
        case 257: try decoder.decodeSingularInt32Field(value: &_storage._int32)
        case 258: try decoder.decodeSingularInt32Field(value: &_storage._int32Value)
        case 259: try decoder.decodeSingularInt32Field(value: &_storage._int64)
        case 260: try decoder.decodeSingularInt32Field(value: &_storage._int64Value)
        case 261: try decoder.decodeSingularInt32Field(value: &_storage._int8)
        case 262: try decoder.decodeSingularInt32Field(value: &_storage._integerLiteral)
        case 263: try decoder.decodeSingularInt32Field(value: &_storage._integerLiteralType)
        case 264: try decoder.decodeSingularInt32Field(value: &_storage._intern)
        case 265: try decoder.decodeSingularInt32Field(value: &_storage._internal)
        case 266: try decoder.decodeSingularInt32Field(value: &_storage._internalState)
        case 267: try decoder.decodeSingularInt32Field(value: &_storage._ints)
        case 268: try decoder.decodeSingularInt32Field(value: &_storage._isA)
        case 269: try decoder.decodeSingularInt32Field(value: &_storage._isEqual)
        case 270: try decoder.decodeSingularInt32Field(value: &_storage._isEqualTo)
        case 271: try decoder.decodeSingularInt32Field(value: &_storage._isInitialized_p)
        case 272: try decoder.decodeSingularInt32Field(value: &_storage._it)
        case 273: try decoder.decodeSingularInt32Field(value: &_storage._itemTagsEncodedSize)
        case 274: try decoder.decodeSingularInt32Field(value: &_storage._iterator)
        case 275: try decoder.decodeSingularInt32Field(value: &_storage._i2166136261)
        case 276: try decoder.decodeSingularInt32Field(value: &_storage._jsondecoder)
        case 277: try decoder.decodeSingularInt32Field(value: &_storage._jsondecodingError)
        case 278: try decoder.decodeSingularInt32Field(value: &_storage._jsondecodingOptions)
        case 279: try decoder.decodeSingularInt32Field(value: &_storage._jsonEncoder)
        case 280: try decoder.decodeSingularInt32Field(value: &_storage._jsonencodingError)
        case 281: try decoder.decodeSingularInt32Field(value: &_storage._jsonencodingVisitor)
        case 282: try decoder.decodeSingularInt32Field(value: &_storage._jsonmapEncodingVisitor)
        case 283: try decoder.decodeSingularInt32Field(value: &_storage._jsonName)
        case 284: try decoder.decodeSingularInt32Field(value: &_storage._jsonPath)
        case 285: try decoder.decodeSingularInt32Field(value: &_storage._jsonPaths)
        case 286: try decoder.decodeSingularInt32Field(value: &_storage._jsonscanner)
        case 287: try decoder.decodeSingularInt32Field(value: &_storage._jsonString)
        case 288: try decoder.decodeSingularInt32Field(value: &_storage._jsonText)
        case 289: try decoder.decodeSingularInt32Field(value: &_storage._jsonUtf8Data)
        case 290: try decoder.decodeSingularInt32Field(value: &_storage._k)
        case 291: try decoder.decodeSingularInt32Field(value: &_storage._key)
        case 292: try decoder.decodeSingularInt32Field(value: &_storage._keyField)
        case 293: try decoder.decodeSingularInt32Field(value: &_storage._keyType)
        case 294: try decoder.decodeSingularInt32Field(value: &_storage._kind)
        case 295: try decoder.decodeSingularInt32Field(value: &_storage._l)
        case 296: try decoder.decodeSingularInt32Field(value: &_storage._length)
        case 297: try decoder.decodeSingularInt32Field(value: &_storage._let)
        case 298: try decoder.decodeSingularInt32Field(value: &_storage._lhs)
        case 299: try decoder.decodeSingularInt32Field(value: &_storage._list)
        case 300: try decoder.decodeSingularInt32Field(value: &_storage._listOfMessages)
        case 301: try decoder.decodeSingularInt32Field(value: &_storage._listValue)
        case 302: try decoder.decodeSingularInt32Field(value: &_storage._littleEndian)
        case 303: try decoder.decodeSingularInt32Field(value: &_storage._littleEndianBytes)
        case 304: try decoder.decodeSingularInt32Field(value: &_storage._m)
        case 305: try decoder.decodeSingularInt32Field(value: &_storage._major)
        case 306: try decoder.decodeSingularInt32Field(value: &_storage._makeIterator)
        case 307: try decoder.decodeSingularInt32Field(value: &_storage._mapHash)
        case 308: try decoder.decodeSingularInt32Field(value: &_storage._mapKeyType)
        case 309: try decoder.decodeSingularInt32Field(value: &_storage._mapNameResolver)
        case 310: try decoder.decodeSingularInt32Field(value: &_storage._mapToMessages)
        case 311: try decoder.decodeSingularInt32Field(value: &_storage._mapValueType)
        case 312: try decoder.decodeSingularInt32Field(value: &_storage._mapVisitor)
        case 313: try decoder.decodeSingularInt32Field(value: &_storage._mdayStart)
        case 314: try decoder.decodeSingularInt32Field(value: &_storage._merge)
        case 315: try decoder.decodeSingularInt32Field(value: &_storage._message)
        case 316: try decoder.decodeSingularInt32Field(value: &_storage._messageDepthLimit)
        case 317: try decoder.decodeSingularInt32Field(value: &_storage._messageExtension)
        case 318: try decoder.decodeSingularInt32Field(value: &_storage._messageImplementationBase)
        case 319: try decoder.decodeSingularInt32Field(value: &_storage._messageSet)
        case 320: try decoder.decodeSingularInt32Field(value: &_storage._messageType)
        case 321: try decoder.decodeSingularInt32Field(value: &_storage._method)
        case 322: try decoder.decodeSingularInt32Field(value: &_storage._methods)
        case 323: try decoder.decodeSingularInt32Field(value: &_storage._minor)
        case 324: try decoder.decodeSingularInt32Field(value: &_storage._mixin)
        case 325: try decoder.decodeSingularInt32Field(value: &_storage._mixins)
        case 326: try decoder.decodeSingularInt32Field(value: &_storage._month)
        case 327: try decoder.decodeSingularInt32Field(value: &_storage._msgExtension)
        case 328: try decoder.decodeSingularInt32Field(value: &_storage._mutating)
        case 329: try decoder.decodeSingularInt32Field(value: &_storage._n)
        case 330: try decoder.decodeSingularInt32Field(value: &_storage._name)
        case 331: try decoder.decodeSingularInt32Field(value: &_storage._nameDescription)
        case 332: try decoder.decodeSingularInt32Field(value: &_storage._nameMap)
        case 333: try decoder.decodeSingularInt32Field(value: &_storage._nameResolver)
        case 334: try decoder.decodeSingularInt32Field(value: &_storage._names)
        case 335: try decoder.decodeSingularInt32Field(value: &_storage._nanos)
        case 336: try decoder.decodeSingularInt32Field(value: &_storage._nativeBytes)
        case 337: try decoder.decodeSingularInt32Field(value: &_storage._nativeEndianBytes)
        case 338: try decoder.decodeSingularInt32Field(value: &_storage._newL)
        case 339: try decoder.decodeSingularInt32Field(value: &_storage._newList)
        case 340: try decoder.decodeSingularInt32Field(value: &_storage._newValue)
        case 341: try decoder.decodeSingularInt32Field(value: &_storage._nextByte)
        case 342: try decoder.decodeSingularInt32Field(value: &_storage._nextFieldNumber)
        case 343: try decoder.decodeSingularInt32Field(value: &_storage._nil)
        case 344: try decoder.decodeSingularInt32Field(value: &_storage._nilLiteral)
        case 345: try decoder.decodeSingularInt32Field(value: &_storage._nullValue)
        case 346: try decoder.decodeSingularInt32Field(value: &_storage._number)
        case 347: try decoder.decodeSingularInt32Field(value: &_storage._numberValue)
        case 348: try decoder.decodeSingularInt32Field(value: &_storage._of)
        case 349: try decoder.decodeSingularInt32Field(value: &_storage._oneofIndex)
        case 350: try decoder.decodeSingularInt32Field(value: &_storage._oneofs)
        case 351: try decoder.decodeSingularInt32Field(value: &_storage._oneOfKind)
        case 352: try decoder.decodeSingularInt32Field(value: &_storage._option)
        case 353: try decoder.decodeSingularInt32Field(value: &_storage._optionalEnumExtensionField)
        case 354: try decoder.decodeSingularInt32Field(value: &_storage._optionalExtensionField)
        case 355: try decoder.decodeSingularInt32Field(value: &_storage._optionalGroupExtensionField)
        case 356: try decoder.decodeSingularInt32Field(value: &_storage._optionalMessageExtensionField)
        case 357: try decoder.decodeSingularInt32Field(value: &_storage._options)
        case 358: try decoder.decodeSingularInt32Field(value: &_storage._other)
        case 359: try decoder.decodeSingularInt32Field(value: &_storage._others)
        case 360: try decoder.decodeSingularInt32Field(value: &_storage._out)
        case 361: try decoder.decodeSingularInt32Field(value: &_storage._output)
        case 362: try decoder.decodeSingularInt32Field(value: &_storage._p)
        case 363: try decoder.decodeSingularInt32Field(value: &_storage._packed)
        case 364: try decoder.decodeSingularInt32Field(value: &_storage._packedEnumExtensionField)
        case 365: try decoder.decodeSingularInt32Field(value: &_storage._packedExtensionField)
        case 366: try decoder.decodeSingularInt32Field(value: &_storage._packedSize)
        case 367: try decoder.decodeSingularInt32Field(value: &_storage._padding)
        case 368: try decoder.decodeSingularInt32Field(value: &_storage._parent)
        case 369: try decoder.decodeSingularInt32Field(value: &_storage._parse)
        case 370: try decoder.decodeSingularInt32Field(value: &_storage._partial)
        case 371: try decoder.decodeSingularInt32Field(value: &_storage._path)
        case 372: try decoder.decodeSingularInt32Field(value: &_storage._paths)
        case 373: try decoder.decodeSingularInt32Field(value: &_storage._payload)
        case 374: try decoder.decodeSingularInt32Field(value: &_storage._payloadSize)
        case 375: try decoder.decodeSingularInt32Field(value: &_storage._pointer)
        case 376: try decoder.decodeSingularInt32Field(value: &_storage._pos)
        case 377: try decoder.decodeSingularInt32Field(value: &_storage._prefix)
        case 378: try decoder.decodeSingularInt32Field(value: &_storage._preTraverse)
        case 379: try decoder.decodeSingularInt32Field(value: &_storage._proto2)
        case 380: try decoder.decodeSingularInt32Field(value: &_storage._proto3DefaultValue)
        case 381: try decoder.decodeSingularInt32Field(value: &_storage._protobufApiversionCheck)
        case 382: try decoder.decodeSingularInt32Field(value: &_storage._protobufApiversion2)
        case 383: try decoder.decodeSingularInt32Field(value: &_storage._protobufBool)
        case 384: try decoder.decodeSingularInt32Field(value: &_storage._protobufBytes)
        case 385: try decoder.decodeSingularInt32Field(value: &_storage._protobufDouble)
        case 386: try decoder.decodeSingularInt32Field(value: &_storage._protobufEnumMap)
        case 387: try decoder.decodeSingularInt32Field(value: &_storage._protobufExtension)
        case 388: try decoder.decodeSingularInt32Field(value: &_storage._protobufFixed32)
        case 389: try decoder.decodeSingularInt32Field(value: &_storage._protobufFixed64)
        case 390: try decoder.decodeSingularInt32Field(value: &_storage._protobufFloat)
        case 391: try decoder.decodeSingularInt32Field(value: &_storage._protobufInt32)
        case 392: try decoder.decodeSingularInt32Field(value: &_storage._protobufInt64)
        case 393: try decoder.decodeSingularInt32Field(value: &_storage._protobufMap)
        case 394: try decoder.decodeSingularInt32Field(value: &_storage._protobufMessageMap)
        case 395: try decoder.decodeSingularInt32Field(value: &_storage._protobufSfixed32)
        case 396: try decoder.decodeSingularInt32Field(value: &_storage._protobufSfixed64)
        case 397: try decoder.decodeSingularInt32Field(value: &_storage._protobufSint32)
        case 398: try decoder.decodeSingularInt32Field(value: &_storage._protobufSint64)
        case 399: try decoder.decodeSingularInt32Field(value: &_storage._protobufString)
        case 400: try decoder.decodeSingularInt32Field(value: &_storage._protobufUint32)
        case 401: try decoder.decodeSingularInt32Field(value: &_storage._protobufUint64)
        case 402: try decoder.decodeSingularInt32Field(value: &_storage._protobufExtensionFieldValues)
        case 403: try decoder.decodeSingularInt32Field(value: &_storage._protobufFieldNumber)
        case 404: try decoder.decodeSingularInt32Field(value: &_storage._protobufGeneratedIsEqualTo)
        case 405: try decoder.decodeSingularInt32Field(value: &_storage._protobufNameMap)
        case 406: try decoder.decodeSingularInt32Field(value: &_storage._protobufNewField)
        case 407: try decoder.decodeSingularInt32Field(value: &_storage._protobufPackage)
        case 408: try decoder.decodeSingularInt32Field(value: &_storage._protocol)
        case 409: try decoder.decodeSingularInt32Field(value: &_storage._protoFieldName)
        case 410: try decoder.decodeSingularInt32Field(value: &_storage._protoMessageName)
        case 411: try decoder.decodeSingularInt32Field(value: &_storage._protoNameProviding)
        case 412: try decoder.decodeSingularInt32Field(value: &_storage._protoPaths)
        case 413: try decoder.decodeSingularInt32Field(value: &_storage._public)
        case 414: try decoder.decodeSingularInt32Field(value: &_storage._putBoolValue)
        case 415: try decoder.decodeSingularInt32Field(value: &_storage._putBytesValue)
        case 416: try decoder.decodeSingularInt32Field(value: &_storage._putDoubleValue)
        case 417: try decoder.decodeSingularInt32Field(value: &_storage._putEnumValue)
        case 418: try decoder.decodeSingularInt32Field(value: &_storage._putFixedUint32)
        case 419: try decoder.decodeSingularInt32Field(value: &_storage._putFixedUint64)
        case 420: try decoder.decodeSingularInt32Field(value: &_storage._putFloatValue)
        case 421: try decoder.decodeSingularInt32Field(value: &_storage._putInt64)
        case 422: try decoder.decodeSingularInt32Field(value: &_storage._putStringValue)
        case 423: try decoder.decodeSingularInt32Field(value: &_storage._putUint64)
        case 424: try decoder.decodeSingularInt32Field(value: &_storage._putUint64Hex)
        case 425: try decoder.decodeSingularInt32Field(value: &_storage._putVarInt)
        case 426: try decoder.decodeSingularInt32Field(value: &_storage._putZigZagVarInt)
        case 427: try decoder.decodeSingularInt32Field(value: &_storage._rawChars)
        case 428: try decoder.decodeSingularInt32Field(value: &_storage._rawRepresentable)
        case 429: try decoder.decodeSingularInt32Field(value: &_storage._rawValue)
        case 430: try decoder.decodeSingularInt32Field(value: &_storage._readBuffer)
        case 431: try decoder.decodeSingularInt32Field(value: &_storage._register)
        case 432: try decoder.decodeSingularInt32Field(value: &_storage._repeatedEnumExtensionField)
        case 433: try decoder.decodeSingularInt32Field(value: &_storage._repeatedExtensionField)
        case 434: try decoder.decodeSingularInt32Field(value: &_storage._repeatedGroupExtensionField)
        case 435: try decoder.decodeSingularInt32Field(value: &_storage._repeatedMessageExtensionField)
        case 436: try decoder.decodeSingularInt32Field(value: &_storage._requestStreaming)
        case 437: try decoder.decodeSingularInt32Field(value: &_storage._requestTypeURL)
        case 438: try decoder.decodeSingularInt32Field(value: &_storage._requiredSize)
        case 439: try decoder.decodeSingularInt32Field(value: &_storage._responseStreaming)
        case 440: try decoder.decodeSingularInt32Field(value: &_storage._responseTypeURL)
        case 441: try decoder.decodeSingularInt32Field(value: &_storage._result)
        case 442: try decoder.decodeSingularInt32Field(value: &_storage._return)
        case 443: try decoder.decodeSingularInt32Field(value: &_storage._revision)
        case 444: try decoder.decodeSingularInt32Field(value: &_storage._rhs)
        case 445: try decoder.decodeSingularInt32Field(value: &_storage._root)
        case 446: try decoder.decodeSingularInt32Field(value: &_storage._s)
        case 447: try decoder.decodeSingularInt32Field(value: &_storage._sawBackslash)
        case 448: try decoder.decodeSingularInt32Field(value: &_storage._sawSection4Characters)
        case 449: try decoder.decodeSingularInt32Field(value: &_storage._sawSection5Characters)
        case 450: try decoder.decodeSingularInt32Field(value: &_storage._scanner)
        case 451: try decoder.decodeSingularInt32Field(value: &_storage._seconds)
        case 452: try decoder.decodeSingularInt32Field(value: &_storage._self_p)
        case 453: try decoder.decodeSingularInt32Field(value: &_storage._separator)
        case 454: try decoder.decodeSingularInt32Field(value: &_storage._serialize)
        case 455: try decoder.decodeSingularInt32Field(value: &_storage._serializedData)
        case 456: try decoder.decodeSingularInt32Field(value: &_storage._serializedSize)
        case 457: try decoder.decodeSingularInt32Field(value: &_storage._set)
        case 458: try decoder.decodeSingularInt32Field(value: &_storage._setExtensionValue)
        case 459: try decoder.decodeSingularInt32Field(value: &_storage._shift)
        case 460: try decoder.decodeSingularInt32Field(value: &_storage._simpleExtensionMap)
        case 461: try decoder.decodeSingularInt32Field(value: &_storage._sizer)
        case 462: try decoder.decodeSingularInt32Field(value: &_storage._source)
        case 463: try decoder.decodeSingularInt32Field(value: &_storage._sourceContext)
        case 464: try decoder.decodeSingularInt32Field(value: &_storage._sourceEncoding)
        case 465: try decoder.decodeSingularInt32Field(value: &_storage._split)
        case 466: try decoder.decodeSingularInt32Field(value: &_storage._start)
        case 467: try decoder.decodeSingularInt32Field(value: &_storage._startArray)
        case 468: try decoder.decodeSingularInt32Field(value: &_storage._startField)
        case 469: try decoder.decodeSingularInt32Field(value: &_storage._startIndex)
        case 470: try decoder.decodeSingularInt32Field(value: &_storage._startMessageField)
        case 471: try decoder.decodeSingularInt32Field(value: &_storage._startObject)
        case 472: try decoder.decodeSingularInt32Field(value: &_storage._startRegularField)
        case 473: try decoder.decodeSingularInt32Field(value: &_storage._state)
        case 474: try decoder.decodeSingularInt32Field(value: &_storage._static)
        case 475: try decoder.decodeSingularInt32Field(value: &_storage._staticString)
        case 476: try decoder.decodeSingularInt32Field(value: &_storage._storage)
        case 477: try decoder.decodeSingularInt32Field(value: &_storage._string)
        case 478: try decoder.decodeSingularInt32Field(value: &_storage._stringLiteral)
        case 479: try decoder.decodeSingularInt32Field(value: &_storage._stringLiteralType)
        case 480: try decoder.decodeSingularInt32Field(value: &_storage._stringResult)
        case 481: try decoder.decodeSingularInt32Field(value: &_storage._stringValue)
        case 482: try decoder.decodeSingularInt32Field(value: &_storage._struct)
        case 483: try decoder.decodeSingularInt32Field(value: &_storage._structValue)
        case 484: try decoder.decodeSingularInt32Field(value: &_storage._subDecoder)
        case 485: try decoder.decodeSingularInt32Field(value: &_storage._subscript)
        case 486: try decoder.decodeSingularInt32Field(value: &_storage._subVisitor)
        case 487: try decoder.decodeSingularInt32Field(value: &_storage._swift)
        case 488: try decoder.decodeSingularInt32Field(value: &_storage._swiftProtobuf)
        case 489: try decoder.decodeSingularInt32Field(value: &_storage._syntax)
        case 490: try decoder.decodeSingularInt32Field(value: &_storage._t)
        case 491: try decoder.decodeSingularInt32Field(value: &_storage._tag)
        case 492: try decoder.decodeSingularInt32Field(value: &_storage._terminator)
        case 493: try decoder.decodeSingularInt32Field(value: &_storage._testDecoder)
        case 494: try decoder.decodeSingularInt32Field(value: &_storage._text)
        case 495: try decoder.decodeSingularInt32Field(value: &_storage._textDecoder)
        case 496: try decoder.decodeSingularInt32Field(value: &_storage._textFormatDecoder)
        case 497: try decoder.decodeSingularInt32Field(value: &_storage._textFormatDecodingError)
        case 498: try decoder.decodeSingularInt32Field(value: &_storage._textFormatEncodingVisitor)
        case 499: try decoder.decodeSingularInt32Field(value: &_storage._textFormatString)
        case 500: try decoder.decodeSingularInt32Field(value: &_storage._throws)
        case 501: try decoder.decodeSingularInt32Field(value: &_storage._timeInterval)
        case 502: try decoder.decodeSingularInt32Field(value: &_storage._timeIntervalSince1970)
        case 503: try decoder.decodeSingularInt32Field(value: &_storage._timeIntervalSinceReferenceDate)
        case 504: try decoder.decodeSingularInt32Field(value: &_storage._timestamp)
        case 505: try decoder.decodeSingularInt32Field(value: &_storage._total)
        case 506: try decoder.decodeSingularInt32Field(value: &_storage._totalSize)
        case 507: try decoder.decodeSingularInt32Field(value: &_storage._traverse)
        case 508: try decoder.decodeSingularInt32Field(value: &_storage._true)
        case 509: try decoder.decodeSingularInt32Field(value: &_storage._try)
        case 510: try decoder.decodeSingularInt32Field(value: &_storage._type)
        case 511: try decoder.decodeSingularInt32Field(value: &_storage._typealias)
        case 512: try decoder.decodeSingularInt32Field(value: &_storage._typePrefix)
        case 513: try decoder.decodeSingularInt32Field(value: &_storage._typeStart)
        case 514: try decoder.decodeSingularInt32Field(value: &_storage._typeUnknown)
        case 515: try decoder.decodeSingularInt32Field(value: &_storage._typeURL)
        case 516: try decoder.decodeSingularInt32Field(value: &_storage._uint32)
        case 517: try decoder.decodeSingularInt32Field(value: &_storage._uint32Value)
        case 518: try decoder.decodeSingularInt32Field(value: &_storage._uint64)
        case 519: try decoder.decodeSingularInt32Field(value: &_storage._uint64Value)
        case 520: try decoder.decodeSingularInt32Field(value: &_storage._uint8)
        case 521: try decoder.decodeSingularInt32Field(value: &_storage._unicodeScalarLiteral)
        case 522: try decoder.decodeSingularInt32Field(value: &_storage._unicodeScalarLiteralType)
        case 523: try decoder.decodeSingularInt32Field(value: &_storage._unicodeScalars)
        case 524: try decoder.decodeSingularInt32Field(value: &_storage._unicodeScalarView)
        case 525: try decoder.decodeSingularInt32Field(value: &_storage._union)
        case 526: try decoder.decodeSingularInt32Field(value: &_storage._unknown)
        case 527: try decoder.decodeSingularInt32Field(value: &_storage._unknownFields_p)
        case 528: try decoder.decodeSingularInt32Field(value: &_storage._unknownStorage)
        case 529: try decoder.decodeSingularInt32Field(value: &_storage._unpackTo)
        case 530: try decoder.decodeSingularInt32Field(value: &_storage._unsafeBufferPointer)
        case 531: try decoder.decodeSingularInt32Field(value: &_storage._unsafeMutablePointer)
        case 532: try decoder.decodeSingularInt32Field(value: &_storage._unsafePointer)
        case 533: try decoder.decodeSingularInt32Field(value: &_storage._updatedOptions)
        case 534: try decoder.decodeSingularInt32Field(value: &_storage._url)
        case 535: try decoder.decodeSingularInt32Field(value: &_storage._utf8)
        case 536: try decoder.decodeSingularInt32Field(value: &_storage._utf8Codec)
        case 537: try decoder.decodeSingularInt32Field(value: &_storage._utf8ToDouble)
        case 538: try decoder.decodeSingularInt32Field(value: &_storage._utf8View)
        case 539: try decoder.decodeSingularInt32Field(value: &_storage._v)
        case 540: try decoder.decodeSingularInt32Field(value: &_storage._value)
        case 541: try decoder.decodeSingularInt32Field(value: &_storage._valueField)
        case 542: try decoder.decodeSingularInt32Field(value: &_storage._values)
        case 543: try decoder.decodeSingularInt32Field(value: &_storage._valueType)
        case 544: try decoder.decodeSingularInt32Field(value: &_storage._var)
        case 545: try decoder.decodeSingularInt32Field(value: &_storage._version)
        case 546: try decoder.decodeSingularInt32Field(value: &_storage._versionString)
        case 547: try decoder.decodeSingularInt32Field(value: &_storage._visitExtensionFields)
        case 548: try decoder.decodeSingularInt32Field(value: &_storage._visitExtensionFieldsAsMessageSet)
        case 549: try decoder.decodeSingularInt32Field(value: &_storage._visitMapField)
        case 550: try decoder.decodeSingularInt32Field(value: &_storage._visitor)
        case 551: try decoder.decodeSingularInt32Field(value: &_storage._visitPacked)
        case 552: try decoder.decodeSingularInt32Field(value: &_storage._visitPackedBoolField)
        case 553: try decoder.decodeSingularInt32Field(value: &_storage._visitPackedDoubleField)
        case 554: try decoder.decodeSingularInt32Field(value: &_storage._visitPackedEnumField)
        case 555: try decoder.decodeSingularInt32Field(value: &_storage._visitPackedFixed32Field)
        case 556: try decoder.decodeSingularInt32Field(value: &_storage._visitPackedFixed64Field)
        case 557: try decoder.decodeSingularInt32Field(value: &_storage._visitPackedFloatField)
        case 558: try decoder.decodeSingularInt32Field(value: &_storage._visitPackedInt32Field)
        case 559: try decoder.decodeSingularInt32Field(value: &_storage._visitPackedInt64Field)
        case 560: try decoder.decodeSingularInt32Field(value: &_storage._visitPackedSfixed32Field)
        case 561: try decoder.decodeSingularInt32Field(value: &_storage._visitPackedSfixed64Field)
        case 562: try decoder.decodeSingularInt32Field(value: &_storage._visitPackedSint32Field)
        case 563: try decoder.decodeSingularInt32Field(value: &_storage._visitPackedSint64Field)
        case 564: try decoder.decodeSingularInt32Field(value: &_storage._visitPackedUint32Field)
        case 565: try decoder.decodeSingularInt32Field(value: &_storage._visitPackedUint64Field)
        case 566: try decoder.decodeSingularInt32Field(value: &_storage._visitRepeated)
        case 567: try decoder.decodeSingularInt32Field(value: &_storage._visitRepeatedBoolField)
        case 568: try decoder.decodeSingularInt32Field(value: &_storage._visitRepeatedBytesField)
        case 569: try decoder.decodeSingularInt32Field(value: &_storage._visitRepeatedDoubleField)
        case 570: try decoder.decodeSingularInt32Field(value: &_storage._visitRepeatedEnumField)
        case 571: try decoder.decodeSingularInt32Field(value: &_storage._visitRepeatedFixed32Field)
        case 572: try decoder.decodeSingularInt32Field(value: &_storage._visitRepeatedFixed64Field)
        case 573: try decoder.decodeSingularInt32Field(value: &_storage._visitRepeatedFloatField)
        case 574: try decoder.decodeSingularInt32Field(value: &_storage._visitRepeatedGroupField)
        case 575: try decoder.decodeSingularInt32Field(value: &_storage._visitRepeatedInt32Field)
        case 576: try decoder.decodeSingularInt32Field(value: &_storage._visitRepeatedInt64Field)
        case 577: try decoder.decodeSingularInt32Field(value: &_storage._visitRepeatedMessageField)
        case 578: try decoder.decodeSingularInt32Field(value: &_storage._visitRepeatedSfixed32Field)
        case 579: try decoder.decodeSingularInt32Field(value: &_storage._visitRepeatedSfixed64Field)
        case 580: try decoder.decodeSingularInt32Field(value: &_storage._visitRepeatedSint32Field)
        case 581: try decoder.decodeSingularInt32Field(value: &_storage._visitRepeatedSint64Field)
        case 582: try decoder.decodeSingularInt32Field(value: &_storage._visitRepeatedStringField)
        case 583: try decoder.decodeSingularInt32Field(value: &_storage._visitRepeatedUint32Field)
        case 584: try decoder.decodeSingularInt32Field(value: &_storage._visitRepeatedUint64Field)
        case 585: try decoder.decodeSingularInt32Field(value: &_storage._visitSingular)
        case 586: try decoder.decodeSingularInt32Field(value: &_storage._visitSingularBoolField)
        case 587: try decoder.decodeSingularInt32Field(value: &_storage._visitSingularBytesField)
        case 588: try decoder.decodeSingularInt32Field(value: &_storage._visitSingularDoubleField)
        case 589: try decoder.decodeSingularInt32Field(value: &_storage._visitSingularEnumField)
        case 590: try decoder.decodeSingularInt32Field(value: &_storage._visitSingularFixed32Field)
        case 591: try decoder.decodeSingularInt32Field(value: &_storage._visitSingularFixed64Field)
        case 592: try decoder.decodeSingularInt32Field(value: &_storage._visitSingularFloatField)
        case 593: try decoder.decodeSingularInt32Field(value: &_storage._visitSingularGroupField)
        case 594: try decoder.decodeSingularInt32Field(value: &_storage._visitSingularInt32Field)
        case 595: try decoder.decodeSingularInt32Field(value: &_storage._visitSingularInt64Field)
        case 596: try decoder.decodeSingularInt32Field(value: &_storage._visitSingularMessageField)
        case 597: try decoder.decodeSingularInt32Field(value: &_storage._visitSingularSfixed32Field)
        case 598: try decoder.decodeSingularInt32Field(value: &_storage._visitSingularSfixed64Field)
        case 599: try decoder.decodeSingularInt32Field(value: &_storage._visitSingularSint32Field)
        case 600: try decoder.decodeSingularInt32Field(value: &_storage._visitSingularSint64Field)
        case 601: try decoder.decodeSingularInt32Field(value: &_storage._visitSingularStringField)
        case 602: try decoder.decodeSingularInt32Field(value: &_storage._visitSingularUint32Field)
        case 603: try decoder.decodeSingularInt32Field(value: &_storage._visitSingularUint64Field)
        case 604: try decoder.decodeSingularInt32Field(value: &_storage._visitUnknown)
        case 605: try decoder.decodeSingularInt32Field(value: &_storage._wasDecoded)
        case 606: try decoder.decodeSingularInt32Field(value: &_storage._where)
        case 607: try decoder.decodeSingularInt32Field(value: &_storage._wireFormat)
        case 608: try decoder.decodeSingularInt32Field(value: &_storage._with)
        case 609: try decoder.decodeSingularInt32Field(value: &_storage._wrappedType)
        case 610: try decoder.decodeSingularInt32Field(value: &_storage._written)
        case 611: try decoder.decodeSingularInt32Field(value: &_storage._yday)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._adjusted != 0 {
        try visitor.visitSingularInt32Field(value: _storage._adjusted, fieldNumber: 1)
      }
      if _storage._allocate != 0 {
        try visitor.visitSingularInt32Field(value: _storage._allocate, fieldNumber: 2)
      }
      if _storage._any != 0 {
        try visitor.visitSingularInt32Field(value: _storage._any, fieldNumber: 3)
      }
      if _storage._anyExtensionField != 0 {
        try visitor.visitSingularInt32Field(value: _storage._anyExtensionField, fieldNumber: 4)
      }
      if _storage._anyMessageExtension != 0 {
        try visitor.visitSingularInt32Field(value: _storage._anyMessageExtension, fieldNumber: 5)
      }
      if _storage._anyMessageStorage != 0 {
        try visitor.visitSingularInt32Field(value: _storage._anyMessageStorage, fieldNumber: 6)
      }
      if _storage._anyUnpackError != 0 {
        try visitor.visitSingularInt32Field(value: _storage._anyUnpackError, fieldNumber: 7)
      }
      if _storage._api != 0 {
        try visitor.visitSingularInt32Field(value: _storage._api, fieldNumber: 8)
      }
      if _storage._appended != 0 {
        try visitor.visitSingularInt32Field(value: _storage._appended, fieldNumber: 9)
      }
      if _storage._appendUintHex != 0 {
        try visitor.visitSingularInt32Field(value: _storage._appendUintHex, fieldNumber: 10)
      }
      if _storage._appendUnknown != 0 {
        try visitor.visitSingularInt32Field(value: _storage._appendUnknown, fieldNumber: 11)
      }
      if _storage._areAllInitialized != 0 {
        try visitor.visitSingularInt32Field(value: _storage._areAllInitialized, fieldNumber: 12)
      }
      if _storage._array != 0 {
        try visitor.visitSingularInt32Field(value: _storage._array, fieldNumber: 13)
      }
      if _storage._arrayLiteral != 0 {
        try visitor.visitSingularInt32Field(value: _storage._arrayLiteral, fieldNumber: 14)
      }
      if _storage._arraySeparator != 0 {
        try visitor.visitSingularInt32Field(value: _storage._arraySeparator, fieldNumber: 15)
      }
      if _storage._as != 0 {
        try visitor.visitSingularInt32Field(value: _storage._as, fieldNumber: 16)
      }
      if _storage._asciiOpenCurlyBracket != 0 {
        try visitor.visitSingularInt32Field(value: _storage._asciiOpenCurlyBracket, fieldNumber: 17)
      }
      if _storage._asciiZero != 0 {
        try visitor.visitSingularInt32Field(value: _storage._asciiZero, fieldNumber: 18)
      }
      if _storage._available != 0 {
        try visitor.visitSingularInt32Field(value: _storage._available, fieldNumber: 19)
      }
      if _storage._b != 0 {
        try visitor.visitSingularInt32Field(value: _storage._b, fieldNumber: 20)
      }
      if _storage._baseType != 0 {
        try visitor.visitSingularInt32Field(value: _storage._baseType, fieldNumber: 21)
      }
      if _storage._binary != 0 {
        try visitor.visitSingularInt32Field(value: _storage._binary, fieldNumber: 22)
      }
      if _storage._binaryDecoder != 0 {
        try visitor.visitSingularInt32Field(value: _storage._binaryDecoder, fieldNumber: 23)
      }
      if _storage._binaryDecodingError != 0 {
        try visitor.visitSingularInt32Field(value: _storage._binaryDecodingError, fieldNumber: 24)
      }
      if _storage._binaryDecodingOptions != 0 {
        try visitor.visitSingularInt32Field(value: _storage._binaryDecodingOptions, fieldNumber: 25)
      }
      if _storage._binaryDelimited != 0 {
        try visitor.visitSingularInt32Field(value: _storage._binaryDelimited, fieldNumber: 26)
      }
      if _storage._binaryEncoder != 0 {
        try visitor.visitSingularInt32Field(value: _storage._binaryEncoder, fieldNumber: 27)
      }
      if _storage._binaryEncodingError != 0 {
        try visitor.visitSingularInt32Field(value: _storage._binaryEncodingError, fieldNumber: 28)
      }
      if _storage._binaryEncodingMessageSetSizeVisitor != 0 {
        try visitor.visitSingularInt32Field(value: _storage._binaryEncodingMessageSetSizeVisitor, fieldNumber: 29)
      }
      if _storage._binaryEncodingMessageSetVisitor != 0 {
        try visitor.visitSingularInt32Field(value: _storage._binaryEncodingMessageSetVisitor, fieldNumber: 30)
      }
      if _storage._binaryEncodingSizeVisitor != 0 {
        try visitor.visitSingularInt32Field(value: _storage._binaryEncodingSizeVisitor, fieldNumber: 31)
      }
      if _storage._binaryEncodingVisitor != 0 {
        try visitor.visitSingularInt32Field(value: _storage._binaryEncodingVisitor, fieldNumber: 32)
      }
      if _storage._bodySize != 0 {
        try visitor.visitSingularInt32Field(value: _storage._bodySize, fieldNumber: 33)
      }
      if _storage._bool != 0 {
        try visitor.visitSingularInt32Field(value: _storage._bool, fieldNumber: 34)
      }
      if _storage._booleanLiteral != 0 {
        try visitor.visitSingularInt32Field(value: _storage._booleanLiteral, fieldNumber: 35)
      }
      if _storage._booleanLiteralType != 0 {
        try visitor.visitSingularInt32Field(value: _storage._booleanLiteralType, fieldNumber: 36)
      }
      if _storage._boolValue != 0 {
        try visitor.visitSingularInt32Field(value: _storage._boolValue, fieldNumber: 37)
      }
      if _storage._buffer != 0 {
        try visitor.visitSingularInt32Field(value: _storage._buffer, fieldNumber: 38)
      }
      if _storage._bytes != 0 {
        try visitor.visitSingularInt32Field(value: _storage._bytes, fieldNumber: 39)
      }
      if _storage._bytesInGroup != 0 {
        try visitor.visitSingularInt32Field(value: _storage._bytesInGroup, fieldNumber: 40)
      }
      if _storage._bytesRead != 0 {
        try visitor.visitSingularInt32Field(value: _storage._bytesRead, fieldNumber: 41)
      }
      if _storage._bytesValue != 0 {
        try visitor.visitSingularInt32Field(value: _storage._bytesValue, fieldNumber: 42)
      }
      if _storage._c != 0 {
        try visitor.visitSingularInt32Field(value: _storage._c, fieldNumber: 43)
      }
      if _storage._capacity != 0 {
        try visitor.visitSingularInt32Field(value: _storage._capacity, fieldNumber: 44)
      }
      if _storage._capitalizeNext != 0 {
        try visitor.visitSingularInt32Field(value: _storage._capitalizeNext, fieldNumber: 45)
      }
      if _storage._cardinality != 0 {
        try visitor.visitSingularInt32Field(value: _storage._cardinality, fieldNumber: 46)
      }
      if _storage._character != 0 {
        try visitor.visitSingularInt32Field(value: _storage._character, fieldNumber: 47)
      }
      if _storage._characters != 0 {
        try visitor.visitSingularInt32Field(value: _storage._characters, fieldNumber: 48)
      }
      if _storage._chars != 0 {
        try visitor.visitSingularInt32Field(value: _storage._chars, fieldNumber: 49)
      }
      if _storage._class != 0 {
        try visitor.visitSingularInt32Field(value: _storage._class, fieldNumber: 50)
      }
      if _storage._clearExtensionValue_p != 0 {
        try visitor.visitSingularInt32Field(value: _storage._clearExtensionValue_p, fieldNumber: 51)
      }
      if _storage._clearSourceContext_p != 0 {
        try visitor.visitSingularInt32Field(value: _storage._clearSourceContext_p, fieldNumber: 52)
      }
      if _storage._clearValue_p != 0 {
        try visitor.visitSingularInt32Field(value: _storage._clearValue_p, fieldNumber: 53)
      }
      if _storage._codeUnits != 0 {
        try visitor.visitSingularInt32Field(value: _storage._codeUnits, fieldNumber: 54)
      }
      if _storage._collection != 0 {
        try visitor.visitSingularInt32Field(value: _storage._collection, fieldNumber: 55)
      }
      if _storage._com != 0 {
        try visitor.visitSingularInt32Field(value: _storage._com, fieldNumber: 56)
      }
      if _storage._comma != 0 {
        try visitor.visitSingularInt32Field(value: _storage._comma, fieldNumber: 57)
      }
      if _storage._contentsOf != 0 {
        try visitor.visitSingularInt32Field(value: _storage._contentsOf, fieldNumber: 58)
      }
      if _storage._count != 0 {
        try visitor.visitSingularInt32Field(value: _storage._count, fieldNumber: 59)
      }
      if _storage._countVarintsInBuffer != 0 {
        try visitor.visitSingularInt32Field(value: _storage._countVarintsInBuffer, fieldNumber: 60)
      }
      if _storage._customCodable != 0 {
        try visitor.visitSingularInt32Field(value: _storage._customCodable, fieldNumber: 61)
      }
      if _storage._customDebugStringConvertible != 0 {
        try visitor.visitSingularInt32Field(value: _storage._customDebugStringConvertible, fieldNumber: 62)
      }
      if _storage._d != 0 {
        try visitor.visitSingularInt32Field(value: _storage._d, fieldNumber: 63)
      }
      if _storage._data != 0 {
        try visitor.visitSingularInt32Field(value: _storage._data, fieldNumber: 64)
      }
      if _storage._dataPointer != 0 {
        try visitor.visitSingularInt32Field(value: _storage._dataPointer, fieldNumber: 65)
      }
      if _storage._dataResult != 0 {
        try visitor.visitSingularInt32Field(value: _storage._dataResult, fieldNumber: 66)
      }
      if _storage._dataSize != 0 {
        try visitor.visitSingularInt32Field(value: _storage._dataSize, fieldNumber: 67)
      }
      if _storage._date != 0 {
        try visitor.visitSingularInt32Field(value: _storage._date, fieldNumber: 68)
      }
      if _storage._daySec != 0 {
        try visitor.visitSingularInt32Field(value: _storage._daySec, fieldNumber: 69)
      }
      if _storage._daysSinceEpoch != 0 {
        try visitor.visitSingularInt32Field(value: _storage._daysSinceEpoch, fieldNumber: 70)
      }
      if _storage._debugDescription_p != 0 {
        try visitor.visitSingularInt32Field(value: _storage._debugDescription_p, fieldNumber: 71)
      }
      if _storage._decoded != 0 {
        try visitor.visitSingularInt32Field(value: _storage._decoded, fieldNumber: 72)
      }
      if _storage._decodedFromJsonnull != 0 {
        try visitor.visitSingularInt32Field(value: _storage._decodedFromJsonnull, fieldNumber: 73)
      }
      if _storage._decodeExtensionField != 0 {
        try visitor.visitSingularInt32Field(value: _storage._decodeExtensionField, fieldNumber: 74)
      }
      if _storage._decodeExtensionFieldsAsMessageSet != 0 {
        try visitor.visitSingularInt32Field(value: _storage._decodeExtensionFieldsAsMessageSet, fieldNumber: 75)
      }
      if _storage._decodeJson != 0 {
        try visitor.visitSingularInt32Field(value: _storage._decodeJson, fieldNumber: 76)
      }
      if _storage._decodeMapField != 0 {
        try visitor.visitSingularInt32Field(value: _storage._decodeMapField, fieldNumber: 77)
      }
      if _storage._decodeMessage != 0 {
        try visitor.visitSingularInt32Field(value: _storage._decodeMessage, fieldNumber: 78)
      }
      if _storage._decoder != 0 {
        try visitor.visitSingularInt32Field(value: _storage._decoder, fieldNumber: 79)
      }
      if _storage._decodeRepeated != 0 {
        try visitor.visitSingularInt32Field(value: _storage._decodeRepeated, fieldNumber: 80)
      }
      if _storage._decodeRepeatedBoolField != 0 {
        try visitor.visitSingularInt32Field(value: _storage._decodeRepeatedBoolField, fieldNumber: 81)
      }
      if _storage._decodeRepeatedBytesField != 0 {
        try visitor.visitSingularInt32Field(value: _storage._decodeRepeatedBytesField, fieldNumber: 82)
      }
      if _storage._decodeRepeatedDoubleField != 0 {
        try visitor.visitSingularInt32Field(value: _storage._decodeRepeatedDoubleField, fieldNumber: 83)
      }
      if _storage._decodeRepeatedEnumField != 0 {
        try visitor.visitSingularInt32Field(value: _storage._decodeRepeatedEnumField, fieldNumber: 84)
      }
      if _storage._decodeRepeatedFixed32Field != 0 {
        try visitor.visitSingularInt32Field(value: _storage._decodeRepeatedFixed32Field, fieldNumber: 85)
      }
      if _storage._decodeRepeatedFixed64Field != 0 {
        try visitor.visitSingularInt32Field(value: _storage._decodeRepeatedFixed64Field, fieldNumber: 86)
      }
      if _storage._decodeRepeatedFloatField != 0 {
        try visitor.visitSingularInt32Field(value: _storage._decodeRepeatedFloatField, fieldNumber: 87)
      }
      if _storage._decodeRepeatedGroupField != 0 {
        try visitor.visitSingularInt32Field(value: _storage._decodeRepeatedGroupField, fieldNumber: 88)
      }
      if _storage._decodeRepeatedInt32Field != 0 {
        try visitor.visitSingularInt32Field(value: _storage._decodeRepeatedInt32Field, fieldNumber: 89)
      }
      if _storage._decodeRepeatedInt64Field != 0 {
        try visitor.visitSingularInt32Field(value: _storage._decodeRepeatedInt64Field, fieldNumber: 90)
      }
      if _storage._decodeRepeatedMessageField != 0 {
        try visitor.visitSingularInt32Field(value: _storage._decodeRepeatedMessageField, fieldNumber: 91)
      }
      if _storage._decodeRepeatedSfixed32Field != 0 {
        try visitor.visitSingularInt32Field(value: _storage._decodeRepeatedSfixed32Field, fieldNumber: 92)
      }
      if _storage._decodeRepeatedSfixed64Field != 0 {
        try visitor.visitSingularInt32Field(value: _storage._decodeRepeatedSfixed64Field, fieldNumber: 93)
      }
      if _storage._decodeRepeatedSint32Field != 0 {
        try visitor.visitSingularInt32Field(value: _storage._decodeRepeatedSint32Field, fieldNumber: 94)
      }
      if _storage._decodeRepeatedSint64Field != 0 {
        try visitor.visitSingularInt32Field(value: _storage._decodeRepeatedSint64Field, fieldNumber: 95)
      }
      if _storage._decodeRepeatedStringField != 0 {
        try visitor.visitSingularInt32Field(value: _storage._decodeRepeatedStringField, fieldNumber: 96)
      }
      if _storage._decodeRepeatedUint32Field != 0 {
        try visitor.visitSingularInt32Field(value: _storage._decodeRepeatedUint32Field, fieldNumber: 97)
      }
      if _storage._decodeRepeatedUint64Field != 0 {
        try visitor.visitSingularInt32Field(value: _storage._decodeRepeatedUint64Field, fieldNumber: 98)
      }
      if _storage._decodeSingular != 0 {
        try visitor.visitSingularInt32Field(value: _storage._decodeSingular, fieldNumber: 99)
      }
      if _storage._decodeSingularBoolField != 0 {
        try visitor.visitSingularInt32Field(value: _storage._decodeSingularBoolField, fieldNumber: 100)
      }
      if _storage._decodeSingularBytesField != 0 {
        try visitor.visitSingularInt32Field(value: _storage._decodeSingularBytesField, fieldNumber: 101)
      }
      if _storage._decodeSingularDoubleField != 0 {
        try visitor.visitSingularInt32Field(value: _storage._decodeSingularDoubleField, fieldNumber: 102)
      }
      if _storage._decodeSingularEnumField != 0 {
        try visitor.visitSingularInt32Field(value: _storage._decodeSingularEnumField, fieldNumber: 103)
      }
      if _storage._decodeSingularFixed32Field != 0 {
        try visitor.visitSingularInt32Field(value: _storage._decodeSingularFixed32Field, fieldNumber: 104)
      }
      if _storage._decodeSingularFixed64Field != 0 {
        try visitor.visitSingularInt32Field(value: _storage._decodeSingularFixed64Field, fieldNumber: 105)
      }
      if _storage._decodeSingularFloatField != 0 {
        try visitor.visitSingularInt32Field(value: _storage._decodeSingularFloatField, fieldNumber: 106)
      }
      if _storage._decodeSingularGroupField != 0 {
        try visitor.visitSingularInt32Field(value: _storage._decodeSingularGroupField, fieldNumber: 107)
      }
      if _storage._decodeSingularInt32Field != 0 {
        try visitor.visitSingularInt32Field(value: _storage._decodeSingularInt32Field, fieldNumber: 108)
      }
      if _storage._decodeSingularInt64Field != 0 {
        try visitor.visitSingularInt32Field(value: _storage._decodeSingularInt64Field, fieldNumber: 109)
      }
      if _storage._decodeSingularMessageField != 0 {
        try visitor.visitSingularInt32Field(value: _storage._decodeSingularMessageField, fieldNumber: 110)
      }
      if _storage._decodeSingularSfixed32Field != 0 {
        try visitor.visitSingularInt32Field(value: _storage._decodeSingularSfixed32Field, fieldNumber: 111)
      }
      if _storage._decodeSingularSfixed64Field != 0 {
        try visitor.visitSingularInt32Field(value: _storage._decodeSingularSfixed64Field, fieldNumber: 112)
      }
      if _storage._decodeSingularSint32Field != 0 {
        try visitor.visitSingularInt32Field(value: _storage._decodeSingularSint32Field, fieldNumber: 113)
      }
      if _storage._decodeSingularSint64Field != 0 {
        try visitor.visitSingularInt32Field(value: _storage._decodeSingularSint64Field, fieldNumber: 114)
      }
      if _storage._decodeSingularStringField != 0 {
        try visitor.visitSingularInt32Field(value: _storage._decodeSingularStringField, fieldNumber: 115)
      }
      if _storage._decodeSingularUint32Field != 0 {
        try visitor.visitSingularInt32Field(value: _storage._decodeSingularUint32Field, fieldNumber: 116)
      }
      if _storage._decodeSingularUint64Field != 0 {
        try visitor.visitSingularInt32Field(value: _storage._decodeSingularUint64Field, fieldNumber: 117)
      }
      if _storage._decodeTextFormat != 0 {
        try visitor.visitSingularInt32Field(value: _storage._decodeTextFormat, fieldNumber: 118)
      }
      if _storage._defaultAnyTypeUrlprefix != 0 {
        try visitor.visitSingularInt32Field(value: _storage._defaultAnyTypeUrlprefix, fieldNumber: 119)
      }
      if _storage._defaultValue != 0 {
        try visitor.visitSingularInt32Field(value: _storage._defaultValue, fieldNumber: 120)
      }
      if _storage._description_p != 0 {
        try visitor.visitSingularInt32Field(value: _storage._description_p, fieldNumber: 121)
      }
      if _storage._dictionary != 0 {
        try visitor.visitSingularInt32Field(value: _storage._dictionary, fieldNumber: 122)
      }
      if _storage._dictionaryLiteral != 0 {
        try visitor.visitSingularInt32Field(value: _storage._dictionaryLiteral, fieldNumber: 123)
      }
      if _storage._digit != 0 {
        try visitor.visitSingularInt32Field(value: _storage._digit, fieldNumber: 124)
      }
      if _storage._digit0 != 0 {
        try visitor.visitSingularInt32Field(value: _storage._digit0, fieldNumber: 125)
      }
      if _storage._digit1 != 0 {
        try visitor.visitSingularInt32Field(value: _storage._digit1, fieldNumber: 126)
      }
      if _storage._digitCount != 0 {
        try visitor.visitSingularInt32Field(value: _storage._digitCount, fieldNumber: 127)
      }
      if _storage._digits != 0 {
        try visitor.visitSingularInt32Field(value: _storage._digits, fieldNumber: 128)
      }
      if _storage._digitValue != 0 {
        try visitor.visitSingularInt32Field(value: _storage._digitValue, fieldNumber: 129)
      }
      if _storage._discardableResult != 0 {
        try visitor.visitSingularInt32Field(value: _storage._discardableResult, fieldNumber: 130)
      }
      if _storage._discardUnknownFields != 0 {
        try visitor.visitSingularInt32Field(value: _storage._discardUnknownFields, fieldNumber: 131)
      }
      if _storage._distance != 0 {
        try visitor.visitSingularInt32Field(value: _storage._distance, fieldNumber: 132)
      }
      if _storage._double != 0 {
        try visitor.visitSingularInt32Field(value: _storage._double, fieldNumber: 133)
      }
      if _storage._doubleToUtf8 != 0 {
        try visitor.visitSingularInt32Field(value: _storage._doubleToUtf8, fieldNumber: 134)
      }
      if _storage._doubleValue != 0 {
        try visitor.visitSingularInt32Field(value: _storage._doubleValue, fieldNumber: 135)
      }
      if _storage._duration != 0 {
        try visitor.visitSingularInt32Field(value: _storage._duration, fieldNumber: 136)
      }
      if _storage._e != 0 {
        try visitor.visitSingularInt32Field(value: _storage._e, fieldNumber: 137)
      }
      if _storage._element != 0 {
        try visitor.visitSingularInt32Field(value: _storage._element, fieldNumber: 138)
      }
      if _storage._elements != 0 {
        try visitor.visitSingularInt32Field(value: _storage._elements, fieldNumber: 139)
      }
      if _storage._emitExtensionFieldName != 0 {
        try visitor.visitSingularInt32Field(value: _storage._emitExtensionFieldName, fieldNumber: 140)
      }
      if _storage._emitFieldName != 0 {
        try visitor.visitSingularInt32Field(value: _storage._emitFieldName, fieldNumber: 141)
      }
      if _storage._emitFieldNumber != 0 {
        try visitor.visitSingularInt32Field(value: _storage._emitFieldNumber, fieldNumber: 142)
      }
      if _storage._empty != 0 {
        try visitor.visitSingularInt32Field(value: _storage._empty, fieldNumber: 143)
      }
      if _storage._emptyData != 0 {
        try visitor.visitSingularInt32Field(value: _storage._emptyData, fieldNumber: 144)
      }
      if _storage._encoded != 0 {
        try visitor.visitSingularInt32Field(value: _storage._encoded, fieldNumber: 145)
      }
      if _storage._encodedJsonstring != 0 {
        try visitor.visitSingularInt32Field(value: _storage._encodedJsonstring, fieldNumber: 146)
      }
      if _storage._encodedSize != 0 {
        try visitor.visitSingularInt32Field(value: _storage._encodedSize, fieldNumber: 147)
      }
      if _storage._encodeField != 0 {
        try visitor.visitSingularInt32Field(value: _storage._encodeField, fieldNumber: 148)
      }
      if _storage._encoder != 0 {
        try visitor.visitSingularInt32Field(value: _storage._encoder, fieldNumber: 149)
      }
      if _storage._end != 0 {
        try visitor.visitSingularInt32Field(value: _storage._end, fieldNumber: 150)
      }
      if _storage._endArray != 0 {
        try visitor.visitSingularInt32Field(value: _storage._endArray, fieldNumber: 151)
      }
      if _storage._endMessageField != 0 {
        try visitor.visitSingularInt32Field(value: _storage._endMessageField, fieldNumber: 152)
      }
      if _storage._endObject != 0 {
        try visitor.visitSingularInt32Field(value: _storage._endObject, fieldNumber: 153)
      }
      if _storage._endRegularField != 0 {
        try visitor.visitSingularInt32Field(value: _storage._endRegularField, fieldNumber: 154)
      }
      if _storage._enum != 0 {
        try visitor.visitSingularInt32Field(value: _storage._enum, fieldNumber: 155)
      }
      if _storage._enumvalue != 0 {
        try visitor.visitSingularInt32Field(value: _storage._enumvalue, fieldNumber: 156)
      }
      if _storage._equatable != 0 {
        try visitor.visitSingularInt32Field(value: _storage._equatable, fieldNumber: 157)
      }
      if _storage._error != 0 {
        try visitor.visitSingularInt32Field(value: _storage._error, fieldNumber: 158)
      }
      if _storage._expressibleByArrayLiteral != 0 {
        try visitor.visitSingularInt32Field(value: _storage._expressibleByArrayLiteral, fieldNumber: 159)
      }
      if _storage._expressibleByDictionaryLiteral != 0 {
        try visitor.visitSingularInt32Field(value: _storage._expressibleByDictionaryLiteral, fieldNumber: 160)
      }
      if _storage._ext != 0 {
        try visitor.visitSingularInt32Field(value: _storage._ext, fieldNumber: 161)
      }
      if _storage._extDecoder != 0 {
        try visitor.visitSingularInt32Field(value: _storage._extDecoder, fieldNumber: 162)
      }
      if _storage._extendedGraphemeClusterLiteral != 0 {
        try visitor.visitSingularInt32Field(value: _storage._extendedGraphemeClusterLiteral, fieldNumber: 163)
      }
      if _storage._extendedGraphemeClusterLiteralType != 0 {
        try visitor.visitSingularInt32Field(value: _storage._extendedGraphemeClusterLiteralType, fieldNumber: 164)
      }
      if _storage._extensibleMessage != 0 {
        try visitor.visitSingularInt32Field(value: _storage._extensibleMessage, fieldNumber: 165)
      }
      if _storage._extension != 0 {
        try visitor.visitSingularInt32Field(value: _storage._extension, fieldNumber: 166)
      }
      if _storage._extensionField != 0 {
        try visitor.visitSingularInt32Field(value: _storage._extensionField, fieldNumber: 167)
      }
      if _storage._extensionFieldNumber != 0 {
        try visitor.visitSingularInt32Field(value: _storage._extensionFieldNumber, fieldNumber: 168)
      }
      if _storage._extensionFieldValueSet != 0 {
        try visitor.visitSingularInt32Field(value: _storage._extensionFieldValueSet, fieldNumber: 169)
      }
      if _storage._extensionMap != 0 {
        try visitor.visitSingularInt32Field(value: _storage._extensionMap, fieldNumber: 170)
      }
      if _storage._extensions != 0 {
        try visitor.visitSingularInt32Field(value: _storage._extensions, fieldNumber: 171)
      }
      if _storage._extras != 0 {
        try visitor.visitSingularInt32Field(value: _storage._extras, fieldNumber: 172)
      }
      if _storage._f != 0 {
        try visitor.visitSingularInt32Field(value: _storage._f, fieldNumber: 173)
      }
      if _storage._false != 0 {
        try visitor.visitSingularInt32Field(value: _storage._false, fieldNumber: 174)
      }
      if _storage._field != 0 {
        try visitor.visitSingularInt32Field(value: _storage._field, fieldNumber: 175)
      }
      if _storage._fieldData != 0 {
        try visitor.visitSingularInt32Field(value: _storage._fieldData, fieldNumber: 176)
      }
      if _storage._fieldMask != 0 {
        try visitor.visitSingularInt32Field(value: _storage._fieldMask, fieldNumber: 177)
      }
      if _storage._fieldName != 0 {
        try visitor.visitSingularInt32Field(value: _storage._fieldName, fieldNumber: 178)
      }
      if _storage._fieldNameCount != 0 {
        try visitor.visitSingularInt32Field(value: _storage._fieldNameCount, fieldNumber: 179)
      }
      if _storage._fieldNum != 0 {
        try visitor.visitSingularInt32Field(value: _storage._fieldNum, fieldNumber: 180)
      }
      if _storage._fieldNumber != 0 {
        try visitor.visitSingularInt32Field(value: _storage._fieldNumber, fieldNumber: 181)
      }
      if _storage._fieldNumberForProto != 0 {
        try visitor.visitSingularInt32Field(value: _storage._fieldNumberForProto, fieldNumber: 182)
      }
      if _storage._fields != 0 {
        try visitor.visitSingularInt32Field(value: _storage._fields, fieldNumber: 183)
      }
      if _storage._fieldSize != 0 {
        try visitor.visitSingularInt32Field(value: _storage._fieldSize, fieldNumber: 184)
      }
      if _storage._fieldTag != 0 {
        try visitor.visitSingularInt32Field(value: _storage._fieldTag, fieldNumber: 185)
      }
      if _storage._fieldType != 0 {
        try visitor.visitSingularInt32Field(value: _storage._fieldType, fieldNumber: 186)
      }
      if _storage._fieldValue != 0 {
        try visitor.visitSingularInt32Field(value: _storage._fieldValue, fieldNumber: 187)
      }
      if _storage._fileName != 0 {
        try visitor.visitSingularInt32Field(value: _storage._fileName, fieldNumber: 188)
      }
      if _storage._filter != 0 {
        try visitor.visitSingularInt32Field(value: _storage._filter, fieldNumber: 189)
      }
      if _storage._firstItem != 0 {
        try visitor.visitSingularInt32Field(value: _storage._firstItem, fieldNumber: 190)
      }
      if _storage._float != 0 {
        try visitor.visitSingularInt32Field(value: _storage._float, fieldNumber: 191)
      }
      if _storage._floatLiteral != 0 {
        try visitor.visitSingularInt32Field(value: _storage._floatLiteral, fieldNumber: 192)
      }
      if _storage._floatLiteralType != 0 {
        try visitor.visitSingularInt32Field(value: _storage._floatLiteralType, fieldNumber: 193)
      }
      if _storage._floatToUtf8 != 0 {
        try visitor.visitSingularInt32Field(value: _storage._floatToUtf8, fieldNumber: 194)
      }
      if _storage._floatValue != 0 {
        try visitor.visitSingularInt32Field(value: _storage._floatValue, fieldNumber: 195)
      }
      if _storage._forMessageName != 0 {
        try visitor.visitSingularInt32Field(value: _storage._forMessageName, fieldNumber: 196)
      }
      if _storage._formUnion != 0 {
        try visitor.visitSingularInt32Field(value: _storage._formUnion, fieldNumber: 197)
      }
      if _storage._forReadingFrom != 0 {
        try visitor.visitSingularInt32Field(value: _storage._forReadingFrom, fieldNumber: 198)
      }
      if _storage._forTypeURL != 0 {
        try visitor.visitSingularInt32Field(value: _storage._forTypeURL, fieldNumber: 199)
      }
      if _storage._forwardParser != 0 {
        try visitor.visitSingularInt32Field(value: _storage._forwardParser, fieldNumber: 200)
      }
      if _storage._forWritingInto != 0 {
        try visitor.visitSingularInt32Field(value: _storage._forWritingInto, fieldNumber: 201)
      }
      if _storage._from != 0 {
        try visitor.visitSingularInt32Field(value: _storage._from, fieldNumber: 202)
      }
      if _storage._fromAscii2 != 0 {
        try visitor.visitSingularInt32Field(value: _storage._fromAscii2, fieldNumber: 203)
      }
      if _storage._fromAscii4 != 0 {
        try visitor.visitSingularInt32Field(value: _storage._fromAscii4, fieldNumber: 204)
      }
      if _storage._fromHexDigit != 0 {
        try visitor.visitSingularInt32Field(value: _storage._fromHexDigit, fieldNumber: 205)
      }
      if _storage._func != 0 {
        try visitor.visitSingularInt32Field(value: _storage._func, fieldNumber: 206)
      }
      if _storage._g != 0 {
        try visitor.visitSingularInt32Field(value: _storage._g, fieldNumber: 207)
      }
      if _storage._get != 0 {
        try visitor.visitSingularInt32Field(value: _storage._get, fieldNumber: 208)
      }
      if _storage._getExtensionValue != 0 {
        try visitor.visitSingularInt32Field(value: _storage._getExtensionValue, fieldNumber: 209)
      }
      if _storage._googleapis != 0 {
        try visitor.visitSingularInt32Field(value: _storage._googleapis, fieldNumber: 210)
      }
      if _storage._googleProtobufAny != 0 {
        try visitor.visitSingularInt32Field(value: _storage._googleProtobufAny, fieldNumber: 211)
      }
      if _storage._googleProtobufApi != 0 {
        try visitor.visitSingularInt32Field(value: _storage._googleProtobufApi, fieldNumber: 212)
      }
      if _storage._googleProtobufBoolValue != 0 {
        try visitor.visitSingularInt32Field(value: _storage._googleProtobufBoolValue, fieldNumber: 213)
      }
      if _storage._googleProtobufBytesValue != 0 {
        try visitor.visitSingularInt32Field(value: _storage._googleProtobufBytesValue, fieldNumber: 214)
      }
      if _storage._googleProtobufDoubleValue != 0 {
        try visitor.visitSingularInt32Field(value: _storage._googleProtobufDoubleValue, fieldNumber: 215)
      }
      if _storage._googleProtobufDuration != 0 {
        try visitor.visitSingularInt32Field(value: _storage._googleProtobufDuration, fieldNumber: 216)
      }
      if _storage._googleProtobufEmpty != 0 {
        try visitor.visitSingularInt32Field(value: _storage._googleProtobufEmpty, fieldNumber: 217)
      }
      if _storage._googleProtobufEnum != 0 {
        try visitor.visitSingularInt32Field(value: _storage._googleProtobufEnum, fieldNumber: 218)
      }
      if _storage._googleProtobufEnumValue != 0 {
        try visitor.visitSingularInt32Field(value: _storage._googleProtobufEnumValue, fieldNumber: 219)
      }
      if _storage._googleProtobufField != 0 {
        try visitor.visitSingularInt32Field(value: _storage._googleProtobufField, fieldNumber: 220)
      }
      if _storage._googleProtobufFieldMask != 0 {
        try visitor.visitSingularInt32Field(value: _storage._googleProtobufFieldMask, fieldNumber: 221)
      }
      if _storage._googleProtobufFloatValue != 0 {
        try visitor.visitSingularInt32Field(value: _storage._googleProtobufFloatValue, fieldNumber: 222)
      }
      if _storage._googleProtobufInt32Value != 0 {
        try visitor.visitSingularInt32Field(value: _storage._googleProtobufInt32Value, fieldNumber: 223)
      }
      if _storage._googleProtobufInt64Value != 0 {
        try visitor.visitSingularInt32Field(value: _storage._googleProtobufInt64Value, fieldNumber: 224)
      }
      if _storage._googleProtobufListValue != 0 {
        try visitor.visitSingularInt32Field(value: _storage._googleProtobufListValue, fieldNumber: 225)
      }
      if _storage._googleProtobufMethod != 0 {
        try visitor.visitSingularInt32Field(value: _storage._googleProtobufMethod, fieldNumber: 226)
      }
      if _storage._googleProtobufMixin != 0 {
        try visitor.visitSingularInt32Field(value: _storage._googleProtobufMixin, fieldNumber: 227)
      }
      if _storage._googleProtobufNullValue != 0 {
        try visitor.visitSingularInt32Field(value: _storage._googleProtobufNullValue, fieldNumber: 228)
      }
      if _storage._googleProtobufOption != 0 {
        try visitor.visitSingularInt32Field(value: _storage._googleProtobufOption, fieldNumber: 229)
      }
      if _storage._googleProtobufSourceContext != 0 {
        try visitor.visitSingularInt32Field(value: _storage._googleProtobufSourceContext, fieldNumber: 230)
      }
      if _storage._googleProtobufStringValue != 0 {
        try visitor.visitSingularInt32Field(value: _storage._googleProtobufStringValue, fieldNumber: 231)
      }
      if _storage._googleProtobufStruct != 0 {
        try visitor.visitSingularInt32Field(value: _storage._googleProtobufStruct, fieldNumber: 232)
      }
      if _storage._googleProtobufSyntax != 0 {
        try visitor.visitSingularInt32Field(value: _storage._googleProtobufSyntax, fieldNumber: 233)
      }
      if _storage._googleProtobufTimestamp != 0 {
        try visitor.visitSingularInt32Field(value: _storage._googleProtobufTimestamp, fieldNumber: 234)
      }
      if _storage._googleProtobufType != 0 {
        try visitor.visitSingularInt32Field(value: _storage._googleProtobufType, fieldNumber: 235)
      }
      if _storage._googleProtobufUint32Value != 0 {
        try visitor.visitSingularInt32Field(value: _storage._googleProtobufUint32Value, fieldNumber: 236)
      }
      if _storage._googleProtobufUint64Value != 0 {
        try visitor.visitSingularInt32Field(value: _storage._googleProtobufUint64Value, fieldNumber: 237)
      }
      if _storage._googleProtobufValue != 0 {
        try visitor.visitSingularInt32Field(value: _storage._googleProtobufValue, fieldNumber: 238)
      }
      if _storage._group != 0 {
        try visitor.visitSingularInt32Field(value: _storage._group, fieldNumber: 239)
      }
      if _storage._groupSize != 0 {
        try visitor.visitSingularInt32Field(value: _storage._groupSize, fieldNumber: 240)
      }
      if _storage._h != 0 {
        try visitor.visitSingularInt32Field(value: _storage._h, fieldNumber: 241)
      }
      if _storage._handleConflictingOneOf != 0 {
        try visitor.visitSingularInt32Field(value: _storage._handleConflictingOneOf, fieldNumber: 242)
      }
      if _storage._hasExtensionValue_p != 0 {
        try visitor.visitSingularInt32Field(value: _storage._hasExtensionValue_p, fieldNumber: 243)
      }
      if _storage._hash != 0 {
        try visitor.visitSingularInt32Field(value: _storage._hash, fieldNumber: 244)
      }
      if _storage._hashable != 0 {
        try visitor.visitSingularInt32Field(value: _storage._hashable, fieldNumber: 245)
      }
      if _storage._hashValue_p != 0 {
        try visitor.visitSingularInt32Field(value: _storage._hashValue_p, fieldNumber: 246)
      }
      if _storage._hashVisitor != 0 {
        try visitor.visitSingularInt32Field(value: _storage._hashVisitor, fieldNumber: 247)
      }
      if _storage._hasSourceContext_p != 0 {
        try visitor.visitSingularInt32Field(value: _storage._hasSourceContext_p, fieldNumber: 248)
      }
      if _storage._hasValue_p != 0 {
        try visitor.visitSingularInt32Field(value: _storage._hasValue_p, fieldNumber: 249)
      }
      if _storage._hour != 0 {
        try visitor.visitSingularInt32Field(value: _storage._hour, fieldNumber: 250)
      }
      if _storage._i != 0 {
        try visitor.visitSingularInt32Field(value: _storage._i, fieldNumber: 251)
      }
      if _storage._index != 0 {
        try visitor.visitSingularInt32Field(value: _storage._index, fieldNumber: 252)
      }
      if _storage._init_p != 0 {
        try visitor.visitSingularInt32Field(value: _storage._init_p, fieldNumber: 253)
      }
      if _storage._inout != 0 {
        try visitor.visitSingularInt32Field(value: _storage._inout, fieldNumber: 254)
      }
      if _storage._insert != 0 {
        try visitor.visitSingularInt32Field(value: _storage._insert, fieldNumber: 255)
      }
      if _storage._int != 0 {
        try visitor.visitSingularInt32Field(value: _storage._int, fieldNumber: 256)
      }
      if _storage._int32 != 0 {
        try visitor.visitSingularInt32Field(value: _storage._int32, fieldNumber: 257)
      }
      if _storage._int32Value != 0 {
        try visitor.visitSingularInt32Field(value: _storage._int32Value, fieldNumber: 258)
      }
      if _storage._int64 != 0 {
        try visitor.visitSingularInt32Field(value: _storage._int64, fieldNumber: 259)
      }
      if _storage._int64Value != 0 {
        try visitor.visitSingularInt32Field(value: _storage._int64Value, fieldNumber: 260)
      }
      if _storage._int8 != 0 {
        try visitor.visitSingularInt32Field(value: _storage._int8, fieldNumber: 261)
      }
      if _storage._integerLiteral != 0 {
        try visitor.visitSingularInt32Field(value: _storage._integerLiteral, fieldNumber: 262)
      }
      if _storage._integerLiteralType != 0 {
        try visitor.visitSingularInt32Field(value: _storage._integerLiteralType, fieldNumber: 263)
      }
      if _storage._intern != 0 {
        try visitor.visitSingularInt32Field(value: _storage._intern, fieldNumber: 264)
      }
      if _storage._internal != 0 {
        try visitor.visitSingularInt32Field(value: _storage._internal, fieldNumber: 265)
      }
      if _storage._internalState != 0 {
        try visitor.visitSingularInt32Field(value: _storage._internalState, fieldNumber: 266)
      }
      if _storage._ints != 0 {
        try visitor.visitSingularInt32Field(value: _storage._ints, fieldNumber: 267)
      }
      if _storage._isA != 0 {
        try visitor.visitSingularInt32Field(value: _storage._isA, fieldNumber: 268)
      }
      if _storage._isEqual != 0 {
        try visitor.visitSingularInt32Field(value: _storage._isEqual, fieldNumber: 269)
      }
      if _storage._isEqualTo != 0 {
        try visitor.visitSingularInt32Field(value: _storage._isEqualTo, fieldNumber: 270)
      }
      if _storage._isInitialized_p != 0 {
        try visitor.visitSingularInt32Field(value: _storage._isInitialized_p, fieldNumber: 271)
      }
      if _storage._it != 0 {
        try visitor.visitSingularInt32Field(value: _storage._it, fieldNumber: 272)
      }
      if _storage._itemTagsEncodedSize != 0 {
        try visitor.visitSingularInt32Field(value: _storage._itemTagsEncodedSize, fieldNumber: 273)
      }
      if _storage._iterator != 0 {
        try visitor.visitSingularInt32Field(value: _storage._iterator, fieldNumber: 274)
      }
      if _storage._i2166136261 != 0 {
        try visitor.visitSingularInt32Field(value: _storage._i2166136261, fieldNumber: 275)
      }
      if _storage._jsondecoder != 0 {
        try visitor.visitSingularInt32Field(value: _storage._jsondecoder, fieldNumber: 276)
      }
      if _storage._jsondecodingError != 0 {
        try visitor.visitSingularInt32Field(value: _storage._jsondecodingError, fieldNumber: 277)
      }
      if _storage._jsondecodingOptions != 0 {
        try visitor.visitSingularInt32Field(value: _storage._jsondecodingOptions, fieldNumber: 278)
      }
      if _storage._jsonEncoder != 0 {
        try visitor.visitSingularInt32Field(value: _storage._jsonEncoder, fieldNumber: 279)
      }
      if _storage._jsonencodingError != 0 {
        try visitor.visitSingularInt32Field(value: _storage._jsonencodingError, fieldNumber: 280)
      }
      if _storage._jsonencodingVisitor != 0 {
        try visitor.visitSingularInt32Field(value: _storage._jsonencodingVisitor, fieldNumber: 281)
      }
      if _storage._jsonmapEncodingVisitor != 0 {
        try visitor.visitSingularInt32Field(value: _storage._jsonmapEncodingVisitor, fieldNumber: 282)
      }
      if _storage._jsonName != 0 {
        try visitor.visitSingularInt32Field(value: _storage._jsonName, fieldNumber: 283)
      }
      if _storage._jsonPath != 0 {
        try visitor.visitSingularInt32Field(value: _storage._jsonPath, fieldNumber: 284)
      }
      if _storage._jsonPaths != 0 {
        try visitor.visitSingularInt32Field(value: _storage._jsonPaths, fieldNumber: 285)
      }
      if _storage._jsonscanner != 0 {
        try visitor.visitSingularInt32Field(value: _storage._jsonscanner, fieldNumber: 286)
      }
      if _storage._jsonString != 0 {
        try visitor.visitSingularInt32Field(value: _storage._jsonString, fieldNumber: 287)
      }
      if _storage._jsonText != 0 {
        try visitor.visitSingularInt32Field(value: _storage._jsonText, fieldNumber: 288)
      }
      if _storage._jsonUtf8Data != 0 {
        try visitor.visitSingularInt32Field(value: _storage._jsonUtf8Data, fieldNumber: 289)
      }
      if _storage._k != 0 {
        try visitor.visitSingularInt32Field(value: _storage._k, fieldNumber: 290)
      }
      if _storage._key != 0 {
        try visitor.visitSingularInt32Field(value: _storage._key, fieldNumber: 291)
      }
      if _storage._keyField != 0 {
        try visitor.visitSingularInt32Field(value: _storage._keyField, fieldNumber: 292)
      }
      if _storage._keyType != 0 {
        try visitor.visitSingularInt32Field(value: _storage._keyType, fieldNumber: 293)
      }
      if _storage._kind != 0 {
        try visitor.visitSingularInt32Field(value: _storage._kind, fieldNumber: 294)
      }
      if _storage._l != 0 {
        try visitor.visitSingularInt32Field(value: _storage._l, fieldNumber: 295)
      }
      if _storage._length != 0 {
        try visitor.visitSingularInt32Field(value: _storage._length, fieldNumber: 296)
      }
      if _storage._let != 0 {
        try visitor.visitSingularInt32Field(value: _storage._let, fieldNumber: 297)
      }
      if _storage._lhs != 0 {
        try visitor.visitSingularInt32Field(value: _storage._lhs, fieldNumber: 298)
      }
      if _storage._list != 0 {
        try visitor.visitSingularInt32Field(value: _storage._list, fieldNumber: 299)
      }
      if _storage._listOfMessages != 0 {
        try visitor.visitSingularInt32Field(value: _storage._listOfMessages, fieldNumber: 300)
      }
      if _storage._listValue != 0 {
        try visitor.visitSingularInt32Field(value: _storage._listValue, fieldNumber: 301)
      }
      if _storage._littleEndian != 0 {
        try visitor.visitSingularInt32Field(value: _storage._littleEndian, fieldNumber: 302)
      }
      if _storage._littleEndianBytes != 0 {
        try visitor.visitSingularInt32Field(value: _storage._littleEndianBytes, fieldNumber: 303)
      }
      if _storage._m != 0 {
        try visitor.visitSingularInt32Field(value: _storage._m, fieldNumber: 304)
      }
      if _storage._major != 0 {
        try visitor.visitSingularInt32Field(value: _storage._major, fieldNumber: 305)
      }
      if _storage._makeIterator != 0 {
        try visitor.visitSingularInt32Field(value: _storage._makeIterator, fieldNumber: 306)
      }
      if _storage._mapHash != 0 {
        try visitor.visitSingularInt32Field(value: _storage._mapHash, fieldNumber: 307)
      }
      if _storage._mapKeyType != 0 {
        try visitor.visitSingularInt32Field(value: _storage._mapKeyType, fieldNumber: 308)
      }
      if _storage._mapNameResolver != 0 {
        try visitor.visitSingularInt32Field(value: _storage._mapNameResolver, fieldNumber: 309)
      }
      if _storage._mapToMessages != 0 {
        try visitor.visitSingularInt32Field(value: _storage._mapToMessages, fieldNumber: 310)
      }
      if _storage._mapValueType != 0 {
        try visitor.visitSingularInt32Field(value: _storage._mapValueType, fieldNumber: 311)
      }
      if _storage._mapVisitor != 0 {
        try visitor.visitSingularInt32Field(value: _storage._mapVisitor, fieldNumber: 312)
      }
      if _storage._mdayStart != 0 {
        try visitor.visitSingularInt32Field(value: _storage._mdayStart, fieldNumber: 313)
      }
      if _storage._merge != 0 {
        try visitor.visitSingularInt32Field(value: _storage._merge, fieldNumber: 314)
      }
      if _storage._message != 0 {
        try visitor.visitSingularInt32Field(value: _storage._message, fieldNumber: 315)
      }
      if _storage._messageDepthLimit != 0 {
        try visitor.visitSingularInt32Field(value: _storage._messageDepthLimit, fieldNumber: 316)
      }
      if _storage._messageExtension != 0 {
        try visitor.visitSingularInt32Field(value: _storage._messageExtension, fieldNumber: 317)
      }
      if _storage._messageImplementationBase != 0 {
        try visitor.visitSingularInt32Field(value: _storage._messageImplementationBase, fieldNumber: 318)
      }
      if _storage._messageSet != 0 {
        try visitor.visitSingularInt32Field(value: _storage._messageSet, fieldNumber: 319)
      }
      if _storage._messageType != 0 {
        try visitor.visitSingularInt32Field(value: _storage._messageType, fieldNumber: 320)
      }
      if _storage._method != 0 {
        try visitor.visitSingularInt32Field(value: _storage._method, fieldNumber: 321)
      }
      if _storage._methods != 0 {
        try visitor.visitSingularInt32Field(value: _storage._methods, fieldNumber: 322)
      }
      if _storage._minor != 0 {
        try visitor.visitSingularInt32Field(value: _storage._minor, fieldNumber: 323)
      }
      if _storage._mixin != 0 {
        try visitor.visitSingularInt32Field(value: _storage._mixin, fieldNumber: 324)
      }
      if _storage._mixins != 0 {
        try visitor.visitSingularInt32Field(value: _storage._mixins, fieldNumber: 325)
      }
      if _storage._month != 0 {
        try visitor.visitSingularInt32Field(value: _storage._month, fieldNumber: 326)
      }
      if _storage._msgExtension != 0 {
        try visitor.visitSingularInt32Field(value: _storage._msgExtension, fieldNumber: 327)
      }
      if _storage._mutating != 0 {
        try visitor.visitSingularInt32Field(value: _storage._mutating, fieldNumber: 328)
      }
      if _storage._n != 0 {
        try visitor.visitSingularInt32Field(value: _storage._n, fieldNumber: 329)
      }
      if _storage._name != 0 {
        try visitor.visitSingularInt32Field(value: _storage._name, fieldNumber: 330)
      }
      if _storage._nameDescription != 0 {
        try visitor.visitSingularInt32Field(value: _storage._nameDescription, fieldNumber: 331)
      }
      if _storage._nameMap != 0 {
        try visitor.visitSingularInt32Field(value: _storage._nameMap, fieldNumber: 332)
      }
      if _storage._nameResolver != 0 {
        try visitor.visitSingularInt32Field(value: _storage._nameResolver, fieldNumber: 333)
      }
      if _storage._names != 0 {
        try visitor.visitSingularInt32Field(value: _storage._names, fieldNumber: 334)
      }
      if _storage._nanos != 0 {
        try visitor.visitSingularInt32Field(value: _storage._nanos, fieldNumber: 335)
      }
      if _storage._nativeBytes != 0 {
        try visitor.visitSingularInt32Field(value: _storage._nativeBytes, fieldNumber: 336)
      }
      if _storage._nativeEndianBytes != 0 {
        try visitor.visitSingularInt32Field(value: _storage._nativeEndianBytes, fieldNumber: 337)
      }
      if _storage._newL != 0 {
        try visitor.visitSingularInt32Field(value: _storage._newL, fieldNumber: 338)
      }
      if _storage._newList != 0 {
        try visitor.visitSingularInt32Field(value: _storage._newList, fieldNumber: 339)
      }
      if _storage._newValue != 0 {
        try visitor.visitSingularInt32Field(value: _storage._newValue, fieldNumber: 340)
      }
      if _storage._nextByte != 0 {
        try visitor.visitSingularInt32Field(value: _storage._nextByte, fieldNumber: 341)
      }
      if _storage._nextFieldNumber != 0 {
        try visitor.visitSingularInt32Field(value: _storage._nextFieldNumber, fieldNumber: 342)
      }
      if _storage._nil != 0 {
        try visitor.visitSingularInt32Field(value: _storage._nil, fieldNumber: 343)
      }
      if _storage._nilLiteral != 0 {
        try visitor.visitSingularInt32Field(value: _storage._nilLiteral, fieldNumber: 344)
      }
      if _storage._nullValue != 0 {
        try visitor.visitSingularInt32Field(value: _storage._nullValue, fieldNumber: 345)
      }
      if _storage._number != 0 {
        try visitor.visitSingularInt32Field(value: _storage._number, fieldNumber: 346)
      }
      if _storage._numberValue != 0 {
        try visitor.visitSingularInt32Field(value: _storage._numberValue, fieldNumber: 347)
      }
      if _storage._of != 0 {
        try visitor.visitSingularInt32Field(value: _storage._of, fieldNumber: 348)
      }
      if _storage._oneofIndex != 0 {
        try visitor.visitSingularInt32Field(value: _storage._oneofIndex, fieldNumber: 349)
      }
      if _storage._oneofs != 0 {
        try visitor.visitSingularInt32Field(value: _storage._oneofs, fieldNumber: 350)
      }
      if _storage._oneOfKind != 0 {
        try visitor.visitSingularInt32Field(value: _storage._oneOfKind, fieldNumber: 351)
      }
      if _storage._option != 0 {
        try visitor.visitSingularInt32Field(value: _storage._option, fieldNumber: 352)
      }
      if _storage._optionalEnumExtensionField != 0 {
        try visitor.visitSingularInt32Field(value: _storage._optionalEnumExtensionField, fieldNumber: 353)
      }
      if _storage._optionalExtensionField != 0 {
        try visitor.visitSingularInt32Field(value: _storage._optionalExtensionField, fieldNumber: 354)
      }
      if _storage._optionalGroupExtensionField != 0 {
        try visitor.visitSingularInt32Field(value: _storage._optionalGroupExtensionField, fieldNumber: 355)
      }
      if _storage._optionalMessageExtensionField != 0 {
        try visitor.visitSingularInt32Field(value: _storage._optionalMessageExtensionField, fieldNumber: 356)
      }
      if _storage._options != 0 {
        try visitor.visitSingularInt32Field(value: _storage._options, fieldNumber: 357)
      }
      if _storage._other != 0 {
        try visitor.visitSingularInt32Field(value: _storage._other, fieldNumber: 358)
      }
      if _storage._others != 0 {
        try visitor.visitSingularInt32Field(value: _storage._others, fieldNumber: 359)
      }
      if _storage._out != 0 {
        try visitor.visitSingularInt32Field(value: _storage._out, fieldNumber: 360)
      }
      if _storage._output != 0 {
        try visitor.visitSingularInt32Field(value: _storage._output, fieldNumber: 361)
      }
      if _storage._p != 0 {
        try visitor.visitSingularInt32Field(value: _storage._p, fieldNumber: 362)
      }
      if _storage._packed != 0 {
        try visitor.visitSingularInt32Field(value: _storage._packed, fieldNumber: 363)
      }
      if _storage._packedEnumExtensionField != 0 {
        try visitor.visitSingularInt32Field(value: _storage._packedEnumExtensionField, fieldNumber: 364)
      }
      if _storage._packedExtensionField != 0 {
        try visitor.visitSingularInt32Field(value: _storage._packedExtensionField, fieldNumber: 365)
      }
      if _storage._packedSize != 0 {
        try visitor.visitSingularInt32Field(value: _storage._packedSize, fieldNumber: 366)
      }
      if _storage._padding != 0 {
        try visitor.visitSingularInt32Field(value: _storage._padding, fieldNumber: 367)
      }
      if _storage._parent != 0 {
        try visitor.visitSingularInt32Field(value: _storage._parent, fieldNumber: 368)
      }
      if _storage._parse != 0 {
        try visitor.visitSingularInt32Field(value: _storage._parse, fieldNumber: 369)
      }
      if _storage._partial != 0 {
        try visitor.visitSingularInt32Field(value: _storage._partial, fieldNumber: 370)
      }
      if _storage._path != 0 {
        try visitor.visitSingularInt32Field(value: _storage._path, fieldNumber: 371)
      }
      if _storage._paths != 0 {
        try visitor.visitSingularInt32Field(value: _storage._paths, fieldNumber: 372)
      }
      if _storage._payload != 0 {
        try visitor.visitSingularInt32Field(value: _storage._payload, fieldNumber: 373)
      }
      if _storage._payloadSize != 0 {
        try visitor.visitSingularInt32Field(value: _storage._payloadSize, fieldNumber: 374)
      }
      if _storage._pointer != 0 {
        try visitor.visitSingularInt32Field(value: _storage._pointer, fieldNumber: 375)
      }
      if _storage._pos != 0 {
        try visitor.visitSingularInt32Field(value: _storage._pos, fieldNumber: 376)
      }
      if _storage._prefix != 0 {
        try visitor.visitSingularInt32Field(value: _storage._prefix, fieldNumber: 377)
      }
      if _storage._preTraverse != 0 {
        try visitor.visitSingularInt32Field(value: _storage._preTraverse, fieldNumber: 378)
      }
      if _storage._proto2 != 0 {
        try visitor.visitSingularInt32Field(value: _storage._proto2, fieldNumber: 379)
      }
      if _storage._proto3DefaultValue != 0 {
        try visitor.visitSingularInt32Field(value: _storage._proto3DefaultValue, fieldNumber: 380)
      }
      if _storage._protobufApiversionCheck != 0 {
        try visitor.visitSingularInt32Field(value: _storage._protobufApiversionCheck, fieldNumber: 381)
      }
      if _storage._protobufApiversion2 != 0 {
        try visitor.visitSingularInt32Field(value: _storage._protobufApiversion2, fieldNumber: 382)
      }
      if _storage._protobufBool != 0 {
        try visitor.visitSingularInt32Field(value: _storage._protobufBool, fieldNumber: 383)
      }
      if _storage._protobufBytes != 0 {
        try visitor.visitSingularInt32Field(value: _storage._protobufBytes, fieldNumber: 384)
      }
      if _storage._protobufDouble != 0 {
        try visitor.visitSingularInt32Field(value: _storage._protobufDouble, fieldNumber: 385)
      }
      if _storage._protobufEnumMap != 0 {
        try visitor.visitSingularInt32Field(value: _storage._protobufEnumMap, fieldNumber: 386)
      }
      if _storage._protobufExtension != 0 {
        try visitor.visitSingularInt32Field(value: _storage._protobufExtension, fieldNumber: 387)
      }
      if _storage._protobufFixed32 != 0 {
        try visitor.visitSingularInt32Field(value: _storage._protobufFixed32, fieldNumber: 388)
      }
      if _storage._protobufFixed64 != 0 {
        try visitor.visitSingularInt32Field(value: _storage._protobufFixed64, fieldNumber: 389)
      }
      if _storage._protobufFloat != 0 {
        try visitor.visitSingularInt32Field(value: _storage._protobufFloat, fieldNumber: 390)
      }
      if _storage._protobufInt32 != 0 {
        try visitor.visitSingularInt32Field(value: _storage._protobufInt32, fieldNumber: 391)
      }
      if _storage._protobufInt64 != 0 {
        try visitor.visitSingularInt32Field(value: _storage._protobufInt64, fieldNumber: 392)
      }
      if _storage._protobufMap != 0 {
        try visitor.visitSingularInt32Field(value: _storage._protobufMap, fieldNumber: 393)
      }
      if _storage._protobufMessageMap != 0 {
        try visitor.visitSingularInt32Field(value: _storage._protobufMessageMap, fieldNumber: 394)
      }
      if _storage._protobufSfixed32 != 0 {
        try visitor.visitSingularInt32Field(value: _storage._protobufSfixed32, fieldNumber: 395)
      }
      if _storage._protobufSfixed64 != 0 {
        try visitor.visitSingularInt32Field(value: _storage._protobufSfixed64, fieldNumber: 396)
      }
      if _storage._protobufSint32 != 0 {
        try visitor.visitSingularInt32Field(value: _storage._protobufSint32, fieldNumber: 397)
      }
      if _storage._protobufSint64 != 0 {
        try visitor.visitSingularInt32Field(value: _storage._protobufSint64, fieldNumber: 398)
      }
      if _storage._protobufString != 0 {
        try visitor.visitSingularInt32Field(value: _storage._protobufString, fieldNumber: 399)
      }
      if _storage._protobufUint32 != 0 {
        try visitor.visitSingularInt32Field(value: _storage._protobufUint32, fieldNumber: 400)
      }
      if _storage._protobufUint64 != 0 {
        try visitor.visitSingularInt32Field(value: _storage._protobufUint64, fieldNumber: 401)
      }
      if _storage._protobufExtensionFieldValues != 0 {
        try visitor.visitSingularInt32Field(value: _storage._protobufExtensionFieldValues, fieldNumber: 402)
      }
      if _storage._protobufFieldNumber != 0 {
        try visitor.visitSingularInt32Field(value: _storage._protobufFieldNumber, fieldNumber: 403)
      }
      if _storage._protobufGeneratedIsEqualTo != 0 {
        try visitor.visitSingularInt32Field(value: _storage._protobufGeneratedIsEqualTo, fieldNumber: 404)
      }
      if _storage._protobufNameMap != 0 {
        try visitor.visitSingularInt32Field(value: _storage._protobufNameMap, fieldNumber: 405)
      }
      if _storage._protobufNewField != 0 {
        try visitor.visitSingularInt32Field(value: _storage._protobufNewField, fieldNumber: 406)
      }
      if _storage._protobufPackage != 0 {
        try visitor.visitSingularInt32Field(value: _storage._protobufPackage, fieldNumber: 407)
      }
      if _storage._protocol != 0 {
        try visitor.visitSingularInt32Field(value: _storage._protocol, fieldNumber: 408)
      }
      if _storage._protoFieldName != 0 {
        try visitor.visitSingularInt32Field(value: _storage._protoFieldName, fieldNumber: 409)
      }
      if _storage._protoMessageName != 0 {
        try visitor.visitSingularInt32Field(value: _storage._protoMessageName, fieldNumber: 410)
      }
      if _storage._protoNameProviding != 0 {
        try visitor.visitSingularInt32Field(value: _storage._protoNameProviding, fieldNumber: 411)
      }
      if _storage._protoPaths != 0 {
        try visitor.visitSingularInt32Field(value: _storage._protoPaths, fieldNumber: 412)
      }
      if _storage._public != 0 {
        try visitor.visitSingularInt32Field(value: _storage._public, fieldNumber: 413)
      }
      if _storage._putBoolValue != 0 {
        try visitor.visitSingularInt32Field(value: _storage._putBoolValue, fieldNumber: 414)
      }
      if _storage._putBytesValue != 0 {
        try visitor.visitSingularInt32Field(value: _storage._putBytesValue, fieldNumber: 415)
      }
      if _storage._putDoubleValue != 0 {
        try visitor.visitSingularInt32Field(value: _storage._putDoubleValue, fieldNumber: 416)
      }
      if _storage._putEnumValue != 0 {
        try visitor.visitSingularInt32Field(value: _storage._putEnumValue, fieldNumber: 417)
      }
      if _storage._putFixedUint32 != 0 {
        try visitor.visitSingularInt32Field(value: _storage._putFixedUint32, fieldNumber: 418)
      }
      if _storage._putFixedUint64 != 0 {
        try visitor.visitSingularInt32Field(value: _storage._putFixedUint64, fieldNumber: 419)
      }
      if _storage._putFloatValue != 0 {
        try visitor.visitSingularInt32Field(value: _storage._putFloatValue, fieldNumber: 420)
      }
      if _storage._putInt64 != 0 {
        try visitor.visitSingularInt32Field(value: _storage._putInt64, fieldNumber: 421)
      }
      if _storage._putStringValue != 0 {
        try visitor.visitSingularInt32Field(value: _storage._putStringValue, fieldNumber: 422)
      }
      if _storage._putUint64 != 0 {
        try visitor.visitSingularInt32Field(value: _storage._putUint64, fieldNumber: 423)
      }
      if _storage._putUint64Hex != 0 {
        try visitor.visitSingularInt32Field(value: _storage._putUint64Hex, fieldNumber: 424)
      }
      if _storage._putVarInt != 0 {
        try visitor.visitSingularInt32Field(value: _storage._putVarInt, fieldNumber: 425)
      }
      if _storage._putZigZagVarInt != 0 {
        try visitor.visitSingularInt32Field(value: _storage._putZigZagVarInt, fieldNumber: 426)
      }
      if _storage._rawChars != 0 {
        try visitor.visitSingularInt32Field(value: _storage._rawChars, fieldNumber: 427)
      }
      if _storage._rawRepresentable != 0 {
        try visitor.visitSingularInt32Field(value: _storage._rawRepresentable, fieldNumber: 428)
      }
      if _storage._rawValue != 0 {
        try visitor.visitSingularInt32Field(value: _storage._rawValue, fieldNumber: 429)
      }
      if _storage._readBuffer != 0 {
        try visitor.visitSingularInt32Field(value: _storage._readBuffer, fieldNumber: 430)
      }
      if _storage._register != 0 {
        try visitor.visitSingularInt32Field(value: _storage._register, fieldNumber: 431)
      }
      if _storage._repeatedEnumExtensionField != 0 {
        try visitor.visitSingularInt32Field(value: _storage._repeatedEnumExtensionField, fieldNumber: 432)
      }
      if _storage._repeatedExtensionField != 0 {
        try visitor.visitSingularInt32Field(value: _storage._repeatedExtensionField, fieldNumber: 433)
      }
      if _storage._repeatedGroupExtensionField != 0 {
        try visitor.visitSingularInt32Field(value: _storage._repeatedGroupExtensionField, fieldNumber: 434)
      }
      if _storage._repeatedMessageExtensionField != 0 {
        try visitor.visitSingularInt32Field(value: _storage._repeatedMessageExtensionField, fieldNumber: 435)
      }
      if _storage._requestStreaming != 0 {
        try visitor.visitSingularInt32Field(value: _storage._requestStreaming, fieldNumber: 436)
      }
      if _storage._requestTypeURL != 0 {
        try visitor.visitSingularInt32Field(value: _storage._requestTypeURL, fieldNumber: 437)
      }
      if _storage._requiredSize != 0 {
        try visitor.visitSingularInt32Field(value: _storage._requiredSize, fieldNumber: 438)
      }
      if _storage._responseStreaming != 0 {
        try visitor.visitSingularInt32Field(value: _storage._responseStreaming, fieldNumber: 439)
      }
      if _storage._responseTypeURL != 0 {
        try visitor.visitSingularInt32Field(value: _storage._responseTypeURL, fieldNumber: 440)
      }
      if _storage._result != 0 {
        try visitor.visitSingularInt32Field(value: _storage._result, fieldNumber: 441)
      }
      if _storage._return != 0 {
        try visitor.visitSingularInt32Field(value: _storage._return, fieldNumber: 442)
      }
      if _storage._revision != 0 {
        try visitor.visitSingularInt32Field(value: _storage._revision, fieldNumber: 443)
      }
      if _storage._rhs != 0 {
        try visitor.visitSingularInt32Field(value: _storage._rhs, fieldNumber: 444)
      }
      if _storage._root != 0 {
        try visitor.visitSingularInt32Field(value: _storage._root, fieldNumber: 445)
      }
      if _storage._s != 0 {
        try visitor.visitSingularInt32Field(value: _storage._s, fieldNumber: 446)
      }
      if _storage._sawBackslash != 0 {
        try visitor.visitSingularInt32Field(value: _storage._sawBackslash, fieldNumber: 447)
      }
      if _storage._sawSection4Characters != 0 {
        try visitor.visitSingularInt32Field(value: _storage._sawSection4Characters, fieldNumber: 448)
      }
      if _storage._sawSection5Characters != 0 {
        try visitor.visitSingularInt32Field(value: _storage._sawSection5Characters, fieldNumber: 449)
      }
      if _storage._scanner != 0 {
        try visitor.visitSingularInt32Field(value: _storage._scanner, fieldNumber: 450)
      }
      if _storage._seconds != 0 {
        try visitor.visitSingularInt32Field(value: _storage._seconds, fieldNumber: 451)
      }
      if _storage._self_p != 0 {
        try visitor.visitSingularInt32Field(value: _storage._self_p, fieldNumber: 452)
      }
      if _storage._separator != 0 {
        try visitor.visitSingularInt32Field(value: _storage._separator, fieldNumber: 453)
      }
      if _storage._serialize != 0 {
        try visitor.visitSingularInt32Field(value: _storage._serialize, fieldNumber: 454)
      }
      if _storage._serializedData != 0 {
        try visitor.visitSingularInt32Field(value: _storage._serializedData, fieldNumber: 455)
      }
      if _storage._serializedSize != 0 {
        try visitor.visitSingularInt32Field(value: _storage._serializedSize, fieldNumber: 456)
      }
      if _storage._set != 0 {
        try visitor.visitSingularInt32Field(value: _storage._set, fieldNumber: 457)
      }
      if _storage._setExtensionValue != 0 {
        try visitor.visitSingularInt32Field(value: _storage._setExtensionValue, fieldNumber: 458)
      }
      if _storage._shift != 0 {
        try visitor.visitSingularInt32Field(value: _storage._shift, fieldNumber: 459)
      }
      if _storage._simpleExtensionMap != 0 {
        try visitor.visitSingularInt32Field(value: _storage._simpleExtensionMap, fieldNumber: 460)
      }
      if _storage._sizer != 0 {
        try visitor.visitSingularInt32Field(value: _storage._sizer, fieldNumber: 461)
      }
      if _storage._source != 0 {
        try visitor.visitSingularInt32Field(value: _storage._source, fieldNumber: 462)
      }
      if _storage._sourceContext != 0 {
        try visitor.visitSingularInt32Field(value: _storage._sourceContext, fieldNumber: 463)
      }
      if _storage._sourceEncoding != 0 {
        try visitor.visitSingularInt32Field(value: _storage._sourceEncoding, fieldNumber: 464)
      }
      if _storage._split != 0 {
        try visitor.visitSingularInt32Field(value: _storage._split, fieldNumber: 465)
      }
      if _storage._start != 0 {
        try visitor.visitSingularInt32Field(value: _storage._start, fieldNumber: 466)
      }
      if _storage._startArray != 0 {
        try visitor.visitSingularInt32Field(value: _storage._startArray, fieldNumber: 467)
      }
      if _storage._startField != 0 {
        try visitor.visitSingularInt32Field(value: _storage._startField, fieldNumber: 468)
      }
      if _storage._startIndex != 0 {
        try visitor.visitSingularInt32Field(value: _storage._startIndex, fieldNumber: 469)
      }
      if _storage._startMessageField != 0 {
        try visitor.visitSingularInt32Field(value: _storage._startMessageField, fieldNumber: 470)
      }
      if _storage._startObject != 0 {
        try visitor.visitSingularInt32Field(value: _storage._startObject, fieldNumber: 471)
      }
      if _storage._startRegularField != 0 {
        try visitor.visitSingularInt32Field(value: _storage._startRegularField, fieldNumber: 472)
      }
      if _storage._state != 0 {
        try visitor.visitSingularInt32Field(value: _storage._state, fieldNumber: 473)
      }
      if _storage._static != 0 {
        try visitor.visitSingularInt32Field(value: _storage._static, fieldNumber: 474)
      }
      if _storage._staticString != 0 {
        try visitor.visitSingularInt32Field(value: _storage._staticString, fieldNumber: 475)
      }
      if _storage._storage != 0 {
        try visitor.visitSingularInt32Field(value: _storage._storage, fieldNumber: 476)
      }
      if _storage._string != 0 {
        try visitor.visitSingularInt32Field(value: _storage._string, fieldNumber: 477)
      }
      if _storage._stringLiteral != 0 {
        try visitor.visitSingularInt32Field(value: _storage._stringLiteral, fieldNumber: 478)
      }
      if _storage._stringLiteralType != 0 {
        try visitor.visitSingularInt32Field(value: _storage._stringLiteralType, fieldNumber: 479)
      }
      if _storage._stringResult != 0 {
        try visitor.visitSingularInt32Field(value: _storage._stringResult, fieldNumber: 480)
      }
      if _storage._stringValue != 0 {
        try visitor.visitSingularInt32Field(value: _storage._stringValue, fieldNumber: 481)
      }
      if _storage._struct != 0 {
        try visitor.visitSingularInt32Field(value: _storage._struct, fieldNumber: 482)
      }
      if _storage._structValue != 0 {
        try visitor.visitSingularInt32Field(value: _storage._structValue, fieldNumber: 483)
      }
      if _storage._subDecoder != 0 {
        try visitor.visitSingularInt32Field(value: _storage._subDecoder, fieldNumber: 484)
      }
      if _storage._subscript != 0 {
        try visitor.visitSingularInt32Field(value: _storage._subscript, fieldNumber: 485)
      }
      if _storage._subVisitor != 0 {
        try visitor.visitSingularInt32Field(value: _storage._subVisitor, fieldNumber: 486)
      }
      if _storage._swift != 0 {
        try visitor.visitSingularInt32Field(value: _storage._swift, fieldNumber: 487)
      }
      if _storage._swiftProtobuf != 0 {
        try visitor.visitSingularInt32Field(value: _storage._swiftProtobuf, fieldNumber: 488)
      }
      if _storage._syntax != 0 {
        try visitor.visitSingularInt32Field(value: _storage._syntax, fieldNumber: 489)
      }
      if _storage._t != 0 {
        try visitor.visitSingularInt32Field(value: _storage._t, fieldNumber: 490)
      }
      if _storage._tag != 0 {
        try visitor.visitSingularInt32Field(value: _storage._tag, fieldNumber: 491)
      }
      if _storage._terminator != 0 {
        try visitor.visitSingularInt32Field(value: _storage._terminator, fieldNumber: 492)
      }
      if _storage._testDecoder != 0 {
        try visitor.visitSingularInt32Field(value: _storage._testDecoder, fieldNumber: 493)
      }
      if _storage._text != 0 {
        try visitor.visitSingularInt32Field(value: _storage._text, fieldNumber: 494)
      }
      if _storage._textDecoder != 0 {
        try visitor.visitSingularInt32Field(value: _storage._textDecoder, fieldNumber: 495)
      }
      if _storage._textFormatDecoder != 0 {
        try visitor.visitSingularInt32Field(value: _storage._textFormatDecoder, fieldNumber: 496)
      }
      if _storage._textFormatDecodingError != 0 {
        try visitor.visitSingularInt32Field(value: _storage._textFormatDecodingError, fieldNumber: 497)
      }
      if _storage._textFormatEncodingVisitor != 0 {
        try visitor.visitSingularInt32Field(value: _storage._textFormatEncodingVisitor, fieldNumber: 498)
      }
      if _storage._textFormatString != 0 {
        try visitor.visitSingularInt32Field(value: _storage._textFormatString, fieldNumber: 499)
      }
      if _storage._throws != 0 {
        try visitor.visitSingularInt32Field(value: _storage._throws, fieldNumber: 500)
      }
      if _storage._timeInterval != 0 {
        try visitor.visitSingularInt32Field(value: _storage._timeInterval, fieldNumber: 501)
      }
      if _storage._timeIntervalSince1970 != 0 {
        try visitor.visitSingularInt32Field(value: _storage._timeIntervalSince1970, fieldNumber: 502)
      }
      if _storage._timeIntervalSinceReferenceDate != 0 {
        try visitor.visitSingularInt32Field(value: _storage._timeIntervalSinceReferenceDate, fieldNumber: 503)
      }
      if _storage._timestamp != 0 {
        try visitor.visitSingularInt32Field(value: _storage._timestamp, fieldNumber: 504)
      }
      if _storage._total != 0 {
        try visitor.visitSingularInt32Field(value: _storage._total, fieldNumber: 505)
      }
      if _storage._totalSize != 0 {
        try visitor.visitSingularInt32Field(value: _storage._totalSize, fieldNumber: 506)
      }
      if _storage._traverse != 0 {
        try visitor.visitSingularInt32Field(value: _storage._traverse, fieldNumber: 507)
      }
      if _storage._true != 0 {
        try visitor.visitSingularInt32Field(value: _storage._true, fieldNumber: 508)
      }
      if _storage._try != 0 {
        try visitor.visitSingularInt32Field(value: _storage._try, fieldNumber: 509)
      }
      if _storage._type != 0 {
        try visitor.visitSingularInt32Field(value: _storage._type, fieldNumber: 510)
      }
      if _storage._typealias != 0 {
        try visitor.visitSingularInt32Field(value: _storage._typealias, fieldNumber: 511)
      }
      if _storage._typePrefix != 0 {
        try visitor.visitSingularInt32Field(value: _storage._typePrefix, fieldNumber: 512)
      }
      if _storage._typeStart != 0 {
        try visitor.visitSingularInt32Field(value: _storage._typeStart, fieldNumber: 513)
      }
      if _storage._typeUnknown != 0 {
        try visitor.visitSingularInt32Field(value: _storage._typeUnknown, fieldNumber: 514)
      }
      if _storage._typeURL != 0 {
        try visitor.visitSingularInt32Field(value: _storage._typeURL, fieldNumber: 515)
      }
      if _storage._uint32 != 0 {
        try visitor.visitSingularInt32Field(value: _storage._uint32, fieldNumber: 516)
      }
      if _storage._uint32Value != 0 {
        try visitor.visitSingularInt32Field(value: _storage._uint32Value, fieldNumber: 517)
      }
      if _storage._uint64 != 0 {
        try visitor.visitSingularInt32Field(value: _storage._uint64, fieldNumber: 518)
      }
      if _storage._uint64Value != 0 {
        try visitor.visitSingularInt32Field(value: _storage._uint64Value, fieldNumber: 519)
      }
      if _storage._uint8 != 0 {
        try visitor.visitSingularInt32Field(value: _storage._uint8, fieldNumber: 520)
      }
      if _storage._unicodeScalarLiteral != 0 {
        try visitor.visitSingularInt32Field(value: _storage._unicodeScalarLiteral, fieldNumber: 521)
      }
      if _storage._unicodeScalarLiteralType != 0 {
        try visitor.visitSingularInt32Field(value: _storage._unicodeScalarLiteralType, fieldNumber: 522)
      }
      if _storage._unicodeScalars != 0 {
        try visitor.visitSingularInt32Field(value: _storage._unicodeScalars, fieldNumber: 523)
      }
      if _storage._unicodeScalarView != 0 {
        try visitor.visitSingularInt32Field(value: _storage._unicodeScalarView, fieldNumber: 524)
      }
      if _storage._union != 0 {
        try visitor.visitSingularInt32Field(value: _storage._union, fieldNumber: 525)
      }
      if _storage._unknown != 0 {
        try visitor.visitSingularInt32Field(value: _storage._unknown, fieldNumber: 526)
      }
      if _storage._unknownFields_p != 0 {
        try visitor.visitSingularInt32Field(value: _storage._unknownFields_p, fieldNumber: 527)
      }
      if _storage._unknownStorage != 0 {
        try visitor.visitSingularInt32Field(value: _storage._unknownStorage, fieldNumber: 528)
      }
      if _storage._unpackTo != 0 {
        try visitor.visitSingularInt32Field(value: _storage._unpackTo, fieldNumber: 529)
      }
      if _storage._unsafeBufferPointer != 0 {
        try visitor.visitSingularInt32Field(value: _storage._unsafeBufferPointer, fieldNumber: 530)
      }
      if _storage._unsafeMutablePointer != 0 {
        try visitor.visitSingularInt32Field(value: _storage._unsafeMutablePointer, fieldNumber: 531)
      }
      if _storage._unsafePointer != 0 {
        try visitor.visitSingularInt32Field(value: _storage._unsafePointer, fieldNumber: 532)
      }
      if _storage._updatedOptions != 0 {
        try visitor.visitSingularInt32Field(value: _storage._updatedOptions, fieldNumber: 533)
      }
      if _storage._url != 0 {
        try visitor.visitSingularInt32Field(value: _storage._url, fieldNumber: 534)
      }
      if _storage._utf8 != 0 {
        try visitor.visitSingularInt32Field(value: _storage._utf8, fieldNumber: 535)
      }
      if _storage._utf8Codec != 0 {
        try visitor.visitSingularInt32Field(value: _storage._utf8Codec, fieldNumber: 536)
      }
      if _storage._utf8ToDouble != 0 {
        try visitor.visitSingularInt32Field(value: _storage._utf8ToDouble, fieldNumber: 537)
      }
      if _storage._utf8View != 0 {
        try visitor.visitSingularInt32Field(value: _storage._utf8View, fieldNumber: 538)
      }
      if _storage._v != 0 {
        try visitor.visitSingularInt32Field(value: _storage._v, fieldNumber: 539)
      }
      if _storage._value != 0 {
        try visitor.visitSingularInt32Field(value: _storage._value, fieldNumber: 540)
      }
      if _storage._valueField != 0 {
        try visitor.visitSingularInt32Field(value: _storage._valueField, fieldNumber: 541)
      }
      if _storage._values != 0 {
        try visitor.visitSingularInt32Field(value: _storage._values, fieldNumber: 542)
      }
      if _storage._valueType != 0 {
        try visitor.visitSingularInt32Field(value: _storage._valueType, fieldNumber: 543)
      }
      if _storage._var != 0 {
        try visitor.visitSingularInt32Field(value: _storage._var, fieldNumber: 544)
      }
      if _storage._version != 0 {
        try visitor.visitSingularInt32Field(value: _storage._version, fieldNumber: 545)
      }
      if _storage._versionString != 0 {
        try visitor.visitSingularInt32Field(value: _storage._versionString, fieldNumber: 546)
      }
      if _storage._visitExtensionFields != 0 {
        try visitor.visitSingularInt32Field(value: _storage._visitExtensionFields, fieldNumber: 547)
      }
      if _storage._visitExtensionFieldsAsMessageSet != 0 {
        try visitor.visitSingularInt32Field(value: _storage._visitExtensionFieldsAsMessageSet, fieldNumber: 548)
      }
      if _storage._visitMapField != 0 {
        try visitor.visitSingularInt32Field(value: _storage._visitMapField, fieldNumber: 549)
      }
      if _storage._visitor != 0 {
        try visitor.visitSingularInt32Field(value: _storage._visitor, fieldNumber: 550)
      }
      if _storage._visitPacked != 0 {
        try visitor.visitSingularInt32Field(value: _storage._visitPacked, fieldNumber: 551)
      }
      if _storage._visitPackedBoolField != 0 {
        try visitor.visitSingularInt32Field(value: _storage._visitPackedBoolField, fieldNumber: 552)
      }
      if _storage._visitPackedDoubleField != 0 {
        try visitor.visitSingularInt32Field(value: _storage._visitPackedDoubleField, fieldNumber: 553)
      }
      if _storage._visitPackedEnumField != 0 {
        try visitor.visitSingularInt32Field(value: _storage._visitPackedEnumField, fieldNumber: 554)
      }
      if _storage._visitPackedFixed32Field != 0 {
        try visitor.visitSingularInt32Field(value: _storage._visitPackedFixed32Field, fieldNumber: 555)
      }
      if _storage._visitPackedFixed64Field != 0 {
        try visitor.visitSingularInt32Field(value: _storage._visitPackedFixed64Field, fieldNumber: 556)
      }
      if _storage._visitPackedFloatField != 0 {
        try visitor.visitSingularInt32Field(value: _storage._visitPackedFloatField, fieldNumber: 557)
      }
      if _storage._visitPackedInt32Field != 0 {
        try visitor.visitSingularInt32Field(value: _storage._visitPackedInt32Field, fieldNumber: 558)
      }
      if _storage._visitPackedInt64Field != 0 {
        try visitor.visitSingularInt32Field(value: _storage._visitPackedInt64Field, fieldNumber: 559)
      }
      if _storage._visitPackedSfixed32Field != 0 {
        try visitor.visitSingularInt32Field(value: _storage._visitPackedSfixed32Field, fieldNumber: 560)
      }
      if _storage._visitPackedSfixed64Field != 0 {
        try visitor.visitSingularInt32Field(value: _storage._visitPackedSfixed64Field, fieldNumber: 561)
      }
      if _storage._visitPackedSint32Field != 0 {
        try visitor.visitSingularInt32Field(value: _storage._visitPackedSint32Field, fieldNumber: 562)
      }
      if _storage._visitPackedSint64Field != 0 {
        try visitor.visitSingularInt32Field(value: _storage._visitPackedSint64Field, fieldNumber: 563)
      }
      if _storage._visitPackedUint32Field != 0 {
        try visitor.visitSingularInt32Field(value: _storage._visitPackedUint32Field, fieldNumber: 564)
      }
      if _storage._visitPackedUint64Field != 0 {
        try visitor.visitSingularInt32Field(value: _storage._visitPackedUint64Field, fieldNumber: 565)
      }
      if _storage._visitRepeated != 0 {
        try visitor.visitSingularInt32Field(value: _storage._visitRepeated, fieldNumber: 566)
      }
      if _storage._visitRepeatedBoolField != 0 {
        try visitor.visitSingularInt32Field(value: _storage._visitRepeatedBoolField, fieldNumber: 567)
      }
      if _storage._visitRepeatedBytesField != 0 {
        try visitor.visitSingularInt32Field(value: _storage._visitRepeatedBytesField, fieldNumber: 568)
      }
      if _storage._visitRepeatedDoubleField != 0 {
        try visitor.visitSingularInt32Field(value: _storage._visitRepeatedDoubleField, fieldNumber: 569)
      }
      if _storage._visitRepeatedEnumField != 0 {
        try visitor.visitSingularInt32Field(value: _storage._visitRepeatedEnumField, fieldNumber: 570)
      }
      if _storage._visitRepeatedFixed32Field != 0 {
        try visitor.visitSingularInt32Field(value: _storage._visitRepeatedFixed32Field, fieldNumber: 571)
      }
      if _storage._visitRepeatedFixed64Field != 0 {
        try visitor.visitSingularInt32Field(value: _storage._visitRepeatedFixed64Field, fieldNumber: 572)
      }
      if _storage._visitRepeatedFloatField != 0 {
        try visitor.visitSingularInt32Field(value: _storage._visitRepeatedFloatField, fieldNumber: 573)
      }
      if _storage._visitRepeatedGroupField != 0 {
        try visitor.visitSingularInt32Field(value: _storage._visitRepeatedGroupField, fieldNumber: 574)
      }
      if _storage._visitRepeatedInt32Field != 0 {
        try visitor.visitSingularInt32Field(value: _storage._visitRepeatedInt32Field, fieldNumber: 575)
      }
      if _storage._visitRepeatedInt64Field != 0 {
        try visitor.visitSingularInt32Field(value: _storage._visitRepeatedInt64Field, fieldNumber: 576)
      }
      if _storage._visitRepeatedMessageField != 0 {
        try visitor.visitSingularInt32Field(value: _storage._visitRepeatedMessageField, fieldNumber: 577)
      }
      if _storage._visitRepeatedSfixed32Field != 0 {
        try visitor.visitSingularInt32Field(value: _storage._visitRepeatedSfixed32Field, fieldNumber: 578)
      }
      if _storage._visitRepeatedSfixed64Field != 0 {
        try visitor.visitSingularInt32Field(value: _storage._visitRepeatedSfixed64Field, fieldNumber: 579)
      }
      if _storage._visitRepeatedSint32Field != 0 {
        try visitor.visitSingularInt32Field(value: _storage._visitRepeatedSint32Field, fieldNumber: 580)
      }
      if _storage._visitRepeatedSint64Field != 0 {
        try visitor.visitSingularInt32Field(value: _storage._visitRepeatedSint64Field, fieldNumber: 581)
      }
      if _storage._visitRepeatedStringField != 0 {
        try visitor.visitSingularInt32Field(value: _storage._visitRepeatedStringField, fieldNumber: 582)
      }
      if _storage._visitRepeatedUint32Field != 0 {
        try visitor.visitSingularInt32Field(value: _storage._visitRepeatedUint32Field, fieldNumber: 583)
      }
      if _storage._visitRepeatedUint64Field != 0 {
        try visitor.visitSingularInt32Field(value: _storage._visitRepeatedUint64Field, fieldNumber: 584)
      }
      if _storage._visitSingular != 0 {
        try visitor.visitSingularInt32Field(value: _storage._visitSingular, fieldNumber: 585)
      }
      if _storage._visitSingularBoolField != 0 {
        try visitor.visitSingularInt32Field(value: _storage._visitSingularBoolField, fieldNumber: 586)
      }
      if _storage._visitSingularBytesField != 0 {
        try visitor.visitSingularInt32Field(value: _storage._visitSingularBytesField, fieldNumber: 587)
      }
      if _storage._visitSingularDoubleField != 0 {
        try visitor.visitSingularInt32Field(value: _storage._visitSingularDoubleField, fieldNumber: 588)
      }
      if _storage._visitSingularEnumField != 0 {
        try visitor.visitSingularInt32Field(value: _storage._visitSingularEnumField, fieldNumber: 589)
      }
      if _storage._visitSingularFixed32Field != 0 {
        try visitor.visitSingularInt32Field(value: _storage._visitSingularFixed32Field, fieldNumber: 590)
      }
      if _storage._visitSingularFixed64Field != 0 {
        try visitor.visitSingularInt32Field(value: _storage._visitSingularFixed64Field, fieldNumber: 591)
      }
      if _storage._visitSingularFloatField != 0 {
        try visitor.visitSingularInt32Field(value: _storage._visitSingularFloatField, fieldNumber: 592)
      }
      if _storage._visitSingularGroupField != 0 {
        try visitor.visitSingularInt32Field(value: _storage._visitSingularGroupField, fieldNumber: 593)
      }
      if _storage._visitSingularInt32Field != 0 {
        try visitor.visitSingularInt32Field(value: _storage._visitSingularInt32Field, fieldNumber: 594)
      }
      if _storage._visitSingularInt64Field != 0 {
        try visitor.visitSingularInt32Field(value: _storage._visitSingularInt64Field, fieldNumber: 595)
      }
      if _storage._visitSingularMessageField != 0 {
        try visitor.visitSingularInt32Field(value: _storage._visitSingularMessageField, fieldNumber: 596)
      }
      if _storage._visitSingularSfixed32Field != 0 {
        try visitor.visitSingularInt32Field(value: _storage._visitSingularSfixed32Field, fieldNumber: 597)
      }
      if _storage._visitSingularSfixed64Field != 0 {
        try visitor.visitSingularInt32Field(value: _storage._visitSingularSfixed64Field, fieldNumber: 598)
      }
      if _storage._visitSingularSint32Field != 0 {
        try visitor.visitSingularInt32Field(value: _storage._visitSingularSint32Field, fieldNumber: 599)
      }
      if _storage._visitSingularSint64Field != 0 {
        try visitor.visitSingularInt32Field(value: _storage._visitSingularSint64Field, fieldNumber: 600)
      }
      if _storage._visitSingularStringField != 0 {
        try visitor.visitSingularInt32Field(value: _storage._visitSingularStringField, fieldNumber: 601)
      }
      if _storage._visitSingularUint32Field != 0 {
        try visitor.visitSingularInt32Field(value: _storage._visitSingularUint32Field, fieldNumber: 602)
      }
      if _storage._visitSingularUint64Field != 0 {
        try visitor.visitSingularInt32Field(value: _storage._visitSingularUint64Field, fieldNumber: 603)
      }
      if _storage._visitUnknown != 0 {
        try visitor.visitSingularInt32Field(value: _storage._visitUnknown, fieldNumber: 604)
      }
      if _storage._wasDecoded != 0 {
        try visitor.visitSingularInt32Field(value: _storage._wasDecoded, fieldNumber: 605)
      }
      if _storage._where != 0 {
        try visitor.visitSingularInt32Field(value: _storage._where, fieldNumber: 606)
      }
      if _storage._wireFormat != 0 {
        try visitor.visitSingularInt32Field(value: _storage._wireFormat, fieldNumber: 607)
      }
      if _storage._with != 0 {
        try visitor.visitSingularInt32Field(value: _storage._with, fieldNumber: 608)
      }
      if _storage._wrappedType != 0 {
        try visitor.visitSingularInt32Field(value: _storage._wrappedType, fieldNumber: 609)
      }
      if _storage._written != 0 {
        try visitor.visitSingularInt32Field(value: _storage._written, fieldNumber: 610)
      }
      if _storage._yday != 0 {
        try visitor.visitSingularInt32Field(value: _storage._yday, fieldNumber: 611)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: ProtobufUnittestGenerated_GeneratedSwiftReservedFields) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._adjusted != other_storage._adjusted {return false}
        if _storage._allocate != other_storage._allocate {return false}
        if _storage._any != other_storage._any {return false}
        if _storage._anyExtensionField != other_storage._anyExtensionField {return false}
        if _storage._anyMessageExtension != other_storage._anyMessageExtension {return false}
        if _storage._anyMessageStorage != other_storage._anyMessageStorage {return false}
        if _storage._anyUnpackError != other_storage._anyUnpackError {return false}
        if _storage._api != other_storage._api {return false}
        if _storage._appended != other_storage._appended {return false}
        if _storage._appendUintHex != other_storage._appendUintHex {return false}
        if _storage._appendUnknown != other_storage._appendUnknown {return false}
        if _storage._areAllInitialized != other_storage._areAllInitialized {return false}
        if _storage._array != other_storage._array {return false}
        if _storage._arrayLiteral != other_storage._arrayLiteral {return false}
        if _storage._arraySeparator != other_storage._arraySeparator {return false}
        if _storage._as != other_storage._as {return false}
        if _storage._asciiOpenCurlyBracket != other_storage._asciiOpenCurlyBracket {return false}
        if _storage._asciiZero != other_storage._asciiZero {return false}
        if _storage._available != other_storage._available {return false}
        if _storage._b != other_storage._b {return false}
        if _storage._baseType != other_storage._baseType {return false}
        if _storage._binary != other_storage._binary {return false}
        if _storage._binaryDecoder != other_storage._binaryDecoder {return false}
        if _storage._binaryDecodingError != other_storage._binaryDecodingError {return false}
        if _storage._binaryDecodingOptions != other_storage._binaryDecodingOptions {return false}
        if _storage._binaryDelimited != other_storage._binaryDelimited {return false}
        if _storage._binaryEncoder != other_storage._binaryEncoder {return false}
        if _storage._binaryEncodingError != other_storage._binaryEncodingError {return false}
        if _storage._binaryEncodingMessageSetSizeVisitor != other_storage._binaryEncodingMessageSetSizeVisitor {return false}
        if _storage._binaryEncodingMessageSetVisitor != other_storage._binaryEncodingMessageSetVisitor {return false}
        if _storage._binaryEncodingSizeVisitor != other_storage._binaryEncodingSizeVisitor {return false}
        if _storage._binaryEncodingVisitor != other_storage._binaryEncodingVisitor {return false}
        if _storage._bodySize != other_storage._bodySize {return false}
        if _storage._bool != other_storage._bool {return false}
        if _storage._booleanLiteral != other_storage._booleanLiteral {return false}
        if _storage._booleanLiteralType != other_storage._booleanLiteralType {return false}
        if _storage._boolValue != other_storage._boolValue {return false}
        if _storage._buffer != other_storage._buffer {return false}
        if _storage._bytes != other_storage._bytes {return false}
        if _storage._bytesInGroup != other_storage._bytesInGroup {return false}
        if _storage._bytesRead != other_storage._bytesRead {return false}
        if _storage._bytesValue != other_storage._bytesValue {return false}
        if _storage._c != other_storage._c {return false}
        if _storage._capacity != other_storage._capacity {return false}
        if _storage._capitalizeNext != other_storage._capitalizeNext {return false}
        if _storage._cardinality != other_storage._cardinality {return false}
        if _storage._character != other_storage._character {return false}
        if _storage._characters != other_storage._characters {return false}
        if _storage._chars != other_storage._chars {return false}
        if _storage._class != other_storage._class {return false}
        if _storage._clearExtensionValue_p != other_storage._clearExtensionValue_p {return false}
        if _storage._clearSourceContext_p != other_storage._clearSourceContext_p {return false}
        if _storage._clearValue_p != other_storage._clearValue_p {return false}
        if _storage._codeUnits != other_storage._codeUnits {return false}
        if _storage._collection != other_storage._collection {return false}
        if _storage._com != other_storage._com {return false}
        if _storage._comma != other_storage._comma {return false}
        if _storage._contentsOf != other_storage._contentsOf {return false}
        if _storage._count != other_storage._count {return false}
        if _storage._countVarintsInBuffer != other_storage._countVarintsInBuffer {return false}
        if _storage._customCodable != other_storage._customCodable {return false}
        if _storage._customDebugStringConvertible != other_storage._customDebugStringConvertible {return false}
        if _storage._d != other_storage._d {return false}
        if _storage._data != other_storage._data {return false}
        if _storage._dataPointer != other_storage._dataPointer {return false}
        if _storage._dataResult != other_storage._dataResult {return false}
        if _storage._dataSize != other_storage._dataSize {return false}
        if _storage._date != other_storage._date {return false}
        if _storage._daySec != other_storage._daySec {return false}
        if _storage._daysSinceEpoch != other_storage._daysSinceEpoch {return false}
        if _storage._debugDescription_p != other_storage._debugDescription_p {return false}
        if _storage._decoded != other_storage._decoded {return false}
        if _storage._decodedFromJsonnull != other_storage._decodedFromJsonnull {return false}
        if _storage._decodeExtensionField != other_storage._decodeExtensionField {return false}
        if _storage._decodeExtensionFieldsAsMessageSet != other_storage._decodeExtensionFieldsAsMessageSet {return false}
        if _storage._decodeJson != other_storage._decodeJson {return false}
        if _storage._decodeMapField != other_storage._decodeMapField {return false}
        if _storage._decodeMessage != other_storage._decodeMessage {return false}
        if _storage._decoder != other_storage._decoder {return false}
        if _storage._decodeRepeated != other_storage._decodeRepeated {return false}
        if _storage._decodeRepeatedBoolField != other_storage._decodeRepeatedBoolField {return false}
        if _storage._decodeRepeatedBytesField != other_storage._decodeRepeatedBytesField {return false}
        if _storage._decodeRepeatedDoubleField != other_storage._decodeRepeatedDoubleField {return false}
        if _storage._decodeRepeatedEnumField != other_storage._decodeRepeatedEnumField {return false}
        if _storage._decodeRepeatedFixed32Field != other_storage._decodeRepeatedFixed32Field {return false}
        if _storage._decodeRepeatedFixed64Field != other_storage._decodeRepeatedFixed64Field {return false}
        if _storage._decodeRepeatedFloatField != other_storage._decodeRepeatedFloatField {return false}
        if _storage._decodeRepeatedGroupField != other_storage._decodeRepeatedGroupField {return false}
        if _storage._decodeRepeatedInt32Field != other_storage._decodeRepeatedInt32Field {return false}
        if _storage._decodeRepeatedInt64Field != other_storage._decodeRepeatedInt64Field {return false}
        if _storage._decodeRepeatedMessageField != other_storage._decodeRepeatedMessageField {return false}
        if _storage._decodeRepeatedSfixed32Field != other_storage._decodeRepeatedSfixed32Field {return false}
        if _storage._decodeRepeatedSfixed64Field != other_storage._decodeRepeatedSfixed64Field {return false}
        if _storage._decodeRepeatedSint32Field != other_storage._decodeRepeatedSint32Field {return false}
        if _storage._decodeRepeatedSint64Field != other_storage._decodeRepeatedSint64Field {return false}
        if _storage._decodeRepeatedStringField != other_storage._decodeRepeatedStringField {return false}
        if _storage._decodeRepeatedUint32Field != other_storage._decodeRepeatedUint32Field {return false}
        if _storage._decodeRepeatedUint64Field != other_storage._decodeRepeatedUint64Field {return false}
        if _storage._decodeSingular != other_storage._decodeSingular {return false}
        if _storage._decodeSingularBoolField != other_storage._decodeSingularBoolField {return false}
        if _storage._decodeSingularBytesField != other_storage._decodeSingularBytesField {return false}
        if _storage._decodeSingularDoubleField != other_storage._decodeSingularDoubleField {return false}
        if _storage._decodeSingularEnumField != other_storage._decodeSingularEnumField {return false}
        if _storage._decodeSingularFixed32Field != other_storage._decodeSingularFixed32Field {return false}
        if _storage._decodeSingularFixed64Field != other_storage._decodeSingularFixed64Field {return false}
        if _storage._decodeSingularFloatField != other_storage._decodeSingularFloatField {return false}
        if _storage._decodeSingularGroupField != other_storage._decodeSingularGroupField {return false}
        if _storage._decodeSingularInt32Field != other_storage._decodeSingularInt32Field {return false}
        if _storage._decodeSingularInt64Field != other_storage._decodeSingularInt64Field {return false}
        if _storage._decodeSingularMessageField != other_storage._decodeSingularMessageField {return false}
        if _storage._decodeSingularSfixed32Field != other_storage._decodeSingularSfixed32Field {return false}
        if _storage._decodeSingularSfixed64Field != other_storage._decodeSingularSfixed64Field {return false}
        if _storage._decodeSingularSint32Field != other_storage._decodeSingularSint32Field {return false}
        if _storage._decodeSingularSint64Field != other_storage._decodeSingularSint64Field {return false}
        if _storage._decodeSingularStringField != other_storage._decodeSingularStringField {return false}
        if _storage._decodeSingularUint32Field != other_storage._decodeSingularUint32Field {return false}
        if _storage._decodeSingularUint64Field != other_storage._decodeSingularUint64Field {return false}
        if _storage._decodeTextFormat != other_storage._decodeTextFormat {return false}
        if _storage._defaultAnyTypeUrlprefix != other_storage._defaultAnyTypeUrlprefix {return false}
        if _storage._defaultValue != other_storage._defaultValue {return false}
        if _storage._description_p != other_storage._description_p {return false}
        if _storage._dictionary != other_storage._dictionary {return false}
        if _storage._dictionaryLiteral != other_storage._dictionaryLiteral {return false}
        if _storage._digit != other_storage._digit {return false}
        if _storage._digit0 != other_storage._digit0 {return false}
        if _storage._digit1 != other_storage._digit1 {return false}
        if _storage._digitCount != other_storage._digitCount {return false}
        if _storage._digits != other_storage._digits {return false}
        if _storage._digitValue != other_storage._digitValue {return false}
        if _storage._discardableResult != other_storage._discardableResult {return false}
        if _storage._discardUnknownFields != other_storage._discardUnknownFields {return false}
        if _storage._distance != other_storage._distance {return false}
        if _storage._double != other_storage._double {return false}
        if _storage._doubleToUtf8 != other_storage._doubleToUtf8 {return false}
        if _storage._doubleValue != other_storage._doubleValue {return false}
        if _storage._duration != other_storage._duration {return false}
        if _storage._e != other_storage._e {return false}
        if _storage._element != other_storage._element {return false}
        if _storage._elements != other_storage._elements {return false}
        if _storage._emitExtensionFieldName != other_storage._emitExtensionFieldName {return false}
        if _storage._emitFieldName != other_storage._emitFieldName {return false}
        if _storage._emitFieldNumber != other_storage._emitFieldNumber {return false}
        if _storage._empty != other_storage._empty {return false}
        if _storage._emptyData != other_storage._emptyData {return false}
        if _storage._encoded != other_storage._encoded {return false}
        if _storage._encodedJsonstring != other_storage._encodedJsonstring {return false}
        if _storage._encodedSize != other_storage._encodedSize {return false}
        if _storage._encodeField != other_storage._encodeField {return false}
        if _storage._encoder != other_storage._encoder {return false}
        if _storage._end != other_storage._end {return false}
        if _storage._endArray != other_storage._endArray {return false}
        if _storage._endMessageField != other_storage._endMessageField {return false}
        if _storage._endObject != other_storage._endObject {return false}
        if _storage._endRegularField != other_storage._endRegularField {return false}
        if _storage._enum != other_storage._enum {return false}
        if _storage._enumvalue != other_storage._enumvalue {return false}
        if _storage._equatable != other_storage._equatable {return false}
        if _storage._error != other_storage._error {return false}
        if _storage._expressibleByArrayLiteral != other_storage._expressibleByArrayLiteral {return false}
        if _storage._expressibleByDictionaryLiteral != other_storage._expressibleByDictionaryLiteral {return false}
        if _storage._ext != other_storage._ext {return false}
        if _storage._extDecoder != other_storage._extDecoder {return false}
        if _storage._extendedGraphemeClusterLiteral != other_storage._extendedGraphemeClusterLiteral {return false}
        if _storage._extendedGraphemeClusterLiteralType != other_storage._extendedGraphemeClusterLiteralType {return false}
        if _storage._extensibleMessage != other_storage._extensibleMessage {return false}
        if _storage._extension != other_storage._extension {return false}
        if _storage._extensionField != other_storage._extensionField {return false}
        if _storage._extensionFieldNumber != other_storage._extensionFieldNumber {return false}
        if _storage._extensionFieldValueSet != other_storage._extensionFieldValueSet {return false}
        if _storage._extensionMap != other_storage._extensionMap {return false}
        if _storage._extensions != other_storage._extensions {return false}
        if _storage._extras != other_storage._extras {return false}
        if _storage._f != other_storage._f {return false}
        if _storage._false != other_storage._false {return false}
        if _storage._field != other_storage._field {return false}
        if _storage._fieldData != other_storage._fieldData {return false}
        if _storage._fieldMask != other_storage._fieldMask {return false}
        if _storage._fieldName != other_storage._fieldName {return false}
        if _storage._fieldNameCount != other_storage._fieldNameCount {return false}
        if _storage._fieldNum != other_storage._fieldNum {return false}
        if _storage._fieldNumber != other_storage._fieldNumber {return false}
        if _storage._fieldNumberForProto != other_storage._fieldNumberForProto {return false}
        if _storage._fields != other_storage._fields {return false}
        if _storage._fieldSize != other_storage._fieldSize {return false}
        if _storage._fieldTag != other_storage._fieldTag {return false}
        if _storage._fieldType != other_storage._fieldType {return false}
        if _storage._fieldValue != other_storage._fieldValue {return false}
        if _storage._fileName != other_storage._fileName {return false}
        if _storage._filter != other_storage._filter {return false}
        if _storage._firstItem != other_storage._firstItem {return false}
        if _storage._float != other_storage._float {return false}
        if _storage._floatLiteral != other_storage._floatLiteral {return false}
        if _storage._floatLiteralType != other_storage._floatLiteralType {return false}
        if _storage._floatToUtf8 != other_storage._floatToUtf8 {return false}
        if _storage._floatValue != other_storage._floatValue {return false}
        if _storage._forMessageName != other_storage._forMessageName {return false}
        if _storage._formUnion != other_storage._formUnion {return false}
        if _storage._forReadingFrom != other_storage._forReadingFrom {return false}
        if _storage._forTypeURL != other_storage._forTypeURL {return false}
        if _storage._forwardParser != other_storage._forwardParser {return false}
        if _storage._forWritingInto != other_storage._forWritingInto {return false}
        if _storage._from != other_storage._from {return false}
        if _storage._fromAscii2 != other_storage._fromAscii2 {return false}
        if _storage._fromAscii4 != other_storage._fromAscii4 {return false}
        if _storage._fromHexDigit != other_storage._fromHexDigit {return false}
        if _storage._func != other_storage._func {return false}
        if _storage._g != other_storage._g {return false}
        if _storage._get != other_storage._get {return false}
        if _storage._getExtensionValue != other_storage._getExtensionValue {return false}
        if _storage._googleapis != other_storage._googleapis {return false}
        if _storage._googleProtobufAny != other_storage._googleProtobufAny {return false}
        if _storage._googleProtobufApi != other_storage._googleProtobufApi {return false}
        if _storage._googleProtobufBoolValue != other_storage._googleProtobufBoolValue {return false}
        if _storage._googleProtobufBytesValue != other_storage._googleProtobufBytesValue {return false}
        if _storage._googleProtobufDoubleValue != other_storage._googleProtobufDoubleValue {return false}
        if _storage._googleProtobufDuration != other_storage._googleProtobufDuration {return false}
        if _storage._googleProtobufEmpty != other_storage._googleProtobufEmpty {return false}
        if _storage._googleProtobufEnum != other_storage._googleProtobufEnum {return false}
        if _storage._googleProtobufEnumValue != other_storage._googleProtobufEnumValue {return false}
        if _storage._googleProtobufField != other_storage._googleProtobufField {return false}
        if _storage._googleProtobufFieldMask != other_storage._googleProtobufFieldMask {return false}
        if _storage._googleProtobufFloatValue != other_storage._googleProtobufFloatValue {return false}
        if _storage._googleProtobufInt32Value != other_storage._googleProtobufInt32Value {return false}
        if _storage._googleProtobufInt64Value != other_storage._googleProtobufInt64Value {return false}
        if _storage._googleProtobufListValue != other_storage._googleProtobufListValue {return false}
        if _storage._googleProtobufMethod != other_storage._googleProtobufMethod {return false}
        if _storage._googleProtobufMixin != other_storage._googleProtobufMixin {return false}
        if _storage._googleProtobufNullValue != other_storage._googleProtobufNullValue {return false}
        if _storage._googleProtobufOption != other_storage._googleProtobufOption {return false}
        if _storage._googleProtobufSourceContext != other_storage._googleProtobufSourceContext {return false}
        if _storage._googleProtobufStringValue != other_storage._googleProtobufStringValue {return false}
        if _storage._googleProtobufStruct != other_storage._googleProtobufStruct {return false}
        if _storage._googleProtobufSyntax != other_storage._googleProtobufSyntax {return false}
        if _storage._googleProtobufTimestamp != other_storage._googleProtobufTimestamp {return false}
        if _storage._googleProtobufType != other_storage._googleProtobufType {return false}
        if _storage._googleProtobufUint32Value != other_storage._googleProtobufUint32Value {return false}
        if _storage._googleProtobufUint64Value != other_storage._googleProtobufUint64Value {return false}
        if _storage._googleProtobufValue != other_storage._googleProtobufValue {return false}
        if _storage._group != other_storage._group {return false}
        if _storage._groupSize != other_storage._groupSize {return false}
        if _storage._h != other_storage._h {return false}
        if _storage._handleConflictingOneOf != other_storage._handleConflictingOneOf {return false}
        if _storage._hasExtensionValue_p != other_storage._hasExtensionValue_p {return false}
        if _storage._hash != other_storage._hash {return false}
        if _storage._hashable != other_storage._hashable {return false}
        if _storage._hashValue_p != other_storage._hashValue_p {return false}
        if _storage._hashVisitor != other_storage._hashVisitor {return false}
        if _storage._hasSourceContext_p != other_storage._hasSourceContext_p {return false}
        if _storage._hasValue_p != other_storage._hasValue_p {return false}
        if _storage._hour != other_storage._hour {return false}
        if _storage._i != other_storage._i {return false}
        if _storage._index != other_storage._index {return false}
        if _storage._init_p != other_storage._init_p {return false}
        if _storage._inout != other_storage._inout {return false}
        if _storage._insert != other_storage._insert {return false}
        if _storage._int != other_storage._int {return false}
        if _storage._int32 != other_storage._int32 {return false}
        if _storage._int32Value != other_storage._int32Value {return false}
        if _storage._int64 != other_storage._int64 {return false}
        if _storage._int64Value != other_storage._int64Value {return false}
        if _storage._int8 != other_storage._int8 {return false}
        if _storage._integerLiteral != other_storage._integerLiteral {return false}
        if _storage._integerLiteralType != other_storage._integerLiteralType {return false}
        if _storage._intern != other_storage._intern {return false}
        if _storage._internal != other_storage._internal {return false}
        if _storage._internalState != other_storage._internalState {return false}
        if _storage._ints != other_storage._ints {return false}
        if _storage._isA != other_storage._isA {return false}
        if _storage._isEqual != other_storage._isEqual {return false}
        if _storage._isEqualTo != other_storage._isEqualTo {return false}
        if _storage._isInitialized_p != other_storage._isInitialized_p {return false}
        if _storage._it != other_storage._it {return false}
        if _storage._itemTagsEncodedSize != other_storage._itemTagsEncodedSize {return false}
        if _storage._iterator != other_storage._iterator {return false}
        if _storage._i2166136261 != other_storage._i2166136261 {return false}
        if _storage._jsondecoder != other_storage._jsondecoder {return false}
        if _storage._jsondecodingError != other_storage._jsondecodingError {return false}
        if _storage._jsondecodingOptions != other_storage._jsondecodingOptions {return false}
        if _storage._jsonEncoder != other_storage._jsonEncoder {return false}
        if _storage._jsonencodingError != other_storage._jsonencodingError {return false}
        if _storage._jsonencodingVisitor != other_storage._jsonencodingVisitor {return false}
        if _storage._jsonmapEncodingVisitor != other_storage._jsonmapEncodingVisitor {return false}
        if _storage._jsonName != other_storage._jsonName {return false}
        if _storage._jsonPath != other_storage._jsonPath {return false}
        if _storage._jsonPaths != other_storage._jsonPaths {return false}
        if _storage._jsonscanner != other_storage._jsonscanner {return false}
        if _storage._jsonString != other_storage._jsonString {return false}
        if _storage._jsonText != other_storage._jsonText {return false}
        if _storage._jsonUtf8Data != other_storage._jsonUtf8Data {return false}
        if _storage._k != other_storage._k {return false}
        if _storage._key != other_storage._key {return false}
        if _storage._keyField != other_storage._keyField {return false}
        if _storage._keyType != other_storage._keyType {return false}
        if _storage._kind != other_storage._kind {return false}
        if _storage._l != other_storage._l {return false}
        if _storage._length != other_storage._length {return false}
        if _storage._let != other_storage._let {return false}
        if _storage._lhs != other_storage._lhs {return false}
        if _storage._list != other_storage._list {return false}
        if _storage._listOfMessages != other_storage._listOfMessages {return false}
        if _storage._listValue != other_storage._listValue {return false}
        if _storage._littleEndian != other_storage._littleEndian {return false}
        if _storage._littleEndianBytes != other_storage._littleEndianBytes {return false}
        if _storage._m != other_storage._m {return false}
        if _storage._major != other_storage._major {return false}
        if _storage._makeIterator != other_storage._makeIterator {return false}
        if _storage._mapHash != other_storage._mapHash {return false}
        if _storage._mapKeyType != other_storage._mapKeyType {return false}
        if _storage._mapNameResolver != other_storage._mapNameResolver {return false}
        if _storage._mapToMessages != other_storage._mapToMessages {return false}
        if _storage._mapValueType != other_storage._mapValueType {return false}
        if _storage._mapVisitor != other_storage._mapVisitor {return false}
        if _storage._mdayStart != other_storage._mdayStart {return false}
        if _storage._merge != other_storage._merge {return false}
        if _storage._message != other_storage._message {return false}
        if _storage._messageDepthLimit != other_storage._messageDepthLimit {return false}
        if _storage._messageExtension != other_storage._messageExtension {return false}
        if _storage._messageImplementationBase != other_storage._messageImplementationBase {return false}
        if _storage._messageSet != other_storage._messageSet {return false}
        if _storage._messageType != other_storage._messageType {return false}
        if _storage._method != other_storage._method {return false}
        if _storage._methods != other_storage._methods {return false}
        if _storage._minor != other_storage._minor {return false}
        if _storage._mixin != other_storage._mixin {return false}
        if _storage._mixins != other_storage._mixins {return false}
        if _storage._month != other_storage._month {return false}
        if _storage._msgExtension != other_storage._msgExtension {return false}
        if _storage._mutating != other_storage._mutating {return false}
        if _storage._n != other_storage._n {return false}
        if _storage._name != other_storage._name {return false}
        if _storage._nameDescription != other_storage._nameDescription {return false}
        if _storage._nameMap != other_storage._nameMap {return false}
        if _storage._nameResolver != other_storage._nameResolver {return false}
        if _storage._names != other_storage._names {return false}
        if _storage._nanos != other_storage._nanos {return false}
        if _storage._nativeBytes != other_storage._nativeBytes {return false}
        if _storage._nativeEndianBytes != other_storage._nativeEndianBytes {return false}
        if _storage._newL != other_storage._newL {return false}
        if _storage._newList != other_storage._newList {return false}
        if _storage._newValue != other_storage._newValue {return false}
        if _storage._nextByte != other_storage._nextByte {return false}
        if _storage._nextFieldNumber != other_storage._nextFieldNumber {return false}
        if _storage._nil != other_storage._nil {return false}
        if _storage._nilLiteral != other_storage._nilLiteral {return false}
        if _storage._nullValue != other_storage._nullValue {return false}
        if _storage._number != other_storage._number {return false}
        if _storage._numberValue != other_storage._numberValue {return false}
        if _storage._of != other_storage._of {return false}
        if _storage._oneofIndex != other_storage._oneofIndex {return false}
        if _storage._oneofs != other_storage._oneofs {return false}
        if _storage._oneOfKind != other_storage._oneOfKind {return false}
        if _storage._option != other_storage._option {return false}
        if _storage._optionalEnumExtensionField != other_storage._optionalEnumExtensionField {return false}
        if _storage._optionalExtensionField != other_storage._optionalExtensionField {return false}
        if _storage._optionalGroupExtensionField != other_storage._optionalGroupExtensionField {return false}
        if _storage._optionalMessageExtensionField != other_storage._optionalMessageExtensionField {return false}
        if _storage._options != other_storage._options {return false}
        if _storage._other != other_storage._other {return false}
        if _storage._others != other_storage._others {return false}
        if _storage._out != other_storage._out {return false}
        if _storage._output != other_storage._output {return false}
        if _storage._p != other_storage._p {return false}
        if _storage._packed != other_storage._packed {return false}
        if _storage._packedEnumExtensionField != other_storage._packedEnumExtensionField {return false}
        if _storage._packedExtensionField != other_storage._packedExtensionField {return false}
        if _storage._packedSize != other_storage._packedSize {return false}
        if _storage._padding != other_storage._padding {return false}
        if _storage._parent != other_storage._parent {return false}
        if _storage._parse != other_storage._parse {return false}
        if _storage._partial != other_storage._partial {return false}
        if _storage._path != other_storage._path {return false}
        if _storage._paths != other_storage._paths {return false}
        if _storage._payload != other_storage._payload {return false}
        if _storage._payloadSize != other_storage._payloadSize {return false}
        if _storage._pointer != other_storage._pointer {return false}
        if _storage._pos != other_storage._pos {return false}
        if _storage._prefix != other_storage._prefix {return false}
        if _storage._preTraverse != other_storage._preTraverse {return false}
        if _storage._proto2 != other_storage._proto2 {return false}
        if _storage._proto3DefaultValue != other_storage._proto3DefaultValue {return false}
        if _storage._protobufApiversionCheck != other_storage._protobufApiversionCheck {return false}
        if _storage._protobufApiversion2 != other_storage._protobufApiversion2 {return false}
        if _storage._protobufBool != other_storage._protobufBool {return false}
        if _storage._protobufBytes != other_storage._protobufBytes {return false}
        if _storage._protobufDouble != other_storage._protobufDouble {return false}
        if _storage._protobufEnumMap != other_storage._protobufEnumMap {return false}
        if _storage._protobufExtension != other_storage._protobufExtension {return false}
        if _storage._protobufFixed32 != other_storage._protobufFixed32 {return false}
        if _storage._protobufFixed64 != other_storage._protobufFixed64 {return false}
        if _storage._protobufFloat != other_storage._protobufFloat {return false}
        if _storage._protobufInt32 != other_storage._protobufInt32 {return false}
        if _storage._protobufInt64 != other_storage._protobufInt64 {return false}
        if _storage._protobufMap != other_storage._protobufMap {return false}
        if _storage._protobufMessageMap != other_storage._protobufMessageMap {return false}
        if _storage._protobufSfixed32 != other_storage._protobufSfixed32 {return false}
        if _storage._protobufSfixed64 != other_storage._protobufSfixed64 {return false}
        if _storage._protobufSint32 != other_storage._protobufSint32 {return false}
        if _storage._protobufSint64 != other_storage._protobufSint64 {return false}
        if _storage._protobufString != other_storage._protobufString {return false}
        if _storage._protobufUint32 != other_storage._protobufUint32 {return false}
        if _storage._protobufUint64 != other_storage._protobufUint64 {return false}
        if _storage._protobufExtensionFieldValues != other_storage._protobufExtensionFieldValues {return false}
        if _storage._protobufFieldNumber != other_storage._protobufFieldNumber {return false}
        if _storage._protobufGeneratedIsEqualTo != other_storage._protobufGeneratedIsEqualTo {return false}
        if _storage._protobufNameMap != other_storage._protobufNameMap {return false}
        if _storage._protobufNewField != other_storage._protobufNewField {return false}
        if _storage._protobufPackage != other_storage._protobufPackage {return false}
        if _storage._protocol != other_storage._protocol {return false}
        if _storage._protoFieldName != other_storage._protoFieldName {return false}
        if _storage._protoMessageName != other_storage._protoMessageName {return false}
        if _storage._protoNameProviding != other_storage._protoNameProviding {return false}
        if _storage._protoPaths != other_storage._protoPaths {return false}
        if _storage._public != other_storage._public {return false}
        if _storage._putBoolValue != other_storage._putBoolValue {return false}
        if _storage._putBytesValue != other_storage._putBytesValue {return false}
        if _storage._putDoubleValue != other_storage._putDoubleValue {return false}
        if _storage._putEnumValue != other_storage._putEnumValue {return false}
        if _storage._putFixedUint32 != other_storage._putFixedUint32 {return false}
        if _storage._putFixedUint64 != other_storage._putFixedUint64 {return false}
        if _storage._putFloatValue != other_storage._putFloatValue {return false}
        if _storage._putInt64 != other_storage._putInt64 {return false}
        if _storage._putStringValue != other_storage._putStringValue {return false}
        if _storage._putUint64 != other_storage._putUint64 {return false}
        if _storage._putUint64Hex != other_storage._putUint64Hex {return false}
        if _storage._putVarInt != other_storage._putVarInt {return false}
        if _storage._putZigZagVarInt != other_storage._putZigZagVarInt {return false}
        if _storage._rawChars != other_storage._rawChars {return false}
        if _storage._rawRepresentable != other_storage._rawRepresentable {return false}
        if _storage._rawValue != other_storage._rawValue {return false}
        if _storage._readBuffer != other_storage._readBuffer {return false}
        if _storage._register != other_storage._register {return false}
        if _storage._repeatedEnumExtensionField != other_storage._repeatedEnumExtensionField {return false}
        if _storage._repeatedExtensionField != other_storage._repeatedExtensionField {return false}
        if _storage._repeatedGroupExtensionField != other_storage._repeatedGroupExtensionField {return false}
        if _storage._repeatedMessageExtensionField != other_storage._repeatedMessageExtensionField {return false}
        if _storage._requestStreaming != other_storage._requestStreaming {return false}
        if _storage._requestTypeURL != other_storage._requestTypeURL {return false}
        if _storage._requiredSize != other_storage._requiredSize {return false}
        if _storage._responseStreaming != other_storage._responseStreaming {return false}
        if _storage._responseTypeURL != other_storage._responseTypeURL {return false}
        if _storage._result != other_storage._result {return false}
        if _storage._return != other_storage._return {return false}
        if _storage._revision != other_storage._revision {return false}
        if _storage._rhs != other_storage._rhs {return false}
        if _storage._root != other_storage._root {return false}
        if _storage._s != other_storage._s {return false}
        if _storage._sawBackslash != other_storage._sawBackslash {return false}
        if _storage._sawSection4Characters != other_storage._sawSection4Characters {return false}
        if _storage._sawSection5Characters != other_storage._sawSection5Characters {return false}
        if _storage._scanner != other_storage._scanner {return false}
        if _storage._seconds != other_storage._seconds {return false}
        if _storage._self_p != other_storage._self_p {return false}
        if _storage._separator != other_storage._separator {return false}
        if _storage._serialize != other_storage._serialize {return false}
        if _storage._serializedData != other_storage._serializedData {return false}
        if _storage._serializedSize != other_storage._serializedSize {return false}
        if _storage._set != other_storage._set {return false}
        if _storage._setExtensionValue != other_storage._setExtensionValue {return false}
        if _storage._shift != other_storage._shift {return false}
        if _storage._simpleExtensionMap != other_storage._simpleExtensionMap {return false}
        if _storage._sizer != other_storage._sizer {return false}
        if _storage._source != other_storage._source {return false}
        if _storage._sourceContext != other_storage._sourceContext {return false}
        if _storage._sourceEncoding != other_storage._sourceEncoding {return false}
        if _storage._split != other_storage._split {return false}
        if _storage._start != other_storage._start {return false}
        if _storage._startArray != other_storage._startArray {return false}
        if _storage._startField != other_storage._startField {return false}
        if _storage._startIndex != other_storage._startIndex {return false}
        if _storage._startMessageField != other_storage._startMessageField {return false}
        if _storage._startObject != other_storage._startObject {return false}
        if _storage._startRegularField != other_storage._startRegularField {return false}
        if _storage._state != other_storage._state {return false}
        if _storage._static != other_storage._static {return false}
        if _storage._staticString != other_storage._staticString {return false}
        if _storage._storage != other_storage._storage {return false}
        if _storage._string != other_storage._string {return false}
        if _storage._stringLiteral != other_storage._stringLiteral {return false}
        if _storage._stringLiteralType != other_storage._stringLiteralType {return false}
        if _storage._stringResult != other_storage._stringResult {return false}
        if _storage._stringValue != other_storage._stringValue {return false}
        if _storage._struct != other_storage._struct {return false}
        if _storage._structValue != other_storage._structValue {return false}
        if _storage._subDecoder != other_storage._subDecoder {return false}
        if _storage._subscript != other_storage._subscript {return false}
        if _storage._subVisitor != other_storage._subVisitor {return false}
        if _storage._swift != other_storage._swift {return false}
        if _storage._swiftProtobuf != other_storage._swiftProtobuf {return false}
        if _storage._syntax != other_storage._syntax {return false}
        if _storage._t != other_storage._t {return false}
        if _storage._tag != other_storage._tag {return false}
        if _storage._terminator != other_storage._terminator {return false}
        if _storage._testDecoder != other_storage._testDecoder {return false}
        if _storage._text != other_storage._text {return false}
        if _storage._textDecoder != other_storage._textDecoder {return false}
        if _storage._textFormatDecoder != other_storage._textFormatDecoder {return false}
        if _storage._textFormatDecodingError != other_storage._textFormatDecodingError {return false}
        if _storage._textFormatEncodingVisitor != other_storage._textFormatEncodingVisitor {return false}
        if _storage._textFormatString != other_storage._textFormatString {return false}
        if _storage._throws != other_storage._throws {return false}
        if _storage._timeInterval != other_storage._timeInterval {return false}
        if _storage._timeIntervalSince1970 != other_storage._timeIntervalSince1970 {return false}
        if _storage._timeIntervalSinceReferenceDate != other_storage._timeIntervalSinceReferenceDate {return false}
        if _storage._timestamp != other_storage._timestamp {return false}
        if _storage._total != other_storage._total {return false}
        if _storage._totalSize != other_storage._totalSize {return false}
        if _storage._traverse != other_storage._traverse {return false}
        if _storage._true != other_storage._true {return false}
        if _storage._try != other_storage._try {return false}
        if _storage._type != other_storage._type {return false}
        if _storage._typealias != other_storage._typealias {return false}
        if _storage._typePrefix != other_storage._typePrefix {return false}
        if _storage._typeStart != other_storage._typeStart {return false}
        if _storage._typeUnknown != other_storage._typeUnknown {return false}
        if _storage._typeURL != other_storage._typeURL {return false}
        if _storage._uint32 != other_storage._uint32 {return false}
        if _storage._uint32Value != other_storage._uint32Value {return false}
        if _storage._uint64 != other_storage._uint64 {return false}
        if _storage._uint64Value != other_storage._uint64Value {return false}
        if _storage._uint8 != other_storage._uint8 {return false}
        if _storage._unicodeScalarLiteral != other_storage._unicodeScalarLiteral {return false}
        if _storage._unicodeScalarLiteralType != other_storage._unicodeScalarLiteralType {return false}
        if _storage._unicodeScalars != other_storage._unicodeScalars {return false}
        if _storage._unicodeScalarView != other_storage._unicodeScalarView {return false}
        if _storage._union != other_storage._union {return false}
        if _storage._unknown != other_storage._unknown {return false}
        if _storage._unknownFields_p != other_storage._unknownFields_p {return false}
        if _storage._unknownStorage != other_storage._unknownStorage {return false}
        if _storage._unpackTo != other_storage._unpackTo {return false}
        if _storage._unsafeBufferPointer != other_storage._unsafeBufferPointer {return false}
        if _storage._unsafeMutablePointer != other_storage._unsafeMutablePointer {return false}
        if _storage._unsafePointer != other_storage._unsafePointer {return false}
        if _storage._updatedOptions != other_storage._updatedOptions {return false}
        if _storage._url != other_storage._url {return false}
        if _storage._utf8 != other_storage._utf8 {return false}
        if _storage._utf8Codec != other_storage._utf8Codec {return false}
        if _storage._utf8ToDouble != other_storage._utf8ToDouble {return false}
        if _storage._utf8View != other_storage._utf8View {return false}
        if _storage._v != other_storage._v {return false}
        if _storage._value != other_storage._value {return false}
        if _storage._valueField != other_storage._valueField {return false}
        if _storage._values != other_storage._values {return false}
        if _storage._valueType != other_storage._valueType {return false}
        if _storage._var != other_storage._var {return false}
        if _storage._version != other_storage._version {return false}
        if _storage._versionString != other_storage._versionString {return false}
        if _storage._visitExtensionFields != other_storage._visitExtensionFields {return false}
        if _storage._visitExtensionFieldsAsMessageSet != other_storage._visitExtensionFieldsAsMessageSet {return false}
        if _storage._visitMapField != other_storage._visitMapField {return false}
        if _storage._visitor != other_storage._visitor {return false}
        if _storage._visitPacked != other_storage._visitPacked {return false}
        if _storage._visitPackedBoolField != other_storage._visitPackedBoolField {return false}
        if _storage._visitPackedDoubleField != other_storage._visitPackedDoubleField {return false}
        if _storage._visitPackedEnumField != other_storage._visitPackedEnumField {return false}
        if _storage._visitPackedFixed32Field != other_storage._visitPackedFixed32Field {return false}
        if _storage._visitPackedFixed64Field != other_storage._visitPackedFixed64Field {return false}
        if _storage._visitPackedFloatField != other_storage._visitPackedFloatField {return false}
        if _storage._visitPackedInt32Field != other_storage._visitPackedInt32Field {return false}
        if _storage._visitPackedInt64Field != other_storage._visitPackedInt64Field {return false}
        if _storage._visitPackedSfixed32Field != other_storage._visitPackedSfixed32Field {return false}
        if _storage._visitPackedSfixed64Field != other_storage._visitPackedSfixed64Field {return false}
        if _storage._visitPackedSint32Field != other_storage._visitPackedSint32Field {return false}
        if _storage._visitPackedSint64Field != other_storage._visitPackedSint64Field {return false}
        if _storage._visitPackedUint32Field != other_storage._visitPackedUint32Field {return false}
        if _storage._visitPackedUint64Field != other_storage._visitPackedUint64Field {return false}
        if _storage._visitRepeated != other_storage._visitRepeated {return false}
        if _storage._visitRepeatedBoolField != other_storage._visitRepeatedBoolField {return false}
        if _storage._visitRepeatedBytesField != other_storage._visitRepeatedBytesField {return false}
        if _storage._visitRepeatedDoubleField != other_storage._visitRepeatedDoubleField {return false}
        if _storage._visitRepeatedEnumField != other_storage._visitRepeatedEnumField {return false}
        if _storage._visitRepeatedFixed32Field != other_storage._visitRepeatedFixed32Field {return false}
        if _storage._visitRepeatedFixed64Field != other_storage._visitRepeatedFixed64Field {return false}
        if _storage._visitRepeatedFloatField != other_storage._visitRepeatedFloatField {return false}
        if _storage._visitRepeatedGroupField != other_storage._visitRepeatedGroupField {return false}
        if _storage._visitRepeatedInt32Field != other_storage._visitRepeatedInt32Field {return false}
        if _storage._visitRepeatedInt64Field != other_storage._visitRepeatedInt64Field {return false}
        if _storage._visitRepeatedMessageField != other_storage._visitRepeatedMessageField {return false}
        if _storage._visitRepeatedSfixed32Field != other_storage._visitRepeatedSfixed32Field {return false}
        if _storage._visitRepeatedSfixed64Field != other_storage._visitRepeatedSfixed64Field {return false}
        if _storage._visitRepeatedSint32Field != other_storage._visitRepeatedSint32Field {return false}
        if _storage._visitRepeatedSint64Field != other_storage._visitRepeatedSint64Field {return false}
        if _storage._visitRepeatedStringField != other_storage._visitRepeatedStringField {return false}
        if _storage._visitRepeatedUint32Field != other_storage._visitRepeatedUint32Field {return false}
        if _storage._visitRepeatedUint64Field != other_storage._visitRepeatedUint64Field {return false}
        if _storage._visitSingular != other_storage._visitSingular {return false}
        if _storage._visitSingularBoolField != other_storage._visitSingularBoolField {return false}
        if _storage._visitSingularBytesField != other_storage._visitSingularBytesField {return false}
        if _storage._visitSingularDoubleField != other_storage._visitSingularDoubleField {return false}
        if _storage._visitSingularEnumField != other_storage._visitSingularEnumField {return false}
        if _storage._visitSingularFixed32Field != other_storage._visitSingularFixed32Field {return false}
        if _storage._visitSingularFixed64Field != other_storage._visitSingularFixed64Field {return false}
        if _storage._visitSingularFloatField != other_storage._visitSingularFloatField {return false}
        if _storage._visitSingularGroupField != other_storage._visitSingularGroupField {return false}
        if _storage._visitSingularInt32Field != other_storage._visitSingularInt32Field {return false}
        if _storage._visitSingularInt64Field != other_storage._visitSingularInt64Field {return false}
        if _storage._visitSingularMessageField != other_storage._visitSingularMessageField {return false}
        if _storage._visitSingularSfixed32Field != other_storage._visitSingularSfixed32Field {return false}
        if _storage._visitSingularSfixed64Field != other_storage._visitSingularSfixed64Field {return false}
        if _storage._visitSingularSint32Field != other_storage._visitSingularSint32Field {return false}
        if _storage._visitSingularSint64Field != other_storage._visitSingularSint64Field {return false}
        if _storage._visitSingularStringField != other_storage._visitSingularStringField {return false}
        if _storage._visitSingularUint32Field != other_storage._visitSingularUint32Field {return false}
        if _storage._visitSingularUint64Field != other_storage._visitSingularUint64Field {return false}
        if _storage._visitUnknown != other_storage._visitUnknown {return false}
        if _storage._wasDecoded != other_storage._wasDecoded {return false}
        if _storage._where != other_storage._where {return false}
        if _storage._wireFormat != other_storage._wireFormat {return false}
        if _storage._with != other_storage._with {return false}
        if _storage._wrappedType != other_storage._wrappedType {return false}
        if _storage._written != other_storage._written {return false}
        if _storage._yday != other_storage._yday {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
