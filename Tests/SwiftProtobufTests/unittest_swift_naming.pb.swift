/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: unittest_swift_naming.proto
 *
 */

//  Protos/unittest_swift_reserved.proto - test proto
// 
//  This source file is part of the Swift.org open source project
// 
//  Copyright (c) 2014 - 2016 Apple Inc. and the Swift project authors
//  Licensed under Apache License v2.0 with Runtime Library Exception
// 
//  See http://swift.org/LICENSE.txt for license information
//  See http://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
// 
//  -----------------------------------------------------------------------------
// /
// / Test Swift reserved words used as enum or message names
// /
//  -----------------------------------------------------------------------------

import Foundation
import SwiftProtobuf


public enum SwiftUnittest_Names_EnumFieldNames: ProtobufEnum {
  public typealias RawValue = Int
  case a // = 0
  case string // = 1
  case int // = 2
  case double // = 3
  case float // = 4
  case uint // = 5
  case hashValue_ // = 6
  case description // = 7
  case debugDescription_ // = 8
  case swift // = 9
  case unrecognized // = 10
  case `class` // = 11
  case `deinit` // = 12
  case `enum` // = 13
  case `extension` // = 14
  case `func` // = 15
  case `import` // = 16
  case init_ // = 17
  case `inout` // = 18
  case `internal` // = 19
  case `let` // = 20
  case `operator` // = 21
  case `private` // = 22
  case `protocol` // = 23
  case `public` // = 24
  case `static` // = 25
  case `struct` // = 26
  case `subscript` // = 27
  case `typealias` // = 28
  case `var` // = 29
  case `break` // = 30
  case `case` // = 31
  case `continue` // = 32
  case `default` // = 33
  case `defer` // = 34
  case `do` // = 35
  case `else` // = 36
  case `fallthrough` // = 37
  case `for` // = 38
  case `guard` // = 39
  case `if` // = 40
  case `in` // = 41
  case `repeat` // = 42
  case `return` // = 43
  case `switch` // = 44
  case `where` // = 45
  case `while` // = 46
  case `as` // = 47
  case `catch` // = 48
  case `dynamicType` // = 49
  case `false` // = 50
  case `is` // = 51
  case `nil` // = 52
  case `rethrows` // = 53
  case `super` // = 54
  case self_ // = 55
  case `throw` // = 57
  case `throws` // = 58
  case `true` // = 59
  case `try` // = 60
  case _Column__ // = 61
  case _File__ // = 62
  case _Function__ // = 63
  case _Line__ // = 64
  case ___ // = 65
  case ____ // = 1065
  case `associativity` // = 66
  case convenience // = 67
  case dynamic // = 68
  case didSet // = 69
  case final // = 70
  case get // = 71
  case infix // = 72
  case indirect // = 73
  case lazy // = 74
  case left // = 75
  case mutating // = 76
  case none // = 77
  case nonmutating // = 78
  case `optional` // = 79
  case override // = 80
  case postfix // = 81
  case precedence // = 82
  case prefix // = 83
  case `required` // = 85
  case right // = 86
  case set // = 87
  case type // = 88
  case unowned // = 89
  case weak // = 90
  case willSet // = 91
  case id // = 92
  case cmd // = 93
  case out // = 96
  case bycopy // = 98
  case byref // = 99
  case oneway // = 100
  case and // = 102
  case andEq // = 103
  case alignas // = 104
  case alignof // = 105
  case asm // = 106
  case auto // = 107
  case bitand // = 108
  case bitor // = 109
  case bool // = 110
  case char // = 114
  case char16T // = 115
  case char32T // = 116
  case compl // = 118
  case const // = 119
  case constexpr // = 120
  case constCast // = 121
  case decltype // = 123
  case delete // = 125
  case dynamicCast // = 127
  case explicit // = 130
  case export // = 131
  case extern // = 132
  case friend // = 136
  case goto // = 137
  case inline // = 139
  case long // = 141
  case mutable // = 142
  case namespace // = 143
  case new // = 144
  case noexcept // = 145
  case not // = 146
  case notEq // = 147
  case nullptr // = 148
  case or // = 150
  case orEq // = 151
  case protected // = 153
  case register // = 155
  case reinterpretCast // = 156
  case short // = 158
  case signed // = 159
  case sizeof // = 160
  case staticAssert // = 162
  case staticCast // = 163
  case template // = 166
  case this // = 167
  case threadLocal // = 168
  case typedef // = 172
  case typeid // = 173
  case typename // = 174
  case union // = 175
  case unsigned // = 176
  case using // = 177
  case virtual // = 178
  case void // = 179
  case volatile // = 180
  case wcharT // = 181
  case xor // = 183
  case xorEq // = 184
  case restrict // = 185
  case category // = 186
  case ivar // = 187
  case method // = 188
  case finalize // = 192
  case hash // = 193
  case dealloc // = 194
  case superclass // = 197
  case retain // = 198
  case release // = 199
  case autorelease // = 200
  case retainCount // = 201
  case zone // = 202
  case isProxy // = 203
  case copy // = 204
  case mutableCopy // = 205
  case classForCoder // = 206
  case clear // = 207
  case data // = 208
  case delimitedData // = 209
  case descriptor // = 210
  case extensionRegistry // = 211
  case extensionsCurrentlySet // = 212
  case isInitialized // = 213
  case serializedSize // = 214
  case sortedExtensionsInUse // = 215
  case unknownFields // = 216
  case fixed // = 217
  case fract // = 218
  case size // = 219
  case logicalAddress // = 220
  case physicalAddress // = 221
  case byteCount // = 222
  case byteOffset // = 223
  case duration // = 224
  case absoluteTime // = 225
  case optionBits // = 226
  case itemCount // = 227
  case pbversion // = 228
  case scriptCode // = 229
  case langCode // = 230
  case regionCode // = 231
  case ostype // = 232
  case processSerialNumber // = 233
  case point // = 234
  case rect // = 235
  case fixedPoint // = 236
  case fixedRect // = 237
  case style // = 238
  case styleParameter // = 239
  case styleField // = 240
  case timeScale // = 241
  case timeBase // = 242
  case timeRecord // = 243
  case UNRECOGNIZED(Int)

  public init() {
    self = .a
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .a
    case 1: self = .string
    case 2: self = .int
    case 3: self = .double
    case 4: self = .float
    case 5: self = .uint
    case 6: self = .hashValue_
    case 7: self = .description
    case 8: self = .debugDescription_
    case 9: self = .swift
    case 10: self = .unrecognized
    case 11: self = .`class`
    case 12: self = .`deinit`
    case 13: self = .`enum`
    case 14: self = .`extension`
    case 15: self = .`func`
    case 16: self = .`import`
    case 17: self = .init_
    case 18: self = .`inout`
    case 19: self = .`internal`
    case 20: self = .`let`
    case 21: self = .`operator`
    case 22: self = .`private`
    case 23: self = .`protocol`
    case 24: self = .`public`
    case 25: self = .`static`
    case 26: self = .`struct`
    case 27: self = .`subscript`
    case 28: self = .`typealias`
    case 29: self = .`var`
    case 30: self = .`break`
    case 31: self = .`case`
    case 32: self = .`continue`
    case 33: self = .`default`
    case 34: self = .`defer`
    case 35: self = .`do`
    case 36: self = .`else`
    case 37: self = .`fallthrough`
    case 38: self = .`for`
    case 39: self = .`guard`
    case 40: self = .`if`
    case 41: self = .`in`
    case 42: self = .`repeat`
    case 43: self = .`return`
    case 44: self = .`switch`
    case 45: self = .`where`
    case 46: self = .`while`
    case 47: self = .`as`
    case 48: self = .`catch`
    case 49: self = .`dynamicType`
    case 50: self = .`false`
    case 51: self = .`is`
    case 52: self = .`nil`
    case 53: self = .`rethrows`
    case 54: self = .`super`
    case 55: self = .self_
    case 57: self = .`throw`
    case 58: self = .`throws`
    case 59: self = .`true`
    case 60: self = .`try`
    case 61: self = ._Column__
    case 62: self = ._File__
    case 63: self = ._Function__
    case 64: self = ._Line__
    case 65: self = .___
    case 1065: self = .____
    case 66: self = .`associativity`
    case 67: self = .convenience
    case 68: self = .dynamic
    case 69: self = .didSet
    case 70: self = .final
    case 71: self = .get
    case 72: self = .infix
    case 73: self = .indirect
    case 74: self = .lazy
    case 75: self = .left
    case 76: self = .mutating
    case 77: self = .none
    case 78: self = .nonmutating
    case 79: self = .`optional`
    case 80: self = .override
    case 81: self = .postfix
    case 82: self = .precedence
    case 83: self = .prefix
    case 85: self = .`required`
    case 86: self = .right
    case 87: self = .set
    case 88: self = .type
    case 89: self = .unowned
    case 90: self = .weak
    case 91: self = .willSet
    case 92: self = .id
    case 93: self = .cmd
    case 96: self = .out
    case 98: self = .bycopy
    case 99: self = .byref
    case 100: self = .oneway
    case 102: self = .and
    case 103: self = .andEq
    case 104: self = .alignas
    case 105: self = .alignof
    case 106: self = .asm
    case 107: self = .auto
    case 108: self = .bitand
    case 109: self = .bitor
    case 110: self = .bool
    case 114: self = .char
    case 115: self = .char16T
    case 116: self = .char32T
    case 118: self = .compl
    case 119: self = .const
    case 120: self = .constexpr
    case 121: self = .constCast
    case 123: self = .decltype
    case 125: self = .delete
    case 127: self = .dynamicCast
    case 130: self = .explicit
    case 131: self = .export
    case 132: self = .extern
    case 136: self = .friend
    case 137: self = .goto
    case 139: self = .inline
    case 141: self = .long
    case 142: self = .mutable
    case 143: self = .namespace
    case 144: self = .new
    case 145: self = .noexcept
    case 146: self = .not
    case 147: self = .notEq
    case 148: self = .nullptr
    case 150: self = .or
    case 151: self = .orEq
    case 153: self = .protected
    case 155: self = .register
    case 156: self = .reinterpretCast
    case 158: self = .short
    case 159: self = .signed
    case 160: self = .sizeof
    case 162: self = .staticAssert
    case 163: self = .staticCast
    case 166: self = .template
    case 167: self = .this
    case 168: self = .threadLocal
    case 172: self = .typedef
    case 173: self = .typeid
    case 174: self = .typename
    case 175: self = .union
    case 176: self = .unsigned
    case 177: self = .using
    case 178: self = .virtual
    case 179: self = .void
    case 180: self = .volatile
    case 181: self = .wcharT
    case 183: self = .xor
    case 184: self = .xorEq
    case 185: self = .restrict
    case 186: self = .category
    case 187: self = .ivar
    case 188: self = .method
    case 192: self = .finalize
    case 193: self = .hash
    case 194: self = .dealloc
    case 197: self = .superclass
    case 198: self = .retain
    case 199: self = .release
    case 200: self = .autorelease
    case 201: self = .retainCount
    case 202: self = .zone
    case 203: self = .isProxy
    case 204: self = .copy
    case 205: self = .mutableCopy
    case 206: self = .classForCoder
    case 207: self = .clear
    case 208: self = .data
    case 209: self = .delimitedData
    case 210: self = .descriptor
    case 211: self = .extensionRegistry
    case 212: self = .extensionsCurrentlySet
    case 213: self = .isInitialized
    case 214: self = .serializedSize
    case 215: self = .sortedExtensionsInUse
    case 216: self = .unknownFields
    case 217: self = .fixed
    case 218: self = .fract
    case 219: self = .size
    case 220: self = .logicalAddress
    case 221: self = .physicalAddress
    case 222: self = .byteCount
    case 223: self = .byteOffset
    case 224: self = .duration
    case 225: self = .absoluteTime
    case 226: self = .optionBits
    case 227: self = .itemCount
    case 228: self = .pbversion
    case 229: self = .scriptCode
    case 230: self = .langCode
    case 231: self = .regionCode
    case 232: self = .ostype
    case 233: self = .processSerialNumber
    case 234: self = .point
    case 235: self = .rect
    case 236: self = .fixedPoint
    case 237: self = .fixedRect
    case 238: self = .style
    case 239: self = .styleParameter
    case 240: self = .styleField
    case 241: self = .timeScale
    case 242: self = .timeBase
    case 243: self = .timeRecord
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public init?(name: String) {
    switch name {
    case "a": self = .a
    case "string": self = .string
    case "int": self = .int
    case "double": self = .double
    case "float": self = .float
    case "uint": self = .uint
    case "hashValue_": self = .hashValue_
    case "description": self = .description
    case "debugDescription_": self = .debugDescription_
    case "swift": self = .swift
    case "unrecognized": self = .unrecognized
    case "class": self = .`class`
    case "deinit": self = .`deinit`
    case "enum": self = .`enum`
    case "extension": self = .`extension`
    case "func": self = .`func`
    case "import": self = .`import`
    case "init_": self = .init_
    case "inout": self = .`inout`
    case "internal": self = .`internal`
    case "let": self = .`let`
    case "operator": self = .`operator`
    case "private": self = .`private`
    case "protocol": self = .`protocol`
    case "public": self = .`public`
    case "static": self = .`static`
    case "struct": self = .`struct`
    case "subscript": self = .`subscript`
    case "typealias": self = .`typealias`
    case "var": self = .`var`
    case "break": self = .`break`
    case "case": self = .`case`
    case "continue": self = .`continue`
    case "default": self = .`default`
    case "defer": self = .`defer`
    case "do": self = .`do`
    case "else": self = .`else`
    case "fallthrough": self = .`fallthrough`
    case "for": self = .`for`
    case "guard": self = .`guard`
    case "if": self = .`if`
    case "in": self = .`in`
    case "repeat": self = .`repeat`
    case "return": self = .`return`
    case "switch": self = .`switch`
    case "where": self = .`where`
    case "while": self = .`while`
    case "as": self = .`as`
    case "catch": self = .`catch`
    case "dynamicType": self = .`dynamicType`
    case "false": self = .`false`
    case "is": self = .`is`
    case "nil": self = .`nil`
    case "rethrows": self = .`rethrows`
    case "super": self = .`super`
    case "self_": self = .self_
    case "throw": self = .`throw`
    case "throws": self = .`throws`
    case "true": self = .`true`
    case "try": self = .`try`
    case "_Column__": self = ._Column__
    case "_File__": self = ._File__
    case "_Function__": self = ._Function__
    case "_Line__": self = ._Line__
    case "___": self = .___
    case "____": self = .____
    case "associativity": self = .`associativity`
    case "convenience": self = .convenience
    case "dynamic": self = .dynamic
    case "didSet": self = .didSet
    case "final": self = .final
    case "get": self = .get
    case "infix": self = .infix
    case "indirect": self = .indirect
    case "lazy": self = .lazy
    case "left": self = .left
    case "mutating": self = .mutating
    case "none": self = .none
    case "nonmutating": self = .nonmutating
    case "optional": self = .`optional`
    case "override": self = .override
    case "postfix": self = .postfix
    case "precedence": self = .precedence
    case "prefix": self = .prefix
    case "required": self = .`required`
    case "right": self = .right
    case "set": self = .set
    case "type": self = .type
    case "unowned": self = .unowned
    case "weak": self = .weak
    case "willSet": self = .willSet
    case "id": self = .id
    case "cmd": self = .cmd
    case "out": self = .out
    case "bycopy": self = .bycopy
    case "byref": self = .byref
    case "oneway": self = .oneway
    case "and": self = .and
    case "andEq": self = .andEq
    case "alignas": self = .alignas
    case "alignof": self = .alignof
    case "asm": self = .asm
    case "auto": self = .auto
    case "bitand": self = .bitand
    case "bitor": self = .bitor
    case "bool": self = .bool
    case "char": self = .char
    case "char16T": self = .char16T
    case "char32T": self = .char32T
    case "compl": self = .compl
    case "const": self = .const
    case "constexpr": self = .constexpr
    case "constCast": self = .constCast
    case "decltype": self = .decltype
    case "delete": self = .delete
    case "dynamicCast": self = .dynamicCast
    case "explicit": self = .explicit
    case "export": self = .export
    case "extern": self = .extern
    case "friend": self = .friend
    case "goto": self = .goto
    case "inline": self = .inline
    case "long": self = .long
    case "mutable": self = .mutable
    case "namespace": self = .namespace
    case "new": self = .new
    case "noexcept": self = .noexcept
    case "not": self = .not
    case "notEq": self = .notEq
    case "nullptr": self = .nullptr
    case "or": self = .or
    case "orEq": self = .orEq
    case "protected": self = .protected
    case "register": self = .register
    case "reinterpretCast": self = .reinterpretCast
    case "short": self = .short
    case "signed": self = .signed
    case "sizeof": self = .sizeof
    case "staticAssert": self = .staticAssert
    case "staticCast": self = .staticCast
    case "template": self = .template
    case "this": self = .this
    case "threadLocal": self = .threadLocal
    case "typedef": self = .typedef
    case "typeid": self = .typeid
    case "typename": self = .typename
    case "union": self = .union
    case "unsigned": self = .unsigned
    case "using": self = .using
    case "virtual": self = .virtual
    case "void": self = .void
    case "volatile": self = .volatile
    case "wcharT": self = .wcharT
    case "xor": self = .xor
    case "xorEq": self = .xorEq
    case "restrict": self = .restrict
    case "category": self = .category
    case "ivar": self = .ivar
    case "method": self = .method
    case "finalize": self = .finalize
    case "hash": self = .hash
    case "dealloc": self = .dealloc
    case "superclass": self = .superclass
    case "retain": self = .retain
    case "release": self = .release
    case "autorelease": self = .autorelease
    case "retainCount": self = .retainCount
    case "zone": self = .zone
    case "isProxy": self = .isProxy
    case "copy": self = .copy
    case "mutableCopy": self = .mutableCopy
    case "classForCoder": self = .classForCoder
    case "clear": self = .clear
    case "data": self = .data
    case "delimitedData": self = .delimitedData
    case "descriptor": self = .descriptor
    case "extensionRegistry": self = .extensionRegistry
    case "extensionsCurrentlySet": self = .extensionsCurrentlySet
    case "isInitialized": self = .isInitialized
    case "serializedSize": self = .serializedSize
    case "sortedExtensionsInUse": self = .sortedExtensionsInUse
    case "unknownFields": self = .unknownFields
    case "fixed": self = .fixed
    case "fract": self = .fract
    case "size": self = .size
    case "logicalAddress": self = .logicalAddress
    case "physicalAddress": self = .physicalAddress
    case "byteCount": self = .byteCount
    case "byteOffset": self = .byteOffset
    case "duration": self = .duration
    case "absoluteTime": self = .absoluteTime
    case "optionBits": self = .optionBits
    case "itemCount": self = .itemCount
    case "pbversion": self = .pbversion
    case "scriptCode": self = .scriptCode
    case "langCode": self = .langCode
    case "regionCode": self = .regionCode
    case "ostype": self = .ostype
    case "processSerialNumber": self = .processSerialNumber
    case "point": self = .point
    case "rect": self = .rect
    case "fixedPoint": self = .fixedPoint
    case "fixedRect": self = .fixedRect
    case "style": self = .style
    case "styleParameter": self = .styleParameter
    case "styleField": self = .styleField
    case "timeScale": self = .timeScale
    case "timeBase": self = .timeBase
    case "timeRecord": self = .timeRecord
    default: return nil
    }
  }

  public init?(jsonName: String) {
    switch jsonName {
    case "A": self = .a
    case "String": self = .string
    case "Int": self = .int
    case "Double": self = .double
    case "Float": self = .float
    case "UInt": self = .uint
    case "hashValue": self = .hashValue_
    case "description": self = .description
    case "debugDescription": self = .debugDescription_
    case "Swift": self = .swift
    case "UNRECOGNIZED": self = .unrecognized
    case "class": self = .`class`
    case "deinit": self = .`deinit`
    case "enum": self = .`enum`
    case "extension": self = .`extension`
    case "func": self = .`func`
    case "import": self = .`import`
    case "init": self = .init_
    case "inout": self = .`inout`
    case "internal": self = .`internal`
    case "let": self = .`let`
    case "operator": self = .`operator`
    case "private": self = .`private`
    case "protocol": self = .`protocol`
    case "public": self = .`public`
    case "static": self = .`static`
    case "struct": self = .`struct`
    case "subscript": self = .`subscript`
    case "typealias": self = .`typealias`
    case "var": self = .`var`
    case "break": self = .`break`
    case "case": self = .`case`
    case "continue": self = .`continue`
    case "default": self = .`default`
    case "defer": self = .`defer`
    case "do": self = .`do`
    case "else": self = .`else`
    case "fallthrough": self = .`fallthrough`
    case "for": self = .`for`
    case "guard": self = .`guard`
    case "if": self = .`if`
    case "in": self = .`in`
    case "repeat": self = .`repeat`
    case "return": self = .`return`
    case "switch": self = .`switch`
    case "where": self = .`where`
    case "while": self = .`while`
    case "as": self = .`as`
    case "catch": self = .`catch`
    case "dynamicType": self = .`dynamicType`
    case "false": self = .`false`
    case "is": self = .`is`
    case "nil": self = .`nil`
    case "rethrows": self = .`rethrows`
    case "super": self = .`super`
    case "self": self = .self_
    case "throw": self = .`throw`
    case "throws": self = .`throws`
    case "true": self = .`true`
    case "try": self = .`try`
    case "__COLUMN__": self = ._Column__
    case "__FILE__": self = ._File__
    case "__FUNCTION__": self = ._Function__
    case "__LINE__": self = ._Line__
    case "_": self = .___
    case "__": self = .____
    case "associativity": self = .`associativity`
    case "convenience": self = .convenience
    case "dynamic": self = .dynamic
    case "didSet": self = .didSet
    case "final": self = .final
    case "get": self = .get
    case "infix": self = .infix
    case "indirect": self = .indirect
    case "lazy": self = .lazy
    case "left": self = .left
    case "mutating": self = .mutating
    case "none": self = .none
    case "nonmutating": self = .nonmutating
    case "optional": self = .`optional`
    case "override": self = .override
    case "postfix": self = .postfix
    case "precedence": self = .precedence
    case "prefix": self = .prefix
    case "required": self = .`required`
    case "right": self = .right
    case "set": self = .set
    case "Type": self = .type
    case "unowned": self = .unowned
    case "weak": self = .weak
    case "willSet": self = .willSet
    case "id": self = .id
    case "_cmd": self = .cmd
    case "out": self = .out
    case "bycopy": self = .bycopy
    case "byref": self = .byref
    case "oneway": self = .oneway
    case "and": self = .and
    case "and_eq": self = .andEq
    case "alignas": self = .alignas
    case "alignof": self = .alignof
    case "asm": self = .asm
    case "auto": self = .auto
    case "bitand": self = .bitand
    case "bitor": self = .bitor
    case "bool": self = .bool
    case "char": self = .char
    case "char16_t": self = .char16T
    case "char32_t": self = .char32T
    case "compl": self = .compl
    case "const": self = .const
    case "constexpr": self = .constexpr
    case "const_cast": self = .constCast
    case "decltype": self = .decltype
    case "delete": self = .delete
    case "dynamic_cast": self = .dynamicCast
    case "explicit": self = .explicit
    case "export": self = .export
    case "extern": self = .extern
    case "friend": self = .friend
    case "goto": self = .goto
    case "inline": self = .inline
    case "long": self = .long
    case "mutable": self = .mutable
    case "namespace": self = .namespace
    case "new": self = .new
    case "noexcept": self = .noexcept
    case "not": self = .not
    case "not_eq": self = .notEq
    case "nullptr": self = .nullptr
    case "or": self = .or
    case "or_eq": self = .orEq
    case "protected": self = .protected
    case "register": self = .register
    case "reinterpret_cast": self = .reinterpretCast
    case "short": self = .short
    case "signed": self = .signed
    case "sizeof": self = .sizeof
    case "static_assert": self = .staticAssert
    case "static_cast": self = .staticCast
    case "template": self = .template
    case "this": self = .this
    case "thread_local": self = .threadLocal
    case "typedef": self = .typedef
    case "typeid": self = .typeid
    case "typename": self = .typename
    case "union": self = .union
    case "unsigned": self = .unsigned
    case "using": self = .using
    case "virtual": self = .virtual
    case "void": self = .void
    case "volatile": self = .volatile
    case "wchar_t": self = .wcharT
    case "xor": self = .xor
    case "xor_eq": self = .xorEq
    case "restrict": self = .restrict
    case "Category": self = .category
    case "Ivar": self = .ivar
    case "Method": self = .method
    case "finalize": self = .finalize
    case "hash": self = .hash
    case "dealloc": self = .dealloc
    case "superclass": self = .superclass
    case "retain": self = .retain
    case "release": self = .release
    case "autorelease": self = .autorelease
    case "retainCount": self = .retainCount
    case "zone": self = .zone
    case "isProxy": self = .isProxy
    case "copy": self = .copy
    case "mutableCopy": self = .mutableCopy
    case "classForCoder": self = .classForCoder
    case "clear": self = .clear
    case "data": self = .data
    case "delimitedData": self = .delimitedData
    case "descriptor": self = .descriptor
    case "extensionRegistry": self = .extensionRegistry
    case "extensionsCurrentlySet": self = .extensionsCurrentlySet
    case "isInitialized": self = .isInitialized
    case "serializedSize": self = .serializedSize
    case "sortedExtensionsInUse": self = .sortedExtensionsInUse
    case "unknownFields": self = .unknownFields
    case "Fixed": self = .fixed
    case "Fract": self = .fract
    case "Size": self = .size
    case "LogicalAddress": self = .logicalAddress
    case "PhysicalAddress": self = .physicalAddress
    case "ByteCount": self = .byteCount
    case "ByteOffset": self = .byteOffset
    case "Duration": self = .duration
    case "AbsoluteTime": self = .absoluteTime
    case "OptionBits": self = .optionBits
    case "ItemCount": self = .itemCount
    case "PBVersion": self = .pbversion
    case "ScriptCode": self = .scriptCode
    case "LangCode": self = .langCode
    case "RegionCode": self = .regionCode
    case "OSType": self = .ostype
    case "ProcessSerialNumber": self = .processSerialNumber
    case "Point": self = .point
    case "Rect": self = .rect
    case "FixedPoint": self = .fixedPoint
    case "FixedRect": self = .fixedRect
    case "Style": self = .style
    case "StyleParameter": self = .styleParameter
    case "StyleField": self = .styleField
    case "TimeScale": self = .timeScale
    case "TimeBase": self = .timeBase
    case "TimeRecord": self = .timeRecord
    default: return nil
    }
  }

  public init?(protoName: String) {
    switch protoName {
    case "A": self = .a
    case "String": self = .string
    case "Int": self = .int
    case "Double": self = .double
    case "Float": self = .float
    case "UInt": self = .uint
    case "hashValue": self = .hashValue_
    case "description": self = .description
    case "debugDescription": self = .debugDescription_
    case "Swift": self = .swift
    case "UNRECOGNIZED": self = .unrecognized
    case "class": self = .`class`
    case "deinit": self = .`deinit`
    case "enum": self = .`enum`
    case "extension": self = .`extension`
    case "func": self = .`func`
    case "import": self = .`import`
    case "init": self = .init_
    case "inout": self = .`inout`
    case "internal": self = .`internal`
    case "let": self = .`let`
    case "operator": self = .`operator`
    case "private": self = .`private`
    case "protocol": self = .`protocol`
    case "public": self = .`public`
    case "static": self = .`static`
    case "struct": self = .`struct`
    case "subscript": self = .`subscript`
    case "typealias": self = .`typealias`
    case "var": self = .`var`
    case "break": self = .`break`
    case "case": self = .`case`
    case "continue": self = .`continue`
    case "default": self = .`default`
    case "defer": self = .`defer`
    case "do": self = .`do`
    case "else": self = .`else`
    case "fallthrough": self = .`fallthrough`
    case "for": self = .`for`
    case "guard": self = .`guard`
    case "if": self = .`if`
    case "in": self = .`in`
    case "repeat": self = .`repeat`
    case "return": self = .`return`
    case "switch": self = .`switch`
    case "where": self = .`where`
    case "while": self = .`while`
    case "as": self = .`as`
    case "catch": self = .`catch`
    case "dynamicType": self = .`dynamicType`
    case "false": self = .`false`
    case "is": self = .`is`
    case "nil": self = .`nil`
    case "rethrows": self = .`rethrows`
    case "super": self = .`super`
    case "self": self = .self_
    case "throw": self = .`throw`
    case "throws": self = .`throws`
    case "true": self = .`true`
    case "try": self = .`try`
    case "__COLUMN__": self = ._Column__
    case "__FILE__": self = ._File__
    case "__FUNCTION__": self = ._Function__
    case "__LINE__": self = ._Line__
    case "_": self = .___
    case "__": self = .____
    case "associativity": self = .`associativity`
    case "convenience": self = .convenience
    case "dynamic": self = .dynamic
    case "didSet": self = .didSet
    case "final": self = .final
    case "get": self = .get
    case "infix": self = .infix
    case "indirect": self = .indirect
    case "lazy": self = .lazy
    case "left": self = .left
    case "mutating": self = .mutating
    case "none": self = .none
    case "nonmutating": self = .nonmutating
    case "optional": self = .`optional`
    case "override": self = .override
    case "postfix": self = .postfix
    case "precedence": self = .precedence
    case "prefix": self = .prefix
    case "required": self = .`required`
    case "right": self = .right
    case "set": self = .set
    case "Type": self = .type
    case "unowned": self = .unowned
    case "weak": self = .weak
    case "willSet": self = .willSet
    case "id": self = .id
    case "_cmd": self = .cmd
    case "out": self = .out
    case "bycopy": self = .bycopy
    case "byref": self = .byref
    case "oneway": self = .oneway
    case "and": self = .and
    case "and_eq": self = .andEq
    case "alignas": self = .alignas
    case "alignof": self = .alignof
    case "asm": self = .asm
    case "auto": self = .auto
    case "bitand": self = .bitand
    case "bitor": self = .bitor
    case "bool": self = .bool
    case "char": self = .char
    case "char16_t": self = .char16T
    case "char32_t": self = .char32T
    case "compl": self = .compl
    case "const": self = .const
    case "constexpr": self = .constexpr
    case "const_cast": self = .constCast
    case "decltype": self = .decltype
    case "delete": self = .delete
    case "dynamic_cast": self = .dynamicCast
    case "explicit": self = .explicit
    case "export": self = .export
    case "extern": self = .extern
    case "friend": self = .friend
    case "goto": self = .goto
    case "inline": self = .inline
    case "long": self = .long
    case "mutable": self = .mutable
    case "namespace": self = .namespace
    case "new": self = .new
    case "noexcept": self = .noexcept
    case "not": self = .not
    case "not_eq": self = .notEq
    case "nullptr": self = .nullptr
    case "or": self = .or
    case "or_eq": self = .orEq
    case "protected": self = .protected
    case "register": self = .register
    case "reinterpret_cast": self = .reinterpretCast
    case "short": self = .short
    case "signed": self = .signed
    case "sizeof": self = .sizeof
    case "static_assert": self = .staticAssert
    case "static_cast": self = .staticCast
    case "template": self = .template
    case "this": self = .this
    case "thread_local": self = .threadLocal
    case "typedef": self = .typedef
    case "typeid": self = .typeid
    case "typename": self = .typename
    case "union": self = .union
    case "unsigned": self = .unsigned
    case "using": self = .using
    case "virtual": self = .virtual
    case "void": self = .void
    case "volatile": self = .volatile
    case "wchar_t": self = .wcharT
    case "xor": self = .xor
    case "xor_eq": self = .xorEq
    case "restrict": self = .restrict
    case "Category": self = .category
    case "Ivar": self = .ivar
    case "Method": self = .method
    case "finalize": self = .finalize
    case "hash": self = .hash
    case "dealloc": self = .dealloc
    case "superclass": self = .superclass
    case "retain": self = .retain
    case "release": self = .release
    case "autorelease": self = .autorelease
    case "retainCount": self = .retainCount
    case "zone": self = .zone
    case "isProxy": self = .isProxy
    case "copy": self = .copy
    case "mutableCopy": self = .mutableCopy
    case "classForCoder": self = .classForCoder
    case "clear": self = .clear
    case "data": self = .data
    case "delimitedData": self = .delimitedData
    case "descriptor": self = .descriptor
    case "extensionRegistry": self = .extensionRegistry
    case "extensionsCurrentlySet": self = .extensionsCurrentlySet
    case "isInitialized": self = .isInitialized
    case "serializedSize": self = .serializedSize
    case "sortedExtensionsInUse": self = .sortedExtensionsInUse
    case "unknownFields": self = .unknownFields
    case "Fixed": self = .fixed
    case "Fract": self = .fract
    case "Size": self = .size
    case "LogicalAddress": self = .logicalAddress
    case "PhysicalAddress": self = .physicalAddress
    case "ByteCount": self = .byteCount
    case "ByteOffset": self = .byteOffset
    case "Duration": self = .duration
    case "AbsoluteTime": self = .absoluteTime
    case "OptionBits": self = .optionBits
    case "ItemCount": self = .itemCount
    case "PBVersion": self = .pbversion
    case "ScriptCode": self = .scriptCode
    case "LangCode": self = .langCode
    case "RegionCode": self = .regionCode
    case "OSType": self = .ostype
    case "ProcessSerialNumber": self = .processSerialNumber
    case "Point": self = .point
    case "Rect": self = .rect
    case "FixedPoint": self = .fixedPoint
    case "FixedRect": self = .fixedRect
    case "Style": self = .style
    case "StyleParameter": self = .styleParameter
    case "StyleField": self = .styleField
    case "TimeScale": self = .timeScale
    case "TimeBase": self = .timeBase
    case "TimeRecord": self = .timeRecord
    default: return nil
    }
  }

  public var rawValue: Int {
    get {
      switch self {
      case .a: return 0
      case .string: return 1
      case .int: return 2
      case .double: return 3
      case .float: return 4
      case .uint: return 5
      case .hashValue_: return 6
      case .description: return 7
      case .debugDescription_: return 8
      case .swift: return 9
      case .unrecognized: return 10
      case .`class`: return 11
      case .`deinit`: return 12
      case .`enum`: return 13
      case .`extension`: return 14
      case .`func`: return 15
      case .`import`: return 16
      case .init_: return 17
      case .`inout`: return 18
      case .`internal`: return 19
      case .`let`: return 20
      case .`operator`: return 21
      case .`private`: return 22
      case .`protocol`: return 23
      case .`public`: return 24
      case .`static`: return 25
      case .`struct`: return 26
      case .`subscript`: return 27
      case .`typealias`: return 28
      case .`var`: return 29
      case .`break`: return 30
      case .`case`: return 31
      case .`continue`: return 32
      case .`default`: return 33
      case .`defer`: return 34
      case .`do`: return 35
      case .`else`: return 36
      case .`fallthrough`: return 37
      case .`for`: return 38
      case .`guard`: return 39
      case .`if`: return 40
      case .`in`: return 41
      case .`repeat`: return 42
      case .`return`: return 43
      case .`switch`: return 44
      case .`where`: return 45
      case .`while`: return 46
      case .`as`: return 47
      case .`catch`: return 48
      case .`dynamicType`: return 49
      case .`false`: return 50
      case .`is`: return 51
      case .`nil`: return 52
      case .`rethrows`: return 53
      case .`super`: return 54
      case .self_: return 55
      case .`throw`: return 57
      case .`throws`: return 58
      case .`true`: return 59
      case .`try`: return 60
      case ._Column__: return 61
      case ._File__: return 62
      case ._Function__: return 63
      case ._Line__: return 64
      case .___: return 65
      case .____: return 1065
      case .`associativity`: return 66
      case .convenience: return 67
      case .dynamic: return 68
      case .didSet: return 69
      case .final: return 70
      case .get: return 71
      case .infix: return 72
      case .indirect: return 73
      case .lazy: return 74
      case .left: return 75
      case .mutating: return 76
      case .none: return 77
      case .nonmutating: return 78
      case .`optional`: return 79
      case .override: return 80
      case .postfix: return 81
      case .precedence: return 82
      case .prefix: return 83
      case .`required`: return 85
      case .right: return 86
      case .set: return 87
      case .type: return 88
      case .unowned: return 89
      case .weak: return 90
      case .willSet: return 91
      case .id: return 92
      case .cmd: return 93
      case .out: return 96
      case .bycopy: return 98
      case .byref: return 99
      case .oneway: return 100
      case .and: return 102
      case .andEq: return 103
      case .alignas: return 104
      case .alignof: return 105
      case .asm: return 106
      case .auto: return 107
      case .bitand: return 108
      case .bitor: return 109
      case .bool: return 110
      case .char: return 114
      case .char16T: return 115
      case .char32T: return 116
      case .compl: return 118
      case .const: return 119
      case .constexpr: return 120
      case .constCast: return 121
      case .decltype: return 123
      case .delete: return 125
      case .dynamicCast: return 127
      case .explicit: return 130
      case .export: return 131
      case .extern: return 132
      case .friend: return 136
      case .goto: return 137
      case .inline: return 139
      case .long: return 141
      case .mutable: return 142
      case .namespace: return 143
      case .new: return 144
      case .noexcept: return 145
      case .not: return 146
      case .notEq: return 147
      case .nullptr: return 148
      case .or: return 150
      case .orEq: return 151
      case .protected: return 153
      case .register: return 155
      case .reinterpretCast: return 156
      case .short: return 158
      case .signed: return 159
      case .sizeof: return 160
      case .staticAssert: return 162
      case .staticCast: return 163
      case .template: return 166
      case .this: return 167
      case .threadLocal: return 168
      case .typedef: return 172
      case .typeid: return 173
      case .typename: return 174
      case .union: return 175
      case .unsigned: return 176
      case .using: return 177
      case .virtual: return 178
      case .void: return 179
      case .volatile: return 180
      case .wcharT: return 181
      case .xor: return 183
      case .xorEq: return 184
      case .restrict: return 185
      case .category: return 186
      case .ivar: return 187
      case .method: return 188
      case .finalize: return 192
      case .hash: return 193
      case .dealloc: return 194
      case .superclass: return 197
      case .retain: return 198
      case .release: return 199
      case .autorelease: return 200
      case .retainCount: return 201
      case .zone: return 202
      case .isProxy: return 203
      case .copy: return 204
      case .mutableCopy: return 205
      case .classForCoder: return 206
      case .clear: return 207
      case .data: return 208
      case .delimitedData: return 209
      case .descriptor: return 210
      case .extensionRegistry: return 211
      case .extensionsCurrentlySet: return 212
      case .isInitialized: return 213
      case .serializedSize: return 214
      case .sortedExtensionsInUse: return 215
      case .unknownFields: return 216
      case .fixed: return 217
      case .fract: return 218
      case .size: return 219
      case .logicalAddress: return 220
      case .physicalAddress: return 221
      case .byteCount: return 222
      case .byteOffset: return 223
      case .duration: return 224
      case .absoluteTime: return 225
      case .optionBits: return 226
      case .itemCount: return 227
      case .pbversion: return 228
      case .scriptCode: return 229
      case .langCode: return 230
      case .regionCode: return 231
      case .ostype: return 232
      case .processSerialNumber: return 233
      case .point: return 234
      case .rect: return 235
      case .fixedPoint: return 236
      case .fixedRect: return 237
      case .style: return 238
      case .styleParameter: return 239
      case .styleField: return 240
      case .timeScale: return 241
      case .timeBase: return 242
      case .timeRecord: return 243
      case .UNRECOGNIZED(let i): return i
      }
    }
  }

  public var json: String {
    get {
      switch self {
      case .a: return "\"A\""
      case .string: return "\"String\""
      case .int: return "\"Int\""
      case .double: return "\"Double\""
      case .float: return "\"Float\""
      case .uint: return "\"UInt\""
      case .hashValue_: return "\"hashValue\""
      case .description: return "\"description\""
      case .debugDescription_: return "\"debugDescription\""
      case .swift: return "\"Swift\""
      case .unrecognized: return "\"UNRECOGNIZED\""
      case .`class`: return "\"class\""
      case .`deinit`: return "\"deinit\""
      case .`enum`: return "\"enum\""
      case .`extension`: return "\"extension\""
      case .`func`: return "\"func\""
      case .`import`: return "\"import\""
      case .init_: return "\"init\""
      case .`inout`: return "\"inout\""
      case .`internal`: return "\"internal\""
      case .`let`: return "\"let\""
      case .`operator`: return "\"operator\""
      case .`private`: return "\"private\""
      case .`protocol`: return "\"protocol\""
      case .`public`: return "\"public\""
      case .`static`: return "\"static\""
      case .`struct`: return "\"struct\""
      case .`subscript`: return "\"subscript\""
      case .`typealias`: return "\"typealias\""
      case .`var`: return "\"var\""
      case .`break`: return "\"break\""
      case .`case`: return "\"case\""
      case .`continue`: return "\"continue\""
      case .`default`: return "\"default\""
      case .`defer`: return "\"defer\""
      case .`do`: return "\"do\""
      case .`else`: return "\"else\""
      case .`fallthrough`: return "\"fallthrough\""
      case .`for`: return "\"for\""
      case .`guard`: return "\"guard\""
      case .`if`: return "\"if\""
      case .`in`: return "\"in\""
      case .`repeat`: return "\"repeat\""
      case .`return`: return "\"return\""
      case .`switch`: return "\"switch\""
      case .`where`: return "\"where\""
      case .`while`: return "\"while\""
      case .`as`: return "\"as\""
      case .`catch`: return "\"catch\""
      case .`dynamicType`: return "\"dynamicType\""
      case .`false`: return "\"false\""
      case .`is`: return "\"is\""
      case .`nil`: return "\"nil\""
      case .`rethrows`: return "\"rethrows\""
      case .`super`: return "\"super\""
      case .self_: return "\"self\""
      case .`throw`: return "\"throw\""
      case .`throws`: return "\"throws\""
      case .`true`: return "\"true\""
      case .`try`: return "\"try\""
      case ._Column__: return "\"__COLUMN__\""
      case ._File__: return "\"__FILE__\""
      case ._Function__: return "\"__FUNCTION__\""
      case ._Line__: return "\"__LINE__\""
      case .___: return "\"_\""
      case .____: return "\"__\""
      case .`associativity`: return "\"associativity\""
      case .convenience: return "\"convenience\""
      case .dynamic: return "\"dynamic\""
      case .didSet: return "\"didSet\""
      case .final: return "\"final\""
      case .get: return "\"get\""
      case .infix: return "\"infix\""
      case .indirect: return "\"indirect\""
      case .lazy: return "\"lazy\""
      case .left: return "\"left\""
      case .mutating: return "\"mutating\""
      case .none: return "\"none\""
      case .nonmutating: return "\"nonmutating\""
      case .`optional`: return "\"optional\""
      case .override: return "\"override\""
      case .postfix: return "\"postfix\""
      case .precedence: return "\"precedence\""
      case .prefix: return "\"prefix\""
      case .`required`: return "\"required\""
      case .right: return "\"right\""
      case .set: return "\"set\""
      case .type: return "\"Type\""
      case .unowned: return "\"unowned\""
      case .weak: return "\"weak\""
      case .willSet: return "\"willSet\""
      case .id: return "\"id\""
      case .cmd: return "\"_cmd\""
      case .out: return "\"out\""
      case .bycopy: return "\"bycopy\""
      case .byref: return "\"byref\""
      case .oneway: return "\"oneway\""
      case .and: return "\"and\""
      case .andEq: return "\"and_eq\""
      case .alignas: return "\"alignas\""
      case .alignof: return "\"alignof\""
      case .asm: return "\"asm\""
      case .auto: return "\"auto\""
      case .bitand: return "\"bitand\""
      case .bitor: return "\"bitor\""
      case .bool: return "\"bool\""
      case .char: return "\"char\""
      case .char16T: return "\"char16_t\""
      case .char32T: return "\"char32_t\""
      case .compl: return "\"compl\""
      case .const: return "\"const\""
      case .constexpr: return "\"constexpr\""
      case .constCast: return "\"const_cast\""
      case .decltype: return "\"decltype\""
      case .delete: return "\"delete\""
      case .dynamicCast: return "\"dynamic_cast\""
      case .explicit: return "\"explicit\""
      case .export: return "\"export\""
      case .extern: return "\"extern\""
      case .friend: return "\"friend\""
      case .goto: return "\"goto\""
      case .inline: return "\"inline\""
      case .long: return "\"long\""
      case .mutable: return "\"mutable\""
      case .namespace: return "\"namespace\""
      case .new: return "\"new\""
      case .noexcept: return "\"noexcept\""
      case .not: return "\"not\""
      case .notEq: return "\"not_eq\""
      case .nullptr: return "\"nullptr\""
      case .or: return "\"or\""
      case .orEq: return "\"or_eq\""
      case .protected: return "\"protected\""
      case .register: return "\"register\""
      case .reinterpretCast: return "\"reinterpret_cast\""
      case .short: return "\"short\""
      case .signed: return "\"signed\""
      case .sizeof: return "\"sizeof\""
      case .staticAssert: return "\"static_assert\""
      case .staticCast: return "\"static_cast\""
      case .template: return "\"template\""
      case .this: return "\"this\""
      case .threadLocal: return "\"thread_local\""
      case .typedef: return "\"typedef\""
      case .typeid: return "\"typeid\""
      case .typename: return "\"typename\""
      case .union: return "\"union\""
      case .unsigned: return "\"unsigned\""
      case .using: return "\"using\""
      case .virtual: return "\"virtual\""
      case .void: return "\"void\""
      case .volatile: return "\"volatile\""
      case .wcharT: return "\"wchar_t\""
      case .xor: return "\"xor\""
      case .xorEq: return "\"xor_eq\""
      case .restrict: return "\"restrict\""
      case .category: return "\"Category\""
      case .ivar: return "\"Ivar\""
      case .method: return "\"Method\""
      case .finalize: return "\"finalize\""
      case .hash: return "\"hash\""
      case .dealloc: return "\"dealloc\""
      case .superclass: return "\"superclass\""
      case .retain: return "\"retain\""
      case .release: return "\"release\""
      case .autorelease: return "\"autorelease\""
      case .retainCount: return "\"retainCount\""
      case .zone: return "\"zone\""
      case .isProxy: return "\"isProxy\""
      case .copy: return "\"copy\""
      case .mutableCopy: return "\"mutableCopy\""
      case .classForCoder: return "\"classForCoder\""
      case .clear: return "\"clear\""
      case .data: return "\"data\""
      case .delimitedData: return "\"delimitedData\""
      case .descriptor: return "\"descriptor\""
      case .extensionRegistry: return "\"extensionRegistry\""
      case .extensionsCurrentlySet: return "\"extensionsCurrentlySet\""
      case .isInitialized: return "\"isInitialized\""
      case .serializedSize: return "\"serializedSize\""
      case .sortedExtensionsInUse: return "\"sortedExtensionsInUse\""
      case .unknownFields: return "\"unknownFields\""
      case .fixed: return "\"Fixed\""
      case .fract: return "\"Fract\""
      case .size: return "\"Size\""
      case .logicalAddress: return "\"LogicalAddress\""
      case .physicalAddress: return "\"PhysicalAddress\""
      case .byteCount: return "\"ByteCount\""
      case .byteOffset: return "\"ByteOffset\""
      case .duration: return "\"Duration\""
      case .absoluteTime: return "\"AbsoluteTime\""
      case .optionBits: return "\"OptionBits\""
      case .itemCount: return "\"ItemCount\""
      case .pbversion: return "\"PBVersion\""
      case .scriptCode: return "\"ScriptCode\""
      case .langCode: return "\"LangCode\""
      case .regionCode: return "\"RegionCode\""
      case .ostype: return "\"OSType\""
      case .processSerialNumber: return "\"ProcessSerialNumber\""
      case .point: return "\"Point\""
      case .rect: return "\"Rect\""
      case .fixedPoint: return "\"FixedPoint\""
      case .fixedRect: return "\"FixedRect\""
      case .style: return "\"Style\""
      case .styleParameter: return "\"StyleParameter\""
      case .styleField: return "\"StyleField\""
      case .timeScale: return "\"TimeScale\""
      case .timeBase: return "\"TimeBase\""
      case .timeRecord: return "\"TimeRecord\""
      case .UNRECOGNIZED(let i): return String(i)
      }
    }
  }

  public var hashValue: Int { return rawValue }

  public var debugDescription: String {
    get {
      switch self {
      case .a: return ".a"
      case .string: return ".string"
      case .int: return ".int"
      case .double: return ".double"
      case .float: return ".float"
      case .uint: return ".uint"
      case .hashValue_: return ".hashValue_"
      case .description: return ".description"
      case .debugDescription_: return ".debugDescription_"
      case .swift: return ".swift"
      case .unrecognized: return ".unrecognized"
      case .`class`: return ".class"
      case .`deinit`: return ".deinit"
      case .`enum`: return ".enum"
      case .`extension`: return ".extension"
      case .`func`: return ".func"
      case .`import`: return ".import"
      case .init_: return ".init_"
      case .`inout`: return ".inout"
      case .`internal`: return ".internal"
      case .`let`: return ".let"
      case .`operator`: return ".operator"
      case .`private`: return ".private"
      case .`protocol`: return ".protocol"
      case .`public`: return ".public"
      case .`static`: return ".static"
      case .`struct`: return ".struct"
      case .`subscript`: return ".subscript"
      case .`typealias`: return ".typealias"
      case .`var`: return ".var"
      case .`break`: return ".break"
      case .`case`: return ".case"
      case .`continue`: return ".continue"
      case .`default`: return ".default"
      case .`defer`: return ".defer"
      case .`do`: return ".do"
      case .`else`: return ".else"
      case .`fallthrough`: return ".fallthrough"
      case .`for`: return ".for"
      case .`guard`: return ".guard"
      case .`if`: return ".if"
      case .`in`: return ".in"
      case .`repeat`: return ".repeat"
      case .`return`: return ".return"
      case .`switch`: return ".switch"
      case .`where`: return ".where"
      case .`while`: return ".while"
      case .`as`: return ".as"
      case .`catch`: return ".catch"
      case .`dynamicType`: return ".dynamicType"
      case .`false`: return ".false"
      case .`is`: return ".is"
      case .`nil`: return ".nil"
      case .`rethrows`: return ".rethrows"
      case .`super`: return ".super"
      case .self_: return ".self_"
      case .`throw`: return ".throw"
      case .`throws`: return ".throws"
      case .`true`: return ".true"
      case .`try`: return ".try"
      case ._Column__: return "._Column__"
      case ._File__: return "._File__"
      case ._Function__: return "._Function__"
      case ._Line__: return "._Line__"
      case .___: return ".___"
      case .____: return ".____"
      case .`associativity`: return ".associativity"
      case .convenience: return ".convenience"
      case .dynamic: return ".dynamic"
      case .didSet: return ".didSet"
      case .final: return ".final"
      case .get: return ".get"
      case .infix: return ".infix"
      case .indirect: return ".indirect"
      case .lazy: return ".lazy"
      case .left: return ".left"
      case .mutating: return ".mutating"
      case .none: return ".none"
      case .nonmutating: return ".nonmutating"
      case .`optional`: return ".optional"
      case .override: return ".override"
      case .postfix: return ".postfix"
      case .precedence: return ".precedence"
      case .prefix: return ".prefix"
      case .`required`: return ".required"
      case .right: return ".right"
      case .set: return ".set"
      case .type: return ".type"
      case .unowned: return ".unowned"
      case .weak: return ".weak"
      case .willSet: return ".willSet"
      case .id: return ".id"
      case .cmd: return ".cmd"
      case .out: return ".out"
      case .bycopy: return ".bycopy"
      case .byref: return ".byref"
      case .oneway: return ".oneway"
      case .and: return ".and"
      case .andEq: return ".andEq"
      case .alignas: return ".alignas"
      case .alignof: return ".alignof"
      case .asm: return ".asm"
      case .auto: return ".auto"
      case .bitand: return ".bitand"
      case .bitor: return ".bitor"
      case .bool: return ".bool"
      case .char: return ".char"
      case .char16T: return ".char16T"
      case .char32T: return ".char32T"
      case .compl: return ".compl"
      case .const: return ".const"
      case .constexpr: return ".constexpr"
      case .constCast: return ".constCast"
      case .decltype: return ".decltype"
      case .delete: return ".delete"
      case .dynamicCast: return ".dynamicCast"
      case .explicit: return ".explicit"
      case .export: return ".export"
      case .extern: return ".extern"
      case .friend: return ".friend"
      case .goto: return ".goto"
      case .inline: return ".inline"
      case .long: return ".long"
      case .mutable: return ".mutable"
      case .namespace: return ".namespace"
      case .new: return ".new"
      case .noexcept: return ".noexcept"
      case .not: return ".not"
      case .notEq: return ".notEq"
      case .nullptr: return ".nullptr"
      case .or: return ".or"
      case .orEq: return ".orEq"
      case .protected: return ".protected"
      case .register: return ".register"
      case .reinterpretCast: return ".reinterpretCast"
      case .short: return ".short"
      case .signed: return ".signed"
      case .sizeof: return ".sizeof"
      case .staticAssert: return ".staticAssert"
      case .staticCast: return ".staticCast"
      case .template: return ".template"
      case .this: return ".this"
      case .threadLocal: return ".threadLocal"
      case .typedef: return ".typedef"
      case .typeid: return ".typeid"
      case .typename: return ".typename"
      case .union: return ".union"
      case .unsigned: return ".unsigned"
      case .using: return ".using"
      case .virtual: return ".virtual"
      case .void: return ".void"
      case .volatile: return ".volatile"
      case .wcharT: return ".wcharT"
      case .xor: return ".xor"
      case .xorEq: return ".xorEq"
      case .restrict: return ".restrict"
      case .category: return ".category"
      case .ivar: return ".ivar"
      case .method: return ".method"
      case .finalize: return ".finalize"
      case .hash: return ".hash"
      case .dealloc: return ".dealloc"
      case .superclass: return ".superclass"
      case .retain: return ".retain"
      case .release: return ".release"
      case .autorelease: return ".autorelease"
      case .retainCount: return ".retainCount"
      case .zone: return ".zone"
      case .isProxy: return ".isProxy"
      case .copy: return ".copy"
      case .mutableCopy: return ".mutableCopy"
      case .classForCoder: return ".classForCoder"
      case .clear: return ".clear"
      case .data: return ".data"
      case .delimitedData: return ".delimitedData"
      case .descriptor: return ".descriptor"
      case .extensionRegistry: return ".extensionRegistry"
      case .extensionsCurrentlySet: return ".extensionsCurrentlySet"
      case .isInitialized: return ".isInitialized"
      case .serializedSize: return ".serializedSize"
      case .sortedExtensionsInUse: return ".sortedExtensionsInUse"
      case .unknownFields: return ".unknownFields"
      case .fixed: return ".fixed"
      case .fract: return ".fract"
      case .size: return ".size"
      case .logicalAddress: return ".logicalAddress"
      case .physicalAddress: return ".physicalAddress"
      case .byteCount: return ".byteCount"
      case .byteOffset: return ".byteOffset"
      case .duration: return ".duration"
      case .absoluteTime: return ".absoluteTime"
      case .optionBits: return ".optionBits"
      case .itemCount: return ".itemCount"
      case .pbversion: return ".pbversion"
      case .scriptCode: return ".scriptCode"
      case .langCode: return ".langCode"
      case .regionCode: return ".regionCode"
      case .ostype: return ".ostype"
      case .processSerialNumber: return ".processSerialNumber"
      case .point: return ".point"
      case .rect: return ".rect"
      case .fixedPoint: return ".fixedPoint"
      case .fixedRect: return ".fixedRect"
      case .style: return ".style"
      case .styleParameter: return ".styleParameter"
      case .styleField: return ".styleField"
      case .timeScale: return ".timeScale"
      case .timeBase: return ".timeBase"
      case .timeRecord: return ".timeRecord"
      case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
      }
    }
  }

}

//  TODO: Build a MessageNames message with a submessage of every name below
//  TODO: Create tests that access every field, enum, message to verify the name is generated correctly
public struct SwiftUnittest_Names_FieldNames: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "SwiftUnittest_Names_FieldNames"}
  public var protoMessageName: String {return "FieldNames"}
  public var protoPackageName: String {return "swift_unittest.names"}
  public var jsonFieldNames: [String: Int] {return [
    "string": 1,
    "int": 2,
    "double": 3,
    "float": 4,
    "uInt": 5,
    "hashValue": 6,
    "description": 7,
    "debugDescription": 8,
    "swift": 9,
    "uNRECOGNIZED": 10,
    "class": 11,
    "deinit": 12,
    "enum": 13,
    "extension": 14,
    "func": 15,
    "import": 16,
    "init": 17,
    "inout": 18,
    "internal": 19,
    "let": 20,
    "operator": 21,
    "private": 22,
    "protocol": 23,
    "public": 24,
    "static": 25,
    "struct": 26,
    "subscript": 27,
    "typealias": 28,
    "var": 29,
    "break": 30,
    "case": 31,
    "continue": 32,
    "default": 33,
    "defer": 34,
    "do": 35,
    "else": 36,
    "fallthrough": 37,
    "for": 38,
    "guard": 39,
    "if": 40,
    "in": 41,
    "repeat": 42,
    "return": 43,
    "switch": 44,
    "where": 45,
    "while": 46,
    "as": 47,
    "catch": 48,
    "dynamicType": 49,
    "false": 50,
    "is": 51,
    "nil": 52,
    "rethrows": 53,
    "super": 54,
    "self": 55,
    "throw": 57,
    "throws": 58,
    "true": 59,
    "try": 60,
    "COLUMN": 61,
    "FILE": 62,
    "FUNCTION": 63,
    "LINE": 64,
    "": 65,
    "associativity": 66,
    "convenience": 67,
    "dynamic": 68,
    "didSet": 69,
    "final": 70,
    "get": 71,
    "infix": 72,
    "indirect": 73,
    "lazy": 74,
    "left": 75,
    "mutating": 76,
    "none": 77,
    "nonmutating": 78,
    "optional": 79,
    "override": 80,
    "postfix": 81,
    "precedence": 82,
    "prefix": 83,
    "required": 85,
    "right": 86,
    "set": 87,
    "type": 88,
    "unowned": 89,
    "weak": 90,
    "willSet": 91,
    "id": 92,
    "Cmd": 93,
    "out": 96,
    "bycopy": 98,
    "byref": 99,
    "oneway": 100,
    "and": 102,
    "andEq": 103,
    "alignas": 104,
    "alignof": 105,
    "asm": 106,
    "auto": 107,
    "bitand": 108,
    "bitor": 109,
    "bool": 110,
    "char": 114,
    "char16T": 115,
    "char32T": 116,
    "compl": 118,
    "const": 119,
    "constexpr": 120,
    "constCast": 121,
    "decltype": 123,
    "delete": 125,
    "dynamicCast": 127,
    "explicit": 130,
    "export": 131,
    "extern": 132,
    "friend": 136,
    "goto": 137,
    "inline": 139,
    "long": 141,
    "mutable": 142,
    "namespace": 143,
    "new": 144,
    "noexcept": 145,
    "not": 146,
    "notEq": 147,
    "nullptr": 148,
    "or": 150,
    "orEq": 151,
    "protected": 153,
    "register": 155,
    "reinterpretCast": 156,
    "short": 158,
    "signed": 159,
    "sizeof": 160,
    "staticAssert": 162,
    "staticCast": 163,
    "template": 166,
    "this": 167,
    "threadLocal": 168,
    "typedef": 172,
    "typeid": 173,
    "typename": 174,
    "union": 175,
    "unsigned": 176,
    "using": 177,
    "virtual": 178,
    "void": 179,
    "volatile": 180,
    "wcharT": 181,
    "xor": 183,
    "xorEq": 184,
    "restrict": 185,
    "category": 186,
    "ivar": 187,
    "method": 188,
    "finalize": 192,
    "hash": 193,
    "dealloc": 194,
    "superclass": 197,
    "retain": 198,
    "release": 199,
    "autorelease": 200,
    "retainCount": 201,
    "zone": 202,
    "isProxy": 203,
    "copy": 204,
    "mutableCopy": 205,
    "classForCoder": 206,
    "clear": 207,
    "data": 208,
    "delimitedData": 209,
    "descriptor": 210,
    "extensionRegistry": 211,
    "extensionsCurrentlySet": 212,
    "isInitialized": 213,
    "serializedSize": 214,
    "sortedExtensionsInUse": 215,
    "unknownFields": 216,
    "fixed": 217,
    "fract": 218,
    "size": 219,
    "logicalAddress": 220,
    "physicalAddress": 221,
    "byteCount": 222,
    "byteOffset": 223,
    "duration": 224,
    "absoluteTime": 225,
    "optionBits": 226,
    "itemCount": 227,
    "pBVersion": 228,
    "scriptCode": 229,
    "langCode": 230,
    "regionCode": 231,
    "oSType": 232,
    "processSerialNumber": 233,
    "point": 234,
    "rect": 235,
    "fixedPoint": 236,
    "fixedRect": 237,
    "style": 238,
    "styleParameter": 239,
    "styleField": 240,
    "timeScale": 241,
    "timeBase": 242,
    "timeRecord": 243,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "String": 1,
    "Int": 2,
    "Double": 3,
    "Float": 4,
    "UInt": 5,
    "hashValue": 6,
    "description": 7,
    "debugDescription": 8,
    "Swift": 9,
    "UNRECOGNIZED": 10,
    "class": 11,
    "deinit": 12,
    "enum": 13,
    "extension": 14,
    "func": 15,
    "import": 16,
    "init": 17,
    "inout": 18,
    "internal": 19,
    "let": 20,
    "operator": 21,
    "private": 22,
    "protocol": 23,
    "public": 24,
    "static": 25,
    "struct": 26,
    "subscript": 27,
    "typealias": 28,
    "var": 29,
    "break": 30,
    "case": 31,
    "continue": 32,
    "default": 33,
    "defer": 34,
    "do": 35,
    "else": 36,
    "fallthrough": 37,
    "for": 38,
    "guard": 39,
    "if": 40,
    "in": 41,
    "repeat": 42,
    "return": 43,
    "switch": 44,
    "where": 45,
    "while": 46,
    "as": 47,
    "catch": 48,
    "dynamicType": 49,
    "false": 50,
    "is": 51,
    "nil": 52,
    "rethrows": 53,
    "super": 54,
    "self": 55,
    "throw": 57,
    "throws": 58,
    "true": 59,
    "try": 60,
    "__COLUMN__": 61,
    "__FILE__": 62,
    "__FUNCTION__": 63,
    "__LINE__": 64,
    "_": 65,
    "associativity": 66,
    "convenience": 67,
    "dynamic": 68,
    "didSet": 69,
    "final": 70,
    "get": 71,
    "infix": 72,
    "indirect": 73,
    "lazy": 74,
    "left": 75,
    "mutating": 76,
    "none": 77,
    "nonmutating": 78,
    "optional": 79,
    "override": 80,
    "postfix": 81,
    "precedence": 82,
    "prefix": 83,
    "required": 85,
    "right": 86,
    "set": 87,
    "Type": 88,
    "unowned": 89,
    "weak": 90,
    "willSet": 91,
    "id": 92,
    "_cmd": 93,
    "out": 96,
    "bycopy": 98,
    "byref": 99,
    "oneway": 100,
    "and": 102,
    "and_eq": 103,
    "alignas": 104,
    "alignof": 105,
    "asm": 106,
    "auto": 107,
    "bitand": 108,
    "bitor": 109,
    "bool": 110,
    "char": 114,
    "char16_t": 115,
    "char32_t": 116,
    "compl": 118,
    "const": 119,
    "constexpr": 120,
    "const_cast": 121,
    "decltype": 123,
    "delete": 125,
    "dynamic_cast": 127,
    "explicit": 130,
    "export": 131,
    "extern": 132,
    "friend": 136,
    "goto": 137,
    "inline": 139,
    "long": 141,
    "mutable": 142,
    "namespace": 143,
    "new": 144,
    "noexcept": 145,
    "not": 146,
    "not_eq": 147,
    "nullptr": 148,
    "or": 150,
    "or_eq": 151,
    "protected": 153,
    "register": 155,
    "reinterpret_cast": 156,
    "short": 158,
    "signed": 159,
    "sizeof": 160,
    "static_assert": 162,
    "static_cast": 163,
    "template": 166,
    "this": 167,
    "thread_local": 168,
    "typedef": 172,
    "typeid": 173,
    "typename": 174,
    "union": 175,
    "unsigned": 176,
    "using": 177,
    "virtual": 178,
    "void": 179,
    "volatile": 180,
    "wchar_t": 181,
    "xor": 183,
    "xor_eq": 184,
    "restrict": 185,
    "Category": 186,
    "Ivar": 187,
    "Method": 188,
    "finalize": 192,
    "hash": 193,
    "dealloc": 194,
    "superclass": 197,
    "retain": 198,
    "release": 199,
    "autorelease": 200,
    "retainCount": 201,
    "zone": 202,
    "isProxy": 203,
    "copy": 204,
    "mutableCopy": 205,
    "classForCoder": 206,
    "clear": 207,
    "data": 208,
    "delimitedData": 209,
    "descriptor": 210,
    "extensionRegistry": 211,
    "extensionsCurrentlySet": 212,
    "isInitialized": 213,
    "serializedSize": 214,
    "sortedExtensionsInUse": 215,
    "unknownFields": 216,
    "Fixed": 217,
    "Fract": 218,
    "Size": 219,
    "LogicalAddress": 220,
    "PhysicalAddress": 221,
    "ByteCount": 222,
    "ByteOffset": 223,
    "Duration": 224,
    "AbsoluteTime": 225,
    "OptionBits": 226,
    "ItemCount": 227,
    "PBVersion": 228,
    "ScriptCode": 229,
    "LangCode": 230,
    "RegionCode": 231,
    "OSType": 232,
    "ProcessSerialNumber": 233,
    "Point": 234,
    "Rect": 235,
    "FixedPoint": 236,
    "FixedRect": 237,
    "Style": 238,
    "StyleParameter": 239,
    "StyleField": 240,
    "TimeScale": 241,
    "TimeBase": 242,
    "TimeRecord": 243,
  ]}

  private class _StorageClass {
    typealias ProtobufExtendedMessage = SwiftUnittest_Names_FieldNames
    var _string: Int32 = 0
    var _int: Int32 = 0
    var _double: Int32 = 0
    var _float: Int32 = 0
    var _uint: Int32 = 0
    var _hashValue_p: Int32 = 0
    var _description_p: Int32 = 0
    var _debugDescription_p: Int32 = 0
    var _swift: Int32 = 0
    var _unrecognized: Int32 = 0
    var _class_p: Int32 = 0
    var _deinit_p: Int32 = 0
    var _enum_p: Int32 = 0
    var _extension_p: Int32 = 0
    var _func_p: Int32 = 0
    var _import_p: Int32 = 0
    var _init_p: Int32 = 0
    var _inout_p: Int32 = 0
    var _internal_p: Int32 = 0
    var _let_p: Int32 = 0
    var _operator_p: Int32 = 0
    var _private_p: Int32 = 0
    var _protocol_p: Int32 = 0
    var _public_p: Int32 = 0
    var _static_p: Int32 = 0
    var _struct_p: Int32 = 0
    var _subscript_p: Int32 = 0
    var _typealias_p: Int32 = 0
    var _var_p: Int32 = 0
    var _break_p: Int32 = 0
    var _case_p: Int32 = 0
    var _continue_p: Int32 = 0
    var _default_p: Int32 = 0
    var _defer_p: Int32 = 0
    var _do_p: Int32 = 0
    var _else_p: Int32 = 0
    var _fallthrough_p: Int32 = 0
    var _for_p: Int32 = 0
    var _guard_p: Int32 = 0
    var _if_p: Int32 = 0
    var _in_p: Int32 = 0
    var _repeat_p: Int32 = 0
    var _return_p: Int32 = 0
    var _switch_p: Int32 = 0
    var _where_p: Int32 = 0
    var _while_p: Int32 = 0
    var _as_p: Int32 = 0
    var _catch_p: Int32 = 0
    var _dynamicType_p: Int32 = 0
    var _false_p: Int32 = 0
    var _is_p: Int32 = 0
    var _nil_p: Int32 = 0
    var _rethrows_p: Int32 = 0
    var _super_p: Int32 = 0
    var _self_p: Int32 = 0
    var _throw_p: Int32 = 0
    var _throws_p: Int32 = 0
    var _true_p: Int32 = 0
    var _try_p: Int32 = 0
    var __Column__: Int32 = 0
    var __File__: Int32 = 0
    var __Function__: Int32 = 0
    var __Line__: Int32 = 0
    var ____: Int32 = 0
    var _associativity: Int32 = 0
    var _convenience: Int32 = 0
    var _dynamic: Int32 = 0
    var _didSet: Int32 = 0
    var _final: Int32 = 0
    var _get: Int32 = 0
    var _infix: Int32 = 0
    var _indirect: Int32 = 0
    var _lazy: Int32 = 0
    var _left: Int32 = 0
    var _mutating: Int32 = 0
    var _none: Int32 = 0
    var _nonmutating: Int32 = 0
    var _optional: Int32 = 0
    var _override: Int32 = 0
    var _postfix: Int32 = 0
    var _precedence: Int32 = 0
    var _prefix: Int32 = 0
    var _required: Int32 = 0
    var _right: Int32 = 0
    var _set: Int32 = 0
    var _type: Int32 = 0
    var _unowned: Int32 = 0
    var _weak: Int32 = 0
    var _willSet: Int32 = 0
    var _id: Int32 = 0
    var _cmd: Int32 = 0
    var _out: Int32 = 0
    var _bycopy: Int32 = 0
    var _byref: Int32 = 0
    var _oneway: Int32 = 0
    var _and: Int32 = 0
    var _andEq: Int32 = 0
    var _alignas: Int32 = 0
    var _alignof: Int32 = 0
    var _asm: Int32 = 0
    var _auto: Int32 = 0
    var _bitand: Int32 = 0
    var _bitor: Int32 = 0
    var _bool: Int32 = 0
    var _char: Int32 = 0
    var _char16T: Int32 = 0
    var _char32T: Int32 = 0
    var _compl: Int32 = 0
    var _const: Int32 = 0
    var _constexpr: Int32 = 0
    var _constCast: Int32 = 0
    var _decltype: Int32 = 0
    var _delete: Int32 = 0
    var _dynamicCast: Int32 = 0
    var _explicit: Int32 = 0
    var _export: Int32 = 0
    var _extern: Int32 = 0
    var _friend: Int32 = 0
    var _goto: Int32 = 0
    var _inline: Int32 = 0
    var _long: Int32 = 0
    var _mutable: Int32 = 0
    var _namespace: Int32 = 0
    var _new: Int32 = 0
    var _noexcept: Int32 = 0
    var _not: Int32 = 0
    var _notEq: Int32 = 0
    var _nullptr: Int32 = 0
    var _or: Int32 = 0
    var _orEq: Int32 = 0
    var _protected: Int32 = 0
    var _register: Int32 = 0
    var _reinterpretCast: Int32 = 0
    var _short: Int32 = 0
    var _signed: Int32 = 0
    var _sizeof: Int32 = 0
    var _staticAssert: Int32 = 0
    var _staticCast: Int32 = 0
    var _template: Int32 = 0
    var _this: Int32 = 0
    var _threadLocal: Int32 = 0
    var _typedef: Int32 = 0
    var _typeid: Int32 = 0
    var _typename: Int32 = 0
    var _union: Int32 = 0
    var _unsigned: Int32 = 0
    var _using: Int32 = 0
    var _virtual: Int32 = 0
    var _void: Int32 = 0
    var _volatile: Int32 = 0
    var _wcharT: Int32 = 0
    var _xor: Int32 = 0
    var _xorEq: Int32 = 0
    var _restrict: Int32 = 0
    var _category: Int32 = 0
    var _ivar: Int32 = 0
    var _method: Int32 = 0
    var _finalize: Int32 = 0
    var _hash: Int32 = 0
    var _dealloc: Int32 = 0
    var _superclass: Int32 = 0
    var _retain: Int32 = 0
    var _release: Int32 = 0
    var _autorelease: Int32 = 0
    var _retainCount: Int32 = 0
    var _zone: Int32 = 0
    var _isProxy: Int32 = 0
    var _copy: Int32 = 0
    var _mutableCopy: Int32 = 0
    var _classForCoder: Int32 = 0
    var _clear: Int32 = 0
    var _data: Int32 = 0
    var _delimitedData: Int32 = 0
    var _descriptor: Int32 = 0
    var _extensionRegistry: Int32 = 0
    var _extensionsCurrentlySet: Int32 = 0
    var _isInitialized: Int32 = 0
    var _serializedSize: Int32 = 0
    var _sortedExtensionsInUse: Int32 = 0
    var _unknownFields: Int32 = 0
    var _fixed: Int32 = 0
    var _fract: Int32 = 0
    var _size: Int32 = 0
    var _logicalAddress: Int32 = 0
    var _physicalAddress: Int32 = 0
    var _byteCount: Int32 = 0
    var _byteOffset: Int32 = 0
    var _duration: Int32 = 0
    var _absoluteTime: Int32 = 0
    var _optionBits: Int32 = 0
    var _itemCount: Int32 = 0
    var _pbversion: Int32 = 0
    var _scriptCode: Int32 = 0
    var _langCode: Int32 = 0
    var _regionCode: Int32 = 0
    var _ostype: Int32 = 0
    var _processSerialNumber: Int32 = 0
    var _point: Int32 = 0
    var _rect: Int32 = 0
    var _fixedPoint: Int32 = 0
    var _fixedRect: Int32 = 0
    var _style: Int32 = 0
    var _styleParameter: Int32 = 0
    var _styleField: Int32 = 0
    var _timeScale: Int32 = 0
    var _timeBase: Int32 = 0
    var _timeRecord: Int32 = 0

    init() {}

    func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_string)
      case 2: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_int)
      case 3: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_double)
      case 4: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_float)
      case 5: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_uint)
      case 6: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_hashValue_p)
      case 7: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_description_p)
      case 8: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_debugDescription_p)
      case 9: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_swift)
      case 10: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_unrecognized)
      case 11: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_class_p)
      case 12: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_deinit_p)
      case 13: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_enum_p)
      case 14: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_extension_p)
      case 15: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_func_p)
      case 16: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_import_p)
      case 17: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_init_p)
      case 18: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_inout_p)
      case 19: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_internal_p)
      case 20: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_let_p)
      case 21: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_operator_p)
      case 22: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_private_p)
      case 23: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_protocol_p)
      case 24: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_public_p)
      case 25: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_static_p)
      case 26: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_struct_p)
      case 27: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_subscript_p)
      case 28: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_typealias_p)
      case 29: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_var_p)
      case 30: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_break_p)
      case 31: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_case_p)
      case 32: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_continue_p)
      case 33: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_default_p)
      case 34: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_defer_p)
      case 35: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_do_p)
      case 36: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_else_p)
      case 37: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_fallthrough_p)
      case 38: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_for_p)
      case 39: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_guard_p)
      case 40: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_if_p)
      case 41: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_in_p)
      case 42: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_repeat_p)
      case 43: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_return_p)
      case 44: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_switch_p)
      case 45: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_where_p)
      case 46: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_while_p)
      case 47: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_as_p)
      case 48: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_catch_p)
      case 49: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_dynamicType_p)
      case 50: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_false_p)
      case 51: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_is_p)
      case 52: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_nil_p)
      case 53: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_rethrows_p)
      case 54: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_super_p)
      case 55: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_self_p)
      case 57: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_throw_p)
      case 58: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_throws_p)
      case 59: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_true_p)
      case 60: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_try_p)
      case 61: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &__Column__)
      case 62: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &__File__)
      case 63: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &__Function__)
      case 64: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &__Line__)
      case 65: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &____)
      case 66: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_associativity)
      case 67: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_convenience)
      case 68: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_dynamic)
      case 69: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_didSet)
      case 70: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_final)
      case 71: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_get)
      case 72: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_infix)
      case 73: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_indirect)
      case 74: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_lazy)
      case 75: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_left)
      case 76: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_mutating)
      case 77: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_none)
      case 78: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_nonmutating)
      case 79: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_optional)
      case 80: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_override)
      case 81: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_postfix)
      case 82: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_precedence)
      case 83: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_prefix)
      case 85: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_required)
      case 86: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_right)
      case 87: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_set)
      case 88: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_type)
      case 89: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_unowned)
      case 90: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_weak)
      case 91: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_willSet)
      case 92: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_id)
      case 93: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_cmd)
      case 96: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_out)
      case 98: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_bycopy)
      case 99: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_byref)
      case 100: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_oneway)
      case 102: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_and)
      case 103: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_andEq)
      case 104: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_alignas)
      case 105: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_alignof)
      case 106: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_asm)
      case 107: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_auto)
      case 108: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_bitand)
      case 109: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_bitor)
      case 110: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_bool)
      case 114: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_char)
      case 115: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_char16T)
      case 116: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_char32T)
      case 118: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_compl)
      case 119: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_const)
      case 120: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_constexpr)
      case 121: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_constCast)
      case 123: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_decltype)
      case 125: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_delete)
      case 127: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_dynamicCast)
      case 130: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_explicit)
      case 131: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_export)
      case 132: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_extern)
      case 136: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_friend)
      case 137: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_goto)
      case 139: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_inline)
      case 141: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_long)
      case 142: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_mutable)
      case 143: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_namespace)
      case 144: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_new)
      case 145: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_noexcept)
      case 146: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_not)
      case 147: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_notEq)
      case 148: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_nullptr)
      case 150: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_or)
      case 151: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_orEq)
      case 153: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_protected)
      case 155: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_register)
      case 156: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_reinterpretCast)
      case 158: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_short)
      case 159: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_signed)
      case 160: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_sizeof)
      case 162: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_staticAssert)
      case 163: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_staticCast)
      case 166: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_template)
      case 167: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_this)
      case 168: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_threadLocal)
      case 172: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_typedef)
      case 173: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_typeid)
      case 174: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_typename)
      case 175: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_union)
      case 176: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_unsigned)
      case 177: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_using)
      case 178: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_virtual)
      case 179: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_void)
      case 180: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_volatile)
      case 181: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_wcharT)
      case 183: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_xor)
      case 184: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_xorEq)
      case 185: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_restrict)
      case 186: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_category)
      case 187: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_ivar)
      case 188: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_method)
      case 192: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_finalize)
      case 193: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_hash)
      case 194: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_dealloc)
      case 197: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_superclass)
      case 198: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_retain)
      case 199: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_release)
      case 200: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_autorelease)
      case 201: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_retainCount)
      case 202: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_zone)
      case 203: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_isProxy)
      case 204: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_copy)
      case 205: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_mutableCopy)
      case 206: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_classForCoder)
      case 207: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_clear)
      case 208: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_data)
      case 209: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_delimitedData)
      case 210: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_descriptor)
      case 211: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_extensionRegistry)
      case 212: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_extensionsCurrentlySet)
      case 213: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_isInitialized)
      case 214: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_serializedSize)
      case 215: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_sortedExtensionsInUse)
      case 216: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_unknownFields)
      case 217: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_fixed)
      case 218: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_fract)
      case 219: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_size)
      case 220: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_logicalAddress)
      case 221: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_physicalAddress)
      case 222: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_byteCount)
      case 223: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_byteOffset)
      case 224: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_duration)
      case 225: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_absoluteTime)
      case 226: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_optionBits)
      case 227: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_itemCount)
      case 228: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_pbversion)
      case 229: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_scriptCode)
      case 230: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_langCode)
      case 231: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_regionCode)
      case 232: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_ostype)
      case 233: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_processSerialNumber)
      case 234: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_point)
      case 235: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_rect)
      case 236: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_fixedPoint)
      case 237: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_fixedRect)
      case 238: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_style)
      case 239: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_styleParameter)
      case 240: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_styleField)
      case 241: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_timeScale)
      case 242: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_timeBase)
      case 243: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_timeRecord)
      default:
        handled = false
      }
      return handled
    }

    func traverse(visitor: inout ProtobufVisitor) throws {
      if _string != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _string, protoFieldNumber: 1, protoFieldName: "String", jsonFieldName: "string", swiftFieldName: "string")
      }
      if _int != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _int, protoFieldNumber: 2, protoFieldName: "Int", jsonFieldName: "int", swiftFieldName: "int")
      }
      if _double != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _double, protoFieldNumber: 3, protoFieldName: "Double", jsonFieldName: "double", swiftFieldName: "double")
      }
      if _float != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _float, protoFieldNumber: 4, protoFieldName: "Float", jsonFieldName: "float", swiftFieldName: "float")
      }
      if _uint != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _uint, protoFieldNumber: 5, protoFieldName: "UInt", jsonFieldName: "uInt", swiftFieldName: "uint")
      }
      if _hashValue_p != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _hashValue_p, protoFieldNumber: 6, protoFieldName: "hashValue", jsonFieldName: "hashValue", swiftFieldName: "hashValue_p")
      }
      if _description_p != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _description_p, protoFieldNumber: 7, protoFieldName: "description", jsonFieldName: "description", swiftFieldName: "description_p")
      }
      if _debugDescription_p != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _debugDescription_p, protoFieldNumber: 8, protoFieldName: "debugDescription", jsonFieldName: "debugDescription", swiftFieldName: "debugDescription_p")
      }
      if _swift != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _swift, protoFieldNumber: 9, protoFieldName: "Swift", jsonFieldName: "swift", swiftFieldName: "swift")
      }
      if _unrecognized != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _unrecognized, protoFieldNumber: 10, protoFieldName: "UNRECOGNIZED", jsonFieldName: "uNRECOGNIZED", swiftFieldName: "unrecognized")
      }
      if _class_p != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _class_p, protoFieldNumber: 11, protoFieldName: "class", jsonFieldName: "class", swiftFieldName: "class_p")
      }
      if _deinit_p != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _deinit_p, protoFieldNumber: 12, protoFieldName: "deinit", jsonFieldName: "deinit", swiftFieldName: "deinit_p")
      }
      if _enum_p != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _enum_p, protoFieldNumber: 13, protoFieldName: "enum", jsonFieldName: "enum", swiftFieldName: "enum_p")
      }
      if _extension_p != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _extension_p, protoFieldNumber: 14, protoFieldName: "extension", jsonFieldName: "extension", swiftFieldName: "extension_p")
      }
      if _func_p != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _func_p, protoFieldNumber: 15, protoFieldName: "func", jsonFieldName: "func", swiftFieldName: "func_p")
      }
      if _import_p != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _import_p, protoFieldNumber: 16, protoFieldName: "import", jsonFieldName: "import", swiftFieldName: "import_p")
      }
      if _init_p != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _init_p, protoFieldNumber: 17, protoFieldName: "init", jsonFieldName: "init", swiftFieldName: "init_p")
      }
      if _inout_p != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _inout_p, protoFieldNumber: 18, protoFieldName: "inout", jsonFieldName: "inout", swiftFieldName: "inout_p")
      }
      if _internal_p != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _internal_p, protoFieldNumber: 19, protoFieldName: "internal", jsonFieldName: "internal", swiftFieldName: "internal_p")
      }
      if _let_p != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _let_p, protoFieldNumber: 20, protoFieldName: "let", jsonFieldName: "let", swiftFieldName: "let_p")
      }
      if _operator_p != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _operator_p, protoFieldNumber: 21, protoFieldName: "operator", jsonFieldName: "operator", swiftFieldName: "operator_p")
      }
      if _private_p != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _private_p, protoFieldNumber: 22, protoFieldName: "private", jsonFieldName: "private", swiftFieldName: "private_p")
      }
      if _protocol_p != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _protocol_p, protoFieldNumber: 23, protoFieldName: "protocol", jsonFieldName: "protocol", swiftFieldName: "protocol_p")
      }
      if _public_p != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _public_p, protoFieldNumber: 24, protoFieldName: "public", jsonFieldName: "public", swiftFieldName: "public_p")
      }
      if _static_p != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _static_p, protoFieldNumber: 25, protoFieldName: "static", jsonFieldName: "static", swiftFieldName: "static_p")
      }
      if _struct_p != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _struct_p, protoFieldNumber: 26, protoFieldName: "struct", jsonFieldName: "struct", swiftFieldName: "struct_p")
      }
      if _subscript_p != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _subscript_p, protoFieldNumber: 27, protoFieldName: "subscript", jsonFieldName: "subscript", swiftFieldName: "subscript_p")
      }
      if _typealias_p != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _typealias_p, protoFieldNumber: 28, protoFieldName: "typealias", jsonFieldName: "typealias", swiftFieldName: "typealias_p")
      }
      if _var_p != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _var_p, protoFieldNumber: 29, protoFieldName: "var", jsonFieldName: "var", swiftFieldName: "var_p")
      }
      if _break_p != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _break_p, protoFieldNumber: 30, protoFieldName: "break", jsonFieldName: "break", swiftFieldName: "break_p")
      }
      if _case_p != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _case_p, protoFieldNumber: 31, protoFieldName: "case", jsonFieldName: "case", swiftFieldName: "case_p")
      }
      if _continue_p != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _continue_p, protoFieldNumber: 32, protoFieldName: "continue", jsonFieldName: "continue", swiftFieldName: "continue_p")
      }
      if _default_p != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _default_p, protoFieldNumber: 33, protoFieldName: "default", jsonFieldName: "default", swiftFieldName: "default_p")
      }
      if _defer_p != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _defer_p, protoFieldNumber: 34, protoFieldName: "defer", jsonFieldName: "defer", swiftFieldName: "defer_p")
      }
      if _do_p != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _do_p, protoFieldNumber: 35, protoFieldName: "do", jsonFieldName: "do", swiftFieldName: "do_p")
      }
      if _else_p != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _else_p, protoFieldNumber: 36, protoFieldName: "else", jsonFieldName: "else", swiftFieldName: "else_p")
      }
      if _fallthrough_p != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _fallthrough_p, protoFieldNumber: 37, protoFieldName: "fallthrough", jsonFieldName: "fallthrough", swiftFieldName: "fallthrough_p")
      }
      if _for_p != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _for_p, protoFieldNumber: 38, protoFieldName: "for", jsonFieldName: "for", swiftFieldName: "for_p")
      }
      if _guard_p != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _guard_p, protoFieldNumber: 39, protoFieldName: "guard", jsonFieldName: "guard", swiftFieldName: "guard_p")
      }
      if _if_p != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _if_p, protoFieldNumber: 40, protoFieldName: "if", jsonFieldName: "if", swiftFieldName: "if_p")
      }
      if _in_p != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _in_p, protoFieldNumber: 41, protoFieldName: "in", jsonFieldName: "in", swiftFieldName: "in_p")
      }
      if _repeat_p != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _repeat_p, protoFieldNumber: 42, protoFieldName: "repeat", jsonFieldName: "repeat", swiftFieldName: "repeat_p")
      }
      if _return_p != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _return_p, protoFieldNumber: 43, protoFieldName: "return", jsonFieldName: "return", swiftFieldName: "return_p")
      }
      if _switch_p != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _switch_p, protoFieldNumber: 44, protoFieldName: "switch", jsonFieldName: "switch", swiftFieldName: "switch_p")
      }
      if _where_p != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _where_p, protoFieldNumber: 45, protoFieldName: "where", jsonFieldName: "where", swiftFieldName: "where_p")
      }
      if _while_p != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _while_p, protoFieldNumber: 46, protoFieldName: "while", jsonFieldName: "while", swiftFieldName: "while_p")
      }
      if _as_p != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _as_p, protoFieldNumber: 47, protoFieldName: "as", jsonFieldName: "as", swiftFieldName: "as_p")
      }
      if _catch_p != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _catch_p, protoFieldNumber: 48, protoFieldName: "catch", jsonFieldName: "catch", swiftFieldName: "catch_p")
      }
      if _dynamicType_p != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _dynamicType_p, protoFieldNumber: 49, protoFieldName: "dynamicType", jsonFieldName: "dynamicType", swiftFieldName: "dynamicType_p")
      }
      if _false_p != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _false_p, protoFieldNumber: 50, protoFieldName: "false", jsonFieldName: "false", swiftFieldName: "false_p")
      }
      if _is_p != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _is_p, protoFieldNumber: 51, protoFieldName: "is", jsonFieldName: "is", swiftFieldName: "is_p")
      }
      if _nil_p != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _nil_p, protoFieldNumber: 52, protoFieldName: "nil", jsonFieldName: "nil", swiftFieldName: "nil_p")
      }
      if _rethrows_p != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _rethrows_p, protoFieldNumber: 53, protoFieldName: "rethrows", jsonFieldName: "rethrows", swiftFieldName: "rethrows_p")
      }
      if _super_p != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _super_p, protoFieldNumber: 54, protoFieldName: "super", jsonFieldName: "super", swiftFieldName: "super_p")
      }
      if _self_p != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _self_p, protoFieldNumber: 55, protoFieldName: "self", jsonFieldName: "self", swiftFieldName: "self_p")
      }
      if _throw_p != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _throw_p, protoFieldNumber: 57, protoFieldName: "throw", jsonFieldName: "throw", swiftFieldName: "throw_p")
      }
      if _throws_p != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _throws_p, protoFieldNumber: 58, protoFieldName: "throws", jsonFieldName: "throws", swiftFieldName: "throws_p")
      }
      if _true_p != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _true_p, protoFieldNumber: 59, protoFieldName: "true", jsonFieldName: "true", swiftFieldName: "true_p")
      }
      if _try_p != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _try_p, protoFieldNumber: 60, protoFieldName: "try", jsonFieldName: "try", swiftFieldName: "try_p")
      }
      if __Column__ != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: __Column__, protoFieldNumber: 61, protoFieldName: "__COLUMN__", jsonFieldName: "COLUMN", swiftFieldName: "_Column__")
      }
      if __File__ != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: __File__, protoFieldNumber: 62, protoFieldName: "__FILE__", jsonFieldName: "FILE", swiftFieldName: "_File__")
      }
      if __Function__ != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: __Function__, protoFieldNumber: 63, protoFieldName: "__FUNCTION__", jsonFieldName: "FUNCTION", swiftFieldName: "_Function__")
      }
      if __Line__ != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: __Line__, protoFieldNumber: 64, protoFieldName: "__LINE__", jsonFieldName: "LINE", swiftFieldName: "_Line__")
      }
      if ____ != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: ____, protoFieldNumber: 65, protoFieldName: "_", jsonFieldName: "", swiftFieldName: "___")
      }
      if _associativity != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _associativity, protoFieldNumber: 66, protoFieldName: "associativity", jsonFieldName: "associativity", swiftFieldName: "associativity")
      }
      if _convenience != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _convenience, protoFieldNumber: 67, protoFieldName: "convenience", jsonFieldName: "convenience", swiftFieldName: "convenience")
      }
      if _dynamic != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _dynamic, protoFieldNumber: 68, protoFieldName: "dynamic", jsonFieldName: "dynamic", swiftFieldName: "dynamic")
      }
      if _didSet != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _didSet, protoFieldNumber: 69, protoFieldName: "didSet", jsonFieldName: "didSet", swiftFieldName: "didSet")
      }
      if _final != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _final, protoFieldNumber: 70, protoFieldName: "final", jsonFieldName: "final", swiftFieldName: "final")
      }
      if _get != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _get, protoFieldNumber: 71, protoFieldName: "get", jsonFieldName: "get", swiftFieldName: "get")
      }
      if _infix != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _infix, protoFieldNumber: 72, protoFieldName: "infix", jsonFieldName: "infix", swiftFieldName: "infix")
      }
      if _indirect != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _indirect, protoFieldNumber: 73, protoFieldName: "indirect", jsonFieldName: "indirect", swiftFieldName: "indirect")
      }
      if _lazy != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _lazy, protoFieldNumber: 74, protoFieldName: "lazy", jsonFieldName: "lazy", swiftFieldName: "lazy")
      }
      if _left != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _left, protoFieldNumber: 75, protoFieldName: "left", jsonFieldName: "left", swiftFieldName: "left")
      }
      if _mutating != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _mutating, protoFieldNumber: 76, protoFieldName: "mutating", jsonFieldName: "mutating", swiftFieldName: "mutating")
      }
      if _none != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _none, protoFieldNumber: 77, protoFieldName: "none", jsonFieldName: "none", swiftFieldName: "none")
      }
      if _nonmutating != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _nonmutating, protoFieldNumber: 78, protoFieldName: "nonmutating", jsonFieldName: "nonmutating", swiftFieldName: "nonmutating")
      }
      if _optional != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _optional, protoFieldNumber: 79, protoFieldName: "optional", jsonFieldName: "optional", swiftFieldName: "optional")
      }
      if _override != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _override, protoFieldNumber: 80, protoFieldName: "override", jsonFieldName: "override", swiftFieldName: "override")
      }
      if _postfix != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _postfix, protoFieldNumber: 81, protoFieldName: "postfix", jsonFieldName: "postfix", swiftFieldName: "postfix")
      }
      if _precedence != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _precedence, protoFieldNumber: 82, protoFieldName: "precedence", jsonFieldName: "precedence", swiftFieldName: "precedence")
      }
      if _prefix != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _prefix, protoFieldNumber: 83, protoFieldName: "prefix", jsonFieldName: "prefix", swiftFieldName: "prefix")
      }
      if _required != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _required, protoFieldNumber: 85, protoFieldName: "required", jsonFieldName: "required", swiftFieldName: "required")
      }
      if _right != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _right, protoFieldNumber: 86, protoFieldName: "right", jsonFieldName: "right", swiftFieldName: "right")
      }
      if _set != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _set, protoFieldNumber: 87, protoFieldName: "set", jsonFieldName: "set", swiftFieldName: "set")
      }
      if _type != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _type, protoFieldNumber: 88, protoFieldName: "Type", jsonFieldName: "type", swiftFieldName: "type")
      }
      if _unowned != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _unowned, protoFieldNumber: 89, protoFieldName: "unowned", jsonFieldName: "unowned", swiftFieldName: "unowned")
      }
      if _weak != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _weak, protoFieldNumber: 90, protoFieldName: "weak", jsonFieldName: "weak", swiftFieldName: "weak")
      }
      if _willSet != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _willSet, protoFieldNumber: 91, protoFieldName: "willSet", jsonFieldName: "willSet", swiftFieldName: "willSet")
      }
      if _id != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _id, protoFieldNumber: 92, protoFieldName: "id", jsonFieldName: "id", swiftFieldName: "id")
      }
      if _cmd != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _cmd, protoFieldNumber: 93, protoFieldName: "_cmd", jsonFieldName: "Cmd", swiftFieldName: "cmd")
      }
      if _out != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _out, protoFieldNumber: 96, protoFieldName: "out", jsonFieldName: "out", swiftFieldName: "out")
      }
      if _bycopy != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _bycopy, protoFieldNumber: 98, protoFieldName: "bycopy", jsonFieldName: "bycopy", swiftFieldName: "bycopy")
      }
      if _byref != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _byref, protoFieldNumber: 99, protoFieldName: "byref", jsonFieldName: "byref", swiftFieldName: "byref")
      }
      if _oneway != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _oneway, protoFieldNumber: 100, protoFieldName: "oneway", jsonFieldName: "oneway", swiftFieldName: "oneway")
      }
      if _and != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _and, protoFieldNumber: 102, protoFieldName: "and", jsonFieldName: "and", swiftFieldName: "and")
      }
      if _andEq != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _andEq, protoFieldNumber: 103, protoFieldName: "and_eq", jsonFieldName: "andEq", swiftFieldName: "andEq")
      }
      if _alignas != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _alignas, protoFieldNumber: 104, protoFieldName: "alignas", jsonFieldName: "alignas", swiftFieldName: "alignas")
      }
      if _alignof != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _alignof, protoFieldNumber: 105, protoFieldName: "alignof", jsonFieldName: "alignof", swiftFieldName: "alignof")
      }
      if _asm != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _asm, protoFieldNumber: 106, protoFieldName: "asm", jsonFieldName: "asm", swiftFieldName: "asm")
      }
      if _auto != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _auto, protoFieldNumber: 107, protoFieldName: "auto", jsonFieldName: "auto", swiftFieldName: "auto")
      }
      if _bitand != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _bitand, protoFieldNumber: 108, protoFieldName: "bitand", jsonFieldName: "bitand", swiftFieldName: "bitand")
      }
      if _bitor != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _bitor, protoFieldNumber: 109, protoFieldName: "bitor", jsonFieldName: "bitor", swiftFieldName: "bitor")
      }
      if _bool != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _bool, protoFieldNumber: 110, protoFieldName: "bool", jsonFieldName: "bool", swiftFieldName: "bool")
      }
      if _char != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _char, protoFieldNumber: 114, protoFieldName: "char", jsonFieldName: "char", swiftFieldName: "char")
      }
      if _char16T != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _char16T, protoFieldNumber: 115, protoFieldName: "char16_t", jsonFieldName: "char16T", swiftFieldName: "char16T")
      }
      if _char32T != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _char32T, protoFieldNumber: 116, protoFieldName: "char32_t", jsonFieldName: "char32T", swiftFieldName: "char32T")
      }
      if _compl != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _compl, protoFieldNumber: 118, protoFieldName: "compl", jsonFieldName: "compl", swiftFieldName: "compl")
      }
      if _const != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _const, protoFieldNumber: 119, protoFieldName: "const", jsonFieldName: "const", swiftFieldName: "const")
      }
      if _constexpr != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _constexpr, protoFieldNumber: 120, protoFieldName: "constexpr", jsonFieldName: "constexpr", swiftFieldName: "constexpr")
      }
      if _constCast != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _constCast, protoFieldNumber: 121, protoFieldName: "const_cast", jsonFieldName: "constCast", swiftFieldName: "constCast")
      }
      if _decltype != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _decltype, protoFieldNumber: 123, protoFieldName: "decltype", jsonFieldName: "decltype", swiftFieldName: "decltype")
      }
      if _delete != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _delete, protoFieldNumber: 125, protoFieldName: "delete", jsonFieldName: "delete", swiftFieldName: "delete")
      }
      if _dynamicCast != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _dynamicCast, protoFieldNumber: 127, protoFieldName: "dynamic_cast", jsonFieldName: "dynamicCast", swiftFieldName: "dynamicCast")
      }
      if _explicit != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _explicit, protoFieldNumber: 130, protoFieldName: "explicit", jsonFieldName: "explicit", swiftFieldName: "explicit")
      }
      if _export != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _export, protoFieldNumber: 131, protoFieldName: "export", jsonFieldName: "export", swiftFieldName: "export")
      }
      if _extern != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _extern, protoFieldNumber: 132, protoFieldName: "extern", jsonFieldName: "extern", swiftFieldName: "extern")
      }
      if _friend != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _friend, protoFieldNumber: 136, protoFieldName: "friend", jsonFieldName: "friend", swiftFieldName: "friend")
      }
      if _goto != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _goto, protoFieldNumber: 137, protoFieldName: "goto", jsonFieldName: "goto", swiftFieldName: "goto")
      }
      if _inline != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _inline, protoFieldNumber: 139, protoFieldName: "inline", jsonFieldName: "inline", swiftFieldName: "inline")
      }
      if _long != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _long, protoFieldNumber: 141, protoFieldName: "long", jsonFieldName: "long", swiftFieldName: "long")
      }
      if _mutable != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _mutable, protoFieldNumber: 142, protoFieldName: "mutable", jsonFieldName: "mutable", swiftFieldName: "mutable")
      }
      if _namespace != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _namespace, protoFieldNumber: 143, protoFieldName: "namespace", jsonFieldName: "namespace", swiftFieldName: "namespace")
      }
      if _new != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _new, protoFieldNumber: 144, protoFieldName: "new", jsonFieldName: "new", swiftFieldName: "new")
      }
      if _noexcept != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _noexcept, protoFieldNumber: 145, protoFieldName: "noexcept", jsonFieldName: "noexcept", swiftFieldName: "noexcept")
      }
      if _not != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _not, protoFieldNumber: 146, protoFieldName: "not", jsonFieldName: "not", swiftFieldName: "not")
      }
      if _notEq != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _notEq, protoFieldNumber: 147, protoFieldName: "not_eq", jsonFieldName: "notEq", swiftFieldName: "notEq")
      }
      if _nullptr != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _nullptr, protoFieldNumber: 148, protoFieldName: "nullptr", jsonFieldName: "nullptr", swiftFieldName: "nullptr")
      }
      if _or != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _or, protoFieldNumber: 150, protoFieldName: "or", jsonFieldName: "or", swiftFieldName: "or")
      }
      if _orEq != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _orEq, protoFieldNumber: 151, protoFieldName: "or_eq", jsonFieldName: "orEq", swiftFieldName: "orEq")
      }
      if _protected != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _protected, protoFieldNumber: 153, protoFieldName: "protected", jsonFieldName: "protected", swiftFieldName: "protected")
      }
      if _register != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _register, protoFieldNumber: 155, protoFieldName: "register", jsonFieldName: "register", swiftFieldName: "register")
      }
      if _reinterpretCast != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _reinterpretCast, protoFieldNumber: 156, protoFieldName: "reinterpret_cast", jsonFieldName: "reinterpretCast", swiftFieldName: "reinterpretCast")
      }
      if _short != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _short, protoFieldNumber: 158, protoFieldName: "short", jsonFieldName: "short", swiftFieldName: "short")
      }
      if _signed != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _signed, protoFieldNumber: 159, protoFieldName: "signed", jsonFieldName: "signed", swiftFieldName: "signed")
      }
      if _sizeof != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _sizeof, protoFieldNumber: 160, protoFieldName: "sizeof", jsonFieldName: "sizeof", swiftFieldName: "sizeof")
      }
      if _staticAssert != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _staticAssert, protoFieldNumber: 162, protoFieldName: "static_assert", jsonFieldName: "staticAssert", swiftFieldName: "staticAssert")
      }
      if _staticCast != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _staticCast, protoFieldNumber: 163, protoFieldName: "static_cast", jsonFieldName: "staticCast", swiftFieldName: "staticCast")
      }
      if _template != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _template, protoFieldNumber: 166, protoFieldName: "template", jsonFieldName: "template", swiftFieldName: "template")
      }
      if _this != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _this, protoFieldNumber: 167, protoFieldName: "this", jsonFieldName: "this", swiftFieldName: "this")
      }
      if _threadLocal != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _threadLocal, protoFieldNumber: 168, protoFieldName: "thread_local", jsonFieldName: "threadLocal", swiftFieldName: "threadLocal")
      }
      if _typedef != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _typedef, protoFieldNumber: 172, protoFieldName: "typedef", jsonFieldName: "typedef", swiftFieldName: "typedef")
      }
      if _typeid != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _typeid, protoFieldNumber: 173, protoFieldName: "typeid", jsonFieldName: "typeid", swiftFieldName: "typeid")
      }
      if _typename != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _typename, protoFieldNumber: 174, protoFieldName: "typename", jsonFieldName: "typename", swiftFieldName: "typename")
      }
      if _union != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _union, protoFieldNumber: 175, protoFieldName: "union", jsonFieldName: "union", swiftFieldName: "union")
      }
      if _unsigned != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _unsigned, protoFieldNumber: 176, protoFieldName: "unsigned", jsonFieldName: "unsigned", swiftFieldName: "unsigned")
      }
      if _using != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _using, protoFieldNumber: 177, protoFieldName: "using", jsonFieldName: "using", swiftFieldName: "using")
      }
      if _virtual != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _virtual, protoFieldNumber: 178, protoFieldName: "virtual", jsonFieldName: "virtual", swiftFieldName: "virtual")
      }
      if _void != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _void, protoFieldNumber: 179, protoFieldName: "void", jsonFieldName: "void", swiftFieldName: "void")
      }
      if _volatile != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _volatile, protoFieldNumber: 180, protoFieldName: "volatile", jsonFieldName: "volatile", swiftFieldName: "volatile")
      }
      if _wcharT != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _wcharT, protoFieldNumber: 181, protoFieldName: "wchar_t", jsonFieldName: "wcharT", swiftFieldName: "wcharT")
      }
      if _xor != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _xor, protoFieldNumber: 183, protoFieldName: "xor", jsonFieldName: "xor", swiftFieldName: "xor")
      }
      if _xorEq != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _xorEq, protoFieldNumber: 184, protoFieldName: "xor_eq", jsonFieldName: "xorEq", swiftFieldName: "xorEq")
      }
      if _restrict != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _restrict, protoFieldNumber: 185, protoFieldName: "restrict", jsonFieldName: "restrict", swiftFieldName: "restrict")
      }
      if _category != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _category, protoFieldNumber: 186, protoFieldName: "Category", jsonFieldName: "category", swiftFieldName: "category")
      }
      if _ivar != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _ivar, protoFieldNumber: 187, protoFieldName: "Ivar", jsonFieldName: "ivar", swiftFieldName: "ivar")
      }
      if _method != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _method, protoFieldNumber: 188, protoFieldName: "Method", jsonFieldName: "method", swiftFieldName: "method")
      }
      if _finalize != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _finalize, protoFieldNumber: 192, protoFieldName: "finalize", jsonFieldName: "finalize", swiftFieldName: "finalize")
      }
      if _hash != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _hash, protoFieldNumber: 193, protoFieldName: "hash", jsonFieldName: "hash", swiftFieldName: "hash")
      }
      if _dealloc != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _dealloc, protoFieldNumber: 194, protoFieldName: "dealloc", jsonFieldName: "dealloc", swiftFieldName: "dealloc")
      }
      if _superclass != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _superclass, protoFieldNumber: 197, protoFieldName: "superclass", jsonFieldName: "superclass", swiftFieldName: "superclass")
      }
      if _retain != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _retain, protoFieldNumber: 198, protoFieldName: "retain", jsonFieldName: "retain", swiftFieldName: "retain")
      }
      if _release != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _release, protoFieldNumber: 199, protoFieldName: "release", jsonFieldName: "release", swiftFieldName: "release")
      }
      if _autorelease != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _autorelease, protoFieldNumber: 200, protoFieldName: "autorelease", jsonFieldName: "autorelease", swiftFieldName: "autorelease")
      }
      if _retainCount != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _retainCount, protoFieldNumber: 201, protoFieldName: "retainCount", jsonFieldName: "retainCount", swiftFieldName: "retainCount")
      }
      if _zone != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _zone, protoFieldNumber: 202, protoFieldName: "zone", jsonFieldName: "zone", swiftFieldName: "zone")
      }
      if _isProxy != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _isProxy, protoFieldNumber: 203, protoFieldName: "isProxy", jsonFieldName: "isProxy", swiftFieldName: "isProxy")
      }
      if _copy != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _copy, protoFieldNumber: 204, protoFieldName: "copy", jsonFieldName: "copy", swiftFieldName: "copy")
      }
      if _mutableCopy != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _mutableCopy, protoFieldNumber: 205, protoFieldName: "mutableCopy", jsonFieldName: "mutableCopy", swiftFieldName: "mutableCopy")
      }
      if _classForCoder != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _classForCoder, protoFieldNumber: 206, protoFieldName: "classForCoder", jsonFieldName: "classForCoder", swiftFieldName: "classForCoder")
      }
      if _clear != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _clear, protoFieldNumber: 207, protoFieldName: "clear", jsonFieldName: "clear", swiftFieldName: "clear")
      }
      if _data != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _data, protoFieldNumber: 208, protoFieldName: "data", jsonFieldName: "data", swiftFieldName: "data")
      }
      if _delimitedData != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _delimitedData, protoFieldNumber: 209, protoFieldName: "delimitedData", jsonFieldName: "delimitedData", swiftFieldName: "delimitedData")
      }
      if _descriptor != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _descriptor, protoFieldNumber: 210, protoFieldName: "descriptor", jsonFieldName: "descriptor", swiftFieldName: "descriptor")
      }
      if _extensionRegistry != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _extensionRegistry, protoFieldNumber: 211, protoFieldName: "extensionRegistry", jsonFieldName: "extensionRegistry", swiftFieldName: "extensionRegistry")
      }
      if _extensionsCurrentlySet != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _extensionsCurrentlySet, protoFieldNumber: 212, protoFieldName: "extensionsCurrentlySet", jsonFieldName: "extensionsCurrentlySet", swiftFieldName: "extensionsCurrentlySet")
      }
      if _isInitialized != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _isInitialized, protoFieldNumber: 213, protoFieldName: "isInitialized", jsonFieldName: "isInitialized", swiftFieldName: "isInitialized")
      }
      if _serializedSize != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _serializedSize, protoFieldNumber: 214, protoFieldName: "serializedSize", jsonFieldName: "serializedSize", swiftFieldName: "serializedSize")
      }
      if _sortedExtensionsInUse != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _sortedExtensionsInUse, protoFieldNumber: 215, protoFieldName: "sortedExtensionsInUse", jsonFieldName: "sortedExtensionsInUse", swiftFieldName: "sortedExtensionsInUse")
      }
      if _unknownFields != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _unknownFields, protoFieldNumber: 216, protoFieldName: "unknownFields", jsonFieldName: "unknownFields", swiftFieldName: "unknownFields")
      }
      if _fixed != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _fixed, protoFieldNumber: 217, protoFieldName: "Fixed", jsonFieldName: "fixed", swiftFieldName: "fixed")
      }
      if _fract != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _fract, protoFieldNumber: 218, protoFieldName: "Fract", jsonFieldName: "fract", swiftFieldName: "fract")
      }
      if _size != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _size, protoFieldNumber: 219, protoFieldName: "Size", jsonFieldName: "size", swiftFieldName: "size")
      }
      if _logicalAddress != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _logicalAddress, protoFieldNumber: 220, protoFieldName: "LogicalAddress", jsonFieldName: "logicalAddress", swiftFieldName: "logicalAddress")
      }
      if _physicalAddress != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _physicalAddress, protoFieldNumber: 221, protoFieldName: "PhysicalAddress", jsonFieldName: "physicalAddress", swiftFieldName: "physicalAddress")
      }
      if _byteCount != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _byteCount, protoFieldNumber: 222, protoFieldName: "ByteCount", jsonFieldName: "byteCount", swiftFieldName: "byteCount")
      }
      if _byteOffset != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _byteOffset, protoFieldNumber: 223, protoFieldName: "ByteOffset", jsonFieldName: "byteOffset", swiftFieldName: "byteOffset")
      }
      if _duration != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _duration, protoFieldNumber: 224, protoFieldName: "Duration", jsonFieldName: "duration", swiftFieldName: "duration")
      }
      if _absoluteTime != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _absoluteTime, protoFieldNumber: 225, protoFieldName: "AbsoluteTime", jsonFieldName: "absoluteTime", swiftFieldName: "absoluteTime")
      }
      if _optionBits != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _optionBits, protoFieldNumber: 226, protoFieldName: "OptionBits", jsonFieldName: "optionBits", swiftFieldName: "optionBits")
      }
      if _itemCount != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _itemCount, protoFieldNumber: 227, protoFieldName: "ItemCount", jsonFieldName: "itemCount", swiftFieldName: "itemCount")
      }
      if _pbversion != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _pbversion, protoFieldNumber: 228, protoFieldName: "PBVersion", jsonFieldName: "pBVersion", swiftFieldName: "pbversion")
      }
      if _scriptCode != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _scriptCode, protoFieldNumber: 229, protoFieldName: "ScriptCode", jsonFieldName: "scriptCode", swiftFieldName: "scriptCode")
      }
      if _langCode != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _langCode, protoFieldNumber: 230, protoFieldName: "LangCode", jsonFieldName: "langCode", swiftFieldName: "langCode")
      }
      if _regionCode != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _regionCode, protoFieldNumber: 231, protoFieldName: "RegionCode", jsonFieldName: "regionCode", swiftFieldName: "regionCode")
      }
      if _ostype != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _ostype, protoFieldNumber: 232, protoFieldName: "OSType", jsonFieldName: "oSType", swiftFieldName: "ostype")
      }
      if _processSerialNumber != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _processSerialNumber, protoFieldNumber: 233, protoFieldName: "ProcessSerialNumber", jsonFieldName: "processSerialNumber", swiftFieldName: "processSerialNumber")
      }
      if _point != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _point, protoFieldNumber: 234, protoFieldName: "Point", jsonFieldName: "point", swiftFieldName: "point")
      }
      if _rect != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _rect, protoFieldNumber: 235, protoFieldName: "Rect", jsonFieldName: "rect", swiftFieldName: "rect")
      }
      if _fixedPoint != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _fixedPoint, protoFieldNumber: 236, protoFieldName: "FixedPoint", jsonFieldName: "fixedPoint", swiftFieldName: "fixedPoint")
      }
      if _fixedRect != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _fixedRect, protoFieldNumber: 237, protoFieldName: "FixedRect", jsonFieldName: "fixedRect", swiftFieldName: "fixedRect")
      }
      if _style != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _style, protoFieldNumber: 238, protoFieldName: "Style", jsonFieldName: "style", swiftFieldName: "style")
      }
      if _styleParameter != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _styleParameter, protoFieldNumber: 239, protoFieldName: "StyleParameter", jsonFieldName: "styleParameter", swiftFieldName: "styleParameter")
      }
      if _styleField != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _styleField, protoFieldNumber: 240, protoFieldName: "StyleField", jsonFieldName: "styleField", swiftFieldName: "styleField")
      }
      if _timeScale != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _timeScale, protoFieldNumber: 241, protoFieldName: "TimeScale", jsonFieldName: "timeScale", swiftFieldName: "timeScale")
      }
      if _timeBase != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _timeBase, protoFieldNumber: 242, protoFieldName: "TimeBase", jsonFieldName: "timeBase", swiftFieldName: "timeBase")
      }
      if _timeRecord != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _timeRecord, protoFieldNumber: 243, protoFieldName: "TimeRecord", jsonFieldName: "timeRecord", swiftFieldName: "timeRecord")
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _string != other._string {return false}
      if _int != other._int {return false}
      if _double != other._double {return false}
      if _float != other._float {return false}
      if _uint != other._uint {return false}
      if _hashValue_p != other._hashValue_p {return false}
      if _description_p != other._description_p {return false}
      if _debugDescription_p != other._debugDescription_p {return false}
      if _swift != other._swift {return false}
      if _unrecognized != other._unrecognized {return false}
      if _class_p != other._class_p {return false}
      if _deinit_p != other._deinit_p {return false}
      if _enum_p != other._enum_p {return false}
      if _extension_p != other._extension_p {return false}
      if _func_p != other._func_p {return false}
      if _import_p != other._import_p {return false}
      if _init_p != other._init_p {return false}
      if _inout_p != other._inout_p {return false}
      if _internal_p != other._internal_p {return false}
      if _let_p != other._let_p {return false}
      if _operator_p != other._operator_p {return false}
      if _private_p != other._private_p {return false}
      if _protocol_p != other._protocol_p {return false}
      if _public_p != other._public_p {return false}
      if _static_p != other._static_p {return false}
      if _struct_p != other._struct_p {return false}
      if _subscript_p != other._subscript_p {return false}
      if _typealias_p != other._typealias_p {return false}
      if _var_p != other._var_p {return false}
      if _break_p != other._break_p {return false}
      if _case_p != other._case_p {return false}
      if _continue_p != other._continue_p {return false}
      if _default_p != other._default_p {return false}
      if _defer_p != other._defer_p {return false}
      if _do_p != other._do_p {return false}
      if _else_p != other._else_p {return false}
      if _fallthrough_p != other._fallthrough_p {return false}
      if _for_p != other._for_p {return false}
      if _guard_p != other._guard_p {return false}
      if _if_p != other._if_p {return false}
      if _in_p != other._in_p {return false}
      if _repeat_p != other._repeat_p {return false}
      if _return_p != other._return_p {return false}
      if _switch_p != other._switch_p {return false}
      if _where_p != other._where_p {return false}
      if _while_p != other._while_p {return false}
      if _as_p != other._as_p {return false}
      if _catch_p != other._catch_p {return false}
      if _dynamicType_p != other._dynamicType_p {return false}
      if _false_p != other._false_p {return false}
      if _is_p != other._is_p {return false}
      if _nil_p != other._nil_p {return false}
      if _rethrows_p != other._rethrows_p {return false}
      if _super_p != other._super_p {return false}
      if _self_p != other._self_p {return false}
      if _throw_p != other._throw_p {return false}
      if _throws_p != other._throws_p {return false}
      if _true_p != other._true_p {return false}
      if _try_p != other._try_p {return false}
      if __Column__ != other.__Column__ {return false}
      if __File__ != other.__File__ {return false}
      if __Function__ != other.__Function__ {return false}
      if __Line__ != other.__Line__ {return false}
      if ____ != other.____ {return false}
      if _associativity != other._associativity {return false}
      if _convenience != other._convenience {return false}
      if _dynamic != other._dynamic {return false}
      if _didSet != other._didSet {return false}
      if _final != other._final {return false}
      if _get != other._get {return false}
      if _infix != other._infix {return false}
      if _indirect != other._indirect {return false}
      if _lazy != other._lazy {return false}
      if _left != other._left {return false}
      if _mutating != other._mutating {return false}
      if _none != other._none {return false}
      if _nonmutating != other._nonmutating {return false}
      if _optional != other._optional {return false}
      if _override != other._override {return false}
      if _postfix != other._postfix {return false}
      if _precedence != other._precedence {return false}
      if _prefix != other._prefix {return false}
      if _required != other._required {return false}
      if _right != other._right {return false}
      if _set != other._set {return false}
      if _type != other._type {return false}
      if _unowned != other._unowned {return false}
      if _weak != other._weak {return false}
      if _willSet != other._willSet {return false}
      if _id != other._id {return false}
      if _cmd != other._cmd {return false}
      if _out != other._out {return false}
      if _bycopy != other._bycopy {return false}
      if _byref != other._byref {return false}
      if _oneway != other._oneway {return false}
      if _and != other._and {return false}
      if _andEq != other._andEq {return false}
      if _alignas != other._alignas {return false}
      if _alignof != other._alignof {return false}
      if _asm != other._asm {return false}
      if _auto != other._auto {return false}
      if _bitand != other._bitand {return false}
      if _bitor != other._bitor {return false}
      if _bool != other._bool {return false}
      if _char != other._char {return false}
      if _char16T != other._char16T {return false}
      if _char32T != other._char32T {return false}
      if _compl != other._compl {return false}
      if _const != other._const {return false}
      if _constexpr != other._constexpr {return false}
      if _constCast != other._constCast {return false}
      if _decltype != other._decltype {return false}
      if _delete != other._delete {return false}
      if _dynamicCast != other._dynamicCast {return false}
      if _explicit != other._explicit {return false}
      if _export != other._export {return false}
      if _extern != other._extern {return false}
      if _friend != other._friend {return false}
      if _goto != other._goto {return false}
      if _inline != other._inline {return false}
      if _long != other._long {return false}
      if _mutable != other._mutable {return false}
      if _namespace != other._namespace {return false}
      if _new != other._new {return false}
      if _noexcept != other._noexcept {return false}
      if _not != other._not {return false}
      if _notEq != other._notEq {return false}
      if _nullptr != other._nullptr {return false}
      if _or != other._or {return false}
      if _orEq != other._orEq {return false}
      if _protected != other._protected {return false}
      if _register != other._register {return false}
      if _reinterpretCast != other._reinterpretCast {return false}
      if _short != other._short {return false}
      if _signed != other._signed {return false}
      if _sizeof != other._sizeof {return false}
      if _staticAssert != other._staticAssert {return false}
      if _staticCast != other._staticCast {return false}
      if _template != other._template {return false}
      if _this != other._this {return false}
      if _threadLocal != other._threadLocal {return false}
      if _typedef != other._typedef {return false}
      if _typeid != other._typeid {return false}
      if _typename != other._typename {return false}
      if _union != other._union {return false}
      if _unsigned != other._unsigned {return false}
      if _using != other._using {return false}
      if _virtual != other._virtual {return false}
      if _void != other._void {return false}
      if _volatile != other._volatile {return false}
      if _wcharT != other._wcharT {return false}
      if _xor != other._xor {return false}
      if _xorEq != other._xorEq {return false}
      if _restrict != other._restrict {return false}
      if _category != other._category {return false}
      if _ivar != other._ivar {return false}
      if _method != other._method {return false}
      if _finalize != other._finalize {return false}
      if _hash != other._hash {return false}
      if _dealloc != other._dealloc {return false}
      if _superclass != other._superclass {return false}
      if _retain != other._retain {return false}
      if _release != other._release {return false}
      if _autorelease != other._autorelease {return false}
      if _retainCount != other._retainCount {return false}
      if _zone != other._zone {return false}
      if _isProxy != other._isProxy {return false}
      if _copy != other._copy {return false}
      if _mutableCopy != other._mutableCopy {return false}
      if _classForCoder != other._classForCoder {return false}
      if _clear != other._clear {return false}
      if _data != other._data {return false}
      if _delimitedData != other._delimitedData {return false}
      if _descriptor != other._descriptor {return false}
      if _extensionRegistry != other._extensionRegistry {return false}
      if _extensionsCurrentlySet != other._extensionsCurrentlySet {return false}
      if _isInitialized != other._isInitialized {return false}
      if _serializedSize != other._serializedSize {return false}
      if _sortedExtensionsInUse != other._sortedExtensionsInUse {return false}
      if _unknownFields != other._unknownFields {return false}
      if _fixed != other._fixed {return false}
      if _fract != other._fract {return false}
      if _size != other._size {return false}
      if _logicalAddress != other._logicalAddress {return false}
      if _physicalAddress != other._physicalAddress {return false}
      if _byteCount != other._byteCount {return false}
      if _byteOffset != other._byteOffset {return false}
      if _duration != other._duration {return false}
      if _absoluteTime != other._absoluteTime {return false}
      if _optionBits != other._optionBits {return false}
      if _itemCount != other._itemCount {return false}
      if _pbversion != other._pbversion {return false}
      if _scriptCode != other._scriptCode {return false}
      if _langCode != other._langCode {return false}
      if _regionCode != other._regionCode {return false}
      if _ostype != other._ostype {return false}
      if _processSerialNumber != other._processSerialNumber {return false}
      if _point != other._point {return false}
      if _rect != other._rect {return false}
      if _fixedPoint != other._fixedPoint {return false}
      if _fixedRect != other._fixedRect {return false}
      if _style != other._style {return false}
      if _styleParameter != other._styleParameter {return false}
      if _styleField != other._styleField {return false}
      if _timeScale != other._timeScale {return false}
      if _timeBase != other._timeBase {return false}
      if _timeRecord != other._timeRecord {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._string = _string
      clone._int = _int
      clone._double = _double
      clone._float = _float
      clone._uint = _uint
      clone._hashValue_p = _hashValue_p
      clone._description_p = _description_p
      clone._debugDescription_p = _debugDescription_p
      clone._swift = _swift
      clone._unrecognized = _unrecognized
      clone._class_p = _class_p
      clone._deinit_p = _deinit_p
      clone._enum_p = _enum_p
      clone._extension_p = _extension_p
      clone._func_p = _func_p
      clone._import_p = _import_p
      clone._init_p = _init_p
      clone._inout_p = _inout_p
      clone._internal_p = _internal_p
      clone._let_p = _let_p
      clone._operator_p = _operator_p
      clone._private_p = _private_p
      clone._protocol_p = _protocol_p
      clone._public_p = _public_p
      clone._static_p = _static_p
      clone._struct_p = _struct_p
      clone._subscript_p = _subscript_p
      clone._typealias_p = _typealias_p
      clone._var_p = _var_p
      clone._break_p = _break_p
      clone._case_p = _case_p
      clone._continue_p = _continue_p
      clone._default_p = _default_p
      clone._defer_p = _defer_p
      clone._do_p = _do_p
      clone._else_p = _else_p
      clone._fallthrough_p = _fallthrough_p
      clone._for_p = _for_p
      clone._guard_p = _guard_p
      clone._if_p = _if_p
      clone._in_p = _in_p
      clone._repeat_p = _repeat_p
      clone._return_p = _return_p
      clone._switch_p = _switch_p
      clone._where_p = _where_p
      clone._while_p = _while_p
      clone._as_p = _as_p
      clone._catch_p = _catch_p
      clone._dynamicType_p = _dynamicType_p
      clone._false_p = _false_p
      clone._is_p = _is_p
      clone._nil_p = _nil_p
      clone._rethrows_p = _rethrows_p
      clone._super_p = _super_p
      clone._self_p = _self_p
      clone._throw_p = _throw_p
      clone._throws_p = _throws_p
      clone._true_p = _true_p
      clone._try_p = _try_p
      clone.__Column__ = __Column__
      clone.__File__ = __File__
      clone.__Function__ = __Function__
      clone.__Line__ = __Line__
      clone.____ = ____
      clone._associativity = _associativity
      clone._convenience = _convenience
      clone._dynamic = _dynamic
      clone._didSet = _didSet
      clone._final = _final
      clone._get = _get
      clone._infix = _infix
      clone._indirect = _indirect
      clone._lazy = _lazy
      clone._left = _left
      clone._mutating = _mutating
      clone._none = _none
      clone._nonmutating = _nonmutating
      clone._optional = _optional
      clone._override = _override
      clone._postfix = _postfix
      clone._precedence = _precedence
      clone._prefix = _prefix
      clone._required = _required
      clone._right = _right
      clone._set = _set
      clone._type = _type
      clone._unowned = _unowned
      clone._weak = _weak
      clone._willSet = _willSet
      clone._id = _id
      clone._cmd = _cmd
      clone._out = _out
      clone._bycopy = _bycopy
      clone._byref = _byref
      clone._oneway = _oneway
      clone._and = _and
      clone._andEq = _andEq
      clone._alignas = _alignas
      clone._alignof = _alignof
      clone._asm = _asm
      clone._auto = _auto
      clone._bitand = _bitand
      clone._bitor = _bitor
      clone._bool = _bool
      clone._char = _char
      clone._char16T = _char16T
      clone._char32T = _char32T
      clone._compl = _compl
      clone._const = _const
      clone._constexpr = _constexpr
      clone._constCast = _constCast
      clone._decltype = _decltype
      clone._delete = _delete
      clone._dynamicCast = _dynamicCast
      clone._explicit = _explicit
      clone._export = _export
      clone._extern = _extern
      clone._friend = _friend
      clone._goto = _goto
      clone._inline = _inline
      clone._long = _long
      clone._mutable = _mutable
      clone._namespace = _namespace
      clone._new = _new
      clone._noexcept = _noexcept
      clone._not = _not
      clone._notEq = _notEq
      clone._nullptr = _nullptr
      clone._or = _or
      clone._orEq = _orEq
      clone._protected = _protected
      clone._register = _register
      clone._reinterpretCast = _reinterpretCast
      clone._short = _short
      clone._signed = _signed
      clone._sizeof = _sizeof
      clone._staticAssert = _staticAssert
      clone._staticCast = _staticCast
      clone._template = _template
      clone._this = _this
      clone._threadLocal = _threadLocal
      clone._typedef = _typedef
      clone._typeid = _typeid
      clone._typename = _typename
      clone._union = _union
      clone._unsigned = _unsigned
      clone._using = _using
      clone._virtual = _virtual
      clone._void = _void
      clone._volatile = _volatile
      clone._wcharT = _wcharT
      clone._xor = _xor
      clone._xorEq = _xorEq
      clone._restrict = _restrict
      clone._category = _category
      clone._ivar = _ivar
      clone._method = _method
      clone._finalize = _finalize
      clone._hash = _hash
      clone._dealloc = _dealloc
      clone._superclass = _superclass
      clone._retain = _retain
      clone._release = _release
      clone._autorelease = _autorelease
      clone._retainCount = _retainCount
      clone._zone = _zone
      clone._isProxy = _isProxy
      clone._copy = _copy
      clone._mutableCopy = _mutableCopy
      clone._classForCoder = _classForCoder
      clone._clear = _clear
      clone._data = _data
      clone._delimitedData = _delimitedData
      clone._descriptor = _descriptor
      clone._extensionRegistry = _extensionRegistry
      clone._extensionsCurrentlySet = _extensionsCurrentlySet
      clone._isInitialized = _isInitialized
      clone._serializedSize = _serializedSize
      clone._sortedExtensionsInUse = _sortedExtensionsInUse
      clone._unknownFields = _unknownFields
      clone._fixed = _fixed
      clone._fract = _fract
      clone._size = _size
      clone._logicalAddress = _logicalAddress
      clone._physicalAddress = _physicalAddress
      clone._byteCount = _byteCount
      clone._byteOffset = _byteOffset
      clone._duration = _duration
      clone._absoluteTime = _absoluteTime
      clone._optionBits = _optionBits
      clone._itemCount = _itemCount
      clone._pbversion = _pbversion
      clone._scriptCode = _scriptCode
      clone._langCode = _langCode
      clone._regionCode = _regionCode
      clone._ostype = _ostype
      clone._processSerialNumber = _processSerialNumber
      clone._point = _point
      clone._rect = _rect
      clone._fixedPoint = _fixedPoint
      clone._fixedRect = _fixedRect
      clone._style = _style
      clone._styleParameter = _styleParameter
      clone._styleField = _styleField
      clone._timeScale = _timeScale
      clone._timeBase = _timeBase
      clone._timeRecord = _timeRecord
      return clone
    }
  }

  private var _storage = _StorageClass()

  public var string: Int32 {
    get {return _storage._string}
    set {_uniqueStorage()._string = newValue}
  }

  public var int: Int32 {
    get {return _storage._int}
    set {_uniqueStorage()._int = newValue}
  }

  public var double: Int32 {
    get {return _storage._double}
    set {_uniqueStorage()._double = newValue}
  }

  public var float: Int32 {
    get {return _storage._float}
    set {_uniqueStorage()._float = newValue}
  }

  public var uint: Int32 {
    get {return _storage._uint}
    set {_uniqueStorage()._uint = newValue}
  }

  public var hashValue_p: Int32 {
    get {return _storage._hashValue_p}
    set {_uniqueStorage()._hashValue_p = newValue}
  }

  public var description_p: Int32 {
    get {return _storage._description_p}
    set {_uniqueStorage()._description_p = newValue}
  }

  public var debugDescription_p: Int32 {
    get {return _storage._debugDescription_p}
    set {_uniqueStorage()._debugDescription_p = newValue}
  }

  public var swift: Int32 {
    get {return _storage._swift}
    set {_uniqueStorage()._swift = newValue}
  }

  public var unrecognized: Int32 {
    get {return _storage._unrecognized}
    set {_uniqueStorage()._unrecognized = newValue}
  }

  public var class_p: Int32 {
    get {return _storage._class_p}
    set {_uniqueStorage()._class_p = newValue}
  }

  public var deinit_p: Int32 {
    get {return _storage._deinit_p}
    set {_uniqueStorage()._deinit_p = newValue}
  }

  public var enum_p: Int32 {
    get {return _storage._enum_p}
    set {_uniqueStorage()._enum_p = newValue}
  }

  public var extension_p: Int32 {
    get {return _storage._extension_p}
    set {_uniqueStorage()._extension_p = newValue}
  }

  public var func_p: Int32 {
    get {return _storage._func_p}
    set {_uniqueStorage()._func_p = newValue}
  }

  public var import_p: Int32 {
    get {return _storage._import_p}
    set {_uniqueStorage()._import_p = newValue}
  }

  public var init_p: Int32 {
    get {return _storage._init_p}
    set {_uniqueStorage()._init_p = newValue}
  }

  public var inout_p: Int32 {
    get {return _storage._inout_p}
    set {_uniqueStorage()._inout_p = newValue}
  }

  public var internal_p: Int32 {
    get {return _storage._internal_p}
    set {_uniqueStorage()._internal_p = newValue}
  }

  public var let_p: Int32 {
    get {return _storage._let_p}
    set {_uniqueStorage()._let_p = newValue}
  }

  public var operator_p: Int32 {
    get {return _storage._operator_p}
    set {_uniqueStorage()._operator_p = newValue}
  }

  public var private_p: Int32 {
    get {return _storage._private_p}
    set {_uniqueStorage()._private_p = newValue}
  }

  public var protocol_p: Int32 {
    get {return _storage._protocol_p}
    set {_uniqueStorage()._protocol_p = newValue}
  }

  public var public_p: Int32 {
    get {return _storage._public_p}
    set {_uniqueStorage()._public_p = newValue}
  }

  public var static_p: Int32 {
    get {return _storage._static_p}
    set {_uniqueStorage()._static_p = newValue}
  }

  public var struct_p: Int32 {
    get {return _storage._struct_p}
    set {_uniqueStorage()._struct_p = newValue}
  }

  public var subscript_p: Int32 {
    get {return _storage._subscript_p}
    set {_uniqueStorage()._subscript_p = newValue}
  }

  public var typealias_p: Int32 {
    get {return _storage._typealias_p}
    set {_uniqueStorage()._typealias_p = newValue}
  }

  public var var_p: Int32 {
    get {return _storage._var_p}
    set {_uniqueStorage()._var_p = newValue}
  }

  public var break_p: Int32 {
    get {return _storage._break_p}
    set {_uniqueStorage()._break_p = newValue}
  }

  public var case_p: Int32 {
    get {return _storage._case_p}
    set {_uniqueStorage()._case_p = newValue}
  }

  public var continue_p: Int32 {
    get {return _storage._continue_p}
    set {_uniqueStorage()._continue_p = newValue}
  }

  public var default_p: Int32 {
    get {return _storage._default_p}
    set {_uniqueStorage()._default_p = newValue}
  }

  public var defer_p: Int32 {
    get {return _storage._defer_p}
    set {_uniqueStorage()._defer_p = newValue}
  }

  public var do_p: Int32 {
    get {return _storage._do_p}
    set {_uniqueStorage()._do_p = newValue}
  }

  public var else_p: Int32 {
    get {return _storage._else_p}
    set {_uniqueStorage()._else_p = newValue}
  }

  public var fallthrough_p: Int32 {
    get {return _storage._fallthrough_p}
    set {_uniqueStorage()._fallthrough_p = newValue}
  }

  public var for_p: Int32 {
    get {return _storage._for_p}
    set {_uniqueStorage()._for_p = newValue}
  }

  public var guard_p: Int32 {
    get {return _storage._guard_p}
    set {_uniqueStorage()._guard_p = newValue}
  }

  public var if_p: Int32 {
    get {return _storage._if_p}
    set {_uniqueStorage()._if_p = newValue}
  }

  public var in_p: Int32 {
    get {return _storage._in_p}
    set {_uniqueStorage()._in_p = newValue}
  }

  public var repeat_p: Int32 {
    get {return _storage._repeat_p}
    set {_uniqueStorage()._repeat_p = newValue}
  }

  public var return_p: Int32 {
    get {return _storage._return_p}
    set {_uniqueStorage()._return_p = newValue}
  }

  public var switch_p: Int32 {
    get {return _storage._switch_p}
    set {_uniqueStorage()._switch_p = newValue}
  }

  public var where_p: Int32 {
    get {return _storage._where_p}
    set {_uniqueStorage()._where_p = newValue}
  }

  public var while_p: Int32 {
    get {return _storage._while_p}
    set {_uniqueStorage()._while_p = newValue}
  }

  public var as_p: Int32 {
    get {return _storage._as_p}
    set {_uniqueStorage()._as_p = newValue}
  }

  public var catch_p: Int32 {
    get {return _storage._catch_p}
    set {_uniqueStorage()._catch_p = newValue}
  }

  public var dynamicType_p: Int32 {
    get {return _storage._dynamicType_p}
    set {_uniqueStorage()._dynamicType_p = newValue}
  }

  public var false_p: Int32 {
    get {return _storage._false_p}
    set {_uniqueStorage()._false_p = newValue}
  }

  public var is_p: Int32 {
    get {return _storage._is_p}
    set {_uniqueStorage()._is_p = newValue}
  }

  public var nil_p: Int32 {
    get {return _storage._nil_p}
    set {_uniqueStorage()._nil_p = newValue}
  }

  public var rethrows_p: Int32 {
    get {return _storage._rethrows_p}
    set {_uniqueStorage()._rethrows_p = newValue}
  }

  public var super_p: Int32 {
    get {return _storage._super_p}
    set {_uniqueStorage()._super_p = newValue}
  }

  public var self_p: Int32 {
    get {return _storage._self_p}
    set {_uniqueStorage()._self_p = newValue}
  }

  public var throw_p: Int32 {
    get {return _storage._throw_p}
    set {_uniqueStorage()._throw_p = newValue}
  }

  public var throws_p: Int32 {
    get {return _storage._throws_p}
    set {_uniqueStorage()._throws_p = newValue}
  }

  public var true_p: Int32 {
    get {return _storage._true_p}
    set {_uniqueStorage()._true_p = newValue}
  }

  public var try_p: Int32 {
    get {return _storage._try_p}
    set {_uniqueStorage()._try_p = newValue}
  }

  public var _Column__: Int32 {
    get {return _storage.__Column__}
    set {_uniqueStorage().__Column__ = newValue}
  }

  public var _File__: Int32 {
    get {return _storage.__File__}
    set {_uniqueStorage().__File__ = newValue}
  }

  public var _Function__: Int32 {
    get {return _storage.__Function__}
    set {_uniqueStorage().__Function__ = newValue}
  }

  public var _Line__: Int32 {
    get {return _storage.__Line__}
    set {_uniqueStorage().__Line__ = newValue}
  }

  public var ___: Int32 {
    get {return _storage.____}
    set {_uniqueStorage().____ = newValue}
  }

  public var associativity: Int32 {
    get {return _storage._associativity}
    set {_uniqueStorage()._associativity = newValue}
  }

  public var convenience: Int32 {
    get {return _storage._convenience}
    set {_uniqueStorage()._convenience = newValue}
  }

  public var dynamic: Int32 {
    get {return _storage._dynamic}
    set {_uniqueStorage()._dynamic = newValue}
  }

  public var didSet: Int32 {
    get {return _storage._didSet}
    set {_uniqueStorage()._didSet = newValue}
  }

  public var final: Int32 {
    get {return _storage._final}
    set {_uniqueStorage()._final = newValue}
  }

  public var get: Int32 {
    get {return _storage._get}
    set {_uniqueStorage()._get = newValue}
  }

  public var infix: Int32 {
    get {return _storage._infix}
    set {_uniqueStorage()._infix = newValue}
  }

  public var indirect: Int32 {
    get {return _storage._indirect}
    set {_uniqueStorage()._indirect = newValue}
  }

  public var lazy: Int32 {
    get {return _storage._lazy}
    set {_uniqueStorage()._lazy = newValue}
  }

  public var left: Int32 {
    get {return _storage._left}
    set {_uniqueStorage()._left = newValue}
  }

  public var mutating: Int32 {
    get {return _storage._mutating}
    set {_uniqueStorage()._mutating = newValue}
  }

  public var none: Int32 {
    get {return _storage._none}
    set {_uniqueStorage()._none = newValue}
  }

  public var nonmutating: Int32 {
    get {return _storage._nonmutating}
    set {_uniqueStorage()._nonmutating = newValue}
  }

  public var optional: Int32 {
    get {return _storage._optional}
    set {_uniqueStorage()._optional = newValue}
  }

  public var override: Int32 {
    get {return _storage._override}
    set {_uniqueStorage()._override = newValue}
  }

  public var postfix: Int32 {
    get {return _storage._postfix}
    set {_uniqueStorage()._postfix = newValue}
  }

  public var precedence: Int32 {
    get {return _storage._precedence}
    set {_uniqueStorage()._precedence = newValue}
  }

  public var prefix: Int32 {
    get {return _storage._prefix}
    set {_uniqueStorage()._prefix = newValue}
  }

  public var required: Int32 {
    get {return _storage._required}
    set {_uniqueStorage()._required = newValue}
  }

  public var right: Int32 {
    get {return _storage._right}
    set {_uniqueStorage()._right = newValue}
  }

  public var set: Int32 {
    get {return _storage._set}
    set {_uniqueStorage()._set = newValue}
  }

  public var type: Int32 {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  public var unowned: Int32 {
    get {return _storage._unowned}
    set {_uniqueStorage()._unowned = newValue}
  }

  public var weak: Int32 {
    get {return _storage._weak}
    set {_uniqueStorage()._weak = newValue}
  }

  public var willSet: Int32 {
    get {return _storage._willSet}
    set {_uniqueStorage()._willSet = newValue}
  }

  public var id: Int32 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var cmd: Int32 {
    get {return _storage._cmd}
    set {_uniqueStorage()._cmd = newValue}
  }

  public var out: Int32 {
    get {return _storage._out}
    set {_uniqueStorage()._out = newValue}
  }

  public var bycopy: Int32 {
    get {return _storage._bycopy}
    set {_uniqueStorage()._bycopy = newValue}
  }

  public var byref: Int32 {
    get {return _storage._byref}
    set {_uniqueStorage()._byref = newValue}
  }

  public var oneway: Int32 {
    get {return _storage._oneway}
    set {_uniqueStorage()._oneway = newValue}
  }

  public var and: Int32 {
    get {return _storage._and}
    set {_uniqueStorage()._and = newValue}
  }

  public var andEq: Int32 {
    get {return _storage._andEq}
    set {_uniqueStorage()._andEq = newValue}
  }

  public var alignas: Int32 {
    get {return _storage._alignas}
    set {_uniqueStorage()._alignas = newValue}
  }

  public var alignof: Int32 {
    get {return _storage._alignof}
    set {_uniqueStorage()._alignof = newValue}
  }

  public var asm: Int32 {
    get {return _storage._asm}
    set {_uniqueStorage()._asm = newValue}
  }

  public var auto: Int32 {
    get {return _storage._auto}
    set {_uniqueStorage()._auto = newValue}
  }

  public var bitand: Int32 {
    get {return _storage._bitand}
    set {_uniqueStorage()._bitand = newValue}
  }

  public var bitor: Int32 {
    get {return _storage._bitor}
    set {_uniqueStorage()._bitor = newValue}
  }

  public var bool: Int32 {
    get {return _storage._bool}
    set {_uniqueStorage()._bool = newValue}
  }

  public var char: Int32 {
    get {return _storage._char}
    set {_uniqueStorage()._char = newValue}
  }

  public var char16T: Int32 {
    get {return _storage._char16T}
    set {_uniqueStorage()._char16T = newValue}
  }

  public var char32T: Int32 {
    get {return _storage._char32T}
    set {_uniqueStorage()._char32T = newValue}
  }

  public var compl: Int32 {
    get {return _storage._compl}
    set {_uniqueStorage()._compl = newValue}
  }

  public var const: Int32 {
    get {return _storage._const}
    set {_uniqueStorage()._const = newValue}
  }

  public var constexpr: Int32 {
    get {return _storage._constexpr}
    set {_uniqueStorage()._constexpr = newValue}
  }

  public var constCast: Int32 {
    get {return _storage._constCast}
    set {_uniqueStorage()._constCast = newValue}
  }

  public var decltype: Int32 {
    get {return _storage._decltype}
    set {_uniqueStorage()._decltype = newValue}
  }

  public var delete: Int32 {
    get {return _storage._delete}
    set {_uniqueStorage()._delete = newValue}
  }

  public var dynamicCast: Int32 {
    get {return _storage._dynamicCast}
    set {_uniqueStorage()._dynamicCast = newValue}
  }

  public var explicit: Int32 {
    get {return _storage._explicit}
    set {_uniqueStorage()._explicit = newValue}
  }

  public var export: Int32 {
    get {return _storage._export}
    set {_uniqueStorage()._export = newValue}
  }

  public var extern: Int32 {
    get {return _storage._extern}
    set {_uniqueStorage()._extern = newValue}
  }

  public var friend: Int32 {
    get {return _storage._friend}
    set {_uniqueStorage()._friend = newValue}
  }

  public var goto: Int32 {
    get {return _storage._goto}
    set {_uniqueStorage()._goto = newValue}
  }

  public var inline: Int32 {
    get {return _storage._inline}
    set {_uniqueStorage()._inline = newValue}
  }

  public var long: Int32 {
    get {return _storage._long}
    set {_uniqueStorage()._long = newValue}
  }

  public var mutable: Int32 {
    get {return _storage._mutable}
    set {_uniqueStorage()._mutable = newValue}
  }

  public var namespace: Int32 {
    get {return _storage._namespace}
    set {_uniqueStorage()._namespace = newValue}
  }

  public var new: Int32 {
    get {return _storage._new}
    set {_uniqueStorage()._new = newValue}
  }

  public var noexcept: Int32 {
    get {return _storage._noexcept}
    set {_uniqueStorage()._noexcept = newValue}
  }

  public var not: Int32 {
    get {return _storage._not}
    set {_uniqueStorage()._not = newValue}
  }

  public var notEq: Int32 {
    get {return _storage._notEq}
    set {_uniqueStorage()._notEq = newValue}
  }

  public var nullptr: Int32 {
    get {return _storage._nullptr}
    set {_uniqueStorage()._nullptr = newValue}
  }

  public var or: Int32 {
    get {return _storage._or}
    set {_uniqueStorage()._or = newValue}
  }

  public var orEq: Int32 {
    get {return _storage._orEq}
    set {_uniqueStorage()._orEq = newValue}
  }

  public var protected: Int32 {
    get {return _storage._protected}
    set {_uniqueStorage()._protected = newValue}
  }

  public var register: Int32 {
    get {return _storage._register}
    set {_uniqueStorage()._register = newValue}
  }

  public var reinterpretCast: Int32 {
    get {return _storage._reinterpretCast}
    set {_uniqueStorage()._reinterpretCast = newValue}
  }

  public var short: Int32 {
    get {return _storage._short}
    set {_uniqueStorage()._short = newValue}
  }

  public var signed: Int32 {
    get {return _storage._signed}
    set {_uniqueStorage()._signed = newValue}
  }

  public var sizeof: Int32 {
    get {return _storage._sizeof}
    set {_uniqueStorage()._sizeof = newValue}
  }

  public var staticAssert: Int32 {
    get {return _storage._staticAssert}
    set {_uniqueStorage()._staticAssert = newValue}
  }

  public var staticCast: Int32 {
    get {return _storage._staticCast}
    set {_uniqueStorage()._staticCast = newValue}
  }

  public var template: Int32 {
    get {return _storage._template}
    set {_uniqueStorage()._template = newValue}
  }

  public var this: Int32 {
    get {return _storage._this}
    set {_uniqueStorage()._this = newValue}
  }

  public var threadLocal: Int32 {
    get {return _storage._threadLocal}
    set {_uniqueStorage()._threadLocal = newValue}
  }

  public var typedef: Int32 {
    get {return _storage._typedef}
    set {_uniqueStorage()._typedef = newValue}
  }

  public var typeid: Int32 {
    get {return _storage._typeid}
    set {_uniqueStorage()._typeid = newValue}
  }

  public var typename: Int32 {
    get {return _storage._typename}
    set {_uniqueStorage()._typename = newValue}
  }

  public var union: Int32 {
    get {return _storage._union}
    set {_uniqueStorage()._union = newValue}
  }

  public var unsigned: Int32 {
    get {return _storage._unsigned}
    set {_uniqueStorage()._unsigned = newValue}
  }

  public var using: Int32 {
    get {return _storage._using}
    set {_uniqueStorage()._using = newValue}
  }

  public var virtual: Int32 {
    get {return _storage._virtual}
    set {_uniqueStorage()._virtual = newValue}
  }

  public var void: Int32 {
    get {return _storage._void}
    set {_uniqueStorage()._void = newValue}
  }

  public var volatile: Int32 {
    get {return _storage._volatile}
    set {_uniqueStorage()._volatile = newValue}
  }

  public var wcharT: Int32 {
    get {return _storage._wcharT}
    set {_uniqueStorage()._wcharT = newValue}
  }

  public var xor: Int32 {
    get {return _storage._xor}
    set {_uniqueStorage()._xor = newValue}
  }

  public var xorEq: Int32 {
    get {return _storage._xorEq}
    set {_uniqueStorage()._xorEq = newValue}
  }

  public var restrict: Int32 {
    get {return _storage._restrict}
    set {_uniqueStorage()._restrict = newValue}
  }

  public var category: Int32 {
    get {return _storage._category}
    set {_uniqueStorage()._category = newValue}
  }

  public var ivar: Int32 {
    get {return _storage._ivar}
    set {_uniqueStorage()._ivar = newValue}
  }

  public var method: Int32 {
    get {return _storage._method}
    set {_uniqueStorage()._method = newValue}
  }

  public var finalize: Int32 {
    get {return _storage._finalize}
    set {_uniqueStorage()._finalize = newValue}
  }

  public var hash: Int32 {
    get {return _storage._hash}
    set {_uniqueStorage()._hash = newValue}
  }

  public var dealloc: Int32 {
    get {return _storage._dealloc}
    set {_uniqueStorage()._dealloc = newValue}
  }

  public var superclass: Int32 {
    get {return _storage._superclass}
    set {_uniqueStorage()._superclass = newValue}
  }

  public var retain: Int32 {
    get {return _storage._retain}
    set {_uniqueStorage()._retain = newValue}
  }

  public var release: Int32 {
    get {return _storage._release}
    set {_uniqueStorage()._release = newValue}
  }

  public var autorelease: Int32 {
    get {return _storage._autorelease}
    set {_uniqueStorage()._autorelease = newValue}
  }

  public var retainCount: Int32 {
    get {return _storage._retainCount}
    set {_uniqueStorage()._retainCount = newValue}
  }

  public var zone: Int32 {
    get {return _storage._zone}
    set {_uniqueStorage()._zone = newValue}
  }

  public var isProxy: Int32 {
    get {return _storage._isProxy}
    set {_uniqueStorage()._isProxy = newValue}
  }

  public var copy: Int32 {
    get {return _storage._copy}
    set {_uniqueStorage()._copy = newValue}
  }

  public var mutableCopy: Int32 {
    get {return _storage._mutableCopy}
    set {_uniqueStorage()._mutableCopy = newValue}
  }

  public var classForCoder: Int32 {
    get {return _storage._classForCoder}
    set {_uniqueStorage()._classForCoder = newValue}
  }

  public var clear: Int32 {
    get {return _storage._clear}
    set {_uniqueStorage()._clear = newValue}
  }

  public var data: Int32 {
    get {return _storage._data}
    set {_uniqueStorage()._data = newValue}
  }

  public var delimitedData: Int32 {
    get {return _storage._delimitedData}
    set {_uniqueStorage()._delimitedData = newValue}
  }

  public var descriptor: Int32 {
    get {return _storage._descriptor}
    set {_uniqueStorage()._descriptor = newValue}
  }

  public var extensionRegistry: Int32 {
    get {return _storage._extensionRegistry}
    set {_uniqueStorage()._extensionRegistry = newValue}
  }

  public var extensionsCurrentlySet: Int32 {
    get {return _storage._extensionsCurrentlySet}
    set {_uniqueStorage()._extensionsCurrentlySet = newValue}
  }

  public var isInitialized: Int32 {
    get {return _storage._isInitialized}
    set {_uniqueStorage()._isInitialized = newValue}
  }

  public var serializedSize: Int32 {
    get {return _storage._serializedSize}
    set {_uniqueStorage()._serializedSize = newValue}
  }

  public var sortedExtensionsInUse: Int32 {
    get {return _storage._sortedExtensionsInUse}
    set {_uniqueStorage()._sortedExtensionsInUse = newValue}
  }

  public var unknownFields: Int32 {
    get {return _storage._unknownFields}
    set {_uniqueStorage()._unknownFields = newValue}
  }

  public var fixed: Int32 {
    get {return _storage._fixed}
    set {_uniqueStorage()._fixed = newValue}
  }

  public var fract: Int32 {
    get {return _storage._fract}
    set {_uniqueStorage()._fract = newValue}
  }

  public var size: Int32 {
    get {return _storage._size}
    set {_uniqueStorage()._size = newValue}
  }

  public var logicalAddress: Int32 {
    get {return _storage._logicalAddress}
    set {_uniqueStorage()._logicalAddress = newValue}
  }

  public var physicalAddress: Int32 {
    get {return _storage._physicalAddress}
    set {_uniqueStorage()._physicalAddress = newValue}
  }

  public var byteCount: Int32 {
    get {return _storage._byteCount}
    set {_uniqueStorage()._byteCount = newValue}
  }

  public var byteOffset: Int32 {
    get {return _storage._byteOffset}
    set {_uniqueStorage()._byteOffset = newValue}
  }

  public var duration: Int32 {
    get {return _storage._duration}
    set {_uniqueStorage()._duration = newValue}
  }

  public var absoluteTime: Int32 {
    get {return _storage._absoluteTime}
    set {_uniqueStorage()._absoluteTime = newValue}
  }

  public var optionBits: Int32 {
    get {return _storage._optionBits}
    set {_uniqueStorage()._optionBits = newValue}
  }

  public var itemCount: Int32 {
    get {return _storage._itemCount}
    set {_uniqueStorage()._itemCount = newValue}
  }

  public var pbversion: Int32 {
    get {return _storage._pbversion}
    set {_uniqueStorage()._pbversion = newValue}
  }

  public var scriptCode: Int32 {
    get {return _storage._scriptCode}
    set {_uniqueStorage()._scriptCode = newValue}
  }

  public var langCode: Int32 {
    get {return _storage._langCode}
    set {_uniqueStorage()._langCode = newValue}
  }

  public var regionCode: Int32 {
    get {return _storage._regionCode}
    set {_uniqueStorage()._regionCode = newValue}
  }

  public var ostype: Int32 {
    get {return _storage._ostype}
    set {_uniqueStorage()._ostype = newValue}
  }

  public var processSerialNumber: Int32 {
    get {return _storage._processSerialNumber}
    set {_uniqueStorage()._processSerialNumber = newValue}
  }

  public var point: Int32 {
    get {return _storage._point}
    set {_uniqueStorage()._point = newValue}
  }

  public var rect: Int32 {
    get {return _storage._rect}
    set {_uniqueStorage()._rect = newValue}
  }

  public var fixedPoint: Int32 {
    get {return _storage._fixedPoint}
    set {_uniqueStorage()._fixedPoint = newValue}
  }

  public var fixedRect: Int32 {
    get {return _storage._fixedRect}
    set {_uniqueStorage()._fixedRect = newValue}
  }

  public var style: Int32 {
    get {return _storage._style}
    set {_uniqueStorage()._style = newValue}
  }

  public var styleParameter: Int32 {
    get {return _storage._styleParameter}
    set {_uniqueStorage()._styleParameter = newValue}
  }

  public var styleField: Int32 {
    get {return _storage._styleField}
    set {_uniqueStorage()._styleField = newValue}
  }

  public var timeScale: Int32 {
    get {return _storage._timeScale}
    set {_uniqueStorage()._timeScale = newValue}
  }

  public var timeBase: Int32 {
    get {return _storage._timeBase}
    set {_uniqueStorage()._timeBase = newValue}
  }

  public var timeRecord: Int32 {
    get {return _storage._timeRecord}
    set {_uniqueStorage()._timeRecord = newValue}
  }

  public init() {}

  public init(string: Int32? = nil,
    int: Int32? = nil,
    double: Int32? = nil,
    float: Int32? = nil,
    uint: Int32? = nil,
    hashValue_p: Int32? = nil,
    description_p: Int32? = nil,
    debugDescription_p: Int32? = nil,
    swift: Int32? = nil,
    unrecognized: Int32? = nil,
    class_p: Int32? = nil,
    deinit_p: Int32? = nil,
    enum_p: Int32? = nil,
    extension_p: Int32? = nil,
    func_p: Int32? = nil,
    import_p: Int32? = nil,
    init_p: Int32? = nil,
    inout_p: Int32? = nil,
    internal_p: Int32? = nil,
    let_p: Int32? = nil,
    operator_p: Int32? = nil,
    private_p: Int32? = nil,
    protocol_p: Int32? = nil,
    public_p: Int32? = nil,
    static_p: Int32? = nil,
    struct_p: Int32? = nil,
    subscript_p: Int32? = nil,
    typealias_p: Int32? = nil,
    var_p: Int32? = nil,
    break_p: Int32? = nil,
    case_p: Int32? = nil,
    continue_p: Int32? = nil,
    default_p: Int32? = nil,
    defer_p: Int32? = nil,
    do_p: Int32? = nil,
    else_p: Int32? = nil,
    fallthrough_p: Int32? = nil,
    for_p: Int32? = nil,
    guard_p: Int32? = nil,
    if_p: Int32? = nil,
    in_p: Int32? = nil,
    repeat_p: Int32? = nil,
    return_p: Int32? = nil,
    switch_p: Int32? = nil,
    where_p: Int32? = nil,
    while_p: Int32? = nil,
    as_p: Int32? = nil,
    catch_p: Int32? = nil,
    dynamicType_p: Int32? = nil,
    false_p: Int32? = nil,
    is_p: Int32? = nil,
    nil_p: Int32? = nil,
    rethrows_p: Int32? = nil,
    super_p: Int32? = nil,
    self_p: Int32? = nil,
    throw_p: Int32? = nil,
    throws_p: Int32? = nil,
    true_p: Int32? = nil,
    try_p: Int32? = nil,
    _Column__: Int32? = nil,
    _File__: Int32? = nil,
    _Function__: Int32? = nil,
    _Line__: Int32? = nil,
    ___: Int32? = nil,
    associativity: Int32? = nil,
    convenience: Int32? = nil,
    dynamic: Int32? = nil,
    didSet: Int32? = nil,
    final: Int32? = nil,
    get: Int32? = nil,
    infix: Int32? = nil,
    indirect: Int32? = nil,
    lazy: Int32? = nil,
    left: Int32? = nil,
    mutating: Int32? = nil,
    none: Int32? = nil,
    nonmutating: Int32? = nil,
    optional: Int32? = nil,
    override: Int32? = nil,
    postfix: Int32? = nil,
    precedence: Int32? = nil,
    prefix: Int32? = nil,
    required: Int32? = nil,
    right: Int32? = nil,
    set: Int32? = nil,
    type: Int32? = nil,
    unowned: Int32? = nil,
    weak: Int32? = nil,
    willSet: Int32? = nil,
    id: Int32? = nil,
    cmd: Int32? = nil,
    out: Int32? = nil,
    bycopy: Int32? = nil,
    byref: Int32? = nil,
    oneway: Int32? = nil,
    and: Int32? = nil,
    andEq: Int32? = nil,
    alignas: Int32? = nil,
    alignof: Int32? = nil,
    asm: Int32? = nil,
    auto: Int32? = nil,
    bitand: Int32? = nil,
    bitor: Int32? = nil,
    bool: Int32? = nil,
    char: Int32? = nil,
    char16T: Int32? = nil,
    char32T: Int32? = nil,
    compl: Int32? = nil,
    const: Int32? = nil,
    constexpr: Int32? = nil,
    constCast: Int32? = nil,
    decltype: Int32? = nil,
    delete: Int32? = nil,
    dynamicCast: Int32? = nil,
    explicit: Int32? = nil,
    export: Int32? = nil,
    extern: Int32? = nil,
    friend: Int32? = nil,
    goto: Int32? = nil,
    inline: Int32? = nil,
    long: Int32? = nil,
    mutable: Int32? = nil,
    namespace: Int32? = nil,
    new: Int32? = nil,
    noexcept: Int32? = nil,
    not: Int32? = nil,
    notEq: Int32? = nil,
    nullptr: Int32? = nil,
    or: Int32? = nil,
    orEq: Int32? = nil,
    protected: Int32? = nil,
    register: Int32? = nil,
    reinterpretCast: Int32? = nil,
    short: Int32? = nil,
    signed: Int32? = nil,
    sizeof: Int32? = nil,
    staticAssert: Int32? = nil,
    staticCast: Int32? = nil,
    template: Int32? = nil,
    this: Int32? = nil,
    threadLocal: Int32? = nil,
    typedef: Int32? = nil,
    typeid: Int32? = nil,
    typename: Int32? = nil,
    union: Int32? = nil,
    unsigned: Int32? = nil,
    using: Int32? = nil,
    virtual: Int32? = nil,
    void: Int32? = nil,
    volatile: Int32? = nil,
    wcharT: Int32? = nil,
    xor: Int32? = nil,
    xorEq: Int32? = nil,
    restrict: Int32? = nil,
    category: Int32? = nil,
    ivar: Int32? = nil,
    method: Int32? = nil,
    finalize: Int32? = nil,
    hash: Int32? = nil,
    dealloc: Int32? = nil,
    superclass: Int32? = nil,
    retain: Int32? = nil,
    release: Int32? = nil,
    autorelease: Int32? = nil,
    retainCount: Int32? = nil,
    zone: Int32? = nil,
    isProxy: Int32? = nil,
    copy: Int32? = nil,
    mutableCopy: Int32? = nil,
    classForCoder: Int32? = nil,
    clear: Int32? = nil,
    data: Int32? = nil,
    delimitedData: Int32? = nil,
    descriptor: Int32? = nil,
    extensionRegistry: Int32? = nil,
    extensionsCurrentlySet: Int32? = nil,
    isInitialized: Int32? = nil,
    serializedSize: Int32? = nil,
    sortedExtensionsInUse: Int32? = nil,
    unknownFields: Int32? = nil,
    fixed: Int32? = nil,
    fract: Int32? = nil,
    size: Int32? = nil,
    logicalAddress: Int32? = nil,
    physicalAddress: Int32? = nil,
    byteCount: Int32? = nil,
    byteOffset: Int32? = nil,
    duration: Int32? = nil,
    absoluteTime: Int32? = nil,
    optionBits: Int32? = nil,
    itemCount: Int32? = nil,
    pbversion: Int32? = nil,
    scriptCode: Int32? = nil,
    langCode: Int32? = nil,
    regionCode: Int32? = nil,
    ostype: Int32? = nil,
    processSerialNumber: Int32? = nil,
    point: Int32? = nil,
    rect: Int32? = nil,
    fixedPoint: Int32? = nil,
    fixedRect: Int32? = nil,
    style: Int32? = nil,
    styleParameter: Int32? = nil,
    styleField: Int32? = nil,
    timeScale: Int32? = nil,
    timeBase: Int32? = nil,
    timeRecord: Int32? = nil)
  {
    let storage = _uniqueStorage()
    if let v = string {
      storage._string = v
    }
    if let v = int {
      storage._int = v
    }
    if let v = double {
      storage._double = v
    }
    if let v = float {
      storage._float = v
    }
    if let v = uint {
      storage._uint = v
    }
    if let v = hashValue_p {
      storage._hashValue_p = v
    }
    if let v = description_p {
      storage._description_p = v
    }
    if let v = debugDescription_p {
      storage._debugDescription_p = v
    }
    if let v = swift {
      storage._swift = v
    }
    if let v = unrecognized {
      storage._unrecognized = v
    }
    if let v = class_p {
      storage._class_p = v
    }
    if let v = deinit_p {
      storage._deinit_p = v
    }
    if let v = enum_p {
      storage._enum_p = v
    }
    if let v = extension_p {
      storage._extension_p = v
    }
    if let v = func_p {
      storage._func_p = v
    }
    if let v = import_p {
      storage._import_p = v
    }
    if let v = init_p {
      storage._init_p = v
    }
    if let v = inout_p {
      storage._inout_p = v
    }
    if let v = internal_p {
      storage._internal_p = v
    }
    if let v = let_p {
      storage._let_p = v
    }
    if let v = operator_p {
      storage._operator_p = v
    }
    if let v = private_p {
      storage._private_p = v
    }
    if let v = protocol_p {
      storage._protocol_p = v
    }
    if let v = public_p {
      storage._public_p = v
    }
    if let v = static_p {
      storage._static_p = v
    }
    if let v = struct_p {
      storage._struct_p = v
    }
    if let v = subscript_p {
      storage._subscript_p = v
    }
    if let v = typealias_p {
      storage._typealias_p = v
    }
    if let v = var_p {
      storage._var_p = v
    }
    if let v = break_p {
      storage._break_p = v
    }
    if let v = case_p {
      storage._case_p = v
    }
    if let v = continue_p {
      storage._continue_p = v
    }
    if let v = default_p {
      storage._default_p = v
    }
    if let v = defer_p {
      storage._defer_p = v
    }
    if let v = do_p {
      storage._do_p = v
    }
    if let v = else_p {
      storage._else_p = v
    }
    if let v = fallthrough_p {
      storage._fallthrough_p = v
    }
    if let v = for_p {
      storage._for_p = v
    }
    if let v = guard_p {
      storage._guard_p = v
    }
    if let v = if_p {
      storage._if_p = v
    }
    if let v = in_p {
      storage._in_p = v
    }
    if let v = repeat_p {
      storage._repeat_p = v
    }
    if let v = return_p {
      storage._return_p = v
    }
    if let v = switch_p {
      storage._switch_p = v
    }
    if let v = where_p {
      storage._where_p = v
    }
    if let v = while_p {
      storage._while_p = v
    }
    if let v = as_p {
      storage._as_p = v
    }
    if let v = catch_p {
      storage._catch_p = v
    }
    if let v = dynamicType_p {
      storage._dynamicType_p = v
    }
    if let v = false_p {
      storage._false_p = v
    }
    if let v = is_p {
      storage._is_p = v
    }
    if let v = nil_p {
      storage._nil_p = v
    }
    if let v = rethrows_p {
      storage._rethrows_p = v
    }
    if let v = super_p {
      storage._super_p = v
    }
    if let v = self_p {
      storage._self_p = v
    }
    if let v = throw_p {
      storage._throw_p = v
    }
    if let v = throws_p {
      storage._throws_p = v
    }
    if let v = true_p {
      storage._true_p = v
    }
    if let v = try_p {
      storage._try_p = v
    }
    if let v = _Column__ {
      storage.__Column__ = v
    }
    if let v = _File__ {
      storage.__File__ = v
    }
    if let v = _Function__ {
      storage.__Function__ = v
    }
    if let v = _Line__ {
      storage.__Line__ = v
    }
    if let v = ___ {
      storage.____ = v
    }
    if let v = associativity {
      storage._associativity = v
    }
    if let v = convenience {
      storage._convenience = v
    }
    if let v = dynamic {
      storage._dynamic = v
    }
    if let v = didSet {
      storage._didSet = v
    }
    if let v = final {
      storage._final = v
    }
    if let v = get {
      storage._get = v
    }
    if let v = infix {
      storage._infix = v
    }
    if let v = indirect {
      storage._indirect = v
    }
    if let v = lazy {
      storage._lazy = v
    }
    if let v = left {
      storage._left = v
    }
    if let v = mutating {
      storage._mutating = v
    }
    if let v = none {
      storage._none = v
    }
    if let v = nonmutating {
      storage._nonmutating = v
    }
    if let v = optional {
      storage._optional = v
    }
    if let v = override {
      storage._override = v
    }
    if let v = postfix {
      storage._postfix = v
    }
    if let v = precedence {
      storage._precedence = v
    }
    if let v = prefix {
      storage._prefix = v
    }
    if let v = required {
      storage._required = v
    }
    if let v = right {
      storage._right = v
    }
    if let v = set {
      storage._set = v
    }
    if let v = type {
      storage._type = v
    }
    if let v = unowned {
      storage._unowned = v
    }
    if let v = weak {
      storage._weak = v
    }
    if let v = willSet {
      storage._willSet = v
    }
    if let v = id {
      storage._id = v
    }
    if let v = cmd {
      storage._cmd = v
    }
    if let v = out {
      storage._out = v
    }
    if let v = bycopy {
      storage._bycopy = v
    }
    if let v = byref {
      storage._byref = v
    }
    if let v = oneway {
      storage._oneway = v
    }
    if let v = and {
      storage._and = v
    }
    if let v = andEq {
      storage._andEq = v
    }
    if let v = alignas {
      storage._alignas = v
    }
    if let v = alignof {
      storage._alignof = v
    }
    if let v = asm {
      storage._asm = v
    }
    if let v = auto {
      storage._auto = v
    }
    if let v = bitand {
      storage._bitand = v
    }
    if let v = bitor {
      storage._bitor = v
    }
    if let v = bool {
      storage._bool = v
    }
    if let v = char {
      storage._char = v
    }
    if let v = char16T {
      storage._char16T = v
    }
    if let v = char32T {
      storage._char32T = v
    }
    if let v = compl {
      storage._compl = v
    }
    if let v = const {
      storage._const = v
    }
    if let v = constexpr {
      storage._constexpr = v
    }
    if let v = constCast {
      storage._constCast = v
    }
    if let v = decltype {
      storage._decltype = v
    }
    if let v = delete {
      storage._delete = v
    }
    if let v = dynamicCast {
      storage._dynamicCast = v
    }
    if let v = explicit {
      storage._explicit = v
    }
    if let v = export {
      storage._export = v
    }
    if let v = extern {
      storage._extern = v
    }
    if let v = friend {
      storage._friend = v
    }
    if let v = goto {
      storage._goto = v
    }
    if let v = inline {
      storage._inline = v
    }
    if let v = long {
      storage._long = v
    }
    if let v = mutable {
      storage._mutable = v
    }
    if let v = namespace {
      storage._namespace = v
    }
    if let v = new {
      storage._new = v
    }
    if let v = noexcept {
      storage._noexcept = v
    }
    if let v = not {
      storage._not = v
    }
    if let v = notEq {
      storage._notEq = v
    }
    if let v = nullptr {
      storage._nullptr = v
    }
    if let v = or {
      storage._or = v
    }
    if let v = orEq {
      storage._orEq = v
    }
    if let v = protected {
      storage._protected = v
    }
    if let v = register {
      storage._register = v
    }
    if let v = reinterpretCast {
      storage._reinterpretCast = v
    }
    if let v = short {
      storage._short = v
    }
    if let v = signed {
      storage._signed = v
    }
    if let v = sizeof {
      storage._sizeof = v
    }
    if let v = staticAssert {
      storage._staticAssert = v
    }
    if let v = staticCast {
      storage._staticCast = v
    }
    if let v = template {
      storage._template = v
    }
    if let v = this {
      storage._this = v
    }
    if let v = threadLocal {
      storage._threadLocal = v
    }
    if let v = typedef {
      storage._typedef = v
    }
    if let v = typeid {
      storage._typeid = v
    }
    if let v = typename {
      storage._typename = v
    }
    if let v = union {
      storage._union = v
    }
    if let v = unsigned {
      storage._unsigned = v
    }
    if let v = using {
      storage._using = v
    }
    if let v = virtual {
      storage._virtual = v
    }
    if let v = void {
      storage._void = v
    }
    if let v = volatile {
      storage._volatile = v
    }
    if let v = wcharT {
      storage._wcharT = v
    }
    if let v = xor {
      storage._xor = v
    }
    if let v = xorEq {
      storage._xorEq = v
    }
    if let v = restrict {
      storage._restrict = v
    }
    if let v = category {
      storage._category = v
    }
    if let v = ivar {
      storage._ivar = v
    }
    if let v = method {
      storage._method = v
    }
    if let v = finalize {
      storage._finalize = v
    }
    if let v = hash {
      storage._hash = v
    }
    if let v = dealloc {
      storage._dealloc = v
    }
    if let v = superclass {
      storage._superclass = v
    }
    if let v = retain {
      storage._retain = v
    }
    if let v = release {
      storage._release = v
    }
    if let v = autorelease {
      storage._autorelease = v
    }
    if let v = retainCount {
      storage._retainCount = v
    }
    if let v = zone {
      storage._zone = v
    }
    if let v = isProxy {
      storage._isProxy = v
    }
    if let v = copy {
      storage._copy = v
    }
    if let v = mutableCopy {
      storage._mutableCopy = v
    }
    if let v = classForCoder {
      storage._classForCoder = v
    }
    if let v = clear {
      storage._clear = v
    }
    if let v = data {
      storage._data = v
    }
    if let v = delimitedData {
      storage._delimitedData = v
    }
    if let v = descriptor {
      storage._descriptor = v
    }
    if let v = extensionRegistry {
      storage._extensionRegistry = v
    }
    if let v = extensionsCurrentlySet {
      storage._extensionsCurrentlySet = v
    }
    if let v = isInitialized {
      storage._isInitialized = v
    }
    if let v = serializedSize {
      storage._serializedSize = v
    }
    if let v = sortedExtensionsInUse {
      storage._sortedExtensionsInUse = v
    }
    if let v = unknownFields {
      storage._unknownFields = v
    }
    if let v = fixed {
      storage._fixed = v
    }
    if let v = fract {
      storage._fract = v
    }
    if let v = size {
      storage._size = v
    }
    if let v = logicalAddress {
      storage._logicalAddress = v
    }
    if let v = physicalAddress {
      storage._physicalAddress = v
    }
    if let v = byteCount {
      storage._byteCount = v
    }
    if let v = byteOffset {
      storage._byteOffset = v
    }
    if let v = duration {
      storage._duration = v
    }
    if let v = absoluteTime {
      storage._absoluteTime = v
    }
    if let v = optionBits {
      storage._optionBits = v
    }
    if let v = itemCount {
      storage._itemCount = v
    }
    if let v = pbversion {
      storage._pbversion = v
    }
    if let v = scriptCode {
      storage._scriptCode = v
    }
    if let v = langCode {
      storage._langCode = v
    }
    if let v = regionCode {
      storage._regionCode = v
    }
    if let v = ostype {
      storage._ostype = v
    }
    if let v = processSerialNumber {
      storage._processSerialNumber = v
    }
    if let v = point {
      storage._point = v
    }
    if let v = rect {
      storage._rect = v
    }
    if let v = fixedPoint {
      storage._fixedPoint = v
    }
    if let v = fixedRect {
      storage._fixedRect = v
    }
    if let v = style {
      storage._style = v
    }
    if let v = styleParameter {
      storage._styleParameter = v
    }
    if let v = styleField {
      storage._styleField = v
    }
    if let v = timeScale {
      storage._timeScale = v
    }
    if let v = timeBase {
      storage._timeBase = v
    }
    if let v = timeRecord {
      storage._timeRecord = v
    }
  }

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_FieldNames) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

public struct SwiftUnittest_Names_MessageNames: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames"}
  public var protoMessageName: String {return "MessageNames"}
  public var protoPackageName: String {return "swift_unittest.names"}
  public var jsonFieldNames: [String: Int] {return [:]}
  public var protoFieldNames: [String: Int] {return [:]}

  public struct StringMessage: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.StringMessage"}
    public var protoMessageName: String {return "String"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.StringMessage) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct ProtocolMessage: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.ProtocolMessage"}
    public var protoMessageName: String {return "Protocol"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.ProtocolMessage) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct IntMessage: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.IntMessage"}
    public var protoMessageName: String {return "Int"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.IntMessage) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct DoubleMessage: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.DoubleMessage"}
    public var protoMessageName: String {return "Double"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.DoubleMessage) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct FloatMessage: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.FloatMessage"}
    public var protoMessageName: String {return "Float"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.FloatMessage) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct UIntMessage: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.UIntMessage"}
    public var protoMessageName: String {return "UInt"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.UIntMessage) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct hashValueMessage: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.hashValueMessage"}
    public var protoMessageName: String {return "hashValue"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.hashValueMessage) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct descriptionMessage: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.descriptionMessage"}
    public var protoMessageName: String {return "description"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.descriptionMessage) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct debugDescriptionMessage: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.debugDescriptionMessage"}
    public var protoMessageName: String {return "debugDescription"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.debugDescriptionMessage) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct Swift: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.Swift"}
    public var protoMessageName: String {return "Swift"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.Swift) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct UNRECOGNIZED: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.UNRECOGNIZED"}
    public var protoMessageName: String {return "UNRECOGNIZED"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.UNRECOGNIZED) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct classMessage: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.classMessage"}
    public var protoMessageName: String {return "class"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.classMessage) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct deinitMessage: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.deinitMessage"}
    public var protoMessageName: String {return "deinit"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.deinitMessage) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct enumMessage: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.enumMessage"}
    public var protoMessageName: String {return "enum"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.enumMessage) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct extensionMessage: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.extensionMessage"}
    public var protoMessageName: String {return "extension"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.extensionMessage) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct funcMessage: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.funcMessage"}
    public var protoMessageName: String {return "func"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.funcMessage) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct importMessage: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.importMessage"}
    public var protoMessageName: String {return "import"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.importMessage) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct initMessage: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.initMessage"}
    public var protoMessageName: String {return "init"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.initMessage) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct inoutMessage: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.inoutMessage"}
    public var protoMessageName: String {return "inout"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.inoutMessage) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct internalMessage: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.internalMessage"}
    public var protoMessageName: String {return "internal"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.internalMessage) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct letMessage: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.letMessage"}
    public var protoMessageName: String {return "let"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.letMessage) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct operatorMessage: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.operatorMessage"}
    public var protoMessageName: String {return "operator"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.operatorMessage) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct privateMessage: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.privateMessage"}
    public var protoMessageName: String {return "private"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.privateMessage) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct protocolMessage: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.protocolMessage"}
    public var protoMessageName: String {return "protocol"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.protocolMessage) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct publicMessage: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.publicMessage"}
    public var protoMessageName: String {return "public"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.publicMessage) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct staticMessage: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.staticMessage"}
    public var protoMessageName: String {return "static"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.staticMessage) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct structMessage: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.structMessage"}
    public var protoMessageName: String {return "struct"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.structMessage) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct subscriptMessage: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.subscriptMessage"}
    public var protoMessageName: String {return "subscript"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.subscriptMessage) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct typealiasMessage: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.typealiasMessage"}
    public var protoMessageName: String {return "typealias"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.typealiasMessage) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct varMessage: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.varMessage"}
    public var protoMessageName: String {return "var"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.varMessage) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct breakMessage: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.breakMessage"}
    public var protoMessageName: String {return "break"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.breakMessage) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct caseMessage: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.caseMessage"}
    public var protoMessageName: String {return "case"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.caseMessage) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct continueMessage: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.continueMessage"}
    public var protoMessageName: String {return "continue"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.continueMessage) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct defaultMessage: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.defaultMessage"}
    public var protoMessageName: String {return "default"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.defaultMessage) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct deferMessage: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.deferMessage"}
    public var protoMessageName: String {return "defer"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.deferMessage) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct doMessage: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.doMessage"}
    public var protoMessageName: String {return "do"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.doMessage) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct elseMessage: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.elseMessage"}
    public var protoMessageName: String {return "else"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.elseMessage) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct fallthroughMessage: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.fallthroughMessage"}
    public var protoMessageName: String {return "fallthrough"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.fallthroughMessage) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct forMessage: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.forMessage"}
    public var protoMessageName: String {return "for"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.forMessage) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct guardMessage: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.guardMessage"}
    public var protoMessageName: String {return "guard"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.guardMessage) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct ifMessage: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.ifMessage"}
    public var protoMessageName: String {return "if"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.ifMessage) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct inMessage: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.inMessage"}
    public var protoMessageName: String {return "in"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.inMessage) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct repeatMessage: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.repeatMessage"}
    public var protoMessageName: String {return "repeat"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.repeatMessage) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct returnMessage: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.returnMessage"}
    public var protoMessageName: String {return "return"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.returnMessage) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct switchMessage: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.switchMessage"}
    public var protoMessageName: String {return "switch"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.switchMessage) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct whereMessage: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.whereMessage"}
    public var protoMessageName: String {return "where"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.whereMessage) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct whileMessage: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.whileMessage"}
    public var protoMessageName: String {return "while"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.whileMessage) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct asMessage: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.asMessage"}
    public var protoMessageName: String {return "as"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.asMessage) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct catchMessage: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.catchMessage"}
    public var protoMessageName: String {return "catch"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.catchMessage) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct dynamicTypeMessage: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.dynamicTypeMessage"}
    public var protoMessageName: String {return "dynamicType"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.dynamicTypeMessage) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct falseMessage: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.falseMessage"}
    public var protoMessageName: String {return "false"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.falseMessage) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct isMessage: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.isMessage"}
    public var protoMessageName: String {return "is"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.isMessage) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct nilMessage: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.nilMessage"}
    public var protoMessageName: String {return "nil"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.nilMessage) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct rethrowsMessage: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.rethrowsMessage"}
    public var protoMessageName: String {return "rethrows"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.rethrowsMessage) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct superMessage: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.superMessage"}
    public var protoMessageName: String {return "super"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.superMessage) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct selfMessage: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.selfMessage"}
    public var protoMessageName: String {return "self"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.selfMessage) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct throwMessage: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.throwMessage"}
    public var protoMessageName: String {return "throw"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.throwMessage) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct throwsMessage: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.throwsMessage"}
    public var protoMessageName: String {return "throws"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.throwsMessage) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct trueMessage: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.trueMessage"}
    public var protoMessageName: String {return "true"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.trueMessage) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct tryMessage: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.tryMessage"}
    public var protoMessageName: String {return "try"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.tryMessage) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct __COLUMN__Message: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.__COLUMN__Message"}
    public var protoMessageName: String {return "__COLUMN__"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.__COLUMN__Message) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct __FILE__Message: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.__FILE__Message"}
    public var protoMessageName: String {return "__FILE__"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.__FILE__Message) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct __FUNCTION__Message: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.__FUNCTION__Message"}
    public var protoMessageName: String {return "__FUNCTION__"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.__FUNCTION__Message) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct __LINE__Message: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.__LINE__Message"}
    public var protoMessageName: String {return "__LINE__"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.__LINE__Message) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct _Message: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames._Message"}
    public var protoMessageName: String {return "_"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames._Message) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct __Message: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.__Message"}
    public var protoMessageName: String {return "__"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.__Message) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct associativity: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.associativity"}
    public var protoMessageName: String {return "associativity"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.associativity) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct convenience: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.convenience"}
    public var protoMessageName: String {return "convenience"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.convenience) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct dynamic: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.dynamic"}
    public var protoMessageName: String {return "dynamic"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.dynamic) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct didSet: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.didSet"}
    public var protoMessageName: String {return "didSet"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.didSet) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct final: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.final"}
    public var protoMessageName: String {return "final"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.final) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct get: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.get"}
    public var protoMessageName: String {return "get"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.get) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct infix: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.infix"}
    public var protoMessageName: String {return "infix"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.infix) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct indirect: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.indirect"}
    public var protoMessageName: String {return "indirect"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.indirect) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct lazy: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.lazy"}
    public var protoMessageName: String {return "lazy"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.lazy) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct left: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.left"}
    public var protoMessageName: String {return "left"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.left) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct mutating: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.mutating"}
    public var protoMessageName: String {return "mutating"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.mutating) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct none: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.none"}
    public var protoMessageName: String {return "none"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.none) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct nonmutating: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.nonmutating"}
    public var protoMessageName: String {return "nonmutating"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.nonmutating) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct optional: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.optional"}
    public var protoMessageName: String {return "optional"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.optional) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct override: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.override"}
    public var protoMessageName: String {return "override"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.override) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct postfix: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.postfix"}
    public var protoMessageName: String {return "postfix"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.postfix) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct precedence: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.precedence"}
    public var protoMessageName: String {return "precedence"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.precedence) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct prefix: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.prefix"}
    public var protoMessageName: String {return "prefix"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.prefix) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct required: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.required"}
    public var protoMessageName: String {return "required"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.required) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct right: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.right"}
    public var protoMessageName: String {return "right"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.right) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct set: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.set"}
    public var protoMessageName: String {return "set"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.set) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct TypeMessage: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.TypeMessage"}
    public var protoMessageName: String {return "Type"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.TypeMessage) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct unowned: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.unowned"}
    public var protoMessageName: String {return "unowned"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.unowned) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct weak: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.weak"}
    public var protoMessageName: String {return "weak"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.weak) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct willSet: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.willSet"}
    public var protoMessageName: String {return "willSet"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.willSet) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct id: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.id"}
    public var protoMessageName: String {return "id"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.id) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct _cmd: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames._cmd"}
    public var protoMessageName: String {return "_cmd"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames._cmd) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct out: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.out"}
    public var protoMessageName: String {return "out"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.out) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct bycopy: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.bycopy"}
    public var protoMessageName: String {return "bycopy"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.bycopy) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct byref: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.byref"}
    public var protoMessageName: String {return "byref"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.byref) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct oneway: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.oneway"}
    public var protoMessageName: String {return "oneway"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.oneway) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct and: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.and"}
    public var protoMessageName: String {return "and"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.and) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct and_eq: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.and_eq"}
    public var protoMessageName: String {return "and_eq"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.and_eq) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct alignas: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.alignas"}
    public var protoMessageName: String {return "alignas"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.alignas) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct alignof: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.alignof"}
    public var protoMessageName: String {return "alignof"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.alignof) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct asm: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.asm"}
    public var protoMessageName: String {return "asm"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.asm) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct auto: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.auto"}
    public var protoMessageName: String {return "auto"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.auto) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct bitand: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.bitand"}
    public var protoMessageName: String {return "bitand"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.bitand) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct bitor: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.bitor"}
    public var protoMessageName: String {return "bitor"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.bitor) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct bool: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.bool"}
    public var protoMessageName: String {return "bool"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.bool) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct char: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.char"}
    public var protoMessageName: String {return "char"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.char) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct char16_t: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.char16_t"}
    public var protoMessageName: String {return "char16_t"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.char16_t) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct char32_t: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.char32_t"}
    public var protoMessageName: String {return "char32_t"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.char32_t) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct compl: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.compl"}
    public var protoMessageName: String {return "compl"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.compl) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct const: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.const"}
    public var protoMessageName: String {return "const"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.const) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct constexpr: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.constexpr"}
    public var protoMessageName: String {return "constexpr"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.constexpr) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct const_cast: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.const_cast"}
    public var protoMessageName: String {return "const_cast"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.const_cast) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct decltype: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.decltype"}
    public var protoMessageName: String {return "decltype"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.decltype) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct delete: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.delete"}
    public var protoMessageName: String {return "delete"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.delete) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct dynamic_cast: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.dynamic_cast"}
    public var protoMessageName: String {return "dynamic_cast"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.dynamic_cast) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct explicit: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.explicit"}
    public var protoMessageName: String {return "explicit"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.explicit) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct export: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.export"}
    public var protoMessageName: String {return "export"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.export) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct extern: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.extern"}
    public var protoMessageName: String {return "extern"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.extern) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct friend: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.friend"}
    public var protoMessageName: String {return "friend"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.friend) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct goto: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.goto"}
    public var protoMessageName: String {return "goto"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.goto) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct inline: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.inline"}
    public var protoMessageName: String {return "inline"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.inline) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct long: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.long"}
    public var protoMessageName: String {return "long"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.long) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct mutable: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.mutable"}
    public var protoMessageName: String {return "mutable"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.mutable) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct namespace: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.namespace"}
    public var protoMessageName: String {return "namespace"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.namespace) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct new: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.new"}
    public var protoMessageName: String {return "new"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.new) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct noexcept: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.noexcept"}
    public var protoMessageName: String {return "noexcept"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.noexcept) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct not: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.not"}
    public var protoMessageName: String {return "not"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.not) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct not_eq: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.not_eq"}
    public var protoMessageName: String {return "not_eq"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.not_eq) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct nullptr: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.nullptr"}
    public var protoMessageName: String {return "nullptr"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.nullptr) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct or: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.or"}
    public var protoMessageName: String {return "or"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.or) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct or_eq: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.or_eq"}
    public var protoMessageName: String {return "or_eq"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.or_eq) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct protected: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.protected"}
    public var protoMessageName: String {return "protected"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.protected) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct register: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.register"}
    public var protoMessageName: String {return "register"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.register) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct reinterpret_cast: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.reinterpret_cast"}
    public var protoMessageName: String {return "reinterpret_cast"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.reinterpret_cast) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct short: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.short"}
    public var protoMessageName: String {return "short"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.short) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct signed: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.signed"}
    public var protoMessageName: String {return "signed"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.signed) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct sizeof: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.sizeof"}
    public var protoMessageName: String {return "sizeof"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.sizeof) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct static_assert: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.static_assert"}
    public var protoMessageName: String {return "static_assert"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.static_assert) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct static_cast: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.static_cast"}
    public var protoMessageName: String {return "static_cast"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.static_cast) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct template: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.template"}
    public var protoMessageName: String {return "template"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.template) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct this: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.this"}
    public var protoMessageName: String {return "this"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.this) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct thread_local: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.thread_local"}
    public var protoMessageName: String {return "thread_local"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.thread_local) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct typedef: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.typedef"}
    public var protoMessageName: String {return "typedef"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.typedef) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct typeid: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.typeid"}
    public var protoMessageName: String {return "typeid"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.typeid) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct typename: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.typename"}
    public var protoMessageName: String {return "typename"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.typename) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct union: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.union"}
    public var protoMessageName: String {return "union"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.union) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct unsigned: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.unsigned"}
    public var protoMessageName: String {return "unsigned"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.unsigned) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct using: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.using"}
    public var protoMessageName: String {return "using"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.using) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct virtual: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.virtual"}
    public var protoMessageName: String {return "virtual"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.virtual) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct void: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.void"}
    public var protoMessageName: String {return "void"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.void) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct volatile: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.volatile"}
    public var protoMessageName: String {return "volatile"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.volatile) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct wchar_t: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.wchar_t"}
    public var protoMessageName: String {return "wchar_t"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.wchar_t) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct xor: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.xor"}
    public var protoMessageName: String {return "xor"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.xor) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct xor_eq: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.xor_eq"}
    public var protoMessageName: String {return "xor_eq"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.xor_eq) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct restrict: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.restrict"}
    public var protoMessageName: String {return "restrict"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.restrict) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct Category: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.Category"}
    public var protoMessageName: String {return "Category"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.Category) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct Ivar: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.Ivar"}
    public var protoMessageName: String {return "Ivar"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.Ivar) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct Method: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.Method"}
    public var protoMessageName: String {return "Method"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.Method) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct finalize: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.finalize"}
    public var protoMessageName: String {return "finalize"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.finalize) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct hash: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.hash"}
    public var protoMessageName: String {return "hash"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.hash) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct dealloc: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.dealloc"}
    public var protoMessageName: String {return "dealloc"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.dealloc) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct superclass: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.superclass"}
    public var protoMessageName: String {return "superclass"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.superclass) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct retain: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.retain"}
    public var protoMessageName: String {return "retain"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.retain) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct release: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.release"}
    public var protoMessageName: String {return "release"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.release) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct autorelease: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.autorelease"}
    public var protoMessageName: String {return "autorelease"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.autorelease) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct retainCount: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.retainCount"}
    public var protoMessageName: String {return "retainCount"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.retainCount) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct zone: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.zone"}
    public var protoMessageName: String {return "zone"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.zone) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct isProxy: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.isProxy"}
    public var protoMessageName: String {return "isProxy"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.isProxy) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct copy: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.copy"}
    public var protoMessageName: String {return "copy"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.copy) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct mutableCopy: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.mutableCopy"}
    public var protoMessageName: String {return "mutableCopy"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.mutableCopy) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct classForCoder: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.classForCoder"}
    public var protoMessageName: String {return "classForCoder"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.classForCoder) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct clear: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.clear"}
    public var protoMessageName: String {return "clear"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.clear) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct data: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.data"}
    public var protoMessageName: String {return "data"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.data) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct delimitedData: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.delimitedData"}
    public var protoMessageName: String {return "delimitedData"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.delimitedData) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct descriptor: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.descriptor"}
    public var protoMessageName: String {return "descriptor"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.descriptor) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct extensionRegistry: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.extensionRegistry"}
    public var protoMessageName: String {return "extensionRegistry"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.extensionRegistry) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct extensionsCurrentlySet: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.extensionsCurrentlySet"}
    public var protoMessageName: String {return "extensionsCurrentlySet"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.extensionsCurrentlySet) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct isInitialized: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.isInitialized"}
    public var protoMessageName: String {return "isInitialized"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.isInitialized) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct serializedSize: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.serializedSize"}
    public var protoMessageName: String {return "serializedSize"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.serializedSize) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct sortedExtensionsInUse: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.sortedExtensionsInUse"}
    public var protoMessageName: String {return "sortedExtensionsInUse"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.sortedExtensionsInUse) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct unknownFields: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.unknownFields"}
    public var protoMessageName: String {return "unknownFields"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.unknownFields) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct Fixed: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.Fixed"}
    public var protoMessageName: String {return "Fixed"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.Fixed) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct Fract: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.Fract"}
    public var protoMessageName: String {return "Fract"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.Fract) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct Size: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.Size"}
    public var protoMessageName: String {return "Size"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.Size) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct LogicalAddress: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.LogicalAddress"}
    public var protoMessageName: String {return "LogicalAddress"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.LogicalAddress) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct PhysicalAddress: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.PhysicalAddress"}
    public var protoMessageName: String {return "PhysicalAddress"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.PhysicalAddress) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct ByteCount: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.ByteCount"}
    public var protoMessageName: String {return "ByteCount"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.ByteCount) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct ByteOffset: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.ByteOffset"}
    public var protoMessageName: String {return "ByteOffset"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.ByteOffset) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct Duration: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.Duration"}
    public var protoMessageName: String {return "Duration"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.Duration) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct AbsoluteTime: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.AbsoluteTime"}
    public var protoMessageName: String {return "AbsoluteTime"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.AbsoluteTime) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct OptionBits: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.OptionBits"}
    public var protoMessageName: String {return "OptionBits"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.OptionBits) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct ItemCount: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.ItemCount"}
    public var protoMessageName: String {return "ItemCount"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.ItemCount) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct PBVersion: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.PBVersion"}
    public var protoMessageName: String {return "PBVersion"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.PBVersion) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct ScriptCode: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.ScriptCode"}
    public var protoMessageName: String {return "ScriptCode"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.ScriptCode) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct LangCode: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.LangCode"}
    public var protoMessageName: String {return "LangCode"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.LangCode) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct RegionCode: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.RegionCode"}
    public var protoMessageName: String {return "RegionCode"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.RegionCode) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct OSType: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.OSType"}
    public var protoMessageName: String {return "OSType"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.OSType) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct ProcessSerialNumber: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.ProcessSerialNumber"}
    public var protoMessageName: String {return "ProcessSerialNumber"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.ProcessSerialNumber) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct Point: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.Point"}
    public var protoMessageName: String {return "Point"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.Point) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct Rect: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.Rect"}
    public var protoMessageName: String {return "Rect"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.Rect) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct FixedPoint: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.FixedPoint"}
    public var protoMessageName: String {return "FixedPoint"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.FixedPoint) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct FixedRect: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.FixedRect"}
    public var protoMessageName: String {return "FixedRect"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.FixedRect) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct Style: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.Style"}
    public var protoMessageName: String {return "Style"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.Style) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct StyleParameter: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.StyleParameter"}
    public var protoMessageName: String {return "StyleParameter"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.StyleParameter) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct StyleField: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.StyleField"}
    public var protoMessageName: String {return "StyleField"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.StyleField) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct TimeScale: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.TimeScale"}
    public var protoMessageName: String {return "TimeScale"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.TimeScale) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct TimeBase: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.TimeBase"}
    public var protoMessageName: String {return "TimeBase"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.TimeBase) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public struct TimeRecord: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "SwiftUnittest_Names_MessageNames.TimeRecord"}
    public var protoMessageName: String {return "TimeRecord"}
    public var protoPackageName: String {return "swift_unittest.names"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    public var a: Int32 = 0

    public init() {}

    public init(a: Int32? = nil)
    {
      if let v = a {
        self.a = v
      }
    }

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &a)
      default:
        handled = false
      }
      return handled
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if a != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: a, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
    }

    public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.TimeRecord) -> Bool {
      if a != other.a {return false}
      return true
    }
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return false // Proto3 ignores unknown fields
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
  }

  public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames) -> Bool {
    return true
  }
}

public struct SwiftUnittest_Names_EnumNames: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "SwiftUnittest_Names_EnumNames"}
  public var protoMessageName: String {return "EnumNames"}
  public var protoPackageName: String {return "swift_unittest.names"}
  public var jsonFieldNames: [String: Int] {return [:]}
  public var protoFieldNames: [String: Int] {return [:]}

  public enum StringEnum: ProtobufEnum {
    public typealias RawValue = Int
    case aString // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aString
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aString
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aString": self = .aString
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aString": self = .aString
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aString": self = .aString
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aString: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aString: return "\"aString\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aString: return ".aString"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum ProtocolEnum: ProtobufEnum {
    public typealias RawValue = Int
    case aProtocol // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aProtocol
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aProtocol
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aProtocol": self = .aProtocol
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aProtocol": self = .aProtocol
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aProtocol": self = .aProtocol
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aProtocol: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aProtocol: return "\"aProtocol\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aProtocol: return ".aProtocol"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum IntEnum: ProtobufEnum {
    public typealias RawValue = Int
    case aInt // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aInt
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aInt
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aInt": self = .aInt
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aInt": self = .aInt
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aInt": self = .aInt
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aInt: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aInt: return "\"aInt\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aInt: return ".aInt"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum DoubleEnum: ProtobufEnum {
    public typealias RawValue = Int
    case aDouble // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aDouble
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aDouble
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aDouble": self = .aDouble
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aDouble": self = .aDouble
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aDouble": self = .aDouble
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aDouble: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aDouble: return "\"aDouble\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aDouble: return ".aDouble"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum FloatEnum: ProtobufEnum {
    public typealias RawValue = Int
    case aFloat // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aFloat
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aFloat
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aFloat": self = .aFloat
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aFloat": self = .aFloat
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aFloat": self = .aFloat
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aFloat: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aFloat: return "\"aFloat\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aFloat: return ".aFloat"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum UIntEnum: ProtobufEnum {
    public typealias RawValue = Int
    case aUint // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aUint
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aUint
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aUint": self = .aUint
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aUInt": self = .aUint
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aUInt": self = .aUint
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aUint: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aUint: return "\"aUInt\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aUint: return ".aUint"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum hashValueEnum: ProtobufEnum {
    public typealias RawValue = Int
    case ahashValue // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .ahashValue
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .ahashValue
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "ahashValue": self = .ahashValue
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "ahashValue": self = .ahashValue
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "ahashValue": self = .ahashValue
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .ahashValue: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .ahashValue: return "\"ahashValue\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .ahashValue: return ".ahashValue"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum descriptionEnum: ProtobufEnum {
    public typealias RawValue = Int
    case adescription // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .adescription
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .adescription
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "adescription": self = .adescription
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "adescription": self = .adescription
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "adescription": self = .adescription
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .adescription: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .adescription: return "\"adescription\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .adescription: return ".adescription"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum debugDescriptionEnum: ProtobufEnum {
    public typealias RawValue = Int
    case adebugDescription // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .adebugDescription
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .adebugDescription
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "adebugDescription": self = .adebugDescription
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "adebugDescription": self = .adebugDescription
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "adebugDescription": self = .adebugDescription
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .adebugDescription: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .adebugDescription: return "\"adebugDescription\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .adebugDescription: return ".adebugDescription"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum Swift: ProtobufEnum {
    public typealias RawValue = Int
    case aSwift // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aSwift
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aSwift
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aSwift": self = .aSwift
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aSwift": self = .aSwift
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aSwift": self = .aSwift
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aSwift: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aSwift: return "\"aSwift\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aSwift: return ".aSwift"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum UNRECOGNIZED: ProtobufEnum {
    public typealias RawValue = Int
    case aUnrecognized // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aUnrecognized
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aUnrecognized
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aUnrecognized": self = .aUnrecognized
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aUNRECOGNIZED": self = .aUnrecognized
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aUNRECOGNIZED": self = .aUnrecognized
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aUnrecognized: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aUnrecognized: return "\"aUNRECOGNIZED\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aUnrecognized: return ".aUnrecognized"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum classEnum: ProtobufEnum {
    public typealias RawValue = Int
    case aclass // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aclass
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aclass
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aclass": self = .aclass
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aclass": self = .aclass
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aclass": self = .aclass
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aclass: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aclass: return "\"aclass\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aclass: return ".aclass"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum deinitEnum: ProtobufEnum {
    public typealias RawValue = Int
    case adeinit // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .adeinit
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .adeinit
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "adeinit": self = .adeinit
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "adeinit": self = .adeinit
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "adeinit": self = .adeinit
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .adeinit: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .adeinit: return "\"adeinit\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .adeinit: return ".adeinit"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum enumEnum: ProtobufEnum {
    public typealias RawValue = Int
    case aenum // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aenum
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aenum
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aenum": self = .aenum
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aenum": self = .aenum
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aenum": self = .aenum
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aenum: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aenum: return "\"aenum\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aenum: return ".aenum"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum extensionEnum: ProtobufEnum {
    public typealias RawValue = Int
    case aextension // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aextension
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aextension
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aextension": self = .aextension
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aextension": self = .aextension
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aextension": self = .aextension
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aextension: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aextension: return "\"aextension\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aextension: return ".aextension"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum funcEnum: ProtobufEnum {
    public typealias RawValue = Int
    case afunc // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .afunc
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .afunc
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "afunc": self = .afunc
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "afunc": self = .afunc
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "afunc": self = .afunc
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .afunc: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .afunc: return "\"afunc\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .afunc: return ".afunc"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum importEnum: ProtobufEnum {
    public typealias RawValue = Int
    case aimport // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aimport
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aimport
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aimport": self = .aimport
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aimport": self = .aimport
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aimport": self = .aimport
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aimport: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aimport: return "\"aimport\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aimport: return ".aimport"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum initEnum: ProtobufEnum {
    public typealias RawValue = Int
    case ainit // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .ainit
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .ainit
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "ainit": self = .ainit
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "ainit": self = .ainit
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "ainit": self = .ainit
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .ainit: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .ainit: return "\"ainit\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .ainit: return ".ainit"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum inoutEnum: ProtobufEnum {
    public typealias RawValue = Int
    case ainout // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .ainout
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .ainout
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "ainout": self = .ainout
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "ainout": self = .ainout
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "ainout": self = .ainout
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .ainout: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .ainout: return "\"ainout\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .ainout: return ".ainout"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum internalEnum: ProtobufEnum {
    public typealias RawValue = Int
    case ainternal // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .ainternal
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .ainternal
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "ainternal": self = .ainternal
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "ainternal": self = .ainternal
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "ainternal": self = .ainternal
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .ainternal: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .ainternal: return "\"ainternal\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .ainternal: return ".ainternal"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum letEnum: ProtobufEnum {
    public typealias RawValue = Int
    case alet // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .alet
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .alet
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "alet": self = .alet
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "alet": self = .alet
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "alet": self = .alet
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .alet: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .alet: return "\"alet\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .alet: return ".alet"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum operatorEnum: ProtobufEnum {
    public typealias RawValue = Int
    case aoperator // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aoperator
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aoperator
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aoperator": self = .aoperator
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aoperator": self = .aoperator
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aoperator": self = .aoperator
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aoperator: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aoperator: return "\"aoperator\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aoperator: return ".aoperator"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum privateEnum: ProtobufEnum {
    public typealias RawValue = Int
    case aprivate // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aprivate
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aprivate
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aprivate": self = .aprivate
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aprivate": self = .aprivate
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aprivate": self = .aprivate
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aprivate: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aprivate: return "\"aprivate\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aprivate: return ".aprivate"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum protocolEnum: ProtobufEnum {
    public typealias RawValue = Int
    case aprotocol // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aprotocol
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aprotocol
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aprotocol": self = .aprotocol
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aprotocol": self = .aprotocol
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aprotocol": self = .aprotocol
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aprotocol: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aprotocol: return "\"aprotocol\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aprotocol: return ".aprotocol"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum publicEnum: ProtobufEnum {
    public typealias RawValue = Int
    case apublic // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .apublic
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .apublic
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "apublic": self = .apublic
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "apublic": self = .apublic
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "apublic": self = .apublic
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .apublic: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .apublic: return "\"apublic\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .apublic: return ".apublic"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum staticEnum: ProtobufEnum {
    public typealias RawValue = Int
    case astatic // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .astatic
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .astatic
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "astatic": self = .astatic
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "astatic": self = .astatic
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "astatic": self = .astatic
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .astatic: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .astatic: return "\"astatic\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .astatic: return ".astatic"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum structEnum: ProtobufEnum {
    public typealias RawValue = Int
    case astruct // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .astruct
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .astruct
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "astruct": self = .astruct
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "astruct": self = .astruct
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "astruct": self = .astruct
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .astruct: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .astruct: return "\"astruct\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .astruct: return ".astruct"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum subscriptEnum: ProtobufEnum {
    public typealias RawValue = Int
    case asubscript // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .asubscript
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .asubscript
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "asubscript": self = .asubscript
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "asubscript": self = .asubscript
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "asubscript": self = .asubscript
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .asubscript: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .asubscript: return "\"asubscript\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .asubscript: return ".asubscript"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum typealiasEnum: ProtobufEnum {
    public typealias RawValue = Int
    case atypealias // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .atypealias
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .atypealias
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "atypealias": self = .atypealias
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "atypealias": self = .atypealias
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "atypealias": self = .atypealias
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .atypealias: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .atypealias: return "\"atypealias\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .atypealias: return ".atypealias"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum varEnum: ProtobufEnum {
    public typealias RawValue = Int
    case avar // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .avar
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .avar
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "avar": self = .avar
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "avar": self = .avar
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "avar": self = .avar
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .avar: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .avar: return "\"avar\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .avar: return ".avar"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum breakEnum: ProtobufEnum {
    public typealias RawValue = Int
    case abreak // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .abreak
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .abreak
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "abreak": self = .abreak
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "abreak": self = .abreak
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "abreak": self = .abreak
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .abreak: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .abreak: return "\"abreak\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .abreak: return ".abreak"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum caseEnum: ProtobufEnum {
    public typealias RawValue = Int
    case acase // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .acase
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .acase
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "acase": self = .acase
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "acase": self = .acase
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "acase": self = .acase
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .acase: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .acase: return "\"acase\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .acase: return ".acase"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum continueEnum: ProtobufEnum {
    public typealias RawValue = Int
    case acontinue // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .acontinue
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .acontinue
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "acontinue": self = .acontinue
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "acontinue": self = .acontinue
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "acontinue": self = .acontinue
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .acontinue: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .acontinue: return "\"acontinue\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .acontinue: return ".acontinue"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum defaultEnum: ProtobufEnum {
    public typealias RawValue = Int
    case adefault // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .adefault
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .adefault
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "adefault": self = .adefault
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "adefault": self = .adefault
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "adefault": self = .adefault
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .adefault: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .adefault: return "\"adefault\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .adefault: return ".adefault"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum deferEnum: ProtobufEnum {
    public typealias RawValue = Int
    case adefer // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .adefer
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .adefer
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "adefer": self = .adefer
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "adefer": self = .adefer
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "adefer": self = .adefer
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .adefer: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .adefer: return "\"adefer\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .adefer: return ".adefer"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum doEnum: ProtobufEnum {
    public typealias RawValue = Int
    case ado // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .ado
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .ado
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "ado": self = .ado
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "ado": self = .ado
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "ado": self = .ado
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .ado: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .ado: return "\"ado\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .ado: return ".ado"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum elseEnum: ProtobufEnum {
    public typealias RawValue = Int
    case aelse // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aelse
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aelse
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aelse": self = .aelse
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aelse": self = .aelse
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aelse": self = .aelse
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aelse: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aelse: return "\"aelse\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aelse: return ".aelse"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum fallthroughEnum: ProtobufEnum {
    public typealias RawValue = Int
    case afallthrough // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .afallthrough
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .afallthrough
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "afallthrough": self = .afallthrough
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "afallthrough": self = .afallthrough
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "afallthrough": self = .afallthrough
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .afallthrough: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .afallthrough: return "\"afallthrough\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .afallthrough: return ".afallthrough"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum forEnum: ProtobufEnum {
    public typealias RawValue = Int
    case afor // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .afor
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .afor
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "afor": self = .afor
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "afor": self = .afor
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "afor": self = .afor
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .afor: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .afor: return "\"afor\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .afor: return ".afor"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum guardEnum: ProtobufEnum {
    public typealias RawValue = Int
    case aguard // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aguard
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aguard
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aguard": self = .aguard
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aguard": self = .aguard
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aguard": self = .aguard
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aguard: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aguard: return "\"aguard\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aguard: return ".aguard"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum ifEnum: ProtobufEnum {
    public typealias RawValue = Int
    case aif // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aif
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aif
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aif": self = .aif
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aif": self = .aif
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aif": self = .aif
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aif: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aif: return "\"aif\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aif: return ".aif"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum inEnum: ProtobufEnum {
    public typealias RawValue = Int
    case ain // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .ain
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .ain
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "ain": self = .ain
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "ain": self = .ain
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "ain": self = .ain
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .ain: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .ain: return "\"ain\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .ain: return ".ain"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum repeatEnum: ProtobufEnum {
    public typealias RawValue = Int
    case arepeat // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .arepeat
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .arepeat
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "arepeat": self = .arepeat
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "arepeat": self = .arepeat
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "arepeat": self = .arepeat
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .arepeat: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .arepeat: return "\"arepeat\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .arepeat: return ".arepeat"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum returnEnum: ProtobufEnum {
    public typealias RawValue = Int
    case areturn // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .areturn
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .areturn
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "areturn": self = .areturn
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "areturn": self = .areturn
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "areturn": self = .areturn
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .areturn: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .areturn: return "\"areturn\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .areturn: return ".areturn"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum switchEnum: ProtobufEnum {
    public typealias RawValue = Int
    case aswitch // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aswitch
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aswitch
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aswitch": self = .aswitch
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aswitch": self = .aswitch
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aswitch": self = .aswitch
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aswitch: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aswitch: return "\"aswitch\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aswitch: return ".aswitch"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum whereEnum: ProtobufEnum {
    public typealias RawValue = Int
    case awhere // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .awhere
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .awhere
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "awhere": self = .awhere
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "awhere": self = .awhere
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "awhere": self = .awhere
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .awhere: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .awhere: return "\"awhere\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .awhere: return ".awhere"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum whileEnum: ProtobufEnum {
    public typealias RawValue = Int
    case awhile // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .awhile
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .awhile
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "awhile": self = .awhile
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "awhile": self = .awhile
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "awhile": self = .awhile
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .awhile: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .awhile: return "\"awhile\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .awhile: return ".awhile"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum asEnum: ProtobufEnum {
    public typealias RawValue = Int
    case aas // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aas
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aas
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aas": self = .aas
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aas": self = .aas
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aas": self = .aas
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aas: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aas: return "\"aas\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aas: return ".aas"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum catchEnum: ProtobufEnum {
    public typealias RawValue = Int
    case acatch // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .acatch
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .acatch
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "acatch": self = .acatch
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "acatch": self = .acatch
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "acatch": self = .acatch
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .acatch: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .acatch: return "\"acatch\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .acatch: return ".acatch"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum dynamicTypeEnum: ProtobufEnum {
    public typealias RawValue = Int
    case adynamicType // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .adynamicType
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .adynamicType
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "adynamicType": self = .adynamicType
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "adynamicType": self = .adynamicType
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "adynamicType": self = .adynamicType
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .adynamicType: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .adynamicType: return "\"adynamicType\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .adynamicType: return ".adynamicType"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum falseEnum: ProtobufEnum {
    public typealias RawValue = Int
    case afalse // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .afalse
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .afalse
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "afalse": self = .afalse
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "afalse": self = .afalse
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "afalse": self = .afalse
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .afalse: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .afalse: return "\"afalse\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .afalse: return ".afalse"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum isEnum: ProtobufEnum {
    public typealias RawValue = Int
    case ais // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .ais
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .ais
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "ais": self = .ais
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "ais": self = .ais
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "ais": self = .ais
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .ais: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .ais: return "\"ais\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .ais: return ".ais"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum nilEnum: ProtobufEnum {
    public typealias RawValue = Int
    case anil // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .anil
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .anil
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "anil": self = .anil
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "anil": self = .anil
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "anil": self = .anil
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .anil: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .anil: return "\"anil\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .anil: return ".anil"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum rethrowsEnum: ProtobufEnum {
    public typealias RawValue = Int
    case arethrows // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .arethrows
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .arethrows
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "arethrows": self = .arethrows
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "arethrows": self = .arethrows
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "arethrows": self = .arethrows
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .arethrows: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .arethrows: return "\"arethrows\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .arethrows: return ".arethrows"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum superEnum: ProtobufEnum {
    public typealias RawValue = Int
    case asuper // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .asuper
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .asuper
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "asuper": self = .asuper
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "asuper": self = .asuper
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "asuper": self = .asuper
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .asuper: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .asuper: return "\"asuper\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .asuper: return ".asuper"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum selfEnum: ProtobufEnum {
    public typealias RawValue = Int
    case aself // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aself
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aself
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aself": self = .aself
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aself": self = .aself
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aself": self = .aself
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aself: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aself: return "\"aself\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aself: return ".aself"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum throwEnum: ProtobufEnum {
    public typealias RawValue = Int
    case athrow // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .athrow
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .athrow
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "athrow": self = .athrow
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "athrow": self = .athrow
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "athrow": self = .athrow
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .athrow: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .athrow: return "\"athrow\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .athrow: return ".athrow"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum throwsEnum: ProtobufEnum {
    public typealias RawValue = Int
    case athrows // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .athrows
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .athrows
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "athrows": self = .athrows
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "athrows": self = .athrows
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "athrows": self = .athrows
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .athrows: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .athrows: return "\"athrows\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .athrows: return ".athrows"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum trueEnum: ProtobufEnum {
    public typealias RawValue = Int
    case atrue // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .atrue
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .atrue
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "atrue": self = .atrue
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "atrue": self = .atrue
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "atrue": self = .atrue
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .atrue: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .atrue: return "\"atrue\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .atrue: return ".atrue"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum tryEnum: ProtobufEnum {
    public typealias RawValue = Int
    case atry // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .atry
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .atry
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "atry": self = .atry
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "atry": self = .atry
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "atry": self = .atry
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .atry: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .atry: return "\"atry\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .atry: return ".atry"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum __COLUMN__Enum: ProtobufEnum {
    public typealias RawValue = Int
    case a_Column__ // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .a_Column__
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .a_Column__
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "a_Column__": self = .a_Column__
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "a__COLUMN__": self = .a_Column__
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "a__COLUMN__": self = .a_Column__
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .a_Column__: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .a_Column__: return "\"a__COLUMN__\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .a_Column__: return ".a_Column__"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum __FILE__Enum: ProtobufEnum {
    public typealias RawValue = Int
    case a_File__ // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .a_File__
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .a_File__
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "a_File__": self = .a_File__
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "a__FILE__": self = .a_File__
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "a__FILE__": self = .a_File__
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .a_File__: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .a_File__: return "\"a__FILE__\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .a_File__: return ".a_File__"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum __FUNCTION__Enum: ProtobufEnum {
    public typealias RawValue = Int
    case a_Function__ // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .a_Function__
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .a_Function__
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "a_Function__": self = .a_Function__
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "a__FUNCTION__": self = .a_Function__
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "a__FUNCTION__": self = .a_Function__
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .a_Function__: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .a_Function__: return "\"a__FUNCTION__\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .a_Function__: return ".a_Function__"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum __LINE__Enum: ProtobufEnum {
    public typealias RawValue = Int
    case a_Line__ // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .a_Line__
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .a_Line__
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "a_Line__": self = .a_Line__
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "a__LINE__": self = .a_Line__
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "a__LINE__": self = .a_Line__
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .a_Line__: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .a_Line__: return "\"a__LINE__\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .a_Line__: return ".a_Line__"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum _Enum: ProtobufEnum {
    public typealias RawValue = Int
    case a_ // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .a_
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .a_
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "a_": self = .a_
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "a_": self = .a_
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "a_": self = .a_
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .a_: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .a_: return "\"a_\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .a_: return ".a_"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum __Enum: ProtobufEnum {
    public typealias RawValue = Int
    case a__ // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .a__
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .a__
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "a__": self = .a__
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "a__": self = .a__
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "a__": self = .a__
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .a__: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .a__: return "\"a__\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .a__: return ".a__"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum associativity: ProtobufEnum {
    public typealias RawValue = Int
    case aassociativity // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aassociativity
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aassociativity
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aassociativity": self = .aassociativity
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aassociativity": self = .aassociativity
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aassociativity": self = .aassociativity
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aassociativity: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aassociativity: return "\"aassociativity\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aassociativity: return ".aassociativity"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum convenience: ProtobufEnum {
    public typealias RawValue = Int
    case aconvenience // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aconvenience
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aconvenience
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aconvenience": self = .aconvenience
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aconvenience": self = .aconvenience
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aconvenience": self = .aconvenience
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aconvenience: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aconvenience: return "\"aconvenience\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aconvenience: return ".aconvenience"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum dynamic: ProtobufEnum {
    public typealias RawValue = Int
    case adynamic // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .adynamic
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .adynamic
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "adynamic": self = .adynamic
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "adynamic": self = .adynamic
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "adynamic": self = .adynamic
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .adynamic: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .adynamic: return "\"adynamic\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .adynamic: return ".adynamic"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum didSet: ProtobufEnum {
    public typealias RawValue = Int
    case adidSet // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .adidSet
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .adidSet
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "adidSet": self = .adidSet
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "adidSet": self = .adidSet
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "adidSet": self = .adidSet
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .adidSet: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .adidSet: return "\"adidSet\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .adidSet: return ".adidSet"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum final: ProtobufEnum {
    public typealias RawValue = Int
    case afinal // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .afinal
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .afinal
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "afinal": self = .afinal
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "afinal": self = .afinal
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "afinal": self = .afinal
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .afinal: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .afinal: return "\"afinal\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .afinal: return ".afinal"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum get: ProtobufEnum {
    public typealias RawValue = Int
    case aget // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aget
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aget
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aget": self = .aget
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aget": self = .aget
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aget": self = .aget
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aget: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aget: return "\"aget\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aget: return ".aget"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum infix: ProtobufEnum {
    public typealias RawValue = Int
    case ainfix // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .ainfix
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .ainfix
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "ainfix": self = .ainfix
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "ainfix": self = .ainfix
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "ainfix": self = .ainfix
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .ainfix: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .ainfix: return "\"ainfix\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .ainfix: return ".ainfix"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum indirect: ProtobufEnum {
    public typealias RawValue = Int
    case aindirect // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aindirect
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aindirect
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aindirect": self = .aindirect
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aindirect": self = .aindirect
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aindirect": self = .aindirect
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aindirect: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aindirect: return "\"aindirect\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aindirect: return ".aindirect"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum lazy: ProtobufEnum {
    public typealias RawValue = Int
    case alazy // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .alazy
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .alazy
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "alazy": self = .alazy
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "alazy": self = .alazy
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "alazy": self = .alazy
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .alazy: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .alazy: return "\"alazy\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .alazy: return ".alazy"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum left: ProtobufEnum {
    public typealias RawValue = Int
    case aleft // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aleft
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aleft
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aleft": self = .aleft
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aleft": self = .aleft
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aleft": self = .aleft
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aleft: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aleft: return "\"aleft\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aleft: return ".aleft"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum mutating: ProtobufEnum {
    public typealias RawValue = Int
    case amutating // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .amutating
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .amutating
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "amutating": self = .amutating
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "amutating": self = .amutating
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "amutating": self = .amutating
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .amutating: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .amutating: return "\"amutating\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .amutating: return ".amutating"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum none: ProtobufEnum {
    public typealias RawValue = Int
    case anone // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .anone
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .anone
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "anone": self = .anone
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "anone": self = .anone
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "anone": self = .anone
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .anone: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .anone: return "\"anone\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .anone: return ".anone"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum nonmutating: ProtobufEnum {
    public typealias RawValue = Int
    case anonmutating // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .anonmutating
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .anonmutating
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "anonmutating": self = .anonmutating
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "anonmutating": self = .anonmutating
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "anonmutating": self = .anonmutating
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .anonmutating: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .anonmutating: return "\"anonmutating\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .anonmutating: return ".anonmutating"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum optional: ProtobufEnum {
    public typealias RawValue = Int
    case aoptional // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aoptional
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aoptional
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aoptional": self = .aoptional
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aoptional": self = .aoptional
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aoptional": self = .aoptional
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aoptional: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aoptional: return "\"aoptional\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aoptional: return ".aoptional"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum override: ProtobufEnum {
    public typealias RawValue = Int
    case aoverride // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aoverride
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aoverride
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aoverride": self = .aoverride
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aoverride": self = .aoverride
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aoverride": self = .aoverride
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aoverride: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aoverride: return "\"aoverride\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aoverride: return ".aoverride"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum postfix: ProtobufEnum {
    public typealias RawValue = Int
    case apostfix // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .apostfix
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .apostfix
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "apostfix": self = .apostfix
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "apostfix": self = .apostfix
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "apostfix": self = .apostfix
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .apostfix: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .apostfix: return "\"apostfix\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .apostfix: return ".apostfix"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum precedence: ProtobufEnum {
    public typealias RawValue = Int
    case aprecedence // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aprecedence
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aprecedence
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aprecedence": self = .aprecedence
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aprecedence": self = .aprecedence
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aprecedence": self = .aprecedence
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aprecedence: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aprecedence: return "\"aprecedence\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aprecedence: return ".aprecedence"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum prefix: ProtobufEnum {
    public typealias RawValue = Int
    case aprefix // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aprefix
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aprefix
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aprefix": self = .aprefix
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aprefix": self = .aprefix
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aprefix": self = .aprefix
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aprefix: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aprefix: return "\"aprefix\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aprefix: return ".aprefix"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum required: ProtobufEnum {
    public typealias RawValue = Int
    case arequired // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .arequired
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .arequired
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "arequired": self = .arequired
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "arequired": self = .arequired
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "arequired": self = .arequired
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .arequired: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .arequired: return "\"arequired\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .arequired: return ".arequired"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum right: ProtobufEnum {
    public typealias RawValue = Int
    case aright // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aright
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aright
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aright": self = .aright
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aright": self = .aright
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aright": self = .aright
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aright: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aright: return "\"aright\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aright: return ".aright"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum set: ProtobufEnum {
    public typealias RawValue = Int
    case aset // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aset
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aset
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aset": self = .aset
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aset": self = .aset
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aset": self = .aset
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aset: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aset: return "\"aset\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aset: return ".aset"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum TypeEnum: ProtobufEnum {
    public typealias RawValue = Int
    case aType // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aType
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aType
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aType": self = .aType
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aType": self = .aType
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aType": self = .aType
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aType: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aType: return "\"aType\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aType: return ".aType"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum unowned: ProtobufEnum {
    public typealias RawValue = Int
    case aunowned // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aunowned
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aunowned
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aunowned": self = .aunowned
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aunowned": self = .aunowned
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aunowned": self = .aunowned
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aunowned: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aunowned: return "\"aunowned\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aunowned: return ".aunowned"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum weak: ProtobufEnum {
    public typealias RawValue = Int
    case aweak // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aweak
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aweak
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aweak": self = .aweak
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aweak": self = .aweak
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aweak": self = .aweak
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aweak: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aweak: return "\"aweak\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aweak: return ".aweak"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum willSet: ProtobufEnum {
    public typealias RawValue = Int
    case awillSet // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .awillSet
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .awillSet
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "awillSet": self = .awillSet
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "awillSet": self = .awillSet
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "awillSet": self = .awillSet
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .awillSet: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .awillSet: return "\"awillSet\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .awillSet: return ".awillSet"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum id: ProtobufEnum {
    public typealias RawValue = Int
    case aid // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aid
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aid
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aid": self = .aid
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aid": self = .aid
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aid": self = .aid
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aid: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aid: return "\"aid\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aid: return ".aid"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum _cmd: ProtobufEnum {
    public typealias RawValue = Int
    case aCmd // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aCmd
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aCmd
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aCmd": self = .aCmd
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "a_cmd": self = .aCmd
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "a_cmd": self = .aCmd
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aCmd: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aCmd: return "\"a_cmd\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aCmd: return ".aCmd"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum out: ProtobufEnum {
    public typealias RawValue = Int
    case aout // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aout
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aout
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aout": self = .aout
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aout": self = .aout
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aout": self = .aout
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aout: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aout: return "\"aout\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aout: return ".aout"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum bycopy: ProtobufEnum {
    public typealias RawValue = Int
    case abycopy // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .abycopy
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .abycopy
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "abycopy": self = .abycopy
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "abycopy": self = .abycopy
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "abycopy": self = .abycopy
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .abycopy: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .abycopy: return "\"abycopy\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .abycopy: return ".abycopy"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum byref: ProtobufEnum {
    public typealias RawValue = Int
    case abyref // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .abyref
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .abyref
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "abyref": self = .abyref
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "abyref": self = .abyref
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "abyref": self = .abyref
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .abyref: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .abyref: return "\"abyref\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .abyref: return ".abyref"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum oneway: ProtobufEnum {
    public typealias RawValue = Int
    case aoneway // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aoneway
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aoneway
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aoneway": self = .aoneway
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aoneway": self = .aoneway
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aoneway": self = .aoneway
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aoneway: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aoneway: return "\"aoneway\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aoneway: return ".aoneway"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum and: ProtobufEnum {
    public typealias RawValue = Int
    case aand // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aand
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aand
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aand": self = .aand
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aand": self = .aand
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aand": self = .aand
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aand: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aand: return "\"aand\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aand: return ".aand"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum and_eq: ProtobufEnum {
    public typealias RawValue = Int
    case aandEq // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aandEq
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aandEq
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aandEq": self = .aandEq
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aand_eq": self = .aandEq
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aand_eq": self = .aandEq
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aandEq: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aandEq: return "\"aand_eq\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aandEq: return ".aandEq"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum alignas: ProtobufEnum {
    public typealias RawValue = Int
    case aalignas // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aalignas
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aalignas
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aalignas": self = .aalignas
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aalignas": self = .aalignas
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aalignas": self = .aalignas
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aalignas: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aalignas: return "\"aalignas\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aalignas: return ".aalignas"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum alignof: ProtobufEnum {
    public typealias RawValue = Int
    case aalignof // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aalignof
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aalignof
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aalignof": self = .aalignof
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aalignof": self = .aalignof
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aalignof": self = .aalignof
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aalignof: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aalignof: return "\"aalignof\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aalignof: return ".aalignof"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum asm: ProtobufEnum {
    public typealias RawValue = Int
    case aasm // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aasm
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aasm
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aasm": self = .aasm
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aasm": self = .aasm
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aasm": self = .aasm
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aasm: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aasm: return "\"aasm\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aasm: return ".aasm"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum auto: ProtobufEnum {
    public typealias RawValue = Int
    case aauto // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aauto
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aauto
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aauto": self = .aauto
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aauto": self = .aauto
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aauto": self = .aauto
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aauto: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aauto: return "\"aauto\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aauto: return ".aauto"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum bitand: ProtobufEnum {
    public typealias RawValue = Int
    case abitand // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .abitand
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .abitand
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "abitand": self = .abitand
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "abitand": self = .abitand
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "abitand": self = .abitand
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .abitand: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .abitand: return "\"abitand\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .abitand: return ".abitand"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum bitor: ProtobufEnum {
    public typealias RawValue = Int
    case abitor // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .abitor
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .abitor
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "abitor": self = .abitor
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "abitor": self = .abitor
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "abitor": self = .abitor
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .abitor: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .abitor: return "\"abitor\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .abitor: return ".abitor"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum bool: ProtobufEnum {
    public typealias RawValue = Int
    case abool // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .abool
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .abool
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "abool": self = .abool
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "abool": self = .abool
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "abool": self = .abool
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .abool: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .abool: return "\"abool\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .abool: return ".abool"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum char: ProtobufEnum {
    public typealias RawValue = Int
    case achar // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .achar
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .achar
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "achar": self = .achar
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "achar": self = .achar
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "achar": self = .achar
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .achar: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .achar: return "\"achar\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .achar: return ".achar"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum char16_t: ProtobufEnum {
    public typealias RawValue = Int
    case achar16T // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .achar16T
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .achar16T
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "achar16T": self = .achar16T
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "achar16_t": self = .achar16T
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "achar16_t": self = .achar16T
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .achar16T: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .achar16T: return "\"achar16_t\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .achar16T: return ".achar16T"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum char32_t: ProtobufEnum {
    public typealias RawValue = Int
    case achar32T // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .achar32T
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .achar32T
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "achar32T": self = .achar32T
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "achar32_t": self = .achar32T
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "achar32_t": self = .achar32T
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .achar32T: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .achar32T: return "\"achar32_t\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .achar32T: return ".achar32T"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum compl: ProtobufEnum {
    public typealias RawValue = Int
    case acompl // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .acompl
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .acompl
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "acompl": self = .acompl
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "acompl": self = .acompl
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "acompl": self = .acompl
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .acompl: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .acompl: return "\"acompl\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .acompl: return ".acompl"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum const: ProtobufEnum {
    public typealias RawValue = Int
    case aconst // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aconst
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aconst
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aconst": self = .aconst
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aconst": self = .aconst
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aconst": self = .aconst
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aconst: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aconst: return "\"aconst\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aconst: return ".aconst"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum constexpr: ProtobufEnum {
    public typealias RawValue = Int
    case aconstexpr // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aconstexpr
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aconstexpr
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aconstexpr": self = .aconstexpr
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aconstexpr": self = .aconstexpr
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aconstexpr": self = .aconstexpr
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aconstexpr: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aconstexpr: return "\"aconstexpr\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aconstexpr: return ".aconstexpr"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum const_cast: ProtobufEnum {
    public typealias RawValue = Int
    case aconstCast // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aconstCast
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aconstCast
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aconstCast": self = .aconstCast
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aconst_cast": self = .aconstCast
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aconst_cast": self = .aconstCast
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aconstCast: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aconstCast: return "\"aconst_cast\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aconstCast: return ".aconstCast"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum decltype: ProtobufEnum {
    public typealias RawValue = Int
    case adecltype // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .adecltype
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .adecltype
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "adecltype": self = .adecltype
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "adecltype": self = .adecltype
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "adecltype": self = .adecltype
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .adecltype: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .adecltype: return "\"adecltype\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .adecltype: return ".adecltype"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum delete: ProtobufEnum {
    public typealias RawValue = Int
    case adelete // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .adelete
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .adelete
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "adelete": self = .adelete
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "adelete": self = .adelete
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "adelete": self = .adelete
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .adelete: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .adelete: return "\"adelete\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .adelete: return ".adelete"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum dynamic_cast: ProtobufEnum {
    public typealias RawValue = Int
    case adynamicCast // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .adynamicCast
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .adynamicCast
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "adynamicCast": self = .adynamicCast
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "adynamic_cast": self = .adynamicCast
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "adynamic_cast": self = .adynamicCast
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .adynamicCast: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .adynamicCast: return "\"adynamic_cast\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .adynamicCast: return ".adynamicCast"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum explicit: ProtobufEnum {
    public typealias RawValue = Int
    case aexplicit // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aexplicit
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aexplicit
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aexplicit": self = .aexplicit
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aexplicit": self = .aexplicit
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aexplicit": self = .aexplicit
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aexplicit: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aexplicit: return "\"aexplicit\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aexplicit: return ".aexplicit"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum export: ProtobufEnum {
    public typealias RawValue = Int
    case aexport // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aexport
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aexport
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aexport": self = .aexport
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aexport": self = .aexport
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aexport": self = .aexport
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aexport: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aexport: return "\"aexport\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aexport: return ".aexport"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum extern: ProtobufEnum {
    public typealias RawValue = Int
    case aextern // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aextern
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aextern
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aextern": self = .aextern
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aextern": self = .aextern
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aextern": self = .aextern
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aextern: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aextern: return "\"aextern\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aextern: return ".aextern"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum friend: ProtobufEnum {
    public typealias RawValue = Int
    case afriend // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .afriend
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .afriend
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "afriend": self = .afriend
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "afriend": self = .afriend
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "afriend": self = .afriend
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .afriend: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .afriend: return "\"afriend\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .afriend: return ".afriend"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum goto: ProtobufEnum {
    public typealias RawValue = Int
    case agoto // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .agoto
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .agoto
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "agoto": self = .agoto
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "agoto": self = .agoto
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "agoto": self = .agoto
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .agoto: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .agoto: return "\"agoto\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .agoto: return ".agoto"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum inline: ProtobufEnum {
    public typealias RawValue = Int
    case ainline // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .ainline
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .ainline
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "ainline": self = .ainline
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "ainline": self = .ainline
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "ainline": self = .ainline
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .ainline: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .ainline: return "\"ainline\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .ainline: return ".ainline"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum long: ProtobufEnum {
    public typealias RawValue = Int
    case along // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .along
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .along
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "along": self = .along
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "along": self = .along
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "along": self = .along
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .along: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .along: return "\"along\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .along: return ".along"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum mutable: ProtobufEnum {
    public typealias RawValue = Int
    case amutable // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .amutable
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .amutable
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "amutable": self = .amutable
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "amutable": self = .amutable
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "amutable": self = .amutable
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .amutable: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .amutable: return "\"amutable\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .amutable: return ".amutable"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum namespace: ProtobufEnum {
    public typealias RawValue = Int
    case anamespace // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .anamespace
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .anamespace
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "anamespace": self = .anamespace
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "anamespace": self = .anamespace
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "anamespace": self = .anamespace
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .anamespace: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .anamespace: return "\"anamespace\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .anamespace: return ".anamespace"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum new: ProtobufEnum {
    public typealias RawValue = Int
    case anew // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .anew
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .anew
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "anew": self = .anew
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "anew": self = .anew
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "anew": self = .anew
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .anew: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .anew: return "\"anew\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .anew: return ".anew"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum noexcept: ProtobufEnum {
    public typealias RawValue = Int
    case anoexcept // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .anoexcept
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .anoexcept
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "anoexcept": self = .anoexcept
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "anoexcept": self = .anoexcept
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "anoexcept": self = .anoexcept
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .anoexcept: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .anoexcept: return "\"anoexcept\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .anoexcept: return ".anoexcept"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum not: ProtobufEnum {
    public typealias RawValue = Int
    case anot // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .anot
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .anot
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "anot": self = .anot
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "anot": self = .anot
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "anot": self = .anot
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .anot: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .anot: return "\"anot\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .anot: return ".anot"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum not_eq: ProtobufEnum {
    public typealias RawValue = Int
    case anotEq // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .anotEq
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .anotEq
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "anotEq": self = .anotEq
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "anot_eq": self = .anotEq
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "anot_eq": self = .anotEq
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .anotEq: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .anotEq: return "\"anot_eq\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .anotEq: return ".anotEq"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum nullptr: ProtobufEnum {
    public typealias RawValue = Int
    case anullptr // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .anullptr
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .anullptr
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "anullptr": self = .anullptr
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "anullptr": self = .anullptr
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "anullptr": self = .anullptr
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .anullptr: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .anullptr: return "\"anullptr\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .anullptr: return ".anullptr"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum or: ProtobufEnum {
    public typealias RawValue = Int
    case aor // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aor
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aor
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aor": self = .aor
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aor": self = .aor
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aor": self = .aor
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aor: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aor: return "\"aor\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aor: return ".aor"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum or_eq: ProtobufEnum {
    public typealias RawValue = Int
    case aorEq // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aorEq
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aorEq
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aorEq": self = .aorEq
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aor_eq": self = .aorEq
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aor_eq": self = .aorEq
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aorEq: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aorEq: return "\"aor_eq\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aorEq: return ".aorEq"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum protected: ProtobufEnum {
    public typealias RawValue = Int
    case aprotected // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aprotected
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aprotected
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aprotected": self = .aprotected
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aprotected": self = .aprotected
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aprotected": self = .aprotected
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aprotected: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aprotected: return "\"aprotected\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aprotected: return ".aprotected"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum register: ProtobufEnum {
    public typealias RawValue = Int
    case aregister // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aregister
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aregister
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aregister": self = .aregister
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aregister": self = .aregister
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aregister": self = .aregister
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aregister: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aregister: return "\"aregister\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aregister: return ".aregister"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum reinterpret_cast: ProtobufEnum {
    public typealias RawValue = Int
    case areinterpretCast // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .areinterpretCast
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .areinterpretCast
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "areinterpretCast": self = .areinterpretCast
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "areinterpret_cast": self = .areinterpretCast
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "areinterpret_cast": self = .areinterpretCast
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .areinterpretCast: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .areinterpretCast: return "\"areinterpret_cast\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .areinterpretCast: return ".areinterpretCast"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum short: ProtobufEnum {
    public typealias RawValue = Int
    case ashort // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .ashort
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .ashort
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "ashort": self = .ashort
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "ashort": self = .ashort
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "ashort": self = .ashort
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .ashort: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .ashort: return "\"ashort\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .ashort: return ".ashort"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum signed: ProtobufEnum {
    public typealias RawValue = Int
    case asigned // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .asigned
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .asigned
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "asigned": self = .asigned
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "asigned": self = .asigned
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "asigned": self = .asigned
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .asigned: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .asigned: return "\"asigned\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .asigned: return ".asigned"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum sizeof: ProtobufEnum {
    public typealias RawValue = Int
    case asizeof // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .asizeof
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .asizeof
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "asizeof": self = .asizeof
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "asizeof": self = .asizeof
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "asizeof": self = .asizeof
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .asizeof: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .asizeof: return "\"asizeof\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .asizeof: return ".asizeof"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum static_assert: ProtobufEnum {
    public typealias RawValue = Int
    case astaticAssert // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .astaticAssert
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .astaticAssert
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "astaticAssert": self = .astaticAssert
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "astatic_assert": self = .astaticAssert
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "astatic_assert": self = .astaticAssert
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .astaticAssert: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .astaticAssert: return "\"astatic_assert\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .astaticAssert: return ".astaticAssert"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum static_cast: ProtobufEnum {
    public typealias RawValue = Int
    case astaticCast // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .astaticCast
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .astaticCast
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "astaticCast": self = .astaticCast
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "astatic_cast": self = .astaticCast
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "astatic_cast": self = .astaticCast
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .astaticCast: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .astaticCast: return "\"astatic_cast\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .astaticCast: return ".astaticCast"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum template: ProtobufEnum {
    public typealias RawValue = Int
    case atemplate // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .atemplate
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .atemplate
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "atemplate": self = .atemplate
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "atemplate": self = .atemplate
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "atemplate": self = .atemplate
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .atemplate: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .atemplate: return "\"atemplate\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .atemplate: return ".atemplate"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum this: ProtobufEnum {
    public typealias RawValue = Int
    case athis // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .athis
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .athis
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "athis": self = .athis
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "athis": self = .athis
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "athis": self = .athis
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .athis: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .athis: return "\"athis\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .athis: return ".athis"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum thread_local: ProtobufEnum {
    public typealias RawValue = Int
    case athreadLocal // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .athreadLocal
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .athreadLocal
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "athreadLocal": self = .athreadLocal
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "athread_local": self = .athreadLocal
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "athread_local": self = .athreadLocal
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .athreadLocal: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .athreadLocal: return "\"athread_local\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .athreadLocal: return ".athreadLocal"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum typedef: ProtobufEnum {
    public typealias RawValue = Int
    case atypedef // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .atypedef
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .atypedef
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "atypedef": self = .atypedef
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "atypedef": self = .atypedef
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "atypedef": self = .atypedef
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .atypedef: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .atypedef: return "\"atypedef\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .atypedef: return ".atypedef"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum typeid: ProtobufEnum {
    public typealias RawValue = Int
    case atypeid // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .atypeid
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .atypeid
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "atypeid": self = .atypeid
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "atypeid": self = .atypeid
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "atypeid": self = .atypeid
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .atypeid: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .atypeid: return "\"atypeid\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .atypeid: return ".atypeid"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum typename: ProtobufEnum {
    public typealias RawValue = Int
    case atypename // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .atypename
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .atypename
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "atypename": self = .atypename
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "atypename": self = .atypename
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "atypename": self = .atypename
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .atypename: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .atypename: return "\"atypename\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .atypename: return ".atypename"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum union: ProtobufEnum {
    public typealias RawValue = Int
    case aunion // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aunion
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aunion
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aunion": self = .aunion
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aunion": self = .aunion
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aunion": self = .aunion
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aunion: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aunion: return "\"aunion\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aunion: return ".aunion"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum unsigned: ProtobufEnum {
    public typealias RawValue = Int
    case aunsigned // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aunsigned
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aunsigned
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aunsigned": self = .aunsigned
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aunsigned": self = .aunsigned
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aunsigned": self = .aunsigned
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aunsigned: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aunsigned: return "\"aunsigned\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aunsigned: return ".aunsigned"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum using: ProtobufEnum {
    public typealias RawValue = Int
    case ausing // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .ausing
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .ausing
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "ausing": self = .ausing
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "ausing": self = .ausing
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "ausing": self = .ausing
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .ausing: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .ausing: return "\"ausing\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .ausing: return ".ausing"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum virtual: ProtobufEnum {
    public typealias RawValue = Int
    case avirtual // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .avirtual
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .avirtual
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "avirtual": self = .avirtual
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "avirtual": self = .avirtual
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "avirtual": self = .avirtual
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .avirtual: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .avirtual: return "\"avirtual\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .avirtual: return ".avirtual"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum void: ProtobufEnum {
    public typealias RawValue = Int
    case avoid // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .avoid
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .avoid
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "avoid": self = .avoid
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "avoid": self = .avoid
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "avoid": self = .avoid
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .avoid: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .avoid: return "\"avoid\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .avoid: return ".avoid"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum volatile: ProtobufEnum {
    public typealias RawValue = Int
    case avolatile // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .avolatile
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .avolatile
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "avolatile": self = .avolatile
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "avolatile": self = .avolatile
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "avolatile": self = .avolatile
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .avolatile: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .avolatile: return "\"avolatile\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .avolatile: return ".avolatile"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum wchar_t: ProtobufEnum {
    public typealias RawValue = Int
    case awcharT // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .awcharT
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .awcharT
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "awcharT": self = .awcharT
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "awchar_t": self = .awcharT
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "awchar_t": self = .awcharT
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .awcharT: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .awcharT: return "\"awchar_t\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .awcharT: return ".awcharT"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum xor: ProtobufEnum {
    public typealias RawValue = Int
    case axor // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .axor
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .axor
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "axor": self = .axor
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "axor": self = .axor
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "axor": self = .axor
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .axor: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .axor: return "\"axor\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .axor: return ".axor"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum xor_eq: ProtobufEnum {
    public typealias RawValue = Int
    case axorEq // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .axorEq
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .axorEq
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "axorEq": self = .axorEq
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "axor_eq": self = .axorEq
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "axor_eq": self = .axorEq
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .axorEq: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .axorEq: return "\"axor_eq\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .axorEq: return ".axorEq"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum restrict: ProtobufEnum {
    public typealias RawValue = Int
    case arestrict // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .arestrict
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .arestrict
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "arestrict": self = .arestrict
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "arestrict": self = .arestrict
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "arestrict": self = .arestrict
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .arestrict: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .arestrict: return "\"arestrict\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .arestrict: return ".arestrict"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum Category: ProtobufEnum {
    public typealias RawValue = Int
    case aCategory // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aCategory
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aCategory
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aCategory": self = .aCategory
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aCategory": self = .aCategory
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aCategory": self = .aCategory
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aCategory: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aCategory: return "\"aCategory\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aCategory: return ".aCategory"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum Ivar: ProtobufEnum {
    public typealias RawValue = Int
    case aIvar // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aIvar
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aIvar
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aIvar": self = .aIvar
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aIvar": self = .aIvar
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aIvar": self = .aIvar
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aIvar: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aIvar: return "\"aIvar\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aIvar: return ".aIvar"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum Method: ProtobufEnum {
    public typealias RawValue = Int
    case aMethod // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aMethod
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aMethod
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aMethod": self = .aMethod
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aMethod": self = .aMethod
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aMethod": self = .aMethod
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aMethod: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aMethod: return "\"aMethod\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aMethod: return ".aMethod"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum finalize: ProtobufEnum {
    public typealias RawValue = Int
    case afinalize // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .afinalize
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .afinalize
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "afinalize": self = .afinalize
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "afinalize": self = .afinalize
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "afinalize": self = .afinalize
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .afinalize: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .afinalize: return "\"afinalize\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .afinalize: return ".afinalize"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum hash: ProtobufEnum {
    public typealias RawValue = Int
    case ahash // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .ahash
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .ahash
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "ahash": self = .ahash
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "ahash": self = .ahash
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "ahash": self = .ahash
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .ahash: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .ahash: return "\"ahash\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .ahash: return ".ahash"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum dealloc: ProtobufEnum {
    public typealias RawValue = Int
    case adealloc // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .adealloc
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .adealloc
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "adealloc": self = .adealloc
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "adealloc": self = .adealloc
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "adealloc": self = .adealloc
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .adealloc: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .adealloc: return "\"adealloc\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .adealloc: return ".adealloc"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum superclass: ProtobufEnum {
    public typealias RawValue = Int
    case asuperclass // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .asuperclass
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .asuperclass
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "asuperclass": self = .asuperclass
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "asuperclass": self = .asuperclass
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "asuperclass": self = .asuperclass
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .asuperclass: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .asuperclass: return "\"asuperclass\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .asuperclass: return ".asuperclass"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum retain: ProtobufEnum {
    public typealias RawValue = Int
    case aretain // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aretain
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aretain
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aretain": self = .aretain
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aretain": self = .aretain
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aretain": self = .aretain
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aretain: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aretain: return "\"aretain\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aretain: return ".aretain"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum release: ProtobufEnum {
    public typealias RawValue = Int
    case arelease // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .arelease
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .arelease
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "arelease": self = .arelease
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "arelease": self = .arelease
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "arelease": self = .arelease
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .arelease: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .arelease: return "\"arelease\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .arelease: return ".arelease"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum autorelease: ProtobufEnum {
    public typealias RawValue = Int
    case aautorelease // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aautorelease
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aautorelease
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aautorelease": self = .aautorelease
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aautorelease": self = .aautorelease
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aautorelease": self = .aautorelease
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aautorelease: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aautorelease: return "\"aautorelease\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aautorelease: return ".aautorelease"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum retainCount: ProtobufEnum {
    public typealias RawValue = Int
    case aretainCount // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aretainCount
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aretainCount
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aretainCount": self = .aretainCount
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aretainCount": self = .aretainCount
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aretainCount": self = .aretainCount
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aretainCount: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aretainCount: return "\"aretainCount\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aretainCount: return ".aretainCount"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum zone: ProtobufEnum {
    public typealias RawValue = Int
    case azone // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .azone
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .azone
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "azone": self = .azone
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "azone": self = .azone
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "azone": self = .azone
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .azone: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .azone: return "\"azone\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .azone: return ".azone"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum isProxy: ProtobufEnum {
    public typealias RawValue = Int
    case aisProxy // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aisProxy
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aisProxy
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aisProxy": self = .aisProxy
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aisProxy": self = .aisProxy
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aisProxy": self = .aisProxy
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aisProxy: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aisProxy: return "\"aisProxy\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aisProxy: return ".aisProxy"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum copy: ProtobufEnum {
    public typealias RawValue = Int
    case acopy // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .acopy
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .acopy
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "acopy": self = .acopy
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "acopy": self = .acopy
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "acopy": self = .acopy
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .acopy: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .acopy: return "\"acopy\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .acopy: return ".acopy"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum mutableCopy: ProtobufEnum {
    public typealias RawValue = Int
    case amutableCopy // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .amutableCopy
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .amutableCopy
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "amutableCopy": self = .amutableCopy
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "amutableCopy": self = .amutableCopy
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "amutableCopy": self = .amutableCopy
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .amutableCopy: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .amutableCopy: return "\"amutableCopy\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .amutableCopy: return ".amutableCopy"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum classForCoder: ProtobufEnum {
    public typealias RawValue = Int
    case aclassForCoder // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aclassForCoder
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aclassForCoder
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aclassForCoder": self = .aclassForCoder
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aclassForCoder": self = .aclassForCoder
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aclassForCoder": self = .aclassForCoder
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aclassForCoder: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aclassForCoder: return "\"aclassForCoder\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aclassForCoder: return ".aclassForCoder"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum clear: ProtobufEnum {
    public typealias RawValue = Int
    case aclear // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aclear
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aclear
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aclear": self = .aclear
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aclear": self = .aclear
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aclear": self = .aclear
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aclear: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aclear: return "\"aclear\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aclear: return ".aclear"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum data: ProtobufEnum {
    public typealias RawValue = Int
    case adata // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .adata
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .adata
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "adata": self = .adata
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "adata": self = .adata
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "adata": self = .adata
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .adata: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .adata: return "\"adata\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .adata: return ".adata"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum delimitedData: ProtobufEnum {
    public typealias RawValue = Int
    case adelimitedData // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .adelimitedData
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .adelimitedData
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "adelimitedData": self = .adelimitedData
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "adelimitedData": self = .adelimitedData
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "adelimitedData": self = .adelimitedData
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .adelimitedData: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .adelimitedData: return "\"adelimitedData\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .adelimitedData: return ".adelimitedData"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum descriptor: ProtobufEnum {
    public typealias RawValue = Int
    case adescriptor // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .adescriptor
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .adescriptor
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "adescriptor": self = .adescriptor
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "adescriptor": self = .adescriptor
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "adescriptor": self = .adescriptor
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .adescriptor: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .adescriptor: return "\"adescriptor\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .adescriptor: return ".adescriptor"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum extensionRegistry: ProtobufEnum {
    public typealias RawValue = Int
    case aextensionRegistry // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aextensionRegistry
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aextensionRegistry
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aextensionRegistry": self = .aextensionRegistry
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aextensionRegistry": self = .aextensionRegistry
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aextensionRegistry": self = .aextensionRegistry
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aextensionRegistry: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aextensionRegistry: return "\"aextensionRegistry\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aextensionRegistry: return ".aextensionRegistry"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum extensionsCurrentlySet: ProtobufEnum {
    public typealias RawValue = Int
    case aextensionsCurrentlySet // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aextensionsCurrentlySet
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aextensionsCurrentlySet
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aextensionsCurrentlySet": self = .aextensionsCurrentlySet
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aextensionsCurrentlySet": self = .aextensionsCurrentlySet
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aextensionsCurrentlySet": self = .aextensionsCurrentlySet
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aextensionsCurrentlySet: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aextensionsCurrentlySet: return "\"aextensionsCurrentlySet\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aextensionsCurrentlySet: return ".aextensionsCurrentlySet"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum isInitialized: ProtobufEnum {
    public typealias RawValue = Int
    case aisInitialized // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aisInitialized
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aisInitialized
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aisInitialized": self = .aisInitialized
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aisInitialized": self = .aisInitialized
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aisInitialized": self = .aisInitialized
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aisInitialized: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aisInitialized: return "\"aisInitialized\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aisInitialized: return ".aisInitialized"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum serializedSize: ProtobufEnum {
    public typealias RawValue = Int
    case aserializedSize // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aserializedSize
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aserializedSize
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aserializedSize": self = .aserializedSize
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aserializedSize": self = .aserializedSize
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aserializedSize": self = .aserializedSize
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aserializedSize: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aserializedSize: return "\"aserializedSize\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aserializedSize: return ".aserializedSize"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum sortedExtensionsInUse: ProtobufEnum {
    public typealias RawValue = Int
    case asortedExtensionsInUse // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .asortedExtensionsInUse
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .asortedExtensionsInUse
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "asortedExtensionsInUse": self = .asortedExtensionsInUse
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "asortedExtensionsInUse": self = .asortedExtensionsInUse
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "asortedExtensionsInUse": self = .asortedExtensionsInUse
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .asortedExtensionsInUse: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .asortedExtensionsInUse: return "\"asortedExtensionsInUse\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .asortedExtensionsInUse: return ".asortedExtensionsInUse"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum unknownFields: ProtobufEnum {
    public typealias RawValue = Int
    case aunknownFields // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aunknownFields
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aunknownFields
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aunknownFields": self = .aunknownFields
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aunknownFields": self = .aunknownFields
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aunknownFields": self = .aunknownFields
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aunknownFields: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aunknownFields: return "\"aunknownFields\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aunknownFields: return ".aunknownFields"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum Fixed: ProtobufEnum {
    public typealias RawValue = Int
    case aFixed // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aFixed
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aFixed
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aFixed": self = .aFixed
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aFixed": self = .aFixed
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aFixed": self = .aFixed
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aFixed: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aFixed: return "\"aFixed\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aFixed: return ".aFixed"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum Fract: ProtobufEnum {
    public typealias RawValue = Int
    case aFract // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aFract
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aFract
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aFract": self = .aFract
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aFract": self = .aFract
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aFract": self = .aFract
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aFract: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aFract: return "\"aFract\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aFract: return ".aFract"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum Size: ProtobufEnum {
    public typealias RawValue = Int
    case aSize // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aSize
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aSize
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aSize": self = .aSize
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aSize": self = .aSize
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aSize": self = .aSize
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aSize: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aSize: return "\"aSize\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aSize: return ".aSize"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum LogicalAddress: ProtobufEnum {
    public typealias RawValue = Int
    case aLogicalAddress // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aLogicalAddress
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aLogicalAddress
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aLogicalAddress": self = .aLogicalAddress
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aLogicalAddress": self = .aLogicalAddress
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aLogicalAddress": self = .aLogicalAddress
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aLogicalAddress: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aLogicalAddress: return "\"aLogicalAddress\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aLogicalAddress: return ".aLogicalAddress"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum PhysicalAddress: ProtobufEnum {
    public typealias RawValue = Int
    case aPhysicalAddress // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aPhysicalAddress
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aPhysicalAddress
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aPhysicalAddress": self = .aPhysicalAddress
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aPhysicalAddress": self = .aPhysicalAddress
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aPhysicalAddress": self = .aPhysicalAddress
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aPhysicalAddress: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aPhysicalAddress: return "\"aPhysicalAddress\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aPhysicalAddress: return ".aPhysicalAddress"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum ByteCount: ProtobufEnum {
    public typealias RawValue = Int
    case aByteCount // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aByteCount
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aByteCount
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aByteCount": self = .aByteCount
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aByteCount": self = .aByteCount
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aByteCount": self = .aByteCount
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aByteCount: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aByteCount: return "\"aByteCount\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aByteCount: return ".aByteCount"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum ByteOffset: ProtobufEnum {
    public typealias RawValue = Int
    case aByteOffset // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aByteOffset
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aByteOffset
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aByteOffset": self = .aByteOffset
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aByteOffset": self = .aByteOffset
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aByteOffset": self = .aByteOffset
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aByteOffset: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aByteOffset: return "\"aByteOffset\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aByteOffset: return ".aByteOffset"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum Duration: ProtobufEnum {
    public typealias RawValue = Int
    case aDuration // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aDuration
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aDuration
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aDuration": self = .aDuration
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aDuration": self = .aDuration
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aDuration": self = .aDuration
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aDuration: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aDuration: return "\"aDuration\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aDuration: return ".aDuration"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum AbsoluteTime: ProtobufEnum {
    public typealias RawValue = Int
    case aAbsoluteTime // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aAbsoluteTime
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aAbsoluteTime
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aAbsoluteTime": self = .aAbsoluteTime
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aAbsoluteTime": self = .aAbsoluteTime
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aAbsoluteTime": self = .aAbsoluteTime
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aAbsoluteTime: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aAbsoluteTime: return "\"aAbsoluteTime\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aAbsoluteTime: return ".aAbsoluteTime"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum OptionBits: ProtobufEnum {
    public typealias RawValue = Int
    case aOptionBits // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aOptionBits
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aOptionBits
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aOptionBits": self = .aOptionBits
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aOptionBits": self = .aOptionBits
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aOptionBits": self = .aOptionBits
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aOptionBits: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aOptionBits: return "\"aOptionBits\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aOptionBits: return ".aOptionBits"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum ItemCount: ProtobufEnum {
    public typealias RawValue = Int
    case aItemCount // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aItemCount
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aItemCount
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aItemCount": self = .aItemCount
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aItemCount": self = .aItemCount
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aItemCount": self = .aItemCount
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aItemCount: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aItemCount: return "\"aItemCount\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aItemCount: return ".aItemCount"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum PBVersion: ProtobufEnum {
    public typealias RawValue = Int
    case aPbversion // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aPbversion
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aPbversion
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aPbversion": self = .aPbversion
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aPBVersion": self = .aPbversion
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aPBVersion": self = .aPbversion
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aPbversion: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aPbversion: return "\"aPBVersion\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aPbversion: return ".aPbversion"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum ScriptCode: ProtobufEnum {
    public typealias RawValue = Int
    case aScriptCode // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aScriptCode
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aScriptCode
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aScriptCode": self = .aScriptCode
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aScriptCode": self = .aScriptCode
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aScriptCode": self = .aScriptCode
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aScriptCode: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aScriptCode: return "\"aScriptCode\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aScriptCode: return ".aScriptCode"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum LangCode: ProtobufEnum {
    public typealias RawValue = Int
    case aLangCode // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aLangCode
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aLangCode
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aLangCode": self = .aLangCode
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aLangCode": self = .aLangCode
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aLangCode": self = .aLangCode
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aLangCode: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aLangCode: return "\"aLangCode\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aLangCode: return ".aLangCode"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum RegionCode: ProtobufEnum {
    public typealias RawValue = Int
    case aRegionCode // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aRegionCode
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aRegionCode
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aRegionCode": self = .aRegionCode
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aRegionCode": self = .aRegionCode
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aRegionCode": self = .aRegionCode
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aRegionCode: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aRegionCode: return "\"aRegionCode\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aRegionCode: return ".aRegionCode"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum OSType: ProtobufEnum {
    public typealias RawValue = Int
    case aOstype // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aOstype
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aOstype
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aOstype": self = .aOstype
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aOSType": self = .aOstype
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aOSType": self = .aOstype
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aOstype: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aOstype: return "\"aOSType\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aOstype: return ".aOstype"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum ProcessSerialNumber: ProtobufEnum {
    public typealias RawValue = Int
    case aProcessSerialNumber // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aProcessSerialNumber
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aProcessSerialNumber
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aProcessSerialNumber": self = .aProcessSerialNumber
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aProcessSerialNumber": self = .aProcessSerialNumber
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aProcessSerialNumber": self = .aProcessSerialNumber
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aProcessSerialNumber: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aProcessSerialNumber: return "\"aProcessSerialNumber\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aProcessSerialNumber: return ".aProcessSerialNumber"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum Point: ProtobufEnum {
    public typealias RawValue = Int
    case aPoint // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aPoint
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aPoint
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aPoint": self = .aPoint
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aPoint": self = .aPoint
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aPoint": self = .aPoint
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aPoint: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aPoint: return "\"aPoint\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aPoint: return ".aPoint"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum Rect: ProtobufEnum {
    public typealias RawValue = Int
    case aRect // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aRect
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aRect
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aRect": self = .aRect
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aRect": self = .aRect
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aRect": self = .aRect
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aRect: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aRect: return "\"aRect\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aRect: return ".aRect"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum FixedPoint: ProtobufEnum {
    public typealias RawValue = Int
    case aFixedPoint // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aFixedPoint
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aFixedPoint
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aFixedPoint": self = .aFixedPoint
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aFixedPoint": self = .aFixedPoint
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aFixedPoint": self = .aFixedPoint
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aFixedPoint: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aFixedPoint: return "\"aFixedPoint\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aFixedPoint: return ".aFixedPoint"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum FixedRect: ProtobufEnum {
    public typealias RawValue = Int
    case aFixedRect // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aFixedRect
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aFixedRect
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aFixedRect": self = .aFixedRect
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aFixedRect": self = .aFixedRect
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aFixedRect": self = .aFixedRect
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aFixedRect: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aFixedRect: return "\"aFixedRect\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aFixedRect: return ".aFixedRect"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum Style: ProtobufEnum {
    public typealias RawValue = Int
    case aStyle // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aStyle
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aStyle
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aStyle": self = .aStyle
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aStyle": self = .aStyle
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aStyle": self = .aStyle
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aStyle: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aStyle: return "\"aStyle\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aStyle: return ".aStyle"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum StyleParameter: ProtobufEnum {
    public typealias RawValue = Int
    case aStyleParameter // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aStyleParameter
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aStyleParameter
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aStyleParameter": self = .aStyleParameter
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aStyleParameter": self = .aStyleParameter
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aStyleParameter": self = .aStyleParameter
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aStyleParameter: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aStyleParameter: return "\"aStyleParameter\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aStyleParameter: return ".aStyleParameter"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum StyleField: ProtobufEnum {
    public typealias RawValue = Int
    case aStyleField // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aStyleField
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aStyleField
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aStyleField": self = .aStyleField
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aStyleField": self = .aStyleField
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aStyleField": self = .aStyleField
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aStyleField: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aStyleField: return "\"aStyleField\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aStyleField: return ".aStyleField"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum TimeScale: ProtobufEnum {
    public typealias RawValue = Int
    case aTimeScale // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aTimeScale
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aTimeScale
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aTimeScale": self = .aTimeScale
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aTimeScale": self = .aTimeScale
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aTimeScale": self = .aTimeScale
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aTimeScale: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aTimeScale: return "\"aTimeScale\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aTimeScale: return ".aTimeScale"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum TimeBase: ProtobufEnum {
    public typealias RawValue = Int
    case aTimeBase // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aTimeBase
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aTimeBase
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aTimeBase": self = .aTimeBase
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aTimeBase": self = .aTimeBase
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aTimeBase": self = .aTimeBase
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aTimeBase: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aTimeBase: return "\"aTimeBase\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aTimeBase: return ".aTimeBase"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public enum TimeRecord: ProtobufEnum {
    public typealias RawValue = Int
    case aTimeRecord // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .aTimeRecord
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aTimeRecord
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "aTimeRecord": self = .aTimeRecord
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "aTimeRecord": self = .aTimeRecord
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "aTimeRecord": self = .aTimeRecord
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .aTimeRecord: return 0
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .aTimeRecord: return "\"aTimeRecord\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .aTimeRecord: return ".aTimeRecord"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return false // Proto3 ignores unknown fields
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
  }

  public func _protoc_generated_isEqualTo(other: SwiftUnittest_Names_EnumNames) -> Bool {
    return true
  }
}
