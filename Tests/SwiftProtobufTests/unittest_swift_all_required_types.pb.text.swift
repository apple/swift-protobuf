// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: unittest_swift_all_required_types.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _3: SwiftProtobuf.ProtobufAPIVersion_3 {}
  typealias Version = _3
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension ProtobufUnittest_TestAllRequiredTypes: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "required_int32"),
    2: .standard(proto: "required_int64"),
    3: .standard(proto: "required_uint32"),
    4: .standard(proto: "required_uint64"),
    5: .standard(proto: "required_sint32"),
    6: .standard(proto: "required_sint64"),
    7: .standard(proto: "required_fixed32"),
    8: .standard(proto: "required_fixed64"),
    9: .standard(proto: "required_sfixed32"),
    10: .standard(proto: "required_sfixed64"),
    11: .standard(proto: "required_float"),
    12: .standard(proto: "required_double"),
    13: .standard(proto: "required_bool"),
    14: .standard(proto: "required_string"),
    15: .standard(proto: "required_bytes"),
    16: .unique(proto: "RequiredGroup", json: "requiredgroup"),
    18: .standard(proto: "required_nested_message"),
    19: .standard(proto: "required_foreign_message"),
    20: .standard(proto: "required_import_message"),
    21: .standard(proto: "required_nested_enum"),
    22: .standard(proto: "required_foreign_enum"),
    23: .standard(proto: "required_import_enum"),
    24: .standard(proto: "required_string_piece"),
    25: .standard(proto: "required_cord"),
    26: .standard(proto: "required_public_import_message"),
    27: .standard(proto: "required_lazy_message"),
    61: .standard(proto: "default_int32"),
    62: .standard(proto: "default_int64"),
    63: .standard(proto: "default_uint32"),
    64: .standard(proto: "default_uint64"),
    65: .standard(proto: "default_sint32"),
    66: .standard(proto: "default_sint64"),
    67: .standard(proto: "default_fixed32"),
    68: .standard(proto: "default_fixed64"),
    69: .standard(proto: "default_sfixed32"),
    70: .standard(proto: "default_sfixed64"),
    71: .standard(proto: "default_float"),
    72: .standard(proto: "default_double"),
    73: .standard(proto: "default_bool"),
    74: .standard(proto: "default_string"),
    75: .standard(proto: "default_bytes"),
    81: .standard(proto: "default_nested_enum"),
    82: .standard(proto: "default_foreign_enum"),
    83: .standard(proto: "default_import_enum"),
    84: .standard(proto: "default_string_piece"),
    85: .standard(proto: "default_cord"),
    111: .standard(proto: "oneof_uint32"),
    112: .standard(proto: "oneof_nested_message"),
    113: .standard(proto: "oneof_string"),
    114: .standard(proto: "oneof_bytes"),
  ]
}

extension ProtobufUnittest_TestAllRequiredTypes.NestedEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    -1: .same(proto: "NEG"),
    1: .same(proto: "FOO"),
    2: .same(proto: "BAR"),
    3: .same(proto: "BAZ"),
  ]
}

extension ProtobufUnittest_TestAllRequiredTypes.NestedMessage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bb"),
  ]
}

extension ProtobufUnittest_TestAllRequiredTypes.RequiredGroup: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    17: .same(proto: "a"),
  ]
}

extension ProtobufUnittest_TestSomeRequiredTypes: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "required_int32"),
    2: .standard(proto: "required_float"),
    3: .standard(proto: "required_bool"),
    4: .standard(proto: "required_string"),
    5: .standard(proto: "required_bytes"),
    6: .standard(proto: "required_nested_enum"),
  ]
}

extension ProtobufUnittest_TestSomeRequiredTypes.NestedEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "FOO"),
  ]
}
