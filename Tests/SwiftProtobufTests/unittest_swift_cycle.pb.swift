/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: unittest_swift_cycle.proto
 *
 */

//  Protocol Buffers - Google's data interchange format
//  Copyright 2015 Google Inc.  All rights reserved.
// 
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are
//  met:
// 
//      * Redistributions of source code must retain the above copyright
//  notice, this list of conditions and the following disclaimer.
//      * Redistributions in binary form must reproduce the above
//  copyright notice, this list of conditions and the following disclaimer
//  in the documentation and/or other materials provided with the
//  distribution.
//      * Neither the name of Google Inc. nor the names of its
//  contributors may be used to endorse or promote products derived from
//  this software without specific prior written permission.
// 
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
//  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
//  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
//  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
//  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
//  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
//  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import Foundation
import SwiftProtobuf


//  Cycles in the Message graph can cause problems for the mutable classes
//  since the properties on the mutable class change types. This file just
//  needs to generate source, and that source must compile, to ensure the
//  generated source works for this sort of case.
//  You can't make a object graph that spans files, so this can only be done
//  within a single proto file.
public struct ProtobufUnittest_CycleFoo: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "ProtobufUnittest_CycleFoo"}
  public var protoMessageName: String {return "CycleFoo"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [
    "aFoo": 1,
    "aBar": 2,
    "aBaz": 3,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "a_foo": 1,
    "a_bar": 2,
    "a_baz": 3,
  ]}

  private class _StorageClass {
    typealias ProtobufExtendedMessage = ProtobufUnittest_CycleFoo
    var unknown = ProtobufUnknownStorage()
    var _aFoo: ProtobufUnittest_CycleFoo? = nil
    var _aBar: ProtobufUnittest_CycleBar? = nil
    var _aBaz: ProtobufUnittest_CycleBaz? = nil

    init() {}

    func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeOptionalMessageField(fieldType: ProtobufUnittest_CycleFoo.self, value: &_aFoo)
      case 2: handled = try setter.decodeOptionalMessageField(fieldType: ProtobufUnittest_CycleBar.self, value: &_aBar)
      case 3: handled = try setter.decodeOptionalMessageField(fieldType: ProtobufUnittest_CycleBaz.self, value: &_aBaz)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    func traverse(visitor: inout ProtobufVisitor) throws {
      if let v = _aFoo {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 1, protoFieldName: "a_foo", jsonFieldName: "aFoo", swiftFieldName: "aFoo")
      }
      if let v = _aBar {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 2, protoFieldName: "a_bar", jsonFieldName: "aBar", swiftFieldName: "aBar")
      }
      if let v = _aBaz {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 3, protoFieldName: "a_baz", jsonFieldName: "aBaz", swiftFieldName: "aBaz")
      }
      unknown.traverse(visitor: &visitor)
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if ((_aFoo != nil || other._aFoo != nil) && (_aFoo == nil || other._aFoo == nil || _aFoo! != other._aFoo!)) {return false}
      if ((_aBar != nil || other._aBar != nil) && (_aBar == nil || other._aBar == nil || _aBar! != other._aBar!)) {return false}
      if ((_aBaz != nil || other._aBaz != nil) && (_aBaz == nil || other._aBaz == nil || _aBaz! != other._aBaz!)) {return false}
      if unknown != other.unknown {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone.unknown = unknown
      clone._aFoo = _aFoo
      clone._aBar = _aBar
      clone._aBaz = _aBaz
      return clone
    }
  }

  private var _storage = _StorageClass()

  public var aFoo: ProtobufUnittest_CycleFoo? {
    get {return _storage._aFoo}
    set {_uniqueStorage()._aFoo = newValue}
  }

  public var aBar: ProtobufUnittest_CycleBar? {
    get {return _storage._aBar}
    set {_uniqueStorage()._aBar = newValue}
  }

  public var aBaz: ProtobufUnittest_CycleBaz? {
    get {return _storage._aBaz}
    set {_uniqueStorage()._aBaz = newValue}
  }

  public init() {}

  public init(aFoo: ProtobufUnittest_CycleFoo? = nil,
    aBar: ProtobufUnittest_CycleBar? = nil,
    aBaz: ProtobufUnittest_CycleBaz? = nil)
  {
    let storage = _uniqueStorage()
    storage._aFoo = aFoo
    storage._aBar = aBar
    storage._aBaz = aBaz
  }

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_CycleFoo) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

public struct ProtobufUnittest_CycleBar: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "ProtobufUnittest_CycleBar"}
  public var protoMessageName: String {return "CycleBar"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [
    "aBar": 1,
    "aBaz": 2,
    "aFoo": 3,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "a_bar": 1,
    "a_baz": 2,
    "a_foo": 3,
  ]}

  private class _StorageClass {
    typealias ProtobufExtendedMessage = ProtobufUnittest_CycleBar
    var unknown = ProtobufUnknownStorage()
    var _aBar: ProtobufUnittest_CycleBar? = nil
    var _aBaz: ProtobufUnittest_CycleBaz? = nil
    var _aFoo: ProtobufUnittest_CycleFoo? = nil

    init() {}

    func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeOptionalMessageField(fieldType: ProtobufUnittest_CycleBar.self, value: &_aBar)
      case 2: handled = try setter.decodeOptionalMessageField(fieldType: ProtobufUnittest_CycleBaz.self, value: &_aBaz)
      case 3: handled = try setter.decodeOptionalMessageField(fieldType: ProtobufUnittest_CycleFoo.self, value: &_aFoo)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    func traverse(visitor: inout ProtobufVisitor) throws {
      if let v = _aBar {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 1, protoFieldName: "a_bar", jsonFieldName: "aBar", swiftFieldName: "aBar")
      }
      if let v = _aBaz {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 2, protoFieldName: "a_baz", jsonFieldName: "aBaz", swiftFieldName: "aBaz")
      }
      if let v = _aFoo {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 3, protoFieldName: "a_foo", jsonFieldName: "aFoo", swiftFieldName: "aFoo")
      }
      unknown.traverse(visitor: &visitor)
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if ((_aBar != nil || other._aBar != nil) && (_aBar == nil || other._aBar == nil || _aBar! != other._aBar!)) {return false}
      if ((_aBaz != nil || other._aBaz != nil) && (_aBaz == nil || other._aBaz == nil || _aBaz! != other._aBaz!)) {return false}
      if ((_aFoo != nil || other._aFoo != nil) && (_aFoo == nil || other._aFoo == nil || _aFoo! != other._aFoo!)) {return false}
      if unknown != other.unknown {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone.unknown = unknown
      clone._aBar = _aBar
      clone._aBaz = _aBaz
      clone._aFoo = _aFoo
      return clone
    }
  }

  private var _storage = _StorageClass()

  public var aBar: ProtobufUnittest_CycleBar? {
    get {return _storage._aBar}
    set {_uniqueStorage()._aBar = newValue}
  }

  public var aBaz: ProtobufUnittest_CycleBaz? {
    get {return _storage._aBaz}
    set {_uniqueStorage()._aBaz = newValue}
  }

  public var aFoo: ProtobufUnittest_CycleFoo? {
    get {return _storage._aFoo}
    set {_uniqueStorage()._aFoo = newValue}
  }

  public init() {}

  public init(aBar: ProtobufUnittest_CycleBar? = nil,
    aBaz: ProtobufUnittest_CycleBaz? = nil,
    aFoo: ProtobufUnittest_CycleFoo? = nil)
  {
    let storage = _uniqueStorage()
    storage._aBar = aBar
    storage._aBaz = aBaz
    storage._aFoo = aFoo
  }

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_CycleBar) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

public struct ProtobufUnittest_CycleBaz: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "ProtobufUnittest_CycleBaz"}
  public var protoMessageName: String {return "CycleBaz"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [
    "aBaz": 1,
    "aFoo": 2,
    "aBar": 3,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "a_baz": 1,
    "a_foo": 2,
    "a_bar": 3,
  ]}

  private class _StorageClass {
    typealias ProtobufExtendedMessage = ProtobufUnittest_CycleBaz
    var unknown = ProtobufUnknownStorage()
    var _aBaz: ProtobufUnittest_CycleBaz? = nil
    var _aFoo: ProtobufUnittest_CycleFoo? = nil
    var _aBar: ProtobufUnittest_CycleBar? = nil

    init() {}

    func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeOptionalMessageField(fieldType: ProtobufUnittest_CycleBaz.self, value: &_aBaz)
      case 2: handled = try setter.decodeOptionalMessageField(fieldType: ProtobufUnittest_CycleFoo.self, value: &_aFoo)
      case 3: handled = try setter.decodeOptionalMessageField(fieldType: ProtobufUnittest_CycleBar.self, value: &_aBar)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    func traverse(visitor: inout ProtobufVisitor) throws {
      if let v = _aBaz {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 1, protoFieldName: "a_baz", jsonFieldName: "aBaz", swiftFieldName: "aBaz")
      }
      if let v = _aFoo {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 2, protoFieldName: "a_foo", jsonFieldName: "aFoo", swiftFieldName: "aFoo")
      }
      if let v = _aBar {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 3, protoFieldName: "a_bar", jsonFieldName: "aBar", swiftFieldName: "aBar")
      }
      unknown.traverse(visitor: &visitor)
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if ((_aBaz != nil || other._aBaz != nil) && (_aBaz == nil || other._aBaz == nil || _aBaz! != other._aBaz!)) {return false}
      if ((_aFoo != nil || other._aFoo != nil) && (_aFoo == nil || other._aFoo == nil || _aFoo! != other._aFoo!)) {return false}
      if ((_aBar != nil || other._aBar != nil) && (_aBar == nil || other._aBar == nil || _aBar! != other._aBar!)) {return false}
      if unknown != other.unknown {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone.unknown = unknown
      clone._aBaz = _aBaz
      clone._aFoo = _aFoo
      clone._aBar = _aBar
      return clone
    }
  }

  private var _storage = _StorageClass()

  public var aBaz: ProtobufUnittest_CycleBaz? {
    get {return _storage._aBaz}
    set {_uniqueStorage()._aBaz = newValue}
  }

  public var aFoo: ProtobufUnittest_CycleFoo? {
    get {return _storage._aFoo}
    set {_uniqueStorage()._aFoo = newValue}
  }

  public var aBar: ProtobufUnittest_CycleBar? {
    get {return _storage._aBar}
    set {_uniqueStorage()._aBar = newValue}
  }

  public init() {}

  public init(aBaz: ProtobufUnittest_CycleBaz? = nil,
    aFoo: ProtobufUnittest_CycleFoo? = nil,
    aBar: ProtobufUnittest_CycleBar? = nil)
  {
    let storage = _uniqueStorage()
    storage._aBaz = aBaz
    storage._aFoo = aFoo
    storage._aBar = aBar
  }

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_CycleBaz) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}
