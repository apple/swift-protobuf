// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: unittest_swift_extension3.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Protos/unittest_swift_extension3.proto - test proto
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2016 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See http://swift.org/LICENSE.txt for license information
// See http://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
// -----------------------------------------------------------------------------
///
/// Test naming of extensions that differ only in proto package. This is a
/// clone of unittest_swift_extension2.proto, but with a different proto package
/// and different extension numbers.
///
// -----------------------------------------------------------------------------

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _3: SwiftProtobuf.ProtobufAPIVersion_3 {}
  typealias Version = _3
}

struct SwiftProtoTesting_Extend3_MyMessage: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct C: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var c: Int64 {
      get {return _c ?? 0}
      set {_c = newValue}
    }
    /// Returns true if `c` has been explicitly set.
    var hasC: Bool {return self._c != nil}
    /// Clears the value of `c`. Subsequent reads from it will return its default value.
    mutating func clearC() {self._c = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _c: Int64? = nil
  }

  init() {}
}

struct SwiftProtoTesting_Extend3_C: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var c: Int64 {
    get {return _c ?? 0}
    set {_c = newValue}
  }
  /// Returns true if `c` has been explicitly set.
  var hasC: Bool {return self._c != nil}
  /// Clears the value of `c`. Subsequent reads from it will return its default value.
  mutating func clearC() {self._c = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _c: Int64? = nil
}

// MARK: - Extension support defined in unittest_swift_extension3.proto.

// MARK: - Extension Properties

// Swift Extensions on the exteneded Messages to add easy access to the declared
// extension fields. The names are based on the extension field name from the proto
// declaration. To avoid naming collisions, the names are prefixed with the name of
// the scope where the extend directive occurs.

extension SwiftProtoTesting_Extend_Foo.Bar.Baz {

  var SwiftProtoTesting_Extend3_b: String {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extend3_Extensions_b) ?? String()}
    set {setExtensionValue(ext: SwiftProtoTesting_Extend3_Extensions_b, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extend3_Extensions_b`
  /// has been explicitly set.
  var hasSwiftProtoTesting_Extend3_b: Bool {
    return hasExtensionValue(ext: SwiftProtoTesting_Extend3_Extensions_b)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extend3_Extensions_b`.
  /// Subsequent reads from it will return its default value.
  mutating func clearSwiftProtoTesting_Extend3_b() {
    clearExtensionValue(ext: SwiftProtoTesting_Extend3_Extensions_b)
  }

  var SwiftProtoTesting_Extend3_c: SwiftProtoTesting_Extend3_C {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extend3_Extensions_C) ?? SwiftProtoTesting_Extend3_C()}
    set {setExtensionValue(ext: SwiftProtoTesting_Extend3_Extensions_C, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extend3_Extensions_C`
  /// has been explicitly set.
  var hasSwiftProtoTesting_Extend3_c: Bool {
    return hasExtensionValue(ext: SwiftProtoTesting_Extend3_Extensions_C)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extend3_Extensions_C`.
  /// Subsequent reads from it will return its default value.
  mutating func clearSwiftProtoTesting_Extend3_c() {
    clearExtensionValue(ext: SwiftProtoTesting_Extend3_Extensions_C)
  }

  var SwiftProtoTesting_Extend3_MyMessage_b: String {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extend3_MyMessage.Extensions.b) ?? String()}
    set {setExtensionValue(ext: SwiftProtoTesting_Extend3_MyMessage.Extensions.b, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extend3_MyMessage.Extensions.b`
  /// has been explicitly set.
  var hasSwiftProtoTesting_Extend3_MyMessage_b: Bool {
    return hasExtensionValue(ext: SwiftProtoTesting_Extend3_MyMessage.Extensions.b)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extend3_MyMessage.Extensions.b`.
  /// Subsequent reads from it will return its default value.
  mutating func clearSwiftProtoTesting_Extend3_MyMessage_b() {
    clearExtensionValue(ext: SwiftProtoTesting_Extend3_MyMessage.Extensions.b)
  }

  var SwiftProtoTesting_Extend3_MyMessage_c: SwiftProtoTesting_Extend3_MyMessage.C {
    get {return getExtensionValue(ext: SwiftProtoTesting_Extend3_MyMessage.Extensions.C) ?? SwiftProtoTesting_Extend3_MyMessage.C()}
    set {setExtensionValue(ext: SwiftProtoTesting_Extend3_MyMessage.Extensions.C, value: newValue)}
  }
  /// Returns true if extension `SwiftProtoTesting_Extend3_MyMessage.Extensions.C`
  /// has been explicitly set.
  var hasSwiftProtoTesting_Extend3_MyMessage_c: Bool {
    return hasExtensionValue(ext: SwiftProtoTesting_Extend3_MyMessage.Extensions.C)
  }
  /// Clears the value of extension `SwiftProtoTesting_Extend3_MyMessage.Extensions.C`.
  /// Subsequent reads from it will return its default value.
  mutating func clearSwiftProtoTesting_Extend3_MyMessage_c() {
    clearExtensionValue(ext: SwiftProtoTesting_Extend3_MyMessage.Extensions.C)
  }

}

// MARK: - File's ExtensionMap: SwiftProtoTesting_Extend3_UnittestSwiftExtension3_Extensions

/// A `SwiftProtobuf.SimpleExtensionMap` that includes all of the extensions defined by
/// this .proto file. It can be used any place an `SwiftProtobuf.ExtensionMap` is needed
/// in parsing, or it can be combined with other `SwiftProtobuf.SimpleExtensionMap`s to create
/// a larger `SwiftProtobuf.SimpleExtensionMap`.
let SwiftProtoTesting_Extend3_UnittestSwiftExtension3_Extensions: SwiftProtobuf.SimpleExtensionMap = [
  SwiftProtoTesting_Extend3_Extensions_b,
  SwiftProtoTesting_Extend3_Extensions_C,
  SwiftProtoTesting_Extend3_MyMessage.Extensions.b,
  SwiftProtoTesting_Extend3_MyMessage.Extensions.C
]

// Extension Objects - The only reason these might be needed is when manually
// constructing a `SimpleExtensionMap`, otherwise, use the above _Extension Properties_
// accessors for the extension fields on the messages directly.

let SwiftProtoTesting_Extend3_Extensions_b = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufString>, SwiftProtoTesting_Extend_Foo.Bar.Baz>(
  _protobuf_fieldNumber: 320,
  fieldName: "swift_proto_testing.extend3.b"
)

let SwiftProtoTesting_Extend3_Extensions_C = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalGroupExtensionField<SwiftProtoTesting_Extend3_C>, SwiftProtoTesting_Extend_Foo.Bar.Baz>(
  _protobuf_fieldNumber: 321,
  fieldName: "swift_proto_testing.extend3.c"
)

extension SwiftProtoTesting_Extend3_MyMessage {
  enum Extensions {
    static let b = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufString>, SwiftProtoTesting_Extend_Foo.Bar.Baz>(
      _protobuf_fieldNumber: 310,
      fieldName: "swift_proto_testing.extend3.MyMessage.b"
    )

    static let C = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalGroupExtensionField<SwiftProtoTesting_Extend3_MyMessage.C>, SwiftProtoTesting_Extend_Foo.Bar.Baz>(
      _protobuf_fieldNumber: 311,
      fieldName: "swift_proto_testing.extend3.MyMessage.c"
    )
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "swift_proto_testing.extend3"

extension SwiftProtoTesting_Extend3_MyMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MyMessage"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  static let _fields: [Field<Self>] = [
  ]


  static func ==(lhs: SwiftProtoTesting_Extend3_MyMessage, rhs: SwiftProtoTesting_Extend3_MyMessage) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SwiftProtoTesting_Extend3_MyMessage.C: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = SwiftProtoTesting_Extend3_MyMessage.protoMessageName + ".C"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1310: .same(proto: "c"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1310: try { try decoder.decodeSingularInt64Field(value: &self._c) }()
      default: break
      }
    }
  }

  static let _fields: [Field<Self>] = [
    .singularInt64({ $0.c }, fieldNumber: 1310, isUnset: { $0._c == nil }),
  ]


  static func ==(lhs: SwiftProtoTesting_Extend3_MyMessage.C, rhs: SwiftProtoTesting_Extend3_MyMessage.C) -> Bool {
    if lhs._c != rhs._c {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SwiftProtoTesting_Extend3_C: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".C"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1320: .same(proto: "c"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1320: try { try decoder.decodeSingularInt64Field(value: &self._c) }()
      default: break
      }
    }
  }

  static let _fields: [Field<Self>] = [
    .singularInt64({ $0.c }, fieldNumber: 1320, isUnset: { $0._c == nil }),
  ]


  static func ==(lhs: SwiftProtoTesting_Extend3_C, rhs: SwiftProtoTesting_Extend3_C) -> Bool {
    if lhs._c != rhs._c {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
