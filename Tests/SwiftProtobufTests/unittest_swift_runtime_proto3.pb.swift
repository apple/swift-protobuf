/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: unittest_swift_runtime_proto3.proto
 *
 */

//  Protocol Buffers - Google's data interchange format
//  Copyright 2015 Google Inc.  All rights reserved.
// 
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are
//  met:
// 
//      * Redistributions of source code must retain the above copyright
//  notice, this list of conditions and the following disclaimer.
//      * Redistributions in binary form must reproduce the above
//  copyright notice, this list of conditions and the following disclaimer
//  in the documentation and/or other materials provided with the
//  distribution.
//      * Neither the name of Google Inc. nor the names of its
//  contributors may be used to endorse or promote products derived from
//  this software without specific prior written permission.
// 
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
//  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
//  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
//  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
//  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
//  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
//  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import Foundation
import SwiftProtobuf


public struct ProtobufUnittest_Message3: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "ProtobufUnittest_Message3"}
  public var protoMessageName: String {return "Message3"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [
    "optionalInt32": 1,
    "optionalInt64": 2,
    "optionalUint32": 3,
    "optionalUint64": 4,
    "optionalSint32": 5,
    "optionalSint64": 6,
    "optionalFixed32": 7,
    "optionalFixed64": 8,
    "optionalSfixed32": 9,
    "optionalSfixed64": 10,
    "optionalFloat": 11,
    "optionalDouble": 12,
    "optionalBool": 13,
    "optionalString": 14,
    "optionalBytes": 15,
    "optionalMessage": 18,
    "optionalEnum": 19,
    "repeatedInt32": 31,
    "repeatedInt64": 32,
    "repeatedUint32": 33,
    "repeatedUint64": 34,
    "repeatedSint32": 35,
    "repeatedSint64": 36,
    "repeatedFixed32": 37,
    "repeatedFixed64": 38,
    "repeatedSfixed32": 39,
    "repeatedSfixed64": 40,
    "repeatedFloat": 41,
    "repeatedDouble": 42,
    "repeatedBool": 43,
    "repeatedString": 44,
    "repeatedBytes": 45,
    "repeatedMessage": 48,
    "repeatedEnum": 49,
    "oneofInt32": 51,
    "oneofInt64": 52,
    "oneofUint32": 53,
    "oneofUint64": 54,
    "oneofSint32": 55,
    "oneofSint64": 56,
    "oneofFixed32": 57,
    "oneofFixed64": 58,
    "oneofSfixed32": 59,
    "oneofSfixed64": 60,
    "oneofFloat": 61,
    "oneofDouble": 62,
    "oneofBool": 63,
    "oneofString": 64,
    "oneofBytes": 65,
    "oneofMessage": 68,
    "oneofEnum": 69,
    "mapInt32Int32": 70,
    "mapInt64Int64": 71,
    "mapUint32Uint32": 72,
    "mapUint64Uint64": 73,
    "mapSint32Sint32": 74,
    "mapSint64Sint64": 75,
    "mapFixed32Fixed32": 76,
    "mapFixed64Fixed64": 77,
    "mapSfixed32Sfixed32": 78,
    "mapSfixed64Sfixed64": 79,
    "mapInt32Float": 80,
    "mapInt32Double": 81,
    "mapBoolBool": 82,
    "mapStringString": 83,
    "mapStringBytes": 84,
    "mapStringMessage": 85,
    "mapInt32Bytes": 86,
    "mapInt32Enum": 87,
    "mapInt32Message": 88,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "optional_int32": 1,
    "optional_int64": 2,
    "optional_uint32": 3,
    "optional_uint64": 4,
    "optional_sint32": 5,
    "optional_sint64": 6,
    "optional_fixed32": 7,
    "optional_fixed64": 8,
    "optional_sfixed32": 9,
    "optional_sfixed64": 10,
    "optional_float": 11,
    "optional_double": 12,
    "optional_bool": 13,
    "optional_string": 14,
    "optional_bytes": 15,
    "optional_message": 18,
    "optional_enum": 19,
    "repeated_int32": 31,
    "repeated_int64": 32,
    "repeated_uint32": 33,
    "repeated_uint64": 34,
    "repeated_sint32": 35,
    "repeated_sint64": 36,
    "repeated_fixed32": 37,
    "repeated_fixed64": 38,
    "repeated_sfixed32": 39,
    "repeated_sfixed64": 40,
    "repeated_float": 41,
    "repeated_double": 42,
    "repeated_bool": 43,
    "repeated_string": 44,
    "repeated_bytes": 45,
    "repeated_message": 48,
    "repeated_enum": 49,
    "oneof_int32": 51,
    "oneof_int64": 52,
    "oneof_uint32": 53,
    "oneof_uint64": 54,
    "oneof_sint32": 55,
    "oneof_sint64": 56,
    "oneof_fixed32": 57,
    "oneof_fixed64": 58,
    "oneof_sfixed32": 59,
    "oneof_sfixed64": 60,
    "oneof_float": 61,
    "oneof_double": 62,
    "oneof_bool": 63,
    "oneof_string": 64,
    "oneof_bytes": 65,
    "oneof_message": 68,
    "oneof_enum": 69,
    "map_int32_int32": 70,
    "map_int64_int64": 71,
    "map_uint32_uint32": 72,
    "map_uint64_uint64": 73,
    "map_sint32_sint32": 74,
    "map_sint64_sint64": 75,
    "map_fixed32_fixed32": 76,
    "map_fixed64_fixed64": 77,
    "map_sfixed32_sfixed32": 78,
    "map_sfixed64_sfixed64": 79,
    "map_int32_float": 80,
    "map_int32_double": 81,
    "map_bool_bool": 82,
    "map_string_string": 83,
    "map_string_bytes": 84,
    "map_string_message": 85,
    "map_int32_bytes": 86,
    "map_int32_enum": 87,
    "map_int32_message": 88,
  ]}

  private class _StorageClass {
    typealias ProtobufExtendedMessage = ProtobufUnittest_Message3
    var _optionalInt32: Int32 = 0
    var _optionalInt64: Int64 = 0
    var _optionalUint32: UInt32 = 0
    var _optionalUint64: UInt64 = 0
    var _optionalSint32: Int32 = 0
    var _optionalSint64: Int64 = 0
    var _optionalFixed32: UInt32 = 0
    var _optionalFixed64: UInt64 = 0
    var _optionalSfixed32: Int32 = 0
    var _optionalSfixed64: Int64 = 0
    var _optionalFloat: Float = 0
    var _optionalDouble: Double = 0
    var _optionalBool: Bool = false
    var _optionalString: String = ""
    var _optionalBytes: Data = Data()
    var _optionalMessage: ProtobufUnittest_Message3? = nil
    var _optionalEnum: ProtobufUnittest_Message3.Enum = ProtobufUnittest_Message3.Enum.foo
    var _repeatedInt32: [Int32] = []
    var _repeatedInt64: [Int64] = []
    var _repeatedUint32: [UInt32] = []
    var _repeatedUint64: [UInt64] = []
    var _repeatedSint32: [Int32] = []
    var _repeatedSint64: [Int64] = []
    var _repeatedFixed32: [UInt32] = []
    var _repeatedFixed64: [UInt64] = []
    var _repeatedSfixed32: [Int32] = []
    var _repeatedSfixed64: [Int64] = []
    var _repeatedFloat: [Float] = []
    var _repeatedDouble: [Double] = []
    var _repeatedBool: [Bool] = []
    var _repeatedString: [String] = []
    var _repeatedBytes: [Data] = []
    var _repeatedMessage: [ProtobufUnittest_Message3] = []
    var _repeatedEnum: [ProtobufUnittest_Message3.Enum] = []
    var _o = ProtobufUnittest_Message3.OneOf_O()
    var _mapInt32Int32: Dictionary<Int32,Int32> = [:]
    var _mapInt64Int64: Dictionary<Int64,Int64> = [:]
    var _mapUint32Uint32: Dictionary<UInt32,UInt32> = [:]
    var _mapUint64Uint64: Dictionary<UInt64,UInt64> = [:]
    var _mapSint32Sint32: Dictionary<Int32,Int32> = [:]
    var _mapSint64Sint64: Dictionary<Int64,Int64> = [:]
    var _mapFixed32Fixed32: Dictionary<UInt32,UInt32> = [:]
    var _mapFixed64Fixed64: Dictionary<UInt64,UInt64> = [:]
    var _mapSfixed32Sfixed32: Dictionary<Int32,Int32> = [:]
    var _mapSfixed64Sfixed64: Dictionary<Int64,Int64> = [:]
    var _mapInt32Float: Dictionary<Int32,Float> = [:]
    var _mapInt32Double: Dictionary<Int32,Double> = [:]
    var _mapBoolBool: Dictionary<Bool,Bool> = [:]
    var _mapStringString: Dictionary<String,String> = [:]
    var _mapStringBytes: Dictionary<String,Data> = [:]
    var _mapStringMessage: Dictionary<String,ProtobufUnittest_Message3> = [:]
    var _mapInt32Bytes: Dictionary<Int32,Data> = [:]
    var _mapInt32Enum: Dictionary<Int32,ProtobufUnittest_Message3.Enum> = [:]
    var _mapInt32Message: Dictionary<Int32,ProtobufUnittest_Message3> = [:]

    init() {}

    func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_optionalInt32)
      case 2: handled = try setter.decodeSingularField(fieldType: ProtobufInt64.self, value: &_optionalInt64)
      case 3: handled = try setter.decodeSingularField(fieldType: ProtobufUInt32.self, value: &_optionalUint32)
      case 4: handled = try setter.decodeSingularField(fieldType: ProtobufUInt64.self, value: &_optionalUint64)
      case 5: handled = try setter.decodeSingularField(fieldType: ProtobufSInt32.self, value: &_optionalSint32)
      case 6: handled = try setter.decodeSingularField(fieldType: ProtobufSInt64.self, value: &_optionalSint64)
      case 7: handled = try setter.decodeSingularField(fieldType: ProtobufFixed32.self, value: &_optionalFixed32)
      case 8: handled = try setter.decodeSingularField(fieldType: ProtobufFixed64.self, value: &_optionalFixed64)
      case 9: handled = try setter.decodeSingularField(fieldType: ProtobufSFixed32.self, value: &_optionalSfixed32)
      case 10: handled = try setter.decodeSingularField(fieldType: ProtobufSFixed64.self, value: &_optionalSfixed64)
      case 11: handled = try setter.decodeSingularField(fieldType: ProtobufFloat.self, value: &_optionalFloat)
      case 12: handled = try setter.decodeSingularField(fieldType: ProtobufDouble.self, value: &_optionalDouble)
      case 13: handled = try setter.decodeSingularField(fieldType: ProtobufBool.self, value: &_optionalBool)
      case 14: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &_optionalString)
      case 15: handled = try setter.decodeSingularField(fieldType: ProtobufBytes.self, value: &_optionalBytes)
      case 18: handled = try setter.decodeSingularMessageField(fieldType: ProtobufUnittest_Message3.self, value: &_optionalMessage)
      case 19: handled = try setter.decodeSingularField(fieldType: ProtobufUnittest_Message3.Enum.self, value: &_optionalEnum)
      case 31: handled = try setter.decodePackedField(fieldType: ProtobufInt32.self, value: &_repeatedInt32)
      case 32: handled = try setter.decodePackedField(fieldType: ProtobufInt64.self, value: &_repeatedInt64)
      case 33: handled = try setter.decodePackedField(fieldType: ProtobufUInt32.self, value: &_repeatedUint32)
      case 34: handled = try setter.decodePackedField(fieldType: ProtobufUInt64.self, value: &_repeatedUint64)
      case 35: handled = try setter.decodePackedField(fieldType: ProtobufSInt32.self, value: &_repeatedSint32)
      case 36: handled = try setter.decodePackedField(fieldType: ProtobufSInt64.self, value: &_repeatedSint64)
      case 37: handled = try setter.decodePackedField(fieldType: ProtobufFixed32.self, value: &_repeatedFixed32)
      case 38: handled = try setter.decodePackedField(fieldType: ProtobufFixed64.self, value: &_repeatedFixed64)
      case 39: handled = try setter.decodePackedField(fieldType: ProtobufSFixed32.self, value: &_repeatedSfixed32)
      case 40: handled = try setter.decodePackedField(fieldType: ProtobufSFixed64.self, value: &_repeatedSfixed64)
      case 41: handled = try setter.decodePackedField(fieldType: ProtobufFloat.self, value: &_repeatedFloat)
      case 42: handled = try setter.decodePackedField(fieldType: ProtobufDouble.self, value: &_repeatedDouble)
      case 43: handled = try setter.decodePackedField(fieldType: ProtobufBool.self, value: &_repeatedBool)
      case 44: handled = try setter.decodeRepeatedField(fieldType: ProtobufString.self, value: &_repeatedString)
      case 45: handled = try setter.decodeRepeatedField(fieldType: ProtobufBytes.self, value: &_repeatedBytes)
      case 48: handled = try setter.decodeRepeatedMessageField(fieldType: ProtobufUnittest_Message3.self, value: &_repeatedMessage)
      case 49: handled = try setter.decodePackedField(fieldType: ProtobufUnittest_Message3.Enum.self, value: &_repeatedEnum)
      case 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69:
        handled = try _o.decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
      case 70: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufInt32,ProtobufInt32>.self, value: &_mapInt32Int32)
      case 71: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufInt64,ProtobufInt64>.self, value: &_mapInt64Int64)
      case 72: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufUInt32,ProtobufUInt32>.self, value: &_mapUint32Uint32)
      case 73: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufUInt64,ProtobufUInt64>.self, value: &_mapUint64Uint64)
      case 74: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufSInt32,ProtobufSInt32>.self, value: &_mapSint32Sint32)
      case 75: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufSInt64,ProtobufSInt64>.self, value: &_mapSint64Sint64)
      case 76: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufFixed32,ProtobufFixed32>.self, value: &_mapFixed32Fixed32)
      case 77: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufFixed64,ProtobufFixed64>.self, value: &_mapFixed64Fixed64)
      case 78: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufSFixed32,ProtobufSFixed32>.self, value: &_mapSfixed32Sfixed32)
      case 79: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufSFixed64,ProtobufSFixed64>.self, value: &_mapSfixed64Sfixed64)
      case 80: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufInt32,ProtobufFloat>.self, value: &_mapInt32Float)
      case 81: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufInt32,ProtobufDouble>.self, value: &_mapInt32Double)
      case 82: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufBool,ProtobufBool>.self, value: &_mapBoolBool)
      case 83: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufString,ProtobufString>.self, value: &_mapStringString)
      case 84: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufString,ProtobufBytes>.self, value: &_mapStringBytes)
      case 85: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufString,ProtobufUnittest_Message3>.self, value: &_mapStringMessage)
      case 86: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufInt32,ProtobufBytes>.self, value: &_mapInt32Bytes)
      case 87: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufInt32,ProtobufUnittest_Message3.Enum>.self, value: &_mapInt32Enum)
      case 88: handled = try setter.decodeMapField(fieldType: ProtobufMap<ProtobufInt32,ProtobufUnittest_Message3>.self, value: &_mapInt32Message)
      default:
        handled = false
      }
      return handled
    }

    func traverse(visitor: inout ProtobufVisitor) throws {
      if _optionalInt32 != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _optionalInt32, protoFieldNumber: 1, protoFieldName: "optional_int32", jsonFieldName: "optionalInt32", swiftFieldName: "optionalInt32")
      }
      if _optionalInt64 != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt64.self, value: _optionalInt64, protoFieldNumber: 2, protoFieldName: "optional_int64", jsonFieldName: "optionalInt64", swiftFieldName: "optionalInt64")
      }
      if _optionalUint32 != 0 {
        try visitor.visitSingularField(fieldType: ProtobufUInt32.self, value: _optionalUint32, protoFieldNumber: 3, protoFieldName: "optional_uint32", jsonFieldName: "optionalUint32", swiftFieldName: "optionalUint32")
      }
      if _optionalUint64 != 0 {
        try visitor.visitSingularField(fieldType: ProtobufUInt64.self, value: _optionalUint64, protoFieldNumber: 4, protoFieldName: "optional_uint64", jsonFieldName: "optionalUint64", swiftFieldName: "optionalUint64")
      }
      if _optionalSint32 != 0 {
        try visitor.visitSingularField(fieldType: ProtobufSInt32.self, value: _optionalSint32, protoFieldNumber: 5, protoFieldName: "optional_sint32", jsonFieldName: "optionalSint32", swiftFieldName: "optionalSint32")
      }
      if _optionalSint64 != 0 {
        try visitor.visitSingularField(fieldType: ProtobufSInt64.self, value: _optionalSint64, protoFieldNumber: 6, protoFieldName: "optional_sint64", jsonFieldName: "optionalSint64", swiftFieldName: "optionalSint64")
      }
      if _optionalFixed32 != 0 {
        try visitor.visitSingularField(fieldType: ProtobufFixed32.self, value: _optionalFixed32, protoFieldNumber: 7, protoFieldName: "optional_fixed32", jsonFieldName: "optionalFixed32", swiftFieldName: "optionalFixed32")
      }
      if _optionalFixed64 != 0 {
        try visitor.visitSingularField(fieldType: ProtobufFixed64.self, value: _optionalFixed64, protoFieldNumber: 8, protoFieldName: "optional_fixed64", jsonFieldName: "optionalFixed64", swiftFieldName: "optionalFixed64")
      }
      if _optionalSfixed32 != 0 {
        try visitor.visitSingularField(fieldType: ProtobufSFixed32.self, value: _optionalSfixed32, protoFieldNumber: 9, protoFieldName: "optional_sfixed32", jsonFieldName: "optionalSfixed32", swiftFieldName: "optionalSfixed32")
      }
      if _optionalSfixed64 != 0 {
        try visitor.visitSingularField(fieldType: ProtobufSFixed64.self, value: _optionalSfixed64, protoFieldNumber: 10, protoFieldName: "optional_sfixed64", jsonFieldName: "optionalSfixed64", swiftFieldName: "optionalSfixed64")
      }
      if _optionalFloat != 0 {
        try visitor.visitSingularField(fieldType: ProtobufFloat.self, value: _optionalFloat, protoFieldNumber: 11, protoFieldName: "optional_float", jsonFieldName: "optionalFloat", swiftFieldName: "optionalFloat")
      }
      if _optionalDouble != 0 {
        try visitor.visitSingularField(fieldType: ProtobufDouble.self, value: _optionalDouble, protoFieldNumber: 12, protoFieldName: "optional_double", jsonFieldName: "optionalDouble", swiftFieldName: "optionalDouble")
      }
      if _optionalBool != false {
        try visitor.visitSingularField(fieldType: ProtobufBool.self, value: _optionalBool, protoFieldNumber: 13, protoFieldName: "optional_bool", jsonFieldName: "optionalBool", swiftFieldName: "optionalBool")
      }
      if _optionalString != "" {
        try visitor.visitSingularField(fieldType: ProtobufString.self, value: _optionalString, protoFieldNumber: 14, protoFieldName: "optional_string", jsonFieldName: "optionalString", swiftFieldName: "optionalString")
      }
      if _optionalBytes != Data() {
        try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: _optionalBytes, protoFieldNumber: 15, protoFieldName: "optional_bytes", jsonFieldName: "optionalBytes", swiftFieldName: "optionalBytes")
      }
      if let v = _optionalMessage {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 18, protoFieldName: "optional_message", jsonFieldName: "optionalMessage", swiftFieldName: "optionalMessage")
      }
      if _optionalEnum != ProtobufUnittest_Message3.Enum.foo {
        try visitor.visitSingularField(fieldType: ProtobufUnittest_Message3.Enum.self, value: _optionalEnum, protoFieldNumber: 19, protoFieldName: "optional_enum", jsonFieldName: "optionalEnum", swiftFieldName: "optionalEnum")
      }
      if !_repeatedInt32.isEmpty {
        try visitor.visitPackedField(fieldType: ProtobufInt32.self, value: _repeatedInt32, protoFieldNumber: 31, protoFieldName: "repeated_int32", jsonFieldName: "repeatedInt32", swiftFieldName: "repeatedInt32")
      }
      if !_repeatedInt64.isEmpty {
        try visitor.visitPackedField(fieldType: ProtobufInt64.self, value: _repeatedInt64, protoFieldNumber: 32, protoFieldName: "repeated_int64", jsonFieldName: "repeatedInt64", swiftFieldName: "repeatedInt64")
      }
      if !_repeatedUint32.isEmpty {
        try visitor.visitPackedField(fieldType: ProtobufUInt32.self, value: _repeatedUint32, protoFieldNumber: 33, protoFieldName: "repeated_uint32", jsonFieldName: "repeatedUint32", swiftFieldName: "repeatedUint32")
      }
      if !_repeatedUint64.isEmpty {
        try visitor.visitPackedField(fieldType: ProtobufUInt64.self, value: _repeatedUint64, protoFieldNumber: 34, protoFieldName: "repeated_uint64", jsonFieldName: "repeatedUint64", swiftFieldName: "repeatedUint64")
      }
      if !_repeatedSint32.isEmpty {
        try visitor.visitPackedField(fieldType: ProtobufSInt32.self, value: _repeatedSint32, protoFieldNumber: 35, protoFieldName: "repeated_sint32", jsonFieldName: "repeatedSint32", swiftFieldName: "repeatedSint32")
      }
      if !_repeatedSint64.isEmpty {
        try visitor.visitPackedField(fieldType: ProtobufSInt64.self, value: _repeatedSint64, protoFieldNumber: 36, protoFieldName: "repeated_sint64", jsonFieldName: "repeatedSint64", swiftFieldName: "repeatedSint64")
      }
      if !_repeatedFixed32.isEmpty {
        try visitor.visitPackedField(fieldType: ProtobufFixed32.self, value: _repeatedFixed32, protoFieldNumber: 37, protoFieldName: "repeated_fixed32", jsonFieldName: "repeatedFixed32", swiftFieldName: "repeatedFixed32")
      }
      if !_repeatedFixed64.isEmpty {
        try visitor.visitPackedField(fieldType: ProtobufFixed64.self, value: _repeatedFixed64, protoFieldNumber: 38, protoFieldName: "repeated_fixed64", jsonFieldName: "repeatedFixed64", swiftFieldName: "repeatedFixed64")
      }
      if !_repeatedSfixed32.isEmpty {
        try visitor.visitPackedField(fieldType: ProtobufSFixed32.self, value: _repeatedSfixed32, protoFieldNumber: 39, protoFieldName: "repeated_sfixed32", jsonFieldName: "repeatedSfixed32", swiftFieldName: "repeatedSfixed32")
      }
      if !_repeatedSfixed64.isEmpty {
        try visitor.visitPackedField(fieldType: ProtobufSFixed64.self, value: _repeatedSfixed64, protoFieldNumber: 40, protoFieldName: "repeated_sfixed64", jsonFieldName: "repeatedSfixed64", swiftFieldName: "repeatedSfixed64")
      }
      if !_repeatedFloat.isEmpty {
        try visitor.visitPackedField(fieldType: ProtobufFloat.self, value: _repeatedFloat, protoFieldNumber: 41, protoFieldName: "repeated_float", jsonFieldName: "repeatedFloat", swiftFieldName: "repeatedFloat")
      }
      if !_repeatedDouble.isEmpty {
        try visitor.visitPackedField(fieldType: ProtobufDouble.self, value: _repeatedDouble, protoFieldNumber: 42, protoFieldName: "repeated_double", jsonFieldName: "repeatedDouble", swiftFieldName: "repeatedDouble")
      }
      if !_repeatedBool.isEmpty {
        try visitor.visitPackedField(fieldType: ProtobufBool.self, value: _repeatedBool, protoFieldNumber: 43, protoFieldName: "repeated_bool", jsonFieldName: "repeatedBool", swiftFieldName: "repeatedBool")
      }
      if !_repeatedString.isEmpty {
        try visitor.visitRepeatedField(fieldType: ProtobufString.self, value: _repeatedString, protoFieldNumber: 44, protoFieldName: "repeated_string", jsonFieldName: "repeatedString", swiftFieldName: "repeatedString")
      }
      if !_repeatedBytes.isEmpty {
        try visitor.visitRepeatedField(fieldType: ProtobufBytes.self, value: _repeatedBytes, protoFieldNumber: 45, protoFieldName: "repeated_bytes", jsonFieldName: "repeatedBytes", swiftFieldName: "repeatedBytes")
      }
      if !_repeatedMessage.isEmpty {
        try visitor.visitRepeatedMessageField(value: _repeatedMessage, protoFieldNumber: 48, protoFieldName: "repeated_message", jsonFieldName: "repeatedMessage", swiftFieldName: "repeatedMessage")
      }
      if !_repeatedEnum.isEmpty {
        try visitor.visitPackedField(fieldType: ProtobufUnittest_Message3.Enum.self, value: _repeatedEnum, protoFieldNumber: 49, protoFieldName: "repeated_enum", jsonFieldName: "repeatedEnum", swiftFieldName: "repeatedEnum")
      }
      try _o.traverse(visitor: &visitor, start: 51, end: 70)
      if !_mapInt32Int32.isEmpty {
        try visitor.visitMapField(fieldType: ProtobufMap<ProtobufInt32,ProtobufInt32>.self, value: _mapInt32Int32, protoFieldNumber: 70, protoFieldName: "map_int32_int32", jsonFieldName: "mapInt32Int32", swiftFieldName: "mapInt32Int32")
      }
      if !_mapInt64Int64.isEmpty {
        try visitor.visitMapField(fieldType: ProtobufMap<ProtobufInt64,ProtobufInt64>.self, value: _mapInt64Int64, protoFieldNumber: 71, protoFieldName: "map_int64_int64", jsonFieldName: "mapInt64Int64", swiftFieldName: "mapInt64Int64")
      }
      if !_mapUint32Uint32.isEmpty {
        try visitor.visitMapField(fieldType: ProtobufMap<ProtobufUInt32,ProtobufUInt32>.self, value: _mapUint32Uint32, protoFieldNumber: 72, protoFieldName: "map_uint32_uint32", jsonFieldName: "mapUint32Uint32", swiftFieldName: "mapUint32Uint32")
      }
      if !_mapUint64Uint64.isEmpty {
        try visitor.visitMapField(fieldType: ProtobufMap<ProtobufUInt64,ProtobufUInt64>.self, value: _mapUint64Uint64, protoFieldNumber: 73, protoFieldName: "map_uint64_uint64", jsonFieldName: "mapUint64Uint64", swiftFieldName: "mapUint64Uint64")
      }
      if !_mapSint32Sint32.isEmpty {
        try visitor.visitMapField(fieldType: ProtobufMap<ProtobufSInt32,ProtobufSInt32>.self, value: _mapSint32Sint32, protoFieldNumber: 74, protoFieldName: "map_sint32_sint32", jsonFieldName: "mapSint32Sint32", swiftFieldName: "mapSint32Sint32")
      }
      if !_mapSint64Sint64.isEmpty {
        try visitor.visitMapField(fieldType: ProtobufMap<ProtobufSInt64,ProtobufSInt64>.self, value: _mapSint64Sint64, protoFieldNumber: 75, protoFieldName: "map_sint64_sint64", jsonFieldName: "mapSint64Sint64", swiftFieldName: "mapSint64Sint64")
      }
      if !_mapFixed32Fixed32.isEmpty {
        try visitor.visitMapField(fieldType: ProtobufMap<ProtobufFixed32,ProtobufFixed32>.self, value: _mapFixed32Fixed32, protoFieldNumber: 76, protoFieldName: "map_fixed32_fixed32", jsonFieldName: "mapFixed32Fixed32", swiftFieldName: "mapFixed32Fixed32")
      }
      if !_mapFixed64Fixed64.isEmpty {
        try visitor.visitMapField(fieldType: ProtobufMap<ProtobufFixed64,ProtobufFixed64>.self, value: _mapFixed64Fixed64, protoFieldNumber: 77, protoFieldName: "map_fixed64_fixed64", jsonFieldName: "mapFixed64Fixed64", swiftFieldName: "mapFixed64Fixed64")
      }
      if !_mapSfixed32Sfixed32.isEmpty {
        try visitor.visitMapField(fieldType: ProtobufMap<ProtobufSFixed32,ProtobufSFixed32>.self, value: _mapSfixed32Sfixed32, protoFieldNumber: 78, protoFieldName: "map_sfixed32_sfixed32", jsonFieldName: "mapSfixed32Sfixed32", swiftFieldName: "mapSfixed32Sfixed32")
      }
      if !_mapSfixed64Sfixed64.isEmpty {
        try visitor.visitMapField(fieldType: ProtobufMap<ProtobufSFixed64,ProtobufSFixed64>.self, value: _mapSfixed64Sfixed64, protoFieldNumber: 79, protoFieldName: "map_sfixed64_sfixed64", jsonFieldName: "mapSfixed64Sfixed64", swiftFieldName: "mapSfixed64Sfixed64")
      }
      if !_mapInt32Float.isEmpty {
        try visitor.visitMapField(fieldType: ProtobufMap<ProtobufInt32,ProtobufFloat>.self, value: _mapInt32Float, protoFieldNumber: 80, protoFieldName: "map_int32_float", jsonFieldName: "mapInt32Float", swiftFieldName: "mapInt32Float")
      }
      if !_mapInt32Double.isEmpty {
        try visitor.visitMapField(fieldType: ProtobufMap<ProtobufInt32,ProtobufDouble>.self, value: _mapInt32Double, protoFieldNumber: 81, protoFieldName: "map_int32_double", jsonFieldName: "mapInt32Double", swiftFieldName: "mapInt32Double")
      }
      if !_mapBoolBool.isEmpty {
        try visitor.visitMapField(fieldType: ProtobufMap<ProtobufBool,ProtobufBool>.self, value: _mapBoolBool, protoFieldNumber: 82, protoFieldName: "map_bool_bool", jsonFieldName: "mapBoolBool", swiftFieldName: "mapBoolBool")
      }
      if !_mapStringString.isEmpty {
        try visitor.visitMapField(fieldType: ProtobufMap<ProtobufString,ProtobufString>.self, value: _mapStringString, protoFieldNumber: 83, protoFieldName: "map_string_string", jsonFieldName: "mapStringString", swiftFieldName: "mapStringString")
      }
      if !_mapStringBytes.isEmpty {
        try visitor.visitMapField(fieldType: ProtobufMap<ProtobufString,ProtobufBytes>.self, value: _mapStringBytes, protoFieldNumber: 84, protoFieldName: "map_string_bytes", jsonFieldName: "mapStringBytes", swiftFieldName: "mapStringBytes")
      }
      if !_mapStringMessage.isEmpty {
        try visitor.visitMapField(fieldType: ProtobufMap<ProtobufString,ProtobufUnittest_Message3>.self, value: _mapStringMessage, protoFieldNumber: 85, protoFieldName: "map_string_message", jsonFieldName: "mapStringMessage", swiftFieldName: "mapStringMessage")
      }
      if !_mapInt32Bytes.isEmpty {
        try visitor.visitMapField(fieldType: ProtobufMap<ProtobufInt32,ProtobufBytes>.self, value: _mapInt32Bytes, protoFieldNumber: 86, protoFieldName: "map_int32_bytes", jsonFieldName: "mapInt32Bytes", swiftFieldName: "mapInt32Bytes")
      }
      if !_mapInt32Enum.isEmpty {
        try visitor.visitMapField(fieldType: ProtobufMap<ProtobufInt32,ProtobufUnittest_Message3.Enum>.self, value: _mapInt32Enum, protoFieldNumber: 87, protoFieldName: "map_int32_enum", jsonFieldName: "mapInt32Enum", swiftFieldName: "mapInt32Enum")
      }
      if !_mapInt32Message.isEmpty {
        try visitor.visitMapField(fieldType: ProtobufMap<ProtobufInt32,ProtobufUnittest_Message3>.self, value: _mapInt32Message, protoFieldNumber: 88, protoFieldName: "map_int32_message", jsonFieldName: "mapInt32Message", swiftFieldName: "mapInt32Message")
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _optionalInt32 != other._optionalInt32 {return false}
      if _optionalInt64 != other._optionalInt64 {return false}
      if _optionalUint32 != other._optionalUint32 {return false}
      if _optionalUint64 != other._optionalUint64 {return false}
      if _optionalSint32 != other._optionalSint32 {return false}
      if _optionalSint64 != other._optionalSint64 {return false}
      if _optionalFixed32 != other._optionalFixed32 {return false}
      if _optionalFixed64 != other._optionalFixed64 {return false}
      if _optionalSfixed32 != other._optionalSfixed32 {return false}
      if _optionalSfixed64 != other._optionalSfixed64 {return false}
      if _optionalFloat != other._optionalFloat {return false}
      if _optionalDouble != other._optionalDouble {return false}
      if _optionalBool != other._optionalBool {return false}
      if _optionalString != other._optionalString {return false}
      if _optionalBytes != other._optionalBytes {return false}
      if _optionalMessage != other._optionalMessage {return false}
      if _optionalEnum != other._optionalEnum {return false}
      if _repeatedInt32 != other._repeatedInt32 {return false}
      if _repeatedInt64 != other._repeatedInt64 {return false}
      if _repeatedUint32 != other._repeatedUint32 {return false}
      if _repeatedUint64 != other._repeatedUint64 {return false}
      if _repeatedSint32 != other._repeatedSint32 {return false}
      if _repeatedSint64 != other._repeatedSint64 {return false}
      if _repeatedFixed32 != other._repeatedFixed32 {return false}
      if _repeatedFixed64 != other._repeatedFixed64 {return false}
      if _repeatedSfixed32 != other._repeatedSfixed32 {return false}
      if _repeatedSfixed64 != other._repeatedSfixed64 {return false}
      if _repeatedFloat != other._repeatedFloat {return false}
      if _repeatedDouble != other._repeatedDouble {return false}
      if _repeatedBool != other._repeatedBool {return false}
      if _repeatedString != other._repeatedString {return false}
      if _repeatedBytes != other._repeatedBytes {return false}
      if _repeatedMessage != other._repeatedMessage {return false}
      if _repeatedEnum != other._repeatedEnum {return false}
      if _o != other._o {return false}
      if _mapInt32Int32 != other._mapInt32Int32 {return false}
      if _mapInt64Int64 != other._mapInt64Int64 {return false}
      if _mapUint32Uint32 != other._mapUint32Uint32 {return false}
      if _mapUint64Uint64 != other._mapUint64Uint64 {return false}
      if _mapSint32Sint32 != other._mapSint32Sint32 {return false}
      if _mapSint64Sint64 != other._mapSint64Sint64 {return false}
      if _mapFixed32Fixed32 != other._mapFixed32Fixed32 {return false}
      if _mapFixed64Fixed64 != other._mapFixed64Fixed64 {return false}
      if _mapSfixed32Sfixed32 != other._mapSfixed32Sfixed32 {return false}
      if _mapSfixed64Sfixed64 != other._mapSfixed64Sfixed64 {return false}
      if _mapInt32Float != other._mapInt32Float {return false}
      if _mapInt32Double != other._mapInt32Double {return false}
      if _mapBoolBool != other._mapBoolBool {return false}
      if _mapStringString != other._mapStringString {return false}
      if _mapStringBytes != other._mapStringBytes {return false}
      if _mapStringMessage != other._mapStringMessage {return false}
      if _mapInt32Bytes != other._mapInt32Bytes {return false}
      if _mapInt32Enum != other._mapInt32Enum {return false}
      if _mapInt32Message != other._mapInt32Message {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._optionalInt32 = _optionalInt32
      clone._optionalInt64 = _optionalInt64
      clone._optionalUint32 = _optionalUint32
      clone._optionalUint64 = _optionalUint64
      clone._optionalSint32 = _optionalSint32
      clone._optionalSint64 = _optionalSint64
      clone._optionalFixed32 = _optionalFixed32
      clone._optionalFixed64 = _optionalFixed64
      clone._optionalSfixed32 = _optionalSfixed32
      clone._optionalSfixed64 = _optionalSfixed64
      clone._optionalFloat = _optionalFloat
      clone._optionalDouble = _optionalDouble
      clone._optionalBool = _optionalBool
      clone._optionalString = _optionalString
      clone._optionalBytes = _optionalBytes
      clone._optionalMessage = _optionalMessage
      clone._optionalEnum = _optionalEnum
      clone._repeatedInt32 = _repeatedInt32
      clone._repeatedInt64 = _repeatedInt64
      clone._repeatedUint32 = _repeatedUint32
      clone._repeatedUint64 = _repeatedUint64
      clone._repeatedSint32 = _repeatedSint32
      clone._repeatedSint64 = _repeatedSint64
      clone._repeatedFixed32 = _repeatedFixed32
      clone._repeatedFixed64 = _repeatedFixed64
      clone._repeatedSfixed32 = _repeatedSfixed32
      clone._repeatedSfixed64 = _repeatedSfixed64
      clone._repeatedFloat = _repeatedFloat
      clone._repeatedDouble = _repeatedDouble
      clone._repeatedBool = _repeatedBool
      clone._repeatedString = _repeatedString
      clone._repeatedBytes = _repeatedBytes
      clone._repeatedMessage = _repeatedMessage
      clone._repeatedEnum = _repeatedEnum
      clone._o = _o
      clone._mapInt32Int32 = _mapInt32Int32
      clone._mapInt64Int64 = _mapInt64Int64
      clone._mapUint32Uint32 = _mapUint32Uint32
      clone._mapUint64Uint64 = _mapUint64Uint64
      clone._mapSint32Sint32 = _mapSint32Sint32
      clone._mapSint64Sint64 = _mapSint64Sint64
      clone._mapFixed32Fixed32 = _mapFixed32Fixed32
      clone._mapFixed64Fixed64 = _mapFixed64Fixed64
      clone._mapSfixed32Sfixed32 = _mapSfixed32Sfixed32
      clone._mapSfixed64Sfixed64 = _mapSfixed64Sfixed64
      clone._mapInt32Float = _mapInt32Float
      clone._mapInt32Double = _mapInt32Double
      clone._mapBoolBool = _mapBoolBool
      clone._mapStringString = _mapStringString
      clone._mapStringBytes = _mapStringBytes
      clone._mapStringMessage = _mapStringMessage
      clone._mapInt32Bytes = _mapInt32Bytes
      clone._mapInt32Enum = _mapInt32Enum
      clone._mapInt32Message = _mapInt32Message
      return clone
    }
  }

  private var _storage = _StorageClass()

  public enum OneOf_O: ExpressibleByNilLiteral, ProtobufOneofEnum {
    case oneofInt32(Int32)
    case oneofInt64(Int64)
    case oneofUint32(UInt32)
    case oneofUint64(UInt64)
    case oneofSint32(Int32)
    case oneofSint64(Int64)
    case oneofFixed32(UInt32)
    case oneofFixed64(UInt64)
    case oneofSfixed32(Int32)
    case oneofSfixed64(Int64)
    case oneofFloat(Float)
    case oneofDouble(Double)
    case oneofBool(Bool)
    case oneofString(String)
    case oneofBytes(Data)
    case oneofMessage(ProtobufUnittest_Message3)
    case oneofEnum(ProtobufUnittest_Message3.Enum)
    case None

    public init(nilLiteral: ()) {
      self = .None
    }

    public init() {
      self = .None
    }

    public mutating func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      if self != .None && setter.rejectConflictingOneof {
        throw ProtobufDecodingError.duplicatedOneOf
      }
      let handled: Bool
      switch protoFieldNumber {
      case 51:
        var value = Int32()
        handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &value)
        self = .oneofInt32(value)
      case 52:
        var value = Int64()
        handled = try setter.decodeSingularField(fieldType: ProtobufInt64.self, value: &value)
        self = .oneofInt64(value)
      case 53:
        var value = UInt32()
        handled = try setter.decodeSingularField(fieldType: ProtobufUInt32.self, value: &value)
        self = .oneofUint32(value)
      case 54:
        var value = UInt64()
        handled = try setter.decodeSingularField(fieldType: ProtobufUInt64.self, value: &value)
        self = .oneofUint64(value)
      case 55:
        var value = Int32()
        handled = try setter.decodeSingularField(fieldType: ProtobufSInt32.self, value: &value)
        self = .oneofSint32(value)
      case 56:
        var value = Int64()
        handled = try setter.decodeSingularField(fieldType: ProtobufSInt64.self, value: &value)
        self = .oneofSint64(value)
      case 57:
        var value = UInt32()
        handled = try setter.decodeSingularField(fieldType: ProtobufFixed32.self, value: &value)
        self = .oneofFixed32(value)
      case 58:
        var value = UInt64()
        handled = try setter.decodeSingularField(fieldType: ProtobufFixed64.self, value: &value)
        self = .oneofFixed64(value)
      case 59:
        var value = Int32()
        handled = try setter.decodeSingularField(fieldType: ProtobufSFixed32.self, value: &value)
        self = .oneofSfixed32(value)
      case 60:
        var value = Int64()
        handled = try setter.decodeSingularField(fieldType: ProtobufSFixed64.self, value: &value)
        self = .oneofSfixed64(value)
      case 61:
        var value = Float()
        handled = try setter.decodeSingularField(fieldType: ProtobufFloat.self, value: &value)
        self = .oneofFloat(value)
      case 62:
        var value = Double()
        handled = try setter.decodeSingularField(fieldType: ProtobufDouble.self, value: &value)
        self = .oneofDouble(value)
      case 63:
        var value = Bool()
        handled = try setter.decodeSingularField(fieldType: ProtobufBool.self, value: &value)
        self = .oneofBool(value)
      case 64:
        var value = String()
        handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &value)
        self = .oneofString(value)
      case 65:
        var value = Data()
        handled = try setter.decodeSingularField(fieldType: ProtobufBytes.self, value: &value)
        self = .oneofBytes(value)
      case 68:
        var value: ProtobufUnittest_Message3?
        handled = try setter.decodeOptionalMessageField(fieldType: ProtobufUnittest_Message3.self, value: &value)
        if let value = value, handled {
          self = .oneofMessage(value)
        }
      case 69:
        var value = ProtobufUnittest_Message3.Enum()
        handled = try setter.decodeSingularField(fieldType: ProtobufUnittest_Message3.Enum.self, value: &value)
        self = .oneofEnum(value)
      default:
        handled = false
        self = .None
      }
      return handled
    }

    public func traverse(visitor: inout ProtobufVisitor, start: Int, end: Int) throws {
      switch self {
      case .oneofInt32(let v):
        if start <= 51 && 51 < end {
          try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: v, protoFieldNumber: 51, protoFieldName: "oneof_int32", jsonFieldName: "oneofInt32", swiftFieldName: "oneofInt32")
        }
      case .oneofInt64(let v):
        if start <= 52 && 52 < end {
          try visitor.visitSingularField(fieldType: ProtobufInt64.self, value: v, protoFieldNumber: 52, protoFieldName: "oneof_int64", jsonFieldName: "oneofInt64", swiftFieldName: "oneofInt64")
        }
      case .oneofUint32(let v):
        if start <= 53 && 53 < end {
          try visitor.visitSingularField(fieldType: ProtobufUInt32.self, value: v, protoFieldNumber: 53, protoFieldName: "oneof_uint32", jsonFieldName: "oneofUint32", swiftFieldName: "oneofUint32")
        }
      case .oneofUint64(let v):
        if start <= 54 && 54 < end {
          try visitor.visitSingularField(fieldType: ProtobufUInt64.self, value: v, protoFieldNumber: 54, protoFieldName: "oneof_uint64", jsonFieldName: "oneofUint64", swiftFieldName: "oneofUint64")
        }
      case .oneofSint32(let v):
        if start <= 55 && 55 < end {
          try visitor.visitSingularField(fieldType: ProtobufSInt32.self, value: v, protoFieldNumber: 55, protoFieldName: "oneof_sint32", jsonFieldName: "oneofSint32", swiftFieldName: "oneofSint32")
        }
      case .oneofSint64(let v):
        if start <= 56 && 56 < end {
          try visitor.visitSingularField(fieldType: ProtobufSInt64.self, value: v, protoFieldNumber: 56, protoFieldName: "oneof_sint64", jsonFieldName: "oneofSint64", swiftFieldName: "oneofSint64")
        }
      case .oneofFixed32(let v):
        if start <= 57 && 57 < end {
          try visitor.visitSingularField(fieldType: ProtobufFixed32.self, value: v, protoFieldNumber: 57, protoFieldName: "oneof_fixed32", jsonFieldName: "oneofFixed32", swiftFieldName: "oneofFixed32")
        }
      case .oneofFixed64(let v):
        if start <= 58 && 58 < end {
          try visitor.visitSingularField(fieldType: ProtobufFixed64.self, value: v, protoFieldNumber: 58, protoFieldName: "oneof_fixed64", jsonFieldName: "oneofFixed64", swiftFieldName: "oneofFixed64")
        }
      case .oneofSfixed32(let v):
        if start <= 59 && 59 < end {
          try visitor.visitSingularField(fieldType: ProtobufSFixed32.self, value: v, protoFieldNumber: 59, protoFieldName: "oneof_sfixed32", jsonFieldName: "oneofSfixed32", swiftFieldName: "oneofSfixed32")
        }
      case .oneofSfixed64(let v):
        if start <= 60 && 60 < end {
          try visitor.visitSingularField(fieldType: ProtobufSFixed64.self, value: v, protoFieldNumber: 60, protoFieldName: "oneof_sfixed64", jsonFieldName: "oneofSfixed64", swiftFieldName: "oneofSfixed64")
        }
      case .oneofFloat(let v):
        if start <= 61 && 61 < end {
          try visitor.visitSingularField(fieldType: ProtobufFloat.self, value: v, protoFieldNumber: 61, protoFieldName: "oneof_float", jsonFieldName: "oneofFloat", swiftFieldName: "oneofFloat")
        }
      case .oneofDouble(let v):
        if start <= 62 && 62 < end {
          try visitor.visitSingularField(fieldType: ProtobufDouble.self, value: v, protoFieldNumber: 62, protoFieldName: "oneof_double", jsonFieldName: "oneofDouble", swiftFieldName: "oneofDouble")
        }
      case .oneofBool(let v):
        if start <= 63 && 63 < end {
          try visitor.visitSingularField(fieldType: ProtobufBool.self, value: v, protoFieldNumber: 63, protoFieldName: "oneof_bool", jsonFieldName: "oneofBool", swiftFieldName: "oneofBool")
        }
      case .oneofString(let v):
        if start <= 64 && 64 < end {
          try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 64, protoFieldName: "oneof_string", jsonFieldName: "oneofString", swiftFieldName: "oneofString")
        }
      case .oneofBytes(let v):
        if start <= 65 && 65 < end {
          try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: v, protoFieldNumber: 65, protoFieldName: "oneof_bytes", jsonFieldName: "oneofBytes", swiftFieldName: "oneofBytes")
        }
      case .oneofMessage(let v):
        if start <= 68 && 68 < end {
          try visitor.visitSingularMessageField(value: v, protoFieldNumber: 68, protoFieldName: "oneof_message", jsonFieldName: "oneofMessage", swiftFieldName: "oneofMessage")
        }
      case .oneofEnum(let v):
        if start <= 69 && 69 < end {
          try visitor.visitSingularField(fieldType: ProtobufUnittest_Message3.Enum.self, value: v, protoFieldNumber: 69, protoFieldName: "oneof_enum", jsonFieldName: "oneofEnum", swiftFieldName: "oneofEnum")
        }
      case .None:
        break
      }
    }
  }

  public enum Enum: ProtobufEnum {
    public typealias RawValue = Int
    case foo // = 0
    case bar // = 1
    case baz // = 2
    case extra3 // = 30
    case UNRECOGNIZED(Int)

    public init() {
      self = .foo
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .foo
      case 1: self = .bar
      case 2: self = .baz
      case 30: self = .extra3
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public init?(name: String) {
      switch name {
      case "foo": self = .foo
      case "bar": self = .bar
      case "baz": self = .baz
      case "extra3": self = .extra3
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "FOO": self = .foo
      case "BAR": self = .bar
      case "BAZ": self = .baz
      case "EXTRA_3": self = .extra3
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "FOO": self = .foo
      case "BAR": self = .bar
      case "BAZ": self = .baz
      case "EXTRA_3": self = .extra3
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .foo: return 0
        case .bar: return 1
        case .baz: return 2
        case .extra3: return 30
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .foo: return "\"FOO\""
        case .bar: return "\"BAR\""
        case .baz: return "\"BAZ\""
        case .extra3: return "\"EXTRA_3\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .foo: return ".foo"
        case .bar: return ".bar"
        case .baz: return ".baz"
        case .extra3: return ".extra3"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  public var optionalInt32: Int32 {
    get {return _storage._optionalInt32}
    set {_uniqueStorage()._optionalInt32 = newValue}
  }

  public var optionalInt64: Int64 {
    get {return _storage._optionalInt64}
    set {_uniqueStorage()._optionalInt64 = newValue}
  }

  public var optionalUint32: UInt32 {
    get {return _storage._optionalUint32}
    set {_uniqueStorage()._optionalUint32 = newValue}
  }

  public var optionalUint64: UInt64 {
    get {return _storage._optionalUint64}
    set {_uniqueStorage()._optionalUint64 = newValue}
  }

  public var optionalSint32: Int32 {
    get {return _storage._optionalSint32}
    set {_uniqueStorage()._optionalSint32 = newValue}
  }

  public var optionalSint64: Int64 {
    get {return _storage._optionalSint64}
    set {_uniqueStorage()._optionalSint64 = newValue}
  }

  public var optionalFixed32: UInt32 {
    get {return _storage._optionalFixed32}
    set {_uniqueStorage()._optionalFixed32 = newValue}
  }

  public var optionalFixed64: UInt64 {
    get {return _storage._optionalFixed64}
    set {_uniqueStorage()._optionalFixed64 = newValue}
  }

  public var optionalSfixed32: Int32 {
    get {return _storage._optionalSfixed32}
    set {_uniqueStorage()._optionalSfixed32 = newValue}
  }

  public var optionalSfixed64: Int64 {
    get {return _storage._optionalSfixed64}
    set {_uniqueStorage()._optionalSfixed64 = newValue}
  }

  public var optionalFloat: Float {
    get {return _storage._optionalFloat}
    set {_uniqueStorage()._optionalFloat = newValue}
  }

  public var optionalDouble: Double {
    get {return _storage._optionalDouble}
    set {_uniqueStorage()._optionalDouble = newValue}
  }

  public var optionalBool: Bool {
    get {return _storage._optionalBool}
    set {_uniqueStorage()._optionalBool = newValue}
  }

  public var optionalString: String {
    get {return _storage._optionalString}
    set {_uniqueStorage()._optionalString = newValue}
  }

  public var optionalBytes: Data {
    get {return _storage._optionalBytes}
    set {_uniqueStorage()._optionalBytes = newValue}
  }

  ///   No 'group' in proto3.
  public var optionalMessage: ProtobufUnittest_Message3 {
    get {return _storage._optionalMessage ?? ProtobufUnittest_Message3()}
    set {_uniqueStorage()._optionalMessage = newValue}
  }
  public var hasOptionalMessage: Bool {
    return _storage._optionalMessage != nil
  }
  public mutating func clearOptionalMessage() {
    return _storage._optionalMessage = nil
  }

  public var optionalEnum: ProtobufUnittest_Message3.Enum {
    get {return _storage._optionalEnum}
    set {_uniqueStorage()._optionalEnum = newValue}
  }

  public var repeatedInt32: [Int32] {
    get {return _storage._repeatedInt32}
    set {_uniqueStorage()._repeatedInt32 = newValue}
  }

  public var repeatedInt64: [Int64] {
    get {return _storage._repeatedInt64}
    set {_uniqueStorage()._repeatedInt64 = newValue}
  }

  public var repeatedUint32: [UInt32] {
    get {return _storage._repeatedUint32}
    set {_uniqueStorage()._repeatedUint32 = newValue}
  }

  public var repeatedUint64: [UInt64] {
    get {return _storage._repeatedUint64}
    set {_uniqueStorage()._repeatedUint64 = newValue}
  }

  public var repeatedSint32: [Int32] {
    get {return _storage._repeatedSint32}
    set {_uniqueStorage()._repeatedSint32 = newValue}
  }

  public var repeatedSint64: [Int64] {
    get {return _storage._repeatedSint64}
    set {_uniqueStorage()._repeatedSint64 = newValue}
  }

  public var repeatedFixed32: [UInt32] {
    get {return _storage._repeatedFixed32}
    set {_uniqueStorage()._repeatedFixed32 = newValue}
  }

  public var repeatedFixed64: [UInt64] {
    get {return _storage._repeatedFixed64}
    set {_uniqueStorage()._repeatedFixed64 = newValue}
  }

  public var repeatedSfixed32: [Int32] {
    get {return _storage._repeatedSfixed32}
    set {_uniqueStorage()._repeatedSfixed32 = newValue}
  }

  public var repeatedSfixed64: [Int64] {
    get {return _storage._repeatedSfixed64}
    set {_uniqueStorage()._repeatedSfixed64 = newValue}
  }

  public var repeatedFloat: [Float] {
    get {return _storage._repeatedFloat}
    set {_uniqueStorage()._repeatedFloat = newValue}
  }

  public var repeatedDouble: [Double] {
    get {return _storage._repeatedDouble}
    set {_uniqueStorage()._repeatedDouble = newValue}
  }

  public var repeatedBool: [Bool] {
    get {return _storage._repeatedBool}
    set {_uniqueStorage()._repeatedBool = newValue}
  }

  public var repeatedString: [String] {
    get {return _storage._repeatedString}
    set {_uniqueStorage()._repeatedString = newValue}
  }

  public var repeatedBytes: [Data] {
    get {return _storage._repeatedBytes}
    set {_uniqueStorage()._repeatedBytes = newValue}
  }

  ///   No 'group' in proto3.
  public var repeatedMessage: [ProtobufUnittest_Message3] {
    get {return _storage._repeatedMessage}
    set {_uniqueStorage()._repeatedMessage = newValue}
  }

  public var repeatedEnum: [ProtobufUnittest_Message3.Enum] {
    get {return _storage._repeatedEnum}
    set {_uniqueStorage()._repeatedEnum = newValue}
  }

  public var oneofInt32: Int32 {
    get {
      if case .oneofInt32(let v) = _storage._o {
        return v
      }
      return 0
    }
    set {
      _uniqueStorage()._o = .oneofInt32(newValue)
    }
  }

  public var oneofInt64: Int64 {
    get {
      if case .oneofInt64(let v) = _storage._o {
        return v
      }
      return 0
    }
    set {
      _uniqueStorage()._o = .oneofInt64(newValue)
    }
  }

  public var oneofUint32: UInt32 {
    get {
      if case .oneofUint32(let v) = _storage._o {
        return v
      }
      return 0
    }
    set {
      _uniqueStorage()._o = .oneofUint32(newValue)
    }
  }

  public var oneofUint64: UInt64 {
    get {
      if case .oneofUint64(let v) = _storage._o {
        return v
      }
      return 0
    }
    set {
      _uniqueStorage()._o = .oneofUint64(newValue)
    }
  }

  public var oneofSint32: Int32 {
    get {
      if case .oneofSint32(let v) = _storage._o {
        return v
      }
      return 0
    }
    set {
      _uniqueStorage()._o = .oneofSint32(newValue)
    }
  }

  public var oneofSint64: Int64 {
    get {
      if case .oneofSint64(let v) = _storage._o {
        return v
      }
      return 0
    }
    set {
      _uniqueStorage()._o = .oneofSint64(newValue)
    }
  }

  public var oneofFixed32: UInt32 {
    get {
      if case .oneofFixed32(let v) = _storage._o {
        return v
      }
      return 0
    }
    set {
      _uniqueStorage()._o = .oneofFixed32(newValue)
    }
  }

  public var oneofFixed64: UInt64 {
    get {
      if case .oneofFixed64(let v) = _storage._o {
        return v
      }
      return 0
    }
    set {
      _uniqueStorage()._o = .oneofFixed64(newValue)
    }
  }

  public var oneofSfixed32: Int32 {
    get {
      if case .oneofSfixed32(let v) = _storage._o {
        return v
      }
      return 0
    }
    set {
      _uniqueStorage()._o = .oneofSfixed32(newValue)
    }
  }

  public var oneofSfixed64: Int64 {
    get {
      if case .oneofSfixed64(let v) = _storage._o {
        return v
      }
      return 0
    }
    set {
      _uniqueStorage()._o = .oneofSfixed64(newValue)
    }
  }

  public var oneofFloat: Float {
    get {
      if case .oneofFloat(let v) = _storage._o {
        return v
      }
      return 0
    }
    set {
      _uniqueStorage()._o = .oneofFloat(newValue)
    }
  }

  public var oneofDouble: Double {
    get {
      if case .oneofDouble(let v) = _storage._o {
        return v
      }
      return 0
    }
    set {
      _uniqueStorage()._o = .oneofDouble(newValue)
    }
  }

  public var oneofBool: Bool {
    get {
      if case .oneofBool(let v) = _storage._o {
        return v
      }
      return false
    }
    set {
      _uniqueStorage()._o = .oneofBool(newValue)
    }
  }

  public var oneofString: String {
    get {
      if case .oneofString(let v) = _storage._o {
        return v
      }
      return ""
    }
    set {
      _uniqueStorage()._o = .oneofString(newValue)
    }
  }

  public var oneofBytes: Data {
    get {
      if case .oneofBytes(let v) = _storage._o {
        return v
      }
      return Data()
    }
    set {
      _uniqueStorage()._o = .oneofBytes(newValue)
    }
  }

  ///   No 'group' in proto3.
  public var oneofMessage: ProtobufUnittest_Message3 {
    get {
      if case .oneofMessage(let v) = _storage._o {
        return v
      }
      return ProtobufUnittest_Message3()
    }
    set {
      _uniqueStorage()._o = .oneofMessage(newValue)
    }
  }

  public var oneofEnum: ProtobufUnittest_Message3.Enum {
    get {
      if case .oneofEnum(let v) = _storage._o {
        return v
      }
      return ProtobufUnittest_Message3.Enum.foo
    }
    set {
      _uniqueStorage()._o = .oneofEnum(newValue)
    }
  }

  ///   Some token map cases, too many combinations to list them all.
  public var mapInt32Int32: Dictionary<Int32,Int32> {
    get {return _storage._mapInt32Int32}
    set {_uniqueStorage()._mapInt32Int32 = newValue}
  }

  public var mapInt64Int64: Dictionary<Int64,Int64> {
    get {return _storage._mapInt64Int64}
    set {_uniqueStorage()._mapInt64Int64 = newValue}
  }

  public var mapUint32Uint32: Dictionary<UInt32,UInt32> {
    get {return _storage._mapUint32Uint32}
    set {_uniqueStorage()._mapUint32Uint32 = newValue}
  }

  public var mapUint64Uint64: Dictionary<UInt64,UInt64> {
    get {return _storage._mapUint64Uint64}
    set {_uniqueStorage()._mapUint64Uint64 = newValue}
  }

  public var mapSint32Sint32: Dictionary<Int32,Int32> {
    get {return _storage._mapSint32Sint32}
    set {_uniqueStorage()._mapSint32Sint32 = newValue}
  }

  public var mapSint64Sint64: Dictionary<Int64,Int64> {
    get {return _storage._mapSint64Sint64}
    set {_uniqueStorage()._mapSint64Sint64 = newValue}
  }

  public var mapFixed32Fixed32: Dictionary<UInt32,UInt32> {
    get {return _storage._mapFixed32Fixed32}
    set {_uniqueStorage()._mapFixed32Fixed32 = newValue}
  }

  public var mapFixed64Fixed64: Dictionary<UInt64,UInt64> {
    get {return _storage._mapFixed64Fixed64}
    set {_uniqueStorage()._mapFixed64Fixed64 = newValue}
  }

  public var mapSfixed32Sfixed32: Dictionary<Int32,Int32> {
    get {return _storage._mapSfixed32Sfixed32}
    set {_uniqueStorage()._mapSfixed32Sfixed32 = newValue}
  }

  public var mapSfixed64Sfixed64: Dictionary<Int64,Int64> {
    get {return _storage._mapSfixed64Sfixed64}
    set {_uniqueStorage()._mapSfixed64Sfixed64 = newValue}
  }

  public var mapInt32Float: Dictionary<Int32,Float> {
    get {return _storage._mapInt32Float}
    set {_uniqueStorage()._mapInt32Float = newValue}
  }

  public var mapInt32Double: Dictionary<Int32,Double> {
    get {return _storage._mapInt32Double}
    set {_uniqueStorage()._mapInt32Double = newValue}
  }

  public var mapBoolBool: Dictionary<Bool,Bool> {
    get {return _storage._mapBoolBool}
    set {_uniqueStorage()._mapBoolBool = newValue}
  }

  public var mapStringString: Dictionary<String,String> {
    get {return _storage._mapStringString}
    set {_uniqueStorage()._mapStringString = newValue}
  }

  public var mapStringBytes: Dictionary<String,Data> {
    get {return _storage._mapStringBytes}
    set {_uniqueStorage()._mapStringBytes = newValue}
  }

  public var mapStringMessage: Dictionary<String,ProtobufUnittest_Message3> {
    get {return _storage._mapStringMessage}
    set {_uniqueStorage()._mapStringMessage = newValue}
  }

  public var mapInt32Bytes: Dictionary<Int32,Data> {
    get {return _storage._mapInt32Bytes}
    set {_uniqueStorage()._mapInt32Bytes = newValue}
  }

  public var mapInt32Enum: Dictionary<Int32,ProtobufUnittest_Message3.Enum> {
    get {return _storage._mapInt32Enum}
    set {_uniqueStorage()._mapInt32Enum = newValue}
  }

  public var mapInt32Message: Dictionary<Int32,ProtobufUnittest_Message3> {
    get {return _storage._mapInt32Message}
    set {_uniqueStorage()._mapInt32Message = newValue}
  }

  public var o: OneOf_O {
    get {return _storage._o}
    set {
      _uniqueStorage()._o = newValue
    }
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_Message3) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

public func ==(lhs: ProtobufUnittest_Message3.OneOf_O, rhs: ProtobufUnittest_Message3.OneOf_O) -> Bool {
  switch (lhs, rhs) {
  case (.oneofInt32(let l), .oneofInt32(let r)): return l == r
  case (.oneofInt64(let l), .oneofInt64(let r)): return l == r
  case (.oneofUint32(let l), .oneofUint32(let r)): return l == r
  case (.oneofUint64(let l), .oneofUint64(let r)): return l == r
  case (.oneofSint32(let l), .oneofSint32(let r)): return l == r
  case (.oneofSint64(let l), .oneofSint64(let r)): return l == r
  case (.oneofFixed32(let l), .oneofFixed32(let r)): return l == r
  case (.oneofFixed64(let l), .oneofFixed64(let r)): return l == r
  case (.oneofSfixed32(let l), .oneofSfixed32(let r)): return l == r
  case (.oneofSfixed64(let l), .oneofSfixed64(let r)): return l == r
  case (.oneofFloat(let l), .oneofFloat(let r)): return l == r
  case (.oneofDouble(let l), .oneofDouble(let r)): return l == r
  case (.oneofBool(let l), .oneofBool(let r)): return l == r
  case (.oneofString(let l), .oneofString(let r)): return l == r
  case (.oneofBytes(let l), .oneofBytes(let r)): return l == r
  case (.oneofMessage(let l), .oneofMessage(let r)): return l == r
  case (.oneofEnum(let l), .oneofEnum(let r)): return l == r
  case (.None, .None): return true
  default: return false
  }
}
