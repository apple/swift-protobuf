// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/protobuf/unittest_no_arena.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

// Protocol Buffers - Google's data interchange format
// Copyright 2008 Google Inc.  All rights reserved.
// https://developers.google.com/protocol-buffers/
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Author: kenton@google.com (Kenton Varda)
//  Based on original Protocol Buffers design by
//  Sanjay Ghemawat, Jeff Dean, and others.
//
// This proto file contains copies of TestAllTypes and friends, but with arena
// support disabled in code generation. It allows us to test the performance
// impact against baseline (non-arena) google.protobuf.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum ProtobufUnittestNoArena_ForeignEnum: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case foreignFoo // = 4
  case foreignBar // = 5
  case foreignBaz // = 6

  init() {
    self = .foreignFoo
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 4: self = .foreignFoo
    case 5: self = .foreignBar
    case 6: self = .foreignBaz
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .foreignFoo: return 4
    case .foreignBar: return 5
    case .foreignBaz: return 6
    }
  }

}

/// This proto includes every type of field in both singular and repeated
/// forms.
struct ProtobufUnittestNoArena_TestAllTypes {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Singular
  var optionalInt32: Int32 {
    get {return _storage._optionalInt32 ?? 0}
    set {_uniqueStorage()._optionalInt32 = newValue}
  }
  /// Returns true if `optionalInt32` has been explicitly set.
  var hasOptionalInt32: Bool {return _storage._optionalInt32 != nil}
  /// Clears the value of `optionalInt32`. Subsequent reads from it will return its default value.
  mutating func clearOptionalInt32() {_storage._optionalInt32 = nil}

  var optionalInt64: Int64 {
    get {return _storage._optionalInt64 ?? 0}
    set {_uniqueStorage()._optionalInt64 = newValue}
  }
  /// Returns true if `optionalInt64` has been explicitly set.
  var hasOptionalInt64: Bool {return _storage._optionalInt64 != nil}
  /// Clears the value of `optionalInt64`. Subsequent reads from it will return its default value.
  mutating func clearOptionalInt64() {_storage._optionalInt64 = nil}

  var optionalUint32: UInt32 {
    get {return _storage._optionalUint32 ?? 0}
    set {_uniqueStorage()._optionalUint32 = newValue}
  }
  /// Returns true if `optionalUint32` has been explicitly set.
  var hasOptionalUint32: Bool {return _storage._optionalUint32 != nil}
  /// Clears the value of `optionalUint32`. Subsequent reads from it will return its default value.
  mutating func clearOptionalUint32() {_storage._optionalUint32 = nil}

  var optionalUint64: UInt64 {
    get {return _storage._optionalUint64 ?? 0}
    set {_uniqueStorage()._optionalUint64 = newValue}
  }
  /// Returns true if `optionalUint64` has been explicitly set.
  var hasOptionalUint64: Bool {return _storage._optionalUint64 != nil}
  /// Clears the value of `optionalUint64`. Subsequent reads from it will return its default value.
  mutating func clearOptionalUint64() {_storage._optionalUint64 = nil}

  var optionalSint32: Int32 {
    get {return _storage._optionalSint32 ?? 0}
    set {_uniqueStorage()._optionalSint32 = newValue}
  }
  /// Returns true if `optionalSint32` has been explicitly set.
  var hasOptionalSint32: Bool {return _storage._optionalSint32 != nil}
  /// Clears the value of `optionalSint32`. Subsequent reads from it will return its default value.
  mutating func clearOptionalSint32() {_storage._optionalSint32 = nil}

  var optionalSint64: Int64 {
    get {return _storage._optionalSint64 ?? 0}
    set {_uniqueStorage()._optionalSint64 = newValue}
  }
  /// Returns true if `optionalSint64` has been explicitly set.
  var hasOptionalSint64: Bool {return _storage._optionalSint64 != nil}
  /// Clears the value of `optionalSint64`. Subsequent reads from it will return its default value.
  mutating func clearOptionalSint64() {_storage._optionalSint64 = nil}

  var optionalFixed32: UInt32 {
    get {return _storage._optionalFixed32 ?? 0}
    set {_uniqueStorage()._optionalFixed32 = newValue}
  }
  /// Returns true if `optionalFixed32` has been explicitly set.
  var hasOptionalFixed32: Bool {return _storage._optionalFixed32 != nil}
  /// Clears the value of `optionalFixed32`. Subsequent reads from it will return its default value.
  mutating func clearOptionalFixed32() {_storage._optionalFixed32 = nil}

  var optionalFixed64: UInt64 {
    get {return _storage._optionalFixed64 ?? 0}
    set {_uniqueStorage()._optionalFixed64 = newValue}
  }
  /// Returns true if `optionalFixed64` has been explicitly set.
  var hasOptionalFixed64: Bool {return _storage._optionalFixed64 != nil}
  /// Clears the value of `optionalFixed64`. Subsequent reads from it will return its default value.
  mutating func clearOptionalFixed64() {_storage._optionalFixed64 = nil}

  var optionalSfixed32: Int32 {
    get {return _storage._optionalSfixed32 ?? 0}
    set {_uniqueStorage()._optionalSfixed32 = newValue}
  }
  /// Returns true if `optionalSfixed32` has been explicitly set.
  var hasOptionalSfixed32: Bool {return _storage._optionalSfixed32 != nil}
  /// Clears the value of `optionalSfixed32`. Subsequent reads from it will return its default value.
  mutating func clearOptionalSfixed32() {_storage._optionalSfixed32 = nil}

  var optionalSfixed64: Int64 {
    get {return _storage._optionalSfixed64 ?? 0}
    set {_uniqueStorage()._optionalSfixed64 = newValue}
  }
  /// Returns true if `optionalSfixed64` has been explicitly set.
  var hasOptionalSfixed64: Bool {return _storage._optionalSfixed64 != nil}
  /// Clears the value of `optionalSfixed64`. Subsequent reads from it will return its default value.
  mutating func clearOptionalSfixed64() {_storage._optionalSfixed64 = nil}

  var optionalFloat: Float {
    get {return _storage._optionalFloat ?? 0}
    set {_uniqueStorage()._optionalFloat = newValue}
  }
  /// Returns true if `optionalFloat` has been explicitly set.
  var hasOptionalFloat: Bool {return _storage._optionalFloat != nil}
  /// Clears the value of `optionalFloat`. Subsequent reads from it will return its default value.
  mutating func clearOptionalFloat() {_storage._optionalFloat = nil}

  var optionalDouble: Double {
    get {return _storage._optionalDouble ?? 0}
    set {_uniqueStorage()._optionalDouble = newValue}
  }
  /// Returns true if `optionalDouble` has been explicitly set.
  var hasOptionalDouble: Bool {return _storage._optionalDouble != nil}
  /// Clears the value of `optionalDouble`. Subsequent reads from it will return its default value.
  mutating func clearOptionalDouble() {_storage._optionalDouble = nil}

  var optionalBool: Bool {
    get {return _storage._optionalBool ?? false}
    set {_uniqueStorage()._optionalBool = newValue}
  }
  /// Returns true if `optionalBool` has been explicitly set.
  var hasOptionalBool: Bool {return _storage._optionalBool != nil}
  /// Clears the value of `optionalBool`. Subsequent reads from it will return its default value.
  mutating func clearOptionalBool() {_storage._optionalBool = nil}

  var optionalString: String {
    get {return _storage._optionalString ?? String()}
    set {_uniqueStorage()._optionalString = newValue}
  }
  /// Returns true if `optionalString` has been explicitly set.
  var hasOptionalString: Bool {return _storage._optionalString != nil}
  /// Clears the value of `optionalString`. Subsequent reads from it will return its default value.
  mutating func clearOptionalString() {_storage._optionalString = nil}

  var optionalBytes: Data {
    get {return _storage._optionalBytes ?? SwiftProtobuf.Internal.emptyData}
    set {_uniqueStorage()._optionalBytes = newValue}
  }
  /// Returns true if `optionalBytes` has been explicitly set.
  var hasOptionalBytes: Bool {return _storage._optionalBytes != nil}
  /// Clears the value of `optionalBytes`. Subsequent reads from it will return its default value.
  mutating func clearOptionalBytes() {_storage._optionalBytes = nil}

  var optionalGroup: ProtobufUnittestNoArena_TestAllTypes.OptionalGroup {
    get {return _storage._optionalGroup ?? ProtobufUnittestNoArena_TestAllTypes.OptionalGroup()}
    set {_uniqueStorage()._optionalGroup = newValue}
  }
  /// Returns true if `optionalGroup` has been explicitly set.
  var hasOptionalGroup: Bool {return _storage._optionalGroup != nil}
  /// Clears the value of `optionalGroup`. Subsequent reads from it will return its default value.
  mutating func clearOptionalGroup() {_storage._optionalGroup = nil}

  var optionalNestedMessage: ProtobufUnittestNoArena_TestAllTypes.NestedMessage {
    get {return _storage._optionalNestedMessage ?? ProtobufUnittestNoArena_TestAllTypes.NestedMessage()}
    set {_uniqueStorage()._optionalNestedMessage = newValue}
  }
  /// Returns true if `optionalNestedMessage` has been explicitly set.
  var hasOptionalNestedMessage: Bool {return _storage._optionalNestedMessage != nil}
  /// Clears the value of `optionalNestedMessage`. Subsequent reads from it will return its default value.
  mutating func clearOptionalNestedMessage() {_storage._optionalNestedMessage = nil}

  var optionalForeignMessage: ProtobufUnittestNoArena_ForeignMessage {
    get {return _storage._optionalForeignMessage ?? ProtobufUnittestNoArena_ForeignMessage()}
    set {_uniqueStorage()._optionalForeignMessage = newValue}
  }
  /// Returns true if `optionalForeignMessage` has been explicitly set.
  var hasOptionalForeignMessage: Bool {return _storage._optionalForeignMessage != nil}
  /// Clears the value of `optionalForeignMessage`. Subsequent reads from it will return its default value.
  mutating func clearOptionalForeignMessage() {_storage._optionalForeignMessage = nil}

  var optionalImportMessage: ProtobufUnittestImport_ImportMessage {
    get {return _storage._optionalImportMessage ?? ProtobufUnittestImport_ImportMessage()}
    set {_uniqueStorage()._optionalImportMessage = newValue}
  }
  /// Returns true if `optionalImportMessage` has been explicitly set.
  var hasOptionalImportMessage: Bool {return _storage._optionalImportMessage != nil}
  /// Clears the value of `optionalImportMessage`. Subsequent reads from it will return its default value.
  mutating func clearOptionalImportMessage() {_storage._optionalImportMessage = nil}

  var optionalNestedEnum: ProtobufUnittestNoArena_TestAllTypes.NestedEnum {
    get {return _storage._optionalNestedEnum ?? .foo}
    set {_uniqueStorage()._optionalNestedEnum = newValue}
  }
  /// Returns true if `optionalNestedEnum` has been explicitly set.
  var hasOptionalNestedEnum: Bool {return _storage._optionalNestedEnum != nil}
  /// Clears the value of `optionalNestedEnum`. Subsequent reads from it will return its default value.
  mutating func clearOptionalNestedEnum() {_storage._optionalNestedEnum = nil}

  var optionalForeignEnum: ProtobufUnittestNoArena_ForeignEnum {
    get {return _storage._optionalForeignEnum ?? .foreignFoo}
    set {_uniqueStorage()._optionalForeignEnum = newValue}
  }
  /// Returns true if `optionalForeignEnum` has been explicitly set.
  var hasOptionalForeignEnum: Bool {return _storage._optionalForeignEnum != nil}
  /// Clears the value of `optionalForeignEnum`. Subsequent reads from it will return its default value.
  mutating func clearOptionalForeignEnum() {_storage._optionalForeignEnum = nil}

  var optionalImportEnum: ProtobufUnittestImport_ImportEnum {
    get {return _storage._optionalImportEnum ?? .importFoo}
    set {_uniqueStorage()._optionalImportEnum = newValue}
  }
  /// Returns true if `optionalImportEnum` has been explicitly set.
  var hasOptionalImportEnum: Bool {return _storage._optionalImportEnum != nil}
  /// Clears the value of `optionalImportEnum`. Subsequent reads from it will return its default value.
  mutating func clearOptionalImportEnum() {_storage._optionalImportEnum = nil}

  var optionalStringPiece: String {
    get {return _storage._optionalStringPiece ?? String()}
    set {_uniqueStorage()._optionalStringPiece = newValue}
  }
  /// Returns true if `optionalStringPiece` has been explicitly set.
  var hasOptionalStringPiece: Bool {return _storage._optionalStringPiece != nil}
  /// Clears the value of `optionalStringPiece`. Subsequent reads from it will return its default value.
  mutating func clearOptionalStringPiece() {_storage._optionalStringPiece = nil}

  var optionalCord: String {
    get {return _storage._optionalCord ?? String()}
    set {_uniqueStorage()._optionalCord = newValue}
  }
  /// Returns true if `optionalCord` has been explicitly set.
  var hasOptionalCord: Bool {return _storage._optionalCord != nil}
  /// Clears the value of `optionalCord`. Subsequent reads from it will return its default value.
  mutating func clearOptionalCord() {_storage._optionalCord = nil}

  /// Defined in unittest_import_public.proto
  var optionalPublicImportMessage: ProtobufUnittestImport_PublicImportMessage {
    get {return _storage._optionalPublicImportMessage ?? ProtobufUnittestImport_PublicImportMessage()}
    set {_uniqueStorage()._optionalPublicImportMessage = newValue}
  }
  /// Returns true if `optionalPublicImportMessage` has been explicitly set.
  var hasOptionalPublicImportMessage: Bool {return _storage._optionalPublicImportMessage != nil}
  /// Clears the value of `optionalPublicImportMessage`. Subsequent reads from it will return its default value.
  mutating func clearOptionalPublicImportMessage() {_storage._optionalPublicImportMessage = nil}

  var optionalMessage: ProtobufUnittestNoArena_TestAllTypes.NestedMessage {
    get {return _storage._optionalMessage ?? ProtobufUnittestNoArena_TestAllTypes.NestedMessage()}
    set {_uniqueStorage()._optionalMessage = newValue}
  }
  /// Returns true if `optionalMessage` has been explicitly set.
  var hasOptionalMessage: Bool {return _storage._optionalMessage != nil}
  /// Clears the value of `optionalMessage`. Subsequent reads from it will return its default value.
  mutating func clearOptionalMessage() {_storage._optionalMessage = nil}

  /// Repeated
  var repeatedInt32: [Int32] {
    get {return _storage._repeatedInt32}
    set {_uniqueStorage()._repeatedInt32 = newValue}
  }

  var repeatedInt64: [Int64] {
    get {return _storage._repeatedInt64}
    set {_uniqueStorage()._repeatedInt64 = newValue}
  }

  var repeatedUint32: [UInt32] {
    get {return _storage._repeatedUint32}
    set {_uniqueStorage()._repeatedUint32 = newValue}
  }

  var repeatedUint64: [UInt64] {
    get {return _storage._repeatedUint64}
    set {_uniqueStorage()._repeatedUint64 = newValue}
  }

  var repeatedSint32: [Int32] {
    get {return _storage._repeatedSint32}
    set {_uniqueStorage()._repeatedSint32 = newValue}
  }

  var repeatedSint64: [Int64] {
    get {return _storage._repeatedSint64}
    set {_uniqueStorage()._repeatedSint64 = newValue}
  }

  var repeatedFixed32: [UInt32] {
    get {return _storage._repeatedFixed32}
    set {_uniqueStorage()._repeatedFixed32 = newValue}
  }

  var repeatedFixed64: [UInt64] {
    get {return _storage._repeatedFixed64}
    set {_uniqueStorage()._repeatedFixed64 = newValue}
  }

  var repeatedSfixed32: [Int32] {
    get {return _storage._repeatedSfixed32}
    set {_uniqueStorage()._repeatedSfixed32 = newValue}
  }

  var repeatedSfixed64: [Int64] {
    get {return _storage._repeatedSfixed64}
    set {_uniqueStorage()._repeatedSfixed64 = newValue}
  }

  var repeatedFloat: [Float] {
    get {return _storage._repeatedFloat}
    set {_uniqueStorage()._repeatedFloat = newValue}
  }

  var repeatedDouble: [Double] {
    get {return _storage._repeatedDouble}
    set {_uniqueStorage()._repeatedDouble = newValue}
  }

  var repeatedBool: [Bool] {
    get {return _storage._repeatedBool}
    set {_uniqueStorage()._repeatedBool = newValue}
  }

  var repeatedString: [String] {
    get {return _storage._repeatedString}
    set {_uniqueStorage()._repeatedString = newValue}
  }

  var repeatedBytes: [Data] {
    get {return _storage._repeatedBytes}
    set {_uniqueStorage()._repeatedBytes = newValue}
  }

  var repeatedGroup: [ProtobufUnittestNoArena_TestAllTypes.RepeatedGroup] {
    get {return _storage._repeatedGroup}
    set {_uniqueStorage()._repeatedGroup = newValue}
  }

  var repeatedNestedMessage: [ProtobufUnittestNoArena_TestAllTypes.NestedMessage] {
    get {return _storage._repeatedNestedMessage}
    set {_uniqueStorage()._repeatedNestedMessage = newValue}
  }

  var repeatedForeignMessage: [ProtobufUnittestNoArena_ForeignMessage] {
    get {return _storage._repeatedForeignMessage}
    set {_uniqueStorage()._repeatedForeignMessage = newValue}
  }

  var repeatedImportMessage: [ProtobufUnittestImport_ImportMessage] {
    get {return _storage._repeatedImportMessage}
    set {_uniqueStorage()._repeatedImportMessage = newValue}
  }

  var repeatedNestedEnum: [ProtobufUnittestNoArena_TestAllTypes.NestedEnum] {
    get {return _storage._repeatedNestedEnum}
    set {_uniqueStorage()._repeatedNestedEnum = newValue}
  }

  var repeatedForeignEnum: [ProtobufUnittestNoArena_ForeignEnum] {
    get {return _storage._repeatedForeignEnum}
    set {_uniqueStorage()._repeatedForeignEnum = newValue}
  }

  var repeatedImportEnum: [ProtobufUnittestImport_ImportEnum] {
    get {return _storage._repeatedImportEnum}
    set {_uniqueStorage()._repeatedImportEnum = newValue}
  }

  var repeatedStringPiece: [String] {
    get {return _storage._repeatedStringPiece}
    set {_uniqueStorage()._repeatedStringPiece = newValue}
  }

  var repeatedCord: [String] {
    get {return _storage._repeatedCord}
    set {_uniqueStorage()._repeatedCord = newValue}
  }

  var repeatedLazyMessage: [ProtobufUnittestNoArena_TestAllTypes.NestedMessage] {
    get {return _storage._repeatedLazyMessage}
    set {_uniqueStorage()._repeatedLazyMessage = newValue}
  }

  /// Singular with defaults
  var defaultInt32: Int32 {
    get {return _storage._defaultInt32 ?? 41}
    set {_uniqueStorage()._defaultInt32 = newValue}
  }
  /// Returns true if `defaultInt32` has been explicitly set.
  var hasDefaultInt32: Bool {return _storage._defaultInt32 != nil}
  /// Clears the value of `defaultInt32`. Subsequent reads from it will return its default value.
  mutating func clearDefaultInt32() {_storage._defaultInt32 = nil}

  var defaultInt64: Int64 {
    get {return _storage._defaultInt64 ?? 42}
    set {_uniqueStorage()._defaultInt64 = newValue}
  }
  /// Returns true if `defaultInt64` has been explicitly set.
  var hasDefaultInt64: Bool {return _storage._defaultInt64 != nil}
  /// Clears the value of `defaultInt64`. Subsequent reads from it will return its default value.
  mutating func clearDefaultInt64() {_storage._defaultInt64 = nil}

  var defaultUint32: UInt32 {
    get {return _storage._defaultUint32 ?? 43}
    set {_uniqueStorage()._defaultUint32 = newValue}
  }
  /// Returns true if `defaultUint32` has been explicitly set.
  var hasDefaultUint32: Bool {return _storage._defaultUint32 != nil}
  /// Clears the value of `defaultUint32`. Subsequent reads from it will return its default value.
  mutating func clearDefaultUint32() {_storage._defaultUint32 = nil}

  var defaultUint64: UInt64 {
    get {return _storage._defaultUint64 ?? 44}
    set {_uniqueStorage()._defaultUint64 = newValue}
  }
  /// Returns true if `defaultUint64` has been explicitly set.
  var hasDefaultUint64: Bool {return _storage._defaultUint64 != nil}
  /// Clears the value of `defaultUint64`. Subsequent reads from it will return its default value.
  mutating func clearDefaultUint64() {_storage._defaultUint64 = nil}

  var defaultSint32: Int32 {
    get {return _storage._defaultSint32 ?? -45}
    set {_uniqueStorage()._defaultSint32 = newValue}
  }
  /// Returns true if `defaultSint32` has been explicitly set.
  var hasDefaultSint32: Bool {return _storage._defaultSint32 != nil}
  /// Clears the value of `defaultSint32`. Subsequent reads from it will return its default value.
  mutating func clearDefaultSint32() {_storage._defaultSint32 = nil}

  var defaultSint64: Int64 {
    get {return _storage._defaultSint64 ?? 46}
    set {_uniqueStorage()._defaultSint64 = newValue}
  }
  /// Returns true if `defaultSint64` has been explicitly set.
  var hasDefaultSint64: Bool {return _storage._defaultSint64 != nil}
  /// Clears the value of `defaultSint64`. Subsequent reads from it will return its default value.
  mutating func clearDefaultSint64() {_storage._defaultSint64 = nil}

  var defaultFixed32: UInt32 {
    get {return _storage._defaultFixed32 ?? 47}
    set {_uniqueStorage()._defaultFixed32 = newValue}
  }
  /// Returns true if `defaultFixed32` has been explicitly set.
  var hasDefaultFixed32: Bool {return _storage._defaultFixed32 != nil}
  /// Clears the value of `defaultFixed32`. Subsequent reads from it will return its default value.
  mutating func clearDefaultFixed32() {_storage._defaultFixed32 = nil}

  var defaultFixed64: UInt64 {
    get {return _storage._defaultFixed64 ?? 48}
    set {_uniqueStorage()._defaultFixed64 = newValue}
  }
  /// Returns true if `defaultFixed64` has been explicitly set.
  var hasDefaultFixed64: Bool {return _storage._defaultFixed64 != nil}
  /// Clears the value of `defaultFixed64`. Subsequent reads from it will return its default value.
  mutating func clearDefaultFixed64() {_storage._defaultFixed64 = nil}

  var defaultSfixed32: Int32 {
    get {return _storage._defaultSfixed32 ?? 49}
    set {_uniqueStorage()._defaultSfixed32 = newValue}
  }
  /// Returns true if `defaultSfixed32` has been explicitly set.
  var hasDefaultSfixed32: Bool {return _storage._defaultSfixed32 != nil}
  /// Clears the value of `defaultSfixed32`. Subsequent reads from it will return its default value.
  mutating func clearDefaultSfixed32() {_storage._defaultSfixed32 = nil}

  var defaultSfixed64: Int64 {
    get {return _storage._defaultSfixed64 ?? -50}
    set {_uniqueStorage()._defaultSfixed64 = newValue}
  }
  /// Returns true if `defaultSfixed64` has been explicitly set.
  var hasDefaultSfixed64: Bool {return _storage._defaultSfixed64 != nil}
  /// Clears the value of `defaultSfixed64`. Subsequent reads from it will return its default value.
  mutating func clearDefaultSfixed64() {_storage._defaultSfixed64 = nil}

  var defaultFloat: Float {
    get {return _storage._defaultFloat ?? 51.5}
    set {_uniqueStorage()._defaultFloat = newValue}
  }
  /// Returns true if `defaultFloat` has been explicitly set.
  var hasDefaultFloat: Bool {return _storage._defaultFloat != nil}
  /// Clears the value of `defaultFloat`. Subsequent reads from it will return its default value.
  mutating func clearDefaultFloat() {_storage._defaultFloat = nil}

  var defaultDouble: Double {
    get {return _storage._defaultDouble ?? 52000}
    set {_uniqueStorage()._defaultDouble = newValue}
  }
  /// Returns true if `defaultDouble` has been explicitly set.
  var hasDefaultDouble: Bool {return _storage._defaultDouble != nil}
  /// Clears the value of `defaultDouble`. Subsequent reads from it will return its default value.
  mutating func clearDefaultDouble() {_storage._defaultDouble = nil}

  var defaultBool: Bool {
    get {return _storage._defaultBool ?? true}
    set {_uniqueStorage()._defaultBool = newValue}
  }
  /// Returns true if `defaultBool` has been explicitly set.
  var hasDefaultBool: Bool {return _storage._defaultBool != nil}
  /// Clears the value of `defaultBool`. Subsequent reads from it will return its default value.
  mutating func clearDefaultBool() {_storage._defaultBool = nil}

  var defaultString: String {
    get {return _storage._defaultString ?? "hello"}
    set {_uniqueStorage()._defaultString = newValue}
  }
  /// Returns true if `defaultString` has been explicitly set.
  var hasDefaultString: Bool {return _storage._defaultString != nil}
  /// Clears the value of `defaultString`. Subsequent reads from it will return its default value.
  mutating func clearDefaultString() {_storage._defaultString = nil}

  var defaultBytes: Data {
    get {return _storage._defaultBytes ?? Data(bytes: [119, 111, 114, 108, 100])}
    set {_uniqueStorage()._defaultBytes = newValue}
  }
  /// Returns true if `defaultBytes` has been explicitly set.
  var hasDefaultBytes: Bool {return _storage._defaultBytes != nil}
  /// Clears the value of `defaultBytes`. Subsequent reads from it will return its default value.
  mutating func clearDefaultBytes() {_storage._defaultBytes = nil}

  var defaultNestedEnum: ProtobufUnittestNoArena_TestAllTypes.NestedEnum {
    get {return _storage._defaultNestedEnum ?? .bar}
    set {_uniqueStorage()._defaultNestedEnum = newValue}
  }
  /// Returns true if `defaultNestedEnum` has been explicitly set.
  var hasDefaultNestedEnum: Bool {return _storage._defaultNestedEnum != nil}
  /// Clears the value of `defaultNestedEnum`. Subsequent reads from it will return its default value.
  mutating func clearDefaultNestedEnum() {_storage._defaultNestedEnum = nil}

  var defaultForeignEnum: ProtobufUnittestNoArena_ForeignEnum {
    get {return _storage._defaultForeignEnum ?? .foreignBar}
    set {_uniqueStorage()._defaultForeignEnum = newValue}
  }
  /// Returns true if `defaultForeignEnum` has been explicitly set.
  var hasDefaultForeignEnum: Bool {return _storage._defaultForeignEnum != nil}
  /// Clears the value of `defaultForeignEnum`. Subsequent reads from it will return its default value.
  mutating func clearDefaultForeignEnum() {_storage._defaultForeignEnum = nil}

  var defaultImportEnum: ProtobufUnittestImport_ImportEnum {
    get {return _storage._defaultImportEnum ?? .importBar}
    set {_uniqueStorage()._defaultImportEnum = newValue}
  }
  /// Returns true if `defaultImportEnum` has been explicitly set.
  var hasDefaultImportEnum: Bool {return _storage._defaultImportEnum != nil}
  /// Clears the value of `defaultImportEnum`. Subsequent reads from it will return its default value.
  mutating func clearDefaultImportEnum() {_storage._defaultImportEnum = nil}

  var defaultStringPiece: String {
    get {return _storage._defaultStringPiece ?? "abc"}
    set {_uniqueStorage()._defaultStringPiece = newValue}
  }
  /// Returns true if `defaultStringPiece` has been explicitly set.
  var hasDefaultStringPiece: Bool {return _storage._defaultStringPiece != nil}
  /// Clears the value of `defaultStringPiece`. Subsequent reads from it will return its default value.
  mutating func clearDefaultStringPiece() {_storage._defaultStringPiece = nil}

  var defaultCord: String {
    get {return _storage._defaultCord ?? "123"}
    set {_uniqueStorage()._defaultCord = newValue}
  }
  /// Returns true if `defaultCord` has been explicitly set.
  var hasDefaultCord: Bool {return _storage._defaultCord != nil}
  /// Clears the value of `defaultCord`. Subsequent reads from it will return its default value.
  mutating func clearDefaultCord() {_storage._defaultCord = nil}

  /// For oneof test
  var oneofField: OneOf_OneofField? {
    get {return _storage._oneofField}
    set {_uniqueStorage()._oneofField = newValue}
  }

  var oneofUint32: UInt32 {
    get {
      if case .oneofUint32(let v)? = _storage._oneofField {return v}
      return 0
    }
    set {_uniqueStorage()._oneofField = .oneofUint32(newValue)}
  }

  var oneofNestedMessage: ProtobufUnittestNoArena_TestAllTypes.NestedMessage {
    get {
      if case .oneofNestedMessage(let v)? = _storage._oneofField {return v}
      return ProtobufUnittestNoArena_TestAllTypes.NestedMessage()
    }
    set {_uniqueStorage()._oneofField = .oneofNestedMessage(newValue)}
  }

  var oneofString: String {
    get {
      if case .oneofString(let v)? = _storage._oneofField {return v}
      return String()
    }
    set {_uniqueStorage()._oneofField = .oneofString(newValue)}
  }

  var oneofBytes: Data {
    get {
      if case .oneofBytes(let v)? = _storage._oneofField {return v}
      return SwiftProtobuf.Internal.emptyData
    }
    set {_uniqueStorage()._oneofField = .oneofBytes(newValue)}
  }

  var lazyOneofNestedMessage: ProtobufUnittestNoArena_TestAllTypes.NestedMessage {
    get {
      if case .lazyOneofNestedMessage(let v)? = _storage._oneofField {return v}
      return ProtobufUnittestNoArena_TestAllTypes.NestedMessage()
    }
    set {_uniqueStorage()._oneofField = .lazyOneofNestedMessage(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  /// For oneof test
  enum OneOf_OneofField: Equatable {
    case oneofUint32(UInt32)
    case oneofNestedMessage(ProtobufUnittestNoArena_TestAllTypes.NestedMessage)
    case oneofString(String)
    case oneofBytes(Data)
    case lazyOneofNestedMessage(ProtobufUnittestNoArena_TestAllTypes.NestedMessage)

    static func ==(lhs: ProtobufUnittestNoArena_TestAllTypes.OneOf_OneofField, rhs: ProtobufUnittestNoArena_TestAllTypes.OneOf_OneofField) -> Bool {
      switch (lhs, rhs) {
      case (.oneofUint32(let l), .oneofUint32(let r)): return l == r
      case (.oneofNestedMessage(let l), .oneofNestedMessage(let r)): return l == r
      case (.oneofString(let l), .oneofString(let r)): return l == r
      case (.oneofBytes(let l), .oneofBytes(let r)): return l == r
      case (.lazyOneofNestedMessage(let l), .lazyOneofNestedMessage(let r)): return l == r
      default: return false
      }
    }
  }

  enum NestedEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case foo // = 1
    case bar // = 2
    case baz // = 3

    /// Intentionally negative.
    case neg // = -1

    init() {
      self = .foo
    }

    init?(rawValue: Int) {
      switch rawValue {
      case -1: self = .neg
      case 1: self = .foo
      case 2: self = .bar
      case 3: self = .baz
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .neg: return -1
      case .foo: return 1
      case .bar: return 2
      case .baz: return 3
      }
    }

  }

  struct NestedMessage {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The field name "b" fails to compile in proto1 because it conflicts with
    /// a local variable named "b" in one of the generated methods.  Doh.
    /// This file needs to compile in proto1 to test backwards-compatibility.
    var bb: Int32 {
      get {return _bb ?? 0}
      set {_bb = newValue}
    }
    /// Returns true if `bb` has been explicitly set.
    var hasBb: Bool {return self._bb != nil}
    /// Clears the value of `bb`. Subsequent reads from it will return its default value.
    mutating func clearBb() {self._bb = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _bb: Int32? = nil
  }

  struct OptionalGroup {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var a: Int32 {
      get {return _a ?? 0}
      set {_a = newValue}
    }
    /// Returns true if `a` has been explicitly set.
    var hasA: Bool {return self._a != nil}
    /// Clears the value of `a`. Subsequent reads from it will return its default value.
    mutating func clearA() {self._a = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _a: Int32? = nil
  }

  struct RepeatedGroup {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var a: Int32 {
      get {return _a ?? 0}
      set {_a = newValue}
    }
    /// Returns true if `a` has been explicitly set.
    var hasA: Bool {return self._a != nil}
    /// Clears the value of `a`. Subsequent reads from it will return its default value.
    mutating func clearA() {self._a = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _a: Int32? = nil
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Define these after TestAllTypes to make sure the compiler can handle
/// that.
struct ProtobufUnittestNoArena_ForeignMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var c: Int32 {
    get {return _c ?? 0}
    set {_c = newValue}
  }
  /// Returns true if `c` has been explicitly set.
  var hasC: Bool {return self._c != nil}
  /// Clears the value of `c`. Subsequent reads from it will return its default value.
  mutating func clearC() {self._c = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _c: Int32? = nil
}

struct ProtobufUnittestNoArena_TestNoArenaMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var arenaMessage: Proto2ArenaUnittest_ArenaMessage {
    get {return _storage._arenaMessage ?? Proto2ArenaUnittest_ArenaMessage()}
    set {_uniqueStorage()._arenaMessage = newValue}
  }
  /// Returns true if `arenaMessage` has been explicitly set.
  var hasArenaMessage: Bool {return _storage._arenaMessage != nil}
  /// Clears the value of `arenaMessage`. Subsequent reads from it will return its default value.
  mutating func clearArenaMessage() {_storage._arenaMessage = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "protobuf_unittest_no_arena"

extension ProtobufUnittestNoArena_ForeignEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    4: .same(proto: "FOREIGN_FOO"),
    5: .same(proto: "FOREIGN_BAR"),
    6: .same(proto: "FOREIGN_BAZ"),
  ]
}

extension ProtobufUnittestNoArena_TestAllTypes: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TestAllTypes"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "optional_int32"),
    2: .standard(proto: "optional_int64"),
    3: .standard(proto: "optional_uint32"),
    4: .standard(proto: "optional_uint64"),
    5: .standard(proto: "optional_sint32"),
    6: .standard(proto: "optional_sint64"),
    7: .standard(proto: "optional_fixed32"),
    8: .standard(proto: "optional_fixed64"),
    9: .standard(proto: "optional_sfixed32"),
    10: .standard(proto: "optional_sfixed64"),
    11: .standard(proto: "optional_float"),
    12: .standard(proto: "optional_double"),
    13: .standard(proto: "optional_bool"),
    14: .standard(proto: "optional_string"),
    15: .standard(proto: "optional_bytes"),
    16: .unique(proto: "OptionalGroup", json: "optionalgroup"),
    18: .standard(proto: "optional_nested_message"),
    19: .standard(proto: "optional_foreign_message"),
    20: .standard(proto: "optional_import_message"),
    21: .standard(proto: "optional_nested_enum"),
    22: .standard(proto: "optional_foreign_enum"),
    23: .standard(proto: "optional_import_enum"),
    24: .standard(proto: "optional_string_piece"),
    25: .standard(proto: "optional_cord"),
    26: .standard(proto: "optional_public_import_message"),
    27: .standard(proto: "optional_message"),
    31: .standard(proto: "repeated_int32"),
    32: .standard(proto: "repeated_int64"),
    33: .standard(proto: "repeated_uint32"),
    34: .standard(proto: "repeated_uint64"),
    35: .standard(proto: "repeated_sint32"),
    36: .standard(proto: "repeated_sint64"),
    37: .standard(proto: "repeated_fixed32"),
    38: .standard(proto: "repeated_fixed64"),
    39: .standard(proto: "repeated_sfixed32"),
    40: .standard(proto: "repeated_sfixed64"),
    41: .standard(proto: "repeated_float"),
    42: .standard(proto: "repeated_double"),
    43: .standard(proto: "repeated_bool"),
    44: .standard(proto: "repeated_string"),
    45: .standard(proto: "repeated_bytes"),
    46: .unique(proto: "RepeatedGroup", json: "repeatedgroup"),
    48: .standard(proto: "repeated_nested_message"),
    49: .standard(proto: "repeated_foreign_message"),
    50: .standard(proto: "repeated_import_message"),
    51: .standard(proto: "repeated_nested_enum"),
    52: .standard(proto: "repeated_foreign_enum"),
    53: .standard(proto: "repeated_import_enum"),
    54: .standard(proto: "repeated_string_piece"),
    55: .standard(proto: "repeated_cord"),
    57: .standard(proto: "repeated_lazy_message"),
    61: .standard(proto: "default_int32"),
    62: .standard(proto: "default_int64"),
    63: .standard(proto: "default_uint32"),
    64: .standard(proto: "default_uint64"),
    65: .standard(proto: "default_sint32"),
    66: .standard(proto: "default_sint64"),
    67: .standard(proto: "default_fixed32"),
    68: .standard(proto: "default_fixed64"),
    69: .standard(proto: "default_sfixed32"),
    70: .standard(proto: "default_sfixed64"),
    71: .standard(proto: "default_float"),
    72: .standard(proto: "default_double"),
    73: .standard(proto: "default_bool"),
    74: .standard(proto: "default_string"),
    75: .standard(proto: "default_bytes"),
    81: .standard(proto: "default_nested_enum"),
    82: .standard(proto: "default_foreign_enum"),
    83: .standard(proto: "default_import_enum"),
    84: .standard(proto: "default_string_piece"),
    85: .standard(proto: "default_cord"),
    111: .standard(proto: "oneof_uint32"),
    112: .standard(proto: "oneof_nested_message"),
    113: .standard(proto: "oneof_string"),
    114: .standard(proto: "oneof_bytes"),
    115: .standard(proto: "lazy_oneof_nested_message"),
  ]

  fileprivate class _StorageClass {
    var _optionalInt32: Int32? = nil
    var _optionalInt64: Int64? = nil
    var _optionalUint32: UInt32? = nil
    var _optionalUint64: UInt64? = nil
    var _optionalSint32: Int32? = nil
    var _optionalSint64: Int64? = nil
    var _optionalFixed32: UInt32? = nil
    var _optionalFixed64: UInt64? = nil
    var _optionalSfixed32: Int32? = nil
    var _optionalSfixed64: Int64? = nil
    var _optionalFloat: Float? = nil
    var _optionalDouble: Double? = nil
    var _optionalBool: Bool? = nil
    var _optionalString: String? = nil
    var _optionalBytes: Data? = nil
    var _optionalGroup: ProtobufUnittestNoArena_TestAllTypes.OptionalGroup? = nil
    var _optionalNestedMessage: ProtobufUnittestNoArena_TestAllTypes.NestedMessage? = nil
    var _optionalForeignMessage: ProtobufUnittestNoArena_ForeignMessage? = nil
    var _optionalImportMessage: ProtobufUnittestImport_ImportMessage? = nil
    var _optionalNestedEnum: ProtobufUnittestNoArena_TestAllTypes.NestedEnum? = nil
    var _optionalForeignEnum: ProtobufUnittestNoArena_ForeignEnum? = nil
    var _optionalImportEnum: ProtobufUnittestImport_ImportEnum? = nil
    var _optionalStringPiece: String? = nil
    var _optionalCord: String? = nil
    var _optionalPublicImportMessage: ProtobufUnittestImport_PublicImportMessage? = nil
    var _optionalMessage: ProtobufUnittestNoArena_TestAllTypes.NestedMessage? = nil
    var _repeatedInt32: [Int32] = []
    var _repeatedInt64: [Int64] = []
    var _repeatedUint32: [UInt32] = []
    var _repeatedUint64: [UInt64] = []
    var _repeatedSint32: [Int32] = []
    var _repeatedSint64: [Int64] = []
    var _repeatedFixed32: [UInt32] = []
    var _repeatedFixed64: [UInt64] = []
    var _repeatedSfixed32: [Int32] = []
    var _repeatedSfixed64: [Int64] = []
    var _repeatedFloat: [Float] = []
    var _repeatedDouble: [Double] = []
    var _repeatedBool: [Bool] = []
    var _repeatedString: [String] = []
    var _repeatedBytes: [Data] = []
    var _repeatedGroup: [ProtobufUnittestNoArena_TestAllTypes.RepeatedGroup] = []
    var _repeatedNestedMessage: [ProtobufUnittestNoArena_TestAllTypes.NestedMessage] = []
    var _repeatedForeignMessage: [ProtobufUnittestNoArena_ForeignMessage] = []
    var _repeatedImportMessage: [ProtobufUnittestImport_ImportMessage] = []
    var _repeatedNestedEnum: [ProtobufUnittestNoArena_TestAllTypes.NestedEnum] = []
    var _repeatedForeignEnum: [ProtobufUnittestNoArena_ForeignEnum] = []
    var _repeatedImportEnum: [ProtobufUnittestImport_ImportEnum] = []
    var _repeatedStringPiece: [String] = []
    var _repeatedCord: [String] = []
    var _repeatedLazyMessage: [ProtobufUnittestNoArena_TestAllTypes.NestedMessage] = []
    var _defaultInt32: Int32? = nil
    var _defaultInt64: Int64? = nil
    var _defaultUint32: UInt32? = nil
    var _defaultUint64: UInt64? = nil
    var _defaultSint32: Int32? = nil
    var _defaultSint64: Int64? = nil
    var _defaultFixed32: UInt32? = nil
    var _defaultFixed64: UInt64? = nil
    var _defaultSfixed32: Int32? = nil
    var _defaultSfixed64: Int64? = nil
    var _defaultFloat: Float? = nil
    var _defaultDouble: Double? = nil
    var _defaultBool: Bool? = nil
    var _defaultString: String? = nil
    var _defaultBytes: Data? = nil
    var _defaultNestedEnum: ProtobufUnittestNoArena_TestAllTypes.NestedEnum? = nil
    var _defaultForeignEnum: ProtobufUnittestNoArena_ForeignEnum? = nil
    var _defaultImportEnum: ProtobufUnittestImport_ImportEnum? = nil
    var _defaultStringPiece: String? = nil
    var _defaultCord: String? = nil
    var _oneofField: ProtobufUnittestNoArena_TestAllTypes.OneOf_OneofField?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _optionalInt32 = source._optionalInt32
      _optionalInt64 = source._optionalInt64
      _optionalUint32 = source._optionalUint32
      _optionalUint64 = source._optionalUint64
      _optionalSint32 = source._optionalSint32
      _optionalSint64 = source._optionalSint64
      _optionalFixed32 = source._optionalFixed32
      _optionalFixed64 = source._optionalFixed64
      _optionalSfixed32 = source._optionalSfixed32
      _optionalSfixed64 = source._optionalSfixed64
      _optionalFloat = source._optionalFloat
      _optionalDouble = source._optionalDouble
      _optionalBool = source._optionalBool
      _optionalString = source._optionalString
      _optionalBytes = source._optionalBytes
      _optionalGroup = source._optionalGroup
      _optionalNestedMessage = source._optionalNestedMessage
      _optionalForeignMessage = source._optionalForeignMessage
      _optionalImportMessage = source._optionalImportMessage
      _optionalNestedEnum = source._optionalNestedEnum
      _optionalForeignEnum = source._optionalForeignEnum
      _optionalImportEnum = source._optionalImportEnum
      _optionalStringPiece = source._optionalStringPiece
      _optionalCord = source._optionalCord
      _optionalPublicImportMessage = source._optionalPublicImportMessage
      _optionalMessage = source._optionalMessage
      _repeatedInt32 = source._repeatedInt32
      _repeatedInt64 = source._repeatedInt64
      _repeatedUint32 = source._repeatedUint32
      _repeatedUint64 = source._repeatedUint64
      _repeatedSint32 = source._repeatedSint32
      _repeatedSint64 = source._repeatedSint64
      _repeatedFixed32 = source._repeatedFixed32
      _repeatedFixed64 = source._repeatedFixed64
      _repeatedSfixed32 = source._repeatedSfixed32
      _repeatedSfixed64 = source._repeatedSfixed64
      _repeatedFloat = source._repeatedFloat
      _repeatedDouble = source._repeatedDouble
      _repeatedBool = source._repeatedBool
      _repeatedString = source._repeatedString
      _repeatedBytes = source._repeatedBytes
      _repeatedGroup = source._repeatedGroup
      _repeatedNestedMessage = source._repeatedNestedMessage
      _repeatedForeignMessage = source._repeatedForeignMessage
      _repeatedImportMessage = source._repeatedImportMessage
      _repeatedNestedEnum = source._repeatedNestedEnum
      _repeatedForeignEnum = source._repeatedForeignEnum
      _repeatedImportEnum = source._repeatedImportEnum
      _repeatedStringPiece = source._repeatedStringPiece
      _repeatedCord = source._repeatedCord
      _repeatedLazyMessage = source._repeatedLazyMessage
      _defaultInt32 = source._defaultInt32
      _defaultInt64 = source._defaultInt64
      _defaultUint32 = source._defaultUint32
      _defaultUint64 = source._defaultUint64
      _defaultSint32 = source._defaultSint32
      _defaultSint64 = source._defaultSint64
      _defaultFixed32 = source._defaultFixed32
      _defaultFixed64 = source._defaultFixed64
      _defaultSfixed32 = source._defaultSfixed32
      _defaultSfixed64 = source._defaultSfixed64
      _defaultFloat = source._defaultFloat
      _defaultDouble = source._defaultDouble
      _defaultBool = source._defaultBool
      _defaultString = source._defaultString
      _defaultBytes = source._defaultBytes
      _defaultNestedEnum = source._defaultNestedEnum
      _defaultForeignEnum = source._defaultForeignEnum
      _defaultImportEnum = source._defaultImportEnum
      _defaultStringPiece = source._defaultStringPiece
      _defaultCord = source._defaultCord
      _oneofField = source._oneofField
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._optionalInt32)
        case 2: try decoder.decodeSingularInt64Field(value: &_storage._optionalInt64)
        case 3: try decoder.decodeSingularUInt32Field(value: &_storage._optionalUint32)
        case 4: try decoder.decodeSingularUInt64Field(value: &_storage._optionalUint64)
        case 5: try decoder.decodeSingularSInt32Field(value: &_storage._optionalSint32)
        case 6: try decoder.decodeSingularSInt64Field(value: &_storage._optionalSint64)
        case 7: try decoder.decodeSingularFixed32Field(value: &_storage._optionalFixed32)
        case 8: try decoder.decodeSingularFixed64Field(value: &_storage._optionalFixed64)
        case 9: try decoder.decodeSingularSFixed32Field(value: &_storage._optionalSfixed32)
        case 10: try decoder.decodeSingularSFixed64Field(value: &_storage._optionalSfixed64)
        case 11: try decoder.decodeSingularFloatField(value: &_storage._optionalFloat)
        case 12: try decoder.decodeSingularDoubleField(value: &_storage._optionalDouble)
        case 13: try decoder.decodeSingularBoolField(value: &_storage._optionalBool)
        case 14: try decoder.decodeSingularStringField(value: &_storage._optionalString)
        case 15: try decoder.decodeSingularBytesField(value: &_storage._optionalBytes)
        case 16: try decoder.decodeSingularGroupField(value: &_storage._optionalGroup)
        case 18: try decoder.decodeSingularMessageField(value: &_storage._optionalNestedMessage)
        case 19: try decoder.decodeSingularMessageField(value: &_storage._optionalForeignMessage)
        case 20: try decoder.decodeSingularMessageField(value: &_storage._optionalImportMessage)
        case 21: try decoder.decodeSingularEnumField(value: &_storage._optionalNestedEnum)
        case 22: try decoder.decodeSingularEnumField(value: &_storage._optionalForeignEnum)
        case 23: try decoder.decodeSingularEnumField(value: &_storage._optionalImportEnum)
        case 24: try decoder.decodeSingularStringField(value: &_storage._optionalStringPiece)
        case 25: try decoder.decodeSingularStringField(value: &_storage._optionalCord)
        case 26: try decoder.decodeSingularMessageField(value: &_storage._optionalPublicImportMessage)
        case 27: try decoder.decodeSingularMessageField(value: &_storage._optionalMessage)
        case 31: try decoder.decodeRepeatedInt32Field(value: &_storage._repeatedInt32)
        case 32: try decoder.decodeRepeatedInt64Field(value: &_storage._repeatedInt64)
        case 33: try decoder.decodeRepeatedUInt32Field(value: &_storage._repeatedUint32)
        case 34: try decoder.decodeRepeatedUInt64Field(value: &_storage._repeatedUint64)
        case 35: try decoder.decodeRepeatedSInt32Field(value: &_storage._repeatedSint32)
        case 36: try decoder.decodeRepeatedSInt64Field(value: &_storage._repeatedSint64)
        case 37: try decoder.decodeRepeatedFixed32Field(value: &_storage._repeatedFixed32)
        case 38: try decoder.decodeRepeatedFixed64Field(value: &_storage._repeatedFixed64)
        case 39: try decoder.decodeRepeatedSFixed32Field(value: &_storage._repeatedSfixed32)
        case 40: try decoder.decodeRepeatedSFixed64Field(value: &_storage._repeatedSfixed64)
        case 41: try decoder.decodeRepeatedFloatField(value: &_storage._repeatedFloat)
        case 42: try decoder.decodeRepeatedDoubleField(value: &_storage._repeatedDouble)
        case 43: try decoder.decodeRepeatedBoolField(value: &_storage._repeatedBool)
        case 44: try decoder.decodeRepeatedStringField(value: &_storage._repeatedString)
        case 45: try decoder.decodeRepeatedBytesField(value: &_storage._repeatedBytes)
        case 46: try decoder.decodeRepeatedGroupField(value: &_storage._repeatedGroup)
        case 48: try decoder.decodeRepeatedMessageField(value: &_storage._repeatedNestedMessage)
        case 49: try decoder.decodeRepeatedMessageField(value: &_storage._repeatedForeignMessage)
        case 50: try decoder.decodeRepeatedMessageField(value: &_storage._repeatedImportMessage)
        case 51: try decoder.decodeRepeatedEnumField(value: &_storage._repeatedNestedEnum)
        case 52: try decoder.decodeRepeatedEnumField(value: &_storage._repeatedForeignEnum)
        case 53: try decoder.decodeRepeatedEnumField(value: &_storage._repeatedImportEnum)
        case 54: try decoder.decodeRepeatedStringField(value: &_storage._repeatedStringPiece)
        case 55: try decoder.decodeRepeatedStringField(value: &_storage._repeatedCord)
        case 57: try decoder.decodeRepeatedMessageField(value: &_storage._repeatedLazyMessage)
        case 61: try decoder.decodeSingularInt32Field(value: &_storage._defaultInt32)
        case 62: try decoder.decodeSingularInt64Field(value: &_storage._defaultInt64)
        case 63: try decoder.decodeSingularUInt32Field(value: &_storage._defaultUint32)
        case 64: try decoder.decodeSingularUInt64Field(value: &_storage._defaultUint64)
        case 65: try decoder.decodeSingularSInt32Field(value: &_storage._defaultSint32)
        case 66: try decoder.decodeSingularSInt64Field(value: &_storage._defaultSint64)
        case 67: try decoder.decodeSingularFixed32Field(value: &_storage._defaultFixed32)
        case 68: try decoder.decodeSingularFixed64Field(value: &_storage._defaultFixed64)
        case 69: try decoder.decodeSingularSFixed32Field(value: &_storage._defaultSfixed32)
        case 70: try decoder.decodeSingularSFixed64Field(value: &_storage._defaultSfixed64)
        case 71: try decoder.decodeSingularFloatField(value: &_storage._defaultFloat)
        case 72: try decoder.decodeSingularDoubleField(value: &_storage._defaultDouble)
        case 73: try decoder.decodeSingularBoolField(value: &_storage._defaultBool)
        case 74: try decoder.decodeSingularStringField(value: &_storage._defaultString)
        case 75: try decoder.decodeSingularBytesField(value: &_storage._defaultBytes)
        case 81: try decoder.decodeSingularEnumField(value: &_storage._defaultNestedEnum)
        case 82: try decoder.decodeSingularEnumField(value: &_storage._defaultForeignEnum)
        case 83: try decoder.decodeSingularEnumField(value: &_storage._defaultImportEnum)
        case 84: try decoder.decodeSingularStringField(value: &_storage._defaultStringPiece)
        case 85: try decoder.decodeSingularStringField(value: &_storage._defaultCord)
        case 111:
          if _storage._oneofField != nil {try decoder.handleConflictingOneOf()}
          var v: UInt32?
          try decoder.decodeSingularUInt32Field(value: &v)
          if let v = v {_storage._oneofField = .oneofUint32(v)}
        case 112:
          var v: ProtobufUnittestNoArena_TestAllTypes.NestedMessage?
          if let current = _storage._oneofField {
            try decoder.handleConflictingOneOf()
            if case .oneofNestedMessage(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._oneofField = .oneofNestedMessage(v)}
        case 113:
          if _storage._oneofField != nil {try decoder.handleConflictingOneOf()}
          var v: String?
          try decoder.decodeSingularStringField(value: &v)
          if let v = v {_storage._oneofField = .oneofString(v)}
        case 114:
          if _storage._oneofField != nil {try decoder.handleConflictingOneOf()}
          var v: Data?
          try decoder.decodeSingularBytesField(value: &v)
          if let v = v {_storage._oneofField = .oneofBytes(v)}
        case 115:
          var v: ProtobufUnittestNoArena_TestAllTypes.NestedMessage?
          if let current = _storage._oneofField {
            try decoder.handleConflictingOneOf()
            if case .lazyOneofNestedMessage(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._oneofField = .lazyOneofNestedMessage(v)}
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._optionalInt32 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      if let v = _storage._optionalInt64 {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 2)
      }
      if let v = _storage._optionalUint32 {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
      }
      if let v = _storage._optionalUint64 {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 4)
      }
      if let v = _storage._optionalSint32 {
        try visitor.visitSingularSInt32Field(value: v, fieldNumber: 5)
      }
      if let v = _storage._optionalSint64 {
        try visitor.visitSingularSInt64Field(value: v, fieldNumber: 6)
      }
      if let v = _storage._optionalFixed32 {
        try visitor.visitSingularFixed32Field(value: v, fieldNumber: 7)
      }
      if let v = _storage._optionalFixed64 {
        try visitor.visitSingularFixed64Field(value: v, fieldNumber: 8)
      }
      if let v = _storage._optionalSfixed32 {
        try visitor.visitSingularSFixed32Field(value: v, fieldNumber: 9)
      }
      if let v = _storage._optionalSfixed64 {
        try visitor.visitSingularSFixed64Field(value: v, fieldNumber: 10)
      }
      if let v = _storage._optionalFloat {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 11)
      }
      if let v = _storage._optionalDouble {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 12)
      }
      if let v = _storage._optionalBool {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 13)
      }
      if let v = _storage._optionalString {
        try visitor.visitSingularStringField(value: v, fieldNumber: 14)
      }
      if let v = _storage._optionalBytes {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 15)
      }
      if let v = _storage._optionalGroup {
        try visitor.visitSingularGroupField(value: v, fieldNumber: 16)
      }
      if let v = _storage._optionalNestedMessage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
      }
      if let v = _storage._optionalForeignMessage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
      }
      if let v = _storage._optionalImportMessage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
      }
      if let v = _storage._optionalNestedEnum {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 21)
      }
      if let v = _storage._optionalForeignEnum {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 22)
      }
      if let v = _storage._optionalImportEnum {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 23)
      }
      if let v = _storage._optionalStringPiece {
        try visitor.visitSingularStringField(value: v, fieldNumber: 24)
      }
      if let v = _storage._optionalCord {
        try visitor.visitSingularStringField(value: v, fieldNumber: 25)
      }
      if let v = _storage._optionalPublicImportMessage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 26)
      }
      if let v = _storage._optionalMessage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 27)
      }
      if !_storage._repeatedInt32.isEmpty {
        try visitor.visitRepeatedInt32Field(value: _storage._repeatedInt32, fieldNumber: 31)
      }
      if !_storage._repeatedInt64.isEmpty {
        try visitor.visitRepeatedInt64Field(value: _storage._repeatedInt64, fieldNumber: 32)
      }
      if !_storage._repeatedUint32.isEmpty {
        try visitor.visitRepeatedUInt32Field(value: _storage._repeatedUint32, fieldNumber: 33)
      }
      if !_storage._repeatedUint64.isEmpty {
        try visitor.visitRepeatedUInt64Field(value: _storage._repeatedUint64, fieldNumber: 34)
      }
      if !_storage._repeatedSint32.isEmpty {
        try visitor.visitRepeatedSInt32Field(value: _storage._repeatedSint32, fieldNumber: 35)
      }
      if !_storage._repeatedSint64.isEmpty {
        try visitor.visitRepeatedSInt64Field(value: _storage._repeatedSint64, fieldNumber: 36)
      }
      if !_storage._repeatedFixed32.isEmpty {
        try visitor.visitRepeatedFixed32Field(value: _storage._repeatedFixed32, fieldNumber: 37)
      }
      if !_storage._repeatedFixed64.isEmpty {
        try visitor.visitRepeatedFixed64Field(value: _storage._repeatedFixed64, fieldNumber: 38)
      }
      if !_storage._repeatedSfixed32.isEmpty {
        try visitor.visitRepeatedSFixed32Field(value: _storage._repeatedSfixed32, fieldNumber: 39)
      }
      if !_storage._repeatedSfixed64.isEmpty {
        try visitor.visitRepeatedSFixed64Field(value: _storage._repeatedSfixed64, fieldNumber: 40)
      }
      if !_storage._repeatedFloat.isEmpty {
        try visitor.visitRepeatedFloatField(value: _storage._repeatedFloat, fieldNumber: 41)
      }
      if !_storage._repeatedDouble.isEmpty {
        try visitor.visitRepeatedDoubleField(value: _storage._repeatedDouble, fieldNumber: 42)
      }
      if !_storage._repeatedBool.isEmpty {
        try visitor.visitRepeatedBoolField(value: _storage._repeatedBool, fieldNumber: 43)
      }
      if !_storage._repeatedString.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._repeatedString, fieldNumber: 44)
      }
      if !_storage._repeatedBytes.isEmpty {
        try visitor.visitRepeatedBytesField(value: _storage._repeatedBytes, fieldNumber: 45)
      }
      if !_storage._repeatedGroup.isEmpty {
        try visitor.visitRepeatedGroupField(value: _storage._repeatedGroup, fieldNumber: 46)
      }
      if !_storage._repeatedNestedMessage.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._repeatedNestedMessage, fieldNumber: 48)
      }
      if !_storage._repeatedForeignMessage.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._repeatedForeignMessage, fieldNumber: 49)
      }
      if !_storage._repeatedImportMessage.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._repeatedImportMessage, fieldNumber: 50)
      }
      if !_storage._repeatedNestedEnum.isEmpty {
        try visitor.visitRepeatedEnumField(value: _storage._repeatedNestedEnum, fieldNumber: 51)
      }
      if !_storage._repeatedForeignEnum.isEmpty {
        try visitor.visitRepeatedEnumField(value: _storage._repeatedForeignEnum, fieldNumber: 52)
      }
      if !_storage._repeatedImportEnum.isEmpty {
        try visitor.visitRepeatedEnumField(value: _storage._repeatedImportEnum, fieldNumber: 53)
      }
      if !_storage._repeatedStringPiece.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._repeatedStringPiece, fieldNumber: 54)
      }
      if !_storage._repeatedCord.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._repeatedCord, fieldNumber: 55)
      }
      if !_storage._repeatedLazyMessage.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._repeatedLazyMessage, fieldNumber: 57)
      }
      if let v = _storage._defaultInt32 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 61)
      }
      if let v = _storage._defaultInt64 {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 62)
      }
      if let v = _storage._defaultUint32 {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 63)
      }
      if let v = _storage._defaultUint64 {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 64)
      }
      if let v = _storage._defaultSint32 {
        try visitor.visitSingularSInt32Field(value: v, fieldNumber: 65)
      }
      if let v = _storage._defaultSint64 {
        try visitor.visitSingularSInt64Field(value: v, fieldNumber: 66)
      }
      if let v = _storage._defaultFixed32 {
        try visitor.visitSingularFixed32Field(value: v, fieldNumber: 67)
      }
      if let v = _storage._defaultFixed64 {
        try visitor.visitSingularFixed64Field(value: v, fieldNumber: 68)
      }
      if let v = _storage._defaultSfixed32 {
        try visitor.visitSingularSFixed32Field(value: v, fieldNumber: 69)
      }
      if let v = _storage._defaultSfixed64 {
        try visitor.visitSingularSFixed64Field(value: v, fieldNumber: 70)
      }
      if let v = _storage._defaultFloat {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 71)
      }
      if let v = _storage._defaultDouble {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 72)
      }
      if let v = _storage._defaultBool {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 73)
      }
      if let v = _storage._defaultString {
        try visitor.visitSingularStringField(value: v, fieldNumber: 74)
      }
      if let v = _storage._defaultBytes {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 75)
      }
      if let v = _storage._defaultNestedEnum {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 81)
      }
      if let v = _storage._defaultForeignEnum {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 82)
      }
      if let v = _storage._defaultImportEnum {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 83)
      }
      if let v = _storage._defaultStringPiece {
        try visitor.visitSingularStringField(value: v, fieldNumber: 84)
      }
      if let v = _storage._defaultCord {
        try visitor.visitSingularStringField(value: v, fieldNumber: 85)
      }
      switch _storage._oneofField {
      case .oneofUint32(let v)?:
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 111)
      case .oneofNestedMessage(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 112)
      case .oneofString(let v)?:
        try visitor.visitSingularStringField(value: v, fieldNumber: 113)
      case .oneofBytes(let v)?:
        try visitor.visitSingularBytesField(value: v, fieldNumber: 114)
      case .lazyOneofNestedMessage(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 115)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: ProtobufUnittestNoArena_TestAllTypes) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._optionalInt32 != other_storage._optionalInt32 {return false}
        if _storage._optionalInt64 != other_storage._optionalInt64 {return false}
        if _storage._optionalUint32 != other_storage._optionalUint32 {return false}
        if _storage._optionalUint64 != other_storage._optionalUint64 {return false}
        if _storage._optionalSint32 != other_storage._optionalSint32 {return false}
        if _storage._optionalSint64 != other_storage._optionalSint64 {return false}
        if _storage._optionalFixed32 != other_storage._optionalFixed32 {return false}
        if _storage._optionalFixed64 != other_storage._optionalFixed64 {return false}
        if _storage._optionalSfixed32 != other_storage._optionalSfixed32 {return false}
        if _storage._optionalSfixed64 != other_storage._optionalSfixed64 {return false}
        if _storage._optionalFloat != other_storage._optionalFloat {return false}
        if _storage._optionalDouble != other_storage._optionalDouble {return false}
        if _storage._optionalBool != other_storage._optionalBool {return false}
        if _storage._optionalString != other_storage._optionalString {return false}
        if _storage._optionalBytes != other_storage._optionalBytes {return false}
        if _storage._optionalGroup != other_storage._optionalGroup {return false}
        if _storage._optionalNestedMessage != other_storage._optionalNestedMessage {return false}
        if _storage._optionalForeignMessage != other_storage._optionalForeignMessage {return false}
        if _storage._optionalImportMessage != other_storage._optionalImportMessage {return false}
        if _storage._optionalNestedEnum != other_storage._optionalNestedEnum {return false}
        if _storage._optionalForeignEnum != other_storage._optionalForeignEnum {return false}
        if _storage._optionalImportEnum != other_storage._optionalImportEnum {return false}
        if _storage._optionalStringPiece != other_storage._optionalStringPiece {return false}
        if _storage._optionalCord != other_storage._optionalCord {return false}
        if _storage._optionalPublicImportMessage != other_storage._optionalPublicImportMessage {return false}
        if _storage._optionalMessage != other_storage._optionalMessage {return false}
        if _storage._repeatedInt32 != other_storage._repeatedInt32 {return false}
        if _storage._repeatedInt64 != other_storage._repeatedInt64 {return false}
        if _storage._repeatedUint32 != other_storage._repeatedUint32 {return false}
        if _storage._repeatedUint64 != other_storage._repeatedUint64 {return false}
        if _storage._repeatedSint32 != other_storage._repeatedSint32 {return false}
        if _storage._repeatedSint64 != other_storage._repeatedSint64 {return false}
        if _storage._repeatedFixed32 != other_storage._repeatedFixed32 {return false}
        if _storage._repeatedFixed64 != other_storage._repeatedFixed64 {return false}
        if _storage._repeatedSfixed32 != other_storage._repeatedSfixed32 {return false}
        if _storage._repeatedSfixed64 != other_storage._repeatedSfixed64 {return false}
        if _storage._repeatedFloat != other_storage._repeatedFloat {return false}
        if _storage._repeatedDouble != other_storage._repeatedDouble {return false}
        if _storage._repeatedBool != other_storage._repeatedBool {return false}
        if _storage._repeatedString != other_storage._repeatedString {return false}
        if _storage._repeatedBytes != other_storage._repeatedBytes {return false}
        if _storage._repeatedGroup != other_storage._repeatedGroup {return false}
        if _storage._repeatedNestedMessage != other_storage._repeatedNestedMessage {return false}
        if _storage._repeatedForeignMessage != other_storage._repeatedForeignMessage {return false}
        if _storage._repeatedImportMessage != other_storage._repeatedImportMessage {return false}
        if _storage._repeatedNestedEnum != other_storage._repeatedNestedEnum {return false}
        if _storage._repeatedForeignEnum != other_storage._repeatedForeignEnum {return false}
        if _storage._repeatedImportEnum != other_storage._repeatedImportEnum {return false}
        if _storage._repeatedStringPiece != other_storage._repeatedStringPiece {return false}
        if _storage._repeatedCord != other_storage._repeatedCord {return false}
        if _storage._repeatedLazyMessage != other_storage._repeatedLazyMessage {return false}
        if _storage._defaultInt32 != other_storage._defaultInt32 {return false}
        if _storage._defaultInt64 != other_storage._defaultInt64 {return false}
        if _storage._defaultUint32 != other_storage._defaultUint32 {return false}
        if _storage._defaultUint64 != other_storage._defaultUint64 {return false}
        if _storage._defaultSint32 != other_storage._defaultSint32 {return false}
        if _storage._defaultSint64 != other_storage._defaultSint64 {return false}
        if _storage._defaultFixed32 != other_storage._defaultFixed32 {return false}
        if _storage._defaultFixed64 != other_storage._defaultFixed64 {return false}
        if _storage._defaultSfixed32 != other_storage._defaultSfixed32 {return false}
        if _storage._defaultSfixed64 != other_storage._defaultSfixed64 {return false}
        if _storage._defaultFloat != other_storage._defaultFloat {return false}
        if _storage._defaultDouble != other_storage._defaultDouble {return false}
        if _storage._defaultBool != other_storage._defaultBool {return false}
        if _storage._defaultString != other_storage._defaultString {return false}
        if _storage._defaultBytes != other_storage._defaultBytes {return false}
        if _storage._defaultNestedEnum != other_storage._defaultNestedEnum {return false}
        if _storage._defaultForeignEnum != other_storage._defaultForeignEnum {return false}
        if _storage._defaultImportEnum != other_storage._defaultImportEnum {return false}
        if _storage._defaultStringPiece != other_storage._defaultStringPiece {return false}
        if _storage._defaultCord != other_storage._defaultCord {return false}
        if _storage._oneofField != other_storage._oneofField {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestNoArena_TestAllTypes.NestedEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    -1: .same(proto: "NEG"),
    1: .same(proto: "FOO"),
    2: .same(proto: "BAR"),
    3: .same(proto: "BAZ"),
  ]
}

extension ProtobufUnittestNoArena_TestAllTypes.NestedMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestNoArena_TestAllTypes.protoMessageName + ".NestedMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bb"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self._bb)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._bb {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: ProtobufUnittestNoArena_TestAllTypes.NestedMessage) -> Bool {
    if self._bb != other._bb {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestNoArena_TestAllTypes.OptionalGroup: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestNoArena_TestAllTypes.protoMessageName + ".OptionalGroup"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    17: .same(proto: "a"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 17: try decoder.decodeSingularInt32Field(value: &self._a)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._a {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 17)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: ProtobufUnittestNoArena_TestAllTypes.OptionalGroup) -> Bool {
    if self._a != other._a {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestNoArena_TestAllTypes.RepeatedGroup: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = ProtobufUnittestNoArena_TestAllTypes.protoMessageName + ".RepeatedGroup"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    47: .same(proto: "a"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 47: try decoder.decodeSingularInt32Field(value: &self._a)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._a {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 47)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: ProtobufUnittestNoArena_TestAllTypes.RepeatedGroup) -> Bool {
    if self._a != other._a {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestNoArena_ForeignMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ForeignMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "c"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self._c)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._c {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: ProtobufUnittestNoArena_ForeignMessage) -> Bool {
    if self._c != other._c {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittestNoArena_TestNoArenaMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TestNoArenaMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "arena_message"),
  ]

  fileprivate class _StorageClass {
    var _arenaMessage: Proto2ArenaUnittest_ArenaMessage? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _arenaMessage = source._arenaMessage
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._arenaMessage)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._arenaMessage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: ProtobufUnittestNoArena_TestNoArenaMessage) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._arenaMessage != other_storage._arenaMessage {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
