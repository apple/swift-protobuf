/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: google/protobuf/unittest_no_arena.proto
 *
 */

//  Protocol Buffers - Google's data interchange format
//  Copyright 2008 Google Inc.  All rights reserved.
//  https://developers.google.com/protocol-buffers/
// 
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are
//  met:
// 
//      * Redistributions of source code must retain the above copyright
//  notice, this list of conditions and the following disclaimer.
//      * Redistributions in binary form must reproduce the above
//  copyright notice, this list of conditions and the following disclaimer
//  in the documentation and/or other materials provided with the
//  distribution.
//      * Neither the name of Google Inc. nor the names of its
//  contributors may be used to endorse or promote products derived from
//  this software without specific prior written permission.
// 
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
//  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
//  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
//  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
//  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
//  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
//  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

//  Author: kenton@google.com (Kenton Varda)
//   Based on original Protocol Buffers design by
//   Sanjay Ghemawat, Jeff Dean, and others.
// 
//  This proto file contains copies of TestAllTypes and friends, but with arena
//  support disabled in code generation. It allows us to test the performance
//  impact against baseline (non-arena) google.protobuf.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _1: SwiftProtobuf.ProtobufAPIVersion_1 {}
  typealias Version = _1
}

enum ProtobufUnittestNoArena_ForeignEnum: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case foreignFoo // = 4
  case foreignBar // = 5
  case foreignBaz // = 6

  init() {
    self = .foreignFoo
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 4: self = .foreignFoo
    case 5: self = .foreignBar
    case 6: self = .foreignBaz
    default: return nil
    }
  }

  init?(jsonName: String) {
    switch jsonName {
    case "FOREIGN_FOO": self = .foreignFoo
    case "FOREIGN_BAR": self = .foreignBar
    case "FOREIGN_BAZ": self = .foreignBaz
    default: return nil
    }
  }

  init?(protoName: String) {
    switch protoName {
    case "FOREIGN_FOO": self = .foreignFoo
    case "FOREIGN_BAR": self = .foreignBar
    case "FOREIGN_BAZ": self = .foreignBaz
    default: return nil
    }
  }

  var rawValue: Int {
    get {
      switch self {
      case .foreignFoo: return 4
      case .foreignBar: return 5
      case .foreignBaz: return 6
      }
    }
  }

  var _protobuf_jsonName: String? {
    get {
      switch self {
      case .foreignFoo: return "FOREIGN_FOO"
      case .foreignBar: return "FOREIGN_BAR"
      case .foreignBaz: return "FOREIGN_BAZ"
      }
    }
  }

  var hashValue: Int { return rawValue }

}

///   This proto includes every type of field in both singular and repeated
///   forms.
struct ProtobufUnittestNoArena_TestAllTypes: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var protoMessageName: String {return "TestAllTypes"}
  public var protoPackageName: String {return "protobuf_unittest_no_arena"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "optional_int32", json: "optionalInt32"),
    2: .unique(proto: "optional_int64", json: "optionalInt64"),
    3: .unique(proto: "optional_uint32", json: "optionalUint32"),
    4: .unique(proto: "optional_uint64", json: "optionalUint64"),
    5: .unique(proto: "optional_sint32", json: "optionalSint32"),
    6: .unique(proto: "optional_sint64", json: "optionalSint64"),
    7: .unique(proto: "optional_fixed32", json: "optionalFixed32"),
    8: .unique(proto: "optional_fixed64", json: "optionalFixed64"),
    9: .unique(proto: "optional_sfixed32", json: "optionalSfixed32"),
    10: .unique(proto: "optional_sfixed64", json: "optionalSfixed64"),
    11: .unique(proto: "optional_float", json: "optionalFloat"),
    12: .unique(proto: "optional_double", json: "optionalDouble"),
    13: .unique(proto: "optional_bool", json: "optionalBool"),
    14: .unique(proto: "optional_string", json: "optionalString"),
    15: .unique(proto: "optional_bytes", json: "optionalBytes"),
    16: .unique(proto: "OptionalGroup", json: "optionalgroup"),
    18: .unique(proto: "optional_nested_message", json: "optionalNestedMessage"),
    19: .unique(proto: "optional_foreign_message", json: "optionalForeignMessage"),
    20: .unique(proto: "optional_import_message", json: "optionalImportMessage"),
    21: .unique(proto: "optional_nested_enum", json: "optionalNestedEnum"),
    22: .unique(proto: "optional_foreign_enum", json: "optionalForeignEnum"),
    23: .unique(proto: "optional_import_enum", json: "optionalImportEnum"),
    24: .unique(proto: "optional_string_piece", json: "optionalStringPiece"),
    25: .unique(proto: "optional_cord", json: "optionalCord"),
    26: .unique(proto: "optional_public_import_message", json: "optionalPublicImportMessage"),
    27: .unique(proto: "optional_message", json: "optionalMessage"),
    31: .unique(proto: "repeated_int32", json: "repeatedInt32"),
    32: .unique(proto: "repeated_int64", json: "repeatedInt64"),
    33: .unique(proto: "repeated_uint32", json: "repeatedUint32"),
    34: .unique(proto: "repeated_uint64", json: "repeatedUint64"),
    35: .unique(proto: "repeated_sint32", json: "repeatedSint32"),
    36: .unique(proto: "repeated_sint64", json: "repeatedSint64"),
    37: .unique(proto: "repeated_fixed32", json: "repeatedFixed32"),
    38: .unique(proto: "repeated_fixed64", json: "repeatedFixed64"),
    39: .unique(proto: "repeated_sfixed32", json: "repeatedSfixed32"),
    40: .unique(proto: "repeated_sfixed64", json: "repeatedSfixed64"),
    41: .unique(proto: "repeated_float", json: "repeatedFloat"),
    42: .unique(proto: "repeated_double", json: "repeatedDouble"),
    43: .unique(proto: "repeated_bool", json: "repeatedBool"),
    44: .unique(proto: "repeated_string", json: "repeatedString"),
    45: .unique(proto: "repeated_bytes", json: "repeatedBytes"),
    46: .unique(proto: "RepeatedGroup", json: "repeatedgroup"),
    48: .unique(proto: "repeated_nested_message", json: "repeatedNestedMessage"),
    49: .unique(proto: "repeated_foreign_message", json: "repeatedForeignMessage"),
    50: .unique(proto: "repeated_import_message", json: "repeatedImportMessage"),
    51: .unique(proto: "repeated_nested_enum", json: "repeatedNestedEnum"),
    52: .unique(proto: "repeated_foreign_enum", json: "repeatedForeignEnum"),
    53: .unique(proto: "repeated_import_enum", json: "repeatedImportEnum"),
    54: .unique(proto: "repeated_string_piece", json: "repeatedStringPiece"),
    55: .unique(proto: "repeated_cord", json: "repeatedCord"),
    57: .unique(proto: "repeated_lazy_message", json: "repeatedLazyMessage"),
    61: .unique(proto: "default_int32", json: "defaultInt32"),
    62: .unique(proto: "default_int64", json: "defaultInt64"),
    63: .unique(proto: "default_uint32", json: "defaultUint32"),
    64: .unique(proto: "default_uint64", json: "defaultUint64"),
    65: .unique(proto: "default_sint32", json: "defaultSint32"),
    66: .unique(proto: "default_sint64", json: "defaultSint64"),
    67: .unique(proto: "default_fixed32", json: "defaultFixed32"),
    68: .unique(proto: "default_fixed64", json: "defaultFixed64"),
    69: .unique(proto: "default_sfixed32", json: "defaultSfixed32"),
    70: .unique(proto: "default_sfixed64", json: "defaultSfixed64"),
    71: .unique(proto: "default_float", json: "defaultFloat"),
    72: .unique(proto: "default_double", json: "defaultDouble"),
    73: .unique(proto: "default_bool", json: "defaultBool"),
    74: .unique(proto: "default_string", json: "defaultString"),
    75: .unique(proto: "default_bytes", json: "defaultBytes"),
    81: .unique(proto: "default_nested_enum", json: "defaultNestedEnum"),
    82: .unique(proto: "default_foreign_enum", json: "defaultForeignEnum"),
    83: .unique(proto: "default_import_enum", json: "defaultImportEnum"),
    84: .unique(proto: "default_string_piece", json: "defaultStringPiece"),
    85: .unique(proto: "default_cord", json: "defaultCord"),
    111: .unique(proto: "oneof_uint32", json: "oneofUint32"),
    112: .unique(proto: "oneof_nested_message", json: "oneofNestedMessage"),
    113: .unique(proto: "oneof_string", json: "oneofString"),
    114: .unique(proto: "oneof_bytes", json: "oneofBytes"),
    115: .unique(proto: "lazy_oneof_nested_message", json: "lazyOneofNestedMessage"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = ProtobufUnittestNoArena_TestAllTypes
    var unknown = SwiftProtobuf.UnknownStorage()
    var _optionalInt32: Int32? = nil
    var _optionalInt64: Int64? = nil
    var _optionalUint32: UInt32? = nil
    var _optionalUint64: UInt64? = nil
    var _optionalSint32: Int32? = nil
    var _optionalSint64: Int64? = nil
    var _optionalFixed32: UInt32? = nil
    var _optionalFixed64: UInt64? = nil
    var _optionalSfixed32: Int32? = nil
    var _optionalSfixed64: Int64? = nil
    var _optionalFloat: Float? = nil
    var _optionalDouble: Double? = nil
    var _optionalBool: Bool? = nil
    var _optionalString: String? = nil
    var _optionalBytes: Data? = nil
    var _optionalGroup: ProtobufUnittestNoArena_TestAllTypes.OptionalGroup? = nil
    var _optionalNestedMessage: ProtobufUnittestNoArena_TestAllTypes.NestedMessage? = nil
    var _optionalForeignMessage: ProtobufUnittestNoArena_ForeignMessage? = nil
    var _optionalImportMessage: ProtobufUnittestImport_ImportMessage? = nil
    var _optionalNestedEnum: ProtobufUnittestNoArena_TestAllTypes.NestedEnum? = nil
    var _optionalForeignEnum: ProtobufUnittestNoArena_ForeignEnum? = nil
    var _optionalImportEnum: ProtobufUnittestImport_ImportEnum? = nil
    var _optionalStringPiece: String? = nil
    var _optionalCord: String? = nil
    var _optionalPublicImportMessage: ProtobufUnittestImport_PublicImportMessage? = nil
    var _optionalMessage: ProtobufUnittestNoArena_TestAllTypes.NestedMessage? = nil
    var _repeatedInt32: [Int32] = []
    var _repeatedInt64: [Int64] = []
    var _repeatedUint32: [UInt32] = []
    var _repeatedUint64: [UInt64] = []
    var _repeatedSint32: [Int32] = []
    var _repeatedSint64: [Int64] = []
    var _repeatedFixed32: [UInt32] = []
    var _repeatedFixed64: [UInt64] = []
    var _repeatedSfixed32: [Int32] = []
    var _repeatedSfixed64: [Int64] = []
    var _repeatedFloat: [Float] = []
    var _repeatedDouble: [Double] = []
    var _repeatedBool: [Bool] = []
    var _repeatedString: [String] = []
    var _repeatedBytes: [Data] = []
    var _repeatedGroup: [ProtobufUnittestNoArena_TestAllTypes.RepeatedGroup] = []
    var _repeatedNestedMessage: [ProtobufUnittestNoArena_TestAllTypes.NestedMessage] = []
    var _repeatedForeignMessage: [ProtobufUnittestNoArena_ForeignMessage] = []
    var _repeatedImportMessage: [ProtobufUnittestImport_ImportMessage] = []
    var _repeatedNestedEnum: [ProtobufUnittestNoArena_TestAllTypes.NestedEnum] = []
    var _repeatedForeignEnum: [ProtobufUnittestNoArena_ForeignEnum] = []
    var _repeatedImportEnum: [ProtobufUnittestImport_ImportEnum] = []
    var _repeatedStringPiece: [String] = []
    var _repeatedCord: [String] = []
    var _repeatedLazyMessage: [ProtobufUnittestNoArena_TestAllTypes.NestedMessage] = []
    var _defaultInt32: Int32? = nil
    var _defaultInt64: Int64? = nil
    var _defaultUint32: UInt32? = nil
    var _defaultUint64: UInt64? = nil
    var _defaultSint32: Int32? = nil
    var _defaultSint64: Int64? = nil
    var _defaultFixed32: UInt32? = nil
    var _defaultFixed64: UInt64? = nil
    var _defaultSfixed32: Int32? = nil
    var _defaultSfixed64: Int64? = nil
    var _defaultFloat: Float? = nil
    var _defaultDouble: Double? = nil
    var _defaultBool: Bool? = nil
    var _defaultString: String? = nil
    var _defaultBytes: Data? = nil
    var _defaultNestedEnum: ProtobufUnittestNoArena_TestAllTypes.NestedEnum? = nil
    var _defaultForeignEnum: ProtobufUnittestNoArena_ForeignEnum? = nil
    var _defaultImportEnum: ProtobufUnittestImport_ImportEnum? = nil
    var _defaultStringPiece: String? = nil
    var _defaultCord: String? = nil
    var _oneofField = ProtobufUnittestNoArena_TestAllTypes.OneOf_OneofField()

    init() {}

    func decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_optionalInt32)
      case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: &_optionalInt64)
      case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_optionalUint32)
      case 4: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt64.self, value: &_optionalUint64)
      case 5: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufSInt32.self, value: &_optionalSint32)
      case 6: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufSInt64.self, value: &_optionalSint64)
      case 7: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufFixed32.self, value: &_optionalFixed32)
      case 8: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufFixed64.self, value: &_optionalFixed64)
      case 9: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufSFixed32.self, value: &_optionalSfixed32)
      case 10: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufSFixed64.self, value: &_optionalSfixed64)
      case 11: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufFloat.self, value: &_optionalFloat)
      case 12: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufDouble.self, value: &_optionalDouble)
      case 13: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: &_optionalBool)
      case 14: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_optionalString)
      case 15: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: &_optionalBytes)
      case 16: try setter.decodeSingularGroupField(fieldType: ProtobufUnittestNoArena_TestAllTypes.OptionalGroup.self, value: &_optionalGroup)
      case 18: try setter.decodeSingularMessageField(fieldType: ProtobufUnittestNoArena_TestAllTypes.NestedMessage.self, value: &_optionalNestedMessage)
      case 19: try setter.decodeSingularMessageField(fieldType: ProtobufUnittestNoArena_ForeignMessage.self, value: &_optionalForeignMessage)
      case 20: try setter.decodeSingularMessageField(fieldType: ProtobufUnittestImport_ImportMessage.self, value: &_optionalImportMessage)
      case 21: try setter.decodeSingularField(fieldType: ProtobufUnittestNoArena_TestAllTypes.NestedEnum.self, value: &_optionalNestedEnum)
      case 22: try setter.decodeSingularField(fieldType: ProtobufUnittestNoArena_ForeignEnum.self, value: &_optionalForeignEnum)
      case 23: try setter.decodeSingularField(fieldType: ProtobufUnittestImport_ImportEnum.self, value: &_optionalImportEnum)
      case 24: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_optionalStringPiece)
      case 25: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_optionalCord)
      case 26: try setter.decodeSingularMessageField(fieldType: ProtobufUnittestImport_PublicImportMessage.self, value: &_optionalPublicImportMessage)
      case 27: try setter.decodeSingularMessageField(fieldType: ProtobufUnittestNoArena_TestAllTypes.NestedMessage.self, value: &_optionalMessage)
      case 31: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_repeatedInt32)
      case 32: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: &_repeatedInt64)
      case 33: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_repeatedUint32)
      case 34: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufUInt64.self, value: &_repeatedUint64)
      case 35: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufSInt32.self, value: &_repeatedSint32)
      case 36: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufSInt64.self, value: &_repeatedSint64)
      case 37: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufFixed32.self, value: &_repeatedFixed32)
      case 38: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufFixed64.self, value: &_repeatedFixed64)
      case 39: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufSFixed32.self, value: &_repeatedSfixed32)
      case 40: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufSFixed64.self, value: &_repeatedSfixed64)
      case 41: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufFloat.self, value: &_repeatedFloat)
      case 42: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufDouble.self, value: &_repeatedDouble)
      case 43: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufBool.self, value: &_repeatedBool)
      case 44: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_repeatedString)
      case 45: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: &_repeatedBytes)
      case 46: try setter.decodeRepeatedGroupField(fieldType: ProtobufUnittestNoArena_TestAllTypes.RepeatedGroup.self, value: &_repeatedGroup)
      case 48: try setter.decodeRepeatedMessageField(fieldType: ProtobufUnittestNoArena_TestAllTypes.NestedMessage.self, value: &_repeatedNestedMessage)
      case 49: try setter.decodeRepeatedMessageField(fieldType: ProtobufUnittestNoArena_ForeignMessage.self, value: &_repeatedForeignMessage)
      case 50: try setter.decodeRepeatedMessageField(fieldType: ProtobufUnittestImport_ImportMessage.self, value: &_repeatedImportMessage)
      case 51: try setter.decodeRepeatedField(fieldType: ProtobufUnittestNoArena_TestAllTypes.NestedEnum.self, value: &_repeatedNestedEnum)
      case 52: try setter.decodeRepeatedField(fieldType: ProtobufUnittestNoArena_ForeignEnum.self, value: &_repeatedForeignEnum)
      case 53: try setter.decodeRepeatedField(fieldType: ProtobufUnittestImport_ImportEnum.self, value: &_repeatedImportEnum)
      case 54: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_repeatedStringPiece)
      case 55: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_repeatedCord)
      case 57: try setter.decodeRepeatedMessageField(fieldType: ProtobufUnittestNoArena_TestAllTypes.NestedMessage.self, value: &_repeatedLazyMessage)
      case 61: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_defaultInt32)
      case 62: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: &_defaultInt64)
      case 63: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_defaultUint32)
      case 64: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt64.self, value: &_defaultUint64)
      case 65: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufSInt32.self, value: &_defaultSint32)
      case 66: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufSInt64.self, value: &_defaultSint64)
      case 67: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufFixed32.self, value: &_defaultFixed32)
      case 68: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufFixed64.self, value: &_defaultFixed64)
      case 69: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufSFixed32.self, value: &_defaultSfixed32)
      case 70: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufSFixed64.self, value: &_defaultSfixed64)
      case 71: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufFloat.self, value: &_defaultFloat)
      case 72: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufDouble.self, value: &_defaultDouble)
      case 73: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: &_defaultBool)
      case 74: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_defaultString)
      case 75: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: &_defaultBytes)
      case 81: try setter.decodeSingularField(fieldType: ProtobufUnittestNoArena_TestAllTypes.NestedEnum.self, value: &_defaultNestedEnum)
      case 82: try setter.decodeSingularField(fieldType: ProtobufUnittestNoArena_ForeignEnum.self, value: &_defaultForeignEnum)
      case 83: try setter.decodeSingularField(fieldType: ProtobufUnittestImport_ImportEnum.self, value: &_defaultImportEnum)
      case 84: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_defaultStringPiece)
      case 85: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_defaultCord)
      case 111, 112, 113, 114, 115: try _oneofField.decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
      default: break
      }
    }

    func traverse(visitor: SwiftProtobuf.Visitor) throws {
      if let v = _optionalInt32 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: v, fieldNumber: 1)
      }
      if let v = _optionalInt64 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: v, fieldNumber: 2)
      }
      if let v = _optionalUint32 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: v, fieldNumber: 3)
      }
      if let v = _optionalUint64 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt64.self, value: v, fieldNumber: 4)
      }
      if let v = _optionalSint32 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufSInt32.self, value: v, fieldNumber: 5)
      }
      if let v = _optionalSint64 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufSInt64.self, value: v, fieldNumber: 6)
      }
      if let v = _optionalFixed32 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufFixed32.self, value: v, fieldNumber: 7)
      }
      if let v = _optionalFixed64 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufFixed64.self, value: v, fieldNumber: 8)
      }
      if let v = _optionalSfixed32 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufSFixed32.self, value: v, fieldNumber: 9)
      }
      if let v = _optionalSfixed64 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufSFixed64.self, value: v, fieldNumber: 10)
      }
      if let v = _optionalFloat {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufFloat.self, value: v, fieldNumber: 11)
      }
      if let v = _optionalDouble {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufDouble.self, value: v, fieldNumber: 12)
      }
      if let v = _optionalBool {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: v, fieldNumber: 13)
      }
      if let v = _optionalString {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: v, fieldNumber: 14)
      }
      if let v = _optionalBytes {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: v, fieldNumber: 15)
      }
      if let v = _optionalGroup {
        try visitor.visitSingularGroupField(value: v, fieldNumber: 16)
      }
      if let v = _optionalNestedMessage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
      }
      if let v = _optionalForeignMessage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
      }
      if let v = _optionalImportMessage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
      }
      if let v = _optionalNestedEnum {
        try visitor.visitSingularField(fieldType: ProtobufUnittestNoArena_TestAllTypes.NestedEnum.self, value: v, fieldNumber: 21)
      }
      if let v = _optionalForeignEnum {
        try visitor.visitSingularField(fieldType: ProtobufUnittestNoArena_ForeignEnum.self, value: v, fieldNumber: 22)
      }
      if let v = _optionalImportEnum {
        try visitor.visitSingularField(fieldType: ProtobufUnittestImport_ImportEnum.self, value: v, fieldNumber: 23)
      }
      if let v = _optionalStringPiece {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: v, fieldNumber: 24)
      }
      if let v = _optionalCord {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: v, fieldNumber: 25)
      }
      if let v = _optionalPublicImportMessage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 26)
      }
      if let v = _optionalMessage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 27)
      }
      if !_repeatedInt32.isEmpty {
        try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: _repeatedInt32, fieldNumber: 31)
      }
      if !_repeatedInt64.isEmpty {
        try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: _repeatedInt64, fieldNumber: 32)
      }
      if !_repeatedUint32.isEmpty {
        try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _repeatedUint32, fieldNumber: 33)
      }
      if !_repeatedUint64.isEmpty {
        try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufUInt64.self, value: _repeatedUint64, fieldNumber: 34)
      }
      if !_repeatedSint32.isEmpty {
        try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufSInt32.self, value: _repeatedSint32, fieldNumber: 35)
      }
      if !_repeatedSint64.isEmpty {
        try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufSInt64.self, value: _repeatedSint64, fieldNumber: 36)
      }
      if !_repeatedFixed32.isEmpty {
        try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufFixed32.self, value: _repeatedFixed32, fieldNumber: 37)
      }
      if !_repeatedFixed64.isEmpty {
        try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufFixed64.self, value: _repeatedFixed64, fieldNumber: 38)
      }
      if !_repeatedSfixed32.isEmpty {
        try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufSFixed32.self, value: _repeatedSfixed32, fieldNumber: 39)
      }
      if !_repeatedSfixed64.isEmpty {
        try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufSFixed64.self, value: _repeatedSfixed64, fieldNumber: 40)
      }
      if !_repeatedFloat.isEmpty {
        try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufFloat.self, value: _repeatedFloat, fieldNumber: 41)
      }
      if !_repeatedDouble.isEmpty {
        try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufDouble.self, value: _repeatedDouble, fieldNumber: 42)
      }
      if !_repeatedBool.isEmpty {
        try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufBool.self, value: _repeatedBool, fieldNumber: 43)
      }
      if !_repeatedString.isEmpty {
        try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufString.self, value: _repeatedString, fieldNumber: 44)
      }
      if !_repeatedBytes.isEmpty {
        try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: _repeatedBytes, fieldNumber: 45)
      }
      if !_repeatedGroup.isEmpty {
        try visitor.visitRepeatedGroupField(value: _repeatedGroup, fieldNumber: 46)
      }
      if !_repeatedNestedMessage.isEmpty {
        try visitor.visitRepeatedMessageField(value: _repeatedNestedMessage, fieldNumber: 48)
      }
      if !_repeatedForeignMessage.isEmpty {
        try visitor.visitRepeatedMessageField(value: _repeatedForeignMessage, fieldNumber: 49)
      }
      if !_repeatedImportMessage.isEmpty {
        try visitor.visitRepeatedMessageField(value: _repeatedImportMessage, fieldNumber: 50)
      }
      if !_repeatedNestedEnum.isEmpty {
        try visitor.visitRepeatedField(fieldType: ProtobufUnittestNoArena_TestAllTypes.NestedEnum.self, value: _repeatedNestedEnum, fieldNumber: 51)
      }
      if !_repeatedForeignEnum.isEmpty {
        try visitor.visitRepeatedField(fieldType: ProtobufUnittestNoArena_ForeignEnum.self, value: _repeatedForeignEnum, fieldNumber: 52)
      }
      if !_repeatedImportEnum.isEmpty {
        try visitor.visitRepeatedField(fieldType: ProtobufUnittestImport_ImportEnum.self, value: _repeatedImportEnum, fieldNumber: 53)
      }
      if !_repeatedStringPiece.isEmpty {
        try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufString.self, value: _repeatedStringPiece, fieldNumber: 54)
      }
      if !_repeatedCord.isEmpty {
        try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufString.self, value: _repeatedCord, fieldNumber: 55)
      }
      if !_repeatedLazyMessage.isEmpty {
        try visitor.visitRepeatedMessageField(value: _repeatedLazyMessage, fieldNumber: 57)
      }
      if let v = _defaultInt32 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: v, fieldNumber: 61)
      }
      if let v = _defaultInt64 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: v, fieldNumber: 62)
      }
      if let v = _defaultUint32 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: v, fieldNumber: 63)
      }
      if let v = _defaultUint64 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt64.self, value: v, fieldNumber: 64)
      }
      if let v = _defaultSint32 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufSInt32.self, value: v, fieldNumber: 65)
      }
      if let v = _defaultSint64 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufSInt64.self, value: v, fieldNumber: 66)
      }
      if let v = _defaultFixed32 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufFixed32.self, value: v, fieldNumber: 67)
      }
      if let v = _defaultFixed64 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufFixed64.self, value: v, fieldNumber: 68)
      }
      if let v = _defaultSfixed32 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufSFixed32.self, value: v, fieldNumber: 69)
      }
      if let v = _defaultSfixed64 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufSFixed64.self, value: v, fieldNumber: 70)
      }
      if let v = _defaultFloat {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufFloat.self, value: v, fieldNumber: 71)
      }
      if let v = _defaultDouble {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufDouble.self, value: v, fieldNumber: 72)
      }
      if let v = _defaultBool {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: v, fieldNumber: 73)
      }
      if let v = _defaultString {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: v, fieldNumber: 74)
      }
      if let v = _defaultBytes {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: v, fieldNumber: 75)
      }
      if let v = _defaultNestedEnum {
        try visitor.visitSingularField(fieldType: ProtobufUnittestNoArena_TestAllTypes.NestedEnum.self, value: v, fieldNumber: 81)
      }
      if let v = _defaultForeignEnum {
        try visitor.visitSingularField(fieldType: ProtobufUnittestNoArena_ForeignEnum.self, value: v, fieldNumber: 82)
      }
      if let v = _defaultImportEnum {
        try visitor.visitSingularField(fieldType: ProtobufUnittestImport_ImportEnum.self, value: v, fieldNumber: 83)
      }
      if let v = _defaultStringPiece {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: v, fieldNumber: 84)
      }
      if let v = _defaultCord {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: v, fieldNumber: 85)
      }
      try _oneofField.traverse(visitor: visitor, start: 111, end: 116)
      unknown.traverse(visitor: visitor)
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _optionalInt32 != other._optionalInt32 {return false}
      if _optionalInt64 != other._optionalInt64 {return false}
      if _optionalUint32 != other._optionalUint32 {return false}
      if _optionalUint64 != other._optionalUint64 {return false}
      if _optionalSint32 != other._optionalSint32 {return false}
      if _optionalSint64 != other._optionalSint64 {return false}
      if _optionalFixed32 != other._optionalFixed32 {return false}
      if _optionalFixed64 != other._optionalFixed64 {return false}
      if _optionalSfixed32 != other._optionalSfixed32 {return false}
      if _optionalSfixed64 != other._optionalSfixed64 {return false}
      if _optionalFloat != other._optionalFloat {return false}
      if _optionalDouble != other._optionalDouble {return false}
      if _optionalBool != other._optionalBool {return false}
      if _optionalString != other._optionalString {return false}
      if _optionalBytes != other._optionalBytes {return false}
      if _optionalGroup != other._optionalGroup {return false}
      if _optionalNestedMessage != other._optionalNestedMessage {return false}
      if _optionalForeignMessage != other._optionalForeignMessage {return false}
      if _optionalImportMessage != other._optionalImportMessage {return false}
      if _optionalNestedEnum != other._optionalNestedEnum {return false}
      if _optionalForeignEnum != other._optionalForeignEnum {return false}
      if _optionalImportEnum != other._optionalImportEnum {return false}
      if _optionalStringPiece != other._optionalStringPiece {return false}
      if _optionalCord != other._optionalCord {return false}
      if _optionalPublicImportMessage != other._optionalPublicImportMessage {return false}
      if _optionalMessage != other._optionalMessage {return false}
      if _repeatedInt32 != other._repeatedInt32 {return false}
      if _repeatedInt64 != other._repeatedInt64 {return false}
      if _repeatedUint32 != other._repeatedUint32 {return false}
      if _repeatedUint64 != other._repeatedUint64 {return false}
      if _repeatedSint32 != other._repeatedSint32 {return false}
      if _repeatedSint64 != other._repeatedSint64 {return false}
      if _repeatedFixed32 != other._repeatedFixed32 {return false}
      if _repeatedFixed64 != other._repeatedFixed64 {return false}
      if _repeatedSfixed32 != other._repeatedSfixed32 {return false}
      if _repeatedSfixed64 != other._repeatedSfixed64 {return false}
      if _repeatedFloat != other._repeatedFloat {return false}
      if _repeatedDouble != other._repeatedDouble {return false}
      if _repeatedBool != other._repeatedBool {return false}
      if _repeatedString != other._repeatedString {return false}
      if _repeatedBytes != other._repeatedBytes {return false}
      if _repeatedGroup != other._repeatedGroup {return false}
      if _repeatedNestedMessage != other._repeatedNestedMessage {return false}
      if _repeatedForeignMessage != other._repeatedForeignMessage {return false}
      if _repeatedImportMessage != other._repeatedImportMessage {return false}
      if _repeatedNestedEnum != other._repeatedNestedEnum {return false}
      if _repeatedForeignEnum != other._repeatedForeignEnum {return false}
      if _repeatedImportEnum != other._repeatedImportEnum {return false}
      if _repeatedStringPiece != other._repeatedStringPiece {return false}
      if _repeatedCord != other._repeatedCord {return false}
      if _repeatedLazyMessage != other._repeatedLazyMessage {return false}
      if _defaultInt32 != other._defaultInt32 {return false}
      if _defaultInt64 != other._defaultInt64 {return false}
      if _defaultUint32 != other._defaultUint32 {return false}
      if _defaultUint64 != other._defaultUint64 {return false}
      if _defaultSint32 != other._defaultSint32 {return false}
      if _defaultSint64 != other._defaultSint64 {return false}
      if _defaultFixed32 != other._defaultFixed32 {return false}
      if _defaultFixed64 != other._defaultFixed64 {return false}
      if _defaultSfixed32 != other._defaultSfixed32 {return false}
      if _defaultSfixed64 != other._defaultSfixed64 {return false}
      if _defaultFloat != other._defaultFloat {return false}
      if _defaultDouble != other._defaultDouble {return false}
      if _defaultBool != other._defaultBool {return false}
      if _defaultString != other._defaultString {return false}
      if _defaultBytes != other._defaultBytes {return false}
      if _defaultNestedEnum != other._defaultNestedEnum {return false}
      if _defaultForeignEnum != other._defaultForeignEnum {return false}
      if _defaultImportEnum != other._defaultImportEnum {return false}
      if _defaultStringPiece != other._defaultStringPiece {return false}
      if _defaultCord != other._defaultCord {return false}
      if _oneofField != other._oneofField {return false}
      if unknown != other.unknown {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone.unknown = unknown
      clone._optionalInt32 = _optionalInt32
      clone._optionalInt64 = _optionalInt64
      clone._optionalUint32 = _optionalUint32
      clone._optionalUint64 = _optionalUint64
      clone._optionalSint32 = _optionalSint32
      clone._optionalSint64 = _optionalSint64
      clone._optionalFixed32 = _optionalFixed32
      clone._optionalFixed64 = _optionalFixed64
      clone._optionalSfixed32 = _optionalSfixed32
      clone._optionalSfixed64 = _optionalSfixed64
      clone._optionalFloat = _optionalFloat
      clone._optionalDouble = _optionalDouble
      clone._optionalBool = _optionalBool
      clone._optionalString = _optionalString
      clone._optionalBytes = _optionalBytes
      clone._optionalGroup = _optionalGroup
      clone._optionalNestedMessage = _optionalNestedMessage
      clone._optionalForeignMessage = _optionalForeignMessage
      clone._optionalImportMessage = _optionalImportMessage
      clone._optionalNestedEnum = _optionalNestedEnum
      clone._optionalForeignEnum = _optionalForeignEnum
      clone._optionalImportEnum = _optionalImportEnum
      clone._optionalStringPiece = _optionalStringPiece
      clone._optionalCord = _optionalCord
      clone._optionalPublicImportMessage = _optionalPublicImportMessage
      clone._optionalMessage = _optionalMessage
      clone._repeatedInt32 = _repeatedInt32
      clone._repeatedInt64 = _repeatedInt64
      clone._repeatedUint32 = _repeatedUint32
      clone._repeatedUint64 = _repeatedUint64
      clone._repeatedSint32 = _repeatedSint32
      clone._repeatedSint64 = _repeatedSint64
      clone._repeatedFixed32 = _repeatedFixed32
      clone._repeatedFixed64 = _repeatedFixed64
      clone._repeatedSfixed32 = _repeatedSfixed32
      clone._repeatedSfixed64 = _repeatedSfixed64
      clone._repeatedFloat = _repeatedFloat
      clone._repeatedDouble = _repeatedDouble
      clone._repeatedBool = _repeatedBool
      clone._repeatedString = _repeatedString
      clone._repeatedBytes = _repeatedBytes
      clone._repeatedGroup = _repeatedGroup
      clone._repeatedNestedMessage = _repeatedNestedMessage
      clone._repeatedForeignMessage = _repeatedForeignMessage
      clone._repeatedImportMessage = _repeatedImportMessage
      clone._repeatedNestedEnum = _repeatedNestedEnum
      clone._repeatedForeignEnum = _repeatedForeignEnum
      clone._repeatedImportEnum = _repeatedImportEnum
      clone._repeatedStringPiece = _repeatedStringPiece
      clone._repeatedCord = _repeatedCord
      clone._repeatedLazyMessage = _repeatedLazyMessage
      clone._defaultInt32 = _defaultInt32
      clone._defaultInt64 = _defaultInt64
      clone._defaultUint32 = _defaultUint32
      clone._defaultUint64 = _defaultUint64
      clone._defaultSint32 = _defaultSint32
      clone._defaultSint64 = _defaultSint64
      clone._defaultFixed32 = _defaultFixed32
      clone._defaultFixed64 = _defaultFixed64
      clone._defaultSfixed32 = _defaultSfixed32
      clone._defaultSfixed64 = _defaultSfixed64
      clone._defaultFloat = _defaultFloat
      clone._defaultDouble = _defaultDouble
      clone._defaultBool = _defaultBool
      clone._defaultString = _defaultString
      clone._defaultBytes = _defaultBytes
      clone._defaultNestedEnum = _defaultNestedEnum
      clone._defaultForeignEnum = _defaultForeignEnum
      clone._defaultImportEnum = _defaultImportEnum
      clone._defaultStringPiece = _defaultStringPiece
      clone._defaultCord = _defaultCord
      clone._oneofField = _oneofField
      return clone
    }
  }

  private var _storage = _StorageClass()

  public var unknown: SwiftProtobuf.UnknownStorage {
    get {return _storage.unknown}
    set {_storage.unknown = newValue}
  }

  enum OneOf_OneofField: ExpressibleByNilLiteral, SwiftProtobuf.OneofEnum {
    case oneofUint32(UInt32)
    case oneofNestedMessage(ProtobufUnittestNoArena_TestAllTypes.NestedMessage)
    case oneofString(String)
    case oneofBytes(Data)
    case lazyOneofNestedMessage(ProtobufUnittestNoArena_TestAllTypes.NestedMessage)
    case None

    static func ==(lhs: ProtobufUnittestNoArena_TestAllTypes.OneOf_OneofField, rhs: ProtobufUnittestNoArena_TestAllTypes.OneOf_OneofField) -> Bool {
      switch (lhs, rhs) {
      case (.oneofUint32(let l), .oneofUint32(let r)): return l == r
      case (.oneofNestedMessage(let l), .oneofNestedMessage(let r)): return l == r
      case (.oneofString(let l), .oneofString(let r)): return l == r
      case (.oneofBytes(let l), .oneofBytes(let r)): return l == r
      case (.lazyOneofNestedMessage(let l), .lazyOneofNestedMessage(let r)): return l == r
      case (.None, .None): return true
      default: return false
      }
    }

    public init(nilLiteral: ()) {
      self = .None
    }

    public init() {
      self = .None
    }

    public mutating func decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
      if self != .None && setter.rejectConflictingOneof {
        throw SwiftProtobuf.DecodingError.duplicatedOneOf
      }
      switch protoFieldNumber {
      case 111:
        var value: UInt32?
        try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &value)
        if let value = value {
          self = .oneofUint32(value)
        }
      case 112:
        var value: ProtobufUnittestNoArena_TestAllTypes.NestedMessage?
        try setter.decodeSingularMessageField(fieldType: ProtobufUnittestNoArena_TestAllTypes.NestedMessage.self, value: &value)
        if let value = value {
          self = .oneofNestedMessage(value)
        }
      case 113:
        var value: String?
        try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &value)
        if let value = value {
          self = .oneofString(value)
        }
      case 114:
        var value: Data?
        try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: &value)
        if let value = value {
          self = .oneofBytes(value)
        }
      case 115:
        var value: ProtobufUnittestNoArena_TestAllTypes.NestedMessage?
        try setter.decodeSingularMessageField(fieldType: ProtobufUnittestNoArena_TestAllTypes.NestedMessage.self, value: &value)
        if let value = value {
          self = .lazyOneofNestedMessage(value)
        }
      default:
        self = .None
      }
    }

    public func traverse(visitor: SwiftProtobuf.Visitor, start: Int, end: Int) throws {
      switch self {
      case .oneofUint32(let v):
        if start <= 111 && 111 < end {
          try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: v, fieldNumber: 111)
        }
      case .oneofNestedMessage(let v):
        if start <= 112 && 112 < end {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 112)
        }
      case .oneofString(let v):
        if start <= 113 && 113 < end {
          try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: v, fieldNumber: 113)
        }
      case .oneofBytes(let v):
        if start <= 114 && 114 < end {
          try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: v, fieldNumber: 114)
        }
      case .lazyOneofNestedMessage(let v):
        if start <= 115 && 115 < end {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 115)
        }
      case .None:
        break
      }
    }
  }

  enum NestedEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case foo // = 1
    case bar // = 2
    case baz // = 3

    ///   Intentionally negative.
    case neg // = -1

    init() {
      self = .foo
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 1: self = .foo
      case 2: self = .bar
      case 3: self = .baz
      case -1: self = .neg
      default: return nil
      }
    }

    init?(jsonName: String) {
      switch jsonName {
      case "FOO": self = .foo
      case "BAR": self = .bar
      case "BAZ": self = .baz
      case "NEG": self = .neg
      default: return nil
      }
    }

    init?(protoName: String) {
      switch protoName {
      case "FOO": self = .foo
      case "BAR": self = .bar
      case "BAZ": self = .baz
      case "NEG": self = .neg
      default: return nil
      }
    }

    var rawValue: Int {
      get {
        switch self {
        case .foo: return 1
        case .bar: return 2
        case .baz: return 3
        case .neg: return -1
        }
      }
    }

    var _protobuf_jsonName: String? {
      get {
        switch self {
        case .foo: return "FOO"
        case .bar: return "BAR"
        case .baz: return "BAZ"
        case .neg: return "NEG"
        }
      }
    }

    var hashValue: Int { return rawValue }

  }

  struct NestedMessage: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
    public var protoMessageName: String {return "NestedMessage"}
    public var protoPackageName: String {return "protobuf_unittest_no_arena"}
    public static let _protobuf_fieldNames: FieldNameMap = [
      1: .same(proto: "bb"),
    ]

    public var unknown = SwiftProtobuf.UnknownStorage()

    ///   The field name "b" fails to compile in proto1 because it conflicts with
    ///   a local variable named "b" in one of the generated methods.  Doh.
    ///   This file needs to compile in proto1 to test backwards-compatibility.
    private var _bb: Int32? = nil
    var bb: Int32 {
      get {return _bb ?? 0}
      set {_bb = newValue}
    }
    var hasBb: Bool {
      return _bb != nil
    }
    mutating func clearBb() {
      return _bb = nil
    }

    init() {}

    public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_bb)
      default: break
      }
    }

    public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
      if let v = _bb {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: v, fieldNumber: 1)
      }
      unknown.traverse(visitor: visitor)
    }

    public func _protoc_generated_isEqualTo(other: ProtobufUnittestNoArena_TestAllTypes.NestedMessage) -> Bool {
      if _bb != other._bb {return false}
      if unknown != other.unknown {return false}
      return true
    }
  }

  struct OptionalGroup: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
    public var protoMessageName: String {return "OptionalGroup"}
    public var protoPackageName: String {return "protobuf_unittest_no_arena"}
    public static let _protobuf_fieldNames: FieldNameMap = [
      17: .same(proto: "a"),
    ]

    public var unknown = SwiftProtobuf.UnknownStorage()

    private var _a: Int32? = nil
    var a: Int32 {
      get {return _a ?? 0}
      set {_a = newValue}
    }
    var hasA: Bool {
      return _a != nil
    }
    mutating func clearA() {
      return _a = nil
    }

    init() {}

    public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 17: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_a)
      default: break
      }
    }

    public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
      if let v = _a {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: v, fieldNumber: 17)
      }
      unknown.traverse(visitor: visitor)
    }

    public func _protoc_generated_isEqualTo(other: ProtobufUnittestNoArena_TestAllTypes.OptionalGroup) -> Bool {
      if _a != other._a {return false}
      if unknown != other.unknown {return false}
      return true
    }
  }

  struct RepeatedGroup: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
    public var protoMessageName: String {return "RepeatedGroup"}
    public var protoPackageName: String {return "protobuf_unittest_no_arena"}
    public static let _protobuf_fieldNames: FieldNameMap = [
      47: .same(proto: "a"),
    ]

    public var unknown = SwiftProtobuf.UnknownStorage()

    private var _a: Int32? = nil
    var a: Int32 {
      get {return _a ?? 0}
      set {_a = newValue}
    }
    var hasA: Bool {
      return _a != nil
    }
    mutating func clearA() {
      return _a = nil
    }

    init() {}

    public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 47: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_a)
      default: break
      }
    }

    public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
      if let v = _a {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: v, fieldNumber: 47)
      }
      unknown.traverse(visitor: visitor)
    }

    public func _protoc_generated_isEqualTo(other: ProtobufUnittestNoArena_TestAllTypes.RepeatedGroup) -> Bool {
      if _a != other._a {return false}
      if unknown != other.unknown {return false}
      return true
    }
  }

  ///   Singular
  var optionalInt32: Int32 {
    get {return _storage._optionalInt32 ?? 0}
    set {_uniqueStorage()._optionalInt32 = newValue}
  }
  var hasOptionalInt32: Bool {
    return _storage._optionalInt32 != nil
  }
  mutating func clearOptionalInt32() {
    return _storage._optionalInt32 = nil
  }

  var optionalInt64: Int64 {
    get {return _storage._optionalInt64 ?? 0}
    set {_uniqueStorage()._optionalInt64 = newValue}
  }
  var hasOptionalInt64: Bool {
    return _storage._optionalInt64 != nil
  }
  mutating func clearOptionalInt64() {
    return _storage._optionalInt64 = nil
  }

  var optionalUint32: UInt32 {
    get {return _storage._optionalUint32 ?? 0}
    set {_uniqueStorage()._optionalUint32 = newValue}
  }
  var hasOptionalUint32: Bool {
    return _storage._optionalUint32 != nil
  }
  mutating func clearOptionalUint32() {
    return _storage._optionalUint32 = nil
  }

  var optionalUint64: UInt64 {
    get {return _storage._optionalUint64 ?? 0}
    set {_uniqueStorage()._optionalUint64 = newValue}
  }
  var hasOptionalUint64: Bool {
    return _storage._optionalUint64 != nil
  }
  mutating func clearOptionalUint64() {
    return _storage._optionalUint64 = nil
  }

  var optionalSint32: Int32 {
    get {return _storage._optionalSint32 ?? 0}
    set {_uniqueStorage()._optionalSint32 = newValue}
  }
  var hasOptionalSint32: Bool {
    return _storage._optionalSint32 != nil
  }
  mutating func clearOptionalSint32() {
    return _storage._optionalSint32 = nil
  }

  var optionalSint64: Int64 {
    get {return _storage._optionalSint64 ?? 0}
    set {_uniqueStorage()._optionalSint64 = newValue}
  }
  var hasOptionalSint64: Bool {
    return _storage._optionalSint64 != nil
  }
  mutating func clearOptionalSint64() {
    return _storage._optionalSint64 = nil
  }

  var optionalFixed32: UInt32 {
    get {return _storage._optionalFixed32 ?? 0}
    set {_uniqueStorage()._optionalFixed32 = newValue}
  }
  var hasOptionalFixed32: Bool {
    return _storage._optionalFixed32 != nil
  }
  mutating func clearOptionalFixed32() {
    return _storage._optionalFixed32 = nil
  }

  var optionalFixed64: UInt64 {
    get {return _storage._optionalFixed64 ?? 0}
    set {_uniqueStorage()._optionalFixed64 = newValue}
  }
  var hasOptionalFixed64: Bool {
    return _storage._optionalFixed64 != nil
  }
  mutating func clearOptionalFixed64() {
    return _storage._optionalFixed64 = nil
  }

  var optionalSfixed32: Int32 {
    get {return _storage._optionalSfixed32 ?? 0}
    set {_uniqueStorage()._optionalSfixed32 = newValue}
  }
  var hasOptionalSfixed32: Bool {
    return _storage._optionalSfixed32 != nil
  }
  mutating func clearOptionalSfixed32() {
    return _storage._optionalSfixed32 = nil
  }

  var optionalSfixed64: Int64 {
    get {return _storage._optionalSfixed64 ?? 0}
    set {_uniqueStorage()._optionalSfixed64 = newValue}
  }
  var hasOptionalSfixed64: Bool {
    return _storage._optionalSfixed64 != nil
  }
  mutating func clearOptionalSfixed64() {
    return _storage._optionalSfixed64 = nil
  }

  var optionalFloat: Float {
    get {return _storage._optionalFloat ?? 0}
    set {_uniqueStorage()._optionalFloat = newValue}
  }
  var hasOptionalFloat: Bool {
    return _storage._optionalFloat != nil
  }
  mutating func clearOptionalFloat() {
    return _storage._optionalFloat = nil
  }

  var optionalDouble: Double {
    get {return _storage._optionalDouble ?? 0}
    set {_uniqueStorage()._optionalDouble = newValue}
  }
  var hasOptionalDouble: Bool {
    return _storage._optionalDouble != nil
  }
  mutating func clearOptionalDouble() {
    return _storage._optionalDouble = nil
  }

  var optionalBool: Bool {
    get {return _storage._optionalBool ?? false}
    set {_uniqueStorage()._optionalBool = newValue}
  }
  var hasOptionalBool: Bool {
    return _storage._optionalBool != nil
  }
  mutating func clearOptionalBool() {
    return _storage._optionalBool = nil
  }

  var optionalString: String {
    get {return _storage._optionalString ?? ""}
    set {_uniqueStorage()._optionalString = newValue}
  }
  var hasOptionalString: Bool {
    return _storage._optionalString != nil
  }
  mutating func clearOptionalString() {
    return _storage._optionalString = nil
  }

  var optionalBytes: Data {
    get {return _storage._optionalBytes ?? Data()}
    set {_uniqueStorage()._optionalBytes = newValue}
  }
  var hasOptionalBytes: Bool {
    return _storage._optionalBytes != nil
  }
  mutating func clearOptionalBytes() {
    return _storage._optionalBytes = nil
  }

  var optionalGroup: ProtobufUnittestNoArena_TestAllTypes.OptionalGroup {
    get {return _storage._optionalGroup ?? ProtobufUnittestNoArena_TestAllTypes.OptionalGroup()}
    set {_uniqueStorage()._optionalGroup = newValue}
  }
  var hasOptionalGroup: Bool {
    return _storage._optionalGroup != nil
  }
  mutating func clearOptionalGroup() {
    return _storage._optionalGroup = nil
  }

  var optionalNestedMessage: ProtobufUnittestNoArena_TestAllTypes.NestedMessage {
    get {return _storage._optionalNestedMessage ?? ProtobufUnittestNoArena_TestAllTypes.NestedMessage()}
    set {_uniqueStorage()._optionalNestedMessage = newValue}
  }
  var hasOptionalNestedMessage: Bool {
    return _storage._optionalNestedMessage != nil
  }
  mutating func clearOptionalNestedMessage() {
    return _storage._optionalNestedMessage = nil
  }

  var optionalForeignMessage: ProtobufUnittestNoArena_ForeignMessage {
    get {return _storage._optionalForeignMessage ?? ProtobufUnittestNoArena_ForeignMessage()}
    set {_uniqueStorage()._optionalForeignMessage = newValue}
  }
  var hasOptionalForeignMessage: Bool {
    return _storage._optionalForeignMessage != nil
  }
  mutating func clearOptionalForeignMessage() {
    return _storage._optionalForeignMessage = nil
  }

  var optionalImportMessage: ProtobufUnittestImport_ImportMessage {
    get {return _storage._optionalImportMessage ?? ProtobufUnittestImport_ImportMessage()}
    set {_uniqueStorage()._optionalImportMessage = newValue}
  }
  var hasOptionalImportMessage: Bool {
    return _storage._optionalImportMessage != nil
  }
  mutating func clearOptionalImportMessage() {
    return _storage._optionalImportMessage = nil
  }

  var optionalNestedEnum: ProtobufUnittestNoArena_TestAllTypes.NestedEnum {
    get {return _storage._optionalNestedEnum ?? ProtobufUnittestNoArena_TestAllTypes.NestedEnum.foo}
    set {_uniqueStorage()._optionalNestedEnum = newValue}
  }
  var hasOptionalNestedEnum: Bool {
    return _storage._optionalNestedEnum != nil
  }
  mutating func clearOptionalNestedEnum() {
    return _storage._optionalNestedEnum = nil
  }

  var optionalForeignEnum: ProtobufUnittestNoArena_ForeignEnum {
    get {return _storage._optionalForeignEnum ?? ProtobufUnittestNoArena_ForeignEnum.foreignFoo}
    set {_uniqueStorage()._optionalForeignEnum = newValue}
  }
  var hasOptionalForeignEnum: Bool {
    return _storage._optionalForeignEnum != nil
  }
  mutating func clearOptionalForeignEnum() {
    return _storage._optionalForeignEnum = nil
  }

  var optionalImportEnum: ProtobufUnittestImport_ImportEnum {
    get {return _storage._optionalImportEnum ?? ProtobufUnittestImport_ImportEnum.importFoo}
    set {_uniqueStorage()._optionalImportEnum = newValue}
  }
  var hasOptionalImportEnum: Bool {
    return _storage._optionalImportEnum != nil
  }
  mutating func clearOptionalImportEnum() {
    return _storage._optionalImportEnum = nil
  }

  var optionalStringPiece: String {
    get {return _storage._optionalStringPiece ?? ""}
    set {_uniqueStorage()._optionalStringPiece = newValue}
  }
  var hasOptionalStringPiece: Bool {
    return _storage._optionalStringPiece != nil
  }
  mutating func clearOptionalStringPiece() {
    return _storage._optionalStringPiece = nil
  }

  var optionalCord: String {
    get {return _storage._optionalCord ?? ""}
    set {_uniqueStorage()._optionalCord = newValue}
  }
  var hasOptionalCord: Bool {
    return _storage._optionalCord != nil
  }
  mutating func clearOptionalCord() {
    return _storage._optionalCord = nil
  }

  ///   Defined in unittest_import_public.proto
  var optionalPublicImportMessage: ProtobufUnittestImport_PublicImportMessage {
    get {return _storage._optionalPublicImportMessage ?? ProtobufUnittestImport_PublicImportMessage()}
    set {_uniqueStorage()._optionalPublicImportMessage = newValue}
  }
  var hasOptionalPublicImportMessage: Bool {
    return _storage._optionalPublicImportMessage != nil
  }
  mutating func clearOptionalPublicImportMessage() {
    return _storage._optionalPublicImportMessage = nil
  }

  var optionalMessage: ProtobufUnittestNoArena_TestAllTypes.NestedMessage {
    get {return _storage._optionalMessage ?? ProtobufUnittestNoArena_TestAllTypes.NestedMessage()}
    set {_uniqueStorage()._optionalMessage = newValue}
  }
  var hasOptionalMessage: Bool {
    return _storage._optionalMessage != nil
  }
  mutating func clearOptionalMessage() {
    return _storage._optionalMessage = nil
  }

  ///   Repeated
  var repeatedInt32: [Int32] {
    get {return _storage._repeatedInt32}
    set {_uniqueStorage()._repeatedInt32 = newValue}
  }

  var repeatedInt64: [Int64] {
    get {return _storage._repeatedInt64}
    set {_uniqueStorage()._repeatedInt64 = newValue}
  }

  var repeatedUint32: [UInt32] {
    get {return _storage._repeatedUint32}
    set {_uniqueStorage()._repeatedUint32 = newValue}
  }

  var repeatedUint64: [UInt64] {
    get {return _storage._repeatedUint64}
    set {_uniqueStorage()._repeatedUint64 = newValue}
  }

  var repeatedSint32: [Int32] {
    get {return _storage._repeatedSint32}
    set {_uniqueStorage()._repeatedSint32 = newValue}
  }

  var repeatedSint64: [Int64] {
    get {return _storage._repeatedSint64}
    set {_uniqueStorage()._repeatedSint64 = newValue}
  }

  var repeatedFixed32: [UInt32] {
    get {return _storage._repeatedFixed32}
    set {_uniqueStorage()._repeatedFixed32 = newValue}
  }

  var repeatedFixed64: [UInt64] {
    get {return _storage._repeatedFixed64}
    set {_uniqueStorage()._repeatedFixed64 = newValue}
  }

  var repeatedSfixed32: [Int32] {
    get {return _storage._repeatedSfixed32}
    set {_uniqueStorage()._repeatedSfixed32 = newValue}
  }

  var repeatedSfixed64: [Int64] {
    get {return _storage._repeatedSfixed64}
    set {_uniqueStorage()._repeatedSfixed64 = newValue}
  }

  var repeatedFloat: [Float] {
    get {return _storage._repeatedFloat}
    set {_uniqueStorage()._repeatedFloat = newValue}
  }

  var repeatedDouble: [Double] {
    get {return _storage._repeatedDouble}
    set {_uniqueStorage()._repeatedDouble = newValue}
  }

  var repeatedBool: [Bool] {
    get {return _storage._repeatedBool}
    set {_uniqueStorage()._repeatedBool = newValue}
  }

  var repeatedString: [String] {
    get {return _storage._repeatedString}
    set {_uniqueStorage()._repeatedString = newValue}
  }

  var repeatedBytes: [Data] {
    get {return _storage._repeatedBytes}
    set {_uniqueStorage()._repeatedBytes = newValue}
  }

  var repeatedGroup: [ProtobufUnittestNoArena_TestAllTypes.RepeatedGroup] {
    get {return _storage._repeatedGroup}
    set {_uniqueStorage()._repeatedGroup = newValue}
  }

  var repeatedNestedMessage: [ProtobufUnittestNoArena_TestAllTypes.NestedMessage] {
    get {return _storage._repeatedNestedMessage}
    set {_uniqueStorage()._repeatedNestedMessage = newValue}
  }

  var repeatedForeignMessage: [ProtobufUnittestNoArena_ForeignMessage] {
    get {return _storage._repeatedForeignMessage}
    set {_uniqueStorage()._repeatedForeignMessage = newValue}
  }

  var repeatedImportMessage: [ProtobufUnittestImport_ImportMessage] {
    get {return _storage._repeatedImportMessage}
    set {_uniqueStorage()._repeatedImportMessage = newValue}
  }

  var repeatedNestedEnum: [ProtobufUnittestNoArena_TestAllTypes.NestedEnum] {
    get {return _storage._repeatedNestedEnum}
    set {_uniqueStorage()._repeatedNestedEnum = newValue}
  }

  var repeatedForeignEnum: [ProtobufUnittestNoArena_ForeignEnum] {
    get {return _storage._repeatedForeignEnum}
    set {_uniqueStorage()._repeatedForeignEnum = newValue}
  }

  var repeatedImportEnum: [ProtobufUnittestImport_ImportEnum] {
    get {return _storage._repeatedImportEnum}
    set {_uniqueStorage()._repeatedImportEnum = newValue}
  }

  var repeatedStringPiece: [String] {
    get {return _storage._repeatedStringPiece}
    set {_uniqueStorage()._repeatedStringPiece = newValue}
  }

  var repeatedCord: [String] {
    get {return _storage._repeatedCord}
    set {_uniqueStorage()._repeatedCord = newValue}
  }

  var repeatedLazyMessage: [ProtobufUnittestNoArena_TestAllTypes.NestedMessage] {
    get {return _storage._repeatedLazyMessage}
    set {_uniqueStorage()._repeatedLazyMessage = newValue}
  }

  ///   Singular with defaults
  var defaultInt32: Int32 {
    get {return _storage._defaultInt32 ?? 41}
    set {_uniqueStorage()._defaultInt32 = newValue}
  }
  var hasDefaultInt32: Bool {
    return _storage._defaultInt32 != nil
  }
  mutating func clearDefaultInt32() {
    return _storage._defaultInt32 = nil
  }

  var defaultInt64: Int64 {
    get {return _storage._defaultInt64 ?? 42}
    set {_uniqueStorage()._defaultInt64 = newValue}
  }
  var hasDefaultInt64: Bool {
    return _storage._defaultInt64 != nil
  }
  mutating func clearDefaultInt64() {
    return _storage._defaultInt64 = nil
  }

  var defaultUint32: UInt32 {
    get {return _storage._defaultUint32 ?? 43}
    set {_uniqueStorage()._defaultUint32 = newValue}
  }
  var hasDefaultUint32: Bool {
    return _storage._defaultUint32 != nil
  }
  mutating func clearDefaultUint32() {
    return _storage._defaultUint32 = nil
  }

  var defaultUint64: UInt64 {
    get {return _storage._defaultUint64 ?? 44}
    set {_uniqueStorage()._defaultUint64 = newValue}
  }
  var hasDefaultUint64: Bool {
    return _storage._defaultUint64 != nil
  }
  mutating func clearDefaultUint64() {
    return _storage._defaultUint64 = nil
  }

  var defaultSint32: Int32 {
    get {return _storage._defaultSint32 ?? -45}
    set {_uniqueStorage()._defaultSint32 = newValue}
  }
  var hasDefaultSint32: Bool {
    return _storage._defaultSint32 != nil
  }
  mutating func clearDefaultSint32() {
    return _storage._defaultSint32 = nil
  }

  var defaultSint64: Int64 {
    get {return _storage._defaultSint64 ?? 46}
    set {_uniqueStorage()._defaultSint64 = newValue}
  }
  var hasDefaultSint64: Bool {
    return _storage._defaultSint64 != nil
  }
  mutating func clearDefaultSint64() {
    return _storage._defaultSint64 = nil
  }

  var defaultFixed32: UInt32 {
    get {return _storage._defaultFixed32 ?? 47}
    set {_uniqueStorage()._defaultFixed32 = newValue}
  }
  var hasDefaultFixed32: Bool {
    return _storage._defaultFixed32 != nil
  }
  mutating func clearDefaultFixed32() {
    return _storage._defaultFixed32 = nil
  }

  var defaultFixed64: UInt64 {
    get {return _storage._defaultFixed64 ?? 48}
    set {_uniqueStorage()._defaultFixed64 = newValue}
  }
  var hasDefaultFixed64: Bool {
    return _storage._defaultFixed64 != nil
  }
  mutating func clearDefaultFixed64() {
    return _storage._defaultFixed64 = nil
  }

  var defaultSfixed32: Int32 {
    get {return _storage._defaultSfixed32 ?? 49}
    set {_uniqueStorage()._defaultSfixed32 = newValue}
  }
  var hasDefaultSfixed32: Bool {
    return _storage._defaultSfixed32 != nil
  }
  mutating func clearDefaultSfixed32() {
    return _storage._defaultSfixed32 = nil
  }

  var defaultSfixed64: Int64 {
    get {return _storage._defaultSfixed64 ?? -50}
    set {_uniqueStorage()._defaultSfixed64 = newValue}
  }
  var hasDefaultSfixed64: Bool {
    return _storage._defaultSfixed64 != nil
  }
  mutating func clearDefaultSfixed64() {
    return _storage._defaultSfixed64 = nil
  }

  var defaultFloat: Float {
    get {return _storage._defaultFloat ?? 51.5}
    set {_uniqueStorage()._defaultFloat = newValue}
  }
  var hasDefaultFloat: Bool {
    return _storage._defaultFloat != nil
  }
  mutating func clearDefaultFloat() {
    return _storage._defaultFloat = nil
  }

  var defaultDouble: Double {
    get {return _storage._defaultDouble ?? 52000}
    set {_uniqueStorage()._defaultDouble = newValue}
  }
  var hasDefaultDouble: Bool {
    return _storage._defaultDouble != nil
  }
  mutating func clearDefaultDouble() {
    return _storage._defaultDouble = nil
  }

  var defaultBool: Bool {
    get {return _storage._defaultBool ?? true}
    set {_uniqueStorage()._defaultBool = newValue}
  }
  var hasDefaultBool: Bool {
    return _storage._defaultBool != nil
  }
  mutating func clearDefaultBool() {
    return _storage._defaultBool = nil
  }

  var defaultString: String {
    get {return _storage._defaultString ?? "hello"}
    set {_uniqueStorage()._defaultString = newValue}
  }
  var hasDefaultString: Bool {
    return _storage._defaultString != nil
  }
  mutating func clearDefaultString() {
    return _storage._defaultString = nil
  }

  var defaultBytes: Data {
    get {return _storage._defaultBytes ?? Data(bytes: [119, 111, 114, 108, 100])}
    set {_uniqueStorage()._defaultBytes = newValue}
  }
  var hasDefaultBytes: Bool {
    return _storage._defaultBytes != nil
  }
  mutating func clearDefaultBytes() {
    return _storage._defaultBytes = nil
  }

  var defaultNestedEnum: ProtobufUnittestNoArena_TestAllTypes.NestedEnum {
    get {return _storage._defaultNestedEnum ?? ProtobufUnittestNoArena_TestAllTypes.NestedEnum.bar}
    set {_uniqueStorage()._defaultNestedEnum = newValue}
  }
  var hasDefaultNestedEnum: Bool {
    return _storage._defaultNestedEnum != nil
  }
  mutating func clearDefaultNestedEnum() {
    return _storage._defaultNestedEnum = nil
  }

  var defaultForeignEnum: ProtobufUnittestNoArena_ForeignEnum {
    get {return _storage._defaultForeignEnum ?? ProtobufUnittestNoArena_ForeignEnum.foreignBar}
    set {_uniqueStorage()._defaultForeignEnum = newValue}
  }
  var hasDefaultForeignEnum: Bool {
    return _storage._defaultForeignEnum != nil
  }
  mutating func clearDefaultForeignEnum() {
    return _storage._defaultForeignEnum = nil
  }

  var defaultImportEnum: ProtobufUnittestImport_ImportEnum {
    get {return _storage._defaultImportEnum ?? ProtobufUnittestImport_ImportEnum.importBar}
    set {_uniqueStorage()._defaultImportEnum = newValue}
  }
  var hasDefaultImportEnum: Bool {
    return _storage._defaultImportEnum != nil
  }
  mutating func clearDefaultImportEnum() {
    return _storage._defaultImportEnum = nil
  }

  var defaultStringPiece: String {
    get {return _storage._defaultStringPiece ?? "abc"}
    set {_uniqueStorage()._defaultStringPiece = newValue}
  }
  var hasDefaultStringPiece: Bool {
    return _storage._defaultStringPiece != nil
  }
  mutating func clearDefaultStringPiece() {
    return _storage._defaultStringPiece = nil
  }

  var defaultCord: String {
    get {return _storage._defaultCord ?? "123"}
    set {_uniqueStorage()._defaultCord = newValue}
  }
  var hasDefaultCord: Bool {
    return _storage._defaultCord != nil
  }
  mutating func clearDefaultCord() {
    return _storage._defaultCord = nil
  }

  var oneofUint32: UInt32 {
    get {
      if case .oneofUint32(let v) = _storage._oneofField {
        return v
      }
      return 0
    }
    set {
      _uniqueStorage()._oneofField = .oneofUint32(newValue)
    }
  }

  var oneofNestedMessage: ProtobufUnittestNoArena_TestAllTypes.NestedMessage {
    get {
      if case .oneofNestedMessage(let v) = _storage._oneofField {
        return v
      }
      return ProtobufUnittestNoArena_TestAllTypes.NestedMessage()
    }
    set {
      _uniqueStorage()._oneofField = .oneofNestedMessage(newValue)
    }
  }

  var oneofString: String {
    get {
      if case .oneofString(let v) = _storage._oneofField {
        return v
      }
      return ""
    }
    set {
      _uniqueStorage()._oneofField = .oneofString(newValue)
    }
  }

  var oneofBytes: Data {
    get {
      if case .oneofBytes(let v) = _storage._oneofField {
        return v
      }
      return Data()
    }
    set {
      _uniqueStorage()._oneofField = .oneofBytes(newValue)
    }
  }

  var lazyOneofNestedMessage: ProtobufUnittestNoArena_TestAllTypes.NestedMessage {
    get {
      if case .lazyOneofNestedMessage(let v) = _storage._oneofField {
        return v
      }
      return ProtobufUnittestNoArena_TestAllTypes.NestedMessage()
    }
    set {
      _uniqueStorage()._oneofField = .lazyOneofNestedMessage(newValue)
    }
  }

  public var oneofField: OneOf_OneofField {
    get {return _storage._oneofField}
    set {
      _uniqueStorage()._oneofField = newValue
    }
  }

  init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittestNoArena_TestAllTypes) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

///   Define these after TestAllTypes to make sure the compiler can handle
///   that.
struct ProtobufUnittestNoArena_ForeignMessage: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var protoMessageName: String {return "ForeignMessage"}
  public var protoPackageName: String {return "protobuf_unittest_no_arena"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "c"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  private var _c: Int32? = nil
  var c: Int32 {
    get {return _c ?? 0}
    set {_c = newValue}
  }
  var hasC: Bool {
    return _c != nil
  }
  mutating func clearC() {
    return _c = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_c)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if let v = _c {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: v, fieldNumber: 1)
    }
    unknown.traverse(visitor: visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittestNoArena_ForeignMessage) -> Bool {
    if _c != other._c {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

struct ProtobufUnittestNoArena_TestNoArenaMessage: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var protoMessageName: String {return "TestNoArenaMessage"}
  public var protoPackageName: String {return "protobuf_unittest_no_arena"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "arena_message", json: "arenaMessage"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = ProtobufUnittestNoArena_TestNoArenaMessage
    var unknown = SwiftProtobuf.UnknownStorage()
    var _arenaMessage: Proto2ArenaUnittest_ArenaMessage? = nil

    init() {}

    func decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularMessageField(fieldType: Proto2ArenaUnittest_ArenaMessage.self, value: &_arenaMessage)
      default: break
      }
    }

    func traverse(visitor: SwiftProtobuf.Visitor) throws {
      if let v = _arenaMessage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      unknown.traverse(visitor: visitor)
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _arenaMessage != other._arenaMessage {return false}
      if unknown != other.unknown {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone.unknown = unknown
      clone._arenaMessage = _arenaMessage
      return clone
    }
  }

  private var _storage = _StorageClass()

  public var unknown: SwiftProtobuf.UnknownStorage {
    get {return _storage.unknown}
    set {_storage.unknown = newValue}
  }

  var arenaMessage: Proto2ArenaUnittest_ArenaMessage {
    get {return _storage._arenaMessage ?? Proto2ArenaUnittest_ArenaMessage()}
    set {_uniqueStorage()._arenaMessage = newValue}
  }
  var hasArenaMessage: Bool {
    return _storage._arenaMessage != nil
  }
  mutating func clearArenaMessage() {
    return _storage._arenaMessage = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittestNoArena_TestNoArenaMessage) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}
