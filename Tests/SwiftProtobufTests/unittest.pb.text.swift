// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/protobuf/unittest.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _3: SwiftProtobuf.ProtobufAPIVersion_3 {}
  typealias Version = _3
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension ProtobufUnittest_ForeignEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    4: .same(proto: "FOREIGN_FOO"),
    5: .same(proto: "FOREIGN_BAR"),
    6: .same(proto: "FOREIGN_BAZ"),
  ]
}

extension ProtobufUnittest_TestEnumWithDupValue: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .aliased(proto: "FOO1", aliases: ["FOO2"]),
    2: .aliased(proto: "BAR1", aliases: ["BAR2"]),
    3: .same(proto: "BAZ"),
  ]
}

extension ProtobufUnittest_TestSparseEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    -53452: .same(proto: "SPARSE_E"),
    -15: .same(proto: "SPARSE_D"),
    0: .same(proto: "SPARSE_F"),
    2: .same(proto: "SPARSE_G"),
    123: .same(proto: "SPARSE_A"),
    62374: .same(proto: "SPARSE_B"),
    12589234: .same(proto: "SPARSE_C"),
  ]
}

extension ProtobufUnittest_VeryLargeEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ENUM_LABEL_DEFAULT"),
    1: .same(proto: "ENUM_LABEL_1"),
    2: .same(proto: "ENUM_LABEL_2"),
    3: .same(proto: "ENUM_LABEL_3"),
    4: .same(proto: "ENUM_LABEL_4"),
    5: .same(proto: "ENUM_LABEL_5"),
    6: .same(proto: "ENUM_LABEL_6"),
    7: .same(proto: "ENUM_LABEL_7"),
    8: .same(proto: "ENUM_LABEL_8"),
    9: .same(proto: "ENUM_LABEL_9"),
    10: .same(proto: "ENUM_LABEL_10"),
    11: .same(proto: "ENUM_LABEL_11"),
    12: .same(proto: "ENUM_LABEL_12"),
    13: .same(proto: "ENUM_LABEL_13"),
    14: .same(proto: "ENUM_LABEL_14"),
    15: .same(proto: "ENUM_LABEL_15"),
    16: .same(proto: "ENUM_LABEL_16"),
    17: .same(proto: "ENUM_LABEL_17"),
    18: .same(proto: "ENUM_LABEL_18"),
    19: .same(proto: "ENUM_LABEL_19"),
    20: .same(proto: "ENUM_LABEL_20"),
    21: .same(proto: "ENUM_LABEL_21"),
    22: .same(proto: "ENUM_LABEL_22"),
    23: .same(proto: "ENUM_LABEL_23"),
    24: .same(proto: "ENUM_LABEL_24"),
    25: .same(proto: "ENUM_LABEL_25"),
    26: .same(proto: "ENUM_LABEL_26"),
    27: .same(proto: "ENUM_LABEL_27"),
    28: .same(proto: "ENUM_LABEL_28"),
    29: .same(proto: "ENUM_LABEL_29"),
    30: .same(proto: "ENUM_LABEL_30"),
    31: .same(proto: "ENUM_LABEL_31"),
    32: .same(proto: "ENUM_LABEL_32"),
    33: .same(proto: "ENUM_LABEL_33"),
    34: .same(proto: "ENUM_LABEL_34"),
    35: .same(proto: "ENUM_LABEL_35"),
    36: .same(proto: "ENUM_LABEL_36"),
    37: .same(proto: "ENUM_LABEL_37"),
    38: .same(proto: "ENUM_LABEL_38"),
    39: .same(proto: "ENUM_LABEL_39"),
    40: .same(proto: "ENUM_LABEL_40"),
    41: .same(proto: "ENUM_LABEL_41"),
    42: .same(proto: "ENUM_LABEL_42"),
    43: .same(proto: "ENUM_LABEL_43"),
    44: .same(proto: "ENUM_LABEL_44"),
    45: .same(proto: "ENUM_LABEL_45"),
    46: .same(proto: "ENUM_LABEL_46"),
    47: .same(proto: "ENUM_LABEL_47"),
    48: .same(proto: "ENUM_LABEL_48"),
    49: .same(proto: "ENUM_LABEL_49"),
    50: .same(proto: "ENUM_LABEL_50"),
    51: .same(proto: "ENUM_LABEL_51"),
    52: .same(proto: "ENUM_LABEL_52"),
    53: .same(proto: "ENUM_LABEL_53"),
    54: .same(proto: "ENUM_LABEL_54"),
    55: .same(proto: "ENUM_LABEL_55"),
    56: .same(proto: "ENUM_LABEL_56"),
    57: .same(proto: "ENUM_LABEL_57"),
    58: .same(proto: "ENUM_LABEL_58"),
    59: .same(proto: "ENUM_LABEL_59"),
    60: .same(proto: "ENUM_LABEL_60"),
    61: .same(proto: "ENUM_LABEL_61"),
    62: .same(proto: "ENUM_LABEL_62"),
    63: .same(proto: "ENUM_LABEL_63"),
    64: .same(proto: "ENUM_LABEL_64"),
    65: .same(proto: "ENUM_LABEL_65"),
    66: .same(proto: "ENUM_LABEL_66"),
    67: .same(proto: "ENUM_LABEL_67"),
    68: .same(proto: "ENUM_LABEL_68"),
    69: .same(proto: "ENUM_LABEL_69"),
    70: .same(proto: "ENUM_LABEL_70"),
    71: .same(proto: "ENUM_LABEL_71"),
    72: .same(proto: "ENUM_LABEL_72"),
    73: .same(proto: "ENUM_LABEL_73"),
    74: .same(proto: "ENUM_LABEL_74"),
    75: .same(proto: "ENUM_LABEL_75"),
    76: .same(proto: "ENUM_LABEL_76"),
    77: .same(proto: "ENUM_LABEL_77"),
    78: .same(proto: "ENUM_LABEL_78"),
    79: .same(proto: "ENUM_LABEL_79"),
    80: .same(proto: "ENUM_LABEL_80"),
    81: .same(proto: "ENUM_LABEL_81"),
    82: .same(proto: "ENUM_LABEL_82"),
    83: .same(proto: "ENUM_LABEL_83"),
    84: .same(proto: "ENUM_LABEL_84"),
    85: .same(proto: "ENUM_LABEL_85"),
    86: .same(proto: "ENUM_LABEL_86"),
    87: .same(proto: "ENUM_LABEL_87"),
    88: .same(proto: "ENUM_LABEL_88"),
    89: .same(proto: "ENUM_LABEL_89"),
    90: .same(proto: "ENUM_LABEL_90"),
    91: .same(proto: "ENUM_LABEL_91"),
    92: .same(proto: "ENUM_LABEL_92"),
    93: .same(proto: "ENUM_LABEL_93"),
    94: .same(proto: "ENUM_LABEL_94"),
    95: .same(proto: "ENUM_LABEL_95"),
    96: .same(proto: "ENUM_LABEL_96"),
    97: .same(proto: "ENUM_LABEL_97"),
    98: .same(proto: "ENUM_LABEL_98"),
    99: .same(proto: "ENUM_LABEL_99"),
    100: .same(proto: "ENUM_LABEL_100"),
  ]
}

extension ProtobufUnittest_TestAllTypes: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "optional_int32"),
    2: .standard(proto: "optional_int64"),
    3: .standard(proto: "optional_uint32"),
    4: .standard(proto: "optional_uint64"),
    5: .standard(proto: "optional_sint32"),
    6: .standard(proto: "optional_sint64"),
    7: .standard(proto: "optional_fixed32"),
    8: .standard(proto: "optional_fixed64"),
    9: .standard(proto: "optional_sfixed32"),
    10: .standard(proto: "optional_sfixed64"),
    11: .standard(proto: "optional_float"),
    12: .standard(proto: "optional_double"),
    13: .standard(proto: "optional_bool"),
    14: .standard(proto: "optional_string"),
    15: .standard(proto: "optional_bytes"),
    16: .unique(proto: "OptionalGroup", json: "optionalgroup"),
    18: .standard(proto: "optional_nested_message"),
    19: .standard(proto: "optional_foreign_message"),
    20: .standard(proto: "optional_import_message"),
    21: .standard(proto: "optional_nested_enum"),
    22: .standard(proto: "optional_foreign_enum"),
    23: .standard(proto: "optional_import_enum"),
    24: .standard(proto: "optional_string_piece"),
    25: .standard(proto: "optional_cord"),
    26: .standard(proto: "optional_public_import_message"),
    27: .standard(proto: "optional_lazy_message"),
    31: .standard(proto: "repeated_int32"),
    32: .standard(proto: "repeated_int64"),
    33: .standard(proto: "repeated_uint32"),
    34: .standard(proto: "repeated_uint64"),
    35: .standard(proto: "repeated_sint32"),
    36: .standard(proto: "repeated_sint64"),
    37: .standard(proto: "repeated_fixed32"),
    38: .standard(proto: "repeated_fixed64"),
    39: .standard(proto: "repeated_sfixed32"),
    40: .standard(proto: "repeated_sfixed64"),
    41: .standard(proto: "repeated_float"),
    42: .standard(proto: "repeated_double"),
    43: .standard(proto: "repeated_bool"),
    44: .standard(proto: "repeated_string"),
    45: .standard(proto: "repeated_bytes"),
    46: .unique(proto: "RepeatedGroup", json: "repeatedgroup"),
    48: .standard(proto: "repeated_nested_message"),
    49: .standard(proto: "repeated_foreign_message"),
    50: .standard(proto: "repeated_import_message"),
    51: .standard(proto: "repeated_nested_enum"),
    52: .standard(proto: "repeated_foreign_enum"),
    53: .standard(proto: "repeated_import_enum"),
    54: .standard(proto: "repeated_string_piece"),
    55: .standard(proto: "repeated_cord"),
    57: .standard(proto: "repeated_lazy_message"),
    61: .standard(proto: "default_int32"),
    62: .standard(proto: "default_int64"),
    63: .standard(proto: "default_uint32"),
    64: .standard(proto: "default_uint64"),
    65: .standard(proto: "default_sint32"),
    66: .standard(proto: "default_sint64"),
    67: .standard(proto: "default_fixed32"),
    68: .standard(proto: "default_fixed64"),
    69: .standard(proto: "default_sfixed32"),
    70: .standard(proto: "default_sfixed64"),
    71: .standard(proto: "default_float"),
    72: .standard(proto: "default_double"),
    73: .standard(proto: "default_bool"),
    74: .standard(proto: "default_string"),
    75: .standard(proto: "default_bytes"),
    81: .standard(proto: "default_nested_enum"),
    82: .standard(proto: "default_foreign_enum"),
    83: .standard(proto: "default_import_enum"),
    84: .standard(proto: "default_string_piece"),
    85: .standard(proto: "default_cord"),
    111: .standard(proto: "oneof_uint32"),
    112: .standard(proto: "oneof_nested_message"),
    113: .standard(proto: "oneof_string"),
    114: .standard(proto: "oneof_bytes"),
  ]
}

extension ProtobufUnittest_TestAllTypes.NestedEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    -1: .same(proto: "NEG"),
    1: .same(proto: "FOO"),
    2: .same(proto: "BAR"),
    3: .same(proto: "BAZ"),
  ]
}

extension ProtobufUnittest_TestAllTypes.NestedMessage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bb"),
  ]
}

extension ProtobufUnittest_TestAllTypes.OptionalGroup: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    17: .same(proto: "a"),
  ]
}

extension ProtobufUnittest_TestAllTypes.RepeatedGroup: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    47: .same(proto: "a"),
  ]
}

extension ProtobufUnittest_NestedTestAllTypes: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "child"),
    2: .same(proto: "payload"),
    3: .standard(proto: "repeated_child"),
    4: .standard(proto: "lazy_child"),
    5: .standard(proto: "eager_child"),
  ]
}

extension ProtobufUnittest_TestDeprecatedFields: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "deprecated_int32"),
    2: .standard(proto: "deprecated_int32_in_oneof"),
  ]
}

extension ProtobufUnittest_TestDeprecatedMessage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()
}

extension ProtobufUnittest_ForeignMessage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "c"),
    2: .same(proto: "d"),
  ]
}

extension ProtobufUnittest_TestReservedFields: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()
}

extension ProtobufUnittest_TestAllExtensions: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()
}

extension ProtobufUnittest_OptionalGroup_extension: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    17: .same(proto: "a"),
  ]
}

extension ProtobufUnittest_RepeatedGroup_extension: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    47: .same(proto: "a"),
  ]
}

extension ProtobufUnittest_TestGroup: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    16: .unique(proto: "OptionalGroup", json: "optionalgroup"),
    22: .standard(proto: "optional_foreign_enum"),
  ]
}

extension ProtobufUnittest_TestGroup.OptionalGroup: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    17: .same(proto: "a"),
  ]
}

extension ProtobufUnittest_TestGroupExtension: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()
}

extension ProtobufUnittest_TestNestedExtension: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()
}

extension ProtobufUnittest_TestNestedExtension.OptionalGroup_extension: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    17: .same(proto: "a"),
  ]
}

extension ProtobufUnittest_TestChildExtension: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "a"),
    2: .same(proto: "b"),
    3: .standard(proto: "optional_extension"),
  ]
}

extension ProtobufUnittest_TestChildExtensionData: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "a"),
    2: .same(proto: "b"),
    3: .standard(proto: "optional_extension"),
  ]
}

extension ProtobufUnittest_TestChildExtensionData.NestedTestAllExtensionsData: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    409707008: .same(proto: "dynamic"),
  ]
}

extension ProtobufUnittest_TestChildExtensionData.NestedTestAllExtensionsData.NestedDynamicExtensions: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "a"),
    2: .same(proto: "b"),
  ]
}

extension ProtobufUnittest_TestNestedChildExtension: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "a"),
    2: .same(proto: "child"),
  ]
}

extension ProtobufUnittest_TestNestedChildExtensionData: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "a"),
    2: .same(proto: "child"),
  ]
}

extension ProtobufUnittest_TestRequired: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "a"),
    2: .same(proto: "dummy2"),
    3: .same(proto: "b"),
    4: .same(proto: "dummy4"),
    5: .same(proto: "dummy5"),
    6: .same(proto: "dummy6"),
    7: .same(proto: "dummy7"),
    8: .same(proto: "dummy8"),
    9: .same(proto: "dummy9"),
    10: .same(proto: "dummy10"),
    11: .same(proto: "dummy11"),
    12: .same(proto: "dummy12"),
    13: .same(proto: "dummy13"),
    14: .same(proto: "dummy14"),
    15: .same(proto: "dummy15"),
    16: .same(proto: "dummy16"),
    17: .same(proto: "dummy17"),
    18: .same(proto: "dummy18"),
    19: .same(proto: "dummy19"),
    20: .same(proto: "dummy20"),
    21: .same(proto: "dummy21"),
    22: .same(proto: "dummy22"),
    23: .same(proto: "dummy23"),
    24: .same(proto: "dummy24"),
    25: .same(proto: "dummy25"),
    26: .same(proto: "dummy26"),
    27: .same(proto: "dummy27"),
    28: .same(proto: "dummy28"),
    29: .same(proto: "dummy29"),
    30: .same(proto: "dummy30"),
    31: .same(proto: "dummy31"),
    32: .same(proto: "dummy32"),
    33: .same(proto: "c"),
    34: .standard(proto: "optional_foreign"),
  ]
}

extension ProtobufUnittest_TestRequiredForeign: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "optional_message"),
    2: .standard(proto: "repeated_message"),
    3: .same(proto: "dummy"),
  ]
}

extension ProtobufUnittest_TestRequiredMessage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "optional_message"),
    2: .standard(proto: "repeated_message"),
    3: .standard(proto: "required_message"),
  ]
}

extension ProtobufUnittest_TestNestedRequiredForeign: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "child"),
    2: .same(proto: "payload"),
    3: .same(proto: "dummy"),
  ]
}

extension ProtobufUnittest_TestForeignNested: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "foreign_nested"),
  ]
}

extension ProtobufUnittest_TestEmptyMessage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()
}

extension ProtobufUnittest_TestEmptyMessageWithExtensions: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()
}

extension ProtobufUnittest_TestPickleNestedMessage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()
}

extension ProtobufUnittest_TestPickleNestedMessage.NestedMessage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bb"),
  ]
}

extension ProtobufUnittest_TestPickleNestedMessage.NestedMessage.NestedNestedMessage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "cc"),
  ]
}

extension ProtobufUnittest_TestMultipleExtensionRanges: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()
}

extension ProtobufUnittest_TestReallyLargeTagNumber: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "a"),
    268435455: .same(proto: "bb"),
  ]
}

extension ProtobufUnittest_TestRecursiveMessage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "a"),
    2: .same(proto: "i"),
  ]
}

extension ProtobufUnittest_TestMutualRecursionA: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bb"),
    2: .unique(proto: "SubGroup", json: "subgroup"),
  ]
}

extension ProtobufUnittest_TestMutualRecursionA.SubMessage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "b"),
  ]
}

extension ProtobufUnittest_TestMutualRecursionA.SubGroup: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    3: .standard(proto: "sub_message"),
    4: .standard(proto: "not_in_this_scc"),
  ]
}

extension ProtobufUnittest_TestMutualRecursionB: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "a"),
    2: .standard(proto: "optional_int32"),
  ]
}

extension ProtobufUnittest_TestIsInitialized: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "sub_message"),
  ]
}

extension ProtobufUnittest_TestIsInitialized.SubMessage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .unique(proto: "SubGroup", json: "subgroup"),
  ]
}

extension ProtobufUnittest_TestIsInitialized.SubMessage.SubGroup: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "i"),
  ]
}

extension ProtobufUnittest_TestDupFieldNumber: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "a"),
    2: .unique(proto: "Foo", json: "foo"),
    3: .unique(proto: "Bar", json: "bar"),
  ]
}

extension ProtobufUnittest_TestDupFieldNumber.Foo: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "a"),
  ]
}

extension ProtobufUnittest_TestDupFieldNumber.Bar: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "a"),
  ]
}

extension ProtobufUnittest_TestEagerMessage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "sub_message"),
  ]
}

extension ProtobufUnittest_TestLazyMessage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "sub_message"),
  ]
}

extension ProtobufUnittest_TestEagerMaybeLazy: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "message_foo"),
    2: .standard(proto: "message_bar"),
    3: .standard(proto: "message_baz"),
  ]
}

extension ProtobufUnittest_TestEagerMaybeLazy.NestedMessage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "packed"),
  ]
}

extension ProtobufUnittest_TestNestedMessageHasBits: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "optional_nested_message"),
  ]
}

extension ProtobufUnittest_TestNestedMessageHasBits.NestedMessage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "nestedmessage_repeated_int32"),
    2: .standard(proto: "nestedmessage_repeated_foreignmessage"),
  ]
}

extension ProtobufUnittest_TestCamelCaseFieldNames: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "PrimitiveField"),
    2: .same(proto: "StringField"),
    3: .same(proto: "EnumField"),
    4: .same(proto: "MessageField"),
    5: .same(proto: "StringPieceField"),
    6: .same(proto: "CordField"),
    7: .same(proto: "RepeatedPrimitiveField"),
    8: .same(proto: "RepeatedStringField"),
    9: .same(proto: "RepeatedEnumField"),
    10: .same(proto: "RepeatedMessageField"),
    11: .same(proto: "RepeatedStringPieceField"),
    12: .same(proto: "RepeatedCordField"),
  ]
}

extension ProtobufUnittest_TestFieldOrderings: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    11: .standard(proto: "my_string"),
    1: .standard(proto: "my_int"),
    101: .standard(proto: "my_float"),
    200: .standard(proto: "optional_nested_message"),
  ]
}

extension ProtobufUnittest_TestFieldOrderings.NestedMessage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "oo"),
    1: .same(proto: "bb"),
  ]
}

extension ProtobufUnittest_TestExtensionOrderings1: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "my_string"),
  ]
}

extension ProtobufUnittest_TestExtensionOrderings2: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "my_string"),
  ]
}

extension ProtobufUnittest_TestExtensionOrderings2.TestExtensionOrderings3: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "my_string"),
  ]
}

extension ProtobufUnittest_TestExtremeDefaultValues: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "escaped_bytes"),
    2: .standard(proto: "large_uint32"),
    3: .standard(proto: "large_uint64"),
    4: .standard(proto: "small_int32"),
    5: .standard(proto: "small_int64"),
    21: .standard(proto: "really_small_int32"),
    22: .standard(proto: "really_small_int64"),
    6: .standard(proto: "utf8_string"),
    7: .standard(proto: "zero_float"),
    8: .standard(proto: "one_float"),
    9: .standard(proto: "small_float"),
    10: .standard(proto: "negative_one_float"),
    11: .standard(proto: "negative_float"),
    12: .standard(proto: "large_float"),
    13: .standard(proto: "small_negative_float"),
    14: .standard(proto: "inf_double"),
    15: .standard(proto: "neg_inf_double"),
    16: .standard(proto: "nan_double"),
    17: .standard(proto: "inf_float"),
    18: .standard(proto: "neg_inf_float"),
    19: .standard(proto: "nan_float"),
    20: .standard(proto: "cpp_trigraph"),
    23: .standard(proto: "string_with_zero"),
    24: .standard(proto: "bytes_with_zero"),
    25: .standard(proto: "string_piece_with_zero"),
    26: .standard(proto: "cord_with_zero"),
    27: .standard(proto: "replacement_string"),
  ]
}

extension ProtobufUnittest_SparseEnumMessage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "sparse_enum"),
  ]
}

extension ProtobufUnittest_OneString: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]
}

extension ProtobufUnittest_MoreString: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]
}

extension ProtobufUnittest_OneBytes: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]
}

extension ProtobufUnittest_MoreBytes: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]
}

extension ProtobufUnittest_ManyOptionalString: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "str1"),
    2: .same(proto: "str2"),
    3: .same(proto: "str3"),
    4: .same(proto: "str4"),
    5: .same(proto: "str5"),
    6: .same(proto: "str6"),
    7: .same(proto: "str7"),
    8: .same(proto: "str8"),
    9: .same(proto: "str9"),
    10: .same(proto: "str10"),
    11: .same(proto: "str11"),
    12: .same(proto: "str12"),
    13: .same(proto: "str13"),
    14: .same(proto: "str14"),
    15: .same(proto: "str15"),
    16: .same(proto: "str16"),
    17: .same(proto: "str17"),
    18: .same(proto: "str18"),
    19: .same(proto: "str19"),
    20: .same(proto: "str20"),
    21: .same(proto: "str21"),
    22: .same(proto: "str22"),
    23: .same(proto: "str23"),
    24: .same(proto: "str24"),
    25: .same(proto: "str25"),
    26: .same(proto: "str26"),
    27: .same(proto: "str27"),
    28: .same(proto: "str28"),
    29: .same(proto: "str29"),
    30: .same(proto: "str30"),
    31: .same(proto: "str31"),
    32: .same(proto: "str32"),
  ]
}

extension ProtobufUnittest_Int32Message: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]
}

extension ProtobufUnittest_Uint32Message: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]
}

extension ProtobufUnittest_Int64Message: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]
}

extension ProtobufUnittest_Uint64Message: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]
}

extension ProtobufUnittest_BoolMessage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]
}

extension ProtobufUnittest_TestOneof: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "foo_int"),
    2: .standard(proto: "foo_string"),
    3: .standard(proto: "foo_message"),
    4: .unique(proto: "FooGroup", json: "foogroup"),
  ]
}

extension ProtobufUnittest_TestOneof.FooGroup: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    5: .same(proto: "a"),
    6: .same(proto: "b"),
  ]
}

extension ProtobufUnittest_TestOneofBackwardsCompatible: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "foo_int"),
    2: .standard(proto: "foo_string"),
    3: .standard(proto: "foo_message"),
    4: .unique(proto: "FooGroup", json: "foogroup"),
  ]
}

extension ProtobufUnittest_TestOneofBackwardsCompatible.FooGroup: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    5: .same(proto: "a"),
    6: .same(proto: "b"),
  ]
}

extension ProtobufUnittest_TestOneof2: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "foo_int"),
    2: .standard(proto: "foo_string"),
    3: .standard(proto: "foo_cord"),
    4: .standard(proto: "foo_string_piece"),
    5: .standard(proto: "foo_bytes"),
    6: .standard(proto: "foo_enum"),
    7: .standard(proto: "foo_message"),
    8: .unique(proto: "FooGroup", json: "foogroup"),
    11: .standard(proto: "foo_lazy_message"),
    12: .standard(proto: "bar_int"),
    13: .standard(proto: "bar_string"),
    14: .standard(proto: "bar_cord"),
    15: .standard(proto: "bar_string_piece"),
    16: .standard(proto: "bar_bytes"),
    17: .standard(proto: "bar_enum"),
    20: .standard(proto: "bar_string_with_empty_default"),
    21: .standard(proto: "bar_cord_with_empty_default"),
    22: .standard(proto: "bar_string_piece_with_empty_default"),
    23: .standard(proto: "bar_bytes_with_empty_default"),
    18: .standard(proto: "baz_int"),
    19: .standard(proto: "baz_string"),
  ]
}

extension ProtobufUnittest_TestOneof2.NestedEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "FOO"),
    2: .same(proto: "BAR"),
    3: .same(proto: "BAZ"),
  ]
}

extension ProtobufUnittest_TestOneof2.FooGroup: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    9: .same(proto: "a"),
    10: .same(proto: "b"),
  ]
}

extension ProtobufUnittest_TestOneof2.NestedMessage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "moo_int"),
    2: .standard(proto: "corge_int"),
  ]
}

extension ProtobufUnittest_TestRequiredOneof: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "foo_int"),
    2: .standard(proto: "foo_string"),
    3: .standard(proto: "foo_message"),
  ]
}

extension ProtobufUnittest_TestRequiredOneof.NestedMessage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "required_double"),
  ]
}

extension ProtobufUnittest_TestPackedTypes: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    90: .standard(proto: "packed_int32"),
    91: .standard(proto: "packed_int64"),
    92: .standard(proto: "packed_uint32"),
    93: .standard(proto: "packed_uint64"),
    94: .standard(proto: "packed_sint32"),
    95: .standard(proto: "packed_sint64"),
    96: .standard(proto: "packed_fixed32"),
    97: .standard(proto: "packed_fixed64"),
    98: .standard(proto: "packed_sfixed32"),
    99: .standard(proto: "packed_sfixed64"),
    100: .standard(proto: "packed_float"),
    101: .standard(proto: "packed_double"),
    102: .standard(proto: "packed_bool"),
    103: .standard(proto: "packed_enum"),
  ]
}

extension ProtobufUnittest_TestUnpackedTypes: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    90: .standard(proto: "unpacked_int32"),
    91: .standard(proto: "unpacked_int64"),
    92: .standard(proto: "unpacked_uint32"),
    93: .standard(proto: "unpacked_uint64"),
    94: .standard(proto: "unpacked_sint32"),
    95: .standard(proto: "unpacked_sint64"),
    96: .standard(proto: "unpacked_fixed32"),
    97: .standard(proto: "unpacked_fixed64"),
    98: .standard(proto: "unpacked_sfixed32"),
    99: .standard(proto: "unpacked_sfixed64"),
    100: .standard(proto: "unpacked_float"),
    101: .standard(proto: "unpacked_double"),
    102: .standard(proto: "unpacked_bool"),
    103: .standard(proto: "unpacked_enum"),
  ]
}

extension ProtobufUnittest_TestPackedExtensions: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()
}

extension ProtobufUnittest_TestUnpackedExtensions: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()
}

extension ProtobufUnittest_TestDynamicExtensions: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2000: .standard(proto: "scalar_extension"),
    2001: .standard(proto: "enum_extension"),
    2002: .standard(proto: "dynamic_enum_extension"),
    2003: .standard(proto: "message_extension"),
    2004: .standard(proto: "dynamic_message_extension"),
    2005: .standard(proto: "repeated_extension"),
    2006: .standard(proto: "packed_extension"),
  ]
}

extension ProtobufUnittest_TestDynamicExtensions.DynamicEnumType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2200: .same(proto: "DYNAMIC_FOO"),
    2201: .same(proto: "DYNAMIC_BAR"),
    2202: .same(proto: "DYNAMIC_BAZ"),
  ]
}

extension ProtobufUnittest_TestDynamicExtensions.DynamicMessageType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2100: .standard(proto: "dynamic_field"),
  ]
}

extension ProtobufUnittest_TestRepeatedScalarDifferentTagSizes: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    12: .standard(proto: "repeated_fixed32"),
    13: .standard(proto: "repeated_int32"),
    2046: .standard(proto: "repeated_fixed64"),
    2047: .standard(proto: "repeated_int64"),
    262142: .standard(proto: "repeated_float"),
    262143: .standard(proto: "repeated_uint64"),
  ]
}

extension ProtobufUnittest_TestParsingMerge: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "required_all_types"),
    2: .standard(proto: "optional_all_types"),
    3: .standard(proto: "repeated_all_types"),
    10: .unique(proto: "OptionalGroup", json: "optionalgroup"),
    20: .unique(proto: "RepeatedGroup", json: "repeatedgroup"),
  ]
}

extension ProtobufUnittest_TestParsingMerge.RepeatedFieldsGenerator: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "field1"),
    2: .same(proto: "field2"),
    3: .same(proto: "field3"),
    10: .unique(proto: "Group1", json: "group1"),
    20: .unique(proto: "Group2", json: "group2"),
    1000: .same(proto: "ext1"),
    1001: .same(proto: "ext2"),
  ]
}

extension ProtobufUnittest_TestParsingMerge.RepeatedFieldsGenerator.Group1: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    11: .same(proto: "field1"),
  ]
}

extension ProtobufUnittest_TestParsingMerge.RepeatedFieldsGenerator.Group2: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    21: .same(proto: "field1"),
  ]
}

extension ProtobufUnittest_TestParsingMerge.OptionalGroup: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    11: .standard(proto: "optional_group_all_types"),
  ]
}

extension ProtobufUnittest_TestParsingMerge.RepeatedGroup: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    21: .standard(proto: "repeated_group_all_types"),
  ]
}

extension ProtobufUnittest_TestMergeException: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "all_extensions"),
  ]
}

extension ProtobufUnittest_TestCommentInjectionMessage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "a"),
  ]
}

extension ProtobufUnittest_TestMessageSize: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "m1"),
    2: .same(proto: "m2"),
    3: .same(proto: "m3"),
    4: .same(proto: "m4"),
    5: .same(proto: "m5"),
    6: .same(proto: "m6"),
  ]
}

extension ProtobufUnittest_FooRequest: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()
}

extension ProtobufUnittest_FooResponse: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()
}

extension ProtobufUnittest_FooClientMessage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()
}

extension ProtobufUnittest_FooServerMessage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()
}

extension ProtobufUnittest_BarRequest: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()
}

extension ProtobufUnittest_BarResponse: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()
}

extension ProtobufUnittest_TestJsonName: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "field_name1"),
    2: .same(proto: "fieldName2"),
    3: .same(proto: "FieldName3"),
    4: .standard(proto: "_field_name4"),
    5: .standard(proto: "FIELD_NAME5"),
    6: .unique(proto: "field_name6", json: "@type"),
    7: .same(proto: "fieldname7"),
  ]
}

extension ProtobufUnittest_TestHugeFieldNumbers: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    536870000: .standard(proto: "optional_int32"),
    536870001: .standard(proto: "fixed_32"),
    536870002: .standard(proto: "repeated_int32"),
    536870003: .standard(proto: "packed_int32"),
    536870004: .standard(proto: "optional_enum"),
    536870005: .standard(proto: "optional_string"),
    536870006: .standard(proto: "optional_bytes"),
    536870007: .standard(proto: "optional_message"),
    536870008: .unique(proto: "OptionalGroup", json: "optionalgroup"),
    536870010: .standard(proto: "string_string_map"),
    536870011: .standard(proto: "oneof_uint32"),
    536870012: .standard(proto: "oneof_test_all_types"),
    536870013: .standard(proto: "oneof_string"),
    536870014: .standard(proto: "oneof_bytes"),
  ]
}

extension ProtobufUnittest_TestHugeFieldNumbers.OptionalGroup: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    536870009: .standard(proto: "group_a"),
  ]
}

extension ProtobufUnittest_TestExtensionInsideTable: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "field1"),
    2: .same(proto: "field2"),
    3: .same(proto: "field3"),
    4: .same(proto: "field4"),
    6: .same(proto: "field6"),
    7: .same(proto: "field7"),
    8: .same(proto: "field8"),
    9: .same(proto: "field9"),
    10: .same(proto: "field10"),
  ]
}

extension ProtobufUnittest_TestNestedGroupExtensionOuter: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .unique(proto: "Layer1OptionalGroup", json: "layer1optionalgroup"),
  ]
}

extension ProtobufUnittest_TestNestedGroupExtensionOuter.Layer1OptionalGroup: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .unique(proto: "Layer2RepeatedGroup", json: "layer2repeatedgroup"),
    4: .unique(proto: "Layer2AnotherOptionalRepeatedGroup", json: "layer2anotheroptionalrepeatedgroup"),
  ]
}

extension ProtobufUnittest_TestNestedGroupExtensionOuter.Layer1OptionalGroup.Layer2RepeatedGroup: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    6: .standard(proto: "another_field"),
  ]
}

extension ProtobufUnittest_TestNestedGroupExtensionOuter.Layer1OptionalGroup.Layer2AnotherOptionalRepeatedGroup: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    5: .standard(proto: "but_why_tho"),
  ]
}

extension ProtobufUnittest_TestNestedGroupExtensionInnerExtension: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "inner_name"),
  ]
}

extension ProtobufUnittest_TestExtensionRangeSerialize: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "foo_one"),
    6: .standard(proto: "foo_two"),
    7: .standard(proto: "foo_three"),
    13: .standard(proto: "foo_four"),
  ]
}
