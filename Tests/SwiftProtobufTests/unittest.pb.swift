/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: google/protobuf/unittest.proto
 *
 */

//  Protocol Buffers - Google's data interchange format
//  Copyright 2008 Google Inc.  All rights reserved.
//  https://developers.google.com/protocol-buffers/
// 
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are
//  met:
// 
//      * Redistributions of source code must retain the above copyright
//  notice, this list of conditions and the following disclaimer.
//      * Redistributions in binary form must reproduce the above
//  copyright notice, this list of conditions and the following disclaimer
//  in the documentation and/or other materials provided with the
//  distribution.
//      * Neither the name of Google Inc. nor the names of its
//  contributors may be used to endorse or promote products derived from
//  this software without specific prior written permission.
// 
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
//  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
//  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
//  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
//  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
//  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
//  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

//  Author: kenton@google.com (Kenton Varda)
//   Based on original Protocol Buffers design by
//   Sanjay Ghemawat, Jeff Dean, and others.
// 
//  A proto file we will use for unit testing.

import Foundation
import SwiftProtobuf


enum ProtobufUnittest_ForeignEnum: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case foreignFoo // = 4
  case foreignBar // = 5
  case foreignBaz // = 6

  init() {
    self = .foreignFoo
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 4: self = .foreignFoo
    case 5: self = .foreignBar
    case 6: self = .foreignBaz
    default: return nil
    }
  }

  init?(name: String) {
    switch name {
    case "foreignFoo": self = .foreignFoo
    case "foreignBar": self = .foreignBar
    case "foreignBaz": self = .foreignBaz
    default: return nil
    }
  }

  init?(jsonName: String) {
    switch jsonName {
    case "FOREIGN_FOO": self = .foreignFoo
    case "FOREIGN_BAR": self = .foreignBar
    case "FOREIGN_BAZ": self = .foreignBaz
    default: return nil
    }
  }

  init?(protoName: String) {
    switch protoName {
    case "FOREIGN_FOO": self = .foreignFoo
    case "FOREIGN_BAR": self = .foreignBar
    case "FOREIGN_BAZ": self = .foreignBaz
    default: return nil
    }
  }

  var rawValue: Int {
    get {
      switch self {
      case .foreignFoo: return 4
      case .foreignBar: return 5
      case .foreignBaz: return 6
      }
    }
  }

  var json: String {
    get {
      switch self {
      case .foreignFoo: return "\"FOREIGN_FOO\""
      case .foreignBar: return "\"FOREIGN_BAR\""
      case .foreignBaz: return "\"FOREIGN_BAZ\""
      }
    }
  }

  var hashValue: Int { return rawValue }

  var debugDescription: String {
    get {
      switch self {
      case .foreignFoo: return ".foreignFoo"
      case .foreignBar: return ".foreignBar"
      case .foreignBaz: return ".foreignBaz"
      }
    }
  }

}

///   Test an enum that has multiple values with the same number.
enum ProtobufUnittest_TestEnumWithDupValue: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case foo1 // = 1
  case bar1 // = 2
  case baz // = 3
  case foo2 // = 1
  case bar2 // = 2

  init() {
    self = .foo1
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 1: self = .foo1
    case 2: self = .bar1
    case 3: self = .baz
    default: return nil
    }
  }

  init?(name: String) {
    switch name {
    case "foo1": self = .foo1
    case "bar1": self = .bar1
    case "baz": self = .baz
    case "foo2": self = .foo2
    case "bar2": self = .bar2
    default: return nil
    }
  }

  init?(jsonName: String) {
    switch jsonName {
    case "FOO1": self = .foo1
    case "BAR1": self = .bar1
    case "BAZ": self = .baz
    case "FOO2": self = .foo2
    case "BAR2": self = .bar2
    default: return nil
    }
  }

  init?(protoName: String) {
    switch protoName {
    case "FOO1": self = .foo1
    case "BAR1": self = .bar1
    case "BAZ": self = .baz
    case "FOO2": self = .foo2
    case "BAR2": self = .bar2
    default: return nil
    }
  }

  var rawValue: Int {
    get {
      switch self {
      case .foo1: return 1
      case .bar1: return 2
      case .baz: return 3
      case .foo2: return 1
      case .bar2: return 2
      }
    }
  }

  var json: String {
    get {
      switch self {
      case .foo1: return "\"FOO1\""
      case .bar1: return "\"BAR1\""
      case .baz: return "\"BAZ\""
      case .foo2: return "\"FOO2\""
      case .bar2: return "\"BAR2\""
      }
    }
  }

  var hashValue: Int { return rawValue }

  var debugDescription: String {
    get {
      switch self {
      case .foo1: return ".foo1"
      case .bar1: return ".bar1"
      case .baz: return ".baz"
      case .foo2: return ".foo2"
      case .bar2: return ".bar2"
      }
    }
  }

}

///   Test an enum with large, unordered values.
enum ProtobufUnittest_TestSparseEnum: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case sparseA // = 123
  case sparseB // = 62374
  case sparseC // = 12589234
  case sparseD // = -15
  case sparseE // = -53452
  case sparseF // = 0
  case sparseG // = 2

  init() {
    self = .sparseA
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 123: self = .sparseA
    case 62374: self = .sparseB
    case 12589234: self = .sparseC
    case -15: self = .sparseD
    case -53452: self = .sparseE
    case 0: self = .sparseF
    case 2: self = .sparseG
    default: return nil
    }
  }

  init?(name: String) {
    switch name {
    case "sparseA": self = .sparseA
    case "sparseB": self = .sparseB
    case "sparseC": self = .sparseC
    case "sparseD": self = .sparseD
    case "sparseE": self = .sparseE
    case "sparseF": self = .sparseF
    case "sparseG": self = .sparseG
    default: return nil
    }
  }

  init?(jsonName: String) {
    switch jsonName {
    case "SPARSE_A": self = .sparseA
    case "SPARSE_B": self = .sparseB
    case "SPARSE_C": self = .sparseC
    case "SPARSE_D": self = .sparseD
    case "SPARSE_E": self = .sparseE
    case "SPARSE_F": self = .sparseF
    case "SPARSE_G": self = .sparseG
    default: return nil
    }
  }

  init?(protoName: String) {
    switch protoName {
    case "SPARSE_A": self = .sparseA
    case "SPARSE_B": self = .sparseB
    case "SPARSE_C": self = .sparseC
    case "SPARSE_D": self = .sparseD
    case "SPARSE_E": self = .sparseE
    case "SPARSE_F": self = .sparseF
    case "SPARSE_G": self = .sparseG
    default: return nil
    }
  }

  var rawValue: Int {
    get {
      switch self {
      case .sparseA: return 123
      case .sparseB: return 62374
      case .sparseC: return 12589234
      case .sparseD: return -15
      case .sparseE: return -53452
      case .sparseF: return 0
      case .sparseG: return 2
      }
    }
  }

  var json: String {
    get {
      switch self {
      case .sparseA: return "\"SPARSE_A\""
      case .sparseB: return "\"SPARSE_B\""
      case .sparseC: return "\"SPARSE_C\""
      case .sparseD: return "\"SPARSE_D\""
      case .sparseE: return "\"SPARSE_E\""
      case .sparseF: return "\"SPARSE_F\""
      case .sparseG: return "\"SPARSE_G\""
      }
    }
  }

  var hashValue: Int { return rawValue }

  var debugDescription: String {
    get {
      switch self {
      case .sparseA: return ".sparseA"
      case .sparseB: return ".sparseB"
      case .sparseC: return ".sparseC"
      case .sparseD: return ".sparseD"
      case .sparseE: return ".sparseE"
      case .sparseF: return ".sparseF"
      case .sparseG: return ".sparseG"
      }
    }
  }

}

///   This proto includes every type of field in both singular and repeated
///   forms.
struct ProtobufUnittest_TestAllTypes: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "ProtobufUnittest_TestAllTypes"}
  public var protoMessageName: String {return "TestAllTypes"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "optional_int32", json: "optionalInt32", swift: "optionalInt32"),
    2: .unique(proto: "optional_int64", json: "optionalInt64", swift: "optionalInt64"),
    3: .unique(proto: "optional_uint32", json: "optionalUint32", swift: "optionalUint32"),
    4: .unique(proto: "optional_uint64", json: "optionalUint64", swift: "optionalUint64"),
    5: .unique(proto: "optional_sint32", json: "optionalSint32", swift: "optionalSint32"),
    6: .unique(proto: "optional_sint64", json: "optionalSint64", swift: "optionalSint64"),
    7: .unique(proto: "optional_fixed32", json: "optionalFixed32", swift: "optionalFixed32"),
    8: .unique(proto: "optional_fixed64", json: "optionalFixed64", swift: "optionalFixed64"),
    9: .unique(proto: "optional_sfixed32", json: "optionalSfixed32", swift: "optionalSfixed32"),
    10: .unique(proto: "optional_sfixed64", json: "optionalSfixed64", swift: "optionalSfixed64"),
    11: .unique(proto: "optional_float", json: "optionalFloat", swift: "optionalFloat"),
    12: .unique(proto: "optional_double", json: "optionalDouble", swift: "optionalDouble"),
    13: .unique(proto: "optional_bool", json: "optionalBool", swift: "optionalBool"),
    14: .unique(proto: "optional_string", json: "optionalString", swift: "optionalString"),
    15: .unique(proto: "optional_bytes", json: "optionalBytes", swift: "optionalBytes"),
    16: .same(proto: "optionalgroup", swift: "optionalGroup"),
    18: .unique(proto: "optional_nested_message", json: "optionalNestedMessage", swift: "optionalNestedMessage"),
    19: .unique(proto: "optional_foreign_message", json: "optionalForeignMessage", swift: "optionalForeignMessage"),
    20: .unique(proto: "optional_import_message", json: "optionalImportMessage", swift: "optionalImportMessage"),
    21: .unique(proto: "optional_nested_enum", json: "optionalNestedEnum", swift: "optionalNestedEnum"),
    22: .unique(proto: "optional_foreign_enum", json: "optionalForeignEnum", swift: "optionalForeignEnum"),
    23: .unique(proto: "optional_import_enum", json: "optionalImportEnum", swift: "optionalImportEnum"),
    24: .unique(proto: "optional_string_piece", json: "optionalStringPiece", swift: "optionalStringPiece"),
    25: .unique(proto: "optional_cord", json: "optionalCord", swift: "optionalCord"),
    26: .unique(proto: "optional_public_import_message", json: "optionalPublicImportMessage", swift: "optionalPublicImportMessage"),
    27: .unique(proto: "optional_lazy_message", json: "optionalLazyMessage", swift: "optionalLazyMessage"),
    31: .unique(proto: "repeated_int32", json: "repeatedInt32", swift: "repeatedInt32"),
    32: .unique(proto: "repeated_int64", json: "repeatedInt64", swift: "repeatedInt64"),
    33: .unique(proto: "repeated_uint32", json: "repeatedUint32", swift: "repeatedUint32"),
    34: .unique(proto: "repeated_uint64", json: "repeatedUint64", swift: "repeatedUint64"),
    35: .unique(proto: "repeated_sint32", json: "repeatedSint32", swift: "repeatedSint32"),
    36: .unique(proto: "repeated_sint64", json: "repeatedSint64", swift: "repeatedSint64"),
    37: .unique(proto: "repeated_fixed32", json: "repeatedFixed32", swift: "repeatedFixed32"),
    38: .unique(proto: "repeated_fixed64", json: "repeatedFixed64", swift: "repeatedFixed64"),
    39: .unique(proto: "repeated_sfixed32", json: "repeatedSfixed32", swift: "repeatedSfixed32"),
    40: .unique(proto: "repeated_sfixed64", json: "repeatedSfixed64", swift: "repeatedSfixed64"),
    41: .unique(proto: "repeated_float", json: "repeatedFloat", swift: "repeatedFloat"),
    42: .unique(proto: "repeated_double", json: "repeatedDouble", swift: "repeatedDouble"),
    43: .unique(proto: "repeated_bool", json: "repeatedBool", swift: "repeatedBool"),
    44: .unique(proto: "repeated_string", json: "repeatedString", swift: "repeatedString"),
    45: .unique(proto: "repeated_bytes", json: "repeatedBytes", swift: "repeatedBytes"),
    46: .same(proto: "repeatedgroup", swift: "repeatedGroup"),
    48: .unique(proto: "repeated_nested_message", json: "repeatedNestedMessage", swift: "repeatedNestedMessage"),
    49: .unique(proto: "repeated_foreign_message", json: "repeatedForeignMessage", swift: "repeatedForeignMessage"),
    50: .unique(proto: "repeated_import_message", json: "repeatedImportMessage", swift: "repeatedImportMessage"),
    51: .unique(proto: "repeated_nested_enum", json: "repeatedNestedEnum", swift: "repeatedNestedEnum"),
    52: .unique(proto: "repeated_foreign_enum", json: "repeatedForeignEnum", swift: "repeatedForeignEnum"),
    53: .unique(proto: "repeated_import_enum", json: "repeatedImportEnum", swift: "repeatedImportEnum"),
    54: .unique(proto: "repeated_string_piece", json: "repeatedStringPiece", swift: "repeatedStringPiece"),
    55: .unique(proto: "repeated_cord", json: "repeatedCord", swift: "repeatedCord"),
    57: .unique(proto: "repeated_lazy_message", json: "repeatedLazyMessage", swift: "repeatedLazyMessage"),
    61: .unique(proto: "default_int32", json: "defaultInt32", swift: "defaultInt32"),
    62: .unique(proto: "default_int64", json: "defaultInt64", swift: "defaultInt64"),
    63: .unique(proto: "default_uint32", json: "defaultUint32", swift: "defaultUint32"),
    64: .unique(proto: "default_uint64", json: "defaultUint64", swift: "defaultUint64"),
    65: .unique(proto: "default_sint32", json: "defaultSint32", swift: "defaultSint32"),
    66: .unique(proto: "default_sint64", json: "defaultSint64", swift: "defaultSint64"),
    67: .unique(proto: "default_fixed32", json: "defaultFixed32", swift: "defaultFixed32"),
    68: .unique(proto: "default_fixed64", json: "defaultFixed64", swift: "defaultFixed64"),
    69: .unique(proto: "default_sfixed32", json: "defaultSfixed32", swift: "defaultSfixed32"),
    70: .unique(proto: "default_sfixed64", json: "defaultSfixed64", swift: "defaultSfixed64"),
    71: .unique(proto: "default_float", json: "defaultFloat", swift: "defaultFloat"),
    72: .unique(proto: "default_double", json: "defaultDouble", swift: "defaultDouble"),
    73: .unique(proto: "default_bool", json: "defaultBool", swift: "defaultBool"),
    74: .unique(proto: "default_string", json: "defaultString", swift: "defaultString"),
    75: .unique(proto: "default_bytes", json: "defaultBytes", swift: "defaultBytes"),
    81: .unique(proto: "default_nested_enum", json: "defaultNestedEnum", swift: "defaultNestedEnum"),
    82: .unique(proto: "default_foreign_enum", json: "defaultForeignEnum", swift: "defaultForeignEnum"),
    83: .unique(proto: "default_import_enum", json: "defaultImportEnum", swift: "defaultImportEnum"),
    84: .unique(proto: "default_string_piece", json: "defaultStringPiece", swift: "defaultStringPiece"),
    85: .unique(proto: "default_cord", json: "defaultCord", swift: "defaultCord"),
    111: .unique(proto: "oneof_uint32", json: "oneofUint32", swift: "oneofUint32"),
    112: .unique(proto: "oneof_nested_message", json: "oneofNestedMessage", swift: "oneofNestedMessage"),
    113: .unique(proto: "oneof_string", json: "oneofString", swift: "oneofString"),
    114: .unique(proto: "oneof_bytes", json: "oneofBytes", swift: "oneofBytes"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = ProtobufUnittest_TestAllTypes
    var unknown = SwiftProtobuf.UnknownStorage()
    var _optionalInt32: Int32? = nil
    var _optionalInt64: Int64? = nil
    var _optionalUint32: UInt32? = nil
    var _optionalUint64: UInt64? = nil
    var _optionalSint32: Int32? = nil
    var _optionalSint64: Int64? = nil
    var _optionalFixed32: UInt32? = nil
    var _optionalFixed64: UInt64? = nil
    var _optionalSfixed32: Int32? = nil
    var _optionalSfixed64: Int64? = nil
    var _optionalFloat: Float? = nil
    var _optionalDouble: Double? = nil
    var _optionalBool: Bool? = nil
    var _optionalString: String? = nil
    var _optionalBytes: Data? = nil
    var _optionalGroup: ProtobufUnittest_TestAllTypes.OptionalGroup? = nil
    var _optionalNestedMessage: ProtobufUnittest_TestAllTypes.NestedMessage? = nil
    var _optionalForeignMessage: ProtobufUnittest_ForeignMessage? = nil
    var _optionalImportMessage: ProtobufUnittestImport_ImportMessage? = nil
    var _optionalNestedEnum: ProtobufUnittest_TestAllTypes.NestedEnum? = nil
    var _optionalForeignEnum: ProtobufUnittest_ForeignEnum? = nil
    var _optionalImportEnum: ProtobufUnittestImport_ImportEnum? = nil
    var _optionalStringPiece: String? = nil
    var _optionalCord: String? = nil
    var _optionalPublicImportMessage: ProtobufUnittestImport_PublicImportMessage? = nil
    var _optionalLazyMessage: ProtobufUnittest_TestAllTypes.NestedMessage? = nil
    var _repeatedInt32: [Int32] = []
    var _repeatedInt64: [Int64] = []
    var _repeatedUint32: [UInt32] = []
    var _repeatedUint64: [UInt64] = []
    var _repeatedSint32: [Int32] = []
    var _repeatedSint64: [Int64] = []
    var _repeatedFixed32: [UInt32] = []
    var _repeatedFixed64: [UInt64] = []
    var _repeatedSfixed32: [Int32] = []
    var _repeatedSfixed64: [Int64] = []
    var _repeatedFloat: [Float] = []
    var _repeatedDouble: [Double] = []
    var _repeatedBool: [Bool] = []
    var _repeatedString: [String] = []
    var _repeatedBytes: [Data] = []
    var _repeatedGroup: [ProtobufUnittest_TestAllTypes.RepeatedGroup] = []
    var _repeatedNestedMessage: [ProtobufUnittest_TestAllTypes.NestedMessage] = []
    var _repeatedForeignMessage: [ProtobufUnittest_ForeignMessage] = []
    var _repeatedImportMessage: [ProtobufUnittestImport_ImportMessage] = []
    var _repeatedNestedEnum: [ProtobufUnittest_TestAllTypes.NestedEnum] = []
    var _repeatedForeignEnum: [ProtobufUnittest_ForeignEnum] = []
    var _repeatedImportEnum: [ProtobufUnittestImport_ImportEnum] = []
    var _repeatedStringPiece: [String] = []
    var _repeatedCord: [String] = []
    var _repeatedLazyMessage: [ProtobufUnittest_TestAllTypes.NestedMessage] = []
    var _defaultInt32: Int32? = nil
    var _defaultInt64: Int64? = nil
    var _defaultUint32: UInt32? = nil
    var _defaultUint64: UInt64? = nil
    var _defaultSint32: Int32? = nil
    var _defaultSint64: Int64? = nil
    var _defaultFixed32: UInt32? = nil
    var _defaultFixed64: UInt64? = nil
    var _defaultSfixed32: Int32? = nil
    var _defaultSfixed64: Int64? = nil
    var _defaultFloat: Float? = nil
    var _defaultDouble: Double? = nil
    var _defaultBool: Bool? = nil
    var _defaultString: String? = nil
    var _defaultBytes: Data? = nil
    var _defaultNestedEnum: ProtobufUnittest_TestAllTypes.NestedEnum? = nil
    var _defaultForeignEnum: ProtobufUnittest_ForeignEnum? = nil
    var _defaultImportEnum: ProtobufUnittestImport_ImportEnum? = nil
    var _defaultStringPiece: String? = nil
    var _defaultCord: String? = nil
    var _oneofField = ProtobufUnittest_TestAllTypes.OneOf_OneofField()

    init() {}

    func decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_optionalInt32)
      case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: &_optionalInt64)
      case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_optionalUint32)
      case 4: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt64.self, value: &_optionalUint64)
      case 5: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufSInt32.self, value: &_optionalSint32)
      case 6: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufSInt64.self, value: &_optionalSint64)
      case 7: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufFixed32.self, value: &_optionalFixed32)
      case 8: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufFixed64.self, value: &_optionalFixed64)
      case 9: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufSFixed32.self, value: &_optionalSfixed32)
      case 10: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufSFixed64.self, value: &_optionalSfixed64)
      case 11: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufFloat.self, value: &_optionalFloat)
      case 12: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufDouble.self, value: &_optionalDouble)
      case 13: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: &_optionalBool)
      case 14: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_optionalString)
      case 15: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: &_optionalBytes)
      case 16: try setter.decodeSingularGroupField(fieldType: ProtobufUnittest_TestAllTypes.OptionalGroup.self, value: &_optionalGroup)
      case 18: try setter.decodeSingularMessageField(fieldType: ProtobufUnittest_TestAllTypes.NestedMessage.self, value: &_optionalNestedMessage)
      case 19: try setter.decodeSingularMessageField(fieldType: ProtobufUnittest_ForeignMessage.self, value: &_optionalForeignMessage)
      case 20: try setter.decodeSingularMessageField(fieldType: ProtobufUnittestImport_ImportMessage.self, value: &_optionalImportMessage)
      case 21: try setter.decodeSingularField(fieldType: ProtobufUnittest_TestAllTypes.NestedEnum.self, value: &_optionalNestedEnum)
      case 22: try setter.decodeSingularField(fieldType: ProtobufUnittest_ForeignEnum.self, value: &_optionalForeignEnum)
      case 23: try setter.decodeSingularField(fieldType: ProtobufUnittestImport_ImportEnum.self, value: &_optionalImportEnum)
      case 24: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_optionalStringPiece)
      case 25: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_optionalCord)
      case 26: try setter.decodeSingularMessageField(fieldType: ProtobufUnittestImport_PublicImportMessage.self, value: &_optionalPublicImportMessage)
      case 27: try setter.decodeSingularMessageField(fieldType: ProtobufUnittest_TestAllTypes.NestedMessage.self, value: &_optionalLazyMessage)
      case 31: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_repeatedInt32)
      case 32: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: &_repeatedInt64)
      case 33: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_repeatedUint32)
      case 34: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufUInt64.self, value: &_repeatedUint64)
      case 35: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufSInt32.self, value: &_repeatedSint32)
      case 36: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufSInt64.self, value: &_repeatedSint64)
      case 37: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufFixed32.self, value: &_repeatedFixed32)
      case 38: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufFixed64.self, value: &_repeatedFixed64)
      case 39: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufSFixed32.self, value: &_repeatedSfixed32)
      case 40: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufSFixed64.self, value: &_repeatedSfixed64)
      case 41: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufFloat.self, value: &_repeatedFloat)
      case 42: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufDouble.self, value: &_repeatedDouble)
      case 43: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufBool.self, value: &_repeatedBool)
      case 44: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_repeatedString)
      case 45: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: &_repeatedBytes)
      case 46: try setter.decodeRepeatedGroupField(fieldType: ProtobufUnittest_TestAllTypes.RepeatedGroup.self, value: &_repeatedGroup)
      case 48: try setter.decodeRepeatedMessageField(fieldType: ProtobufUnittest_TestAllTypes.NestedMessage.self, value: &_repeatedNestedMessage)
      case 49: try setter.decodeRepeatedMessageField(fieldType: ProtobufUnittest_ForeignMessage.self, value: &_repeatedForeignMessage)
      case 50: try setter.decodeRepeatedMessageField(fieldType: ProtobufUnittestImport_ImportMessage.self, value: &_repeatedImportMessage)
      case 51: try setter.decodeRepeatedField(fieldType: ProtobufUnittest_TestAllTypes.NestedEnum.self, value: &_repeatedNestedEnum)
      case 52: try setter.decodeRepeatedField(fieldType: ProtobufUnittest_ForeignEnum.self, value: &_repeatedForeignEnum)
      case 53: try setter.decodeRepeatedField(fieldType: ProtobufUnittestImport_ImportEnum.self, value: &_repeatedImportEnum)
      case 54: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_repeatedStringPiece)
      case 55: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_repeatedCord)
      case 57: try setter.decodeRepeatedMessageField(fieldType: ProtobufUnittest_TestAllTypes.NestedMessage.self, value: &_repeatedLazyMessage)
      case 61: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_defaultInt32)
      case 62: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: &_defaultInt64)
      case 63: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_defaultUint32)
      case 64: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt64.self, value: &_defaultUint64)
      case 65: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufSInt32.self, value: &_defaultSint32)
      case 66: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufSInt64.self, value: &_defaultSint64)
      case 67: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufFixed32.self, value: &_defaultFixed32)
      case 68: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufFixed64.self, value: &_defaultFixed64)
      case 69: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufSFixed32.self, value: &_defaultSfixed32)
      case 70: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufSFixed64.self, value: &_defaultSfixed64)
      case 71: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufFloat.self, value: &_defaultFloat)
      case 72: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufDouble.self, value: &_defaultDouble)
      case 73: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: &_defaultBool)
      case 74: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_defaultString)
      case 75: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: &_defaultBytes)
      case 81: try setter.decodeSingularField(fieldType: ProtobufUnittest_TestAllTypes.NestedEnum.self, value: &_defaultNestedEnum)
      case 82: try setter.decodeSingularField(fieldType: ProtobufUnittest_ForeignEnum.self, value: &_defaultForeignEnum)
      case 83: try setter.decodeSingularField(fieldType: ProtobufUnittestImport_ImportEnum.self, value: &_defaultImportEnum)
      case 84: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_defaultStringPiece)
      case 85: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_defaultCord)
      case 111, 112, 113, 114: try _oneofField.decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
      default: break
      }
    }

    func traverse(visitor: inout SwiftProtobuf.Visitor) throws {
      if let v = _optionalInt32 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: v, protoFieldNumber: 1)
      }
      if let v = _optionalInt64 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: v, protoFieldNumber: 2)
      }
      if let v = _optionalUint32 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: v, protoFieldNumber: 3)
      }
      if let v = _optionalUint64 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt64.self, value: v, protoFieldNumber: 4)
      }
      if let v = _optionalSint32 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufSInt32.self, value: v, protoFieldNumber: 5)
      }
      if let v = _optionalSint64 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufSInt64.self, value: v, protoFieldNumber: 6)
      }
      if let v = _optionalFixed32 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufFixed32.self, value: v, protoFieldNumber: 7)
      }
      if let v = _optionalFixed64 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufFixed64.self, value: v, protoFieldNumber: 8)
      }
      if let v = _optionalSfixed32 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufSFixed32.self, value: v, protoFieldNumber: 9)
      }
      if let v = _optionalSfixed64 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufSFixed64.self, value: v, protoFieldNumber: 10)
      }
      if let v = _optionalFloat {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufFloat.self, value: v, protoFieldNumber: 11)
      }
      if let v = _optionalDouble {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufDouble.self, value: v, protoFieldNumber: 12)
      }
      if let v = _optionalBool {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: v, protoFieldNumber: 13)
      }
      if let v = _optionalString {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: v, protoFieldNumber: 14)
      }
      if let v = _optionalBytes {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: v, protoFieldNumber: 15)
      }
      if let v = _optionalGroup {
        try visitor.visitSingularGroupField(value: v, protoFieldNumber: 16)
      }
      if let v = _optionalNestedMessage {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 18)
      }
      if let v = _optionalForeignMessage {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 19)
      }
      if let v = _optionalImportMessage {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 20)
      }
      if let v = _optionalNestedEnum {
        try visitor.visitSingularField(fieldType: ProtobufUnittest_TestAllTypes.NestedEnum.self, value: v, protoFieldNumber: 21)
      }
      if let v = _optionalForeignEnum {
        try visitor.visitSingularField(fieldType: ProtobufUnittest_ForeignEnum.self, value: v, protoFieldNumber: 22)
      }
      if let v = _optionalImportEnum {
        try visitor.visitSingularField(fieldType: ProtobufUnittestImport_ImportEnum.self, value: v, protoFieldNumber: 23)
      }
      if let v = _optionalStringPiece {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: v, protoFieldNumber: 24)
      }
      if let v = _optionalCord {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: v, protoFieldNumber: 25)
      }
      if let v = _optionalPublicImportMessage {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 26)
      }
      if let v = _optionalLazyMessage {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 27)
      }
      if !_repeatedInt32.isEmpty {
        try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: _repeatedInt32, protoFieldNumber: 31)
      }
      if !_repeatedInt64.isEmpty {
        try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: _repeatedInt64, protoFieldNumber: 32)
      }
      if !_repeatedUint32.isEmpty {
        try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: _repeatedUint32, protoFieldNumber: 33)
      }
      if !_repeatedUint64.isEmpty {
        try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufUInt64.self, value: _repeatedUint64, protoFieldNumber: 34)
      }
      if !_repeatedSint32.isEmpty {
        try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufSInt32.self, value: _repeatedSint32, protoFieldNumber: 35)
      }
      if !_repeatedSint64.isEmpty {
        try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufSInt64.self, value: _repeatedSint64, protoFieldNumber: 36)
      }
      if !_repeatedFixed32.isEmpty {
        try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufFixed32.self, value: _repeatedFixed32, protoFieldNumber: 37)
      }
      if !_repeatedFixed64.isEmpty {
        try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufFixed64.self, value: _repeatedFixed64, protoFieldNumber: 38)
      }
      if !_repeatedSfixed32.isEmpty {
        try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufSFixed32.self, value: _repeatedSfixed32, protoFieldNumber: 39)
      }
      if !_repeatedSfixed64.isEmpty {
        try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufSFixed64.self, value: _repeatedSfixed64, protoFieldNumber: 40)
      }
      if !_repeatedFloat.isEmpty {
        try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufFloat.self, value: _repeatedFloat, protoFieldNumber: 41)
      }
      if !_repeatedDouble.isEmpty {
        try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufDouble.self, value: _repeatedDouble, protoFieldNumber: 42)
      }
      if !_repeatedBool.isEmpty {
        try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufBool.self, value: _repeatedBool, protoFieldNumber: 43)
      }
      if !_repeatedString.isEmpty {
        try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufString.self, value: _repeatedString, protoFieldNumber: 44)
      }
      if !_repeatedBytes.isEmpty {
        try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: _repeatedBytes, protoFieldNumber: 45)
      }
      if !_repeatedGroup.isEmpty {
        try visitor.visitRepeatedGroupField(value: _repeatedGroup, protoFieldNumber: 46)
      }
      if !_repeatedNestedMessage.isEmpty {
        try visitor.visitRepeatedMessageField(value: _repeatedNestedMessage, protoFieldNumber: 48)
      }
      if !_repeatedForeignMessage.isEmpty {
        try visitor.visitRepeatedMessageField(value: _repeatedForeignMessage, protoFieldNumber: 49)
      }
      if !_repeatedImportMessage.isEmpty {
        try visitor.visitRepeatedMessageField(value: _repeatedImportMessage, protoFieldNumber: 50)
      }
      if !_repeatedNestedEnum.isEmpty {
        try visitor.visitRepeatedField(fieldType: ProtobufUnittest_TestAllTypes.NestedEnum.self, value: _repeatedNestedEnum, protoFieldNumber: 51)
      }
      if !_repeatedForeignEnum.isEmpty {
        try visitor.visitRepeatedField(fieldType: ProtobufUnittest_ForeignEnum.self, value: _repeatedForeignEnum, protoFieldNumber: 52)
      }
      if !_repeatedImportEnum.isEmpty {
        try visitor.visitRepeatedField(fieldType: ProtobufUnittestImport_ImportEnum.self, value: _repeatedImportEnum, protoFieldNumber: 53)
      }
      if !_repeatedStringPiece.isEmpty {
        try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufString.self, value: _repeatedStringPiece, protoFieldNumber: 54)
      }
      if !_repeatedCord.isEmpty {
        try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufString.self, value: _repeatedCord, protoFieldNumber: 55)
      }
      if !_repeatedLazyMessage.isEmpty {
        try visitor.visitRepeatedMessageField(value: _repeatedLazyMessage, protoFieldNumber: 57)
      }
      if let v = _defaultInt32 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: v, protoFieldNumber: 61)
      }
      if let v = _defaultInt64 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: v, protoFieldNumber: 62)
      }
      if let v = _defaultUint32 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: v, protoFieldNumber: 63)
      }
      if let v = _defaultUint64 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt64.self, value: v, protoFieldNumber: 64)
      }
      if let v = _defaultSint32 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufSInt32.self, value: v, protoFieldNumber: 65)
      }
      if let v = _defaultSint64 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufSInt64.self, value: v, protoFieldNumber: 66)
      }
      if let v = _defaultFixed32 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufFixed32.self, value: v, protoFieldNumber: 67)
      }
      if let v = _defaultFixed64 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufFixed64.self, value: v, protoFieldNumber: 68)
      }
      if let v = _defaultSfixed32 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufSFixed32.self, value: v, protoFieldNumber: 69)
      }
      if let v = _defaultSfixed64 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufSFixed64.self, value: v, protoFieldNumber: 70)
      }
      if let v = _defaultFloat {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufFloat.self, value: v, protoFieldNumber: 71)
      }
      if let v = _defaultDouble {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufDouble.self, value: v, protoFieldNumber: 72)
      }
      if let v = _defaultBool {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: v, protoFieldNumber: 73)
      }
      if let v = _defaultString {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: v, protoFieldNumber: 74)
      }
      if let v = _defaultBytes {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: v, protoFieldNumber: 75)
      }
      if let v = _defaultNestedEnum {
        try visitor.visitSingularField(fieldType: ProtobufUnittest_TestAllTypes.NestedEnum.self, value: v, protoFieldNumber: 81)
      }
      if let v = _defaultForeignEnum {
        try visitor.visitSingularField(fieldType: ProtobufUnittest_ForeignEnum.self, value: v, protoFieldNumber: 82)
      }
      if let v = _defaultImportEnum {
        try visitor.visitSingularField(fieldType: ProtobufUnittestImport_ImportEnum.self, value: v, protoFieldNumber: 83)
      }
      if let v = _defaultStringPiece {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: v, protoFieldNumber: 84)
      }
      if let v = _defaultCord {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: v, protoFieldNumber: 85)
      }
      try _oneofField.traverse(visitor: &visitor, start: 111, end: 115)
      unknown.traverse(visitor: &visitor)
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _optionalInt32 != other._optionalInt32 {return false}
      if _optionalInt64 != other._optionalInt64 {return false}
      if _optionalUint32 != other._optionalUint32 {return false}
      if _optionalUint64 != other._optionalUint64 {return false}
      if _optionalSint32 != other._optionalSint32 {return false}
      if _optionalSint64 != other._optionalSint64 {return false}
      if _optionalFixed32 != other._optionalFixed32 {return false}
      if _optionalFixed64 != other._optionalFixed64 {return false}
      if _optionalSfixed32 != other._optionalSfixed32 {return false}
      if _optionalSfixed64 != other._optionalSfixed64 {return false}
      if _optionalFloat != other._optionalFloat {return false}
      if _optionalDouble != other._optionalDouble {return false}
      if _optionalBool != other._optionalBool {return false}
      if _optionalString != other._optionalString {return false}
      if _optionalBytes != other._optionalBytes {return false}
      if _optionalGroup != other._optionalGroup {return false}
      if _optionalNestedMessage != other._optionalNestedMessage {return false}
      if _optionalForeignMessage != other._optionalForeignMessage {return false}
      if _optionalImportMessage != other._optionalImportMessage {return false}
      if _optionalNestedEnum != other._optionalNestedEnum {return false}
      if _optionalForeignEnum != other._optionalForeignEnum {return false}
      if _optionalImportEnum != other._optionalImportEnum {return false}
      if _optionalStringPiece != other._optionalStringPiece {return false}
      if _optionalCord != other._optionalCord {return false}
      if _optionalPublicImportMessage != other._optionalPublicImportMessage {return false}
      if _optionalLazyMessage != other._optionalLazyMessage {return false}
      if _repeatedInt32 != other._repeatedInt32 {return false}
      if _repeatedInt64 != other._repeatedInt64 {return false}
      if _repeatedUint32 != other._repeatedUint32 {return false}
      if _repeatedUint64 != other._repeatedUint64 {return false}
      if _repeatedSint32 != other._repeatedSint32 {return false}
      if _repeatedSint64 != other._repeatedSint64 {return false}
      if _repeatedFixed32 != other._repeatedFixed32 {return false}
      if _repeatedFixed64 != other._repeatedFixed64 {return false}
      if _repeatedSfixed32 != other._repeatedSfixed32 {return false}
      if _repeatedSfixed64 != other._repeatedSfixed64 {return false}
      if _repeatedFloat != other._repeatedFloat {return false}
      if _repeatedDouble != other._repeatedDouble {return false}
      if _repeatedBool != other._repeatedBool {return false}
      if _repeatedString != other._repeatedString {return false}
      if _repeatedBytes != other._repeatedBytes {return false}
      if _repeatedGroup != other._repeatedGroup {return false}
      if _repeatedNestedMessage != other._repeatedNestedMessage {return false}
      if _repeatedForeignMessage != other._repeatedForeignMessage {return false}
      if _repeatedImportMessage != other._repeatedImportMessage {return false}
      if _repeatedNestedEnum != other._repeatedNestedEnum {return false}
      if _repeatedForeignEnum != other._repeatedForeignEnum {return false}
      if _repeatedImportEnum != other._repeatedImportEnum {return false}
      if _repeatedStringPiece != other._repeatedStringPiece {return false}
      if _repeatedCord != other._repeatedCord {return false}
      if _repeatedLazyMessage != other._repeatedLazyMessage {return false}
      if _defaultInt32 != other._defaultInt32 {return false}
      if _defaultInt64 != other._defaultInt64 {return false}
      if _defaultUint32 != other._defaultUint32 {return false}
      if _defaultUint64 != other._defaultUint64 {return false}
      if _defaultSint32 != other._defaultSint32 {return false}
      if _defaultSint64 != other._defaultSint64 {return false}
      if _defaultFixed32 != other._defaultFixed32 {return false}
      if _defaultFixed64 != other._defaultFixed64 {return false}
      if _defaultSfixed32 != other._defaultSfixed32 {return false}
      if _defaultSfixed64 != other._defaultSfixed64 {return false}
      if _defaultFloat != other._defaultFloat {return false}
      if _defaultDouble != other._defaultDouble {return false}
      if _defaultBool != other._defaultBool {return false}
      if _defaultString != other._defaultString {return false}
      if _defaultBytes != other._defaultBytes {return false}
      if _defaultNestedEnum != other._defaultNestedEnum {return false}
      if _defaultForeignEnum != other._defaultForeignEnum {return false}
      if _defaultImportEnum != other._defaultImportEnum {return false}
      if _defaultStringPiece != other._defaultStringPiece {return false}
      if _defaultCord != other._defaultCord {return false}
      if _oneofField != other._oneofField {return false}
      if unknown != other.unknown {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone.unknown = unknown
      clone._optionalInt32 = _optionalInt32
      clone._optionalInt64 = _optionalInt64
      clone._optionalUint32 = _optionalUint32
      clone._optionalUint64 = _optionalUint64
      clone._optionalSint32 = _optionalSint32
      clone._optionalSint64 = _optionalSint64
      clone._optionalFixed32 = _optionalFixed32
      clone._optionalFixed64 = _optionalFixed64
      clone._optionalSfixed32 = _optionalSfixed32
      clone._optionalSfixed64 = _optionalSfixed64
      clone._optionalFloat = _optionalFloat
      clone._optionalDouble = _optionalDouble
      clone._optionalBool = _optionalBool
      clone._optionalString = _optionalString
      clone._optionalBytes = _optionalBytes
      clone._optionalGroup = _optionalGroup
      clone._optionalNestedMessage = _optionalNestedMessage
      clone._optionalForeignMessage = _optionalForeignMessage
      clone._optionalImportMessage = _optionalImportMessage
      clone._optionalNestedEnum = _optionalNestedEnum
      clone._optionalForeignEnum = _optionalForeignEnum
      clone._optionalImportEnum = _optionalImportEnum
      clone._optionalStringPiece = _optionalStringPiece
      clone._optionalCord = _optionalCord
      clone._optionalPublicImportMessage = _optionalPublicImportMessage
      clone._optionalLazyMessage = _optionalLazyMessage
      clone._repeatedInt32 = _repeatedInt32
      clone._repeatedInt64 = _repeatedInt64
      clone._repeatedUint32 = _repeatedUint32
      clone._repeatedUint64 = _repeatedUint64
      clone._repeatedSint32 = _repeatedSint32
      clone._repeatedSint64 = _repeatedSint64
      clone._repeatedFixed32 = _repeatedFixed32
      clone._repeatedFixed64 = _repeatedFixed64
      clone._repeatedSfixed32 = _repeatedSfixed32
      clone._repeatedSfixed64 = _repeatedSfixed64
      clone._repeatedFloat = _repeatedFloat
      clone._repeatedDouble = _repeatedDouble
      clone._repeatedBool = _repeatedBool
      clone._repeatedString = _repeatedString
      clone._repeatedBytes = _repeatedBytes
      clone._repeatedGroup = _repeatedGroup
      clone._repeatedNestedMessage = _repeatedNestedMessage
      clone._repeatedForeignMessage = _repeatedForeignMessage
      clone._repeatedImportMessage = _repeatedImportMessage
      clone._repeatedNestedEnum = _repeatedNestedEnum
      clone._repeatedForeignEnum = _repeatedForeignEnum
      clone._repeatedImportEnum = _repeatedImportEnum
      clone._repeatedStringPiece = _repeatedStringPiece
      clone._repeatedCord = _repeatedCord
      clone._repeatedLazyMessage = _repeatedLazyMessage
      clone._defaultInt32 = _defaultInt32
      clone._defaultInt64 = _defaultInt64
      clone._defaultUint32 = _defaultUint32
      clone._defaultUint64 = _defaultUint64
      clone._defaultSint32 = _defaultSint32
      clone._defaultSint64 = _defaultSint64
      clone._defaultFixed32 = _defaultFixed32
      clone._defaultFixed64 = _defaultFixed64
      clone._defaultSfixed32 = _defaultSfixed32
      clone._defaultSfixed64 = _defaultSfixed64
      clone._defaultFloat = _defaultFloat
      clone._defaultDouble = _defaultDouble
      clone._defaultBool = _defaultBool
      clone._defaultString = _defaultString
      clone._defaultBytes = _defaultBytes
      clone._defaultNestedEnum = _defaultNestedEnum
      clone._defaultForeignEnum = _defaultForeignEnum
      clone._defaultImportEnum = _defaultImportEnum
      clone._defaultStringPiece = _defaultStringPiece
      clone._defaultCord = _defaultCord
      clone._oneofField = _oneofField
      return clone
    }
  }

  private var _storage = _StorageClass()

  public var unknown: SwiftProtobuf.UnknownStorage {
    get {return _storage.unknown}
    set {_storage.unknown = newValue}
  }

  enum OneOf_OneofField: ExpressibleByNilLiteral, SwiftProtobuf.OneofEnum {
    case oneofUint32(UInt32)
    case oneofNestedMessage(ProtobufUnittest_TestAllTypes.NestedMessage)
    case oneofString(String)
    case oneofBytes(Data)
    case None

    public init(nilLiteral: ()) {
      self = .None
    }

    public init() {
      self = .None
    }

    public mutating func decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
      if self != .None && setter.rejectConflictingOneof {
        throw SwiftProtobuf.DecodingError.duplicatedOneOf
      }
      switch protoFieldNumber {
      case 111:
        var value: UInt32?
        try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &value)
        if let value = value {
          self = .oneofUint32(value)
        }
      case 112:
        var value: ProtobufUnittest_TestAllTypes.NestedMessage?
        try setter.decodeSingularMessageField(fieldType: ProtobufUnittest_TestAllTypes.NestedMessage.self, value: &value)
        if let value = value {
          self = .oneofNestedMessage(value)
        }
      case 113:
        var value: String?
        try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &value)
        if let value = value {
          self = .oneofString(value)
        }
      case 114:
        var value: Data?
        try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: &value)
        if let value = value {
          self = .oneofBytes(value)
        }
      default:
        self = .None
      }
    }

    public func traverse(visitor: inout SwiftProtobuf.Visitor, start: Int, end: Int) throws {
      switch self {
      case .oneofUint32(let v):
        if start <= 111 && 111 < end {
          try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: v, protoFieldNumber: 111)
        }
      case .oneofNestedMessage(let v):
        if start <= 112 && 112 < end {
          try visitor.visitSingularMessageField(value: v, protoFieldNumber: 112)
        }
      case .oneofString(let v):
        if start <= 113 && 113 < end {
          try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: v, protoFieldNumber: 113)
        }
      case .oneofBytes(let v):
        if start <= 114 && 114 < end {
          try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: v, protoFieldNumber: 114)
        }
      case .None:
        break
      }
    }
  }

  enum NestedEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case foo // = 1
    case bar // = 2
    case baz // = 3

    ///   Intentionally negative.
    case neg // = -1

    init() {
      self = .foo
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 1: self = .foo
      case 2: self = .bar
      case 3: self = .baz
      case -1: self = .neg
      default: return nil
      }
    }

    init?(name: String) {
      switch name {
      case "foo": self = .foo
      case "bar": self = .bar
      case "baz": self = .baz
      case "neg": self = .neg
      default: return nil
      }
    }

    init?(jsonName: String) {
      switch jsonName {
      case "FOO": self = .foo
      case "BAR": self = .bar
      case "BAZ": self = .baz
      case "NEG": self = .neg
      default: return nil
      }
    }

    init?(protoName: String) {
      switch protoName {
      case "FOO": self = .foo
      case "BAR": self = .bar
      case "BAZ": self = .baz
      case "NEG": self = .neg
      default: return nil
      }
    }

    var rawValue: Int {
      get {
        switch self {
        case .foo: return 1
        case .bar: return 2
        case .baz: return 3
        case .neg: return -1
        }
      }
    }

    var json: String {
      get {
        switch self {
        case .foo: return "\"FOO\""
        case .bar: return "\"BAR\""
        case .baz: return "\"BAZ\""
        case .neg: return "\"NEG\""
        }
      }
    }

    var hashValue: Int { return rawValue }

    var debugDescription: String {
      get {
        switch self {
        case .foo: return ".foo"
        case .bar: return ".bar"
        case .baz: return ".baz"
        case .neg: return ".neg"
        }
      }
    }

  }

  struct NestedMessage: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
    public var swiftClassName: String {return "ProtobufUnittest_TestAllTypes.NestedMessage"}
    public var protoMessageName: String {return "NestedMessage"}
    public var protoPackageName: String {return "protobuf_unittest"}
    public static let _protobuf_fieldNames: FieldNameMap = [
      1: .same(proto: "bb", swift: "bb"),
    ]

    public var unknown = SwiftProtobuf.UnknownStorage()

    ///   The field name "b" fails to compile in proto1 because it conflicts with
    ///   a local variable named "b" in one of the generated methods.  Doh.
    ///   This file needs to compile in proto1 to test backwards-compatibility.
    private var _bb: Int32? = nil
    var bb: Int32 {
      get {return _bb ?? 0}
      set {_bb = newValue}
    }
    public var hasBb: Bool {
      return _bb != nil
    }
    public mutating func clearBb() {
      return _bb = nil
    }

    init() {}

    public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_bb)
      default: break
      }
    }

    public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
      if let v = _bb {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: v, protoFieldNumber: 1)
      }
      unknown.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestAllTypes.NestedMessage) -> Bool {
      if _bb != other._bb {return false}
      if unknown != other.unknown {return false}
      return true
    }
  }

  struct OptionalGroup: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
    public var swiftClassName: String {return "ProtobufUnittest_TestAllTypes.OptionalGroup"}
    public var protoMessageName: String {return "OptionalGroup"}
    public var protoPackageName: String {return "protobuf_unittest"}
    public static let _protobuf_fieldNames: FieldNameMap = [
      17: .same(proto: "a", swift: "a"),
    ]

    public var unknown = SwiftProtobuf.UnknownStorage()

    private var _a: Int32? = nil
    var a: Int32 {
      get {return _a ?? 0}
      set {_a = newValue}
    }
    public var hasA: Bool {
      return _a != nil
    }
    public mutating func clearA() {
      return _a = nil
    }

    init() {}

    public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 17: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_a)
      default: break
      }
    }

    public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
      if let v = _a {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: v, protoFieldNumber: 17)
      }
      unknown.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestAllTypes.OptionalGroup) -> Bool {
      if _a != other._a {return false}
      if unknown != other.unknown {return false}
      return true
    }
  }

  struct RepeatedGroup: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
    public var swiftClassName: String {return "ProtobufUnittest_TestAllTypes.RepeatedGroup"}
    public var protoMessageName: String {return "RepeatedGroup"}
    public var protoPackageName: String {return "protobuf_unittest"}
    public static let _protobuf_fieldNames: FieldNameMap = [
      47: .same(proto: "a", swift: "a"),
    ]

    public var unknown = SwiftProtobuf.UnknownStorage()

    private var _a: Int32? = nil
    var a: Int32 {
      get {return _a ?? 0}
      set {_a = newValue}
    }
    public var hasA: Bool {
      return _a != nil
    }
    public mutating func clearA() {
      return _a = nil
    }

    init() {}

    public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 47: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_a)
      default: break
      }
    }

    public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
      if let v = _a {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: v, protoFieldNumber: 47)
      }
      unknown.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestAllTypes.RepeatedGroup) -> Bool {
      if _a != other._a {return false}
      if unknown != other.unknown {return false}
      return true
    }
  }

  ///   Singular
  var optionalInt32: Int32 {
    get {return _storage._optionalInt32 ?? 0}
    set {_uniqueStorage()._optionalInt32 = newValue}
  }
  public var hasOptionalInt32: Bool {
    return _storage._optionalInt32 != nil
  }
  public mutating func clearOptionalInt32() {
    return _storage._optionalInt32 = nil
  }

  var optionalInt64: Int64 {
    get {return _storage._optionalInt64 ?? 0}
    set {_uniqueStorage()._optionalInt64 = newValue}
  }
  public var hasOptionalInt64: Bool {
    return _storage._optionalInt64 != nil
  }
  public mutating func clearOptionalInt64() {
    return _storage._optionalInt64 = nil
  }

  var optionalUint32: UInt32 {
    get {return _storage._optionalUint32 ?? 0}
    set {_uniqueStorage()._optionalUint32 = newValue}
  }
  public var hasOptionalUint32: Bool {
    return _storage._optionalUint32 != nil
  }
  public mutating func clearOptionalUint32() {
    return _storage._optionalUint32 = nil
  }

  var optionalUint64: UInt64 {
    get {return _storage._optionalUint64 ?? 0}
    set {_uniqueStorage()._optionalUint64 = newValue}
  }
  public var hasOptionalUint64: Bool {
    return _storage._optionalUint64 != nil
  }
  public mutating func clearOptionalUint64() {
    return _storage._optionalUint64 = nil
  }

  var optionalSint32: Int32 {
    get {return _storage._optionalSint32 ?? 0}
    set {_uniqueStorage()._optionalSint32 = newValue}
  }
  public var hasOptionalSint32: Bool {
    return _storage._optionalSint32 != nil
  }
  public mutating func clearOptionalSint32() {
    return _storage._optionalSint32 = nil
  }

  var optionalSint64: Int64 {
    get {return _storage._optionalSint64 ?? 0}
    set {_uniqueStorage()._optionalSint64 = newValue}
  }
  public var hasOptionalSint64: Bool {
    return _storage._optionalSint64 != nil
  }
  public mutating func clearOptionalSint64() {
    return _storage._optionalSint64 = nil
  }

  var optionalFixed32: UInt32 {
    get {return _storage._optionalFixed32 ?? 0}
    set {_uniqueStorage()._optionalFixed32 = newValue}
  }
  public var hasOptionalFixed32: Bool {
    return _storage._optionalFixed32 != nil
  }
  public mutating func clearOptionalFixed32() {
    return _storage._optionalFixed32 = nil
  }

  var optionalFixed64: UInt64 {
    get {return _storage._optionalFixed64 ?? 0}
    set {_uniqueStorage()._optionalFixed64 = newValue}
  }
  public var hasOptionalFixed64: Bool {
    return _storage._optionalFixed64 != nil
  }
  public mutating func clearOptionalFixed64() {
    return _storage._optionalFixed64 = nil
  }

  var optionalSfixed32: Int32 {
    get {return _storage._optionalSfixed32 ?? 0}
    set {_uniqueStorage()._optionalSfixed32 = newValue}
  }
  public var hasOptionalSfixed32: Bool {
    return _storage._optionalSfixed32 != nil
  }
  public mutating func clearOptionalSfixed32() {
    return _storage._optionalSfixed32 = nil
  }

  var optionalSfixed64: Int64 {
    get {return _storage._optionalSfixed64 ?? 0}
    set {_uniqueStorage()._optionalSfixed64 = newValue}
  }
  public var hasOptionalSfixed64: Bool {
    return _storage._optionalSfixed64 != nil
  }
  public mutating func clearOptionalSfixed64() {
    return _storage._optionalSfixed64 = nil
  }

  var optionalFloat: Float {
    get {return _storage._optionalFloat ?? 0}
    set {_uniqueStorage()._optionalFloat = newValue}
  }
  public var hasOptionalFloat: Bool {
    return _storage._optionalFloat != nil
  }
  public mutating func clearOptionalFloat() {
    return _storage._optionalFloat = nil
  }

  var optionalDouble: Double {
    get {return _storage._optionalDouble ?? 0}
    set {_uniqueStorage()._optionalDouble = newValue}
  }
  public var hasOptionalDouble: Bool {
    return _storage._optionalDouble != nil
  }
  public mutating func clearOptionalDouble() {
    return _storage._optionalDouble = nil
  }

  var optionalBool: Bool {
    get {return _storage._optionalBool ?? false}
    set {_uniqueStorage()._optionalBool = newValue}
  }
  public var hasOptionalBool: Bool {
    return _storage._optionalBool != nil
  }
  public mutating func clearOptionalBool() {
    return _storage._optionalBool = nil
  }

  var optionalString: String {
    get {return _storage._optionalString ?? ""}
    set {_uniqueStorage()._optionalString = newValue}
  }
  public var hasOptionalString: Bool {
    return _storage._optionalString != nil
  }
  public mutating func clearOptionalString() {
    return _storage._optionalString = nil
  }

  var optionalBytes: Data {
    get {return _storage._optionalBytes ?? Data()}
    set {_uniqueStorage()._optionalBytes = newValue}
  }
  public var hasOptionalBytes: Bool {
    return _storage._optionalBytes != nil
  }
  public mutating func clearOptionalBytes() {
    return _storage._optionalBytes = nil
  }

  var optionalGroup: ProtobufUnittest_TestAllTypes.OptionalGroup {
    get {return _storage._optionalGroup ?? ProtobufUnittest_TestAllTypes.OptionalGroup()}
    set {_uniqueStorage()._optionalGroup = newValue}
  }
  public var hasOptionalGroup: Bool {
    return _storage._optionalGroup != nil
  }
  public mutating func clearOptionalGroup() {
    return _storage._optionalGroup = nil
  }

  var optionalNestedMessage: ProtobufUnittest_TestAllTypes.NestedMessage {
    get {return _storage._optionalNestedMessage ?? ProtobufUnittest_TestAllTypes.NestedMessage()}
    set {_uniqueStorage()._optionalNestedMessage = newValue}
  }
  public var hasOptionalNestedMessage: Bool {
    return _storage._optionalNestedMessage != nil
  }
  public mutating func clearOptionalNestedMessage() {
    return _storage._optionalNestedMessage = nil
  }

  var optionalForeignMessage: ProtobufUnittest_ForeignMessage {
    get {return _storage._optionalForeignMessage ?? ProtobufUnittest_ForeignMessage()}
    set {_uniqueStorage()._optionalForeignMessage = newValue}
  }
  public var hasOptionalForeignMessage: Bool {
    return _storage._optionalForeignMessage != nil
  }
  public mutating func clearOptionalForeignMessage() {
    return _storage._optionalForeignMessage = nil
  }

  var optionalImportMessage: ProtobufUnittestImport_ImportMessage {
    get {return _storage._optionalImportMessage ?? ProtobufUnittestImport_ImportMessage()}
    set {_uniqueStorage()._optionalImportMessage = newValue}
  }
  public var hasOptionalImportMessage: Bool {
    return _storage._optionalImportMessage != nil
  }
  public mutating func clearOptionalImportMessage() {
    return _storage._optionalImportMessage = nil
  }

  var optionalNestedEnum: ProtobufUnittest_TestAllTypes.NestedEnum {
    get {return _storage._optionalNestedEnum ?? ProtobufUnittest_TestAllTypes.NestedEnum.foo}
    set {_uniqueStorage()._optionalNestedEnum = newValue}
  }
  public var hasOptionalNestedEnum: Bool {
    return _storage._optionalNestedEnum != nil
  }
  public mutating func clearOptionalNestedEnum() {
    return _storage._optionalNestedEnum = nil
  }

  var optionalForeignEnum: ProtobufUnittest_ForeignEnum {
    get {return _storage._optionalForeignEnum ?? ProtobufUnittest_ForeignEnum.foreignFoo}
    set {_uniqueStorage()._optionalForeignEnum = newValue}
  }
  public var hasOptionalForeignEnum: Bool {
    return _storage._optionalForeignEnum != nil
  }
  public mutating func clearOptionalForeignEnum() {
    return _storage._optionalForeignEnum = nil
  }

  var optionalImportEnum: ProtobufUnittestImport_ImportEnum {
    get {return _storage._optionalImportEnum ?? ProtobufUnittestImport_ImportEnum.importFoo}
    set {_uniqueStorage()._optionalImportEnum = newValue}
  }
  public var hasOptionalImportEnum: Bool {
    return _storage._optionalImportEnum != nil
  }
  public mutating func clearOptionalImportEnum() {
    return _storage._optionalImportEnum = nil
  }

  var optionalStringPiece: String {
    get {return _storage._optionalStringPiece ?? ""}
    set {_uniqueStorage()._optionalStringPiece = newValue}
  }
  public var hasOptionalStringPiece: Bool {
    return _storage._optionalStringPiece != nil
  }
  public mutating func clearOptionalStringPiece() {
    return _storage._optionalStringPiece = nil
  }

  var optionalCord: String {
    get {return _storage._optionalCord ?? ""}
    set {_uniqueStorage()._optionalCord = newValue}
  }
  public var hasOptionalCord: Bool {
    return _storage._optionalCord != nil
  }
  public mutating func clearOptionalCord() {
    return _storage._optionalCord = nil
  }

  ///   Defined in unittest_import_public.proto
  var optionalPublicImportMessage: ProtobufUnittestImport_PublicImportMessage {
    get {return _storage._optionalPublicImportMessage ?? ProtobufUnittestImport_PublicImportMessage()}
    set {_uniqueStorage()._optionalPublicImportMessage = newValue}
  }
  public var hasOptionalPublicImportMessage: Bool {
    return _storage._optionalPublicImportMessage != nil
  }
  public mutating func clearOptionalPublicImportMessage() {
    return _storage._optionalPublicImportMessage = nil
  }

  var optionalLazyMessage: ProtobufUnittest_TestAllTypes.NestedMessage {
    get {return _storage._optionalLazyMessage ?? ProtobufUnittest_TestAllTypes.NestedMessage()}
    set {_uniqueStorage()._optionalLazyMessage = newValue}
  }
  public var hasOptionalLazyMessage: Bool {
    return _storage._optionalLazyMessage != nil
  }
  public mutating func clearOptionalLazyMessage() {
    return _storage._optionalLazyMessage = nil
  }

  ///   Repeated
  var repeatedInt32: [Int32] {
    get {return _storage._repeatedInt32}
    set {_uniqueStorage()._repeatedInt32 = newValue}
  }

  var repeatedInt64: [Int64] {
    get {return _storage._repeatedInt64}
    set {_uniqueStorage()._repeatedInt64 = newValue}
  }

  var repeatedUint32: [UInt32] {
    get {return _storage._repeatedUint32}
    set {_uniqueStorage()._repeatedUint32 = newValue}
  }

  var repeatedUint64: [UInt64] {
    get {return _storage._repeatedUint64}
    set {_uniqueStorage()._repeatedUint64 = newValue}
  }

  var repeatedSint32: [Int32] {
    get {return _storage._repeatedSint32}
    set {_uniqueStorage()._repeatedSint32 = newValue}
  }

  var repeatedSint64: [Int64] {
    get {return _storage._repeatedSint64}
    set {_uniqueStorage()._repeatedSint64 = newValue}
  }

  var repeatedFixed32: [UInt32] {
    get {return _storage._repeatedFixed32}
    set {_uniqueStorage()._repeatedFixed32 = newValue}
  }

  var repeatedFixed64: [UInt64] {
    get {return _storage._repeatedFixed64}
    set {_uniqueStorage()._repeatedFixed64 = newValue}
  }

  var repeatedSfixed32: [Int32] {
    get {return _storage._repeatedSfixed32}
    set {_uniqueStorage()._repeatedSfixed32 = newValue}
  }

  var repeatedSfixed64: [Int64] {
    get {return _storage._repeatedSfixed64}
    set {_uniqueStorage()._repeatedSfixed64 = newValue}
  }

  var repeatedFloat: [Float] {
    get {return _storage._repeatedFloat}
    set {_uniqueStorage()._repeatedFloat = newValue}
  }

  var repeatedDouble: [Double] {
    get {return _storage._repeatedDouble}
    set {_uniqueStorage()._repeatedDouble = newValue}
  }

  var repeatedBool: [Bool] {
    get {return _storage._repeatedBool}
    set {_uniqueStorage()._repeatedBool = newValue}
  }

  var repeatedString: [String] {
    get {return _storage._repeatedString}
    set {_uniqueStorage()._repeatedString = newValue}
  }

  var repeatedBytes: [Data] {
    get {return _storage._repeatedBytes}
    set {_uniqueStorage()._repeatedBytes = newValue}
  }

  var repeatedGroup: [ProtobufUnittest_TestAllTypes.RepeatedGroup] {
    get {return _storage._repeatedGroup}
    set {_uniqueStorage()._repeatedGroup = newValue}
  }

  var repeatedNestedMessage: [ProtobufUnittest_TestAllTypes.NestedMessage] {
    get {return _storage._repeatedNestedMessage}
    set {_uniqueStorage()._repeatedNestedMessage = newValue}
  }

  var repeatedForeignMessage: [ProtobufUnittest_ForeignMessage] {
    get {return _storage._repeatedForeignMessage}
    set {_uniqueStorage()._repeatedForeignMessage = newValue}
  }

  var repeatedImportMessage: [ProtobufUnittestImport_ImportMessage] {
    get {return _storage._repeatedImportMessage}
    set {_uniqueStorage()._repeatedImportMessage = newValue}
  }

  var repeatedNestedEnum: [ProtobufUnittest_TestAllTypes.NestedEnum] {
    get {return _storage._repeatedNestedEnum}
    set {_uniqueStorage()._repeatedNestedEnum = newValue}
  }

  var repeatedForeignEnum: [ProtobufUnittest_ForeignEnum] {
    get {return _storage._repeatedForeignEnum}
    set {_uniqueStorage()._repeatedForeignEnum = newValue}
  }

  var repeatedImportEnum: [ProtobufUnittestImport_ImportEnum] {
    get {return _storage._repeatedImportEnum}
    set {_uniqueStorage()._repeatedImportEnum = newValue}
  }

  var repeatedStringPiece: [String] {
    get {return _storage._repeatedStringPiece}
    set {_uniqueStorage()._repeatedStringPiece = newValue}
  }

  var repeatedCord: [String] {
    get {return _storage._repeatedCord}
    set {_uniqueStorage()._repeatedCord = newValue}
  }

  var repeatedLazyMessage: [ProtobufUnittest_TestAllTypes.NestedMessage] {
    get {return _storage._repeatedLazyMessage}
    set {_uniqueStorage()._repeatedLazyMessage = newValue}
  }

  ///   Singular with defaults
  var defaultInt32: Int32 {
    get {return _storage._defaultInt32 ?? 41}
    set {_uniqueStorage()._defaultInt32 = newValue}
  }
  public var hasDefaultInt32: Bool {
    return _storage._defaultInt32 != nil
  }
  public mutating func clearDefaultInt32() {
    return _storage._defaultInt32 = nil
  }

  var defaultInt64: Int64 {
    get {return _storage._defaultInt64 ?? 42}
    set {_uniqueStorage()._defaultInt64 = newValue}
  }
  public var hasDefaultInt64: Bool {
    return _storage._defaultInt64 != nil
  }
  public mutating func clearDefaultInt64() {
    return _storage._defaultInt64 = nil
  }

  var defaultUint32: UInt32 {
    get {return _storage._defaultUint32 ?? 43}
    set {_uniqueStorage()._defaultUint32 = newValue}
  }
  public var hasDefaultUint32: Bool {
    return _storage._defaultUint32 != nil
  }
  public mutating func clearDefaultUint32() {
    return _storage._defaultUint32 = nil
  }

  var defaultUint64: UInt64 {
    get {return _storage._defaultUint64 ?? 44}
    set {_uniqueStorage()._defaultUint64 = newValue}
  }
  public var hasDefaultUint64: Bool {
    return _storage._defaultUint64 != nil
  }
  public mutating func clearDefaultUint64() {
    return _storage._defaultUint64 = nil
  }

  var defaultSint32: Int32 {
    get {return _storage._defaultSint32 ?? -45}
    set {_uniqueStorage()._defaultSint32 = newValue}
  }
  public var hasDefaultSint32: Bool {
    return _storage._defaultSint32 != nil
  }
  public mutating func clearDefaultSint32() {
    return _storage._defaultSint32 = nil
  }

  var defaultSint64: Int64 {
    get {return _storage._defaultSint64 ?? 46}
    set {_uniqueStorage()._defaultSint64 = newValue}
  }
  public var hasDefaultSint64: Bool {
    return _storage._defaultSint64 != nil
  }
  public mutating func clearDefaultSint64() {
    return _storage._defaultSint64 = nil
  }

  var defaultFixed32: UInt32 {
    get {return _storage._defaultFixed32 ?? 47}
    set {_uniqueStorage()._defaultFixed32 = newValue}
  }
  public var hasDefaultFixed32: Bool {
    return _storage._defaultFixed32 != nil
  }
  public mutating func clearDefaultFixed32() {
    return _storage._defaultFixed32 = nil
  }

  var defaultFixed64: UInt64 {
    get {return _storage._defaultFixed64 ?? 48}
    set {_uniqueStorage()._defaultFixed64 = newValue}
  }
  public var hasDefaultFixed64: Bool {
    return _storage._defaultFixed64 != nil
  }
  public mutating func clearDefaultFixed64() {
    return _storage._defaultFixed64 = nil
  }

  var defaultSfixed32: Int32 {
    get {return _storage._defaultSfixed32 ?? 49}
    set {_uniqueStorage()._defaultSfixed32 = newValue}
  }
  public var hasDefaultSfixed32: Bool {
    return _storage._defaultSfixed32 != nil
  }
  public mutating func clearDefaultSfixed32() {
    return _storage._defaultSfixed32 = nil
  }

  var defaultSfixed64: Int64 {
    get {return _storage._defaultSfixed64 ?? -50}
    set {_uniqueStorage()._defaultSfixed64 = newValue}
  }
  public var hasDefaultSfixed64: Bool {
    return _storage._defaultSfixed64 != nil
  }
  public mutating func clearDefaultSfixed64() {
    return _storage._defaultSfixed64 = nil
  }

  var defaultFloat: Float {
    get {return _storage._defaultFloat ?? 51.5}
    set {_uniqueStorage()._defaultFloat = newValue}
  }
  public var hasDefaultFloat: Bool {
    return _storage._defaultFloat != nil
  }
  public mutating func clearDefaultFloat() {
    return _storage._defaultFloat = nil
  }

  var defaultDouble: Double {
    get {return _storage._defaultDouble ?? 52000}
    set {_uniqueStorage()._defaultDouble = newValue}
  }
  public var hasDefaultDouble: Bool {
    return _storage._defaultDouble != nil
  }
  public mutating func clearDefaultDouble() {
    return _storage._defaultDouble = nil
  }

  var defaultBool: Bool {
    get {return _storage._defaultBool ?? true}
    set {_uniqueStorage()._defaultBool = newValue}
  }
  public var hasDefaultBool: Bool {
    return _storage._defaultBool != nil
  }
  public mutating func clearDefaultBool() {
    return _storage._defaultBool = nil
  }

  var defaultString: String {
    get {return _storage._defaultString ?? "hello"}
    set {_uniqueStorage()._defaultString = newValue}
  }
  public var hasDefaultString: Bool {
    return _storage._defaultString != nil
  }
  public mutating func clearDefaultString() {
    return _storage._defaultString = nil
  }

  var defaultBytes: Data {
    get {return _storage._defaultBytes ?? Data(bytes: [119, 111, 114, 108, 100])}
    set {_uniqueStorage()._defaultBytes = newValue}
  }
  public var hasDefaultBytes: Bool {
    return _storage._defaultBytes != nil
  }
  public mutating func clearDefaultBytes() {
    return _storage._defaultBytes = nil
  }

  var defaultNestedEnum: ProtobufUnittest_TestAllTypes.NestedEnum {
    get {return _storage._defaultNestedEnum ?? ProtobufUnittest_TestAllTypes.NestedEnum.bar}
    set {_uniqueStorage()._defaultNestedEnum = newValue}
  }
  public var hasDefaultNestedEnum: Bool {
    return _storage._defaultNestedEnum != nil
  }
  public mutating func clearDefaultNestedEnum() {
    return _storage._defaultNestedEnum = nil
  }

  var defaultForeignEnum: ProtobufUnittest_ForeignEnum {
    get {return _storage._defaultForeignEnum ?? ProtobufUnittest_ForeignEnum.foreignBar}
    set {_uniqueStorage()._defaultForeignEnum = newValue}
  }
  public var hasDefaultForeignEnum: Bool {
    return _storage._defaultForeignEnum != nil
  }
  public mutating func clearDefaultForeignEnum() {
    return _storage._defaultForeignEnum = nil
  }

  var defaultImportEnum: ProtobufUnittestImport_ImportEnum {
    get {return _storage._defaultImportEnum ?? ProtobufUnittestImport_ImportEnum.importBar}
    set {_uniqueStorage()._defaultImportEnum = newValue}
  }
  public var hasDefaultImportEnum: Bool {
    return _storage._defaultImportEnum != nil
  }
  public mutating func clearDefaultImportEnum() {
    return _storage._defaultImportEnum = nil
  }

  var defaultStringPiece: String {
    get {return _storage._defaultStringPiece ?? "abc"}
    set {_uniqueStorage()._defaultStringPiece = newValue}
  }
  public var hasDefaultStringPiece: Bool {
    return _storage._defaultStringPiece != nil
  }
  public mutating func clearDefaultStringPiece() {
    return _storage._defaultStringPiece = nil
  }

  var defaultCord: String {
    get {return _storage._defaultCord ?? "123"}
    set {_uniqueStorage()._defaultCord = newValue}
  }
  public var hasDefaultCord: Bool {
    return _storage._defaultCord != nil
  }
  public mutating func clearDefaultCord() {
    return _storage._defaultCord = nil
  }

  var oneofUint32: UInt32 {
    get {
      if case .oneofUint32(let v) = _storage._oneofField {
        return v
      }
      return 0
    }
    set {
      _uniqueStorage()._oneofField = .oneofUint32(newValue)
    }
  }

  var oneofNestedMessage: ProtobufUnittest_TestAllTypes.NestedMessage {
    get {
      if case .oneofNestedMessage(let v) = _storage._oneofField {
        return v
      }
      return ProtobufUnittest_TestAllTypes.NestedMessage()
    }
    set {
      _uniqueStorage()._oneofField = .oneofNestedMessage(newValue)
    }
  }

  var oneofString: String {
    get {
      if case .oneofString(let v) = _storage._oneofField {
        return v
      }
      return ""
    }
    set {
      _uniqueStorage()._oneofField = .oneofString(newValue)
    }
  }

  var oneofBytes: Data {
    get {
      if case .oneofBytes(let v) = _storage._oneofField {
        return v
      }
      return Data()
    }
    set {
      _uniqueStorage()._oneofField = .oneofBytes(newValue)
    }
  }

  public var oneofField: OneOf_OneofField {
    get {return _storage._oneofField}
    set {
      _uniqueStorage()._oneofField = newValue
    }
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestAllTypes) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

///   This proto includes a recusively nested message.
struct ProtobufUnittest_NestedTestAllTypes: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "ProtobufUnittest_NestedTestAllTypes"}
  public var protoMessageName: String {return "NestedTestAllTypes"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "child", swift: "child"),
    2: .same(proto: "payload", swift: "payload"),
    3: .unique(proto: "repeated_child", json: "repeatedChild", swift: "repeatedChild"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = ProtobufUnittest_NestedTestAllTypes
    var unknown = SwiftProtobuf.UnknownStorage()
    var _child: ProtobufUnittest_NestedTestAllTypes? = nil
    var _payload: ProtobufUnittest_TestAllTypes? = nil
    var _repeatedChild: [ProtobufUnittest_NestedTestAllTypes] = []

    init() {}

    func decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularMessageField(fieldType: ProtobufUnittest_NestedTestAllTypes.self, value: &_child)
      case 2: try setter.decodeSingularMessageField(fieldType: ProtobufUnittest_TestAllTypes.self, value: &_payload)
      case 3: try setter.decodeRepeatedMessageField(fieldType: ProtobufUnittest_NestedTestAllTypes.self, value: &_repeatedChild)
      default: break
      }
    }

    func traverse(visitor: inout SwiftProtobuf.Visitor) throws {
      if let v = _child {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 1)
      }
      if let v = _payload {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 2)
      }
      if !_repeatedChild.isEmpty {
        try visitor.visitRepeatedMessageField(value: _repeatedChild, protoFieldNumber: 3)
      }
      unknown.traverse(visitor: &visitor)
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _child != other._child {return false}
      if _payload != other._payload {return false}
      if _repeatedChild != other._repeatedChild {return false}
      if unknown != other.unknown {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone.unknown = unknown
      clone._child = _child
      clone._payload = _payload
      clone._repeatedChild = _repeatedChild
      return clone
    }
  }

  private var _storage = _StorageClass()

  public var unknown: SwiftProtobuf.UnknownStorage {
    get {return _storage.unknown}
    set {_storage.unknown = newValue}
  }

  var child: ProtobufUnittest_NestedTestAllTypes {
    get {return _storage._child ?? ProtobufUnittest_NestedTestAllTypes()}
    set {_uniqueStorage()._child = newValue}
  }
  public var hasChild: Bool {
    return _storage._child != nil
  }
  public mutating func clearChild() {
    return _storage._child = nil
  }

  var payload: ProtobufUnittest_TestAllTypes {
    get {return _storage._payload ?? ProtobufUnittest_TestAllTypes()}
    set {_uniqueStorage()._payload = newValue}
  }
  public var hasPayload: Bool {
    return _storage._payload != nil
  }
  public mutating func clearPayload() {
    return _storage._payload = nil
  }

  var repeatedChild: [ProtobufUnittest_NestedTestAllTypes] {
    get {return _storage._repeatedChild}
    set {_uniqueStorage()._repeatedChild = newValue}
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_NestedTestAllTypes) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

struct ProtobufUnittest_TestDeprecatedFields: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "ProtobufUnittest_TestDeprecatedFields"}
  public var protoMessageName: String {return "TestDeprecatedFields"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "deprecated_int32", json: "deprecatedInt32", swift: "deprecatedInt32"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  private var _deprecatedInt32: Int32? = nil
  var deprecatedInt32: Int32 {
    get {return _deprecatedInt32 ?? 0}
    set {_deprecatedInt32 = newValue}
  }
  public var hasDeprecatedInt32: Bool {
    return _deprecatedInt32 != nil
  }
  public mutating func clearDeprecatedInt32() {
    return _deprecatedInt32 = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_deprecatedInt32)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    if let v = _deprecatedInt32 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: v, protoFieldNumber: 1)
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestDeprecatedFields) -> Bool {
    if _deprecatedInt32 != other._deprecatedInt32 {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

///   Define these after TestAllTypes to make sure the compiler can handle
///   that.
struct ProtobufUnittest_ForeignMessage: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "ProtobufUnittest_ForeignMessage"}
  public var protoMessageName: String {return "ForeignMessage"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "c", swift: "c"),
    2: .same(proto: "d", swift: "d"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  private var _c: Int32? = nil
  var c: Int32 {
    get {return _c ?? 0}
    set {_c = newValue}
  }
  public var hasC: Bool {
    return _c != nil
  }
  public mutating func clearC() {
    return _c = nil
  }

  private var _d: Int32? = nil
  var d: Int32 {
    get {return _d ?? 0}
    set {_d = newValue}
  }
  public var hasD: Bool {
    return _d != nil
  }
  public mutating func clearD() {
    return _d = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_c)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_d)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    if let v = _c {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: v, protoFieldNumber: 1)
    }
    if let v = _d {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: v, protoFieldNumber: 2)
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_ForeignMessage) -> Bool {
    if _c != other._c {return false}
    if _d != other._d {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

struct ProtobufUnittest_TestReservedFields: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "ProtobufUnittest_TestReservedFields"}
  public var protoMessageName: String {return "TestReservedFields"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public static let _protobuf_fieldNames = FieldNameMap()

  public var unknown = SwiftProtobuf.UnknownStorage()

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestReservedFields) -> Bool {
    if unknown != other.unknown {return false}
    return true
  }
}

struct ProtobufUnittest_TestAllExtensions: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf.ExtensibleMessage, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "ProtobufUnittest_TestAllExtensions"}
  public var protoMessageName: String {return "TestAllExtensions"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public static let _protobuf_fieldNames = FieldNameMap()

  public var unknown = SwiftProtobuf.UnknownStorage()

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    if (1 <= protoFieldNumber && protoFieldNumber < 536870912) {
      try setter.decodeExtensionField(values: &extensionFieldValues, messageType: ProtobufUnittest_TestAllExtensions.self, protoFieldNumber: protoFieldNumber)
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try extensionFieldValues.traverse(visitor: &visitor, start: 1, end: 536870912)
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestAllExtensions) -> Bool {
    if unknown != other.unknown {return false}
    if extensionFieldValues != other.extensionFieldValues {return false}
    return true
  }

  private var extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()

  public mutating func setExtensionValue<F: SwiftProtobuf.ExtensionField>(ext: SwiftProtobuf.MessageExtension<F, ProtobufUnittest_TestAllExtensions>, value: F.ValueType) {
    extensionFieldValues[ext.protoFieldNumber] = ext.set(value: value)
  }

  public mutating func clearExtensionValue<F: SwiftProtobuf.ExtensionField>(ext: SwiftProtobuf.MessageExtension<F, ProtobufUnittest_TestAllExtensions>) {
    extensionFieldValues[ext.protoFieldNumber] = nil
  }

  public func getExtensionValue<F: SwiftProtobuf.ExtensionField>(ext: SwiftProtobuf.MessageExtension<F, ProtobufUnittest_TestAllExtensions>) -> F.ValueType {
    if let fieldValue = extensionFieldValues[ext.protoFieldNumber] as? F {
      return fieldValue.value
    }
    return ext.defaultValue
  }

  public func hasExtensionValue<F: SwiftProtobuf.ExtensionField>(ext: SwiftProtobuf.MessageExtension<F, ProtobufUnittest_TestAllExtensions>) -> Bool {
    return extensionFieldValues[ext.protoFieldNumber] is F
  }
  public func _protobuf_fieldNames(for number: Int) -> FieldNameMap.Names? {
    return ProtobufUnittest_TestAllExtensions._protobuf_fieldNames.fieldNames(for: number) ?? extensionFieldValues.fieldNames(for: number)
  }
}

struct ProtobufUnittest_OptionalGroup_extension: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "ProtobufUnittest_OptionalGroup_extension"}
  public var protoMessageName: String {return "OptionalGroup_extension"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    17: .same(proto: "a", swift: "a"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  private var _a: Int32? = nil
  var a: Int32 {
    get {return _a ?? 0}
    set {_a = newValue}
  }
  public var hasA: Bool {
    return _a != nil
  }
  public mutating func clearA() {
    return _a = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 17: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_a)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    if let v = _a {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: v, protoFieldNumber: 17)
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_OptionalGroup_extension) -> Bool {
    if _a != other._a {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

struct ProtobufUnittest_RepeatedGroup_extension: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "ProtobufUnittest_RepeatedGroup_extension"}
  public var protoMessageName: String {return "RepeatedGroup_extension"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    47: .same(proto: "a", swift: "a"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  private var _a: Int32? = nil
  var a: Int32 {
    get {return _a ?? 0}
    set {_a = newValue}
  }
  public var hasA: Bool {
    return _a != nil
  }
  public mutating func clearA() {
    return _a = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 47: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_a)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    if let v = _a {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: v, protoFieldNumber: 47)
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_RepeatedGroup_extension) -> Bool {
    if _a != other._a {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

struct ProtobufUnittest_TestNestedExtension: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "ProtobufUnittest_TestNestedExtension"}
  public var protoMessageName: String {return "TestNestedExtension"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public static let _protobuf_fieldNames = FieldNameMap()

  public var unknown = SwiftProtobuf.UnknownStorage()

  struct Extensions {

    ///   Check for bug where string extensions declared in tested scope did not
    ///   compile.
    static let test = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufString>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 1002, fieldNames: .same(proto: "test", swift: "ProtobufUnittest_TestNestedExtension_test"), defaultValue: "test")

    ///   Used to test if generated extension name is correct when there are
    ///   underscores.
    static let nestedStringExtension = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufString>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 1003, fieldNames: .unique(proto: "nested_string_extension", json: "nestedStringExtension", swift: "ProtobufUnittest_TestNestedExtension_nestedStringExtension"), defaultValue: "")
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestNestedExtension) -> Bool {
    if unknown != other.unknown {return false}
    return true
  }
}

///   We have separate messages for testing required fields because it's
///   annoying to have to fill in required fields in TestProto in order to
///   do anything with it.  Note that we don't need to test every type of
///   required filed because the code output is basically identical to
///   optional fields for all types.
struct ProtobufUnittest_TestRequired: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "ProtobufUnittest_TestRequired"}
  public var protoMessageName: String {return "TestRequired"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "a", swift: "a"),
    2: .same(proto: "dummy2", swift: "dummy2"),
    3: .same(proto: "b", swift: "b"),
    4: .same(proto: "dummy4", swift: "dummy4"),
    5: .same(proto: "dummy5", swift: "dummy5"),
    6: .same(proto: "dummy6", swift: "dummy6"),
    7: .same(proto: "dummy7", swift: "dummy7"),
    8: .same(proto: "dummy8", swift: "dummy8"),
    9: .same(proto: "dummy9", swift: "dummy9"),
    10: .same(proto: "dummy10", swift: "dummy10"),
    11: .same(proto: "dummy11", swift: "dummy11"),
    12: .same(proto: "dummy12", swift: "dummy12"),
    13: .same(proto: "dummy13", swift: "dummy13"),
    14: .same(proto: "dummy14", swift: "dummy14"),
    15: .same(proto: "dummy15", swift: "dummy15"),
    16: .same(proto: "dummy16", swift: "dummy16"),
    17: .same(proto: "dummy17", swift: "dummy17"),
    18: .same(proto: "dummy18", swift: "dummy18"),
    19: .same(proto: "dummy19", swift: "dummy19"),
    20: .same(proto: "dummy20", swift: "dummy20"),
    21: .same(proto: "dummy21", swift: "dummy21"),
    22: .same(proto: "dummy22", swift: "dummy22"),
    23: .same(proto: "dummy23", swift: "dummy23"),
    24: .same(proto: "dummy24", swift: "dummy24"),
    25: .same(proto: "dummy25", swift: "dummy25"),
    26: .same(proto: "dummy26", swift: "dummy26"),
    27: .same(proto: "dummy27", swift: "dummy27"),
    28: .same(proto: "dummy28", swift: "dummy28"),
    29: .same(proto: "dummy29", swift: "dummy29"),
    30: .same(proto: "dummy30", swift: "dummy30"),
    31: .same(proto: "dummy31", swift: "dummy31"),
    32: .same(proto: "dummy32", swift: "dummy32"),
    33: .same(proto: "c", swift: "c"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = ProtobufUnittest_TestRequired
    var unknown = SwiftProtobuf.UnknownStorage()
    var _a: Int32? = nil
    var _dummy2: Int32? = nil
    var _b: Int32? = nil
    var _dummy4: Int32? = nil
    var _dummy5: Int32? = nil
    var _dummy6: Int32? = nil
    var _dummy7: Int32? = nil
    var _dummy8: Int32? = nil
    var _dummy9: Int32? = nil
    var _dummy10: Int32? = nil
    var _dummy11: Int32? = nil
    var _dummy12: Int32? = nil
    var _dummy13: Int32? = nil
    var _dummy14: Int32? = nil
    var _dummy15: Int32? = nil
    var _dummy16: Int32? = nil
    var _dummy17: Int32? = nil
    var _dummy18: Int32? = nil
    var _dummy19: Int32? = nil
    var _dummy20: Int32? = nil
    var _dummy21: Int32? = nil
    var _dummy22: Int32? = nil
    var _dummy23: Int32? = nil
    var _dummy24: Int32? = nil
    var _dummy25: Int32? = nil
    var _dummy26: Int32? = nil
    var _dummy27: Int32? = nil
    var _dummy28: Int32? = nil
    var _dummy29: Int32? = nil
    var _dummy30: Int32? = nil
    var _dummy31: Int32? = nil
    var _dummy32: Int32? = nil
    var _c: Int32? = nil

    init() {}

    func decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_a)
      case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_dummy2)
      case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_b)
      case 4: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_dummy4)
      case 5: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_dummy5)
      case 6: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_dummy6)
      case 7: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_dummy7)
      case 8: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_dummy8)
      case 9: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_dummy9)
      case 10: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_dummy10)
      case 11: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_dummy11)
      case 12: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_dummy12)
      case 13: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_dummy13)
      case 14: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_dummy14)
      case 15: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_dummy15)
      case 16: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_dummy16)
      case 17: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_dummy17)
      case 18: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_dummy18)
      case 19: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_dummy19)
      case 20: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_dummy20)
      case 21: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_dummy21)
      case 22: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_dummy22)
      case 23: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_dummy23)
      case 24: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_dummy24)
      case 25: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_dummy25)
      case 26: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_dummy26)
      case 27: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_dummy27)
      case 28: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_dummy28)
      case 29: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_dummy29)
      case 30: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_dummy30)
      case 31: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_dummy31)
      case 32: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_dummy32)
      case 33: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_c)
      default: break
      }
    }

    func traverse(visitor: inout SwiftProtobuf.Visitor) throws {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: _a ?? 0, protoFieldNumber: 1)
      if let v = _dummy2 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: v, protoFieldNumber: 2)
      }
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: _b ?? 0, protoFieldNumber: 3)
      if let v = _dummy4 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: v, protoFieldNumber: 4)
      }
      if let v = _dummy5 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: v, protoFieldNumber: 5)
      }
      if let v = _dummy6 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: v, protoFieldNumber: 6)
      }
      if let v = _dummy7 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: v, protoFieldNumber: 7)
      }
      if let v = _dummy8 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: v, protoFieldNumber: 8)
      }
      if let v = _dummy9 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: v, protoFieldNumber: 9)
      }
      if let v = _dummy10 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: v, protoFieldNumber: 10)
      }
      if let v = _dummy11 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: v, protoFieldNumber: 11)
      }
      if let v = _dummy12 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: v, protoFieldNumber: 12)
      }
      if let v = _dummy13 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: v, protoFieldNumber: 13)
      }
      if let v = _dummy14 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: v, protoFieldNumber: 14)
      }
      if let v = _dummy15 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: v, protoFieldNumber: 15)
      }
      if let v = _dummy16 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: v, protoFieldNumber: 16)
      }
      if let v = _dummy17 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: v, protoFieldNumber: 17)
      }
      if let v = _dummy18 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: v, protoFieldNumber: 18)
      }
      if let v = _dummy19 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: v, protoFieldNumber: 19)
      }
      if let v = _dummy20 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: v, protoFieldNumber: 20)
      }
      if let v = _dummy21 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: v, protoFieldNumber: 21)
      }
      if let v = _dummy22 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: v, protoFieldNumber: 22)
      }
      if let v = _dummy23 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: v, protoFieldNumber: 23)
      }
      if let v = _dummy24 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: v, protoFieldNumber: 24)
      }
      if let v = _dummy25 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: v, protoFieldNumber: 25)
      }
      if let v = _dummy26 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: v, protoFieldNumber: 26)
      }
      if let v = _dummy27 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: v, protoFieldNumber: 27)
      }
      if let v = _dummy28 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: v, protoFieldNumber: 28)
      }
      if let v = _dummy29 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: v, protoFieldNumber: 29)
      }
      if let v = _dummy30 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: v, protoFieldNumber: 30)
      }
      if let v = _dummy31 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: v, protoFieldNumber: 31)
      }
      if let v = _dummy32 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: v, protoFieldNumber: 32)
      }
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: _c ?? 0, protoFieldNumber: 33)
      unknown.traverse(visitor: &visitor)
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _a != other._a {return false}
      if _dummy2 != other._dummy2 {return false}
      if _b != other._b {return false}
      if _dummy4 != other._dummy4 {return false}
      if _dummy5 != other._dummy5 {return false}
      if _dummy6 != other._dummy6 {return false}
      if _dummy7 != other._dummy7 {return false}
      if _dummy8 != other._dummy8 {return false}
      if _dummy9 != other._dummy9 {return false}
      if _dummy10 != other._dummy10 {return false}
      if _dummy11 != other._dummy11 {return false}
      if _dummy12 != other._dummy12 {return false}
      if _dummy13 != other._dummy13 {return false}
      if _dummy14 != other._dummy14 {return false}
      if _dummy15 != other._dummy15 {return false}
      if _dummy16 != other._dummy16 {return false}
      if _dummy17 != other._dummy17 {return false}
      if _dummy18 != other._dummy18 {return false}
      if _dummy19 != other._dummy19 {return false}
      if _dummy20 != other._dummy20 {return false}
      if _dummy21 != other._dummy21 {return false}
      if _dummy22 != other._dummy22 {return false}
      if _dummy23 != other._dummy23 {return false}
      if _dummy24 != other._dummy24 {return false}
      if _dummy25 != other._dummy25 {return false}
      if _dummy26 != other._dummy26 {return false}
      if _dummy27 != other._dummy27 {return false}
      if _dummy28 != other._dummy28 {return false}
      if _dummy29 != other._dummy29 {return false}
      if _dummy30 != other._dummy30 {return false}
      if _dummy31 != other._dummy31 {return false}
      if _dummy32 != other._dummy32 {return false}
      if _c != other._c {return false}
      if unknown != other.unknown {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone.unknown = unknown
      clone._a = _a
      clone._dummy2 = _dummy2
      clone._b = _b
      clone._dummy4 = _dummy4
      clone._dummy5 = _dummy5
      clone._dummy6 = _dummy6
      clone._dummy7 = _dummy7
      clone._dummy8 = _dummy8
      clone._dummy9 = _dummy9
      clone._dummy10 = _dummy10
      clone._dummy11 = _dummy11
      clone._dummy12 = _dummy12
      clone._dummy13 = _dummy13
      clone._dummy14 = _dummy14
      clone._dummy15 = _dummy15
      clone._dummy16 = _dummy16
      clone._dummy17 = _dummy17
      clone._dummy18 = _dummy18
      clone._dummy19 = _dummy19
      clone._dummy20 = _dummy20
      clone._dummy21 = _dummy21
      clone._dummy22 = _dummy22
      clone._dummy23 = _dummy23
      clone._dummy24 = _dummy24
      clone._dummy25 = _dummy25
      clone._dummy26 = _dummy26
      clone._dummy27 = _dummy27
      clone._dummy28 = _dummy28
      clone._dummy29 = _dummy29
      clone._dummy30 = _dummy30
      clone._dummy31 = _dummy31
      clone._dummy32 = _dummy32
      clone._c = _c
      return clone
    }
  }

  private var _storage = _StorageClass()

  public var unknown: SwiftProtobuf.UnknownStorage {
    get {return _storage.unknown}
    set {_storage.unknown = newValue}
  }

  struct Extensions {

    static let single = SwiftProtobuf.MessageExtension<OptionalMessageExtensionField<ProtobufUnittest_TestRequired>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 1000, fieldNames: .same(proto: "single", swift: "ProtobufUnittest_TestRequired_single"), defaultValue: ProtobufUnittest_TestRequired())

    static let multi = SwiftProtobuf.MessageExtension<RepeatedMessageExtensionField<ProtobufUnittest_TestRequired>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 1001, fieldNames: .same(proto: "multi", swift: "ProtobufUnittest_TestRequired_multi"), defaultValue: [])
  }

  var a: Int32 {
    get {return _storage._a ?? 0}
    set {_uniqueStorage()._a = newValue}
  }
  public var hasA: Bool {
    return _storage._a != nil
  }
  public mutating func clearA() {
    return _storage._a = nil
  }

  var dummy2: Int32 {
    get {return _storage._dummy2 ?? 0}
    set {_uniqueStorage()._dummy2 = newValue}
  }
  public var hasDummy2: Bool {
    return _storage._dummy2 != nil
  }
  public mutating func clearDummy2() {
    return _storage._dummy2 = nil
  }

  var b: Int32 {
    get {return _storage._b ?? 0}
    set {_uniqueStorage()._b = newValue}
  }
  public var hasB: Bool {
    return _storage._b != nil
  }
  public mutating func clearB() {
    return _storage._b = nil
  }

  ///   Pad the field count to 32 so that we can test that IsInitialized()
  ///   properly checks multiple elements of has_bits_.
  var dummy4: Int32 {
    get {return _storage._dummy4 ?? 0}
    set {_uniqueStorage()._dummy4 = newValue}
  }
  public var hasDummy4: Bool {
    return _storage._dummy4 != nil
  }
  public mutating func clearDummy4() {
    return _storage._dummy4 = nil
  }

  var dummy5: Int32 {
    get {return _storage._dummy5 ?? 0}
    set {_uniqueStorage()._dummy5 = newValue}
  }
  public var hasDummy5: Bool {
    return _storage._dummy5 != nil
  }
  public mutating func clearDummy5() {
    return _storage._dummy5 = nil
  }

  var dummy6: Int32 {
    get {return _storage._dummy6 ?? 0}
    set {_uniqueStorage()._dummy6 = newValue}
  }
  public var hasDummy6: Bool {
    return _storage._dummy6 != nil
  }
  public mutating func clearDummy6() {
    return _storage._dummy6 = nil
  }

  var dummy7: Int32 {
    get {return _storage._dummy7 ?? 0}
    set {_uniqueStorage()._dummy7 = newValue}
  }
  public var hasDummy7: Bool {
    return _storage._dummy7 != nil
  }
  public mutating func clearDummy7() {
    return _storage._dummy7 = nil
  }

  var dummy8: Int32 {
    get {return _storage._dummy8 ?? 0}
    set {_uniqueStorage()._dummy8 = newValue}
  }
  public var hasDummy8: Bool {
    return _storage._dummy8 != nil
  }
  public mutating func clearDummy8() {
    return _storage._dummy8 = nil
  }

  var dummy9: Int32 {
    get {return _storage._dummy9 ?? 0}
    set {_uniqueStorage()._dummy9 = newValue}
  }
  public var hasDummy9: Bool {
    return _storage._dummy9 != nil
  }
  public mutating func clearDummy9() {
    return _storage._dummy9 = nil
  }

  var dummy10: Int32 {
    get {return _storage._dummy10 ?? 0}
    set {_uniqueStorage()._dummy10 = newValue}
  }
  public var hasDummy10: Bool {
    return _storage._dummy10 != nil
  }
  public mutating func clearDummy10() {
    return _storage._dummy10 = nil
  }

  var dummy11: Int32 {
    get {return _storage._dummy11 ?? 0}
    set {_uniqueStorage()._dummy11 = newValue}
  }
  public var hasDummy11: Bool {
    return _storage._dummy11 != nil
  }
  public mutating func clearDummy11() {
    return _storage._dummy11 = nil
  }

  var dummy12: Int32 {
    get {return _storage._dummy12 ?? 0}
    set {_uniqueStorage()._dummy12 = newValue}
  }
  public var hasDummy12: Bool {
    return _storage._dummy12 != nil
  }
  public mutating func clearDummy12() {
    return _storage._dummy12 = nil
  }

  var dummy13: Int32 {
    get {return _storage._dummy13 ?? 0}
    set {_uniqueStorage()._dummy13 = newValue}
  }
  public var hasDummy13: Bool {
    return _storage._dummy13 != nil
  }
  public mutating func clearDummy13() {
    return _storage._dummy13 = nil
  }

  var dummy14: Int32 {
    get {return _storage._dummy14 ?? 0}
    set {_uniqueStorage()._dummy14 = newValue}
  }
  public var hasDummy14: Bool {
    return _storage._dummy14 != nil
  }
  public mutating func clearDummy14() {
    return _storage._dummy14 = nil
  }

  var dummy15: Int32 {
    get {return _storage._dummy15 ?? 0}
    set {_uniqueStorage()._dummy15 = newValue}
  }
  public var hasDummy15: Bool {
    return _storage._dummy15 != nil
  }
  public mutating func clearDummy15() {
    return _storage._dummy15 = nil
  }

  var dummy16: Int32 {
    get {return _storage._dummy16 ?? 0}
    set {_uniqueStorage()._dummy16 = newValue}
  }
  public var hasDummy16: Bool {
    return _storage._dummy16 != nil
  }
  public mutating func clearDummy16() {
    return _storage._dummy16 = nil
  }

  var dummy17: Int32 {
    get {return _storage._dummy17 ?? 0}
    set {_uniqueStorage()._dummy17 = newValue}
  }
  public var hasDummy17: Bool {
    return _storage._dummy17 != nil
  }
  public mutating func clearDummy17() {
    return _storage._dummy17 = nil
  }

  var dummy18: Int32 {
    get {return _storage._dummy18 ?? 0}
    set {_uniqueStorage()._dummy18 = newValue}
  }
  public var hasDummy18: Bool {
    return _storage._dummy18 != nil
  }
  public mutating func clearDummy18() {
    return _storage._dummy18 = nil
  }

  var dummy19: Int32 {
    get {return _storage._dummy19 ?? 0}
    set {_uniqueStorage()._dummy19 = newValue}
  }
  public var hasDummy19: Bool {
    return _storage._dummy19 != nil
  }
  public mutating func clearDummy19() {
    return _storage._dummy19 = nil
  }

  var dummy20: Int32 {
    get {return _storage._dummy20 ?? 0}
    set {_uniqueStorage()._dummy20 = newValue}
  }
  public var hasDummy20: Bool {
    return _storage._dummy20 != nil
  }
  public mutating func clearDummy20() {
    return _storage._dummy20 = nil
  }

  var dummy21: Int32 {
    get {return _storage._dummy21 ?? 0}
    set {_uniqueStorage()._dummy21 = newValue}
  }
  public var hasDummy21: Bool {
    return _storage._dummy21 != nil
  }
  public mutating func clearDummy21() {
    return _storage._dummy21 = nil
  }

  var dummy22: Int32 {
    get {return _storage._dummy22 ?? 0}
    set {_uniqueStorage()._dummy22 = newValue}
  }
  public var hasDummy22: Bool {
    return _storage._dummy22 != nil
  }
  public mutating func clearDummy22() {
    return _storage._dummy22 = nil
  }

  var dummy23: Int32 {
    get {return _storage._dummy23 ?? 0}
    set {_uniqueStorage()._dummy23 = newValue}
  }
  public var hasDummy23: Bool {
    return _storage._dummy23 != nil
  }
  public mutating func clearDummy23() {
    return _storage._dummy23 = nil
  }

  var dummy24: Int32 {
    get {return _storage._dummy24 ?? 0}
    set {_uniqueStorage()._dummy24 = newValue}
  }
  public var hasDummy24: Bool {
    return _storage._dummy24 != nil
  }
  public mutating func clearDummy24() {
    return _storage._dummy24 = nil
  }

  var dummy25: Int32 {
    get {return _storage._dummy25 ?? 0}
    set {_uniqueStorage()._dummy25 = newValue}
  }
  public var hasDummy25: Bool {
    return _storage._dummy25 != nil
  }
  public mutating func clearDummy25() {
    return _storage._dummy25 = nil
  }

  var dummy26: Int32 {
    get {return _storage._dummy26 ?? 0}
    set {_uniqueStorage()._dummy26 = newValue}
  }
  public var hasDummy26: Bool {
    return _storage._dummy26 != nil
  }
  public mutating func clearDummy26() {
    return _storage._dummy26 = nil
  }

  var dummy27: Int32 {
    get {return _storage._dummy27 ?? 0}
    set {_uniqueStorage()._dummy27 = newValue}
  }
  public var hasDummy27: Bool {
    return _storage._dummy27 != nil
  }
  public mutating func clearDummy27() {
    return _storage._dummy27 = nil
  }

  var dummy28: Int32 {
    get {return _storage._dummy28 ?? 0}
    set {_uniqueStorage()._dummy28 = newValue}
  }
  public var hasDummy28: Bool {
    return _storage._dummy28 != nil
  }
  public mutating func clearDummy28() {
    return _storage._dummy28 = nil
  }

  var dummy29: Int32 {
    get {return _storage._dummy29 ?? 0}
    set {_uniqueStorage()._dummy29 = newValue}
  }
  public var hasDummy29: Bool {
    return _storage._dummy29 != nil
  }
  public mutating func clearDummy29() {
    return _storage._dummy29 = nil
  }

  var dummy30: Int32 {
    get {return _storage._dummy30 ?? 0}
    set {_uniqueStorage()._dummy30 = newValue}
  }
  public var hasDummy30: Bool {
    return _storage._dummy30 != nil
  }
  public mutating func clearDummy30() {
    return _storage._dummy30 = nil
  }

  var dummy31: Int32 {
    get {return _storage._dummy31 ?? 0}
    set {_uniqueStorage()._dummy31 = newValue}
  }
  public var hasDummy31: Bool {
    return _storage._dummy31 != nil
  }
  public mutating func clearDummy31() {
    return _storage._dummy31 = nil
  }

  var dummy32: Int32 {
    get {return _storage._dummy32 ?? 0}
    set {_uniqueStorage()._dummy32 = newValue}
  }
  public var hasDummy32: Bool {
    return _storage._dummy32 != nil
  }
  public mutating func clearDummy32() {
    return _storage._dummy32 = nil
  }

  var c: Int32 {
    get {return _storage._c ?? 0}
    set {_uniqueStorage()._c = newValue}
  }
  public var hasC: Bool {
    return _storage._c != nil
  }
  public mutating func clearC() {
    return _storage._c = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestRequired) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

struct ProtobufUnittest_TestRequiredForeign: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "ProtobufUnittest_TestRequiredForeign"}
  public var protoMessageName: String {return "TestRequiredForeign"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "optional_message", json: "optionalMessage", swift: "optionalMessage"),
    2: .unique(proto: "repeated_message", json: "repeatedMessage", swift: "repeatedMessage"),
    3: .same(proto: "dummy", swift: "dummy"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = ProtobufUnittest_TestRequiredForeign
    var unknown = SwiftProtobuf.UnknownStorage()
    var _optionalMessage: ProtobufUnittest_TestRequired? = nil
    var _repeatedMessage: [ProtobufUnittest_TestRequired] = []
    var _dummy: Int32? = nil

    init() {}

    func decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularMessageField(fieldType: ProtobufUnittest_TestRequired.self, value: &_optionalMessage)
      case 2: try setter.decodeRepeatedMessageField(fieldType: ProtobufUnittest_TestRequired.self, value: &_repeatedMessage)
      case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_dummy)
      default: break
      }
    }

    func traverse(visitor: inout SwiftProtobuf.Visitor) throws {
      if let v = _optionalMessage {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 1)
      }
      if !_repeatedMessage.isEmpty {
        try visitor.visitRepeatedMessageField(value: _repeatedMessage, protoFieldNumber: 2)
      }
      if let v = _dummy {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: v, protoFieldNumber: 3)
      }
      unknown.traverse(visitor: &visitor)
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _optionalMessage != other._optionalMessage {return false}
      if _repeatedMessage != other._repeatedMessage {return false}
      if _dummy != other._dummy {return false}
      if unknown != other.unknown {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone.unknown = unknown
      clone._optionalMessage = _optionalMessage
      clone._repeatedMessage = _repeatedMessage
      clone._dummy = _dummy
      return clone
    }
  }

  private var _storage = _StorageClass()

  public var unknown: SwiftProtobuf.UnknownStorage {
    get {return _storage.unknown}
    set {_storage.unknown = newValue}
  }

  var optionalMessage: ProtobufUnittest_TestRequired {
    get {return _storage._optionalMessage ?? ProtobufUnittest_TestRequired()}
    set {_uniqueStorage()._optionalMessage = newValue}
  }
  public var hasOptionalMessage: Bool {
    return _storage._optionalMessage != nil
  }
  public mutating func clearOptionalMessage() {
    return _storage._optionalMessage = nil
  }

  var repeatedMessage: [ProtobufUnittest_TestRequired] {
    get {return _storage._repeatedMessage}
    set {_uniqueStorage()._repeatedMessage = newValue}
  }

  var dummy: Int32 {
    get {return _storage._dummy ?? 0}
    set {_uniqueStorage()._dummy = newValue}
  }
  public var hasDummy: Bool {
    return _storage._dummy != nil
  }
  public mutating func clearDummy() {
    return _storage._dummy = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestRequiredForeign) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

///   Test that we can use NestedMessage from outside TestAllTypes.
struct ProtobufUnittest_TestForeignNested: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "ProtobufUnittest_TestForeignNested"}
  public var protoMessageName: String {return "TestForeignNested"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "foreign_nested", json: "foreignNested", swift: "foreignNested"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = ProtobufUnittest_TestForeignNested
    var unknown = SwiftProtobuf.UnknownStorage()
    var _foreignNested: ProtobufUnittest_TestAllTypes.NestedMessage? = nil

    init() {}

    func decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularMessageField(fieldType: ProtobufUnittest_TestAllTypes.NestedMessage.self, value: &_foreignNested)
      default: break
      }
    }

    func traverse(visitor: inout SwiftProtobuf.Visitor) throws {
      if let v = _foreignNested {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 1)
      }
      unknown.traverse(visitor: &visitor)
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _foreignNested != other._foreignNested {return false}
      if unknown != other.unknown {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone.unknown = unknown
      clone._foreignNested = _foreignNested
      return clone
    }
  }

  private var _storage = _StorageClass()

  public var unknown: SwiftProtobuf.UnknownStorage {
    get {return _storage.unknown}
    set {_storage.unknown = newValue}
  }

  var foreignNested: ProtobufUnittest_TestAllTypes.NestedMessage {
    get {return _storage._foreignNested ?? ProtobufUnittest_TestAllTypes.NestedMessage()}
    set {_uniqueStorage()._foreignNested = newValue}
  }
  public var hasForeignNested: Bool {
    return _storage._foreignNested != nil
  }
  public mutating func clearForeignNested() {
    return _storage._foreignNested = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestForeignNested) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

///   TestEmptyMessage is used to test unknown field support.
struct ProtobufUnittest_TestEmptyMessage: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "ProtobufUnittest_TestEmptyMessage"}
  public var protoMessageName: String {return "TestEmptyMessage"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public static let _protobuf_fieldNames = FieldNameMap()

  public var unknown = SwiftProtobuf.UnknownStorage()

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestEmptyMessage) -> Bool {
    if unknown != other.unknown {return false}
    return true
  }
}

///   Like above, but declare all field numbers as potential extensions.  No
///   actual extensions should ever be defined for this type.
struct ProtobufUnittest_TestEmptyMessageWithExtensions: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf.ExtensibleMessage, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "ProtobufUnittest_TestEmptyMessageWithExtensions"}
  public var protoMessageName: String {return "TestEmptyMessageWithExtensions"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public static let _protobuf_fieldNames = FieldNameMap()

  public var unknown = SwiftProtobuf.UnknownStorage()

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    if (1 <= protoFieldNumber && protoFieldNumber < 536870912) {
      try setter.decodeExtensionField(values: &extensionFieldValues, messageType: ProtobufUnittest_TestEmptyMessageWithExtensions.self, protoFieldNumber: protoFieldNumber)
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try extensionFieldValues.traverse(visitor: &visitor, start: 1, end: 536870912)
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestEmptyMessageWithExtensions) -> Bool {
    if unknown != other.unknown {return false}
    if extensionFieldValues != other.extensionFieldValues {return false}
    return true
  }

  private var extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()

  public mutating func setExtensionValue<F: SwiftProtobuf.ExtensionField>(ext: SwiftProtobuf.MessageExtension<F, ProtobufUnittest_TestEmptyMessageWithExtensions>, value: F.ValueType) {
    extensionFieldValues[ext.protoFieldNumber] = ext.set(value: value)
  }

  public mutating func clearExtensionValue<F: SwiftProtobuf.ExtensionField>(ext: SwiftProtobuf.MessageExtension<F, ProtobufUnittest_TestEmptyMessageWithExtensions>) {
    extensionFieldValues[ext.protoFieldNumber] = nil
  }

  public func getExtensionValue<F: SwiftProtobuf.ExtensionField>(ext: SwiftProtobuf.MessageExtension<F, ProtobufUnittest_TestEmptyMessageWithExtensions>) -> F.ValueType {
    if let fieldValue = extensionFieldValues[ext.protoFieldNumber] as? F {
      return fieldValue.value
    }
    return ext.defaultValue
  }

  public func hasExtensionValue<F: SwiftProtobuf.ExtensionField>(ext: SwiftProtobuf.MessageExtension<F, ProtobufUnittest_TestEmptyMessageWithExtensions>) -> Bool {
    return extensionFieldValues[ext.protoFieldNumber] is F
  }
  public func _protobuf_fieldNames(for number: Int) -> FieldNameMap.Names? {
    return ProtobufUnittest_TestEmptyMessageWithExtensions._protobuf_fieldNames.fieldNames(for: number) ?? extensionFieldValues.fieldNames(for: number)
  }
}

struct ProtobufUnittest_TestMultipleExtensionRanges: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf.ExtensibleMessage, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "ProtobufUnittest_TestMultipleExtensionRanges"}
  public var protoMessageName: String {return "TestMultipleExtensionRanges"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public static let _protobuf_fieldNames = FieldNameMap()

  public var unknown = SwiftProtobuf.UnknownStorage()

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    if (42 <= protoFieldNumber && protoFieldNumber < 43) || (4143 <= protoFieldNumber && protoFieldNumber < 4244) || (65536 <= protoFieldNumber && protoFieldNumber < 536870912) {
      try setter.decodeExtensionField(values: &extensionFieldValues, messageType: ProtobufUnittest_TestMultipleExtensionRanges.self, protoFieldNumber: protoFieldNumber)
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try extensionFieldValues.traverse(visitor: &visitor, start: 42, end: 43)
    try extensionFieldValues.traverse(visitor: &visitor, start: 4143, end: 4244)
    try extensionFieldValues.traverse(visitor: &visitor, start: 65536, end: 536870912)
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestMultipleExtensionRanges) -> Bool {
    if unknown != other.unknown {return false}
    if extensionFieldValues != other.extensionFieldValues {return false}
    return true
  }

  private var extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()

  public mutating func setExtensionValue<F: SwiftProtobuf.ExtensionField>(ext: SwiftProtobuf.MessageExtension<F, ProtobufUnittest_TestMultipleExtensionRanges>, value: F.ValueType) {
    extensionFieldValues[ext.protoFieldNumber] = ext.set(value: value)
  }

  public mutating func clearExtensionValue<F: SwiftProtobuf.ExtensionField>(ext: SwiftProtobuf.MessageExtension<F, ProtobufUnittest_TestMultipleExtensionRanges>) {
    extensionFieldValues[ext.protoFieldNumber] = nil
  }

  public func getExtensionValue<F: SwiftProtobuf.ExtensionField>(ext: SwiftProtobuf.MessageExtension<F, ProtobufUnittest_TestMultipleExtensionRanges>) -> F.ValueType {
    if let fieldValue = extensionFieldValues[ext.protoFieldNumber] as? F {
      return fieldValue.value
    }
    return ext.defaultValue
  }

  public func hasExtensionValue<F: SwiftProtobuf.ExtensionField>(ext: SwiftProtobuf.MessageExtension<F, ProtobufUnittest_TestMultipleExtensionRanges>) -> Bool {
    return extensionFieldValues[ext.protoFieldNumber] is F
  }
  public func _protobuf_fieldNames(for number: Int) -> FieldNameMap.Names? {
    return ProtobufUnittest_TestMultipleExtensionRanges._protobuf_fieldNames.fieldNames(for: number) ?? extensionFieldValues.fieldNames(for: number)
  }
}

///   Test that really large tag numbers don't break anything.
struct ProtobufUnittest_TestReallyLargeTagNumber: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "ProtobufUnittest_TestReallyLargeTagNumber"}
  public var protoMessageName: String {return "TestReallyLargeTagNumber"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "a", swift: "a"),
    268435455: .same(proto: "bb", swift: "bb"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  ///   The largest possible tag number is 2^28 - 1, since the wire format uses
  ///   three bits to communicate wire type.
  private var _a: Int32? = nil
  var a: Int32 {
    get {return _a ?? 0}
    set {_a = newValue}
  }
  public var hasA: Bool {
    return _a != nil
  }
  public mutating func clearA() {
    return _a = nil
  }

  private var _bb: Int32? = nil
  var bb: Int32 {
    get {return _bb ?? 0}
    set {_bb = newValue}
  }
  public var hasBb: Bool {
    return _bb != nil
  }
  public mutating func clearBb() {
    return _bb = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_a)
    case 268435455: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_bb)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    if let v = _a {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: v, protoFieldNumber: 1)
    }
    if let v = _bb {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: v, protoFieldNumber: 268435455)
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestReallyLargeTagNumber) -> Bool {
    if _a != other._a {return false}
    if _bb != other._bb {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

struct ProtobufUnittest_TestRecursiveMessage: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "ProtobufUnittest_TestRecursiveMessage"}
  public var protoMessageName: String {return "TestRecursiveMessage"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "a", swift: "a"),
    2: .same(proto: "i", swift: "i"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = ProtobufUnittest_TestRecursiveMessage
    var unknown = SwiftProtobuf.UnknownStorage()
    var _a: ProtobufUnittest_TestRecursiveMessage? = nil
    var _i: Int32? = nil

    init() {}

    func decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularMessageField(fieldType: ProtobufUnittest_TestRecursiveMessage.self, value: &_a)
      case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_i)
      default: break
      }
    }

    func traverse(visitor: inout SwiftProtobuf.Visitor) throws {
      if let v = _a {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 1)
      }
      if let v = _i {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: v, protoFieldNumber: 2)
      }
      unknown.traverse(visitor: &visitor)
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _a != other._a {return false}
      if _i != other._i {return false}
      if unknown != other.unknown {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone.unknown = unknown
      clone._a = _a
      clone._i = _i
      return clone
    }
  }

  private var _storage = _StorageClass()

  public var unknown: SwiftProtobuf.UnknownStorage {
    get {return _storage.unknown}
    set {_storage.unknown = newValue}
  }

  var a: ProtobufUnittest_TestRecursiveMessage {
    get {return _storage._a ?? ProtobufUnittest_TestRecursiveMessage()}
    set {_uniqueStorage()._a = newValue}
  }
  public var hasA: Bool {
    return _storage._a != nil
  }
  public mutating func clearA() {
    return _storage._a = nil
  }

  var i: Int32 {
    get {return _storage._i ?? 0}
    set {_uniqueStorage()._i = newValue}
  }
  public var hasI: Bool {
    return _storage._i != nil
  }
  public mutating func clearI() {
    return _storage._i = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestRecursiveMessage) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

///   Test that mutual recursion works.
struct ProtobufUnittest_TestMutualRecursionA: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "ProtobufUnittest_TestMutualRecursionA"}
  public var protoMessageName: String {return "TestMutualRecursionA"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "bb", swift: "bb"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = ProtobufUnittest_TestMutualRecursionA
    var unknown = SwiftProtobuf.UnknownStorage()
    var _bb: ProtobufUnittest_TestMutualRecursionB? = nil

    init() {}

    func decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularMessageField(fieldType: ProtobufUnittest_TestMutualRecursionB.self, value: &_bb)
      default: break
      }
    }

    func traverse(visitor: inout SwiftProtobuf.Visitor) throws {
      if let v = _bb {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 1)
      }
      unknown.traverse(visitor: &visitor)
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _bb != other._bb {return false}
      if unknown != other.unknown {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone.unknown = unknown
      clone._bb = _bb
      return clone
    }
  }

  private var _storage = _StorageClass()

  public var unknown: SwiftProtobuf.UnknownStorage {
    get {return _storage.unknown}
    set {_storage.unknown = newValue}
  }

  var bb: ProtobufUnittest_TestMutualRecursionB {
    get {return _storage._bb ?? ProtobufUnittest_TestMutualRecursionB()}
    set {_uniqueStorage()._bb = newValue}
  }
  public var hasBb: Bool {
    return _storage._bb != nil
  }
  public mutating func clearBb() {
    return _storage._bb = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestMutualRecursionA) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

struct ProtobufUnittest_TestMutualRecursionB: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "ProtobufUnittest_TestMutualRecursionB"}
  public var protoMessageName: String {return "TestMutualRecursionB"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "a", swift: "a"),
    2: .unique(proto: "optional_int32", json: "optionalInt32", swift: "optionalInt32"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = ProtobufUnittest_TestMutualRecursionB
    var unknown = SwiftProtobuf.UnknownStorage()
    var _a: ProtobufUnittest_TestMutualRecursionA? = nil
    var _optionalInt32: Int32? = nil

    init() {}

    func decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularMessageField(fieldType: ProtobufUnittest_TestMutualRecursionA.self, value: &_a)
      case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_optionalInt32)
      default: break
      }
    }

    func traverse(visitor: inout SwiftProtobuf.Visitor) throws {
      if let v = _a {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 1)
      }
      if let v = _optionalInt32 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: v, protoFieldNumber: 2)
      }
      unknown.traverse(visitor: &visitor)
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _a != other._a {return false}
      if _optionalInt32 != other._optionalInt32 {return false}
      if unknown != other.unknown {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone.unknown = unknown
      clone._a = _a
      clone._optionalInt32 = _optionalInt32
      return clone
    }
  }

  private var _storage = _StorageClass()

  public var unknown: SwiftProtobuf.UnknownStorage {
    get {return _storage.unknown}
    set {_storage.unknown = newValue}
  }

  var a: ProtobufUnittest_TestMutualRecursionA {
    get {return _storage._a ?? ProtobufUnittest_TestMutualRecursionA()}
    set {_uniqueStorage()._a = newValue}
  }
  public var hasA: Bool {
    return _storage._a != nil
  }
  public mutating func clearA() {
    return _storage._a = nil
  }

  var optionalInt32: Int32 {
    get {return _storage._optionalInt32 ?? 0}
    set {_uniqueStorage()._optionalInt32 = newValue}
  }
  public var hasOptionalInt32: Bool {
    return _storage._optionalInt32 != nil
  }
  public mutating func clearOptionalInt32() {
    return _storage._optionalInt32 = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestMutualRecursionB) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

///   Test that groups have disjoint field numbers from their siblings and
///   parents.  This is NOT possible in proto1; only google.protobuf.  When attempting
///   to compile with proto1, this will emit an error; so we only include it
///   in protobuf_unittest_proto.
struct ProtobufUnittest_TestDupFieldNumber: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "ProtobufUnittest_TestDupFieldNumber"}
  public var protoMessageName: String {return "TestDupFieldNumber"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "a", swift: "a"),
    2: .same(proto: "foo", swift: "foo"),
    3: .same(proto: "bar", swift: "bar"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = ProtobufUnittest_TestDupFieldNumber
    var unknown = SwiftProtobuf.UnknownStorage()
    var _a: Int32? = nil
    var _foo: ProtobufUnittest_TestDupFieldNumber.Foo? = nil
    var _bar: ProtobufUnittest_TestDupFieldNumber.Bar? = nil

    init() {}

    func decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_a)
      case 2: try setter.decodeSingularGroupField(fieldType: ProtobufUnittest_TestDupFieldNumber.Foo.self, value: &_foo)
      case 3: try setter.decodeSingularGroupField(fieldType: ProtobufUnittest_TestDupFieldNumber.Bar.self, value: &_bar)
      default: break
      }
    }

    func traverse(visitor: inout SwiftProtobuf.Visitor) throws {
      if let v = _a {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: v, protoFieldNumber: 1)
      }
      if let v = _foo {
        try visitor.visitSingularGroupField(value: v, protoFieldNumber: 2)
      }
      if let v = _bar {
        try visitor.visitSingularGroupField(value: v, protoFieldNumber: 3)
      }
      unknown.traverse(visitor: &visitor)
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _a != other._a {return false}
      if _foo != other._foo {return false}
      if _bar != other._bar {return false}
      if unknown != other.unknown {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone.unknown = unknown
      clone._a = _a
      clone._foo = _foo
      clone._bar = _bar
      return clone
    }
  }

  private var _storage = _StorageClass()

  public var unknown: SwiftProtobuf.UnknownStorage {
    get {return _storage.unknown}
    set {_storage.unknown = newValue}
  }

  struct Foo: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
    public var swiftClassName: String {return "ProtobufUnittest_TestDupFieldNumber.Foo"}
    public var protoMessageName: String {return "Foo"}
    public var protoPackageName: String {return "protobuf_unittest"}
    public static let _protobuf_fieldNames: FieldNameMap = [
      1: .same(proto: "a", swift: "a"),
    ]

    public var unknown = SwiftProtobuf.UnknownStorage()

    private var _a: Int32? = nil
    var a: Int32 {
      get {return _a ?? 0}
      set {_a = newValue}
    }
    public var hasA: Bool {
      return _a != nil
    }
    public mutating func clearA() {
      return _a = nil
    }

    init() {}

    public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_a)
      default: break
      }
    }

    public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
      if let v = _a {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: v, protoFieldNumber: 1)
      }
      unknown.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestDupFieldNumber.Foo) -> Bool {
      if _a != other._a {return false}
      if unknown != other.unknown {return false}
      return true
    }
  }

  struct Bar: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
    public var swiftClassName: String {return "ProtobufUnittest_TestDupFieldNumber.Bar"}
    public var protoMessageName: String {return "Bar"}
    public var protoPackageName: String {return "protobuf_unittest"}
    public static let _protobuf_fieldNames: FieldNameMap = [
      1: .same(proto: "a", swift: "a"),
    ]

    public var unknown = SwiftProtobuf.UnknownStorage()

    private var _a: Int32? = nil
    var a: Int32 {
      get {return _a ?? 0}
      set {_a = newValue}
    }
    public var hasA: Bool {
      return _a != nil
    }
    public mutating func clearA() {
      return _a = nil
    }

    init() {}

    public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_a)
      default: break
      }
    }

    public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
      if let v = _a {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: v, protoFieldNumber: 1)
      }
      unknown.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestDupFieldNumber.Bar) -> Bool {
      if _a != other._a {return false}
      if unknown != other.unknown {return false}
      return true
    }
  }

  ///   NO_PROTO1
  var a: Int32 {
    get {return _storage._a ?? 0}
    set {_uniqueStorage()._a = newValue}
  }
  public var hasA: Bool {
    return _storage._a != nil
  }
  public mutating func clearA() {
    return _storage._a = nil
  }

  var foo: ProtobufUnittest_TestDupFieldNumber.Foo {
    get {return _storage._foo ?? ProtobufUnittest_TestDupFieldNumber.Foo()}
    set {_uniqueStorage()._foo = newValue}
  }
  public var hasFoo: Bool {
    return _storage._foo != nil
  }
  public mutating func clearFoo() {
    return _storage._foo = nil
  }

  var bar: ProtobufUnittest_TestDupFieldNumber.Bar {
    get {return _storage._bar ?? ProtobufUnittest_TestDupFieldNumber.Bar()}
    set {_uniqueStorage()._bar = newValue}
  }
  public var hasBar: Bool {
    return _storage._bar != nil
  }
  public mutating func clearBar() {
    return _storage._bar = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestDupFieldNumber) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

///   Additional messages for testing lazy fields.
struct ProtobufUnittest_TestEagerMessage: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "ProtobufUnittest_TestEagerMessage"}
  public var protoMessageName: String {return "TestEagerMessage"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "sub_message", json: "subMessage", swift: "subMessage"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = ProtobufUnittest_TestEagerMessage
    var unknown = SwiftProtobuf.UnknownStorage()
    var _subMessage: ProtobufUnittest_TestAllTypes? = nil

    init() {}

    func decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularMessageField(fieldType: ProtobufUnittest_TestAllTypes.self, value: &_subMessage)
      default: break
      }
    }

    func traverse(visitor: inout SwiftProtobuf.Visitor) throws {
      if let v = _subMessage {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 1)
      }
      unknown.traverse(visitor: &visitor)
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _subMessage != other._subMessage {return false}
      if unknown != other.unknown {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone.unknown = unknown
      clone._subMessage = _subMessage
      return clone
    }
  }

  private var _storage = _StorageClass()

  public var unknown: SwiftProtobuf.UnknownStorage {
    get {return _storage.unknown}
    set {_storage.unknown = newValue}
  }

  var subMessage: ProtobufUnittest_TestAllTypes {
    get {return _storage._subMessage ?? ProtobufUnittest_TestAllTypes()}
    set {_uniqueStorage()._subMessage = newValue}
  }
  public var hasSubMessage: Bool {
    return _storage._subMessage != nil
  }
  public mutating func clearSubMessage() {
    return _storage._subMessage = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestEagerMessage) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

struct ProtobufUnittest_TestLazyMessage: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "ProtobufUnittest_TestLazyMessage"}
  public var protoMessageName: String {return "TestLazyMessage"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "sub_message", json: "subMessage", swift: "subMessage"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = ProtobufUnittest_TestLazyMessage
    var unknown = SwiftProtobuf.UnknownStorage()
    var _subMessage: ProtobufUnittest_TestAllTypes? = nil

    init() {}

    func decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularMessageField(fieldType: ProtobufUnittest_TestAllTypes.self, value: &_subMessage)
      default: break
      }
    }

    func traverse(visitor: inout SwiftProtobuf.Visitor) throws {
      if let v = _subMessage {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 1)
      }
      unknown.traverse(visitor: &visitor)
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _subMessage != other._subMessage {return false}
      if unknown != other.unknown {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone.unknown = unknown
      clone._subMessage = _subMessage
      return clone
    }
  }

  private var _storage = _StorageClass()

  public var unknown: SwiftProtobuf.UnknownStorage {
    get {return _storage.unknown}
    set {_storage.unknown = newValue}
  }

  var subMessage: ProtobufUnittest_TestAllTypes {
    get {return _storage._subMessage ?? ProtobufUnittest_TestAllTypes()}
    set {_uniqueStorage()._subMessage = newValue}
  }
  public var hasSubMessage: Bool {
    return _storage._subMessage != nil
  }
  public mutating func clearSubMessage() {
    return _storage._subMessage = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestLazyMessage) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

///   Needed for a Python test.
struct ProtobufUnittest_TestNestedMessageHasBits: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "ProtobufUnittest_TestNestedMessageHasBits"}
  public var protoMessageName: String {return "TestNestedMessageHasBits"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "optional_nested_message", json: "optionalNestedMessage", swift: "optionalNestedMessage"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = ProtobufUnittest_TestNestedMessageHasBits
    var unknown = SwiftProtobuf.UnknownStorage()
    var _optionalNestedMessage: ProtobufUnittest_TestNestedMessageHasBits.NestedMessage? = nil

    init() {}

    func decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularMessageField(fieldType: ProtobufUnittest_TestNestedMessageHasBits.NestedMessage.self, value: &_optionalNestedMessage)
      default: break
      }
    }

    func traverse(visitor: inout SwiftProtobuf.Visitor) throws {
      if let v = _optionalNestedMessage {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 1)
      }
      unknown.traverse(visitor: &visitor)
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _optionalNestedMessage != other._optionalNestedMessage {return false}
      if unknown != other.unknown {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone.unknown = unknown
      clone._optionalNestedMessage = _optionalNestedMessage
      return clone
    }
  }

  private var _storage = _StorageClass()

  public var unknown: SwiftProtobuf.UnknownStorage {
    get {return _storage.unknown}
    set {_storage.unknown = newValue}
  }

  struct NestedMessage: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
    public var swiftClassName: String {return "ProtobufUnittest_TestNestedMessageHasBits.NestedMessage"}
    public var protoMessageName: String {return "NestedMessage"}
    public var protoPackageName: String {return "protobuf_unittest"}
    public static let _protobuf_fieldNames: FieldNameMap = [
      1: .unique(proto: "nestedmessage_repeated_int32", json: "nestedmessageRepeatedInt32", swift: "nestedmessageRepeatedInt32"),
      2: .unique(proto: "nestedmessage_repeated_foreignmessage", json: "nestedmessageRepeatedForeignmessage", swift: "nestedmessageRepeatedForeignmessage"),
    ]

    public var unknown = SwiftProtobuf.UnknownStorage()

    var nestedmessageRepeatedInt32: [Int32] = []

    var nestedmessageRepeatedForeignmessage: [ProtobufUnittest_ForeignMessage] = []

    init() {}

    public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &nestedmessageRepeatedInt32)
      case 2: try setter.decodeRepeatedMessageField(fieldType: ProtobufUnittest_ForeignMessage.self, value: &nestedmessageRepeatedForeignmessage)
      default: break
      }
    }

    public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
      if !nestedmessageRepeatedInt32.isEmpty {
        try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: nestedmessageRepeatedInt32, protoFieldNumber: 1)
      }
      if !nestedmessageRepeatedForeignmessage.isEmpty {
        try visitor.visitRepeatedMessageField(value: nestedmessageRepeatedForeignmessage, protoFieldNumber: 2)
      }
      unknown.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestNestedMessageHasBits.NestedMessage) -> Bool {
      if nestedmessageRepeatedInt32 != other.nestedmessageRepeatedInt32 {return false}
      if nestedmessageRepeatedForeignmessage != other.nestedmessageRepeatedForeignmessage {return false}
      if unknown != other.unknown {return false}
      return true
    }
  }

  var optionalNestedMessage: ProtobufUnittest_TestNestedMessageHasBits.NestedMessage {
    get {return _storage._optionalNestedMessage ?? ProtobufUnittest_TestNestedMessageHasBits.NestedMessage()}
    set {_uniqueStorage()._optionalNestedMessage = newValue}
  }
  public var hasOptionalNestedMessage: Bool {
    return _storage._optionalNestedMessage != nil
  }
  public mutating func clearOptionalNestedMessage() {
    return _storage._optionalNestedMessage = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestNestedMessageHasBits) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

///   Test message with CamelCase field names.  This violates Protocol Buffer
///   standard style.
struct ProtobufUnittest_TestCamelCaseFieldNames: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "ProtobufUnittest_TestCamelCaseFieldNames"}
  public var protoMessageName: String {return "TestCamelCaseFieldNames"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "PrimitiveField", swift: "primitiveField"),
    2: .same(proto: "StringField", swift: "stringField"),
    3: .same(proto: "EnumField", swift: "enumField"),
    4: .same(proto: "MessageField", swift: "messageField"),
    5: .same(proto: "StringPieceField", swift: "stringPieceField"),
    6: .same(proto: "CordField", swift: "cordField"),
    7: .same(proto: "RepeatedPrimitiveField", swift: "repeatedPrimitiveField"),
    8: .same(proto: "RepeatedStringField", swift: "repeatedStringField"),
    9: .same(proto: "RepeatedEnumField", swift: "repeatedEnumField"),
    10: .same(proto: "RepeatedMessageField", swift: "repeatedMessageField"),
    11: .same(proto: "RepeatedStringPieceField", swift: "repeatedStringPieceField"),
    12: .same(proto: "RepeatedCordField", swift: "repeatedCordField"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = ProtobufUnittest_TestCamelCaseFieldNames
    var unknown = SwiftProtobuf.UnknownStorage()
    var _primitiveField: Int32? = nil
    var _stringField: String? = nil
    var _enumField: ProtobufUnittest_ForeignEnum? = nil
    var _messageField: ProtobufUnittest_ForeignMessage? = nil
    var _stringPieceField: String? = nil
    var _cordField: String? = nil
    var _repeatedPrimitiveField: [Int32] = []
    var _repeatedStringField: [String] = []
    var _repeatedEnumField: [ProtobufUnittest_ForeignEnum] = []
    var _repeatedMessageField: [ProtobufUnittest_ForeignMessage] = []
    var _repeatedStringPieceField: [String] = []
    var _repeatedCordField: [String] = []

    init() {}

    func decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_primitiveField)
      case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_stringField)
      case 3: try setter.decodeSingularField(fieldType: ProtobufUnittest_ForeignEnum.self, value: &_enumField)
      case 4: try setter.decodeSingularMessageField(fieldType: ProtobufUnittest_ForeignMessage.self, value: &_messageField)
      case 5: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_stringPieceField)
      case 6: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_cordField)
      case 7: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_repeatedPrimitiveField)
      case 8: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_repeatedStringField)
      case 9: try setter.decodeRepeatedField(fieldType: ProtobufUnittest_ForeignEnum.self, value: &_repeatedEnumField)
      case 10: try setter.decodeRepeatedMessageField(fieldType: ProtobufUnittest_ForeignMessage.self, value: &_repeatedMessageField)
      case 11: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_repeatedStringPieceField)
      case 12: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_repeatedCordField)
      default: break
      }
    }

    func traverse(visitor: inout SwiftProtobuf.Visitor) throws {
      if let v = _primitiveField {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: v, protoFieldNumber: 1)
      }
      if let v = _stringField {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: v, protoFieldNumber: 2)
      }
      if let v = _enumField {
        try visitor.visitSingularField(fieldType: ProtobufUnittest_ForeignEnum.self, value: v, protoFieldNumber: 3)
      }
      if let v = _messageField {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 4)
      }
      if let v = _stringPieceField {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: v, protoFieldNumber: 5)
      }
      if let v = _cordField {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: v, protoFieldNumber: 6)
      }
      if !_repeatedPrimitiveField.isEmpty {
        try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: _repeatedPrimitiveField, protoFieldNumber: 7)
      }
      if !_repeatedStringField.isEmpty {
        try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufString.self, value: _repeatedStringField, protoFieldNumber: 8)
      }
      if !_repeatedEnumField.isEmpty {
        try visitor.visitRepeatedField(fieldType: ProtobufUnittest_ForeignEnum.self, value: _repeatedEnumField, protoFieldNumber: 9)
      }
      if !_repeatedMessageField.isEmpty {
        try visitor.visitRepeatedMessageField(value: _repeatedMessageField, protoFieldNumber: 10)
      }
      if !_repeatedStringPieceField.isEmpty {
        try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufString.self, value: _repeatedStringPieceField, protoFieldNumber: 11)
      }
      if !_repeatedCordField.isEmpty {
        try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufString.self, value: _repeatedCordField, protoFieldNumber: 12)
      }
      unknown.traverse(visitor: &visitor)
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _primitiveField != other._primitiveField {return false}
      if _stringField != other._stringField {return false}
      if _enumField != other._enumField {return false}
      if _messageField != other._messageField {return false}
      if _stringPieceField != other._stringPieceField {return false}
      if _cordField != other._cordField {return false}
      if _repeatedPrimitiveField != other._repeatedPrimitiveField {return false}
      if _repeatedStringField != other._repeatedStringField {return false}
      if _repeatedEnumField != other._repeatedEnumField {return false}
      if _repeatedMessageField != other._repeatedMessageField {return false}
      if _repeatedStringPieceField != other._repeatedStringPieceField {return false}
      if _repeatedCordField != other._repeatedCordField {return false}
      if unknown != other.unknown {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone.unknown = unknown
      clone._primitiveField = _primitiveField
      clone._stringField = _stringField
      clone._enumField = _enumField
      clone._messageField = _messageField
      clone._stringPieceField = _stringPieceField
      clone._cordField = _cordField
      clone._repeatedPrimitiveField = _repeatedPrimitiveField
      clone._repeatedStringField = _repeatedStringField
      clone._repeatedEnumField = _repeatedEnumField
      clone._repeatedMessageField = _repeatedMessageField
      clone._repeatedStringPieceField = _repeatedStringPieceField
      clone._repeatedCordField = _repeatedCordField
      return clone
    }
  }

  private var _storage = _StorageClass()

  public var unknown: SwiftProtobuf.UnknownStorage {
    get {return _storage.unknown}
    set {_storage.unknown = newValue}
  }

  var primitiveField: Int32 {
    get {return _storage._primitiveField ?? 0}
    set {_uniqueStorage()._primitiveField = newValue}
  }
  public var hasPrimitiveField: Bool {
    return _storage._primitiveField != nil
  }
  public mutating func clearPrimitiveField() {
    return _storage._primitiveField = nil
  }

  var stringField: String {
    get {return _storage._stringField ?? ""}
    set {_uniqueStorage()._stringField = newValue}
  }
  public var hasStringField: Bool {
    return _storage._stringField != nil
  }
  public mutating func clearStringField() {
    return _storage._stringField = nil
  }

  var enumField: ProtobufUnittest_ForeignEnum {
    get {return _storage._enumField ?? ProtobufUnittest_ForeignEnum.foreignFoo}
    set {_uniqueStorage()._enumField = newValue}
  }
  public var hasEnumField: Bool {
    return _storage._enumField != nil
  }
  public mutating func clearEnumField() {
    return _storage._enumField = nil
  }

  var messageField: ProtobufUnittest_ForeignMessage {
    get {return _storage._messageField ?? ProtobufUnittest_ForeignMessage()}
    set {_uniqueStorage()._messageField = newValue}
  }
  public var hasMessageField: Bool {
    return _storage._messageField != nil
  }
  public mutating func clearMessageField() {
    return _storage._messageField = nil
  }

  var stringPieceField: String {
    get {return _storage._stringPieceField ?? ""}
    set {_uniqueStorage()._stringPieceField = newValue}
  }
  public var hasStringPieceField: Bool {
    return _storage._stringPieceField != nil
  }
  public mutating func clearStringPieceField() {
    return _storage._stringPieceField = nil
  }

  var cordField: String {
    get {return _storage._cordField ?? ""}
    set {_uniqueStorage()._cordField = newValue}
  }
  public var hasCordField: Bool {
    return _storage._cordField != nil
  }
  public mutating func clearCordField() {
    return _storage._cordField = nil
  }

  var repeatedPrimitiveField: [Int32] {
    get {return _storage._repeatedPrimitiveField}
    set {_uniqueStorage()._repeatedPrimitiveField = newValue}
  }

  var repeatedStringField: [String] {
    get {return _storage._repeatedStringField}
    set {_uniqueStorage()._repeatedStringField = newValue}
  }

  var repeatedEnumField: [ProtobufUnittest_ForeignEnum] {
    get {return _storage._repeatedEnumField}
    set {_uniqueStorage()._repeatedEnumField = newValue}
  }

  var repeatedMessageField: [ProtobufUnittest_ForeignMessage] {
    get {return _storage._repeatedMessageField}
    set {_uniqueStorage()._repeatedMessageField = newValue}
  }

  var repeatedStringPieceField: [String] {
    get {return _storage._repeatedStringPieceField}
    set {_uniqueStorage()._repeatedStringPieceField = newValue}
  }

  var repeatedCordField: [String] {
    get {return _storage._repeatedCordField}
    set {_uniqueStorage()._repeatedCordField = newValue}
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestCamelCaseFieldNames) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

///   We list fields out of order, to ensure that we're using field number and not
///   field index to determine serialization order.
struct ProtobufUnittest_TestFieldOrderings: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf.ExtensibleMessage, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "ProtobufUnittest_TestFieldOrderings"}
  public var protoMessageName: String {return "TestFieldOrderings"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    11: .unique(proto: "my_string", json: "myString", swift: "myString"),
    1: .unique(proto: "my_int", json: "myInt", swift: "myInt"),
    101: .unique(proto: "my_float", json: "myFloat", swift: "myFloat"),
    200: .unique(proto: "optional_nested_message", json: "optionalNestedMessage", swift: "optionalNestedMessage"),
  ]

  private class _StorageClass: SwiftProtobuf.ExtensibleMessageStorage {
    typealias ExtendedMessage = ProtobufUnittest_TestFieldOrderings
    var extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
    var unknown = SwiftProtobuf.UnknownStorage()
    var _myString: String? = nil
    var _myInt: Int64? = nil
    var _myFloat: Float? = nil
    var _optionalNestedMessage: ProtobufUnittest_TestFieldOrderings.NestedMessage? = nil

    init() {}

    func decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 11: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_myString)
      case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: &_myInt)
      case 101: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufFloat.self, value: &_myFloat)
      case 200: try setter.decodeSingularMessageField(fieldType: ProtobufUnittest_TestFieldOrderings.NestedMessage.self, value: &_optionalNestedMessage)
      default: if (2 <= protoFieldNumber && protoFieldNumber < 11) || (12 <= protoFieldNumber && protoFieldNumber < 101) {
          try setter.decodeExtensionField(values: &extensionFieldValues, messageType: ProtobufUnittest_TestFieldOrderings.self, protoFieldNumber: protoFieldNumber)
        }
      }
    }

    func traverse(visitor: inout SwiftProtobuf.Visitor) throws {
      if let v = _myInt {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: v, protoFieldNumber: 1)
      }
      try extensionFieldValues.traverse(visitor: &visitor, start: 2, end: 11)
      if let v = _myString {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: v, protoFieldNumber: 11)
      }
      try extensionFieldValues.traverse(visitor: &visitor, start: 12, end: 101)
      if let v = _myFloat {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufFloat.self, value: v, protoFieldNumber: 101)
      }
      if let v = _optionalNestedMessage {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 200)
      }
      unknown.traverse(visitor: &visitor)
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _myString != other._myString {return false}
      if _myInt != other._myInt {return false}
      if _myFloat != other._myFloat {return false}
      if _optionalNestedMessage != other._optionalNestedMessage {return false}
      if unknown != other.unknown {return false}
      if extensionFieldValues != other.extensionFieldValues {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone.unknown = unknown
      clone.extensionFieldValues = extensionFieldValues
      clone._myString = _myString
      clone._myInt = _myInt
      clone._myFloat = _myFloat
      clone._optionalNestedMessage = _optionalNestedMessage
      return clone
    }
  }

  private var _storage = _StorageClass()

  public var unknown: SwiftProtobuf.UnknownStorage {
    get {return _storage.unknown}
    set {_storage.unknown = newValue}
  }

  struct NestedMessage: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
    public var swiftClassName: String {return "ProtobufUnittest_TestFieldOrderings.NestedMessage"}
    public var protoMessageName: String {return "NestedMessage"}
    public var protoPackageName: String {return "protobuf_unittest"}
    public static let _protobuf_fieldNames: FieldNameMap = [
      2: .same(proto: "oo", swift: "oo"),
      1: .same(proto: "bb", swift: "bb"),
    ]

    public var unknown = SwiftProtobuf.UnknownStorage()

    private var _oo: Int64? = nil
    var oo: Int64 {
      get {return _oo ?? 0}
      set {_oo = newValue}
    }
    public var hasOo: Bool {
      return _oo != nil
    }
    public mutating func clearOo() {
      return _oo = nil
    }

    ///   The field name "b" fails to compile in proto1 because it conflicts with
    ///   a local variable named "b" in one of the generated methods.  Doh.
    ///   This file needs to compile in proto1 to test backwards-compatibility.
    private var _bb: Int32? = nil
    var bb: Int32 {
      get {return _bb ?? 0}
      set {_bb = newValue}
    }
    public var hasBb: Bool {
      return _bb != nil
    }
    public mutating func clearBb() {
      return _bb = nil
    }

    init() {}

    public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: &_oo)
      case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_bb)
      default: break
      }
    }

    public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
      if let v = _bb {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: v, protoFieldNumber: 1)
      }
      if let v = _oo {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: v, protoFieldNumber: 2)
      }
      unknown.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestFieldOrderings.NestedMessage) -> Bool {
      if _oo != other._oo {return false}
      if _bb != other._bb {return false}
      if unknown != other.unknown {return false}
      return true
    }
  }

  var myString: String {
    get {return _storage._myString ?? ""}
    set {_uniqueStorage()._myString = newValue}
  }
  public var hasMyString: Bool {
    return _storage._myString != nil
  }
  public mutating func clearMyString() {
    return _storage._myString = nil
  }

  var myInt: Int64 {
    get {return _storage._myInt ?? 0}
    set {_uniqueStorage()._myInt = newValue}
  }
  public var hasMyInt: Bool {
    return _storage._myInt != nil
  }
  public mutating func clearMyInt() {
    return _storage._myInt = nil
  }

  var myFloat: Float {
    get {return _storage._myFloat ?? 0}
    set {_uniqueStorage()._myFloat = newValue}
  }
  public var hasMyFloat: Bool {
    return _storage._myFloat != nil
  }
  public mutating func clearMyFloat() {
    return _storage._myFloat = nil
  }

  var optionalNestedMessage: ProtobufUnittest_TestFieldOrderings.NestedMessage {
    get {return _storage._optionalNestedMessage ?? ProtobufUnittest_TestFieldOrderings.NestedMessage()}
    set {_uniqueStorage()._optionalNestedMessage = newValue}
  }
  public var hasOptionalNestedMessage: Bool {
    return _storage._optionalNestedMessage != nil
  }
  public mutating func clearOptionalNestedMessage() {
    return _storage._optionalNestedMessage = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestFieldOrderings) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }

  public mutating func setExtensionValue<F: SwiftProtobuf.ExtensionField>(ext: SwiftProtobuf.MessageExtension<F, ProtobufUnittest_TestFieldOrderings>, value: F.ValueType) {
    return _uniqueStorage().setExtensionValue(ext: ext, value: value)
  }

  public mutating func clearExtensionValue<F: SwiftProtobuf.ExtensionField>(ext: SwiftProtobuf.MessageExtension<F, ProtobufUnittest_TestFieldOrderings>) {
    return _storage.clearExtensionValue(ext: ext)
  }

  public func getExtensionValue<F: SwiftProtobuf.ExtensionField>(ext: SwiftProtobuf.MessageExtension<F, ProtobufUnittest_TestFieldOrderings>) -> F.ValueType {
    return _storage.getExtensionValue(ext: ext)
  }

  public func hasExtensionValue<F: SwiftProtobuf.ExtensionField>(ext: SwiftProtobuf.MessageExtension<F, ProtobufUnittest_TestFieldOrderings>) -> Bool {
    return _storage.hasExtensionValue(ext: ext)
  }
  public func _protobuf_fieldNames(for number: Int) -> FieldNameMap.Names? {
    return ProtobufUnittest_TestFieldOrderings._protobuf_fieldNames.fieldNames(for: number) ?? _storage.extensionFieldValues.fieldNames(for: number)
  }
}

struct ProtobufUnittest_TestExtremeDefaultValues: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "ProtobufUnittest_TestExtremeDefaultValues"}
  public var protoMessageName: String {return "TestExtremeDefaultValues"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "escaped_bytes", json: "escapedBytes", swift: "escapedBytes"),
    2: .unique(proto: "large_uint32", json: "largeUint32", swift: "largeUint32"),
    3: .unique(proto: "large_uint64", json: "largeUint64", swift: "largeUint64"),
    4: .unique(proto: "small_int32", json: "smallInt32", swift: "smallInt32"),
    5: .unique(proto: "small_int64", json: "smallInt64", swift: "smallInt64"),
    21: .unique(proto: "really_small_int32", json: "reallySmallInt32", swift: "reallySmallInt32"),
    22: .unique(proto: "really_small_int64", json: "reallySmallInt64", swift: "reallySmallInt64"),
    6: .unique(proto: "utf8_string", json: "utf8String", swift: "utf8String"),
    7: .unique(proto: "zero_float", json: "zeroFloat", swift: "zeroFloat"),
    8: .unique(proto: "one_float", json: "oneFloat", swift: "oneFloat"),
    9: .unique(proto: "small_float", json: "smallFloat", swift: "smallFloat"),
    10: .unique(proto: "negative_one_float", json: "negativeOneFloat", swift: "negativeOneFloat"),
    11: .unique(proto: "negative_float", json: "negativeFloat", swift: "negativeFloat"),
    12: .unique(proto: "large_float", json: "largeFloat", swift: "largeFloat"),
    13: .unique(proto: "small_negative_float", json: "smallNegativeFloat", swift: "smallNegativeFloat"),
    14: .unique(proto: "inf_double", json: "infDouble", swift: "infDouble"),
    15: .unique(proto: "neg_inf_double", json: "negInfDouble", swift: "negInfDouble"),
    16: .unique(proto: "nan_double", json: "nanDouble", swift: "nanDouble"),
    17: .unique(proto: "inf_float", json: "infFloat", swift: "infFloat"),
    18: .unique(proto: "neg_inf_float", json: "negInfFloat", swift: "negInfFloat"),
    19: .unique(proto: "nan_float", json: "nanFloat", swift: "nanFloat"),
    20: .unique(proto: "cpp_trigraph", json: "cppTrigraph", swift: "cppTrigraph"),
    23: .unique(proto: "string_with_zero", json: "stringWithZero", swift: "stringWithZero"),
    24: .unique(proto: "bytes_with_zero", json: "bytesWithZero", swift: "bytesWithZero"),
    25: .unique(proto: "string_piece_with_zero", json: "stringPieceWithZero", swift: "stringPieceWithZero"),
    26: .unique(proto: "cord_with_zero", json: "cordWithZero", swift: "cordWithZero"),
    27: .unique(proto: "replacement_string", json: "replacementString", swift: "replacementString"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = ProtobufUnittest_TestExtremeDefaultValues
    var unknown = SwiftProtobuf.UnknownStorage()
    var _escapedBytes: Data? = nil
    var _largeUint32: UInt32? = nil
    var _largeUint64: UInt64? = nil
    var _smallInt32: Int32? = nil
    var _smallInt64: Int64? = nil
    var _reallySmallInt32: Int32? = nil
    var _reallySmallInt64: Int64? = nil
    var _utf8String: String? = nil
    var _zeroFloat: Float? = nil
    var _oneFloat: Float? = nil
    var _smallFloat: Float? = nil
    var _negativeOneFloat: Float? = nil
    var _negativeFloat: Float? = nil
    var _largeFloat: Float? = nil
    var _smallNegativeFloat: Float? = nil
    var _infDouble: Double? = nil
    var _negInfDouble: Double? = nil
    var _nanDouble: Double? = nil
    var _infFloat: Float? = nil
    var _negInfFloat: Float? = nil
    var _nanFloat: Float? = nil
    var _cppTrigraph: String? = nil
    var _stringWithZero: String? = nil
    var _bytesWithZero: Data? = nil
    var _stringPieceWithZero: String? = nil
    var _cordWithZero: String? = nil
    var _replacementString: String? = nil

    init() {}

    func decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: &_escapedBytes)
      case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_largeUint32)
      case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt64.self, value: &_largeUint64)
      case 4: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_smallInt32)
      case 5: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: &_smallInt64)
      case 21: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_reallySmallInt32)
      case 22: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: &_reallySmallInt64)
      case 6: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_utf8String)
      case 7: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufFloat.self, value: &_zeroFloat)
      case 8: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufFloat.self, value: &_oneFloat)
      case 9: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufFloat.self, value: &_smallFloat)
      case 10: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufFloat.self, value: &_negativeOneFloat)
      case 11: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufFloat.self, value: &_negativeFloat)
      case 12: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufFloat.self, value: &_largeFloat)
      case 13: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufFloat.self, value: &_smallNegativeFloat)
      case 14: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufDouble.self, value: &_infDouble)
      case 15: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufDouble.self, value: &_negInfDouble)
      case 16: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufDouble.self, value: &_nanDouble)
      case 17: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufFloat.self, value: &_infFloat)
      case 18: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufFloat.self, value: &_negInfFloat)
      case 19: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufFloat.self, value: &_nanFloat)
      case 20: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_cppTrigraph)
      case 23: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_stringWithZero)
      case 24: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: &_bytesWithZero)
      case 25: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_stringPieceWithZero)
      case 26: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_cordWithZero)
      case 27: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_replacementString)
      default: break
      }
    }

    func traverse(visitor: inout SwiftProtobuf.Visitor) throws {
      if let v = _escapedBytes {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: v, protoFieldNumber: 1)
      }
      if let v = _largeUint32 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: v, protoFieldNumber: 2)
      }
      if let v = _largeUint64 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt64.self, value: v, protoFieldNumber: 3)
      }
      if let v = _smallInt32 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: v, protoFieldNumber: 4)
      }
      if let v = _smallInt64 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: v, protoFieldNumber: 5)
      }
      if let v = _utf8String {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: v, protoFieldNumber: 6)
      }
      if let v = _zeroFloat {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufFloat.self, value: v, protoFieldNumber: 7)
      }
      if let v = _oneFloat {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufFloat.self, value: v, protoFieldNumber: 8)
      }
      if let v = _smallFloat {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufFloat.self, value: v, protoFieldNumber: 9)
      }
      if let v = _negativeOneFloat {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufFloat.self, value: v, protoFieldNumber: 10)
      }
      if let v = _negativeFloat {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufFloat.self, value: v, protoFieldNumber: 11)
      }
      if let v = _largeFloat {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufFloat.self, value: v, protoFieldNumber: 12)
      }
      if let v = _smallNegativeFloat {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufFloat.self, value: v, protoFieldNumber: 13)
      }
      if let v = _infDouble {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufDouble.self, value: v, protoFieldNumber: 14)
      }
      if let v = _negInfDouble {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufDouble.self, value: v, protoFieldNumber: 15)
      }
      if let v = _nanDouble {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufDouble.self, value: v, protoFieldNumber: 16)
      }
      if let v = _infFloat {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufFloat.self, value: v, protoFieldNumber: 17)
      }
      if let v = _negInfFloat {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufFloat.self, value: v, protoFieldNumber: 18)
      }
      if let v = _nanFloat {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufFloat.self, value: v, protoFieldNumber: 19)
      }
      if let v = _cppTrigraph {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: v, protoFieldNumber: 20)
      }
      if let v = _reallySmallInt32 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: v, protoFieldNumber: 21)
      }
      if let v = _reallySmallInt64 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: v, protoFieldNumber: 22)
      }
      if let v = _stringWithZero {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: v, protoFieldNumber: 23)
      }
      if let v = _bytesWithZero {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: v, protoFieldNumber: 24)
      }
      if let v = _stringPieceWithZero {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: v, protoFieldNumber: 25)
      }
      if let v = _cordWithZero {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: v, protoFieldNumber: 26)
      }
      if let v = _replacementString {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: v, protoFieldNumber: 27)
      }
      unknown.traverse(visitor: &visitor)
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _escapedBytes != other._escapedBytes {return false}
      if _largeUint32 != other._largeUint32 {return false}
      if _largeUint64 != other._largeUint64 {return false}
      if _smallInt32 != other._smallInt32 {return false}
      if _smallInt64 != other._smallInt64 {return false}
      if _reallySmallInt32 != other._reallySmallInt32 {return false}
      if _reallySmallInt64 != other._reallySmallInt64 {return false}
      if _utf8String != other._utf8String {return false}
      if _zeroFloat != other._zeroFloat {return false}
      if _oneFloat != other._oneFloat {return false}
      if _smallFloat != other._smallFloat {return false}
      if _negativeOneFloat != other._negativeOneFloat {return false}
      if _negativeFloat != other._negativeFloat {return false}
      if _largeFloat != other._largeFloat {return false}
      if _smallNegativeFloat != other._smallNegativeFloat {return false}
      if _infDouble != other._infDouble {return false}
      if _negInfDouble != other._negInfDouble {return false}
      if _nanDouble != other._nanDouble {return false}
      if _infFloat != other._infFloat {return false}
      if _negInfFloat != other._negInfFloat {return false}
      if _nanFloat != other._nanFloat {return false}
      if _cppTrigraph != other._cppTrigraph {return false}
      if _stringWithZero != other._stringWithZero {return false}
      if _bytesWithZero != other._bytesWithZero {return false}
      if _stringPieceWithZero != other._stringPieceWithZero {return false}
      if _cordWithZero != other._cordWithZero {return false}
      if _replacementString != other._replacementString {return false}
      if unknown != other.unknown {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone.unknown = unknown
      clone._escapedBytes = _escapedBytes
      clone._largeUint32 = _largeUint32
      clone._largeUint64 = _largeUint64
      clone._smallInt32 = _smallInt32
      clone._smallInt64 = _smallInt64
      clone._reallySmallInt32 = _reallySmallInt32
      clone._reallySmallInt64 = _reallySmallInt64
      clone._utf8String = _utf8String
      clone._zeroFloat = _zeroFloat
      clone._oneFloat = _oneFloat
      clone._smallFloat = _smallFloat
      clone._negativeOneFloat = _negativeOneFloat
      clone._negativeFloat = _negativeFloat
      clone._largeFloat = _largeFloat
      clone._smallNegativeFloat = _smallNegativeFloat
      clone._infDouble = _infDouble
      clone._negInfDouble = _negInfDouble
      clone._nanDouble = _nanDouble
      clone._infFloat = _infFloat
      clone._negInfFloat = _negInfFloat
      clone._nanFloat = _nanFloat
      clone._cppTrigraph = _cppTrigraph
      clone._stringWithZero = _stringWithZero
      clone._bytesWithZero = _bytesWithZero
      clone._stringPieceWithZero = _stringPieceWithZero
      clone._cordWithZero = _cordWithZero
      clone._replacementString = _replacementString
      return clone
    }
  }

  private var _storage = _StorageClass()

  public var unknown: SwiftProtobuf.UnknownStorage {
    get {return _storage.unknown}
    set {_storage.unknown = newValue}
  }

  var escapedBytes: Data {
    get {return _storage._escapedBytes ?? Data(bytes: [0, 1, 7, 8, 12, 10, 13, 9, 11, 92, 39, 34, 254])}
    set {_uniqueStorage()._escapedBytes = newValue}
  }
  public var hasEscapedBytes: Bool {
    return _storage._escapedBytes != nil
  }
  public mutating func clearEscapedBytes() {
    return _storage._escapedBytes = nil
  }

  var largeUint32: UInt32 {
    get {return _storage._largeUint32 ?? 4294967295}
    set {_uniqueStorage()._largeUint32 = newValue}
  }
  public var hasLargeUint32: Bool {
    return _storage._largeUint32 != nil
  }
  public mutating func clearLargeUint32() {
    return _storage._largeUint32 = nil
  }

  var largeUint64: UInt64 {
    get {return _storage._largeUint64 ?? 18446744073709551615}
    set {_uniqueStorage()._largeUint64 = newValue}
  }
  public var hasLargeUint64: Bool {
    return _storage._largeUint64 != nil
  }
  public mutating func clearLargeUint64() {
    return _storage._largeUint64 = nil
  }

  var smallInt32: Int32 {
    get {return _storage._smallInt32 ?? -2147483647}
    set {_uniqueStorage()._smallInt32 = newValue}
  }
  public var hasSmallInt32: Bool {
    return _storage._smallInt32 != nil
  }
  public mutating func clearSmallInt32() {
    return _storage._smallInt32 = nil
  }

  var smallInt64: Int64 {
    get {return _storage._smallInt64 ?? -9223372036854775807}
    set {_uniqueStorage()._smallInt64 = newValue}
  }
  public var hasSmallInt64: Bool {
    return _storage._smallInt64 != nil
  }
  public mutating func clearSmallInt64() {
    return _storage._smallInt64 = nil
  }

  var reallySmallInt32: Int32 {
    get {return _storage._reallySmallInt32 ?? -2147483648}
    set {_uniqueStorage()._reallySmallInt32 = newValue}
  }
  public var hasReallySmallInt32: Bool {
    return _storage._reallySmallInt32 != nil
  }
  public mutating func clearReallySmallInt32() {
    return _storage._reallySmallInt32 = nil
  }

  var reallySmallInt64: Int64 {
    get {return _storage._reallySmallInt64 ?? -9223372036854775808}
    set {_uniqueStorage()._reallySmallInt64 = newValue}
  }
  public var hasReallySmallInt64: Bool {
    return _storage._reallySmallInt64 != nil
  }
  public mutating func clearReallySmallInt64() {
    return _storage._reallySmallInt64 = nil
  }

  ///   The default value here is UTF-8 for "\u1234".  (We could also just type
  ///   the UTF-8 text directly into this text file rather than escape it, but
  ///   lots of people use editors that would be confused by this.)
  var utf8String: String {
    get {return _storage._utf8String ?? "ሴ"}
    set {_uniqueStorage()._utf8String = newValue}
  }
  public var hasUtf8String: Bool {
    return _storage._utf8String != nil
  }
  public mutating func clearUtf8String() {
    return _storage._utf8String = nil
  }

  ///   Tests for single-precision floating-point values.
  var zeroFloat: Float {
    get {return _storage._zeroFloat ?? 0}
    set {_uniqueStorage()._zeroFloat = newValue}
  }
  public var hasZeroFloat: Bool {
    return _storage._zeroFloat != nil
  }
  public mutating func clearZeroFloat() {
    return _storage._zeroFloat = nil
  }

  var oneFloat: Float {
    get {return _storage._oneFloat ?? 1}
    set {_uniqueStorage()._oneFloat = newValue}
  }
  public var hasOneFloat: Bool {
    return _storage._oneFloat != nil
  }
  public mutating func clearOneFloat() {
    return _storage._oneFloat = nil
  }

  var smallFloat: Float {
    get {return _storage._smallFloat ?? 1.5}
    set {_uniqueStorage()._smallFloat = newValue}
  }
  public var hasSmallFloat: Bool {
    return _storage._smallFloat != nil
  }
  public mutating func clearSmallFloat() {
    return _storage._smallFloat = nil
  }

  var negativeOneFloat: Float {
    get {return _storage._negativeOneFloat ?? -1}
    set {_uniqueStorage()._negativeOneFloat = newValue}
  }
  public var hasNegativeOneFloat: Bool {
    return _storage._negativeOneFloat != nil
  }
  public mutating func clearNegativeOneFloat() {
    return _storage._negativeOneFloat = nil
  }

  var negativeFloat: Float {
    get {return _storage._negativeFloat ?? -1.5}
    set {_uniqueStorage()._negativeFloat = newValue}
  }
  public var hasNegativeFloat: Bool {
    return _storage._negativeFloat != nil
  }
  public mutating func clearNegativeFloat() {
    return _storage._negativeFloat = nil
  }

  ///   Using exponents
  var largeFloat: Float {
    get {return _storage._largeFloat ?? 2e+08}
    set {_uniqueStorage()._largeFloat = newValue}
  }
  public var hasLargeFloat: Bool {
    return _storage._largeFloat != nil
  }
  public mutating func clearLargeFloat() {
    return _storage._largeFloat = nil
  }

  var smallNegativeFloat: Float {
    get {return _storage._smallNegativeFloat ?? -8e-28}
    set {_uniqueStorage()._smallNegativeFloat = newValue}
  }
  public var hasSmallNegativeFloat: Bool {
    return _storage._smallNegativeFloat != nil
  }
  public mutating func clearSmallNegativeFloat() {
    return _storage._smallNegativeFloat = nil
  }

  ///   Text for nonfinite floating-point values.
  var infDouble: Double {
    get {return _storage._infDouble ?? Double.infinity}
    set {_uniqueStorage()._infDouble = newValue}
  }
  public var hasInfDouble: Bool {
    return _storage._infDouble != nil
  }
  public mutating func clearInfDouble() {
    return _storage._infDouble = nil
  }

  var negInfDouble: Double {
    get {return _storage._negInfDouble ?? -Double.infinity}
    set {_uniqueStorage()._negInfDouble = newValue}
  }
  public var hasNegInfDouble: Bool {
    return _storage._negInfDouble != nil
  }
  public mutating func clearNegInfDouble() {
    return _storage._negInfDouble = nil
  }

  var nanDouble: Double {
    get {return _storage._nanDouble ?? Double.nan}
    set {_uniqueStorage()._nanDouble = newValue}
  }
  public var hasNanDouble: Bool {
    return _storage._nanDouble != nil
  }
  public mutating func clearNanDouble() {
    return _storage._nanDouble = nil
  }

  var infFloat: Float {
    get {return _storage._infFloat ?? Float.infinity}
    set {_uniqueStorage()._infFloat = newValue}
  }
  public var hasInfFloat: Bool {
    return _storage._infFloat != nil
  }
  public mutating func clearInfFloat() {
    return _storage._infFloat = nil
  }

  var negInfFloat: Float {
    get {return _storage._negInfFloat ?? -Float.infinity}
    set {_uniqueStorage()._negInfFloat = newValue}
  }
  public var hasNegInfFloat: Bool {
    return _storage._negInfFloat != nil
  }
  public mutating func clearNegInfFloat() {
    return _storage._negInfFloat = nil
  }

  var nanFloat: Float {
    get {return _storage._nanFloat ?? Float.nan}
    set {_uniqueStorage()._nanFloat = newValue}
  }
  public var hasNanFloat: Bool {
    return _storage._nanFloat != nil
  }
  public mutating func clearNanFloat() {
    return _storage._nanFloat = nil
  }

  ///   Tests for C++ trigraphs.
  ///   Trigraphs should be escaped in C++ generated files, but they should not be
  ///   escaped for other languages.
  ///   Note that in .proto file, "\?" is a valid way to escape ? in string
  ///   literals.
  var cppTrigraph: String {
    get {return _storage._cppTrigraph ?? "? ? ?? ?? ??? ??/ ??-"}
    set {_uniqueStorage()._cppTrigraph = newValue}
  }
  public var hasCppTrigraph: Bool {
    return _storage._cppTrigraph != nil
  }
  public mutating func clearCppTrigraph() {
    return _storage._cppTrigraph = nil
  }

  ///   String defaults containing the character '\000'
  var stringWithZero: String {
    get {return _storage._stringWithZero ?? "hel\0lo"}
    set {_uniqueStorage()._stringWithZero = newValue}
  }
  public var hasStringWithZero: Bool {
    return _storage._stringWithZero != nil
  }
  public mutating func clearStringWithZero() {
    return _storage._stringWithZero = nil
  }

  var bytesWithZero: Data {
    get {return _storage._bytesWithZero ?? Data(bytes: [119, 111, 114, 0, 108, 100])}
    set {_uniqueStorage()._bytesWithZero = newValue}
  }
  public var hasBytesWithZero: Bool {
    return _storage._bytesWithZero != nil
  }
  public mutating func clearBytesWithZero() {
    return _storage._bytesWithZero = nil
  }

  var stringPieceWithZero: String {
    get {return _storage._stringPieceWithZero ?? "ab\0c"}
    set {_uniqueStorage()._stringPieceWithZero = newValue}
  }
  public var hasStringPieceWithZero: Bool {
    return _storage._stringPieceWithZero != nil
  }
  public mutating func clearStringPieceWithZero() {
    return _storage._stringPieceWithZero = nil
  }

  var cordWithZero: String {
    get {return _storage._cordWithZero ?? "12\03"}
    set {_uniqueStorage()._cordWithZero = newValue}
  }
  public var hasCordWithZero: Bool {
    return _storage._cordWithZero != nil
  }
  public mutating func clearCordWithZero() {
    return _storage._cordWithZero = nil
  }

  var replacementString: String {
    get {return _storage._replacementString ?? "${unknown}"}
    set {_uniqueStorage()._replacementString = newValue}
  }
  public var hasReplacementString: Bool {
    return _storage._replacementString != nil
  }
  public mutating func clearReplacementString() {
    return _storage._replacementString = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestExtremeDefaultValues) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

struct ProtobufUnittest_SparseEnumMessage: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "ProtobufUnittest_SparseEnumMessage"}
  public var protoMessageName: String {return "SparseEnumMessage"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "sparse_enum", json: "sparseEnum", swift: "sparseEnum"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  private var _sparseEnum: ProtobufUnittest_TestSparseEnum? = nil
  var sparseEnum: ProtobufUnittest_TestSparseEnum {
    get {return _sparseEnum ?? ProtobufUnittest_TestSparseEnum.sparseA}
    set {_sparseEnum = newValue}
  }
  public var hasSparseEnum: Bool {
    return _sparseEnum != nil
  }
  public mutating func clearSparseEnum() {
    return _sparseEnum = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: ProtobufUnittest_TestSparseEnum.self, value: &_sparseEnum)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    if let v = _sparseEnum {
      try visitor.visitSingularField(fieldType: ProtobufUnittest_TestSparseEnum.self, value: v, protoFieldNumber: 1)
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_SparseEnumMessage) -> Bool {
    if _sparseEnum != other._sparseEnum {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

///   Test String and Bytes: string is for valid UTF-8 strings
struct ProtobufUnittest_OneString: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "ProtobufUnittest_OneString"}
  public var protoMessageName: String {return "OneString"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "data", swift: "data"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  private var _data: String? = nil
  var data: String {
    get {return _data ?? ""}
    set {_data = newValue}
  }
  public var hasData: Bool {
    return _data != nil
  }
  public mutating func clearData() {
    return _data = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_data)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    if let v = _data {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: v, protoFieldNumber: 1)
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_OneString) -> Bool {
    if _data != other._data {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

struct ProtobufUnittest_MoreString: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "ProtobufUnittest_MoreString"}
  public var protoMessageName: String {return "MoreString"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "data", swift: "data"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  var data: [String] = []

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufString.self, value: &data)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    if !data.isEmpty {
      try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufString.self, value: data, protoFieldNumber: 1)
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_MoreString) -> Bool {
    if data != other.data {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

struct ProtobufUnittest_OneBytes: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "ProtobufUnittest_OneBytes"}
  public var protoMessageName: String {return "OneBytes"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "data", swift: "data"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  private var _data: Data? = nil
  var data: Data {
    get {return _data ?? Data()}
    set {_data = newValue}
  }
  public var hasData: Bool {
    return _data != nil
  }
  public mutating func clearData() {
    return _data = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: &_data)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    if let v = _data {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: v, protoFieldNumber: 1)
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_OneBytes) -> Bool {
    if _data != other._data {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

struct ProtobufUnittest_MoreBytes: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "ProtobufUnittest_MoreBytes"}
  public var protoMessageName: String {return "MoreBytes"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "data", swift: "data"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  var data: [Data] = []

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: &data)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    if !data.isEmpty {
      try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: data, protoFieldNumber: 1)
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_MoreBytes) -> Bool {
    if data != other.data {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

///   Test int32, uint32, int64, uint64, and bool are all compatible
struct ProtobufUnittest_Int32Message: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "ProtobufUnittest_Int32Message"}
  public var protoMessageName: String {return "Int32Message"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "data", swift: "data"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  private var _data: Int32? = nil
  var data: Int32 {
    get {return _data ?? 0}
    set {_data = newValue}
  }
  public var hasData: Bool {
    return _data != nil
  }
  public mutating func clearData() {
    return _data = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_data)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    if let v = _data {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: v, protoFieldNumber: 1)
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_Int32Message) -> Bool {
    if _data != other._data {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

struct ProtobufUnittest_Uint32Message: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "ProtobufUnittest_Uint32Message"}
  public var protoMessageName: String {return "Uint32Message"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "data", swift: "data"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  private var _data: UInt32? = nil
  var data: UInt32 {
    get {return _data ?? 0}
    set {_data = newValue}
  }
  public var hasData: Bool {
    return _data != nil
  }
  public mutating func clearData() {
    return _data = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &_data)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    if let v = _data {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: v, protoFieldNumber: 1)
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_Uint32Message) -> Bool {
    if _data != other._data {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

struct ProtobufUnittest_Int64Message: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "ProtobufUnittest_Int64Message"}
  public var protoMessageName: String {return "Int64Message"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "data", swift: "data"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  private var _data: Int64? = nil
  var data: Int64 {
    get {return _data ?? 0}
    set {_data = newValue}
  }
  public var hasData: Bool {
    return _data != nil
  }
  public mutating func clearData() {
    return _data = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: &_data)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    if let v = _data {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: v, protoFieldNumber: 1)
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_Int64Message) -> Bool {
    if _data != other._data {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

struct ProtobufUnittest_Uint64Message: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "ProtobufUnittest_Uint64Message"}
  public var protoMessageName: String {return "Uint64Message"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "data", swift: "data"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  private var _data: UInt64? = nil
  var data: UInt64 {
    get {return _data ?? 0}
    set {_data = newValue}
  }
  public var hasData: Bool {
    return _data != nil
  }
  public mutating func clearData() {
    return _data = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt64.self, value: &_data)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    if let v = _data {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt64.self, value: v, protoFieldNumber: 1)
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_Uint64Message) -> Bool {
    if _data != other._data {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

struct ProtobufUnittest_BoolMessage: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "ProtobufUnittest_BoolMessage"}
  public var protoMessageName: String {return "BoolMessage"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "data", swift: "data"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  private var _data: Bool? = nil
  var data: Bool {
    get {return _data ?? false}
    set {_data = newValue}
  }
  public var hasData: Bool {
    return _data != nil
  }
  public mutating func clearData() {
    return _data = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: &_data)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    if let v = _data {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: v, protoFieldNumber: 1)
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_BoolMessage) -> Bool {
    if _data != other._data {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

///   Test oneofs.
struct ProtobufUnittest_TestOneof: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "ProtobufUnittest_TestOneof"}
  public var protoMessageName: String {return "TestOneof"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "foo_int", json: "fooInt", swift: "fooInt"),
    2: .unique(proto: "foo_string", json: "fooString", swift: "fooString"),
    3: .unique(proto: "foo_message", json: "fooMessage", swift: "fooMessage"),
    4: .same(proto: "foogroup", swift: "fooGroup"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = ProtobufUnittest_TestOneof
    var unknown = SwiftProtobuf.UnknownStorage()
    var _foo = ProtobufUnittest_TestOneof.OneOf_Foo()

    init() {}

    func decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1, 2, 3, 4: try _foo.decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
      default: break
      }
    }

    func traverse(visitor: inout SwiftProtobuf.Visitor) throws {
      try _foo.traverse(visitor: &visitor, start: 1, end: 5)
      unknown.traverse(visitor: &visitor)
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _foo != other._foo {return false}
      if unknown != other.unknown {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone.unknown = unknown
      clone._foo = _foo
      return clone
    }
  }

  private var _storage = _StorageClass()

  public var unknown: SwiftProtobuf.UnknownStorage {
    get {return _storage.unknown}
    set {_storage.unknown = newValue}
  }

  enum OneOf_Foo: ExpressibleByNilLiteral, SwiftProtobuf.OneofEnum {
    case fooInt(Int32)
    case fooString(String)
    case fooMessage(ProtobufUnittest_TestAllTypes)
    case fooGroup(ProtobufUnittest_TestOneof.FooGroup)
    case None

    public init(nilLiteral: ()) {
      self = .None
    }

    public init() {
      self = .None
    }

    public mutating func decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
      if self != .None && setter.rejectConflictingOneof {
        throw SwiftProtobuf.DecodingError.duplicatedOneOf
      }
      switch protoFieldNumber {
      case 1:
        var value: Int32?
        try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &value)
        if let value = value {
          self = .fooInt(value)
        }
      case 2:
        var value: String?
        try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &value)
        if let value = value {
          self = .fooString(value)
        }
      case 3:
        var value: ProtobufUnittest_TestAllTypes?
        try setter.decodeSingularMessageField(fieldType: ProtobufUnittest_TestAllTypes.self, value: &value)
        if let value = value {
          self = .fooMessage(value)
        }
      case 4:
        var value: ProtobufUnittest_TestOneof.FooGroup?
        try setter.decodeSingularGroupField(fieldType: ProtobufUnittest_TestOneof.FooGroup.self, value: &value)
        if let value = value {
          self = .fooGroup(value)
        }
      default:
        self = .None
      }
    }

    public func traverse(visitor: inout SwiftProtobuf.Visitor, start: Int, end: Int) throws {
      switch self {
      case .fooInt(let v):
        if start <= 1 && 1 < end {
          try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: v, protoFieldNumber: 1)
        }
      case .fooString(let v):
        if start <= 2 && 2 < end {
          try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: v, protoFieldNumber: 2)
        }
      case .fooMessage(let v):
        if start <= 3 && 3 < end {
          try visitor.visitSingularMessageField(value: v, protoFieldNumber: 3)
        }
      case .fooGroup(let v):
        if start <= 4 && 4 < end {
          try visitor.visitSingularGroupField(value: v, protoFieldNumber: 4)
        }
      case .None:
        break
      }
    }
  }

  struct FooGroup: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
    public var swiftClassName: String {return "ProtobufUnittest_TestOneof.FooGroup"}
    public var protoMessageName: String {return "FooGroup"}
    public var protoPackageName: String {return "protobuf_unittest"}
    public static let _protobuf_fieldNames: FieldNameMap = [
      5: .same(proto: "a", swift: "a"),
      6: .same(proto: "b", swift: "b"),
    ]

    public var unknown = SwiftProtobuf.UnknownStorage()

    private var _a: Int32? = nil
    var a: Int32 {
      get {return _a ?? 0}
      set {_a = newValue}
    }
    public var hasA: Bool {
      return _a != nil
    }
    public mutating func clearA() {
      return _a = nil
    }

    private var _b: String? = nil
    var b: String {
      get {return _b ?? ""}
      set {_b = newValue}
    }
    public var hasB: Bool {
      return _b != nil
    }
    public mutating func clearB() {
      return _b = nil
    }

    init() {}

    public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 5: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_a)
      case 6: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_b)
      default: break
      }
    }

    public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
      if let v = _a {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: v, protoFieldNumber: 5)
      }
      if let v = _b {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: v, protoFieldNumber: 6)
      }
      unknown.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestOneof.FooGroup) -> Bool {
      if _a != other._a {return false}
      if _b != other._b {return false}
      if unknown != other.unknown {return false}
      return true
    }
  }

  var fooInt: Int32 {
    get {
      if case .fooInt(let v) = _storage._foo {
        return v
      }
      return 0
    }
    set {
      _uniqueStorage()._foo = .fooInt(newValue)
    }
  }

  var fooString: String {
    get {
      if case .fooString(let v) = _storage._foo {
        return v
      }
      return ""
    }
    set {
      _uniqueStorage()._foo = .fooString(newValue)
    }
  }

  var fooMessage: ProtobufUnittest_TestAllTypes {
    get {
      if case .fooMessage(let v) = _storage._foo {
        return v
      }
      return ProtobufUnittest_TestAllTypes()
    }
    set {
      _uniqueStorage()._foo = .fooMessage(newValue)
    }
  }

  var fooGroup: ProtobufUnittest_TestOneof.FooGroup {
    get {
      if case .fooGroup(let v) = _storage._foo {
        return v
      }
      return ProtobufUnittest_TestOneof.FooGroup()
    }
    set {
      _uniqueStorage()._foo = .fooGroup(newValue)
    }
  }

  public var foo: OneOf_Foo {
    get {return _storage._foo}
    set {
      _uniqueStorage()._foo = newValue
    }
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestOneof) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

struct ProtobufUnittest_TestOneofBackwardsCompatible: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "ProtobufUnittest_TestOneofBackwardsCompatible"}
  public var protoMessageName: String {return "TestOneofBackwardsCompatible"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "foo_int", json: "fooInt", swift: "fooInt"),
    2: .unique(proto: "foo_string", json: "fooString", swift: "fooString"),
    3: .unique(proto: "foo_message", json: "fooMessage", swift: "fooMessage"),
    4: .same(proto: "foogroup", swift: "fooGroup"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = ProtobufUnittest_TestOneofBackwardsCompatible
    var unknown = SwiftProtobuf.UnknownStorage()
    var _fooInt: Int32? = nil
    var _fooString: String? = nil
    var _fooMessage: ProtobufUnittest_TestAllTypes? = nil
    var _fooGroup: ProtobufUnittest_TestOneofBackwardsCompatible.FooGroup? = nil

    init() {}

    func decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_fooInt)
      case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_fooString)
      case 3: try setter.decodeSingularMessageField(fieldType: ProtobufUnittest_TestAllTypes.self, value: &_fooMessage)
      case 4: try setter.decodeSingularGroupField(fieldType: ProtobufUnittest_TestOneofBackwardsCompatible.FooGroup.self, value: &_fooGroup)
      default: break
      }
    }

    func traverse(visitor: inout SwiftProtobuf.Visitor) throws {
      if let v = _fooInt {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: v, protoFieldNumber: 1)
      }
      if let v = _fooString {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: v, protoFieldNumber: 2)
      }
      if let v = _fooMessage {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 3)
      }
      if let v = _fooGroup {
        try visitor.visitSingularGroupField(value: v, protoFieldNumber: 4)
      }
      unknown.traverse(visitor: &visitor)
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _fooInt != other._fooInt {return false}
      if _fooString != other._fooString {return false}
      if _fooMessage != other._fooMessage {return false}
      if _fooGroup != other._fooGroup {return false}
      if unknown != other.unknown {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone.unknown = unknown
      clone._fooInt = _fooInt
      clone._fooString = _fooString
      clone._fooMessage = _fooMessage
      clone._fooGroup = _fooGroup
      return clone
    }
  }

  private var _storage = _StorageClass()

  public var unknown: SwiftProtobuf.UnknownStorage {
    get {return _storage.unknown}
    set {_storage.unknown = newValue}
  }

  struct FooGroup: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
    public var swiftClassName: String {return "ProtobufUnittest_TestOneofBackwardsCompatible.FooGroup"}
    public var protoMessageName: String {return "FooGroup"}
    public var protoPackageName: String {return "protobuf_unittest"}
    public static let _protobuf_fieldNames: FieldNameMap = [
      5: .same(proto: "a", swift: "a"),
      6: .same(proto: "b", swift: "b"),
    ]

    public var unknown = SwiftProtobuf.UnknownStorage()

    private var _a: Int32? = nil
    var a: Int32 {
      get {return _a ?? 0}
      set {_a = newValue}
    }
    public var hasA: Bool {
      return _a != nil
    }
    public mutating func clearA() {
      return _a = nil
    }

    private var _b: String? = nil
    var b: String {
      get {return _b ?? ""}
      set {_b = newValue}
    }
    public var hasB: Bool {
      return _b != nil
    }
    public mutating func clearB() {
      return _b = nil
    }

    init() {}

    public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 5: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_a)
      case 6: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_b)
      default: break
      }
    }

    public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
      if let v = _a {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: v, protoFieldNumber: 5)
      }
      if let v = _b {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: v, protoFieldNumber: 6)
      }
      unknown.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestOneofBackwardsCompatible.FooGroup) -> Bool {
      if _a != other._a {return false}
      if _b != other._b {return false}
      if unknown != other.unknown {return false}
      return true
    }
  }

  var fooInt: Int32 {
    get {return _storage._fooInt ?? 0}
    set {_uniqueStorage()._fooInt = newValue}
  }
  public var hasFooInt: Bool {
    return _storage._fooInt != nil
  }
  public mutating func clearFooInt() {
    return _storage._fooInt = nil
  }

  var fooString: String {
    get {return _storage._fooString ?? ""}
    set {_uniqueStorage()._fooString = newValue}
  }
  public var hasFooString: Bool {
    return _storage._fooString != nil
  }
  public mutating func clearFooString() {
    return _storage._fooString = nil
  }

  var fooMessage: ProtobufUnittest_TestAllTypes {
    get {return _storage._fooMessage ?? ProtobufUnittest_TestAllTypes()}
    set {_uniqueStorage()._fooMessage = newValue}
  }
  public var hasFooMessage: Bool {
    return _storage._fooMessage != nil
  }
  public mutating func clearFooMessage() {
    return _storage._fooMessage = nil
  }

  var fooGroup: ProtobufUnittest_TestOneofBackwardsCompatible.FooGroup {
    get {return _storage._fooGroup ?? ProtobufUnittest_TestOneofBackwardsCompatible.FooGroup()}
    set {_uniqueStorage()._fooGroup = newValue}
  }
  public var hasFooGroup: Bool {
    return _storage._fooGroup != nil
  }
  public mutating func clearFooGroup() {
    return _storage._fooGroup = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestOneofBackwardsCompatible) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

struct ProtobufUnittest_TestOneof2: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "ProtobufUnittest_TestOneof2"}
  public var protoMessageName: String {return "TestOneof2"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "foo_int", json: "fooInt", swift: "fooInt"),
    2: .unique(proto: "foo_string", json: "fooString", swift: "fooString"),
    3: .unique(proto: "foo_cord", json: "fooCord", swift: "fooCord"),
    4: .unique(proto: "foo_string_piece", json: "fooStringPiece", swift: "fooStringPiece"),
    5: .unique(proto: "foo_bytes", json: "fooBytes", swift: "fooBytes"),
    6: .unique(proto: "foo_enum", json: "fooEnum", swift: "fooEnum"),
    7: .unique(proto: "foo_message", json: "fooMessage", swift: "fooMessage"),
    8: .same(proto: "foogroup", swift: "fooGroup"),
    11: .unique(proto: "foo_lazy_message", json: "fooLazyMessage", swift: "fooLazyMessage"),
    12: .unique(proto: "bar_int", json: "barInt", swift: "barInt"),
    13: .unique(proto: "bar_string", json: "barString", swift: "barString"),
    14: .unique(proto: "bar_cord", json: "barCord", swift: "barCord"),
    15: .unique(proto: "bar_string_piece", json: "barStringPiece", swift: "barStringPiece"),
    16: .unique(proto: "bar_bytes", json: "barBytes", swift: "barBytes"),
    17: .unique(proto: "bar_enum", json: "barEnum", swift: "barEnum"),
    18: .unique(proto: "baz_int", json: "bazInt", swift: "bazInt"),
    19: .unique(proto: "baz_string", json: "bazString", swift: "bazString"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = ProtobufUnittest_TestOneof2
    var unknown = SwiftProtobuf.UnknownStorage()
    var _foo = ProtobufUnittest_TestOneof2.OneOf_Foo()
    var _bar = ProtobufUnittest_TestOneof2.OneOf_Bar()
    var _bazInt: Int32? = nil
    var _bazString: String? = nil

    init() {}

    func decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1, 2, 3, 4, 5, 6, 7, 8, 11: try _foo.decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
      case 12, 13, 14, 15, 16, 17: try _bar.decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
      case 18: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_bazInt)
      case 19: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_bazString)
      default: break
      }
    }

    func traverse(visitor: inout SwiftProtobuf.Visitor) throws {
      try _foo.traverse(visitor: &visitor, start: 1, end: 12)
      try _bar.traverse(visitor: &visitor, start: 12, end: 18)
      if let v = _bazInt {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: v, protoFieldNumber: 18)
      }
      if let v = _bazString {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: v, protoFieldNumber: 19)
      }
      unknown.traverse(visitor: &visitor)
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _foo != other._foo {return false}
      if _bar != other._bar {return false}
      if _bazInt != other._bazInt {return false}
      if _bazString != other._bazString {return false}
      if unknown != other.unknown {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone.unknown = unknown
      clone._foo = _foo
      clone._bar = _bar
      clone._bazInt = _bazInt
      clone._bazString = _bazString
      return clone
    }
  }

  private var _storage = _StorageClass()

  public var unknown: SwiftProtobuf.UnknownStorage {
    get {return _storage.unknown}
    set {_storage.unknown = newValue}
  }

  enum OneOf_Foo: ExpressibleByNilLiteral, SwiftProtobuf.OneofEnum {
    case fooInt(Int32)
    case fooString(String)
    case fooCord(String)
    case fooStringPiece(String)
    case fooBytes(Data)
    case fooEnum(ProtobufUnittest_TestOneof2.NestedEnum)
    case fooMessage(ProtobufUnittest_TestOneof2.NestedMessage)
    case fooGroup(ProtobufUnittest_TestOneof2.FooGroup)
    case fooLazyMessage(ProtobufUnittest_TestOneof2.NestedMessage)
    case None

    public init(nilLiteral: ()) {
      self = .None
    }

    public init() {
      self = .None
    }

    public mutating func decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
      if self != .None && setter.rejectConflictingOneof {
        throw SwiftProtobuf.DecodingError.duplicatedOneOf
      }
      switch protoFieldNumber {
      case 1:
        var value: Int32?
        try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &value)
        if let value = value {
          self = .fooInt(value)
        }
      case 2:
        var value: String?
        try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &value)
        if let value = value {
          self = .fooString(value)
        }
      case 3:
        var value: String?
        try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &value)
        if let value = value {
          self = .fooCord(value)
        }
      case 4:
        var value: String?
        try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &value)
        if let value = value {
          self = .fooStringPiece(value)
        }
      case 5:
        var value: Data?
        try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: &value)
        if let value = value {
          self = .fooBytes(value)
        }
      case 6:
        var value: ProtobufUnittest_TestOneof2.NestedEnum?
        try setter.decodeSingularField(fieldType: ProtobufUnittest_TestOneof2.NestedEnum.self, value: &value)
        if let value = value {
          self = .fooEnum(value)
        }
      case 7:
        var value: ProtobufUnittest_TestOneof2.NestedMessage?
        try setter.decodeSingularMessageField(fieldType: ProtobufUnittest_TestOneof2.NestedMessage.self, value: &value)
        if let value = value {
          self = .fooMessage(value)
        }
      case 8:
        var value: ProtobufUnittest_TestOneof2.FooGroup?
        try setter.decodeSingularGroupField(fieldType: ProtobufUnittest_TestOneof2.FooGroup.self, value: &value)
        if let value = value {
          self = .fooGroup(value)
        }
      case 11:
        var value: ProtobufUnittest_TestOneof2.NestedMessage?
        try setter.decodeSingularMessageField(fieldType: ProtobufUnittest_TestOneof2.NestedMessage.self, value: &value)
        if let value = value {
          self = .fooLazyMessage(value)
        }
      default:
        self = .None
      }
    }

    public func traverse(visitor: inout SwiftProtobuf.Visitor, start: Int, end: Int) throws {
      switch self {
      case .fooInt(let v):
        if start <= 1 && 1 < end {
          try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: v, protoFieldNumber: 1)
        }
      case .fooString(let v):
        if start <= 2 && 2 < end {
          try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: v, protoFieldNumber: 2)
        }
      case .fooCord(let v):
        if start <= 3 && 3 < end {
          try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: v, protoFieldNumber: 3)
        }
      case .fooStringPiece(let v):
        if start <= 4 && 4 < end {
          try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: v, protoFieldNumber: 4)
        }
      case .fooBytes(let v):
        if start <= 5 && 5 < end {
          try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: v, protoFieldNumber: 5)
        }
      case .fooEnum(let v):
        if start <= 6 && 6 < end {
          try visitor.visitSingularField(fieldType: ProtobufUnittest_TestOneof2.NestedEnum.self, value: v, protoFieldNumber: 6)
        }
      case .fooMessage(let v):
        if start <= 7 && 7 < end {
          try visitor.visitSingularMessageField(value: v, protoFieldNumber: 7)
        }
      case .fooGroup(let v):
        if start <= 8 && 8 < end {
          try visitor.visitSingularGroupField(value: v, protoFieldNumber: 8)
        }
      case .fooLazyMessage(let v):
        if start <= 11 && 11 < end {
          try visitor.visitSingularMessageField(value: v, protoFieldNumber: 11)
        }
      case .None:
        break
      }
    }
  }

  enum OneOf_Bar: ExpressibleByNilLiteral, SwiftProtobuf.OneofEnum {
    case barInt(Int32)
    case barString(String)
    case barCord(String)
    case barStringPiece(String)
    case barBytes(Data)
    case barEnum(ProtobufUnittest_TestOneof2.NestedEnum)
    case None

    public init(nilLiteral: ()) {
      self = .None
    }

    public init() {
      self = .None
    }

    public mutating func decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
      if self != .None && setter.rejectConflictingOneof {
        throw SwiftProtobuf.DecodingError.duplicatedOneOf
      }
      switch protoFieldNumber {
      case 12:
        var value: Int32?
        try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &value)
        if let value = value {
          self = .barInt(value)
        }
      case 13:
        var value: String?
        try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &value)
        if let value = value {
          self = .barString(value)
        }
      case 14:
        var value: String?
        try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &value)
        if let value = value {
          self = .barCord(value)
        }
      case 15:
        var value: String?
        try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &value)
        if let value = value {
          self = .barStringPiece(value)
        }
      case 16:
        var value: Data?
        try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: &value)
        if let value = value {
          self = .barBytes(value)
        }
      case 17:
        var value: ProtobufUnittest_TestOneof2.NestedEnum?
        try setter.decodeSingularField(fieldType: ProtobufUnittest_TestOneof2.NestedEnum.self, value: &value)
        if let value = value {
          self = .barEnum(value)
        }
      default:
        self = .None
      }
    }

    public func traverse(visitor: inout SwiftProtobuf.Visitor, start: Int, end: Int) throws {
      switch self {
      case .barInt(let v):
        if start <= 12 && 12 < end {
          try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: v, protoFieldNumber: 12)
        }
      case .barString(let v):
        if start <= 13 && 13 < end {
          try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: v, protoFieldNumber: 13)
        }
      case .barCord(let v):
        if start <= 14 && 14 < end {
          try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: v, protoFieldNumber: 14)
        }
      case .barStringPiece(let v):
        if start <= 15 && 15 < end {
          try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: v, protoFieldNumber: 15)
        }
      case .barBytes(let v):
        if start <= 16 && 16 < end {
          try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: v, protoFieldNumber: 16)
        }
      case .barEnum(let v):
        if start <= 17 && 17 < end {
          try visitor.visitSingularField(fieldType: ProtobufUnittest_TestOneof2.NestedEnum.self, value: v, protoFieldNumber: 17)
        }
      case .None:
        break
      }
    }
  }

  enum NestedEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case foo // = 1
    case bar // = 2
    case baz // = 3

    init() {
      self = .foo
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 1: self = .foo
      case 2: self = .bar
      case 3: self = .baz
      default: return nil
      }
    }

    init?(name: String) {
      switch name {
      case "foo": self = .foo
      case "bar": self = .bar
      case "baz": self = .baz
      default: return nil
      }
    }

    init?(jsonName: String) {
      switch jsonName {
      case "FOO": self = .foo
      case "BAR": self = .bar
      case "BAZ": self = .baz
      default: return nil
      }
    }

    init?(protoName: String) {
      switch protoName {
      case "FOO": self = .foo
      case "BAR": self = .bar
      case "BAZ": self = .baz
      default: return nil
      }
    }

    var rawValue: Int {
      get {
        switch self {
        case .foo: return 1
        case .bar: return 2
        case .baz: return 3
        }
      }
    }

    var json: String {
      get {
        switch self {
        case .foo: return "\"FOO\""
        case .bar: return "\"BAR\""
        case .baz: return "\"BAZ\""
        }
      }
    }

    var hashValue: Int { return rawValue }

    var debugDescription: String {
      get {
        switch self {
        case .foo: return ".foo"
        case .bar: return ".bar"
        case .baz: return ".baz"
        }
      }
    }

  }

  struct FooGroup: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
    public var swiftClassName: String {return "ProtobufUnittest_TestOneof2.FooGroup"}
    public var protoMessageName: String {return "FooGroup"}
    public var protoPackageName: String {return "protobuf_unittest"}
    public static let _protobuf_fieldNames: FieldNameMap = [
      9: .same(proto: "a", swift: "a"),
      10: .same(proto: "b", swift: "b"),
    ]

    public var unknown = SwiftProtobuf.UnknownStorage()

    private var _a: Int32? = nil
    var a: Int32 {
      get {return _a ?? 0}
      set {_a = newValue}
    }
    public var hasA: Bool {
      return _a != nil
    }
    public mutating func clearA() {
      return _a = nil
    }

    private var _b: String? = nil
    var b: String {
      get {return _b ?? ""}
      set {_b = newValue}
    }
    public var hasB: Bool {
      return _b != nil
    }
    public mutating func clearB() {
      return _b = nil
    }

    init() {}

    public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 9: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_a)
      case 10: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_b)
      default: break
      }
    }

    public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
      if let v = _a {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: v, protoFieldNumber: 9)
      }
      if let v = _b {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: v, protoFieldNumber: 10)
      }
      unknown.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestOneof2.FooGroup) -> Bool {
      if _a != other._a {return false}
      if _b != other._b {return false}
      if unknown != other.unknown {return false}
      return true
    }
  }

  struct NestedMessage: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
    public var swiftClassName: String {return "ProtobufUnittest_TestOneof2.NestedMessage"}
    public var protoMessageName: String {return "NestedMessage"}
    public var protoPackageName: String {return "protobuf_unittest"}
    public static let _protobuf_fieldNames: FieldNameMap = [
      1: .unique(proto: "qux_int", json: "quxInt", swift: "quxInt"),
      2: .unique(proto: "corge_int", json: "corgeInt", swift: "corgeInt"),
    ]

    public var unknown = SwiftProtobuf.UnknownStorage()

    private var _quxInt: Int64? = nil
    var quxInt: Int64 {
      get {return _quxInt ?? 0}
      set {_quxInt = newValue}
    }
    public var hasQuxInt: Bool {
      return _quxInt != nil
    }
    public mutating func clearQuxInt() {
      return _quxInt = nil
    }

    var corgeInt: [Int32] = []

    init() {}

    public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: &_quxInt)
      case 2: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &corgeInt)
      default: break
      }
    }

    public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
      if let v = _quxInt {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: v, protoFieldNumber: 1)
      }
      if !corgeInt.isEmpty {
        try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: corgeInt, protoFieldNumber: 2)
      }
      unknown.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestOneof2.NestedMessage) -> Bool {
      if _quxInt != other._quxInt {return false}
      if corgeInt != other.corgeInt {return false}
      if unknown != other.unknown {return false}
      return true
    }
  }

  var fooInt: Int32 {
    get {
      if case .fooInt(let v) = _storage._foo {
        return v
      }
      return 0
    }
    set {
      _uniqueStorage()._foo = .fooInt(newValue)
    }
  }

  var fooString: String {
    get {
      if case .fooString(let v) = _storage._foo {
        return v
      }
      return ""
    }
    set {
      _uniqueStorage()._foo = .fooString(newValue)
    }
  }

  var fooCord: String {
    get {
      if case .fooCord(let v) = _storage._foo {
        return v
      }
      return ""
    }
    set {
      _uniqueStorage()._foo = .fooCord(newValue)
    }
  }

  var fooStringPiece: String {
    get {
      if case .fooStringPiece(let v) = _storage._foo {
        return v
      }
      return ""
    }
    set {
      _uniqueStorage()._foo = .fooStringPiece(newValue)
    }
  }

  var fooBytes: Data {
    get {
      if case .fooBytes(let v) = _storage._foo {
        return v
      }
      return Data()
    }
    set {
      _uniqueStorage()._foo = .fooBytes(newValue)
    }
  }

  var fooEnum: ProtobufUnittest_TestOneof2.NestedEnum {
    get {
      if case .fooEnum(let v) = _storage._foo {
        return v
      }
      return ProtobufUnittest_TestOneof2.NestedEnum.foo
    }
    set {
      _uniqueStorage()._foo = .fooEnum(newValue)
    }
  }

  var fooMessage: ProtobufUnittest_TestOneof2.NestedMessage {
    get {
      if case .fooMessage(let v) = _storage._foo {
        return v
      }
      return ProtobufUnittest_TestOneof2.NestedMessage()
    }
    set {
      _uniqueStorage()._foo = .fooMessage(newValue)
    }
  }

  var fooGroup: ProtobufUnittest_TestOneof2.FooGroup {
    get {
      if case .fooGroup(let v) = _storage._foo {
        return v
      }
      return ProtobufUnittest_TestOneof2.FooGroup()
    }
    set {
      _uniqueStorage()._foo = .fooGroup(newValue)
    }
  }

  var fooLazyMessage: ProtobufUnittest_TestOneof2.NestedMessage {
    get {
      if case .fooLazyMessage(let v) = _storage._foo {
        return v
      }
      return ProtobufUnittest_TestOneof2.NestedMessage()
    }
    set {
      _uniqueStorage()._foo = .fooLazyMessage(newValue)
    }
  }

  var barInt: Int32 {
    get {
      if case .barInt(let v) = _storage._bar {
        return v
      }
      return 5
    }
    set {
      _uniqueStorage()._bar = .barInt(newValue)
    }
  }

  var barString: String {
    get {
      if case .barString(let v) = _storage._bar {
        return v
      }
      return "STRING"
    }
    set {
      _uniqueStorage()._bar = .barString(newValue)
    }
  }

  var barCord: String {
    get {
      if case .barCord(let v) = _storage._bar {
        return v
      }
      return "CORD"
    }
    set {
      _uniqueStorage()._bar = .barCord(newValue)
    }
  }

  var barStringPiece: String {
    get {
      if case .barStringPiece(let v) = _storage._bar {
        return v
      }
      return "SPIECE"
    }
    set {
      _uniqueStorage()._bar = .barStringPiece(newValue)
    }
  }

  var barBytes: Data {
    get {
      if case .barBytes(let v) = _storage._bar {
        return v
      }
      return Data(bytes: [66, 89, 84, 69, 83])
    }
    set {
      _uniqueStorage()._bar = .barBytes(newValue)
    }
  }

  var barEnum: ProtobufUnittest_TestOneof2.NestedEnum {
    get {
      if case .barEnum(let v) = _storage._bar {
        return v
      }
      return ProtobufUnittest_TestOneof2.NestedEnum.bar
    }
    set {
      _uniqueStorage()._bar = .barEnum(newValue)
    }
  }

  var bazInt: Int32 {
    get {return _storage._bazInt ?? 0}
    set {_uniqueStorage()._bazInt = newValue}
  }
  public var hasBazInt: Bool {
    return _storage._bazInt != nil
  }
  public mutating func clearBazInt() {
    return _storage._bazInt = nil
  }

  var bazString: String {
    get {return _storage._bazString ?? "BAZ"}
    set {_uniqueStorage()._bazString = newValue}
  }
  public var hasBazString: Bool {
    return _storage._bazString != nil
  }
  public mutating func clearBazString() {
    return _storage._bazString = nil
  }

  public var foo: OneOf_Foo {
    get {return _storage._foo}
    set {
      _uniqueStorage()._foo = newValue
    }
  }

  public var bar: OneOf_Bar {
    get {return _storage._bar}
    set {
      _uniqueStorage()._bar = newValue
    }
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestOneof2) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

struct ProtobufUnittest_TestRequiredOneof: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "ProtobufUnittest_TestRequiredOneof"}
  public var protoMessageName: String {return "TestRequiredOneof"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "foo_int", json: "fooInt", swift: "fooInt"),
    2: .unique(proto: "foo_string", json: "fooString", swift: "fooString"),
    3: .unique(proto: "foo_message", json: "fooMessage", swift: "fooMessage"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = ProtobufUnittest_TestRequiredOneof
    var unknown = SwiftProtobuf.UnknownStorage()
    var _foo = ProtobufUnittest_TestRequiredOneof.OneOf_Foo()

    init() {}

    func decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1, 2, 3: try _foo.decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
      default: break
      }
    }

    func traverse(visitor: inout SwiftProtobuf.Visitor) throws {
      try _foo.traverse(visitor: &visitor, start: 1, end: 4)
      unknown.traverse(visitor: &visitor)
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _foo != other._foo {return false}
      if unknown != other.unknown {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone.unknown = unknown
      clone._foo = _foo
      return clone
    }
  }

  private var _storage = _StorageClass()

  public var unknown: SwiftProtobuf.UnknownStorage {
    get {return _storage.unknown}
    set {_storage.unknown = newValue}
  }

  enum OneOf_Foo: ExpressibleByNilLiteral, SwiftProtobuf.OneofEnum {
    case fooInt(Int32)
    case fooString(String)
    case fooMessage(ProtobufUnittest_TestRequiredOneof.NestedMessage)
    case None

    public init(nilLiteral: ()) {
      self = .None
    }

    public init() {
      self = .None
    }

    public mutating func decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
      if self != .None && setter.rejectConflictingOneof {
        throw SwiftProtobuf.DecodingError.duplicatedOneOf
      }
      switch protoFieldNumber {
      case 1:
        var value: Int32?
        try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &value)
        if let value = value {
          self = .fooInt(value)
        }
      case 2:
        var value: String?
        try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &value)
        if let value = value {
          self = .fooString(value)
        }
      case 3:
        var value: ProtobufUnittest_TestRequiredOneof.NestedMessage?
        try setter.decodeSingularMessageField(fieldType: ProtobufUnittest_TestRequiredOneof.NestedMessage.self, value: &value)
        if let value = value {
          self = .fooMessage(value)
        }
      default:
        self = .None
      }
    }

    public func traverse(visitor: inout SwiftProtobuf.Visitor, start: Int, end: Int) throws {
      switch self {
      case .fooInt(let v):
        if start <= 1 && 1 < end {
          try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: v, protoFieldNumber: 1)
        }
      case .fooString(let v):
        if start <= 2 && 2 < end {
          try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: v, protoFieldNumber: 2)
        }
      case .fooMessage(let v):
        if start <= 3 && 3 < end {
          try visitor.visitSingularMessageField(value: v, protoFieldNumber: 3)
        }
      case .None:
        break
      }
    }
  }

  struct NestedMessage: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
    public var swiftClassName: String {return "ProtobufUnittest_TestRequiredOneof.NestedMessage"}
    public var protoMessageName: String {return "NestedMessage"}
    public var protoPackageName: String {return "protobuf_unittest"}
    public static let _protobuf_fieldNames: FieldNameMap = [
      1: .unique(proto: "required_double", json: "requiredDouble", swift: "requiredDouble"),
    ]

    public var unknown = SwiftProtobuf.UnknownStorage()

    private var _requiredDouble: Double? = nil
    var requiredDouble: Double {
      get {return _requiredDouble ?? 0}
      set {_requiredDouble = newValue}
    }
    public var hasRequiredDouble: Bool {
      return _requiredDouble != nil
    }
    public mutating func clearRequiredDouble() {
      return _requiredDouble = nil
    }

    init() {}

    public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufDouble.self, value: &_requiredDouble)
      default: break
      }
    }

    public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufDouble.self, value: _requiredDouble ?? 0, protoFieldNumber: 1)
      unknown.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestRequiredOneof.NestedMessage) -> Bool {
      if _requiredDouble != other._requiredDouble {return false}
      if unknown != other.unknown {return false}
      return true
    }
  }

  var fooInt: Int32 {
    get {
      if case .fooInt(let v) = _storage._foo {
        return v
      }
      return 0
    }
    set {
      _uniqueStorage()._foo = .fooInt(newValue)
    }
  }

  var fooString: String {
    get {
      if case .fooString(let v) = _storage._foo {
        return v
      }
      return ""
    }
    set {
      _uniqueStorage()._foo = .fooString(newValue)
    }
  }

  var fooMessage: ProtobufUnittest_TestRequiredOneof.NestedMessage {
    get {
      if case .fooMessage(let v) = _storage._foo {
        return v
      }
      return ProtobufUnittest_TestRequiredOneof.NestedMessage()
    }
    set {
      _uniqueStorage()._foo = .fooMessage(newValue)
    }
  }

  public var foo: OneOf_Foo {
    get {return _storage._foo}
    set {
      _uniqueStorage()._foo = newValue
    }
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestRequiredOneof) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

//  Test messages for packed fields

struct ProtobufUnittest_TestPackedTypes: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "ProtobufUnittest_TestPackedTypes"}
  public var protoMessageName: String {return "TestPackedTypes"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    90: .unique(proto: "packed_int32", json: "packedInt32", swift: "packedInt32"),
    91: .unique(proto: "packed_int64", json: "packedInt64", swift: "packedInt64"),
    92: .unique(proto: "packed_uint32", json: "packedUint32", swift: "packedUint32"),
    93: .unique(proto: "packed_uint64", json: "packedUint64", swift: "packedUint64"),
    94: .unique(proto: "packed_sint32", json: "packedSint32", swift: "packedSint32"),
    95: .unique(proto: "packed_sint64", json: "packedSint64", swift: "packedSint64"),
    96: .unique(proto: "packed_fixed32", json: "packedFixed32", swift: "packedFixed32"),
    97: .unique(proto: "packed_fixed64", json: "packedFixed64", swift: "packedFixed64"),
    98: .unique(proto: "packed_sfixed32", json: "packedSfixed32", swift: "packedSfixed32"),
    99: .unique(proto: "packed_sfixed64", json: "packedSfixed64", swift: "packedSfixed64"),
    100: .unique(proto: "packed_float", json: "packedFloat", swift: "packedFloat"),
    101: .unique(proto: "packed_double", json: "packedDouble", swift: "packedDouble"),
    102: .unique(proto: "packed_bool", json: "packedBool", swift: "packedBool"),
    103: .unique(proto: "packed_enum", json: "packedEnum", swift: "packedEnum"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  var packedInt32: [Int32] = []

  var packedInt64: [Int64] = []

  var packedUint32: [UInt32] = []

  var packedUint64: [UInt64] = []

  var packedSint32: [Int32] = []

  var packedSint64: [Int64] = []

  var packedFixed32: [UInt32] = []

  var packedFixed64: [UInt64] = []

  var packedSfixed32: [Int32] = []

  var packedSfixed64: [Int64] = []

  var packedFloat: [Float] = []

  var packedDouble: [Double] = []

  var packedBool: [Bool] = []

  var packedEnum: [ProtobufUnittest_ForeignEnum] = []

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 90: try setter.decodePackedField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &packedInt32)
    case 91: try setter.decodePackedField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: &packedInt64)
    case 92: try setter.decodePackedField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &packedUint32)
    case 93: try setter.decodePackedField(fieldType: SwiftProtobuf.ProtobufUInt64.self, value: &packedUint64)
    case 94: try setter.decodePackedField(fieldType: SwiftProtobuf.ProtobufSInt32.self, value: &packedSint32)
    case 95: try setter.decodePackedField(fieldType: SwiftProtobuf.ProtobufSInt64.self, value: &packedSint64)
    case 96: try setter.decodePackedField(fieldType: SwiftProtobuf.ProtobufFixed32.self, value: &packedFixed32)
    case 97: try setter.decodePackedField(fieldType: SwiftProtobuf.ProtobufFixed64.self, value: &packedFixed64)
    case 98: try setter.decodePackedField(fieldType: SwiftProtobuf.ProtobufSFixed32.self, value: &packedSfixed32)
    case 99: try setter.decodePackedField(fieldType: SwiftProtobuf.ProtobufSFixed64.self, value: &packedSfixed64)
    case 100: try setter.decodePackedField(fieldType: SwiftProtobuf.ProtobufFloat.self, value: &packedFloat)
    case 101: try setter.decodePackedField(fieldType: SwiftProtobuf.ProtobufDouble.self, value: &packedDouble)
    case 102: try setter.decodePackedField(fieldType: SwiftProtobuf.ProtobufBool.self, value: &packedBool)
    case 103: try setter.decodePackedField(fieldType: ProtobufUnittest_ForeignEnum.self, value: &packedEnum)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    if !packedInt32.isEmpty {
      try visitor.visitPackedField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: packedInt32, protoFieldNumber: 90)
    }
    if !packedInt64.isEmpty {
      try visitor.visitPackedField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: packedInt64, protoFieldNumber: 91)
    }
    if !packedUint32.isEmpty {
      try visitor.visitPackedField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: packedUint32, protoFieldNumber: 92)
    }
    if !packedUint64.isEmpty {
      try visitor.visitPackedField(fieldType: SwiftProtobuf.ProtobufUInt64.self, value: packedUint64, protoFieldNumber: 93)
    }
    if !packedSint32.isEmpty {
      try visitor.visitPackedField(fieldType: SwiftProtobuf.ProtobufSInt32.self, value: packedSint32, protoFieldNumber: 94)
    }
    if !packedSint64.isEmpty {
      try visitor.visitPackedField(fieldType: SwiftProtobuf.ProtobufSInt64.self, value: packedSint64, protoFieldNumber: 95)
    }
    if !packedFixed32.isEmpty {
      try visitor.visitPackedField(fieldType: SwiftProtobuf.ProtobufFixed32.self, value: packedFixed32, protoFieldNumber: 96)
    }
    if !packedFixed64.isEmpty {
      try visitor.visitPackedField(fieldType: SwiftProtobuf.ProtobufFixed64.self, value: packedFixed64, protoFieldNumber: 97)
    }
    if !packedSfixed32.isEmpty {
      try visitor.visitPackedField(fieldType: SwiftProtobuf.ProtobufSFixed32.self, value: packedSfixed32, protoFieldNumber: 98)
    }
    if !packedSfixed64.isEmpty {
      try visitor.visitPackedField(fieldType: SwiftProtobuf.ProtobufSFixed64.self, value: packedSfixed64, protoFieldNumber: 99)
    }
    if !packedFloat.isEmpty {
      try visitor.visitPackedField(fieldType: SwiftProtobuf.ProtobufFloat.self, value: packedFloat, protoFieldNumber: 100)
    }
    if !packedDouble.isEmpty {
      try visitor.visitPackedField(fieldType: SwiftProtobuf.ProtobufDouble.self, value: packedDouble, protoFieldNumber: 101)
    }
    if !packedBool.isEmpty {
      try visitor.visitPackedField(fieldType: SwiftProtobuf.ProtobufBool.self, value: packedBool, protoFieldNumber: 102)
    }
    if !packedEnum.isEmpty {
      try visitor.visitPackedField(fieldType: ProtobufUnittest_ForeignEnum.self, value: packedEnum, protoFieldNumber: 103)
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestPackedTypes) -> Bool {
    if packedInt32 != other.packedInt32 {return false}
    if packedInt64 != other.packedInt64 {return false}
    if packedUint32 != other.packedUint32 {return false}
    if packedUint64 != other.packedUint64 {return false}
    if packedSint32 != other.packedSint32 {return false}
    if packedSint64 != other.packedSint64 {return false}
    if packedFixed32 != other.packedFixed32 {return false}
    if packedFixed64 != other.packedFixed64 {return false}
    if packedSfixed32 != other.packedSfixed32 {return false}
    if packedSfixed64 != other.packedSfixed64 {return false}
    if packedFloat != other.packedFloat {return false}
    if packedDouble != other.packedDouble {return false}
    if packedBool != other.packedBool {return false}
    if packedEnum != other.packedEnum {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

///   A message with the same fields as TestPackedTypes, but without packing. Used
///   to test packed <-> unpacked wire compatibility.
struct ProtobufUnittest_TestUnpackedTypes: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "ProtobufUnittest_TestUnpackedTypes"}
  public var protoMessageName: String {return "TestUnpackedTypes"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    90: .unique(proto: "unpacked_int32", json: "unpackedInt32", swift: "unpackedInt32"),
    91: .unique(proto: "unpacked_int64", json: "unpackedInt64", swift: "unpackedInt64"),
    92: .unique(proto: "unpacked_uint32", json: "unpackedUint32", swift: "unpackedUint32"),
    93: .unique(proto: "unpacked_uint64", json: "unpackedUint64", swift: "unpackedUint64"),
    94: .unique(proto: "unpacked_sint32", json: "unpackedSint32", swift: "unpackedSint32"),
    95: .unique(proto: "unpacked_sint64", json: "unpackedSint64", swift: "unpackedSint64"),
    96: .unique(proto: "unpacked_fixed32", json: "unpackedFixed32", swift: "unpackedFixed32"),
    97: .unique(proto: "unpacked_fixed64", json: "unpackedFixed64", swift: "unpackedFixed64"),
    98: .unique(proto: "unpacked_sfixed32", json: "unpackedSfixed32", swift: "unpackedSfixed32"),
    99: .unique(proto: "unpacked_sfixed64", json: "unpackedSfixed64", swift: "unpackedSfixed64"),
    100: .unique(proto: "unpacked_float", json: "unpackedFloat", swift: "unpackedFloat"),
    101: .unique(proto: "unpacked_double", json: "unpackedDouble", swift: "unpackedDouble"),
    102: .unique(proto: "unpacked_bool", json: "unpackedBool", swift: "unpackedBool"),
    103: .unique(proto: "unpacked_enum", json: "unpackedEnum", swift: "unpackedEnum"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  var unpackedInt32: [Int32] = []

  var unpackedInt64: [Int64] = []

  var unpackedUint32: [UInt32] = []

  var unpackedUint64: [UInt64] = []

  var unpackedSint32: [Int32] = []

  var unpackedSint64: [Int64] = []

  var unpackedFixed32: [UInt32] = []

  var unpackedFixed64: [UInt64] = []

  var unpackedSfixed32: [Int32] = []

  var unpackedSfixed64: [Int64] = []

  var unpackedFloat: [Float] = []

  var unpackedDouble: [Double] = []

  var unpackedBool: [Bool] = []

  var unpackedEnum: [ProtobufUnittest_ForeignEnum] = []

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 90: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &unpackedInt32)
    case 91: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: &unpackedInt64)
    case 92: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &unpackedUint32)
    case 93: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufUInt64.self, value: &unpackedUint64)
    case 94: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufSInt32.self, value: &unpackedSint32)
    case 95: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufSInt64.self, value: &unpackedSint64)
    case 96: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufFixed32.self, value: &unpackedFixed32)
    case 97: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufFixed64.self, value: &unpackedFixed64)
    case 98: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufSFixed32.self, value: &unpackedSfixed32)
    case 99: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufSFixed64.self, value: &unpackedSfixed64)
    case 100: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufFloat.self, value: &unpackedFloat)
    case 101: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufDouble.self, value: &unpackedDouble)
    case 102: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufBool.self, value: &unpackedBool)
    case 103: try setter.decodeRepeatedField(fieldType: ProtobufUnittest_ForeignEnum.self, value: &unpackedEnum)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    if !unpackedInt32.isEmpty {
      try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: unpackedInt32, protoFieldNumber: 90)
    }
    if !unpackedInt64.isEmpty {
      try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: unpackedInt64, protoFieldNumber: 91)
    }
    if !unpackedUint32.isEmpty {
      try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: unpackedUint32, protoFieldNumber: 92)
    }
    if !unpackedUint64.isEmpty {
      try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufUInt64.self, value: unpackedUint64, protoFieldNumber: 93)
    }
    if !unpackedSint32.isEmpty {
      try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufSInt32.self, value: unpackedSint32, protoFieldNumber: 94)
    }
    if !unpackedSint64.isEmpty {
      try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufSInt64.self, value: unpackedSint64, protoFieldNumber: 95)
    }
    if !unpackedFixed32.isEmpty {
      try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufFixed32.self, value: unpackedFixed32, protoFieldNumber: 96)
    }
    if !unpackedFixed64.isEmpty {
      try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufFixed64.self, value: unpackedFixed64, protoFieldNumber: 97)
    }
    if !unpackedSfixed32.isEmpty {
      try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufSFixed32.self, value: unpackedSfixed32, protoFieldNumber: 98)
    }
    if !unpackedSfixed64.isEmpty {
      try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufSFixed64.self, value: unpackedSfixed64, protoFieldNumber: 99)
    }
    if !unpackedFloat.isEmpty {
      try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufFloat.self, value: unpackedFloat, protoFieldNumber: 100)
    }
    if !unpackedDouble.isEmpty {
      try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufDouble.self, value: unpackedDouble, protoFieldNumber: 101)
    }
    if !unpackedBool.isEmpty {
      try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufBool.self, value: unpackedBool, protoFieldNumber: 102)
    }
    if !unpackedEnum.isEmpty {
      try visitor.visitRepeatedField(fieldType: ProtobufUnittest_ForeignEnum.self, value: unpackedEnum, protoFieldNumber: 103)
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestUnpackedTypes) -> Bool {
    if unpackedInt32 != other.unpackedInt32 {return false}
    if unpackedInt64 != other.unpackedInt64 {return false}
    if unpackedUint32 != other.unpackedUint32 {return false}
    if unpackedUint64 != other.unpackedUint64 {return false}
    if unpackedSint32 != other.unpackedSint32 {return false}
    if unpackedSint64 != other.unpackedSint64 {return false}
    if unpackedFixed32 != other.unpackedFixed32 {return false}
    if unpackedFixed64 != other.unpackedFixed64 {return false}
    if unpackedSfixed32 != other.unpackedSfixed32 {return false}
    if unpackedSfixed64 != other.unpackedSfixed64 {return false}
    if unpackedFloat != other.unpackedFloat {return false}
    if unpackedDouble != other.unpackedDouble {return false}
    if unpackedBool != other.unpackedBool {return false}
    if unpackedEnum != other.unpackedEnum {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

struct ProtobufUnittest_TestPackedExtensions: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf.ExtensibleMessage, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "ProtobufUnittest_TestPackedExtensions"}
  public var protoMessageName: String {return "TestPackedExtensions"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public static let _protobuf_fieldNames = FieldNameMap()

  public var unknown = SwiftProtobuf.UnknownStorage()

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    if (1 <= protoFieldNumber && protoFieldNumber < 536870912) {
      try setter.decodeExtensionField(values: &extensionFieldValues, messageType: ProtobufUnittest_TestPackedExtensions.self, protoFieldNumber: protoFieldNumber)
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try extensionFieldValues.traverse(visitor: &visitor, start: 1, end: 536870912)
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestPackedExtensions) -> Bool {
    if unknown != other.unknown {return false}
    if extensionFieldValues != other.extensionFieldValues {return false}
    return true
  }

  private var extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()

  public mutating func setExtensionValue<F: SwiftProtobuf.ExtensionField>(ext: SwiftProtobuf.MessageExtension<F, ProtobufUnittest_TestPackedExtensions>, value: F.ValueType) {
    extensionFieldValues[ext.protoFieldNumber] = ext.set(value: value)
  }

  public mutating func clearExtensionValue<F: SwiftProtobuf.ExtensionField>(ext: SwiftProtobuf.MessageExtension<F, ProtobufUnittest_TestPackedExtensions>) {
    extensionFieldValues[ext.protoFieldNumber] = nil
  }

  public func getExtensionValue<F: SwiftProtobuf.ExtensionField>(ext: SwiftProtobuf.MessageExtension<F, ProtobufUnittest_TestPackedExtensions>) -> F.ValueType {
    if let fieldValue = extensionFieldValues[ext.protoFieldNumber] as? F {
      return fieldValue.value
    }
    return ext.defaultValue
  }

  public func hasExtensionValue<F: SwiftProtobuf.ExtensionField>(ext: SwiftProtobuf.MessageExtension<F, ProtobufUnittest_TestPackedExtensions>) -> Bool {
    return extensionFieldValues[ext.protoFieldNumber] is F
  }
  public func _protobuf_fieldNames(for number: Int) -> FieldNameMap.Names? {
    return ProtobufUnittest_TestPackedExtensions._protobuf_fieldNames.fieldNames(for: number) ?? extensionFieldValues.fieldNames(for: number)
  }
}

struct ProtobufUnittest_TestUnpackedExtensions: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf.ExtensibleMessage, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "ProtobufUnittest_TestUnpackedExtensions"}
  public var protoMessageName: String {return "TestUnpackedExtensions"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public static let _protobuf_fieldNames = FieldNameMap()

  public var unknown = SwiftProtobuf.UnknownStorage()

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    if (1 <= protoFieldNumber && protoFieldNumber < 536870912) {
      try setter.decodeExtensionField(values: &extensionFieldValues, messageType: ProtobufUnittest_TestUnpackedExtensions.self, protoFieldNumber: protoFieldNumber)
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try extensionFieldValues.traverse(visitor: &visitor, start: 1, end: 536870912)
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestUnpackedExtensions) -> Bool {
    if unknown != other.unknown {return false}
    if extensionFieldValues != other.extensionFieldValues {return false}
    return true
  }

  private var extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()

  public mutating func setExtensionValue<F: SwiftProtobuf.ExtensionField>(ext: SwiftProtobuf.MessageExtension<F, ProtobufUnittest_TestUnpackedExtensions>, value: F.ValueType) {
    extensionFieldValues[ext.protoFieldNumber] = ext.set(value: value)
  }

  public mutating func clearExtensionValue<F: SwiftProtobuf.ExtensionField>(ext: SwiftProtobuf.MessageExtension<F, ProtobufUnittest_TestUnpackedExtensions>) {
    extensionFieldValues[ext.protoFieldNumber] = nil
  }

  public func getExtensionValue<F: SwiftProtobuf.ExtensionField>(ext: SwiftProtobuf.MessageExtension<F, ProtobufUnittest_TestUnpackedExtensions>) -> F.ValueType {
    if let fieldValue = extensionFieldValues[ext.protoFieldNumber] as? F {
      return fieldValue.value
    }
    return ext.defaultValue
  }

  public func hasExtensionValue<F: SwiftProtobuf.ExtensionField>(ext: SwiftProtobuf.MessageExtension<F, ProtobufUnittest_TestUnpackedExtensions>) -> Bool {
    return extensionFieldValues[ext.protoFieldNumber] is F
  }
  public func _protobuf_fieldNames(for number: Int) -> FieldNameMap.Names? {
    return ProtobufUnittest_TestUnpackedExtensions._protobuf_fieldNames.fieldNames(for: number) ?? extensionFieldValues.fieldNames(for: number)
  }
}

///   Used by ExtensionSetTest/DynamicExtensions.  The test actually builds
///   a set of extensions to TestAllExtensions dynamically, based on the fields
///   of this message type.
struct ProtobufUnittest_TestDynamicExtensions: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "ProtobufUnittest_TestDynamicExtensions"}
  public var protoMessageName: String {return "TestDynamicExtensions"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    2000: .unique(proto: "scalar_extension", json: "scalarExtension", swift: "scalarExtension"),
    2001: .unique(proto: "enum_extension", json: "enumExtension", swift: "enumExtension"),
    2002: .unique(proto: "dynamic_enum_extension", json: "dynamicEnumExtension", swift: "dynamicEnumExtension"),
    2003: .unique(proto: "message_extension", json: "messageExtension", swift: "messageExtension"),
    2004: .unique(proto: "dynamic_message_extension", json: "dynamicMessageExtension", swift: "dynamicMessageExtension"),
    2005: .unique(proto: "repeated_extension", json: "repeatedExtension", swift: "repeatedExtension"),
    2006: .unique(proto: "packed_extension", json: "packedExtension", swift: "packedExtension"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = ProtobufUnittest_TestDynamicExtensions
    var unknown = SwiftProtobuf.UnknownStorage()
    var _scalarExtension: UInt32? = nil
    var _enumExtension: ProtobufUnittest_ForeignEnum? = nil
    var _dynamicEnumExtension: ProtobufUnittest_TestDynamicExtensions.DynamicEnumType? = nil
    var _messageExtension: ProtobufUnittest_ForeignMessage? = nil
    var _dynamicMessageExtension: ProtobufUnittest_TestDynamicExtensions.DynamicMessageType? = nil
    var _repeatedExtension: [String] = []
    var _packedExtension: [Int32] = []

    init() {}

    func decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 2000: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufFixed32.self, value: &_scalarExtension)
      case 2001: try setter.decodeSingularField(fieldType: ProtobufUnittest_ForeignEnum.self, value: &_enumExtension)
      case 2002: try setter.decodeSingularField(fieldType: ProtobufUnittest_TestDynamicExtensions.DynamicEnumType.self, value: &_dynamicEnumExtension)
      case 2003: try setter.decodeSingularMessageField(fieldType: ProtobufUnittest_ForeignMessage.self, value: &_messageExtension)
      case 2004: try setter.decodeSingularMessageField(fieldType: ProtobufUnittest_TestDynamicExtensions.DynamicMessageType.self, value: &_dynamicMessageExtension)
      case 2005: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_repeatedExtension)
      case 2006: try setter.decodePackedField(fieldType: SwiftProtobuf.ProtobufSInt32.self, value: &_packedExtension)
      default: break
      }
    }

    func traverse(visitor: inout SwiftProtobuf.Visitor) throws {
      if let v = _scalarExtension {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufFixed32.self, value: v, protoFieldNumber: 2000)
      }
      if let v = _enumExtension {
        try visitor.visitSingularField(fieldType: ProtobufUnittest_ForeignEnum.self, value: v, protoFieldNumber: 2001)
      }
      if let v = _dynamicEnumExtension {
        try visitor.visitSingularField(fieldType: ProtobufUnittest_TestDynamicExtensions.DynamicEnumType.self, value: v, protoFieldNumber: 2002)
      }
      if let v = _messageExtension {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 2003)
      }
      if let v = _dynamicMessageExtension {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 2004)
      }
      if !_repeatedExtension.isEmpty {
        try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufString.self, value: _repeatedExtension, protoFieldNumber: 2005)
      }
      if !_packedExtension.isEmpty {
        try visitor.visitPackedField(fieldType: SwiftProtobuf.ProtobufSInt32.self, value: _packedExtension, protoFieldNumber: 2006)
      }
      unknown.traverse(visitor: &visitor)
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _scalarExtension != other._scalarExtension {return false}
      if _enumExtension != other._enumExtension {return false}
      if _dynamicEnumExtension != other._dynamicEnumExtension {return false}
      if _messageExtension != other._messageExtension {return false}
      if _dynamicMessageExtension != other._dynamicMessageExtension {return false}
      if _repeatedExtension != other._repeatedExtension {return false}
      if _packedExtension != other._packedExtension {return false}
      if unknown != other.unknown {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone.unknown = unknown
      clone._scalarExtension = _scalarExtension
      clone._enumExtension = _enumExtension
      clone._dynamicEnumExtension = _dynamicEnumExtension
      clone._messageExtension = _messageExtension
      clone._dynamicMessageExtension = _dynamicMessageExtension
      clone._repeatedExtension = _repeatedExtension
      clone._packedExtension = _packedExtension
      return clone
    }
  }

  private var _storage = _StorageClass()

  public var unknown: SwiftProtobuf.UnknownStorage {
    get {return _storage.unknown}
    set {_storage.unknown = newValue}
  }

  enum DynamicEnumType: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case dynamicFoo // = 2200
    case dynamicBar // = 2201
    case dynamicBaz // = 2202

    init() {
      self = .dynamicFoo
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 2200: self = .dynamicFoo
      case 2201: self = .dynamicBar
      case 2202: self = .dynamicBaz
      default: return nil
      }
    }

    init?(name: String) {
      switch name {
      case "dynamicFoo": self = .dynamicFoo
      case "dynamicBar": self = .dynamicBar
      case "dynamicBaz": self = .dynamicBaz
      default: return nil
      }
    }

    init?(jsonName: String) {
      switch jsonName {
      case "DYNAMIC_FOO": self = .dynamicFoo
      case "DYNAMIC_BAR": self = .dynamicBar
      case "DYNAMIC_BAZ": self = .dynamicBaz
      default: return nil
      }
    }

    init?(protoName: String) {
      switch protoName {
      case "DYNAMIC_FOO": self = .dynamicFoo
      case "DYNAMIC_BAR": self = .dynamicBar
      case "DYNAMIC_BAZ": self = .dynamicBaz
      default: return nil
      }
    }

    var rawValue: Int {
      get {
        switch self {
        case .dynamicFoo: return 2200
        case .dynamicBar: return 2201
        case .dynamicBaz: return 2202
        }
      }
    }

    var json: String {
      get {
        switch self {
        case .dynamicFoo: return "\"DYNAMIC_FOO\""
        case .dynamicBar: return "\"DYNAMIC_BAR\""
        case .dynamicBaz: return "\"DYNAMIC_BAZ\""
        }
      }
    }

    var hashValue: Int { return rawValue }

    var debugDescription: String {
      get {
        switch self {
        case .dynamicFoo: return ".dynamicFoo"
        case .dynamicBar: return ".dynamicBar"
        case .dynamicBaz: return ".dynamicBaz"
        }
      }
    }

  }

  struct DynamicMessageType: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
    public var swiftClassName: String {return "ProtobufUnittest_TestDynamicExtensions.DynamicMessageType"}
    public var protoMessageName: String {return "DynamicMessageType"}
    public var protoPackageName: String {return "protobuf_unittest"}
    public static let _protobuf_fieldNames: FieldNameMap = [
      2100: .unique(proto: "dynamic_field", json: "dynamicField", swift: "dynamicField"),
    ]

    public var unknown = SwiftProtobuf.UnknownStorage()

    private var _dynamicField: Int32? = nil
    var dynamicField: Int32 {
      get {return _dynamicField ?? 0}
      set {_dynamicField = newValue}
    }
    public var hasDynamicField: Bool {
      return _dynamicField != nil
    }
    public mutating func clearDynamicField() {
      return _dynamicField = nil
    }

    init() {}

    public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 2100: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_dynamicField)
      default: break
      }
    }

    public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
      if let v = _dynamicField {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: v, protoFieldNumber: 2100)
      }
      unknown.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestDynamicExtensions.DynamicMessageType) -> Bool {
      if _dynamicField != other._dynamicField {return false}
      if unknown != other.unknown {return false}
      return true
    }
  }

  var scalarExtension: UInt32 {
    get {return _storage._scalarExtension ?? 0}
    set {_uniqueStorage()._scalarExtension = newValue}
  }
  public var hasScalarExtension: Bool {
    return _storage._scalarExtension != nil
  }
  public mutating func clearScalarExtension() {
    return _storage._scalarExtension = nil
  }

  var enumExtension: ProtobufUnittest_ForeignEnum {
    get {return _storage._enumExtension ?? ProtobufUnittest_ForeignEnum.foreignFoo}
    set {_uniqueStorage()._enumExtension = newValue}
  }
  public var hasEnumExtension: Bool {
    return _storage._enumExtension != nil
  }
  public mutating func clearEnumExtension() {
    return _storage._enumExtension = nil
  }

  var dynamicEnumExtension: ProtobufUnittest_TestDynamicExtensions.DynamicEnumType {
    get {return _storage._dynamicEnumExtension ?? ProtobufUnittest_TestDynamicExtensions.DynamicEnumType.dynamicFoo}
    set {_uniqueStorage()._dynamicEnumExtension = newValue}
  }
  public var hasDynamicEnumExtension: Bool {
    return _storage._dynamicEnumExtension != nil
  }
  public mutating func clearDynamicEnumExtension() {
    return _storage._dynamicEnumExtension = nil
  }

  var messageExtension: ProtobufUnittest_ForeignMessage {
    get {return _storage._messageExtension ?? ProtobufUnittest_ForeignMessage()}
    set {_uniqueStorage()._messageExtension = newValue}
  }
  public var hasMessageExtension: Bool {
    return _storage._messageExtension != nil
  }
  public mutating func clearMessageExtension() {
    return _storage._messageExtension = nil
  }

  var dynamicMessageExtension: ProtobufUnittest_TestDynamicExtensions.DynamicMessageType {
    get {return _storage._dynamicMessageExtension ?? ProtobufUnittest_TestDynamicExtensions.DynamicMessageType()}
    set {_uniqueStorage()._dynamicMessageExtension = newValue}
  }
  public var hasDynamicMessageExtension: Bool {
    return _storage._dynamicMessageExtension != nil
  }
  public mutating func clearDynamicMessageExtension() {
    return _storage._dynamicMessageExtension = nil
  }

  var repeatedExtension: [String] {
    get {return _storage._repeatedExtension}
    set {_uniqueStorage()._repeatedExtension = newValue}
  }

  var packedExtension: [Int32] {
    get {return _storage._packedExtension}
    set {_uniqueStorage()._packedExtension = newValue}
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestDynamicExtensions) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

struct ProtobufUnittest_TestRepeatedScalarDifferentTagSizes: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "ProtobufUnittest_TestRepeatedScalarDifferentTagSizes"}
  public var protoMessageName: String {return "TestRepeatedScalarDifferentTagSizes"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    12: .unique(proto: "repeated_fixed32", json: "repeatedFixed32", swift: "repeatedFixed32"),
    13: .unique(proto: "repeated_int32", json: "repeatedInt32", swift: "repeatedInt32"),
    2046: .unique(proto: "repeated_fixed64", json: "repeatedFixed64", swift: "repeatedFixed64"),
    2047: .unique(proto: "repeated_int64", json: "repeatedInt64", swift: "repeatedInt64"),
    262142: .unique(proto: "repeated_float", json: "repeatedFloat", swift: "repeatedFloat"),
    262143: .unique(proto: "repeated_uint64", json: "repeatedUint64", swift: "repeatedUint64"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  ///   Parsing repeated fixed size values used to fail. This message needs to be
  ///   used in order to get a tag of the right size; all of the repeated fields
  ///   in TestAllTypes didn't trigger the check.
  var repeatedFixed32: [UInt32] = []

  ///   Check for a varint type, just for good measure.
  var repeatedInt32: [Int32] = []

  ///   These have two-byte tags.
  var repeatedFixed64: [UInt64] = []

  var repeatedInt64: [Int64] = []

  ///   Three byte tags.
  var repeatedFloat: [Float] = []

  var repeatedUint64: [UInt64] = []

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 12: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufFixed32.self, value: &repeatedFixed32)
    case 13: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &repeatedInt32)
    case 2046: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufFixed64.self, value: &repeatedFixed64)
    case 2047: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: &repeatedInt64)
    case 262142: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufFloat.self, value: &repeatedFloat)
    case 262143: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufUInt64.self, value: &repeatedUint64)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    if !repeatedFixed32.isEmpty {
      try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufFixed32.self, value: repeatedFixed32, protoFieldNumber: 12)
    }
    if !repeatedInt32.isEmpty {
      try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: repeatedInt32, protoFieldNumber: 13)
    }
    if !repeatedFixed64.isEmpty {
      try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufFixed64.self, value: repeatedFixed64, protoFieldNumber: 2046)
    }
    if !repeatedInt64.isEmpty {
      try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: repeatedInt64, protoFieldNumber: 2047)
    }
    if !repeatedFloat.isEmpty {
      try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufFloat.self, value: repeatedFloat, protoFieldNumber: 262142)
    }
    if !repeatedUint64.isEmpty {
      try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufUInt64.self, value: repeatedUint64, protoFieldNumber: 262143)
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestRepeatedScalarDifferentTagSizes) -> Bool {
    if repeatedFixed32 != other.repeatedFixed32 {return false}
    if repeatedInt32 != other.repeatedInt32 {return false}
    if repeatedFixed64 != other.repeatedFixed64 {return false}
    if repeatedInt64 != other.repeatedInt64 {return false}
    if repeatedFloat != other.repeatedFloat {return false}
    if repeatedUint64 != other.repeatedUint64 {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

///   Test that if an optional or required message/group field appears multiple
///   times in the input, they need to be merged.
struct ProtobufUnittest_TestParsingMerge: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf.ExtensibleMessage, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "ProtobufUnittest_TestParsingMerge"}
  public var protoMessageName: String {return "TestParsingMerge"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "required_all_types", json: "requiredAllTypes", swift: "requiredAllTypes"),
    2: .unique(proto: "optional_all_types", json: "optionalAllTypes", swift: "optionalAllTypes"),
    3: .unique(proto: "repeated_all_types", json: "repeatedAllTypes", swift: "repeatedAllTypes"),
    10: .same(proto: "optionalgroup", swift: "optionalGroup"),
    20: .same(proto: "repeatedgroup", swift: "repeatedGroup"),
  ]

  private class _StorageClass: SwiftProtobuf.ExtensibleMessageStorage {
    typealias ExtendedMessage = ProtobufUnittest_TestParsingMerge
    var extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
    var unknown = SwiftProtobuf.UnknownStorage()
    var _requiredAllTypes: ProtobufUnittest_TestAllTypes? = nil
    var _optionalAllTypes: ProtobufUnittest_TestAllTypes? = nil
    var _repeatedAllTypes: [ProtobufUnittest_TestAllTypes] = []
    var _optionalGroup: ProtobufUnittest_TestParsingMerge.OptionalGroup? = nil
    var _repeatedGroup: [ProtobufUnittest_TestParsingMerge.RepeatedGroup] = []

    init() {}

    func decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularMessageField(fieldType: ProtobufUnittest_TestAllTypes.self, value: &_requiredAllTypes)
      case 2: try setter.decodeSingularMessageField(fieldType: ProtobufUnittest_TestAllTypes.self, value: &_optionalAllTypes)
      case 3: try setter.decodeRepeatedMessageField(fieldType: ProtobufUnittest_TestAllTypes.self, value: &_repeatedAllTypes)
      case 10: try setter.decodeSingularGroupField(fieldType: ProtobufUnittest_TestParsingMerge.OptionalGroup.self, value: &_optionalGroup)
      case 20: try setter.decodeRepeatedGroupField(fieldType: ProtobufUnittest_TestParsingMerge.RepeatedGroup.self, value: &_repeatedGroup)
      default: if (1000 <= protoFieldNumber && protoFieldNumber < 536870912) {
          try setter.decodeExtensionField(values: &extensionFieldValues, messageType: ProtobufUnittest_TestParsingMerge.self, protoFieldNumber: protoFieldNumber)
        }
      }
    }

    func traverse(visitor: inout SwiftProtobuf.Visitor) throws {
      if let v = _requiredAllTypes {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 1)
      }
      if let v = _optionalAllTypes {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 2)
      }
      if !_repeatedAllTypes.isEmpty {
        try visitor.visitRepeatedMessageField(value: _repeatedAllTypes, protoFieldNumber: 3)
      }
      if let v = _optionalGroup {
        try visitor.visitSingularGroupField(value: v, protoFieldNumber: 10)
      }
      if !_repeatedGroup.isEmpty {
        try visitor.visitRepeatedGroupField(value: _repeatedGroup, protoFieldNumber: 20)
      }
      try extensionFieldValues.traverse(visitor: &visitor, start: 1000, end: 536870912)
      unknown.traverse(visitor: &visitor)
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _requiredAllTypes != other._requiredAllTypes {return false}
      if _optionalAllTypes != other._optionalAllTypes {return false}
      if _repeatedAllTypes != other._repeatedAllTypes {return false}
      if _optionalGroup != other._optionalGroup {return false}
      if _repeatedGroup != other._repeatedGroup {return false}
      if unknown != other.unknown {return false}
      if extensionFieldValues != other.extensionFieldValues {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone.unknown = unknown
      clone.extensionFieldValues = extensionFieldValues
      clone._requiredAllTypes = _requiredAllTypes
      clone._optionalAllTypes = _optionalAllTypes
      clone._repeatedAllTypes = _repeatedAllTypes
      clone._optionalGroup = _optionalGroup
      clone._repeatedGroup = _repeatedGroup
      return clone
    }
  }

  private var _storage = _StorageClass()

  public var unknown: SwiftProtobuf.UnknownStorage {
    get {return _storage.unknown}
    set {_storage.unknown = newValue}
  }

  ///   RepeatedFieldsGenerator defines matching field types as TestParsingMerge,
  ///   except that all fields are repeated. In the tests, we will serialize the
  ///   RepeatedFieldsGenerator to bytes, and parse the bytes to TestParsingMerge.
  ///   Repeated fields in RepeatedFieldsGenerator are expected to be merged into
  ///   the corresponding required/optional fields in TestParsingMerge.
  struct RepeatedFieldsGenerator: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
    public var swiftClassName: String {return "ProtobufUnittest_TestParsingMerge.RepeatedFieldsGenerator"}
    public var protoMessageName: String {return "RepeatedFieldsGenerator"}
    public var protoPackageName: String {return "protobuf_unittest"}
    public static let _protobuf_fieldNames: FieldNameMap = [
      1: .same(proto: "field1", swift: "field1"),
      2: .same(proto: "field2", swift: "field2"),
      3: .same(proto: "field3", swift: "field3"),
      10: .same(proto: "group1", swift: "group1"),
      20: .same(proto: "group2", swift: "group2"),
      1000: .same(proto: "ext1", swift: "ext1"),
      1001: .same(proto: "ext2", swift: "ext2"),
    ]

    public var unknown = SwiftProtobuf.UnknownStorage()

    struct Group1: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
      public var swiftClassName: String {return "ProtobufUnittest_TestParsingMerge.RepeatedFieldsGenerator.Group1"}
      public var protoMessageName: String {return "Group1"}
      public var protoPackageName: String {return "protobuf_unittest"}
      public static let _protobuf_fieldNames: FieldNameMap = [
        11: .same(proto: "field1", swift: "field1"),
      ]

      private class _StorageClass {
        typealias ExtendedMessage = ProtobufUnittest_TestParsingMerge.RepeatedFieldsGenerator.Group1
        var unknown = SwiftProtobuf.UnknownStorage()
        var _field1: ProtobufUnittest_TestAllTypes? = nil

        init() {}

        func decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
          switch protoFieldNumber {
          case 11: try setter.decodeSingularMessageField(fieldType: ProtobufUnittest_TestAllTypes.self, value: &_field1)
          default: break
          }
        }

        func traverse(visitor: inout SwiftProtobuf.Visitor) throws {
          if let v = _field1 {
            try visitor.visitSingularMessageField(value: v, protoFieldNumber: 11)
          }
          unknown.traverse(visitor: &visitor)
        }

        func isEqualTo(other: _StorageClass) -> Bool {
          if _field1 != other._field1 {return false}
          if unknown != other.unknown {return false}
          return true
        }

        func copy() -> _StorageClass {
          let clone = _StorageClass()
          clone.unknown = unknown
          clone._field1 = _field1
          return clone
        }
      }

      private var _storage = _StorageClass()

      public var unknown: SwiftProtobuf.UnknownStorage {
        get {return _storage.unknown}
        set {_storage.unknown = newValue}
      }

      var field1: ProtobufUnittest_TestAllTypes {
        get {return _storage._field1 ?? ProtobufUnittest_TestAllTypes()}
        set {_uniqueStorage()._field1 = newValue}
      }
      public var hasField1: Bool {
        return _storage._field1 != nil
      }
      public mutating func clearField1() {
        return _storage._field1 = nil
      }

      init() {}

      public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
        try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
      }

      public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
        try _storage.traverse(visitor: &visitor)
      }

      public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestParsingMerge.RepeatedFieldsGenerator.Group1) -> Bool {
        return _storage === other._storage || _storage.isEqualTo(other: other._storage)
      }

      private mutating func _uniqueStorage() -> _StorageClass {
        if !isKnownUniquelyReferenced(&_storage) {
          _storage = _storage.copy()
        }
        return _storage
      }
    }

    struct Group2: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
      public var swiftClassName: String {return "ProtobufUnittest_TestParsingMerge.RepeatedFieldsGenerator.Group2"}
      public var protoMessageName: String {return "Group2"}
      public var protoPackageName: String {return "protobuf_unittest"}
      public static let _protobuf_fieldNames: FieldNameMap = [
        21: .same(proto: "field1", swift: "field1"),
      ]

      private class _StorageClass {
        typealias ExtendedMessage = ProtobufUnittest_TestParsingMerge.RepeatedFieldsGenerator.Group2
        var unknown = SwiftProtobuf.UnknownStorage()
        var _field1: ProtobufUnittest_TestAllTypes? = nil

        init() {}

        func decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
          switch protoFieldNumber {
          case 21: try setter.decodeSingularMessageField(fieldType: ProtobufUnittest_TestAllTypes.self, value: &_field1)
          default: break
          }
        }

        func traverse(visitor: inout SwiftProtobuf.Visitor) throws {
          if let v = _field1 {
            try visitor.visitSingularMessageField(value: v, protoFieldNumber: 21)
          }
          unknown.traverse(visitor: &visitor)
        }

        func isEqualTo(other: _StorageClass) -> Bool {
          if _field1 != other._field1 {return false}
          if unknown != other.unknown {return false}
          return true
        }

        func copy() -> _StorageClass {
          let clone = _StorageClass()
          clone.unknown = unknown
          clone._field1 = _field1
          return clone
        }
      }

      private var _storage = _StorageClass()

      public var unknown: SwiftProtobuf.UnknownStorage {
        get {return _storage.unknown}
        set {_storage.unknown = newValue}
      }

      var field1: ProtobufUnittest_TestAllTypes {
        get {return _storage._field1 ?? ProtobufUnittest_TestAllTypes()}
        set {_uniqueStorage()._field1 = newValue}
      }
      public var hasField1: Bool {
        return _storage._field1 != nil
      }
      public mutating func clearField1() {
        return _storage._field1 = nil
      }

      init() {}

      public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
        try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
      }

      public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
        try _storage.traverse(visitor: &visitor)
      }

      public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestParsingMerge.RepeatedFieldsGenerator.Group2) -> Bool {
        return _storage === other._storage || _storage.isEqualTo(other: other._storage)
      }

      private mutating func _uniqueStorage() -> _StorageClass {
        if !isKnownUniquelyReferenced(&_storage) {
          _storage = _storage.copy()
        }
        return _storage
      }
    }

    var field1: [ProtobufUnittest_TestAllTypes] = []

    var field2: [ProtobufUnittest_TestAllTypes] = []

    var field3: [ProtobufUnittest_TestAllTypes] = []

    var group1: [ProtobufUnittest_TestParsingMerge.RepeatedFieldsGenerator.Group1] = []

    var group2: [ProtobufUnittest_TestParsingMerge.RepeatedFieldsGenerator.Group2] = []

    var ext1: [ProtobufUnittest_TestAllTypes] = []

    var ext2: [ProtobufUnittest_TestAllTypes] = []

    init() {}

    public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeRepeatedMessageField(fieldType: ProtobufUnittest_TestAllTypes.self, value: &field1)
      case 2: try setter.decodeRepeatedMessageField(fieldType: ProtobufUnittest_TestAllTypes.self, value: &field2)
      case 3: try setter.decodeRepeatedMessageField(fieldType: ProtobufUnittest_TestAllTypes.self, value: &field3)
      case 10: try setter.decodeRepeatedGroupField(fieldType: ProtobufUnittest_TestParsingMerge.RepeatedFieldsGenerator.Group1.self, value: &group1)
      case 20: try setter.decodeRepeatedGroupField(fieldType: ProtobufUnittest_TestParsingMerge.RepeatedFieldsGenerator.Group2.self, value: &group2)
      case 1000: try setter.decodeRepeatedMessageField(fieldType: ProtobufUnittest_TestAllTypes.self, value: &ext1)
      case 1001: try setter.decodeRepeatedMessageField(fieldType: ProtobufUnittest_TestAllTypes.self, value: &ext2)
      default: break
      }
    }

    public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
      if !field1.isEmpty {
        try visitor.visitRepeatedMessageField(value: field1, protoFieldNumber: 1)
      }
      if !field2.isEmpty {
        try visitor.visitRepeatedMessageField(value: field2, protoFieldNumber: 2)
      }
      if !field3.isEmpty {
        try visitor.visitRepeatedMessageField(value: field3, protoFieldNumber: 3)
      }
      if !group1.isEmpty {
        try visitor.visitRepeatedGroupField(value: group1, protoFieldNumber: 10)
      }
      if !group2.isEmpty {
        try visitor.visitRepeatedGroupField(value: group2, protoFieldNumber: 20)
      }
      if !ext1.isEmpty {
        try visitor.visitRepeatedMessageField(value: ext1, protoFieldNumber: 1000)
      }
      if !ext2.isEmpty {
        try visitor.visitRepeatedMessageField(value: ext2, protoFieldNumber: 1001)
      }
      unknown.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestParsingMerge.RepeatedFieldsGenerator) -> Bool {
      if field1 != other.field1 {return false}
      if field2 != other.field2 {return false}
      if field3 != other.field3 {return false}
      if group1 != other.group1 {return false}
      if group2 != other.group2 {return false}
      if ext1 != other.ext1 {return false}
      if ext2 != other.ext2 {return false}
      if unknown != other.unknown {return false}
      return true
    }
  }

  struct OptionalGroup: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
    public var swiftClassName: String {return "ProtobufUnittest_TestParsingMerge.OptionalGroup"}
    public var protoMessageName: String {return "OptionalGroup"}
    public var protoPackageName: String {return "protobuf_unittest"}
    public static let _protobuf_fieldNames: FieldNameMap = [
      11: .unique(proto: "optional_group_all_types", json: "optionalGroupAllTypes", swift: "optionalGroupAllTypes"),
    ]

    private class _StorageClass {
      typealias ExtendedMessage = ProtobufUnittest_TestParsingMerge.OptionalGroup
      var unknown = SwiftProtobuf.UnknownStorage()
      var _optionalGroupAllTypes: ProtobufUnittest_TestAllTypes? = nil

      init() {}

      func decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
        switch protoFieldNumber {
        case 11: try setter.decodeSingularMessageField(fieldType: ProtobufUnittest_TestAllTypes.self, value: &_optionalGroupAllTypes)
        default: break
        }
      }

      func traverse(visitor: inout SwiftProtobuf.Visitor) throws {
        if let v = _optionalGroupAllTypes {
          try visitor.visitSingularMessageField(value: v, protoFieldNumber: 11)
        }
        unknown.traverse(visitor: &visitor)
      }

      func isEqualTo(other: _StorageClass) -> Bool {
        if _optionalGroupAllTypes != other._optionalGroupAllTypes {return false}
        if unknown != other.unknown {return false}
        return true
      }

      func copy() -> _StorageClass {
        let clone = _StorageClass()
        clone.unknown = unknown
        clone._optionalGroupAllTypes = _optionalGroupAllTypes
        return clone
      }
    }

    private var _storage = _StorageClass()

    public var unknown: SwiftProtobuf.UnknownStorage {
      get {return _storage.unknown}
      set {_storage.unknown = newValue}
    }

    var optionalGroupAllTypes: ProtobufUnittest_TestAllTypes {
      get {return _storage._optionalGroupAllTypes ?? ProtobufUnittest_TestAllTypes()}
      set {_uniqueStorage()._optionalGroupAllTypes = newValue}
    }
    public var hasOptionalGroupAllTypes: Bool {
      return _storage._optionalGroupAllTypes != nil
    }
    public mutating func clearOptionalGroupAllTypes() {
      return _storage._optionalGroupAllTypes = nil
    }

    init() {}

    public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
      try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
    }

    public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
      try _storage.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestParsingMerge.OptionalGroup) -> Bool {
      return _storage === other._storage || _storage.isEqualTo(other: other._storage)
    }

    private mutating func _uniqueStorage() -> _StorageClass {
      if !isKnownUniquelyReferenced(&_storage) {
        _storage = _storage.copy()
      }
      return _storage
    }
  }

  struct RepeatedGroup: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
    public var swiftClassName: String {return "ProtobufUnittest_TestParsingMerge.RepeatedGroup"}
    public var protoMessageName: String {return "RepeatedGroup"}
    public var protoPackageName: String {return "protobuf_unittest"}
    public static let _protobuf_fieldNames: FieldNameMap = [
      21: .unique(proto: "repeated_group_all_types", json: "repeatedGroupAllTypes", swift: "repeatedGroupAllTypes"),
    ]

    private class _StorageClass {
      typealias ExtendedMessage = ProtobufUnittest_TestParsingMerge.RepeatedGroup
      var unknown = SwiftProtobuf.UnknownStorage()
      var _repeatedGroupAllTypes: ProtobufUnittest_TestAllTypes? = nil

      init() {}

      func decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
        switch protoFieldNumber {
        case 21: try setter.decodeSingularMessageField(fieldType: ProtobufUnittest_TestAllTypes.self, value: &_repeatedGroupAllTypes)
        default: break
        }
      }

      func traverse(visitor: inout SwiftProtobuf.Visitor) throws {
        if let v = _repeatedGroupAllTypes {
          try visitor.visitSingularMessageField(value: v, protoFieldNumber: 21)
        }
        unknown.traverse(visitor: &visitor)
      }

      func isEqualTo(other: _StorageClass) -> Bool {
        if _repeatedGroupAllTypes != other._repeatedGroupAllTypes {return false}
        if unknown != other.unknown {return false}
        return true
      }

      func copy() -> _StorageClass {
        let clone = _StorageClass()
        clone.unknown = unknown
        clone._repeatedGroupAllTypes = _repeatedGroupAllTypes
        return clone
      }
    }

    private var _storage = _StorageClass()

    public var unknown: SwiftProtobuf.UnknownStorage {
      get {return _storage.unknown}
      set {_storage.unknown = newValue}
    }

    var repeatedGroupAllTypes: ProtobufUnittest_TestAllTypes {
      get {return _storage._repeatedGroupAllTypes ?? ProtobufUnittest_TestAllTypes()}
      set {_uniqueStorage()._repeatedGroupAllTypes = newValue}
    }
    public var hasRepeatedGroupAllTypes: Bool {
      return _storage._repeatedGroupAllTypes != nil
    }
    public mutating func clearRepeatedGroupAllTypes() {
      return _storage._repeatedGroupAllTypes = nil
    }

    init() {}

    public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
      try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
    }

    public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
      try _storage.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestParsingMerge.RepeatedGroup) -> Bool {
      return _storage === other._storage || _storage.isEqualTo(other: other._storage)
    }

    private mutating func _uniqueStorage() -> _StorageClass {
      if !isKnownUniquelyReferenced(&_storage) {
        _storage = _storage.copy()
      }
      return _storage
    }
  }

  struct Extensions {

    static let optionalExt = SwiftProtobuf.MessageExtension<OptionalMessageExtensionField<ProtobufUnittest_TestAllTypes>, ProtobufUnittest_TestParsingMerge>(protoFieldNumber: 1000, fieldNames: .unique(proto: "optional_ext", json: "optionalExt", swift: "ProtobufUnittest_TestParsingMerge_optionalExt"), defaultValue: ProtobufUnittest_TestAllTypes())

    static let repeatedExt = SwiftProtobuf.MessageExtension<RepeatedMessageExtensionField<ProtobufUnittest_TestAllTypes>, ProtobufUnittest_TestParsingMerge>(protoFieldNumber: 1001, fieldNames: .unique(proto: "repeated_ext", json: "repeatedExt", swift: "ProtobufUnittest_TestParsingMerge_repeatedExt"), defaultValue: [])
  }

  var requiredAllTypes: ProtobufUnittest_TestAllTypes {
    get {return _storage._requiredAllTypes ?? ProtobufUnittest_TestAllTypes()}
    set {_uniqueStorage()._requiredAllTypes = newValue}
  }
  public var hasRequiredAllTypes: Bool {
    return _storage._requiredAllTypes != nil
  }
  public mutating func clearRequiredAllTypes() {
    return _storage._requiredAllTypes = nil
  }

  var optionalAllTypes: ProtobufUnittest_TestAllTypes {
    get {return _storage._optionalAllTypes ?? ProtobufUnittest_TestAllTypes()}
    set {_uniqueStorage()._optionalAllTypes = newValue}
  }
  public var hasOptionalAllTypes: Bool {
    return _storage._optionalAllTypes != nil
  }
  public mutating func clearOptionalAllTypes() {
    return _storage._optionalAllTypes = nil
  }

  var repeatedAllTypes: [ProtobufUnittest_TestAllTypes] {
    get {return _storage._repeatedAllTypes}
    set {_uniqueStorage()._repeatedAllTypes = newValue}
  }

  var optionalGroup: ProtobufUnittest_TestParsingMerge.OptionalGroup {
    get {return _storage._optionalGroup ?? ProtobufUnittest_TestParsingMerge.OptionalGroup()}
    set {_uniqueStorage()._optionalGroup = newValue}
  }
  public var hasOptionalGroup: Bool {
    return _storage._optionalGroup != nil
  }
  public mutating func clearOptionalGroup() {
    return _storage._optionalGroup = nil
  }

  var repeatedGroup: [ProtobufUnittest_TestParsingMerge.RepeatedGroup] {
    get {return _storage._repeatedGroup}
    set {_uniqueStorage()._repeatedGroup = newValue}
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestParsingMerge) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }

  public mutating func setExtensionValue<F: SwiftProtobuf.ExtensionField>(ext: SwiftProtobuf.MessageExtension<F, ProtobufUnittest_TestParsingMerge>, value: F.ValueType) {
    return _uniqueStorage().setExtensionValue(ext: ext, value: value)
  }

  public mutating func clearExtensionValue<F: SwiftProtobuf.ExtensionField>(ext: SwiftProtobuf.MessageExtension<F, ProtobufUnittest_TestParsingMerge>) {
    return _storage.clearExtensionValue(ext: ext)
  }

  public func getExtensionValue<F: SwiftProtobuf.ExtensionField>(ext: SwiftProtobuf.MessageExtension<F, ProtobufUnittest_TestParsingMerge>) -> F.ValueType {
    return _storage.getExtensionValue(ext: ext)
  }

  public func hasExtensionValue<F: SwiftProtobuf.ExtensionField>(ext: SwiftProtobuf.MessageExtension<F, ProtobufUnittest_TestParsingMerge>) -> Bool {
    return _storage.hasExtensionValue(ext: ext)
  }
  public func _protobuf_fieldNames(for number: Int) -> FieldNameMap.Names? {
    return ProtobufUnittest_TestParsingMerge._protobuf_fieldNames.fieldNames(for: number) ?? _storage.extensionFieldValues.fieldNames(for: number)
  }
}

struct ProtobufUnittest_TestCommentInjectionMessage: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "ProtobufUnittest_TestCommentInjectionMessage"}
  public var protoMessageName: String {return "TestCommentInjectionMessage"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "a", swift: "a"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  ///   */ <- This should not close the generated doc comment
  private var _a: String? = nil
  var a: String {
    get {return _a ?? "*/ <- Neither should this."}
    set {_a = newValue}
  }
  public var hasA: Bool {
    return _a != nil
  }
  public mutating func clearA() {
    return _a = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_a)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    if let v = _a {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: v, protoFieldNumber: 1)
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestCommentInjectionMessage) -> Bool {
    if _a != other._a {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

///   Test that RPC services work.
struct ProtobufUnittest_FooRequest: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "ProtobufUnittest_FooRequest"}
  public var protoMessageName: String {return "FooRequest"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public static let _protobuf_fieldNames = FieldNameMap()

  public var unknown = SwiftProtobuf.UnknownStorage()

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_FooRequest) -> Bool {
    if unknown != other.unknown {return false}
    return true
  }
}

struct ProtobufUnittest_FooResponse: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "ProtobufUnittest_FooResponse"}
  public var protoMessageName: String {return "FooResponse"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public static let _protobuf_fieldNames = FieldNameMap()

  public var unknown = SwiftProtobuf.UnknownStorage()

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_FooResponse) -> Bool {
    if unknown != other.unknown {return false}
    return true
  }
}

struct ProtobufUnittest_FooClientMessage: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "ProtobufUnittest_FooClientMessage"}
  public var protoMessageName: String {return "FooClientMessage"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public static let _protobuf_fieldNames = FieldNameMap()

  public var unknown = SwiftProtobuf.UnknownStorage()

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_FooClientMessage) -> Bool {
    if unknown != other.unknown {return false}
    return true
  }
}

struct ProtobufUnittest_FooServerMessage: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "ProtobufUnittest_FooServerMessage"}
  public var protoMessageName: String {return "FooServerMessage"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public static let _protobuf_fieldNames = FieldNameMap()

  public var unknown = SwiftProtobuf.UnknownStorage()

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_FooServerMessage) -> Bool {
    if unknown != other.unknown {return false}
    return true
  }
}

struct ProtobufUnittest_BarRequest: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "ProtobufUnittest_BarRequest"}
  public var protoMessageName: String {return "BarRequest"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public static let _protobuf_fieldNames = FieldNameMap()

  public var unknown = SwiftProtobuf.UnknownStorage()

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_BarRequest) -> Bool {
    if unknown != other.unknown {return false}
    return true
  }
}

struct ProtobufUnittest_BarResponse: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "ProtobufUnittest_BarResponse"}
  public var protoMessageName: String {return "BarResponse"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public static let _protobuf_fieldNames = FieldNameMap()

  public var unknown = SwiftProtobuf.UnknownStorage()

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_BarResponse) -> Bool {
    if unknown != other.unknown {return false}
    return true
  }
}

struct ProtobufUnittest_TestJsonName: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "ProtobufUnittest_TestJsonName"}
  public var protoMessageName: String {return "TestJsonName"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "field_name1", json: "fieldName1", swift: "fieldName1"),
    2: .same(proto: "fieldName2", swift: "fieldName2"),
    3: .same(proto: "FieldName3", swift: "fieldName3"),
    4: .unique(proto: "_field_name4", json: "FieldName4", swift: "fieldName4"),
    5: .unique(proto: "FIELD_NAME5", json: "FIELDNAME5", swift: "fieldName5"),
    6: .unique(proto: "field_name6", json: "@type", swift: "fieldName6"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  private var _fieldName1: Int32? = nil
  var fieldName1: Int32 {
    get {return _fieldName1 ?? 0}
    set {_fieldName1 = newValue}
  }
  public var hasFieldName1: Bool {
    return _fieldName1 != nil
  }
  public mutating func clearFieldName1() {
    return _fieldName1 = nil
  }

  private var _fieldName2: Int32? = nil
  var fieldName2: Int32 {
    get {return _fieldName2 ?? 0}
    set {_fieldName2 = newValue}
  }
  public var hasFieldName2: Bool {
    return _fieldName2 != nil
  }
  public mutating func clearFieldName2() {
    return _fieldName2 = nil
  }

  private var _fieldName3: Int32? = nil
  var fieldName3: Int32 {
    get {return _fieldName3 ?? 0}
    set {_fieldName3 = newValue}
  }
  public var hasFieldName3: Bool {
    return _fieldName3 != nil
  }
  public mutating func clearFieldName3() {
    return _fieldName3 = nil
  }

  private var _fieldName4: Int32? = nil
  var fieldName4: Int32 {
    get {return _fieldName4 ?? 0}
    set {_fieldName4 = newValue}
  }
  public var hasFieldName4: Bool {
    return _fieldName4 != nil
  }
  public mutating func clearFieldName4() {
    return _fieldName4 = nil
  }

  private var _fieldName5: Int32? = nil
  var fieldName5: Int32 {
    get {return _fieldName5 ?? 0}
    set {_fieldName5 = newValue}
  }
  public var hasFieldName5: Bool {
    return _fieldName5 != nil
  }
  public mutating func clearFieldName5() {
    return _fieldName5 = nil
  }

  private var _fieldName6: Int32? = nil
  var fieldName6: Int32 {
    get {return _fieldName6 ?? 0}
    set {_fieldName6 = newValue}
  }
  public var hasFieldName6: Bool {
    return _fieldName6 != nil
  }
  public mutating func clearFieldName6() {
    return _fieldName6 = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_fieldName1)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_fieldName2)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_fieldName3)
    case 4: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_fieldName4)
    case 5: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_fieldName5)
    case 6: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_fieldName6)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    if let v = _fieldName1 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: v, protoFieldNumber: 1)
    }
    if let v = _fieldName2 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: v, protoFieldNumber: 2)
    }
    if let v = _fieldName3 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: v, protoFieldNumber: 3)
    }
    if let v = _fieldName4 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: v, protoFieldNumber: 4)
    }
    if let v = _fieldName5 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: v, protoFieldNumber: 5)
    }
    if let v = _fieldName6 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: v, protoFieldNumber: 6)
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestJsonName) -> Bool {
    if _fieldName1 != other._fieldName1 {return false}
    if _fieldName2 != other._fieldName2 {return false}
    if _fieldName3 != other._fieldName3 {return false}
    if _fieldName4 != other._fieldName4 {return false}
    if _fieldName5 != other._fieldName5 {return false}
    if _fieldName6 != other._fieldName6 {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

struct ProtobufUnittest_TestHugeFieldNumbers: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf.ExtensibleMessage, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "ProtobufUnittest_TestHugeFieldNumbers"}
  public var protoMessageName: String {return "TestHugeFieldNumbers"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    536870000: .unique(proto: "optional_int32", json: "optionalInt32", swift: "optionalInt32"),
    536870001: .unique(proto: "fixed_32", json: "fixed32", swift: "fixed32"),
    536870002: .unique(proto: "repeated_int32", json: "repeatedInt32", swift: "repeatedInt32"),
    536870003: .unique(proto: "packed_int32", json: "packedInt32", swift: "packedInt32"),
    536870004: .unique(proto: "optional_enum", json: "optionalEnum", swift: "optionalEnum"),
    536870005: .unique(proto: "optional_string", json: "optionalString", swift: "optionalString"),
    536870006: .unique(proto: "optional_bytes", json: "optionalBytes", swift: "optionalBytes"),
    536870007: .unique(proto: "optional_message", json: "optionalMessage", swift: "optionalMessage"),
    536870008: .same(proto: "optionalgroup", swift: "optionalGroup"),
    536870010: .unique(proto: "string_string_map", json: "stringStringMap", swift: "stringStringMap"),
    536870011: .unique(proto: "oneof_uint32", json: "oneofUint32", swift: "oneofUint32"),
    536870012: .unique(proto: "oneof_test_all_types", json: "oneofTestAllTypes", swift: "oneofTestAllTypes"),
    536870013: .unique(proto: "oneof_string", json: "oneofString", swift: "oneofString"),
    536870014: .unique(proto: "oneof_bytes", json: "oneofBytes", swift: "oneofBytes"),
  ]

  private class _StorageClass: SwiftProtobuf.ExtensibleMessageStorage {
    typealias ExtendedMessage = ProtobufUnittest_TestHugeFieldNumbers
    var extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
    var unknown = SwiftProtobuf.UnknownStorage()
    var _optionalInt32: Int32? = nil
    var _fixed32: Int32? = nil
    var _repeatedInt32: [Int32] = []
    var _packedInt32: [Int32] = []
    var _optionalEnum: ProtobufUnittest_ForeignEnum? = nil
    var _optionalString: String? = nil
    var _optionalBytes: Data? = nil
    var _optionalMessage: ProtobufUnittest_ForeignMessage? = nil
    var _optionalGroup: ProtobufUnittest_TestHugeFieldNumbers.OptionalGroup? = nil
    var _stringStringMap: Dictionary<String,String> = [:]
    var _oneofField = ProtobufUnittest_TestHugeFieldNumbers.OneOf_OneofField()

    init() {}

    func decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 536870000: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_optionalInt32)
      case 536870001: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_fixed32)
      case 536870002: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_repeatedInt32)
      case 536870003: try setter.decodePackedField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_packedInt32)
      case 536870004: try setter.decodeSingularField(fieldType: ProtobufUnittest_ForeignEnum.self, value: &_optionalEnum)
      case 536870005: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_optionalString)
      case 536870006: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: &_optionalBytes)
      case 536870007: try setter.decodeSingularMessageField(fieldType: ProtobufUnittest_ForeignMessage.self, value: &_optionalMessage)
      case 536870008: try setter.decodeSingularGroupField(fieldType: ProtobufUnittest_TestHugeFieldNumbers.OptionalGroup.self, value: &_optionalGroup)
      case 536870010: try setter.decodeMapField(fieldType: SwiftProtobuf.ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &_stringStringMap)
      case 536870011, 536870012, 536870013, 536870014: try _oneofField.decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
      default: if (536860000 <= protoFieldNumber && protoFieldNumber < 536870000) {
          try setter.decodeExtensionField(values: &extensionFieldValues, messageType: ProtobufUnittest_TestHugeFieldNumbers.self, protoFieldNumber: protoFieldNumber)
        }
      }
    }

    func traverse(visitor: inout SwiftProtobuf.Visitor) throws {
      try extensionFieldValues.traverse(visitor: &visitor, start: 536860000, end: 536870000)
      if let v = _optionalInt32 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: v, protoFieldNumber: 536870000)
      }
      if let v = _fixed32 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: v, protoFieldNumber: 536870001)
      }
      if !_repeatedInt32.isEmpty {
        try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: _repeatedInt32, protoFieldNumber: 536870002)
      }
      if !_packedInt32.isEmpty {
        try visitor.visitPackedField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: _packedInt32, protoFieldNumber: 536870003)
      }
      if let v = _optionalEnum {
        try visitor.visitSingularField(fieldType: ProtobufUnittest_ForeignEnum.self, value: v, protoFieldNumber: 536870004)
      }
      if let v = _optionalString {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: v, protoFieldNumber: 536870005)
      }
      if let v = _optionalBytes {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: v, protoFieldNumber: 536870006)
      }
      if let v = _optionalMessage {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 536870007)
      }
      if let v = _optionalGroup {
        try visitor.visitSingularGroupField(value: v, protoFieldNumber: 536870008)
      }
      if !_stringStringMap.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf.ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: _stringStringMap, protoFieldNumber: 536870010)
      }
      try _oneofField.traverse(visitor: &visitor, start: 536870011, end: 536870015)
      unknown.traverse(visitor: &visitor)
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _optionalInt32 != other._optionalInt32 {return false}
      if _fixed32 != other._fixed32 {return false}
      if _repeatedInt32 != other._repeatedInt32 {return false}
      if _packedInt32 != other._packedInt32 {return false}
      if _optionalEnum != other._optionalEnum {return false}
      if _optionalString != other._optionalString {return false}
      if _optionalBytes != other._optionalBytes {return false}
      if _optionalMessage != other._optionalMessage {return false}
      if _optionalGroup != other._optionalGroup {return false}
      if _stringStringMap != other._stringStringMap {return false}
      if _oneofField != other._oneofField {return false}
      if unknown != other.unknown {return false}
      if extensionFieldValues != other.extensionFieldValues {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone.unknown = unknown
      clone.extensionFieldValues = extensionFieldValues
      clone._optionalInt32 = _optionalInt32
      clone._fixed32 = _fixed32
      clone._repeatedInt32 = _repeatedInt32
      clone._packedInt32 = _packedInt32
      clone._optionalEnum = _optionalEnum
      clone._optionalString = _optionalString
      clone._optionalBytes = _optionalBytes
      clone._optionalMessage = _optionalMessage
      clone._optionalGroup = _optionalGroup
      clone._stringStringMap = _stringStringMap
      clone._oneofField = _oneofField
      return clone
    }
  }

  private var _storage = _StorageClass()

  public var unknown: SwiftProtobuf.UnknownStorage {
    get {return _storage.unknown}
    set {_storage.unknown = newValue}
  }

  enum OneOf_OneofField: ExpressibleByNilLiteral, SwiftProtobuf.OneofEnum {
    case oneofUint32(UInt32)
    case oneofTestAllTypes(ProtobufUnittest_TestAllTypes)
    case oneofString(String)
    case oneofBytes(Data)
    case None

    public init(nilLiteral: ()) {
      self = .None
    }

    public init() {
      self = .None
    }

    public mutating func decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
      if self != .None && setter.rejectConflictingOneof {
        throw SwiftProtobuf.DecodingError.duplicatedOneOf
      }
      switch protoFieldNumber {
      case 536870011:
        var value: UInt32?
        try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &value)
        if let value = value {
          self = .oneofUint32(value)
        }
      case 536870012:
        var value: ProtobufUnittest_TestAllTypes?
        try setter.decodeSingularMessageField(fieldType: ProtobufUnittest_TestAllTypes.self, value: &value)
        if let value = value {
          self = .oneofTestAllTypes(value)
        }
      case 536870013:
        var value: String?
        try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &value)
        if let value = value {
          self = .oneofString(value)
        }
      case 536870014:
        var value: Data?
        try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: &value)
        if let value = value {
          self = .oneofBytes(value)
        }
      default:
        self = .None
      }
    }

    public func traverse(visitor: inout SwiftProtobuf.Visitor, start: Int, end: Int) throws {
      switch self {
      case .oneofUint32(let v):
        if start <= 536870011 && 536870011 < end {
          try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: v, protoFieldNumber: 536870011)
        }
      case .oneofTestAllTypes(let v):
        if start <= 536870012 && 536870012 < end {
          try visitor.visitSingularMessageField(value: v, protoFieldNumber: 536870012)
        }
      case .oneofString(let v):
        if start <= 536870013 && 536870013 < end {
          try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: v, protoFieldNumber: 536870013)
        }
      case .oneofBytes(let v):
        if start <= 536870014 && 536870014 < end {
          try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBytes.self, value: v, protoFieldNumber: 536870014)
        }
      case .None:
        break
      }
    }
  }

  struct OptionalGroup: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
    public var swiftClassName: String {return "ProtobufUnittest_TestHugeFieldNumbers.OptionalGroup"}
    public var protoMessageName: String {return "OptionalGroup"}
    public var protoPackageName: String {return "protobuf_unittest"}
    public static let _protobuf_fieldNames: FieldNameMap = [
      536870009: .unique(proto: "group_a", json: "groupA", swift: "groupA"),
    ]

    public var unknown = SwiftProtobuf.UnknownStorage()

    private var _groupA: Int32? = nil
    var groupA: Int32 {
      get {return _groupA ?? 0}
      set {_groupA = newValue}
    }
    public var hasGroupA: Bool {
      return _groupA != nil
    }
    public mutating func clearGroupA() {
      return _groupA = nil
    }

    init() {}

    public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 536870009: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_groupA)
      default: break
      }
    }

    public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
      if let v = _groupA {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: v, protoFieldNumber: 536870009)
      }
      unknown.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestHugeFieldNumbers.OptionalGroup) -> Bool {
      if _groupA != other._groupA {return false}
      if unknown != other.unknown {return false}
      return true
    }
  }

  var optionalInt32: Int32 {
    get {return _storage._optionalInt32 ?? 0}
    set {_uniqueStorage()._optionalInt32 = newValue}
  }
  public var hasOptionalInt32: Bool {
    return _storage._optionalInt32 != nil
  }
  public mutating func clearOptionalInt32() {
    return _storage._optionalInt32 = nil
  }

  var fixed32: Int32 {
    get {return _storage._fixed32 ?? 0}
    set {_uniqueStorage()._fixed32 = newValue}
  }
  public var hasFixed32: Bool {
    return _storage._fixed32 != nil
  }
  public mutating func clearFixed32() {
    return _storage._fixed32 = nil
  }

  var repeatedInt32: [Int32] {
    get {return _storage._repeatedInt32}
    set {_uniqueStorage()._repeatedInt32 = newValue}
  }

  var packedInt32: [Int32] {
    get {return _storage._packedInt32}
    set {_uniqueStorage()._packedInt32 = newValue}
  }

  var optionalEnum: ProtobufUnittest_ForeignEnum {
    get {return _storage._optionalEnum ?? ProtobufUnittest_ForeignEnum.foreignFoo}
    set {_uniqueStorage()._optionalEnum = newValue}
  }
  public var hasOptionalEnum: Bool {
    return _storage._optionalEnum != nil
  }
  public mutating func clearOptionalEnum() {
    return _storage._optionalEnum = nil
  }

  var optionalString: String {
    get {return _storage._optionalString ?? ""}
    set {_uniqueStorage()._optionalString = newValue}
  }
  public var hasOptionalString: Bool {
    return _storage._optionalString != nil
  }
  public mutating func clearOptionalString() {
    return _storage._optionalString = nil
  }

  var optionalBytes: Data {
    get {return _storage._optionalBytes ?? Data()}
    set {_uniqueStorage()._optionalBytes = newValue}
  }
  public var hasOptionalBytes: Bool {
    return _storage._optionalBytes != nil
  }
  public mutating func clearOptionalBytes() {
    return _storage._optionalBytes = nil
  }

  var optionalMessage: ProtobufUnittest_ForeignMessage {
    get {return _storage._optionalMessage ?? ProtobufUnittest_ForeignMessage()}
    set {_uniqueStorage()._optionalMessage = newValue}
  }
  public var hasOptionalMessage: Bool {
    return _storage._optionalMessage != nil
  }
  public mutating func clearOptionalMessage() {
    return _storage._optionalMessage = nil
  }

  var optionalGroup: ProtobufUnittest_TestHugeFieldNumbers.OptionalGroup {
    get {return _storage._optionalGroup ?? ProtobufUnittest_TestHugeFieldNumbers.OptionalGroup()}
    set {_uniqueStorage()._optionalGroup = newValue}
  }
  public var hasOptionalGroup: Bool {
    return _storage._optionalGroup != nil
  }
  public mutating func clearOptionalGroup() {
    return _storage._optionalGroup = nil
  }

  var stringStringMap: Dictionary<String,String> {
    get {return _storage._stringStringMap}
    set {_uniqueStorage()._stringStringMap = newValue}
  }

  var oneofUint32: UInt32 {
    get {
      if case .oneofUint32(let v) = _storage._oneofField {
        return v
      }
      return 0
    }
    set {
      _uniqueStorage()._oneofField = .oneofUint32(newValue)
    }
  }

  var oneofTestAllTypes: ProtobufUnittest_TestAllTypes {
    get {
      if case .oneofTestAllTypes(let v) = _storage._oneofField {
        return v
      }
      return ProtobufUnittest_TestAllTypes()
    }
    set {
      _uniqueStorage()._oneofField = .oneofTestAllTypes(newValue)
    }
  }

  var oneofString: String {
    get {
      if case .oneofString(let v) = _storage._oneofField {
        return v
      }
      return ""
    }
    set {
      _uniqueStorage()._oneofField = .oneofString(newValue)
    }
  }

  var oneofBytes: Data {
    get {
      if case .oneofBytes(let v) = _storage._oneofField {
        return v
      }
      return Data()
    }
    set {
      _uniqueStorage()._oneofField = .oneofBytes(newValue)
    }
  }

  public var oneofField: OneOf_OneofField {
    get {return _storage._oneofField}
    set {
      _uniqueStorage()._oneofField = newValue
    }
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestHugeFieldNumbers) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }

  public mutating func setExtensionValue<F: SwiftProtobuf.ExtensionField>(ext: SwiftProtobuf.MessageExtension<F, ProtobufUnittest_TestHugeFieldNumbers>, value: F.ValueType) {
    return _uniqueStorage().setExtensionValue(ext: ext, value: value)
  }

  public mutating func clearExtensionValue<F: SwiftProtobuf.ExtensionField>(ext: SwiftProtobuf.MessageExtension<F, ProtobufUnittest_TestHugeFieldNumbers>) {
    return _storage.clearExtensionValue(ext: ext)
  }

  public func getExtensionValue<F: SwiftProtobuf.ExtensionField>(ext: SwiftProtobuf.MessageExtension<F, ProtobufUnittest_TestHugeFieldNumbers>) -> F.ValueType {
    return _storage.getExtensionValue(ext: ext)
  }

  public func hasExtensionValue<F: SwiftProtobuf.ExtensionField>(ext: SwiftProtobuf.MessageExtension<F, ProtobufUnittest_TestHugeFieldNumbers>) -> Bool {
    return _storage.hasExtensionValue(ext: ext)
  }
  public func _protobuf_fieldNames(for number: Int) -> FieldNameMap.Names? {
    return ProtobufUnittest_TestHugeFieldNumbers._protobuf_fieldNames.fieldNames(for: number) ?? _storage.extensionFieldValues.fieldNames(for: number)
  }
}

///   Singular
let ProtobufUnittest_Extensions_optionalInt32Extension = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 1, fieldNames: .unique(proto: "optional_int32_extension", json: "optionalInt32Extension", swift: "ProtobufUnittest_optionalInt32Extension"), defaultValue: 0)

let ProtobufUnittest_Extensions_optionalInt64Extension = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufInt64>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 2, fieldNames: .unique(proto: "optional_int64_extension", json: "optionalInt64Extension", swift: "ProtobufUnittest_optionalInt64Extension"), defaultValue: 0)

let ProtobufUnittest_Extensions_optionalUint32Extension = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufUInt32>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 3, fieldNames: .unique(proto: "optional_uint32_extension", json: "optionalUint32Extension", swift: "ProtobufUnittest_optionalUint32Extension"), defaultValue: 0)

let ProtobufUnittest_Extensions_optionalUint64Extension = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufUInt64>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 4, fieldNames: .unique(proto: "optional_uint64_extension", json: "optionalUint64Extension", swift: "ProtobufUnittest_optionalUint64Extension"), defaultValue: 0)

let ProtobufUnittest_Extensions_optionalSint32Extension = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufSInt32>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 5, fieldNames: .unique(proto: "optional_sint32_extension", json: "optionalSint32Extension", swift: "ProtobufUnittest_optionalSint32Extension"), defaultValue: 0)

let ProtobufUnittest_Extensions_optionalSint64Extension = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufSInt64>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 6, fieldNames: .unique(proto: "optional_sint64_extension", json: "optionalSint64Extension", swift: "ProtobufUnittest_optionalSint64Extension"), defaultValue: 0)

let ProtobufUnittest_Extensions_optionalFixed32Extension = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufFixed32>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 7, fieldNames: .unique(proto: "optional_fixed32_extension", json: "optionalFixed32Extension", swift: "ProtobufUnittest_optionalFixed32Extension"), defaultValue: 0)

let ProtobufUnittest_Extensions_optionalFixed64Extension = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufFixed64>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 8, fieldNames: .unique(proto: "optional_fixed64_extension", json: "optionalFixed64Extension", swift: "ProtobufUnittest_optionalFixed64Extension"), defaultValue: 0)

let ProtobufUnittest_Extensions_optionalSfixed32Extension = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufSFixed32>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 9, fieldNames: .unique(proto: "optional_sfixed32_extension", json: "optionalSfixed32Extension", swift: "ProtobufUnittest_optionalSfixed32Extension"), defaultValue: 0)

let ProtobufUnittest_Extensions_optionalSfixed64Extension = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufSFixed64>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 10, fieldNames: .unique(proto: "optional_sfixed64_extension", json: "optionalSfixed64Extension", swift: "ProtobufUnittest_optionalSfixed64Extension"), defaultValue: 0)

let ProtobufUnittest_Extensions_optionalFloatExtension = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufFloat>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 11, fieldNames: .unique(proto: "optional_float_extension", json: "optionalFloatExtension", swift: "ProtobufUnittest_optionalFloatExtension"), defaultValue: 0)

let ProtobufUnittest_Extensions_optionalDoubleExtension = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufDouble>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 12, fieldNames: .unique(proto: "optional_double_extension", json: "optionalDoubleExtension", swift: "ProtobufUnittest_optionalDoubleExtension"), defaultValue: 0)

let ProtobufUnittest_Extensions_optionalBoolExtension = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufBool>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 13, fieldNames: .unique(proto: "optional_bool_extension", json: "optionalBoolExtension", swift: "ProtobufUnittest_optionalBoolExtension"), defaultValue: false)

let ProtobufUnittest_Extensions_optionalStringExtension = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufString>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 14, fieldNames: .unique(proto: "optional_string_extension", json: "optionalStringExtension", swift: "ProtobufUnittest_optionalStringExtension"), defaultValue: "")

let ProtobufUnittest_Extensions_optionalBytesExtension = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufBytes>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 15, fieldNames: .unique(proto: "optional_bytes_extension", json: "optionalBytesExtension", swift: "ProtobufUnittest_optionalBytesExtension"), defaultValue: Data())

let ProtobufUnittest_Extensions_optionalGroupExtension = SwiftProtobuf.MessageExtension<OptionalGroupExtensionField<ProtobufUnittest_OptionalGroup_extension>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 16, fieldNames: .unique(proto: "optionalgroup_extension", json: "optionalgroupExtension", swift: "ProtobufUnittest_optionalGroupExtension"), defaultValue: ProtobufUnittest_OptionalGroup_extension())

let ProtobufUnittest_Extensions_optionalNestedMessageExtension = SwiftProtobuf.MessageExtension<OptionalMessageExtensionField<ProtobufUnittest_TestAllTypes.NestedMessage>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 18, fieldNames: .unique(proto: "optional_nested_message_extension", json: "optionalNestedMessageExtension", swift: "ProtobufUnittest_optionalNestedMessageExtension"), defaultValue: ProtobufUnittest_TestAllTypes.NestedMessage())

let ProtobufUnittest_Extensions_optionalForeignMessageExtension = SwiftProtobuf.MessageExtension<OptionalMessageExtensionField<ProtobufUnittest_ForeignMessage>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 19, fieldNames: .unique(proto: "optional_foreign_message_extension", json: "optionalForeignMessageExtension", swift: "ProtobufUnittest_optionalForeignMessageExtension"), defaultValue: ProtobufUnittest_ForeignMessage())

let ProtobufUnittest_Extensions_optionalImportMessageExtension = SwiftProtobuf.MessageExtension<OptionalMessageExtensionField<ProtobufUnittestImport_ImportMessage>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 20, fieldNames: .unique(proto: "optional_import_message_extension", json: "optionalImportMessageExtension", swift: "ProtobufUnittest_optionalImportMessageExtension"), defaultValue: ProtobufUnittestImport_ImportMessage())

let ProtobufUnittest_Extensions_optionalNestedEnumExtension = SwiftProtobuf.MessageExtension<OptionalExtensionField<ProtobufUnittest_TestAllTypes.NestedEnum>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 21, fieldNames: .unique(proto: "optional_nested_enum_extension", json: "optionalNestedEnumExtension", swift: "ProtobufUnittest_optionalNestedEnumExtension"), defaultValue: ProtobufUnittest_TestAllTypes.NestedEnum.foo)

let ProtobufUnittest_Extensions_optionalForeignEnumExtension = SwiftProtobuf.MessageExtension<OptionalExtensionField<ProtobufUnittest_ForeignEnum>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 22, fieldNames: .unique(proto: "optional_foreign_enum_extension", json: "optionalForeignEnumExtension", swift: "ProtobufUnittest_optionalForeignEnumExtension"), defaultValue: ProtobufUnittest_ForeignEnum.foreignFoo)

let ProtobufUnittest_Extensions_optionalImportEnumExtension = SwiftProtobuf.MessageExtension<OptionalExtensionField<ProtobufUnittestImport_ImportEnum>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 23, fieldNames: .unique(proto: "optional_import_enum_extension", json: "optionalImportEnumExtension", swift: "ProtobufUnittest_optionalImportEnumExtension"), defaultValue: ProtobufUnittestImport_ImportEnum.importFoo)

let ProtobufUnittest_Extensions_optionalStringPieceExtension = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufString>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 24, fieldNames: .unique(proto: "optional_string_piece_extension", json: "optionalStringPieceExtension", swift: "ProtobufUnittest_optionalStringPieceExtension"), defaultValue: "")

let ProtobufUnittest_Extensions_optionalCordExtension = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufString>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 25, fieldNames: .unique(proto: "optional_cord_extension", json: "optionalCordExtension", swift: "ProtobufUnittest_optionalCordExtension"), defaultValue: "")

let ProtobufUnittest_Extensions_optionalPublicImportMessageExtension = SwiftProtobuf.MessageExtension<OptionalMessageExtensionField<ProtobufUnittestImport_PublicImportMessage>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 26, fieldNames: .unique(proto: "optional_public_import_message_extension", json: "optionalPublicImportMessageExtension", swift: "ProtobufUnittest_optionalPublicImportMessageExtension"), defaultValue: ProtobufUnittestImport_PublicImportMessage())

let ProtobufUnittest_Extensions_optionalLazyMessageExtension = SwiftProtobuf.MessageExtension<OptionalMessageExtensionField<ProtobufUnittest_TestAllTypes.NestedMessage>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 27, fieldNames: .unique(proto: "optional_lazy_message_extension", json: "optionalLazyMessageExtension", swift: "ProtobufUnittest_optionalLazyMessageExtension"), defaultValue: ProtobufUnittest_TestAllTypes.NestedMessage())

///   Repeated
let ProtobufUnittest_Extensions_repeatedInt32Extension = SwiftProtobuf.MessageExtension<RepeatedExtensionField<SwiftProtobuf.ProtobufInt32>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 31, fieldNames: .unique(proto: "repeated_int32_extension", json: "repeatedInt32Extension", swift: "ProtobufUnittest_repeatedInt32Extension"), defaultValue: [])

let ProtobufUnittest_Extensions_repeatedInt64Extension = SwiftProtobuf.MessageExtension<RepeatedExtensionField<SwiftProtobuf.ProtobufInt64>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 32, fieldNames: .unique(proto: "repeated_int64_extension", json: "repeatedInt64Extension", swift: "ProtobufUnittest_repeatedInt64Extension"), defaultValue: [])

let ProtobufUnittest_Extensions_repeatedUint32Extension = SwiftProtobuf.MessageExtension<RepeatedExtensionField<SwiftProtobuf.ProtobufUInt32>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 33, fieldNames: .unique(proto: "repeated_uint32_extension", json: "repeatedUint32Extension", swift: "ProtobufUnittest_repeatedUint32Extension"), defaultValue: [])

let ProtobufUnittest_Extensions_repeatedUint64Extension = SwiftProtobuf.MessageExtension<RepeatedExtensionField<SwiftProtobuf.ProtobufUInt64>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 34, fieldNames: .unique(proto: "repeated_uint64_extension", json: "repeatedUint64Extension", swift: "ProtobufUnittest_repeatedUint64Extension"), defaultValue: [])

let ProtobufUnittest_Extensions_repeatedSint32Extension = SwiftProtobuf.MessageExtension<RepeatedExtensionField<SwiftProtobuf.ProtobufSInt32>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 35, fieldNames: .unique(proto: "repeated_sint32_extension", json: "repeatedSint32Extension", swift: "ProtobufUnittest_repeatedSint32Extension"), defaultValue: [])

let ProtobufUnittest_Extensions_repeatedSint64Extension = SwiftProtobuf.MessageExtension<RepeatedExtensionField<SwiftProtobuf.ProtobufSInt64>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 36, fieldNames: .unique(proto: "repeated_sint64_extension", json: "repeatedSint64Extension", swift: "ProtobufUnittest_repeatedSint64Extension"), defaultValue: [])

let ProtobufUnittest_Extensions_repeatedFixed32Extension = SwiftProtobuf.MessageExtension<RepeatedExtensionField<SwiftProtobuf.ProtobufFixed32>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 37, fieldNames: .unique(proto: "repeated_fixed32_extension", json: "repeatedFixed32Extension", swift: "ProtobufUnittest_repeatedFixed32Extension"), defaultValue: [])

let ProtobufUnittest_Extensions_repeatedFixed64Extension = SwiftProtobuf.MessageExtension<RepeatedExtensionField<SwiftProtobuf.ProtobufFixed64>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 38, fieldNames: .unique(proto: "repeated_fixed64_extension", json: "repeatedFixed64Extension", swift: "ProtobufUnittest_repeatedFixed64Extension"), defaultValue: [])

let ProtobufUnittest_Extensions_repeatedSfixed32Extension = SwiftProtobuf.MessageExtension<RepeatedExtensionField<SwiftProtobuf.ProtobufSFixed32>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 39, fieldNames: .unique(proto: "repeated_sfixed32_extension", json: "repeatedSfixed32Extension", swift: "ProtobufUnittest_repeatedSfixed32Extension"), defaultValue: [])

let ProtobufUnittest_Extensions_repeatedSfixed64Extension = SwiftProtobuf.MessageExtension<RepeatedExtensionField<SwiftProtobuf.ProtobufSFixed64>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 40, fieldNames: .unique(proto: "repeated_sfixed64_extension", json: "repeatedSfixed64Extension", swift: "ProtobufUnittest_repeatedSfixed64Extension"), defaultValue: [])

let ProtobufUnittest_Extensions_repeatedFloatExtension = SwiftProtobuf.MessageExtension<RepeatedExtensionField<SwiftProtobuf.ProtobufFloat>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 41, fieldNames: .unique(proto: "repeated_float_extension", json: "repeatedFloatExtension", swift: "ProtobufUnittest_repeatedFloatExtension"), defaultValue: [])

let ProtobufUnittest_Extensions_repeatedDoubleExtension = SwiftProtobuf.MessageExtension<RepeatedExtensionField<SwiftProtobuf.ProtobufDouble>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 42, fieldNames: .unique(proto: "repeated_double_extension", json: "repeatedDoubleExtension", swift: "ProtobufUnittest_repeatedDoubleExtension"), defaultValue: [])

let ProtobufUnittest_Extensions_repeatedBoolExtension = SwiftProtobuf.MessageExtension<RepeatedExtensionField<SwiftProtobuf.ProtobufBool>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 43, fieldNames: .unique(proto: "repeated_bool_extension", json: "repeatedBoolExtension", swift: "ProtobufUnittest_repeatedBoolExtension"), defaultValue: [])

let ProtobufUnittest_Extensions_repeatedStringExtension = SwiftProtobuf.MessageExtension<RepeatedExtensionField<SwiftProtobuf.ProtobufString>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 44, fieldNames: .unique(proto: "repeated_string_extension", json: "repeatedStringExtension", swift: "ProtobufUnittest_repeatedStringExtension"), defaultValue: [])

let ProtobufUnittest_Extensions_repeatedBytesExtension = SwiftProtobuf.MessageExtension<RepeatedExtensionField<SwiftProtobuf.ProtobufBytes>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 45, fieldNames: .unique(proto: "repeated_bytes_extension", json: "repeatedBytesExtension", swift: "ProtobufUnittest_repeatedBytesExtension"), defaultValue: [])

let ProtobufUnittest_Extensions_repeatedGroupExtension = SwiftProtobuf.MessageExtension<RepeatedGroupExtensionField<ProtobufUnittest_RepeatedGroup_extension>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 46, fieldNames: .unique(proto: "repeatedgroup_extension", json: "repeatedgroupExtension", swift: "ProtobufUnittest_repeatedGroupExtension"), defaultValue: [])

let ProtobufUnittest_Extensions_repeatedNestedMessageExtension = SwiftProtobuf.MessageExtension<RepeatedMessageExtensionField<ProtobufUnittest_TestAllTypes.NestedMessage>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 48, fieldNames: .unique(proto: "repeated_nested_message_extension", json: "repeatedNestedMessageExtension", swift: "ProtobufUnittest_repeatedNestedMessageExtension"), defaultValue: [])

let ProtobufUnittest_Extensions_repeatedForeignMessageExtension = SwiftProtobuf.MessageExtension<RepeatedMessageExtensionField<ProtobufUnittest_ForeignMessage>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 49, fieldNames: .unique(proto: "repeated_foreign_message_extension", json: "repeatedForeignMessageExtension", swift: "ProtobufUnittest_repeatedForeignMessageExtension"), defaultValue: [])

let ProtobufUnittest_Extensions_repeatedImportMessageExtension = SwiftProtobuf.MessageExtension<RepeatedMessageExtensionField<ProtobufUnittestImport_ImportMessage>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 50, fieldNames: .unique(proto: "repeated_import_message_extension", json: "repeatedImportMessageExtension", swift: "ProtobufUnittest_repeatedImportMessageExtension"), defaultValue: [])

let ProtobufUnittest_Extensions_repeatedNestedEnumExtension = SwiftProtobuf.MessageExtension<RepeatedExtensionField<ProtobufUnittest_TestAllTypes.NestedEnum>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 51, fieldNames: .unique(proto: "repeated_nested_enum_extension", json: "repeatedNestedEnumExtension", swift: "ProtobufUnittest_repeatedNestedEnumExtension"), defaultValue: [])

let ProtobufUnittest_Extensions_repeatedForeignEnumExtension = SwiftProtobuf.MessageExtension<RepeatedExtensionField<ProtobufUnittest_ForeignEnum>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 52, fieldNames: .unique(proto: "repeated_foreign_enum_extension", json: "repeatedForeignEnumExtension", swift: "ProtobufUnittest_repeatedForeignEnumExtension"), defaultValue: [])

let ProtobufUnittest_Extensions_repeatedImportEnumExtension = SwiftProtobuf.MessageExtension<RepeatedExtensionField<ProtobufUnittestImport_ImportEnum>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 53, fieldNames: .unique(proto: "repeated_import_enum_extension", json: "repeatedImportEnumExtension", swift: "ProtobufUnittest_repeatedImportEnumExtension"), defaultValue: [])

let ProtobufUnittest_Extensions_repeatedStringPieceExtension = SwiftProtobuf.MessageExtension<RepeatedExtensionField<SwiftProtobuf.ProtobufString>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 54, fieldNames: .unique(proto: "repeated_string_piece_extension", json: "repeatedStringPieceExtension", swift: "ProtobufUnittest_repeatedStringPieceExtension"), defaultValue: [])

let ProtobufUnittest_Extensions_repeatedCordExtension = SwiftProtobuf.MessageExtension<RepeatedExtensionField<SwiftProtobuf.ProtobufString>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 55, fieldNames: .unique(proto: "repeated_cord_extension", json: "repeatedCordExtension", swift: "ProtobufUnittest_repeatedCordExtension"), defaultValue: [])

let ProtobufUnittest_Extensions_repeatedLazyMessageExtension = SwiftProtobuf.MessageExtension<RepeatedMessageExtensionField<ProtobufUnittest_TestAllTypes.NestedMessage>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 57, fieldNames: .unique(proto: "repeated_lazy_message_extension", json: "repeatedLazyMessageExtension", swift: "ProtobufUnittest_repeatedLazyMessageExtension"), defaultValue: [])

///   Singular with defaults
let ProtobufUnittest_Extensions_defaultInt32Extension = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 61, fieldNames: .unique(proto: "default_int32_extension", json: "defaultInt32Extension", swift: "ProtobufUnittest_defaultInt32Extension"), defaultValue: 41)

let ProtobufUnittest_Extensions_defaultInt64Extension = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufInt64>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 62, fieldNames: .unique(proto: "default_int64_extension", json: "defaultInt64Extension", swift: "ProtobufUnittest_defaultInt64Extension"), defaultValue: 42)

let ProtobufUnittest_Extensions_defaultUint32Extension = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufUInt32>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 63, fieldNames: .unique(proto: "default_uint32_extension", json: "defaultUint32Extension", swift: "ProtobufUnittest_defaultUint32Extension"), defaultValue: 43)

let ProtobufUnittest_Extensions_defaultUint64Extension = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufUInt64>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 64, fieldNames: .unique(proto: "default_uint64_extension", json: "defaultUint64Extension", swift: "ProtobufUnittest_defaultUint64Extension"), defaultValue: 44)

let ProtobufUnittest_Extensions_defaultSint32Extension = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufSInt32>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 65, fieldNames: .unique(proto: "default_sint32_extension", json: "defaultSint32Extension", swift: "ProtobufUnittest_defaultSint32Extension"), defaultValue: -45)

let ProtobufUnittest_Extensions_defaultSint64Extension = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufSInt64>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 66, fieldNames: .unique(proto: "default_sint64_extension", json: "defaultSint64Extension", swift: "ProtobufUnittest_defaultSint64Extension"), defaultValue: 46)

let ProtobufUnittest_Extensions_defaultFixed32Extension = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufFixed32>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 67, fieldNames: .unique(proto: "default_fixed32_extension", json: "defaultFixed32Extension", swift: "ProtobufUnittest_defaultFixed32Extension"), defaultValue: 47)

let ProtobufUnittest_Extensions_defaultFixed64Extension = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufFixed64>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 68, fieldNames: .unique(proto: "default_fixed64_extension", json: "defaultFixed64Extension", swift: "ProtobufUnittest_defaultFixed64Extension"), defaultValue: 48)

let ProtobufUnittest_Extensions_defaultSfixed32Extension = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufSFixed32>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 69, fieldNames: .unique(proto: "default_sfixed32_extension", json: "defaultSfixed32Extension", swift: "ProtobufUnittest_defaultSfixed32Extension"), defaultValue: 49)

let ProtobufUnittest_Extensions_defaultSfixed64Extension = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufSFixed64>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 70, fieldNames: .unique(proto: "default_sfixed64_extension", json: "defaultSfixed64Extension", swift: "ProtobufUnittest_defaultSfixed64Extension"), defaultValue: -50)

let ProtobufUnittest_Extensions_defaultFloatExtension = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufFloat>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 71, fieldNames: .unique(proto: "default_float_extension", json: "defaultFloatExtension", swift: "ProtobufUnittest_defaultFloatExtension"), defaultValue: 51.5)

let ProtobufUnittest_Extensions_defaultDoubleExtension = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufDouble>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 72, fieldNames: .unique(proto: "default_double_extension", json: "defaultDoubleExtension", swift: "ProtobufUnittest_defaultDoubleExtension"), defaultValue: 52000)

let ProtobufUnittest_Extensions_defaultBoolExtension = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufBool>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 73, fieldNames: .unique(proto: "default_bool_extension", json: "defaultBoolExtension", swift: "ProtobufUnittest_defaultBoolExtension"), defaultValue: true)

let ProtobufUnittest_Extensions_defaultStringExtension = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufString>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 74, fieldNames: .unique(proto: "default_string_extension", json: "defaultStringExtension", swift: "ProtobufUnittest_defaultStringExtension"), defaultValue: "hello")

let ProtobufUnittest_Extensions_defaultBytesExtension = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufBytes>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 75, fieldNames: .unique(proto: "default_bytes_extension", json: "defaultBytesExtension", swift: "ProtobufUnittest_defaultBytesExtension"), defaultValue: Data(bytes: [119, 111, 114, 108, 100]))

let ProtobufUnittest_Extensions_defaultNestedEnumExtension = SwiftProtobuf.MessageExtension<OptionalExtensionField<ProtobufUnittest_TestAllTypes.NestedEnum>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 81, fieldNames: .unique(proto: "default_nested_enum_extension", json: "defaultNestedEnumExtension", swift: "ProtobufUnittest_defaultNestedEnumExtension"), defaultValue: ProtobufUnittest_TestAllTypes.NestedEnum.bar)

let ProtobufUnittest_Extensions_defaultForeignEnumExtension = SwiftProtobuf.MessageExtension<OptionalExtensionField<ProtobufUnittest_ForeignEnum>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 82, fieldNames: .unique(proto: "default_foreign_enum_extension", json: "defaultForeignEnumExtension", swift: "ProtobufUnittest_defaultForeignEnumExtension"), defaultValue: ProtobufUnittest_ForeignEnum.foreignBar)

let ProtobufUnittest_Extensions_defaultImportEnumExtension = SwiftProtobuf.MessageExtension<OptionalExtensionField<ProtobufUnittestImport_ImportEnum>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 83, fieldNames: .unique(proto: "default_import_enum_extension", json: "defaultImportEnumExtension", swift: "ProtobufUnittest_defaultImportEnumExtension"), defaultValue: ProtobufUnittestImport_ImportEnum.importBar)

let ProtobufUnittest_Extensions_defaultStringPieceExtension = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufString>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 84, fieldNames: .unique(proto: "default_string_piece_extension", json: "defaultStringPieceExtension", swift: "ProtobufUnittest_defaultStringPieceExtension"), defaultValue: "abc")

let ProtobufUnittest_Extensions_defaultCordExtension = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufString>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 85, fieldNames: .unique(proto: "default_cord_extension", json: "defaultCordExtension", swift: "ProtobufUnittest_defaultCordExtension"), defaultValue: "123")

///   For oneof test
let ProtobufUnittest_Extensions_oneofUint32Extension = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufUInt32>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 111, fieldNames: .unique(proto: "oneof_uint32_extension", json: "oneofUint32Extension", swift: "ProtobufUnittest_oneofUint32Extension"), defaultValue: 0)

let ProtobufUnittest_Extensions_oneofNestedMessageExtension = SwiftProtobuf.MessageExtension<OptionalMessageExtensionField<ProtobufUnittest_TestAllTypes.NestedMessage>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 112, fieldNames: .unique(proto: "oneof_nested_message_extension", json: "oneofNestedMessageExtension", swift: "ProtobufUnittest_oneofNestedMessageExtension"), defaultValue: ProtobufUnittest_TestAllTypes.NestedMessage())

let ProtobufUnittest_Extensions_oneofStringExtension = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufString>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 113, fieldNames: .unique(proto: "oneof_string_extension", json: "oneofStringExtension", swift: "ProtobufUnittest_oneofStringExtension"), defaultValue: "")

let ProtobufUnittest_Extensions_oneofBytesExtension = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufBytes>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 114, fieldNames: .unique(proto: "oneof_bytes_extension", json: "oneofBytesExtension", swift: "ProtobufUnittest_oneofBytesExtension"), defaultValue: Data())

let ProtobufUnittest_Extensions_myExtensionString = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufString>, ProtobufUnittest_TestFieldOrderings>(protoFieldNumber: 50, fieldNames: .unique(proto: "my_extension_string", json: "myExtensionString", swift: "ProtobufUnittest_myExtensionString"), defaultValue: "")

let ProtobufUnittest_Extensions_myExtensionInt = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, ProtobufUnittest_TestFieldOrderings>(protoFieldNumber: 5, fieldNames: .unique(proto: "my_extension_int", json: "myExtensionInt", swift: "ProtobufUnittest_myExtensionInt"), defaultValue: 0)

let ProtobufUnittest_Extensions_packedInt32Extension = SwiftProtobuf.MessageExtension<PackedExtensionField<SwiftProtobuf.ProtobufInt32>, ProtobufUnittest_TestPackedExtensions>(protoFieldNumber: 90, fieldNames: .unique(proto: "packed_int32_extension", json: "packedInt32Extension", swift: "ProtobufUnittest_packedInt32Extension"), defaultValue: [])

let ProtobufUnittest_Extensions_packedInt64Extension = SwiftProtobuf.MessageExtension<PackedExtensionField<SwiftProtobuf.ProtobufInt64>, ProtobufUnittest_TestPackedExtensions>(protoFieldNumber: 91, fieldNames: .unique(proto: "packed_int64_extension", json: "packedInt64Extension", swift: "ProtobufUnittest_packedInt64Extension"), defaultValue: [])

let ProtobufUnittest_Extensions_packedUint32Extension = SwiftProtobuf.MessageExtension<PackedExtensionField<SwiftProtobuf.ProtobufUInt32>, ProtobufUnittest_TestPackedExtensions>(protoFieldNumber: 92, fieldNames: .unique(proto: "packed_uint32_extension", json: "packedUint32Extension", swift: "ProtobufUnittest_packedUint32Extension"), defaultValue: [])

let ProtobufUnittest_Extensions_packedUint64Extension = SwiftProtobuf.MessageExtension<PackedExtensionField<SwiftProtobuf.ProtobufUInt64>, ProtobufUnittest_TestPackedExtensions>(protoFieldNumber: 93, fieldNames: .unique(proto: "packed_uint64_extension", json: "packedUint64Extension", swift: "ProtobufUnittest_packedUint64Extension"), defaultValue: [])

let ProtobufUnittest_Extensions_packedSint32Extension = SwiftProtobuf.MessageExtension<PackedExtensionField<SwiftProtobuf.ProtobufSInt32>, ProtobufUnittest_TestPackedExtensions>(protoFieldNumber: 94, fieldNames: .unique(proto: "packed_sint32_extension", json: "packedSint32Extension", swift: "ProtobufUnittest_packedSint32Extension"), defaultValue: [])

let ProtobufUnittest_Extensions_packedSint64Extension = SwiftProtobuf.MessageExtension<PackedExtensionField<SwiftProtobuf.ProtobufSInt64>, ProtobufUnittest_TestPackedExtensions>(protoFieldNumber: 95, fieldNames: .unique(proto: "packed_sint64_extension", json: "packedSint64Extension", swift: "ProtobufUnittest_packedSint64Extension"), defaultValue: [])

let ProtobufUnittest_Extensions_packedFixed32Extension = SwiftProtobuf.MessageExtension<PackedExtensionField<SwiftProtobuf.ProtobufFixed32>, ProtobufUnittest_TestPackedExtensions>(protoFieldNumber: 96, fieldNames: .unique(proto: "packed_fixed32_extension", json: "packedFixed32Extension", swift: "ProtobufUnittest_packedFixed32Extension"), defaultValue: [])

let ProtobufUnittest_Extensions_packedFixed64Extension = SwiftProtobuf.MessageExtension<PackedExtensionField<SwiftProtobuf.ProtobufFixed64>, ProtobufUnittest_TestPackedExtensions>(protoFieldNumber: 97, fieldNames: .unique(proto: "packed_fixed64_extension", json: "packedFixed64Extension", swift: "ProtobufUnittest_packedFixed64Extension"), defaultValue: [])

let ProtobufUnittest_Extensions_packedSfixed32Extension = SwiftProtobuf.MessageExtension<PackedExtensionField<SwiftProtobuf.ProtobufSFixed32>, ProtobufUnittest_TestPackedExtensions>(protoFieldNumber: 98, fieldNames: .unique(proto: "packed_sfixed32_extension", json: "packedSfixed32Extension", swift: "ProtobufUnittest_packedSfixed32Extension"), defaultValue: [])

let ProtobufUnittest_Extensions_packedSfixed64Extension = SwiftProtobuf.MessageExtension<PackedExtensionField<SwiftProtobuf.ProtobufSFixed64>, ProtobufUnittest_TestPackedExtensions>(protoFieldNumber: 99, fieldNames: .unique(proto: "packed_sfixed64_extension", json: "packedSfixed64Extension", swift: "ProtobufUnittest_packedSfixed64Extension"), defaultValue: [])

let ProtobufUnittest_Extensions_packedFloatExtension = SwiftProtobuf.MessageExtension<PackedExtensionField<SwiftProtobuf.ProtobufFloat>, ProtobufUnittest_TestPackedExtensions>(protoFieldNumber: 100, fieldNames: .unique(proto: "packed_float_extension", json: "packedFloatExtension", swift: "ProtobufUnittest_packedFloatExtension"), defaultValue: [])

let ProtobufUnittest_Extensions_packedDoubleExtension = SwiftProtobuf.MessageExtension<PackedExtensionField<SwiftProtobuf.ProtobufDouble>, ProtobufUnittest_TestPackedExtensions>(protoFieldNumber: 101, fieldNames: .unique(proto: "packed_double_extension", json: "packedDoubleExtension", swift: "ProtobufUnittest_packedDoubleExtension"), defaultValue: [])

let ProtobufUnittest_Extensions_packedBoolExtension = SwiftProtobuf.MessageExtension<PackedExtensionField<SwiftProtobuf.ProtobufBool>, ProtobufUnittest_TestPackedExtensions>(protoFieldNumber: 102, fieldNames: .unique(proto: "packed_bool_extension", json: "packedBoolExtension", swift: "ProtobufUnittest_packedBoolExtension"), defaultValue: [])

let ProtobufUnittest_Extensions_packedEnumExtension = SwiftProtobuf.MessageExtension<PackedExtensionField<ProtobufUnittest_ForeignEnum>, ProtobufUnittest_TestPackedExtensions>(protoFieldNumber: 103, fieldNames: .unique(proto: "packed_enum_extension", json: "packedEnumExtension", swift: "ProtobufUnittest_packedEnumExtension"), defaultValue: [])

let ProtobufUnittest_Extensions_unpackedInt32Extension = SwiftProtobuf.MessageExtension<RepeatedExtensionField<SwiftProtobuf.ProtobufInt32>, ProtobufUnittest_TestUnpackedExtensions>(protoFieldNumber: 90, fieldNames: .unique(proto: "unpacked_int32_extension", json: "unpackedInt32Extension", swift: "ProtobufUnittest_unpackedInt32Extension"), defaultValue: [])

let ProtobufUnittest_Extensions_unpackedInt64Extension = SwiftProtobuf.MessageExtension<RepeatedExtensionField<SwiftProtobuf.ProtobufInt64>, ProtobufUnittest_TestUnpackedExtensions>(protoFieldNumber: 91, fieldNames: .unique(proto: "unpacked_int64_extension", json: "unpackedInt64Extension", swift: "ProtobufUnittest_unpackedInt64Extension"), defaultValue: [])

let ProtobufUnittest_Extensions_unpackedUint32Extension = SwiftProtobuf.MessageExtension<RepeatedExtensionField<SwiftProtobuf.ProtobufUInt32>, ProtobufUnittest_TestUnpackedExtensions>(protoFieldNumber: 92, fieldNames: .unique(proto: "unpacked_uint32_extension", json: "unpackedUint32Extension", swift: "ProtobufUnittest_unpackedUint32Extension"), defaultValue: [])

let ProtobufUnittest_Extensions_unpackedUint64Extension = SwiftProtobuf.MessageExtension<RepeatedExtensionField<SwiftProtobuf.ProtobufUInt64>, ProtobufUnittest_TestUnpackedExtensions>(protoFieldNumber: 93, fieldNames: .unique(proto: "unpacked_uint64_extension", json: "unpackedUint64Extension", swift: "ProtobufUnittest_unpackedUint64Extension"), defaultValue: [])

let ProtobufUnittest_Extensions_unpackedSint32Extension = SwiftProtobuf.MessageExtension<RepeatedExtensionField<SwiftProtobuf.ProtobufSInt32>, ProtobufUnittest_TestUnpackedExtensions>(protoFieldNumber: 94, fieldNames: .unique(proto: "unpacked_sint32_extension", json: "unpackedSint32Extension", swift: "ProtobufUnittest_unpackedSint32Extension"), defaultValue: [])

let ProtobufUnittest_Extensions_unpackedSint64Extension = SwiftProtobuf.MessageExtension<RepeatedExtensionField<SwiftProtobuf.ProtobufSInt64>, ProtobufUnittest_TestUnpackedExtensions>(protoFieldNumber: 95, fieldNames: .unique(proto: "unpacked_sint64_extension", json: "unpackedSint64Extension", swift: "ProtobufUnittest_unpackedSint64Extension"), defaultValue: [])

let ProtobufUnittest_Extensions_unpackedFixed32Extension = SwiftProtobuf.MessageExtension<RepeatedExtensionField<SwiftProtobuf.ProtobufFixed32>, ProtobufUnittest_TestUnpackedExtensions>(protoFieldNumber: 96, fieldNames: .unique(proto: "unpacked_fixed32_extension", json: "unpackedFixed32Extension", swift: "ProtobufUnittest_unpackedFixed32Extension"), defaultValue: [])

let ProtobufUnittest_Extensions_unpackedFixed64Extension = SwiftProtobuf.MessageExtension<RepeatedExtensionField<SwiftProtobuf.ProtobufFixed64>, ProtobufUnittest_TestUnpackedExtensions>(protoFieldNumber: 97, fieldNames: .unique(proto: "unpacked_fixed64_extension", json: "unpackedFixed64Extension", swift: "ProtobufUnittest_unpackedFixed64Extension"), defaultValue: [])

let ProtobufUnittest_Extensions_unpackedSfixed32Extension = SwiftProtobuf.MessageExtension<RepeatedExtensionField<SwiftProtobuf.ProtobufSFixed32>, ProtobufUnittest_TestUnpackedExtensions>(protoFieldNumber: 98, fieldNames: .unique(proto: "unpacked_sfixed32_extension", json: "unpackedSfixed32Extension", swift: "ProtobufUnittest_unpackedSfixed32Extension"), defaultValue: [])

let ProtobufUnittest_Extensions_unpackedSfixed64Extension = SwiftProtobuf.MessageExtension<RepeatedExtensionField<SwiftProtobuf.ProtobufSFixed64>, ProtobufUnittest_TestUnpackedExtensions>(protoFieldNumber: 99, fieldNames: .unique(proto: "unpacked_sfixed64_extension", json: "unpackedSfixed64Extension", swift: "ProtobufUnittest_unpackedSfixed64Extension"), defaultValue: [])

let ProtobufUnittest_Extensions_unpackedFloatExtension = SwiftProtobuf.MessageExtension<RepeatedExtensionField<SwiftProtobuf.ProtobufFloat>, ProtobufUnittest_TestUnpackedExtensions>(protoFieldNumber: 100, fieldNames: .unique(proto: "unpacked_float_extension", json: "unpackedFloatExtension", swift: "ProtobufUnittest_unpackedFloatExtension"), defaultValue: [])

let ProtobufUnittest_Extensions_unpackedDoubleExtension = SwiftProtobuf.MessageExtension<RepeatedExtensionField<SwiftProtobuf.ProtobufDouble>, ProtobufUnittest_TestUnpackedExtensions>(protoFieldNumber: 101, fieldNames: .unique(proto: "unpacked_double_extension", json: "unpackedDoubleExtension", swift: "ProtobufUnittest_unpackedDoubleExtension"), defaultValue: [])

let ProtobufUnittest_Extensions_unpackedBoolExtension = SwiftProtobuf.MessageExtension<RepeatedExtensionField<SwiftProtobuf.ProtobufBool>, ProtobufUnittest_TestUnpackedExtensions>(protoFieldNumber: 102, fieldNames: .unique(proto: "unpacked_bool_extension", json: "unpackedBoolExtension", swift: "ProtobufUnittest_unpackedBoolExtension"), defaultValue: [])

let ProtobufUnittest_Extensions_unpackedEnumExtension = SwiftProtobuf.MessageExtension<RepeatedExtensionField<ProtobufUnittest_ForeignEnum>, ProtobufUnittest_TestUnpackedExtensions>(protoFieldNumber: 103, fieldNames: .unique(proto: "unpacked_enum_extension", json: "unpackedEnumExtension", swift: "ProtobufUnittest_unpackedEnumExtension"), defaultValue: [])

let ProtobufUnittest_Extensions_testAllTypes = SwiftProtobuf.MessageExtension<OptionalMessageExtensionField<ProtobufUnittest_TestAllTypes>, ProtobufUnittest_TestHugeFieldNumbers>(protoFieldNumber: 536860000, fieldNames: .unique(proto: "test_all_types", json: "testAllTypes", swift: "ProtobufUnittest_testAllTypes"), defaultValue: ProtobufUnittest_TestAllTypes())

func ==(lhs: ProtobufUnittest_TestAllTypes.OneOf_OneofField, rhs: ProtobufUnittest_TestAllTypes.OneOf_OneofField) -> Bool {
  switch (lhs, rhs) {
  case (.oneofUint32(let l), .oneofUint32(let r)): return l == r
  case (.oneofNestedMessage(let l), .oneofNestedMessage(let r)): return l == r
  case (.oneofString(let l), .oneofString(let r)): return l == r
  case (.oneofBytes(let l), .oneofBytes(let r)): return l == r
  case (.None, .None): return true
  default: return false
  }
}

extension ProtobufUnittest_TestAllExtensions {
  ///   Check for bug where string extensions declared in tested scope did not
  ///   compile.
  var ProtobufUnittest_TestNestedExtension_test: String {
    get {return getExtensionValue(ext: ProtobufUnittest_TestNestedExtension.Extensions.test) ?? "test"}
    set {setExtensionValue(ext: ProtobufUnittest_TestNestedExtension.Extensions.test, value: newValue)}
  }
  var hasProtobufUnittest_TestNestedExtension_test: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestNestedExtension.Extensions.test)
  }
  mutating func clearProtobufUnittest_TestNestedExtension_test() {
    clearExtensionValue(ext: ProtobufUnittest_TestNestedExtension.Extensions.test)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  ///   Used to test if generated extension name is correct when there are
  ///   underscores.
  var ProtobufUnittest_TestNestedExtension_nestedStringExtension: String {
    get {return getExtensionValue(ext: ProtobufUnittest_TestNestedExtension.Extensions.nestedStringExtension) ?? ""}
    set {setExtensionValue(ext: ProtobufUnittest_TestNestedExtension.Extensions.nestedStringExtension, value: newValue)}
  }
  var hasProtobufUnittest_TestNestedExtension_nestedStringExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestNestedExtension.Extensions.nestedStringExtension)
  }
  mutating func clearProtobufUnittest_TestNestedExtension_nestedStringExtension() {
    clearExtensionValue(ext: ProtobufUnittest_TestNestedExtension.Extensions.nestedStringExtension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_TestRequired_single: ProtobufUnittest_TestRequired {
    get {return getExtensionValue(ext: ProtobufUnittest_TestRequired.Extensions.single) ?? ProtobufUnittest_TestRequired()}
    set {setExtensionValue(ext: ProtobufUnittest_TestRequired.Extensions.single, value: newValue)}
  }
  var hasProtobufUnittest_TestRequired_single: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestRequired.Extensions.single)
  }
  mutating func clearProtobufUnittest_TestRequired_single() {
    clearExtensionValue(ext: ProtobufUnittest_TestRequired.Extensions.single)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_TestRequired_multi: [ProtobufUnittest_TestRequired] {
    get {return getExtensionValue(ext: ProtobufUnittest_TestRequired.Extensions.multi)}
    set {setExtensionValue(ext: ProtobufUnittest_TestRequired.Extensions.multi, value: newValue)}
  }
  var hasProtobufUnittest_TestRequired_multi: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestRequired.Extensions.multi)
  }
  mutating func clearProtobufUnittest_TestRequired_multi() {
    clearExtensionValue(ext: ProtobufUnittest_TestRequired.Extensions.multi)
  }
}

func ==(lhs: ProtobufUnittest_TestOneof.OneOf_Foo, rhs: ProtobufUnittest_TestOneof.OneOf_Foo) -> Bool {
  switch (lhs, rhs) {
  case (.fooInt(let l), .fooInt(let r)): return l == r
  case (.fooString(let l), .fooString(let r)): return l == r
  case (.fooMessage(let l), .fooMessage(let r)): return l == r
  case (.fooGroup(let l), .fooGroup(let r)): return l == r
  case (.None, .None): return true
  default: return false
  }
}

func ==(lhs: ProtobufUnittest_TestOneof2.OneOf_Foo, rhs: ProtobufUnittest_TestOneof2.OneOf_Foo) -> Bool {
  switch (lhs, rhs) {
  case (.fooInt(let l), .fooInt(let r)): return l == r
  case (.fooString(let l), .fooString(let r)): return l == r
  case (.fooCord(let l), .fooCord(let r)): return l == r
  case (.fooStringPiece(let l), .fooStringPiece(let r)): return l == r
  case (.fooBytes(let l), .fooBytes(let r)): return l == r
  case (.fooEnum(let l), .fooEnum(let r)): return l == r
  case (.fooMessage(let l), .fooMessage(let r)): return l == r
  case (.fooGroup(let l), .fooGroup(let r)): return l == r
  case (.fooLazyMessage(let l), .fooLazyMessage(let r)): return l == r
  case (.None, .None): return true
  default: return false
  }
}

func ==(lhs: ProtobufUnittest_TestOneof2.OneOf_Bar, rhs: ProtobufUnittest_TestOneof2.OneOf_Bar) -> Bool {
  switch (lhs, rhs) {
  case (.barInt(let l), .barInt(let r)): return l == r
  case (.barString(let l), .barString(let r)): return l == r
  case (.barCord(let l), .barCord(let r)): return l == r
  case (.barStringPiece(let l), .barStringPiece(let r)): return l == r
  case (.barBytes(let l), .barBytes(let r)): return l == r
  case (.barEnum(let l), .barEnum(let r)): return l == r
  case (.None, .None): return true
  default: return false
  }
}

func ==(lhs: ProtobufUnittest_TestRequiredOneof.OneOf_Foo, rhs: ProtobufUnittest_TestRequiredOneof.OneOf_Foo) -> Bool {
  switch (lhs, rhs) {
  case (.fooInt(let l), .fooInt(let r)): return l == r
  case (.fooString(let l), .fooString(let r)): return l == r
  case (.fooMessage(let l), .fooMessage(let r)): return l == r
  case (.None, .None): return true
  default: return false
  }
}

extension ProtobufUnittest_TestParsingMerge {
  var ProtobufUnittest_TestParsingMerge_optionalExt: ProtobufUnittest_TestAllTypes {
    get {return getExtensionValue(ext: ProtobufUnittest_TestParsingMerge.Extensions.optionalExt) ?? ProtobufUnittest_TestAllTypes()}
    set {setExtensionValue(ext: ProtobufUnittest_TestParsingMerge.Extensions.optionalExt, value: newValue)}
  }
  var hasProtobufUnittest_TestParsingMerge_optionalExt: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestParsingMerge.Extensions.optionalExt)
  }
  mutating func clearProtobufUnittest_TestParsingMerge_optionalExt() {
    clearExtensionValue(ext: ProtobufUnittest_TestParsingMerge.Extensions.optionalExt)
  }
}

extension ProtobufUnittest_TestParsingMerge {
  var ProtobufUnittest_TestParsingMerge_repeatedExt: [ProtobufUnittest_TestAllTypes] {
    get {return getExtensionValue(ext: ProtobufUnittest_TestParsingMerge.Extensions.repeatedExt)}
    set {setExtensionValue(ext: ProtobufUnittest_TestParsingMerge.Extensions.repeatedExt, value: newValue)}
  }
  var hasProtobufUnittest_TestParsingMerge_repeatedExt: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestParsingMerge.Extensions.repeatedExt)
  }
  mutating func clearProtobufUnittest_TestParsingMerge_repeatedExt() {
    clearExtensionValue(ext: ProtobufUnittest_TestParsingMerge.Extensions.repeatedExt)
  }
}

func ==(lhs: ProtobufUnittest_TestHugeFieldNumbers.OneOf_OneofField, rhs: ProtobufUnittest_TestHugeFieldNumbers.OneOf_OneofField) -> Bool {
  switch (lhs, rhs) {
  case (.oneofUint32(let l), .oneofUint32(let r)): return l == r
  case (.oneofTestAllTypes(let l), .oneofTestAllTypes(let r)): return l == r
  case (.oneofString(let l), .oneofString(let r)): return l == r
  case (.oneofBytes(let l), .oneofBytes(let r)): return l == r
  case (.None, .None): return true
  default: return false
  }
}

extension ProtobufUnittest_TestAllExtensions {
  ///   Singular
  var ProtobufUnittest_optionalInt32Extension: Int32 {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optionalInt32Extension) ?? 0}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optionalInt32Extension, value: newValue)}
  }
  var hasProtobufUnittest_optionalInt32Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optionalInt32Extension)
  }
  mutating func clearProtobufUnittest_optionalInt32Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optionalInt32Extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_optionalInt64Extension: Int64 {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optionalInt64Extension) ?? 0}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optionalInt64Extension, value: newValue)}
  }
  var hasProtobufUnittest_optionalInt64Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optionalInt64Extension)
  }
  mutating func clearProtobufUnittest_optionalInt64Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optionalInt64Extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_optionalUint32Extension: UInt32 {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optionalUint32Extension) ?? 0}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optionalUint32Extension, value: newValue)}
  }
  var hasProtobufUnittest_optionalUint32Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optionalUint32Extension)
  }
  mutating func clearProtobufUnittest_optionalUint32Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optionalUint32Extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_optionalUint64Extension: UInt64 {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optionalUint64Extension) ?? 0}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optionalUint64Extension, value: newValue)}
  }
  var hasProtobufUnittest_optionalUint64Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optionalUint64Extension)
  }
  mutating func clearProtobufUnittest_optionalUint64Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optionalUint64Extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_optionalSint32Extension: Int32 {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optionalSint32Extension) ?? 0}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optionalSint32Extension, value: newValue)}
  }
  var hasProtobufUnittest_optionalSint32Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optionalSint32Extension)
  }
  mutating func clearProtobufUnittest_optionalSint32Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optionalSint32Extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_optionalSint64Extension: Int64 {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optionalSint64Extension) ?? 0}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optionalSint64Extension, value: newValue)}
  }
  var hasProtobufUnittest_optionalSint64Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optionalSint64Extension)
  }
  mutating func clearProtobufUnittest_optionalSint64Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optionalSint64Extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_optionalFixed32Extension: UInt32 {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optionalFixed32Extension) ?? 0}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optionalFixed32Extension, value: newValue)}
  }
  var hasProtobufUnittest_optionalFixed32Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optionalFixed32Extension)
  }
  mutating func clearProtobufUnittest_optionalFixed32Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optionalFixed32Extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_optionalFixed64Extension: UInt64 {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optionalFixed64Extension) ?? 0}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optionalFixed64Extension, value: newValue)}
  }
  var hasProtobufUnittest_optionalFixed64Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optionalFixed64Extension)
  }
  mutating func clearProtobufUnittest_optionalFixed64Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optionalFixed64Extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_optionalSfixed32Extension: Int32 {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optionalSfixed32Extension) ?? 0}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optionalSfixed32Extension, value: newValue)}
  }
  var hasProtobufUnittest_optionalSfixed32Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optionalSfixed32Extension)
  }
  mutating func clearProtobufUnittest_optionalSfixed32Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optionalSfixed32Extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_optionalSfixed64Extension: Int64 {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optionalSfixed64Extension) ?? 0}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optionalSfixed64Extension, value: newValue)}
  }
  var hasProtobufUnittest_optionalSfixed64Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optionalSfixed64Extension)
  }
  mutating func clearProtobufUnittest_optionalSfixed64Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optionalSfixed64Extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_optionalFloatExtension: Float {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optionalFloatExtension) ?? 0}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optionalFloatExtension, value: newValue)}
  }
  var hasProtobufUnittest_optionalFloatExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optionalFloatExtension)
  }
  mutating func clearProtobufUnittest_optionalFloatExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optionalFloatExtension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_optionalDoubleExtension: Double {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optionalDoubleExtension) ?? 0}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optionalDoubleExtension, value: newValue)}
  }
  var hasProtobufUnittest_optionalDoubleExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optionalDoubleExtension)
  }
  mutating func clearProtobufUnittest_optionalDoubleExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optionalDoubleExtension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_optionalBoolExtension: Bool {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optionalBoolExtension) ?? false}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optionalBoolExtension, value: newValue)}
  }
  var hasProtobufUnittest_optionalBoolExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optionalBoolExtension)
  }
  mutating func clearProtobufUnittest_optionalBoolExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optionalBoolExtension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_optionalStringExtension: String {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optionalStringExtension) ?? ""}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optionalStringExtension, value: newValue)}
  }
  var hasProtobufUnittest_optionalStringExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optionalStringExtension)
  }
  mutating func clearProtobufUnittest_optionalStringExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optionalStringExtension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_optionalBytesExtension: Data {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optionalBytesExtension) ?? Data()}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optionalBytesExtension, value: newValue)}
  }
  var hasProtobufUnittest_optionalBytesExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optionalBytesExtension)
  }
  mutating func clearProtobufUnittest_optionalBytesExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optionalBytesExtension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_optionalGroupExtension: ProtobufUnittest_OptionalGroup_extension {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optionalGroupExtension) ?? ProtobufUnittest_OptionalGroup_extension()}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optionalGroupExtension, value: newValue)}
  }
  var hasProtobufUnittest_optionalGroupExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optionalGroupExtension)
  }
  mutating func clearProtobufUnittest_optionalGroupExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optionalGroupExtension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_optionalNestedMessageExtension: ProtobufUnittest_TestAllTypes.NestedMessage {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optionalNestedMessageExtension) ?? ProtobufUnittest_TestAllTypes.NestedMessage()}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optionalNestedMessageExtension, value: newValue)}
  }
  var hasProtobufUnittest_optionalNestedMessageExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optionalNestedMessageExtension)
  }
  mutating func clearProtobufUnittest_optionalNestedMessageExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optionalNestedMessageExtension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_optionalForeignMessageExtension: ProtobufUnittest_ForeignMessage {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optionalForeignMessageExtension) ?? ProtobufUnittest_ForeignMessage()}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optionalForeignMessageExtension, value: newValue)}
  }
  var hasProtobufUnittest_optionalForeignMessageExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optionalForeignMessageExtension)
  }
  mutating func clearProtobufUnittest_optionalForeignMessageExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optionalForeignMessageExtension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_optionalImportMessageExtension: ProtobufUnittestImport_ImportMessage {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optionalImportMessageExtension) ?? ProtobufUnittestImport_ImportMessage()}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optionalImportMessageExtension, value: newValue)}
  }
  var hasProtobufUnittest_optionalImportMessageExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optionalImportMessageExtension)
  }
  mutating func clearProtobufUnittest_optionalImportMessageExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optionalImportMessageExtension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_optionalNestedEnumExtension: ProtobufUnittest_TestAllTypes.NestedEnum {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optionalNestedEnumExtension) ?? ProtobufUnittest_TestAllTypes.NestedEnum.foo}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optionalNestedEnumExtension, value: newValue)}
  }
  var hasProtobufUnittest_optionalNestedEnumExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optionalNestedEnumExtension)
  }
  mutating func clearProtobufUnittest_optionalNestedEnumExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optionalNestedEnumExtension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_optionalForeignEnumExtension: ProtobufUnittest_ForeignEnum {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optionalForeignEnumExtension) ?? ProtobufUnittest_ForeignEnum.foreignFoo}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optionalForeignEnumExtension, value: newValue)}
  }
  var hasProtobufUnittest_optionalForeignEnumExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optionalForeignEnumExtension)
  }
  mutating func clearProtobufUnittest_optionalForeignEnumExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optionalForeignEnumExtension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_optionalImportEnumExtension: ProtobufUnittestImport_ImportEnum {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optionalImportEnumExtension) ?? ProtobufUnittestImport_ImportEnum.importFoo}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optionalImportEnumExtension, value: newValue)}
  }
  var hasProtobufUnittest_optionalImportEnumExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optionalImportEnumExtension)
  }
  mutating func clearProtobufUnittest_optionalImportEnumExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optionalImportEnumExtension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_optionalStringPieceExtension: String {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optionalStringPieceExtension) ?? ""}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optionalStringPieceExtension, value: newValue)}
  }
  var hasProtobufUnittest_optionalStringPieceExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optionalStringPieceExtension)
  }
  mutating func clearProtobufUnittest_optionalStringPieceExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optionalStringPieceExtension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_optionalCordExtension: String {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optionalCordExtension) ?? ""}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optionalCordExtension, value: newValue)}
  }
  var hasProtobufUnittest_optionalCordExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optionalCordExtension)
  }
  mutating func clearProtobufUnittest_optionalCordExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optionalCordExtension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_optionalPublicImportMessageExtension: ProtobufUnittestImport_PublicImportMessage {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optionalPublicImportMessageExtension) ?? ProtobufUnittestImport_PublicImportMessage()}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optionalPublicImportMessageExtension, value: newValue)}
  }
  var hasProtobufUnittest_optionalPublicImportMessageExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optionalPublicImportMessageExtension)
  }
  mutating func clearProtobufUnittest_optionalPublicImportMessageExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optionalPublicImportMessageExtension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_optionalLazyMessageExtension: ProtobufUnittest_TestAllTypes.NestedMessage {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_optionalLazyMessageExtension) ?? ProtobufUnittest_TestAllTypes.NestedMessage()}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_optionalLazyMessageExtension, value: newValue)}
  }
  var hasProtobufUnittest_optionalLazyMessageExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_optionalLazyMessageExtension)
  }
  mutating func clearProtobufUnittest_optionalLazyMessageExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_optionalLazyMessageExtension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  ///   Repeated
  var ProtobufUnittest_repeatedInt32Extension: [Int32] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeatedInt32Extension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeatedInt32Extension, value: newValue)}
  }
  var hasProtobufUnittest_repeatedInt32Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_repeatedInt32Extension)
  }
  mutating func clearProtobufUnittest_repeatedInt32Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_repeatedInt32Extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_repeatedInt64Extension: [Int64] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeatedInt64Extension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeatedInt64Extension, value: newValue)}
  }
  var hasProtobufUnittest_repeatedInt64Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_repeatedInt64Extension)
  }
  mutating func clearProtobufUnittest_repeatedInt64Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_repeatedInt64Extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_repeatedUint32Extension: [UInt32] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeatedUint32Extension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeatedUint32Extension, value: newValue)}
  }
  var hasProtobufUnittest_repeatedUint32Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_repeatedUint32Extension)
  }
  mutating func clearProtobufUnittest_repeatedUint32Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_repeatedUint32Extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_repeatedUint64Extension: [UInt64] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeatedUint64Extension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeatedUint64Extension, value: newValue)}
  }
  var hasProtobufUnittest_repeatedUint64Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_repeatedUint64Extension)
  }
  mutating func clearProtobufUnittest_repeatedUint64Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_repeatedUint64Extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_repeatedSint32Extension: [Int32] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeatedSint32Extension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeatedSint32Extension, value: newValue)}
  }
  var hasProtobufUnittest_repeatedSint32Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_repeatedSint32Extension)
  }
  mutating func clearProtobufUnittest_repeatedSint32Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_repeatedSint32Extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_repeatedSint64Extension: [Int64] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeatedSint64Extension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeatedSint64Extension, value: newValue)}
  }
  var hasProtobufUnittest_repeatedSint64Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_repeatedSint64Extension)
  }
  mutating func clearProtobufUnittest_repeatedSint64Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_repeatedSint64Extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_repeatedFixed32Extension: [UInt32] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeatedFixed32Extension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeatedFixed32Extension, value: newValue)}
  }
  var hasProtobufUnittest_repeatedFixed32Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_repeatedFixed32Extension)
  }
  mutating func clearProtobufUnittest_repeatedFixed32Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_repeatedFixed32Extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_repeatedFixed64Extension: [UInt64] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeatedFixed64Extension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeatedFixed64Extension, value: newValue)}
  }
  var hasProtobufUnittest_repeatedFixed64Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_repeatedFixed64Extension)
  }
  mutating func clearProtobufUnittest_repeatedFixed64Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_repeatedFixed64Extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_repeatedSfixed32Extension: [Int32] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeatedSfixed32Extension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeatedSfixed32Extension, value: newValue)}
  }
  var hasProtobufUnittest_repeatedSfixed32Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_repeatedSfixed32Extension)
  }
  mutating func clearProtobufUnittest_repeatedSfixed32Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_repeatedSfixed32Extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_repeatedSfixed64Extension: [Int64] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeatedSfixed64Extension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeatedSfixed64Extension, value: newValue)}
  }
  var hasProtobufUnittest_repeatedSfixed64Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_repeatedSfixed64Extension)
  }
  mutating func clearProtobufUnittest_repeatedSfixed64Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_repeatedSfixed64Extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_repeatedFloatExtension: [Float] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeatedFloatExtension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeatedFloatExtension, value: newValue)}
  }
  var hasProtobufUnittest_repeatedFloatExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_repeatedFloatExtension)
  }
  mutating func clearProtobufUnittest_repeatedFloatExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_repeatedFloatExtension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_repeatedDoubleExtension: [Double] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeatedDoubleExtension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeatedDoubleExtension, value: newValue)}
  }
  var hasProtobufUnittest_repeatedDoubleExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_repeatedDoubleExtension)
  }
  mutating func clearProtobufUnittest_repeatedDoubleExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_repeatedDoubleExtension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_repeatedBoolExtension: [Bool] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeatedBoolExtension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeatedBoolExtension, value: newValue)}
  }
  var hasProtobufUnittest_repeatedBoolExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_repeatedBoolExtension)
  }
  mutating func clearProtobufUnittest_repeatedBoolExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_repeatedBoolExtension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_repeatedStringExtension: [String] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeatedStringExtension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeatedStringExtension, value: newValue)}
  }
  var hasProtobufUnittest_repeatedStringExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_repeatedStringExtension)
  }
  mutating func clearProtobufUnittest_repeatedStringExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_repeatedStringExtension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_repeatedBytesExtension: [Data] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeatedBytesExtension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeatedBytesExtension, value: newValue)}
  }
  var hasProtobufUnittest_repeatedBytesExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_repeatedBytesExtension)
  }
  mutating func clearProtobufUnittest_repeatedBytesExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_repeatedBytesExtension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_repeatedGroupExtension: [ProtobufUnittest_RepeatedGroup_extension] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeatedGroupExtension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeatedGroupExtension, value: newValue)}
  }
  var hasProtobufUnittest_repeatedGroupExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_repeatedGroupExtension)
  }
  mutating func clearProtobufUnittest_repeatedGroupExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_repeatedGroupExtension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_repeatedNestedMessageExtension: [ProtobufUnittest_TestAllTypes.NestedMessage] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeatedNestedMessageExtension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeatedNestedMessageExtension, value: newValue)}
  }
  var hasProtobufUnittest_repeatedNestedMessageExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_repeatedNestedMessageExtension)
  }
  mutating func clearProtobufUnittest_repeatedNestedMessageExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_repeatedNestedMessageExtension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_repeatedForeignMessageExtension: [ProtobufUnittest_ForeignMessage] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeatedForeignMessageExtension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeatedForeignMessageExtension, value: newValue)}
  }
  var hasProtobufUnittest_repeatedForeignMessageExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_repeatedForeignMessageExtension)
  }
  mutating func clearProtobufUnittest_repeatedForeignMessageExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_repeatedForeignMessageExtension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_repeatedImportMessageExtension: [ProtobufUnittestImport_ImportMessage] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeatedImportMessageExtension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeatedImportMessageExtension, value: newValue)}
  }
  var hasProtobufUnittest_repeatedImportMessageExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_repeatedImportMessageExtension)
  }
  mutating func clearProtobufUnittest_repeatedImportMessageExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_repeatedImportMessageExtension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_repeatedNestedEnumExtension: [ProtobufUnittest_TestAllTypes.NestedEnum] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeatedNestedEnumExtension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeatedNestedEnumExtension, value: newValue)}
  }
  var hasProtobufUnittest_repeatedNestedEnumExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_repeatedNestedEnumExtension)
  }
  mutating func clearProtobufUnittest_repeatedNestedEnumExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_repeatedNestedEnumExtension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_repeatedForeignEnumExtension: [ProtobufUnittest_ForeignEnum] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeatedForeignEnumExtension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeatedForeignEnumExtension, value: newValue)}
  }
  var hasProtobufUnittest_repeatedForeignEnumExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_repeatedForeignEnumExtension)
  }
  mutating func clearProtobufUnittest_repeatedForeignEnumExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_repeatedForeignEnumExtension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_repeatedImportEnumExtension: [ProtobufUnittestImport_ImportEnum] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeatedImportEnumExtension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeatedImportEnumExtension, value: newValue)}
  }
  var hasProtobufUnittest_repeatedImportEnumExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_repeatedImportEnumExtension)
  }
  mutating func clearProtobufUnittest_repeatedImportEnumExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_repeatedImportEnumExtension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_repeatedStringPieceExtension: [String] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeatedStringPieceExtension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeatedStringPieceExtension, value: newValue)}
  }
  var hasProtobufUnittest_repeatedStringPieceExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_repeatedStringPieceExtension)
  }
  mutating func clearProtobufUnittest_repeatedStringPieceExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_repeatedStringPieceExtension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_repeatedCordExtension: [String] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeatedCordExtension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeatedCordExtension, value: newValue)}
  }
  var hasProtobufUnittest_repeatedCordExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_repeatedCordExtension)
  }
  mutating func clearProtobufUnittest_repeatedCordExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_repeatedCordExtension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_repeatedLazyMessageExtension: [ProtobufUnittest_TestAllTypes.NestedMessage] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_repeatedLazyMessageExtension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_repeatedLazyMessageExtension, value: newValue)}
  }
  var hasProtobufUnittest_repeatedLazyMessageExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_repeatedLazyMessageExtension)
  }
  mutating func clearProtobufUnittest_repeatedLazyMessageExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_repeatedLazyMessageExtension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  ///   Singular with defaults
  var ProtobufUnittest_defaultInt32Extension: Int32 {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_defaultInt32Extension) ?? 41}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_defaultInt32Extension, value: newValue)}
  }
  var hasProtobufUnittest_defaultInt32Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_defaultInt32Extension)
  }
  mutating func clearProtobufUnittest_defaultInt32Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_defaultInt32Extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_defaultInt64Extension: Int64 {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_defaultInt64Extension) ?? 42}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_defaultInt64Extension, value: newValue)}
  }
  var hasProtobufUnittest_defaultInt64Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_defaultInt64Extension)
  }
  mutating func clearProtobufUnittest_defaultInt64Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_defaultInt64Extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_defaultUint32Extension: UInt32 {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_defaultUint32Extension) ?? 43}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_defaultUint32Extension, value: newValue)}
  }
  var hasProtobufUnittest_defaultUint32Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_defaultUint32Extension)
  }
  mutating func clearProtobufUnittest_defaultUint32Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_defaultUint32Extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_defaultUint64Extension: UInt64 {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_defaultUint64Extension) ?? 44}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_defaultUint64Extension, value: newValue)}
  }
  var hasProtobufUnittest_defaultUint64Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_defaultUint64Extension)
  }
  mutating func clearProtobufUnittest_defaultUint64Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_defaultUint64Extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_defaultSint32Extension: Int32 {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_defaultSint32Extension) ?? -45}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_defaultSint32Extension, value: newValue)}
  }
  var hasProtobufUnittest_defaultSint32Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_defaultSint32Extension)
  }
  mutating func clearProtobufUnittest_defaultSint32Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_defaultSint32Extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_defaultSint64Extension: Int64 {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_defaultSint64Extension) ?? 46}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_defaultSint64Extension, value: newValue)}
  }
  var hasProtobufUnittest_defaultSint64Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_defaultSint64Extension)
  }
  mutating func clearProtobufUnittest_defaultSint64Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_defaultSint64Extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_defaultFixed32Extension: UInt32 {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_defaultFixed32Extension) ?? 47}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_defaultFixed32Extension, value: newValue)}
  }
  var hasProtobufUnittest_defaultFixed32Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_defaultFixed32Extension)
  }
  mutating func clearProtobufUnittest_defaultFixed32Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_defaultFixed32Extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_defaultFixed64Extension: UInt64 {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_defaultFixed64Extension) ?? 48}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_defaultFixed64Extension, value: newValue)}
  }
  var hasProtobufUnittest_defaultFixed64Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_defaultFixed64Extension)
  }
  mutating func clearProtobufUnittest_defaultFixed64Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_defaultFixed64Extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_defaultSfixed32Extension: Int32 {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_defaultSfixed32Extension) ?? 49}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_defaultSfixed32Extension, value: newValue)}
  }
  var hasProtobufUnittest_defaultSfixed32Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_defaultSfixed32Extension)
  }
  mutating func clearProtobufUnittest_defaultSfixed32Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_defaultSfixed32Extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_defaultSfixed64Extension: Int64 {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_defaultSfixed64Extension) ?? -50}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_defaultSfixed64Extension, value: newValue)}
  }
  var hasProtobufUnittest_defaultSfixed64Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_defaultSfixed64Extension)
  }
  mutating func clearProtobufUnittest_defaultSfixed64Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_defaultSfixed64Extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_defaultFloatExtension: Float {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_defaultFloatExtension) ?? 51.5}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_defaultFloatExtension, value: newValue)}
  }
  var hasProtobufUnittest_defaultFloatExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_defaultFloatExtension)
  }
  mutating func clearProtobufUnittest_defaultFloatExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_defaultFloatExtension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_defaultDoubleExtension: Double {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_defaultDoubleExtension) ?? 52000}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_defaultDoubleExtension, value: newValue)}
  }
  var hasProtobufUnittest_defaultDoubleExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_defaultDoubleExtension)
  }
  mutating func clearProtobufUnittest_defaultDoubleExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_defaultDoubleExtension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_defaultBoolExtension: Bool {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_defaultBoolExtension) ?? true}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_defaultBoolExtension, value: newValue)}
  }
  var hasProtobufUnittest_defaultBoolExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_defaultBoolExtension)
  }
  mutating func clearProtobufUnittest_defaultBoolExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_defaultBoolExtension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_defaultStringExtension: String {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_defaultStringExtension) ?? "hello"}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_defaultStringExtension, value: newValue)}
  }
  var hasProtobufUnittest_defaultStringExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_defaultStringExtension)
  }
  mutating func clearProtobufUnittest_defaultStringExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_defaultStringExtension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_defaultBytesExtension: Data {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_defaultBytesExtension) ?? Data(bytes: [119, 111, 114, 108, 100])}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_defaultBytesExtension, value: newValue)}
  }
  var hasProtobufUnittest_defaultBytesExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_defaultBytesExtension)
  }
  mutating func clearProtobufUnittest_defaultBytesExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_defaultBytesExtension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_defaultNestedEnumExtension: ProtobufUnittest_TestAllTypes.NestedEnum {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_defaultNestedEnumExtension) ?? ProtobufUnittest_TestAllTypes.NestedEnum.bar}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_defaultNestedEnumExtension, value: newValue)}
  }
  var hasProtobufUnittest_defaultNestedEnumExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_defaultNestedEnumExtension)
  }
  mutating func clearProtobufUnittest_defaultNestedEnumExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_defaultNestedEnumExtension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_defaultForeignEnumExtension: ProtobufUnittest_ForeignEnum {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_defaultForeignEnumExtension) ?? ProtobufUnittest_ForeignEnum.foreignBar}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_defaultForeignEnumExtension, value: newValue)}
  }
  var hasProtobufUnittest_defaultForeignEnumExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_defaultForeignEnumExtension)
  }
  mutating func clearProtobufUnittest_defaultForeignEnumExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_defaultForeignEnumExtension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_defaultImportEnumExtension: ProtobufUnittestImport_ImportEnum {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_defaultImportEnumExtension) ?? ProtobufUnittestImport_ImportEnum.importBar}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_defaultImportEnumExtension, value: newValue)}
  }
  var hasProtobufUnittest_defaultImportEnumExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_defaultImportEnumExtension)
  }
  mutating func clearProtobufUnittest_defaultImportEnumExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_defaultImportEnumExtension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_defaultStringPieceExtension: String {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_defaultStringPieceExtension) ?? "abc"}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_defaultStringPieceExtension, value: newValue)}
  }
  var hasProtobufUnittest_defaultStringPieceExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_defaultStringPieceExtension)
  }
  mutating func clearProtobufUnittest_defaultStringPieceExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_defaultStringPieceExtension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_defaultCordExtension: String {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_defaultCordExtension) ?? "123"}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_defaultCordExtension, value: newValue)}
  }
  var hasProtobufUnittest_defaultCordExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_defaultCordExtension)
  }
  mutating func clearProtobufUnittest_defaultCordExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_defaultCordExtension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  ///   For oneof test
  var ProtobufUnittest_oneofUint32Extension: UInt32 {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_oneofUint32Extension) ?? 0}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_oneofUint32Extension, value: newValue)}
  }
  var hasProtobufUnittest_oneofUint32Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_oneofUint32Extension)
  }
  mutating func clearProtobufUnittest_oneofUint32Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_oneofUint32Extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_oneofNestedMessageExtension: ProtobufUnittest_TestAllTypes.NestedMessage {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_oneofNestedMessageExtension) ?? ProtobufUnittest_TestAllTypes.NestedMessage()}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_oneofNestedMessageExtension, value: newValue)}
  }
  var hasProtobufUnittest_oneofNestedMessageExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_oneofNestedMessageExtension)
  }
  mutating func clearProtobufUnittest_oneofNestedMessageExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_oneofNestedMessageExtension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_oneofStringExtension: String {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_oneofStringExtension) ?? ""}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_oneofStringExtension, value: newValue)}
  }
  var hasProtobufUnittest_oneofStringExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_oneofStringExtension)
  }
  mutating func clearProtobufUnittest_oneofStringExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_oneofStringExtension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  var ProtobufUnittest_oneofBytesExtension: Data {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_oneofBytesExtension) ?? Data()}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_oneofBytesExtension, value: newValue)}
  }
  var hasProtobufUnittest_oneofBytesExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_oneofBytesExtension)
  }
  mutating func clearProtobufUnittest_oneofBytesExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_oneofBytesExtension)
  }
}

extension ProtobufUnittest_TestFieldOrderings {
  var ProtobufUnittest_myExtensionString: String {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_myExtensionString) ?? ""}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_myExtensionString, value: newValue)}
  }
  var hasProtobufUnittest_myExtensionString: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_myExtensionString)
  }
  mutating func clearProtobufUnittest_myExtensionString() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_myExtensionString)
  }
}

extension ProtobufUnittest_TestFieldOrderings {
  var ProtobufUnittest_myExtensionInt: Int32 {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_myExtensionInt) ?? 0}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_myExtensionInt, value: newValue)}
  }
  var hasProtobufUnittest_myExtensionInt: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_myExtensionInt)
  }
  mutating func clearProtobufUnittest_myExtensionInt() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_myExtensionInt)
  }
}

extension ProtobufUnittest_TestPackedExtensions {
  var ProtobufUnittest_packedInt32Extension: [Int32] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_packedInt32Extension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_packedInt32Extension, value: newValue)}
  }
  var hasProtobufUnittest_packedInt32Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_packedInt32Extension)
  }
  mutating func clearProtobufUnittest_packedInt32Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_packedInt32Extension)
  }
}

extension ProtobufUnittest_TestPackedExtensions {
  var ProtobufUnittest_packedInt64Extension: [Int64] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_packedInt64Extension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_packedInt64Extension, value: newValue)}
  }
  var hasProtobufUnittest_packedInt64Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_packedInt64Extension)
  }
  mutating func clearProtobufUnittest_packedInt64Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_packedInt64Extension)
  }
}

extension ProtobufUnittest_TestPackedExtensions {
  var ProtobufUnittest_packedUint32Extension: [UInt32] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_packedUint32Extension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_packedUint32Extension, value: newValue)}
  }
  var hasProtobufUnittest_packedUint32Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_packedUint32Extension)
  }
  mutating func clearProtobufUnittest_packedUint32Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_packedUint32Extension)
  }
}

extension ProtobufUnittest_TestPackedExtensions {
  var ProtobufUnittest_packedUint64Extension: [UInt64] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_packedUint64Extension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_packedUint64Extension, value: newValue)}
  }
  var hasProtobufUnittest_packedUint64Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_packedUint64Extension)
  }
  mutating func clearProtobufUnittest_packedUint64Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_packedUint64Extension)
  }
}

extension ProtobufUnittest_TestPackedExtensions {
  var ProtobufUnittest_packedSint32Extension: [Int32] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_packedSint32Extension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_packedSint32Extension, value: newValue)}
  }
  var hasProtobufUnittest_packedSint32Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_packedSint32Extension)
  }
  mutating func clearProtobufUnittest_packedSint32Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_packedSint32Extension)
  }
}

extension ProtobufUnittest_TestPackedExtensions {
  var ProtobufUnittest_packedSint64Extension: [Int64] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_packedSint64Extension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_packedSint64Extension, value: newValue)}
  }
  var hasProtobufUnittest_packedSint64Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_packedSint64Extension)
  }
  mutating func clearProtobufUnittest_packedSint64Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_packedSint64Extension)
  }
}

extension ProtobufUnittest_TestPackedExtensions {
  var ProtobufUnittest_packedFixed32Extension: [UInt32] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_packedFixed32Extension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_packedFixed32Extension, value: newValue)}
  }
  var hasProtobufUnittest_packedFixed32Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_packedFixed32Extension)
  }
  mutating func clearProtobufUnittest_packedFixed32Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_packedFixed32Extension)
  }
}

extension ProtobufUnittest_TestPackedExtensions {
  var ProtobufUnittest_packedFixed64Extension: [UInt64] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_packedFixed64Extension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_packedFixed64Extension, value: newValue)}
  }
  var hasProtobufUnittest_packedFixed64Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_packedFixed64Extension)
  }
  mutating func clearProtobufUnittest_packedFixed64Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_packedFixed64Extension)
  }
}

extension ProtobufUnittest_TestPackedExtensions {
  var ProtobufUnittest_packedSfixed32Extension: [Int32] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_packedSfixed32Extension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_packedSfixed32Extension, value: newValue)}
  }
  var hasProtobufUnittest_packedSfixed32Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_packedSfixed32Extension)
  }
  mutating func clearProtobufUnittest_packedSfixed32Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_packedSfixed32Extension)
  }
}

extension ProtobufUnittest_TestPackedExtensions {
  var ProtobufUnittest_packedSfixed64Extension: [Int64] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_packedSfixed64Extension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_packedSfixed64Extension, value: newValue)}
  }
  var hasProtobufUnittest_packedSfixed64Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_packedSfixed64Extension)
  }
  mutating func clearProtobufUnittest_packedSfixed64Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_packedSfixed64Extension)
  }
}

extension ProtobufUnittest_TestPackedExtensions {
  var ProtobufUnittest_packedFloatExtension: [Float] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_packedFloatExtension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_packedFloatExtension, value: newValue)}
  }
  var hasProtobufUnittest_packedFloatExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_packedFloatExtension)
  }
  mutating func clearProtobufUnittest_packedFloatExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_packedFloatExtension)
  }
}

extension ProtobufUnittest_TestPackedExtensions {
  var ProtobufUnittest_packedDoubleExtension: [Double] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_packedDoubleExtension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_packedDoubleExtension, value: newValue)}
  }
  var hasProtobufUnittest_packedDoubleExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_packedDoubleExtension)
  }
  mutating func clearProtobufUnittest_packedDoubleExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_packedDoubleExtension)
  }
}

extension ProtobufUnittest_TestPackedExtensions {
  var ProtobufUnittest_packedBoolExtension: [Bool] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_packedBoolExtension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_packedBoolExtension, value: newValue)}
  }
  var hasProtobufUnittest_packedBoolExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_packedBoolExtension)
  }
  mutating func clearProtobufUnittest_packedBoolExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_packedBoolExtension)
  }
}

extension ProtobufUnittest_TestPackedExtensions {
  var ProtobufUnittest_packedEnumExtension: [ProtobufUnittest_ForeignEnum] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_packedEnumExtension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_packedEnumExtension, value: newValue)}
  }
  var hasProtobufUnittest_packedEnumExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_packedEnumExtension)
  }
  mutating func clearProtobufUnittest_packedEnumExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_packedEnumExtension)
  }
}

extension ProtobufUnittest_TestUnpackedExtensions {
  var ProtobufUnittest_unpackedInt32Extension: [Int32] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_unpackedInt32Extension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_unpackedInt32Extension, value: newValue)}
  }
  var hasProtobufUnittest_unpackedInt32Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_unpackedInt32Extension)
  }
  mutating func clearProtobufUnittest_unpackedInt32Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_unpackedInt32Extension)
  }
}

extension ProtobufUnittest_TestUnpackedExtensions {
  var ProtobufUnittest_unpackedInt64Extension: [Int64] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_unpackedInt64Extension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_unpackedInt64Extension, value: newValue)}
  }
  var hasProtobufUnittest_unpackedInt64Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_unpackedInt64Extension)
  }
  mutating func clearProtobufUnittest_unpackedInt64Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_unpackedInt64Extension)
  }
}

extension ProtobufUnittest_TestUnpackedExtensions {
  var ProtobufUnittest_unpackedUint32Extension: [UInt32] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_unpackedUint32Extension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_unpackedUint32Extension, value: newValue)}
  }
  var hasProtobufUnittest_unpackedUint32Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_unpackedUint32Extension)
  }
  mutating func clearProtobufUnittest_unpackedUint32Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_unpackedUint32Extension)
  }
}

extension ProtobufUnittest_TestUnpackedExtensions {
  var ProtobufUnittest_unpackedUint64Extension: [UInt64] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_unpackedUint64Extension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_unpackedUint64Extension, value: newValue)}
  }
  var hasProtobufUnittest_unpackedUint64Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_unpackedUint64Extension)
  }
  mutating func clearProtobufUnittest_unpackedUint64Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_unpackedUint64Extension)
  }
}

extension ProtobufUnittest_TestUnpackedExtensions {
  var ProtobufUnittest_unpackedSint32Extension: [Int32] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_unpackedSint32Extension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_unpackedSint32Extension, value: newValue)}
  }
  var hasProtobufUnittest_unpackedSint32Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_unpackedSint32Extension)
  }
  mutating func clearProtobufUnittest_unpackedSint32Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_unpackedSint32Extension)
  }
}

extension ProtobufUnittest_TestUnpackedExtensions {
  var ProtobufUnittest_unpackedSint64Extension: [Int64] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_unpackedSint64Extension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_unpackedSint64Extension, value: newValue)}
  }
  var hasProtobufUnittest_unpackedSint64Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_unpackedSint64Extension)
  }
  mutating func clearProtobufUnittest_unpackedSint64Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_unpackedSint64Extension)
  }
}

extension ProtobufUnittest_TestUnpackedExtensions {
  var ProtobufUnittest_unpackedFixed32Extension: [UInt32] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_unpackedFixed32Extension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_unpackedFixed32Extension, value: newValue)}
  }
  var hasProtobufUnittest_unpackedFixed32Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_unpackedFixed32Extension)
  }
  mutating func clearProtobufUnittest_unpackedFixed32Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_unpackedFixed32Extension)
  }
}

extension ProtobufUnittest_TestUnpackedExtensions {
  var ProtobufUnittest_unpackedFixed64Extension: [UInt64] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_unpackedFixed64Extension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_unpackedFixed64Extension, value: newValue)}
  }
  var hasProtobufUnittest_unpackedFixed64Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_unpackedFixed64Extension)
  }
  mutating func clearProtobufUnittest_unpackedFixed64Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_unpackedFixed64Extension)
  }
}

extension ProtobufUnittest_TestUnpackedExtensions {
  var ProtobufUnittest_unpackedSfixed32Extension: [Int32] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_unpackedSfixed32Extension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_unpackedSfixed32Extension, value: newValue)}
  }
  var hasProtobufUnittest_unpackedSfixed32Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_unpackedSfixed32Extension)
  }
  mutating func clearProtobufUnittest_unpackedSfixed32Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_unpackedSfixed32Extension)
  }
}

extension ProtobufUnittest_TestUnpackedExtensions {
  var ProtobufUnittest_unpackedSfixed64Extension: [Int64] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_unpackedSfixed64Extension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_unpackedSfixed64Extension, value: newValue)}
  }
  var hasProtobufUnittest_unpackedSfixed64Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_unpackedSfixed64Extension)
  }
  mutating func clearProtobufUnittest_unpackedSfixed64Extension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_unpackedSfixed64Extension)
  }
}

extension ProtobufUnittest_TestUnpackedExtensions {
  var ProtobufUnittest_unpackedFloatExtension: [Float] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_unpackedFloatExtension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_unpackedFloatExtension, value: newValue)}
  }
  var hasProtobufUnittest_unpackedFloatExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_unpackedFloatExtension)
  }
  mutating func clearProtobufUnittest_unpackedFloatExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_unpackedFloatExtension)
  }
}

extension ProtobufUnittest_TestUnpackedExtensions {
  var ProtobufUnittest_unpackedDoubleExtension: [Double] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_unpackedDoubleExtension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_unpackedDoubleExtension, value: newValue)}
  }
  var hasProtobufUnittest_unpackedDoubleExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_unpackedDoubleExtension)
  }
  mutating func clearProtobufUnittest_unpackedDoubleExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_unpackedDoubleExtension)
  }
}

extension ProtobufUnittest_TestUnpackedExtensions {
  var ProtobufUnittest_unpackedBoolExtension: [Bool] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_unpackedBoolExtension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_unpackedBoolExtension, value: newValue)}
  }
  var hasProtobufUnittest_unpackedBoolExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_unpackedBoolExtension)
  }
  mutating func clearProtobufUnittest_unpackedBoolExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_unpackedBoolExtension)
  }
}

extension ProtobufUnittest_TestUnpackedExtensions {
  var ProtobufUnittest_unpackedEnumExtension: [ProtobufUnittest_ForeignEnum] {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_unpackedEnumExtension)}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_unpackedEnumExtension, value: newValue)}
  }
  var hasProtobufUnittest_unpackedEnumExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_unpackedEnumExtension)
  }
  mutating func clearProtobufUnittest_unpackedEnumExtension() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_unpackedEnumExtension)
  }
}

extension ProtobufUnittest_TestHugeFieldNumbers {
  var ProtobufUnittest_testAllTypes: ProtobufUnittest_TestAllTypes {
    get {return getExtensionValue(ext: ProtobufUnittest_Extensions_testAllTypes) ?? ProtobufUnittest_TestAllTypes()}
    set {setExtensionValue(ext: ProtobufUnittest_Extensions_testAllTypes, value: newValue)}
  }
  var hasProtobufUnittest_testAllTypes: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_Extensions_testAllTypes)
  }
  mutating func clearProtobufUnittest_testAllTypes() {
    clearExtensionValue(ext: ProtobufUnittest_Extensions_testAllTypes)
  }
}

let ProtobufUnittest_Unittest_Extensions: SwiftProtobuf.ExtensionSet = [
  ProtobufUnittest_Extensions_optionalInt32Extension,
  ProtobufUnittest_Extensions_optionalInt64Extension,
  ProtobufUnittest_Extensions_optionalUint32Extension,
  ProtobufUnittest_Extensions_optionalUint64Extension,
  ProtobufUnittest_Extensions_optionalSint32Extension,
  ProtobufUnittest_Extensions_optionalSint64Extension,
  ProtobufUnittest_Extensions_optionalFixed32Extension,
  ProtobufUnittest_Extensions_optionalFixed64Extension,
  ProtobufUnittest_Extensions_optionalSfixed32Extension,
  ProtobufUnittest_Extensions_optionalSfixed64Extension,
  ProtobufUnittest_Extensions_optionalFloatExtension,
  ProtobufUnittest_Extensions_optionalDoubleExtension,
  ProtobufUnittest_Extensions_optionalBoolExtension,
  ProtobufUnittest_Extensions_optionalStringExtension,
  ProtobufUnittest_Extensions_optionalBytesExtension,
  ProtobufUnittest_Extensions_optionalGroupExtension,
  ProtobufUnittest_Extensions_optionalNestedMessageExtension,
  ProtobufUnittest_Extensions_optionalForeignMessageExtension,
  ProtobufUnittest_Extensions_optionalImportMessageExtension,
  ProtobufUnittest_Extensions_optionalNestedEnumExtension,
  ProtobufUnittest_Extensions_optionalForeignEnumExtension,
  ProtobufUnittest_Extensions_optionalImportEnumExtension,
  ProtobufUnittest_Extensions_optionalStringPieceExtension,
  ProtobufUnittest_Extensions_optionalCordExtension,
  ProtobufUnittest_Extensions_optionalPublicImportMessageExtension,
  ProtobufUnittest_Extensions_optionalLazyMessageExtension,
  ProtobufUnittest_Extensions_repeatedInt32Extension,
  ProtobufUnittest_Extensions_repeatedInt64Extension,
  ProtobufUnittest_Extensions_repeatedUint32Extension,
  ProtobufUnittest_Extensions_repeatedUint64Extension,
  ProtobufUnittest_Extensions_repeatedSint32Extension,
  ProtobufUnittest_Extensions_repeatedSint64Extension,
  ProtobufUnittest_Extensions_repeatedFixed32Extension,
  ProtobufUnittest_Extensions_repeatedFixed64Extension,
  ProtobufUnittest_Extensions_repeatedSfixed32Extension,
  ProtobufUnittest_Extensions_repeatedSfixed64Extension,
  ProtobufUnittest_Extensions_repeatedFloatExtension,
  ProtobufUnittest_Extensions_repeatedDoubleExtension,
  ProtobufUnittest_Extensions_repeatedBoolExtension,
  ProtobufUnittest_Extensions_repeatedStringExtension,
  ProtobufUnittest_Extensions_repeatedBytesExtension,
  ProtobufUnittest_Extensions_repeatedGroupExtension,
  ProtobufUnittest_Extensions_repeatedNestedMessageExtension,
  ProtobufUnittest_Extensions_repeatedForeignMessageExtension,
  ProtobufUnittest_Extensions_repeatedImportMessageExtension,
  ProtobufUnittest_Extensions_repeatedNestedEnumExtension,
  ProtobufUnittest_Extensions_repeatedForeignEnumExtension,
  ProtobufUnittest_Extensions_repeatedImportEnumExtension,
  ProtobufUnittest_Extensions_repeatedStringPieceExtension,
  ProtobufUnittest_Extensions_repeatedCordExtension,
  ProtobufUnittest_Extensions_repeatedLazyMessageExtension,
  ProtobufUnittest_Extensions_defaultInt32Extension,
  ProtobufUnittest_Extensions_defaultInt64Extension,
  ProtobufUnittest_Extensions_defaultUint32Extension,
  ProtobufUnittest_Extensions_defaultUint64Extension,
  ProtobufUnittest_Extensions_defaultSint32Extension,
  ProtobufUnittest_Extensions_defaultSint64Extension,
  ProtobufUnittest_Extensions_defaultFixed32Extension,
  ProtobufUnittest_Extensions_defaultFixed64Extension,
  ProtobufUnittest_Extensions_defaultSfixed32Extension,
  ProtobufUnittest_Extensions_defaultSfixed64Extension,
  ProtobufUnittest_Extensions_defaultFloatExtension,
  ProtobufUnittest_Extensions_defaultDoubleExtension,
  ProtobufUnittest_Extensions_defaultBoolExtension,
  ProtobufUnittest_Extensions_defaultStringExtension,
  ProtobufUnittest_Extensions_defaultBytesExtension,
  ProtobufUnittest_Extensions_defaultNestedEnumExtension,
  ProtobufUnittest_Extensions_defaultForeignEnumExtension,
  ProtobufUnittest_Extensions_defaultImportEnumExtension,
  ProtobufUnittest_Extensions_defaultStringPieceExtension,
  ProtobufUnittest_Extensions_defaultCordExtension,
  ProtobufUnittest_Extensions_oneofUint32Extension,
  ProtobufUnittest_Extensions_oneofNestedMessageExtension,
  ProtobufUnittest_Extensions_oneofStringExtension,
  ProtobufUnittest_Extensions_oneofBytesExtension,
  ProtobufUnittest_Extensions_myExtensionString,
  ProtobufUnittest_Extensions_myExtensionInt,
  ProtobufUnittest_Extensions_packedInt32Extension,
  ProtobufUnittest_Extensions_packedInt64Extension,
  ProtobufUnittest_Extensions_packedUint32Extension,
  ProtobufUnittest_Extensions_packedUint64Extension,
  ProtobufUnittest_Extensions_packedSint32Extension,
  ProtobufUnittest_Extensions_packedSint64Extension,
  ProtobufUnittest_Extensions_packedFixed32Extension,
  ProtobufUnittest_Extensions_packedFixed64Extension,
  ProtobufUnittest_Extensions_packedSfixed32Extension,
  ProtobufUnittest_Extensions_packedSfixed64Extension,
  ProtobufUnittest_Extensions_packedFloatExtension,
  ProtobufUnittest_Extensions_packedDoubleExtension,
  ProtobufUnittest_Extensions_packedBoolExtension,
  ProtobufUnittest_Extensions_packedEnumExtension,
  ProtobufUnittest_Extensions_unpackedInt32Extension,
  ProtobufUnittest_Extensions_unpackedInt64Extension,
  ProtobufUnittest_Extensions_unpackedUint32Extension,
  ProtobufUnittest_Extensions_unpackedUint64Extension,
  ProtobufUnittest_Extensions_unpackedSint32Extension,
  ProtobufUnittest_Extensions_unpackedSint64Extension,
  ProtobufUnittest_Extensions_unpackedFixed32Extension,
  ProtobufUnittest_Extensions_unpackedFixed64Extension,
  ProtobufUnittest_Extensions_unpackedSfixed32Extension,
  ProtobufUnittest_Extensions_unpackedSfixed64Extension,
  ProtobufUnittest_Extensions_unpackedFloatExtension,
  ProtobufUnittest_Extensions_unpackedDoubleExtension,
  ProtobufUnittest_Extensions_unpackedBoolExtension,
  ProtobufUnittest_Extensions_unpackedEnumExtension,
  ProtobufUnittest_Extensions_testAllTypes,
  ProtobufUnittest_TestNestedExtension.Extensions.test,
  ProtobufUnittest_TestNestedExtension.Extensions.nestedStringExtension,
  ProtobufUnittest_TestRequired.Extensions.single,
  ProtobufUnittest_TestRequired.Extensions.multi,
  ProtobufUnittest_TestParsingMerge.Extensions.optionalExt,
  ProtobufUnittest_TestParsingMerge.Extensions.repeatedExt
]
