/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: google/protobuf/unittest.proto
 *
 */

//  Protocol Buffers - Google's data interchange format
//  Copyright 2008 Google Inc.  All rights reserved.
//  https://developers.google.com/protocol-buffers/
// 
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are
//  met:
// 
//      * Redistributions of source code must retain the above copyright
//  notice, this list of conditions and the following disclaimer.
//      * Redistributions in binary form must reproduce the above
//  copyright notice, this list of conditions and the following disclaimer
//  in the documentation and/or other materials provided with the
//  distribution.
//      * Neither the name of Google Inc. nor the names of its
//  contributors may be used to endorse or promote products derived from
//  this software without specific prior written permission.
// 
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
//  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
//  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
//  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
//  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
//  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
//  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

//  Author: kenton@google.com (Kenton Varda)
//   Based on original Protocol Buffers design by
//   Sanjay Ghemawat, Jeff Dean, and others.
// 
//  A proto file we will use for unit testing.

import Foundation
import SwiftProtobuf


public enum ProtobufUnittest_ForeignEnum: ProtobufEnum {
  public typealias RawValue = Int
  case foreignFoo // = 4
  case foreignBar // = 5
  case foreignBaz // = 6

  public init() {
    self = .foreignFoo
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 4: self = .foreignFoo
    case 5: self = .foreignBar
    case 6: self = .foreignBaz
    default: return nil
    }
  }

  public init?(name: String) {
    switch name {
    case "foreignFoo": self = .foreignFoo
    case "foreignBar": self = .foreignBar
    case "foreignBaz": self = .foreignBaz
    default: return nil
    }
  }

  public init?(jsonName: String) {
    switch jsonName {
    case "FOREIGN_FOO": self = .foreignFoo
    case "FOREIGN_BAR": self = .foreignBar
    case "FOREIGN_BAZ": self = .foreignBaz
    default: return nil
    }
  }

  public init?(protoName: String) {
    switch protoName {
    case "FOREIGN_FOO": self = .foreignFoo
    case "FOREIGN_BAR": self = .foreignBar
    case "FOREIGN_BAZ": self = .foreignBaz
    default: return nil
    }
  }

  public var rawValue: Int {
    get {
      switch self {
      case .foreignFoo: return 4
      case .foreignBar: return 5
      case .foreignBaz: return 6
      }
    }
  }

  public var json: String {
    get {
      switch self {
      case .foreignFoo: return "\"FOREIGN_FOO\""
      case .foreignBar: return "\"FOREIGN_BAR\""
      case .foreignBaz: return "\"FOREIGN_BAZ\""
      }
    }
  }

  public var hashValue: Int { return rawValue }

  public var debugDescription: String {
    get {
      switch self {
      case .foreignFoo: return ".foreignFoo"
      case .foreignBar: return ".foreignBar"
      case .foreignBaz: return ".foreignBaz"
      }
    }
  }

}

///   Test an enum that has multiple values with the same number.
public enum ProtobufUnittest_TestEnumWithDupValue: ProtobufEnum {
  public typealias RawValue = Int
  case foo1 // = 1
  case bar1 // = 2
  case baz // = 3
  case foo2 // = 1
  case bar2 // = 2

  public init() {
    self = .foo1
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 1: self = .foo1
    case 2: self = .bar1
    case 3: self = .baz
    default: return nil
    }
  }

  public init?(name: String) {
    switch name {
    case "foo1": self = .foo1
    case "bar1": self = .bar1
    case "baz": self = .baz
    case "foo2": self = .foo2
    case "bar2": self = .bar2
    default: return nil
    }
  }

  public init?(jsonName: String) {
    switch jsonName {
    case "FOO1": self = .foo1
    case "BAR1": self = .bar1
    case "BAZ": self = .baz
    case "FOO2": self = .foo2
    case "BAR2": self = .bar2
    default: return nil
    }
  }

  public init?(protoName: String) {
    switch protoName {
    case "FOO1": self = .foo1
    case "BAR1": self = .bar1
    case "BAZ": self = .baz
    case "FOO2": self = .foo2
    case "BAR2": self = .bar2
    default: return nil
    }
  }

  public var rawValue: Int {
    get {
      switch self {
      case .foo1: return 1
      case .bar1: return 2
      case .baz: return 3
      case .foo2: return 1
      case .bar2: return 2
      }
    }
  }

  public var json: String {
    get {
      switch self {
      case .foo1: return "\"FOO1\""
      case .bar1: return "\"BAR1\""
      case .baz: return "\"BAZ\""
      case .foo2: return "\"FOO2\""
      case .bar2: return "\"BAR2\""
      }
    }
  }

  public var hashValue: Int { return rawValue }

  public var debugDescription: String {
    get {
      switch self {
      case .foo1: return ".foo1"
      case .bar1: return ".bar1"
      case .baz: return ".baz"
      case .foo2: return ".foo2"
      case .bar2: return ".bar2"
      }
    }
  }

}

///   Test an enum with large, unordered values.
public enum ProtobufUnittest_TestSparseEnum: ProtobufEnum {
  public typealias RawValue = Int
  case sparseA // = 123
  case sparseB // = 62374
  case sparseC // = 12589234
  case sparseD // = -15
  case sparseE // = -53452
  case sparseF // = 0
  case sparseG // = 2

  public init() {
    self = .sparseA
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 123: self = .sparseA
    case 62374: self = .sparseB
    case 12589234: self = .sparseC
    case -15: self = .sparseD
    case -53452: self = .sparseE
    case 0: self = .sparseF
    case 2: self = .sparseG
    default: return nil
    }
  }

  public init?(name: String) {
    switch name {
    case "sparseA": self = .sparseA
    case "sparseB": self = .sparseB
    case "sparseC": self = .sparseC
    case "sparseD": self = .sparseD
    case "sparseE": self = .sparseE
    case "sparseF": self = .sparseF
    case "sparseG": self = .sparseG
    default: return nil
    }
  }

  public init?(jsonName: String) {
    switch jsonName {
    case "SPARSE_A": self = .sparseA
    case "SPARSE_B": self = .sparseB
    case "SPARSE_C": self = .sparseC
    case "SPARSE_D": self = .sparseD
    case "SPARSE_E": self = .sparseE
    case "SPARSE_F": self = .sparseF
    case "SPARSE_G": self = .sparseG
    default: return nil
    }
  }

  public init?(protoName: String) {
    switch protoName {
    case "SPARSE_A": self = .sparseA
    case "SPARSE_B": self = .sparseB
    case "SPARSE_C": self = .sparseC
    case "SPARSE_D": self = .sparseD
    case "SPARSE_E": self = .sparseE
    case "SPARSE_F": self = .sparseF
    case "SPARSE_G": self = .sparseG
    default: return nil
    }
  }

  public var rawValue: Int {
    get {
      switch self {
      case .sparseA: return 123
      case .sparseB: return 62374
      case .sparseC: return 12589234
      case .sparseD: return -15
      case .sparseE: return -53452
      case .sparseF: return 0
      case .sparseG: return 2
      }
    }
  }

  public var json: String {
    get {
      switch self {
      case .sparseA: return "\"SPARSE_A\""
      case .sparseB: return "\"SPARSE_B\""
      case .sparseC: return "\"SPARSE_C\""
      case .sparseD: return "\"SPARSE_D\""
      case .sparseE: return "\"SPARSE_E\""
      case .sparseF: return "\"SPARSE_F\""
      case .sparseG: return "\"SPARSE_G\""
      }
    }
  }

  public var hashValue: Int { return rawValue }

  public var debugDescription: String {
    get {
      switch self {
      case .sparseA: return ".sparseA"
      case .sparseB: return ".sparseB"
      case .sparseC: return ".sparseC"
      case .sparseD: return ".sparseD"
      case .sparseE: return ".sparseE"
      case .sparseF: return ".sparseF"
      case .sparseG: return ".sparseG"
      }
    }
  }

}

///   This proto includes every type of field in both singular and repeated
///   forms.
public struct ProtobufUnittest_TestAllTypes: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "ProtobufUnittest_TestAllTypes"}
  public var protoMessageName: String {return "TestAllTypes"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [
    "optionalInt32": 1,
    "optionalInt64": 2,
    "optionalUint32": 3,
    "optionalUint64": 4,
    "optionalSint32": 5,
    "optionalSint64": 6,
    "optionalFixed32": 7,
    "optionalFixed64": 8,
    "optionalSfixed32": 9,
    "optionalSfixed64": 10,
    "optionalFloat": 11,
    "optionalDouble": 12,
    "optionalBool": 13,
    "optionalString": 14,
    "optionalBytes": 15,
    "optionalgroup": 16,
    "optionalNestedMessage": 18,
    "optionalForeignMessage": 19,
    "optionalImportMessage": 20,
    "optionalNestedEnum": 21,
    "optionalForeignEnum": 22,
    "optionalImportEnum": 23,
    "optionalStringPiece": 24,
    "optionalCord": 25,
    "optionalPublicImportMessage": 26,
    "optionalLazyMessage": 27,
    "repeatedInt32": 31,
    "repeatedInt64": 32,
    "repeatedUint32": 33,
    "repeatedUint64": 34,
    "repeatedSint32": 35,
    "repeatedSint64": 36,
    "repeatedFixed32": 37,
    "repeatedFixed64": 38,
    "repeatedSfixed32": 39,
    "repeatedSfixed64": 40,
    "repeatedFloat": 41,
    "repeatedDouble": 42,
    "repeatedBool": 43,
    "repeatedString": 44,
    "repeatedBytes": 45,
    "repeatedgroup": 46,
    "repeatedNestedMessage": 48,
    "repeatedForeignMessage": 49,
    "repeatedImportMessage": 50,
    "repeatedNestedEnum": 51,
    "repeatedForeignEnum": 52,
    "repeatedImportEnum": 53,
    "repeatedStringPiece": 54,
    "repeatedCord": 55,
    "repeatedLazyMessage": 57,
    "defaultInt32": 61,
    "defaultInt64": 62,
    "defaultUint32": 63,
    "defaultUint64": 64,
    "defaultSint32": 65,
    "defaultSint64": 66,
    "defaultFixed32": 67,
    "defaultFixed64": 68,
    "defaultSfixed32": 69,
    "defaultSfixed64": 70,
    "defaultFloat": 71,
    "defaultDouble": 72,
    "defaultBool": 73,
    "defaultString": 74,
    "defaultBytes": 75,
    "defaultNestedEnum": 81,
    "defaultForeignEnum": 82,
    "defaultImportEnum": 83,
    "defaultStringPiece": 84,
    "defaultCord": 85,
    "oneofUint32": 111,
    "oneofNestedMessage": 112,
    "oneofString": 113,
    "oneofBytes": 114,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "optional_int32": 1,
    "optional_int64": 2,
    "optional_uint32": 3,
    "optional_uint64": 4,
    "optional_sint32": 5,
    "optional_sint64": 6,
    "optional_fixed32": 7,
    "optional_fixed64": 8,
    "optional_sfixed32": 9,
    "optional_sfixed64": 10,
    "optional_float": 11,
    "optional_double": 12,
    "optional_bool": 13,
    "optional_string": 14,
    "optional_bytes": 15,
    "optionalgroup": 16,
    "optional_nested_message": 18,
    "optional_foreign_message": 19,
    "optional_import_message": 20,
    "optional_nested_enum": 21,
    "optional_foreign_enum": 22,
    "optional_import_enum": 23,
    "optional_string_piece": 24,
    "optional_cord": 25,
    "optional_public_import_message": 26,
    "optional_lazy_message": 27,
    "repeated_int32": 31,
    "repeated_int64": 32,
    "repeated_uint32": 33,
    "repeated_uint64": 34,
    "repeated_sint32": 35,
    "repeated_sint64": 36,
    "repeated_fixed32": 37,
    "repeated_fixed64": 38,
    "repeated_sfixed32": 39,
    "repeated_sfixed64": 40,
    "repeated_float": 41,
    "repeated_double": 42,
    "repeated_bool": 43,
    "repeated_string": 44,
    "repeated_bytes": 45,
    "repeatedgroup": 46,
    "repeated_nested_message": 48,
    "repeated_foreign_message": 49,
    "repeated_import_message": 50,
    "repeated_nested_enum": 51,
    "repeated_foreign_enum": 52,
    "repeated_import_enum": 53,
    "repeated_string_piece": 54,
    "repeated_cord": 55,
    "repeated_lazy_message": 57,
    "default_int32": 61,
    "default_int64": 62,
    "default_uint32": 63,
    "default_uint64": 64,
    "default_sint32": 65,
    "default_sint64": 66,
    "default_fixed32": 67,
    "default_fixed64": 68,
    "default_sfixed32": 69,
    "default_sfixed64": 70,
    "default_float": 71,
    "default_double": 72,
    "default_bool": 73,
    "default_string": 74,
    "default_bytes": 75,
    "default_nested_enum": 81,
    "default_foreign_enum": 82,
    "default_import_enum": 83,
    "default_string_piece": 84,
    "default_cord": 85,
    "oneof_uint32": 111,
    "oneof_nested_message": 112,
    "oneof_string": 113,
    "oneof_bytes": 114,
  ]}

  private class _StorageClass {
    typealias ProtobufExtendedMessage = ProtobufUnittest_TestAllTypes
    var unknown = ProtobufUnknownStorage()
    var _optionalInt32: Int32? = nil
    var _optionalInt64: Int64? = nil
    var _optionalUint32: UInt32? = nil
    var _optionalUint64: UInt64? = nil
    var _optionalSint32: Int32? = nil
    var _optionalSint64: Int64? = nil
    var _optionalFixed32: UInt32? = nil
    var _optionalFixed64: UInt64? = nil
    var _optionalSfixed32: Int32? = nil
    var _optionalSfixed64: Int64? = nil
    var _optionalFloat: Float? = nil
    var _optionalDouble: Double? = nil
    var _optionalBool: Bool? = nil
    var _optionalString: String? = nil
    var _optionalBytes: Data? = nil
    var _optionalGroup: ProtobufUnittest_TestAllTypes.OptionalGroup? = nil
    var _optionalNestedMessage: ProtobufUnittest_TestAllTypes.NestedMessage? = nil
    var _optionalForeignMessage: ProtobufUnittest_ForeignMessage? = nil
    var _optionalImportMessage: ProtobufUnittestImport_ImportMessage? = nil
    var _optionalNestedEnum: ProtobufUnittest_TestAllTypes.NestedEnum? = nil
    var _optionalForeignEnum: ProtobufUnittest_ForeignEnum? = nil
    var _optionalImportEnum: ProtobufUnittestImport_ImportEnum? = nil
    var _optionalStringPiece: String? = nil
    var _optionalCord: String? = nil
    var _optionalPublicImportMessage: ProtobufUnittestImport_PublicImportMessage? = nil
    var _optionalLazyMessage: ProtobufUnittest_TestAllTypes.NestedMessage? = nil
    var _repeatedInt32: [Int32] = []
    var _repeatedInt64: [Int64] = []
    var _repeatedUint32: [UInt32] = []
    var _repeatedUint64: [UInt64] = []
    var _repeatedSint32: [Int32] = []
    var _repeatedSint64: [Int64] = []
    var _repeatedFixed32: [UInt32] = []
    var _repeatedFixed64: [UInt64] = []
    var _repeatedSfixed32: [Int32] = []
    var _repeatedSfixed64: [Int64] = []
    var _repeatedFloat: [Float] = []
    var _repeatedDouble: [Double] = []
    var _repeatedBool: [Bool] = []
    var _repeatedString: [String] = []
    var _repeatedBytes: [Data] = []
    var _repeatedGroup: [ProtobufUnittest_TestAllTypes.RepeatedGroup] = []
    var _repeatedNestedMessage: [ProtobufUnittest_TestAllTypes.NestedMessage] = []
    var _repeatedForeignMessage: [ProtobufUnittest_ForeignMessage] = []
    var _repeatedImportMessage: [ProtobufUnittestImport_ImportMessage] = []
    var _repeatedNestedEnum: [ProtobufUnittest_TestAllTypes.NestedEnum] = []
    var _repeatedForeignEnum: [ProtobufUnittest_ForeignEnum] = []
    var _repeatedImportEnum: [ProtobufUnittestImport_ImportEnum] = []
    var _repeatedStringPiece: [String] = []
    var _repeatedCord: [String] = []
    var _repeatedLazyMessage: [ProtobufUnittest_TestAllTypes.NestedMessage] = []
    var _defaultInt32: Int32? = nil
    var _defaultInt64: Int64? = nil
    var _defaultUint32: UInt32? = nil
    var _defaultUint64: UInt64? = nil
    var _defaultSint32: Int32? = nil
    var _defaultSint64: Int64? = nil
    var _defaultFixed32: UInt32? = nil
    var _defaultFixed64: UInt64? = nil
    var _defaultSfixed32: Int32? = nil
    var _defaultSfixed64: Int64? = nil
    var _defaultFloat: Float? = nil
    var _defaultDouble: Double? = nil
    var _defaultBool: Bool? = nil
    var _defaultString: String? = nil
    var _defaultBytes: Data? = nil
    var _defaultNestedEnum: ProtobufUnittest_TestAllTypes.NestedEnum? = nil
    var _defaultForeignEnum: ProtobufUnittest_ForeignEnum? = nil
    var _defaultImportEnum: ProtobufUnittestImport_ImportEnum? = nil
    var _defaultStringPiece: String? = nil
    var _defaultCord: String? = nil
    var _oneofField = ProtobufUnittest_TestAllTypes.OneOf_OneofField()

    init() {}

    func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_optionalInt32)
      case 2: handled = try setter.decodeSingularField(fieldType: ProtobufInt64.self, value: &_optionalInt64)
      case 3: handled = try setter.decodeSingularField(fieldType: ProtobufUInt32.self, value: &_optionalUint32)
      case 4: handled = try setter.decodeSingularField(fieldType: ProtobufUInt64.self, value: &_optionalUint64)
      case 5: handled = try setter.decodeSingularField(fieldType: ProtobufSInt32.self, value: &_optionalSint32)
      case 6: handled = try setter.decodeSingularField(fieldType: ProtobufSInt64.self, value: &_optionalSint64)
      case 7: handled = try setter.decodeSingularField(fieldType: ProtobufFixed32.self, value: &_optionalFixed32)
      case 8: handled = try setter.decodeSingularField(fieldType: ProtobufFixed64.self, value: &_optionalFixed64)
      case 9: handled = try setter.decodeSingularField(fieldType: ProtobufSFixed32.self, value: &_optionalSfixed32)
      case 10: handled = try setter.decodeSingularField(fieldType: ProtobufSFixed64.self, value: &_optionalSfixed64)
      case 11: handled = try setter.decodeSingularField(fieldType: ProtobufFloat.self, value: &_optionalFloat)
      case 12: handled = try setter.decodeSingularField(fieldType: ProtobufDouble.self, value: &_optionalDouble)
      case 13: handled = try setter.decodeSingularField(fieldType: ProtobufBool.self, value: &_optionalBool)
      case 14: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &_optionalString)
      case 15: handled = try setter.decodeSingularField(fieldType: ProtobufBytes.self, value: &_optionalBytes)
      case 16: handled = try setter.decodeSingularGroupField(fieldType: ProtobufUnittest_TestAllTypes.OptionalGroup.self, value: &_optionalGroup)
      case 18: handled = try setter.decodeSingularMessageField(fieldType: ProtobufUnittest_TestAllTypes.NestedMessage.self, value: &_optionalNestedMessage)
      case 19: handled = try setter.decodeSingularMessageField(fieldType: ProtobufUnittest_ForeignMessage.self, value: &_optionalForeignMessage)
      case 20: handled = try setter.decodeSingularMessageField(fieldType: ProtobufUnittestImport_ImportMessage.self, value: &_optionalImportMessage)
      case 21: handled = try setter.decodeSingularField(fieldType: ProtobufUnittest_TestAllTypes.NestedEnum.self, value: &_optionalNestedEnum)
      case 22: handled = try setter.decodeSingularField(fieldType: ProtobufUnittest_ForeignEnum.self, value: &_optionalForeignEnum)
      case 23: handled = try setter.decodeSingularField(fieldType: ProtobufUnittestImport_ImportEnum.self, value: &_optionalImportEnum)
      case 24: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &_optionalStringPiece)
      case 25: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &_optionalCord)
      case 26: handled = try setter.decodeSingularMessageField(fieldType: ProtobufUnittestImport_PublicImportMessage.self, value: &_optionalPublicImportMessage)
      case 27: handled = try setter.decodeSingularMessageField(fieldType: ProtobufUnittest_TestAllTypes.NestedMessage.self, value: &_optionalLazyMessage)
      case 31: handled = try setter.decodeRepeatedField(fieldType: ProtobufInt32.self, value: &_repeatedInt32)
      case 32: handled = try setter.decodeRepeatedField(fieldType: ProtobufInt64.self, value: &_repeatedInt64)
      case 33: handled = try setter.decodeRepeatedField(fieldType: ProtobufUInt32.self, value: &_repeatedUint32)
      case 34: handled = try setter.decodeRepeatedField(fieldType: ProtobufUInt64.self, value: &_repeatedUint64)
      case 35: handled = try setter.decodeRepeatedField(fieldType: ProtobufSInt32.self, value: &_repeatedSint32)
      case 36: handled = try setter.decodeRepeatedField(fieldType: ProtobufSInt64.self, value: &_repeatedSint64)
      case 37: handled = try setter.decodeRepeatedField(fieldType: ProtobufFixed32.self, value: &_repeatedFixed32)
      case 38: handled = try setter.decodeRepeatedField(fieldType: ProtobufFixed64.self, value: &_repeatedFixed64)
      case 39: handled = try setter.decodeRepeatedField(fieldType: ProtobufSFixed32.self, value: &_repeatedSfixed32)
      case 40: handled = try setter.decodeRepeatedField(fieldType: ProtobufSFixed64.self, value: &_repeatedSfixed64)
      case 41: handled = try setter.decodeRepeatedField(fieldType: ProtobufFloat.self, value: &_repeatedFloat)
      case 42: handled = try setter.decodeRepeatedField(fieldType: ProtobufDouble.self, value: &_repeatedDouble)
      case 43: handled = try setter.decodeRepeatedField(fieldType: ProtobufBool.self, value: &_repeatedBool)
      case 44: handled = try setter.decodeRepeatedField(fieldType: ProtobufString.self, value: &_repeatedString)
      case 45: handled = try setter.decodeRepeatedField(fieldType: ProtobufBytes.self, value: &_repeatedBytes)
      case 46: handled = try setter.decodeRepeatedGroupField(fieldType: ProtobufUnittest_TestAllTypes.RepeatedGroup.self, value: &_repeatedGroup)
      case 48: handled = try setter.decodeRepeatedMessageField(fieldType: ProtobufUnittest_TestAllTypes.NestedMessage.self, value: &_repeatedNestedMessage)
      case 49: handled = try setter.decodeRepeatedMessageField(fieldType: ProtobufUnittest_ForeignMessage.self, value: &_repeatedForeignMessage)
      case 50: handled = try setter.decodeRepeatedMessageField(fieldType: ProtobufUnittestImport_ImportMessage.self, value: &_repeatedImportMessage)
      case 51: handled = try setter.decodeRepeatedField(fieldType: ProtobufUnittest_TestAllTypes.NestedEnum.self, value: &_repeatedNestedEnum)
      case 52: handled = try setter.decodeRepeatedField(fieldType: ProtobufUnittest_ForeignEnum.self, value: &_repeatedForeignEnum)
      case 53: handled = try setter.decodeRepeatedField(fieldType: ProtobufUnittestImport_ImportEnum.self, value: &_repeatedImportEnum)
      case 54: handled = try setter.decodeRepeatedField(fieldType: ProtobufString.self, value: &_repeatedStringPiece)
      case 55: handled = try setter.decodeRepeatedField(fieldType: ProtobufString.self, value: &_repeatedCord)
      case 57: handled = try setter.decodeRepeatedMessageField(fieldType: ProtobufUnittest_TestAllTypes.NestedMessage.self, value: &_repeatedLazyMessage)
      case 61: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_defaultInt32)
      case 62: handled = try setter.decodeSingularField(fieldType: ProtobufInt64.self, value: &_defaultInt64)
      case 63: handled = try setter.decodeSingularField(fieldType: ProtobufUInt32.self, value: &_defaultUint32)
      case 64: handled = try setter.decodeSingularField(fieldType: ProtobufUInt64.self, value: &_defaultUint64)
      case 65: handled = try setter.decodeSingularField(fieldType: ProtobufSInt32.self, value: &_defaultSint32)
      case 66: handled = try setter.decodeSingularField(fieldType: ProtobufSInt64.self, value: &_defaultSint64)
      case 67: handled = try setter.decodeSingularField(fieldType: ProtobufFixed32.self, value: &_defaultFixed32)
      case 68: handled = try setter.decodeSingularField(fieldType: ProtobufFixed64.self, value: &_defaultFixed64)
      case 69: handled = try setter.decodeSingularField(fieldType: ProtobufSFixed32.self, value: &_defaultSfixed32)
      case 70: handled = try setter.decodeSingularField(fieldType: ProtobufSFixed64.self, value: &_defaultSfixed64)
      case 71: handled = try setter.decodeSingularField(fieldType: ProtobufFloat.self, value: &_defaultFloat)
      case 72: handled = try setter.decodeSingularField(fieldType: ProtobufDouble.self, value: &_defaultDouble)
      case 73: handled = try setter.decodeSingularField(fieldType: ProtobufBool.self, value: &_defaultBool)
      case 74: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &_defaultString)
      case 75: handled = try setter.decodeSingularField(fieldType: ProtobufBytes.self, value: &_defaultBytes)
      case 81: handled = try setter.decodeSingularField(fieldType: ProtobufUnittest_TestAllTypes.NestedEnum.self, value: &_defaultNestedEnum)
      case 82: handled = try setter.decodeSingularField(fieldType: ProtobufUnittest_ForeignEnum.self, value: &_defaultForeignEnum)
      case 83: handled = try setter.decodeSingularField(fieldType: ProtobufUnittestImport_ImportEnum.self, value: &_defaultImportEnum)
      case 84: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &_defaultStringPiece)
      case 85: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &_defaultCord)
      case 111, 112, 113, 114:
        handled = try _oneofField.decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    func traverse(visitor: inout ProtobufVisitor) throws {
      if let v = _optionalInt32 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: v, protoFieldNumber: 1, protoFieldName: "optional_int32", jsonFieldName: "optionalInt32", swiftFieldName: "optionalInt32")
      }
      if let v = _optionalInt64 {
        try visitor.visitSingularField(fieldType: ProtobufInt64.self, value: v, protoFieldNumber: 2, protoFieldName: "optional_int64", jsonFieldName: "optionalInt64", swiftFieldName: "optionalInt64")
      }
      if let v = _optionalUint32 {
        try visitor.visitSingularField(fieldType: ProtobufUInt32.self, value: v, protoFieldNumber: 3, protoFieldName: "optional_uint32", jsonFieldName: "optionalUint32", swiftFieldName: "optionalUint32")
      }
      if let v = _optionalUint64 {
        try visitor.visitSingularField(fieldType: ProtobufUInt64.self, value: v, protoFieldNumber: 4, protoFieldName: "optional_uint64", jsonFieldName: "optionalUint64", swiftFieldName: "optionalUint64")
      }
      if let v = _optionalSint32 {
        try visitor.visitSingularField(fieldType: ProtobufSInt32.self, value: v, protoFieldNumber: 5, protoFieldName: "optional_sint32", jsonFieldName: "optionalSint32", swiftFieldName: "optionalSint32")
      }
      if let v = _optionalSint64 {
        try visitor.visitSingularField(fieldType: ProtobufSInt64.self, value: v, protoFieldNumber: 6, protoFieldName: "optional_sint64", jsonFieldName: "optionalSint64", swiftFieldName: "optionalSint64")
      }
      if let v = _optionalFixed32 {
        try visitor.visitSingularField(fieldType: ProtobufFixed32.self, value: v, protoFieldNumber: 7, protoFieldName: "optional_fixed32", jsonFieldName: "optionalFixed32", swiftFieldName: "optionalFixed32")
      }
      if let v = _optionalFixed64 {
        try visitor.visitSingularField(fieldType: ProtobufFixed64.self, value: v, protoFieldNumber: 8, protoFieldName: "optional_fixed64", jsonFieldName: "optionalFixed64", swiftFieldName: "optionalFixed64")
      }
      if let v = _optionalSfixed32 {
        try visitor.visitSingularField(fieldType: ProtobufSFixed32.self, value: v, protoFieldNumber: 9, protoFieldName: "optional_sfixed32", jsonFieldName: "optionalSfixed32", swiftFieldName: "optionalSfixed32")
      }
      if let v = _optionalSfixed64 {
        try visitor.visitSingularField(fieldType: ProtobufSFixed64.self, value: v, protoFieldNumber: 10, protoFieldName: "optional_sfixed64", jsonFieldName: "optionalSfixed64", swiftFieldName: "optionalSfixed64")
      }
      if let v = _optionalFloat {
        try visitor.visitSingularField(fieldType: ProtobufFloat.self, value: v, protoFieldNumber: 11, protoFieldName: "optional_float", jsonFieldName: "optionalFloat", swiftFieldName: "optionalFloat")
      }
      if let v = _optionalDouble {
        try visitor.visitSingularField(fieldType: ProtobufDouble.self, value: v, protoFieldNumber: 12, protoFieldName: "optional_double", jsonFieldName: "optionalDouble", swiftFieldName: "optionalDouble")
      }
      if let v = _optionalBool {
        try visitor.visitSingularField(fieldType: ProtobufBool.self, value: v, protoFieldNumber: 13, protoFieldName: "optional_bool", jsonFieldName: "optionalBool", swiftFieldName: "optionalBool")
      }
      if let v = _optionalString {
        try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 14, protoFieldName: "optional_string", jsonFieldName: "optionalString", swiftFieldName: "optionalString")
      }
      if let v = _optionalBytes {
        try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: v, protoFieldNumber: 15, protoFieldName: "optional_bytes", jsonFieldName: "optionalBytes", swiftFieldName: "optionalBytes")
      }
      if let v = _optionalGroup {
        try visitor.visitSingularGroupField(value: v, protoFieldNumber: 16, protoFieldName: "optionalgroup", jsonFieldName: "optionalgroup", swiftFieldName: "optionalGroup")
      }
      if let v = _optionalNestedMessage {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 18, protoFieldName: "optional_nested_message", jsonFieldName: "optionalNestedMessage", swiftFieldName: "optionalNestedMessage")
      }
      if let v = _optionalForeignMessage {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 19, protoFieldName: "optional_foreign_message", jsonFieldName: "optionalForeignMessage", swiftFieldName: "optionalForeignMessage")
      }
      if let v = _optionalImportMessage {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 20, protoFieldName: "optional_import_message", jsonFieldName: "optionalImportMessage", swiftFieldName: "optionalImportMessage")
      }
      if let v = _optionalNestedEnum {
        try visitor.visitSingularField(fieldType: ProtobufUnittest_TestAllTypes.NestedEnum.self, value: v, protoFieldNumber: 21, protoFieldName: "optional_nested_enum", jsonFieldName: "optionalNestedEnum", swiftFieldName: "optionalNestedEnum")
      }
      if let v = _optionalForeignEnum {
        try visitor.visitSingularField(fieldType: ProtobufUnittest_ForeignEnum.self, value: v, protoFieldNumber: 22, protoFieldName: "optional_foreign_enum", jsonFieldName: "optionalForeignEnum", swiftFieldName: "optionalForeignEnum")
      }
      if let v = _optionalImportEnum {
        try visitor.visitSingularField(fieldType: ProtobufUnittestImport_ImportEnum.self, value: v, protoFieldNumber: 23, protoFieldName: "optional_import_enum", jsonFieldName: "optionalImportEnum", swiftFieldName: "optionalImportEnum")
      }
      if let v = _optionalStringPiece {
        try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 24, protoFieldName: "optional_string_piece", jsonFieldName: "optionalStringPiece", swiftFieldName: "optionalStringPiece")
      }
      if let v = _optionalCord {
        try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 25, protoFieldName: "optional_cord", jsonFieldName: "optionalCord", swiftFieldName: "optionalCord")
      }
      if let v = _optionalPublicImportMessage {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 26, protoFieldName: "optional_public_import_message", jsonFieldName: "optionalPublicImportMessage", swiftFieldName: "optionalPublicImportMessage")
      }
      if let v = _optionalLazyMessage {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 27, protoFieldName: "optional_lazy_message", jsonFieldName: "optionalLazyMessage", swiftFieldName: "optionalLazyMessage")
      }
      if !_repeatedInt32.isEmpty {
        try visitor.visitRepeatedField(fieldType: ProtobufInt32.self, value: _repeatedInt32, protoFieldNumber: 31, protoFieldName: "repeated_int32", jsonFieldName: "repeatedInt32", swiftFieldName: "repeatedInt32")
      }
      if !_repeatedInt64.isEmpty {
        try visitor.visitRepeatedField(fieldType: ProtobufInt64.self, value: _repeatedInt64, protoFieldNumber: 32, protoFieldName: "repeated_int64", jsonFieldName: "repeatedInt64", swiftFieldName: "repeatedInt64")
      }
      if !_repeatedUint32.isEmpty {
        try visitor.visitRepeatedField(fieldType: ProtobufUInt32.self, value: _repeatedUint32, protoFieldNumber: 33, protoFieldName: "repeated_uint32", jsonFieldName: "repeatedUint32", swiftFieldName: "repeatedUint32")
      }
      if !_repeatedUint64.isEmpty {
        try visitor.visitRepeatedField(fieldType: ProtobufUInt64.self, value: _repeatedUint64, protoFieldNumber: 34, protoFieldName: "repeated_uint64", jsonFieldName: "repeatedUint64", swiftFieldName: "repeatedUint64")
      }
      if !_repeatedSint32.isEmpty {
        try visitor.visitRepeatedField(fieldType: ProtobufSInt32.self, value: _repeatedSint32, protoFieldNumber: 35, protoFieldName: "repeated_sint32", jsonFieldName: "repeatedSint32", swiftFieldName: "repeatedSint32")
      }
      if !_repeatedSint64.isEmpty {
        try visitor.visitRepeatedField(fieldType: ProtobufSInt64.self, value: _repeatedSint64, protoFieldNumber: 36, protoFieldName: "repeated_sint64", jsonFieldName: "repeatedSint64", swiftFieldName: "repeatedSint64")
      }
      if !_repeatedFixed32.isEmpty {
        try visitor.visitRepeatedField(fieldType: ProtobufFixed32.self, value: _repeatedFixed32, protoFieldNumber: 37, protoFieldName: "repeated_fixed32", jsonFieldName: "repeatedFixed32", swiftFieldName: "repeatedFixed32")
      }
      if !_repeatedFixed64.isEmpty {
        try visitor.visitRepeatedField(fieldType: ProtobufFixed64.self, value: _repeatedFixed64, protoFieldNumber: 38, protoFieldName: "repeated_fixed64", jsonFieldName: "repeatedFixed64", swiftFieldName: "repeatedFixed64")
      }
      if !_repeatedSfixed32.isEmpty {
        try visitor.visitRepeatedField(fieldType: ProtobufSFixed32.self, value: _repeatedSfixed32, protoFieldNumber: 39, protoFieldName: "repeated_sfixed32", jsonFieldName: "repeatedSfixed32", swiftFieldName: "repeatedSfixed32")
      }
      if !_repeatedSfixed64.isEmpty {
        try visitor.visitRepeatedField(fieldType: ProtobufSFixed64.self, value: _repeatedSfixed64, protoFieldNumber: 40, protoFieldName: "repeated_sfixed64", jsonFieldName: "repeatedSfixed64", swiftFieldName: "repeatedSfixed64")
      }
      if !_repeatedFloat.isEmpty {
        try visitor.visitRepeatedField(fieldType: ProtobufFloat.self, value: _repeatedFloat, protoFieldNumber: 41, protoFieldName: "repeated_float", jsonFieldName: "repeatedFloat", swiftFieldName: "repeatedFloat")
      }
      if !_repeatedDouble.isEmpty {
        try visitor.visitRepeatedField(fieldType: ProtobufDouble.self, value: _repeatedDouble, protoFieldNumber: 42, protoFieldName: "repeated_double", jsonFieldName: "repeatedDouble", swiftFieldName: "repeatedDouble")
      }
      if !_repeatedBool.isEmpty {
        try visitor.visitRepeatedField(fieldType: ProtobufBool.self, value: _repeatedBool, protoFieldNumber: 43, protoFieldName: "repeated_bool", jsonFieldName: "repeatedBool", swiftFieldName: "repeatedBool")
      }
      if !_repeatedString.isEmpty {
        try visitor.visitRepeatedField(fieldType: ProtobufString.self, value: _repeatedString, protoFieldNumber: 44, protoFieldName: "repeated_string", jsonFieldName: "repeatedString", swiftFieldName: "repeatedString")
      }
      if !_repeatedBytes.isEmpty {
        try visitor.visitRepeatedField(fieldType: ProtobufBytes.self, value: _repeatedBytes, protoFieldNumber: 45, protoFieldName: "repeated_bytes", jsonFieldName: "repeatedBytes", swiftFieldName: "repeatedBytes")
      }
      if !_repeatedGroup.isEmpty {
        try visitor.visitRepeatedGroupField(value: _repeatedGroup, protoFieldNumber: 46, protoFieldName: "repeatedgroup", jsonFieldName: "repeatedgroup", swiftFieldName: "repeatedGroup")
      }
      if !_repeatedNestedMessage.isEmpty {
        try visitor.visitRepeatedMessageField(value: _repeatedNestedMessage, protoFieldNumber: 48, protoFieldName: "repeated_nested_message", jsonFieldName: "repeatedNestedMessage", swiftFieldName: "repeatedNestedMessage")
      }
      if !_repeatedForeignMessage.isEmpty {
        try visitor.visitRepeatedMessageField(value: _repeatedForeignMessage, protoFieldNumber: 49, protoFieldName: "repeated_foreign_message", jsonFieldName: "repeatedForeignMessage", swiftFieldName: "repeatedForeignMessage")
      }
      if !_repeatedImportMessage.isEmpty {
        try visitor.visitRepeatedMessageField(value: _repeatedImportMessage, protoFieldNumber: 50, protoFieldName: "repeated_import_message", jsonFieldName: "repeatedImportMessage", swiftFieldName: "repeatedImportMessage")
      }
      if !_repeatedNestedEnum.isEmpty {
        try visitor.visitRepeatedField(fieldType: ProtobufUnittest_TestAllTypes.NestedEnum.self, value: _repeatedNestedEnum, protoFieldNumber: 51, protoFieldName: "repeated_nested_enum", jsonFieldName: "repeatedNestedEnum", swiftFieldName: "repeatedNestedEnum")
      }
      if !_repeatedForeignEnum.isEmpty {
        try visitor.visitRepeatedField(fieldType: ProtobufUnittest_ForeignEnum.self, value: _repeatedForeignEnum, protoFieldNumber: 52, protoFieldName: "repeated_foreign_enum", jsonFieldName: "repeatedForeignEnum", swiftFieldName: "repeatedForeignEnum")
      }
      if !_repeatedImportEnum.isEmpty {
        try visitor.visitRepeatedField(fieldType: ProtobufUnittestImport_ImportEnum.self, value: _repeatedImportEnum, protoFieldNumber: 53, protoFieldName: "repeated_import_enum", jsonFieldName: "repeatedImportEnum", swiftFieldName: "repeatedImportEnum")
      }
      if !_repeatedStringPiece.isEmpty {
        try visitor.visitRepeatedField(fieldType: ProtobufString.self, value: _repeatedStringPiece, protoFieldNumber: 54, protoFieldName: "repeated_string_piece", jsonFieldName: "repeatedStringPiece", swiftFieldName: "repeatedStringPiece")
      }
      if !_repeatedCord.isEmpty {
        try visitor.visitRepeatedField(fieldType: ProtobufString.self, value: _repeatedCord, protoFieldNumber: 55, protoFieldName: "repeated_cord", jsonFieldName: "repeatedCord", swiftFieldName: "repeatedCord")
      }
      if !_repeatedLazyMessage.isEmpty {
        try visitor.visitRepeatedMessageField(value: _repeatedLazyMessage, protoFieldNumber: 57, protoFieldName: "repeated_lazy_message", jsonFieldName: "repeatedLazyMessage", swiftFieldName: "repeatedLazyMessage")
      }
      if let v = _defaultInt32 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: v, protoFieldNumber: 61, protoFieldName: "default_int32", jsonFieldName: "defaultInt32", swiftFieldName: "defaultInt32")
      }
      if let v = _defaultInt64 {
        try visitor.visitSingularField(fieldType: ProtobufInt64.self, value: v, protoFieldNumber: 62, protoFieldName: "default_int64", jsonFieldName: "defaultInt64", swiftFieldName: "defaultInt64")
      }
      if let v = _defaultUint32 {
        try visitor.visitSingularField(fieldType: ProtobufUInt32.self, value: v, protoFieldNumber: 63, protoFieldName: "default_uint32", jsonFieldName: "defaultUint32", swiftFieldName: "defaultUint32")
      }
      if let v = _defaultUint64 {
        try visitor.visitSingularField(fieldType: ProtobufUInt64.self, value: v, protoFieldNumber: 64, protoFieldName: "default_uint64", jsonFieldName: "defaultUint64", swiftFieldName: "defaultUint64")
      }
      if let v = _defaultSint32 {
        try visitor.visitSingularField(fieldType: ProtobufSInt32.self, value: v, protoFieldNumber: 65, protoFieldName: "default_sint32", jsonFieldName: "defaultSint32", swiftFieldName: "defaultSint32")
      }
      if let v = _defaultSint64 {
        try visitor.visitSingularField(fieldType: ProtobufSInt64.self, value: v, protoFieldNumber: 66, protoFieldName: "default_sint64", jsonFieldName: "defaultSint64", swiftFieldName: "defaultSint64")
      }
      if let v = _defaultFixed32 {
        try visitor.visitSingularField(fieldType: ProtobufFixed32.self, value: v, protoFieldNumber: 67, protoFieldName: "default_fixed32", jsonFieldName: "defaultFixed32", swiftFieldName: "defaultFixed32")
      }
      if let v = _defaultFixed64 {
        try visitor.visitSingularField(fieldType: ProtobufFixed64.self, value: v, protoFieldNumber: 68, protoFieldName: "default_fixed64", jsonFieldName: "defaultFixed64", swiftFieldName: "defaultFixed64")
      }
      if let v = _defaultSfixed32 {
        try visitor.visitSingularField(fieldType: ProtobufSFixed32.self, value: v, protoFieldNumber: 69, protoFieldName: "default_sfixed32", jsonFieldName: "defaultSfixed32", swiftFieldName: "defaultSfixed32")
      }
      if let v = _defaultSfixed64 {
        try visitor.visitSingularField(fieldType: ProtobufSFixed64.self, value: v, protoFieldNumber: 70, protoFieldName: "default_sfixed64", jsonFieldName: "defaultSfixed64", swiftFieldName: "defaultSfixed64")
      }
      if let v = _defaultFloat {
        try visitor.visitSingularField(fieldType: ProtobufFloat.self, value: v, protoFieldNumber: 71, protoFieldName: "default_float", jsonFieldName: "defaultFloat", swiftFieldName: "defaultFloat")
      }
      if let v = _defaultDouble {
        try visitor.visitSingularField(fieldType: ProtobufDouble.self, value: v, protoFieldNumber: 72, protoFieldName: "default_double", jsonFieldName: "defaultDouble", swiftFieldName: "defaultDouble")
      }
      if let v = _defaultBool {
        try visitor.visitSingularField(fieldType: ProtobufBool.self, value: v, protoFieldNumber: 73, protoFieldName: "default_bool", jsonFieldName: "defaultBool", swiftFieldName: "defaultBool")
      }
      if let v = _defaultString {
        try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 74, protoFieldName: "default_string", jsonFieldName: "defaultString", swiftFieldName: "defaultString")
      }
      if let v = _defaultBytes {
        try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: v, protoFieldNumber: 75, protoFieldName: "default_bytes", jsonFieldName: "defaultBytes", swiftFieldName: "defaultBytes")
      }
      if let v = _defaultNestedEnum {
        try visitor.visitSingularField(fieldType: ProtobufUnittest_TestAllTypes.NestedEnum.self, value: v, protoFieldNumber: 81, protoFieldName: "default_nested_enum", jsonFieldName: "defaultNestedEnum", swiftFieldName: "defaultNestedEnum")
      }
      if let v = _defaultForeignEnum {
        try visitor.visitSingularField(fieldType: ProtobufUnittest_ForeignEnum.self, value: v, protoFieldNumber: 82, protoFieldName: "default_foreign_enum", jsonFieldName: "defaultForeignEnum", swiftFieldName: "defaultForeignEnum")
      }
      if let v = _defaultImportEnum {
        try visitor.visitSingularField(fieldType: ProtobufUnittestImport_ImportEnum.self, value: v, protoFieldNumber: 83, protoFieldName: "default_import_enum", jsonFieldName: "defaultImportEnum", swiftFieldName: "defaultImportEnum")
      }
      if let v = _defaultStringPiece {
        try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 84, protoFieldName: "default_string_piece", jsonFieldName: "defaultStringPiece", swiftFieldName: "defaultStringPiece")
      }
      if let v = _defaultCord {
        try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 85, protoFieldName: "default_cord", jsonFieldName: "defaultCord", swiftFieldName: "defaultCord")
      }
      try _oneofField.traverse(visitor: &visitor, start: 111, end: 115)
      unknown.traverse(visitor: &visitor)
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if (_optionalInt32 != other._optionalInt32) {return false}
      if (_optionalInt64 != other._optionalInt64) {return false}
      if (_optionalUint32 != other._optionalUint32) {return false}
      if (_optionalUint64 != other._optionalUint64) {return false}
      if (_optionalSint32 != other._optionalSint32) {return false}
      if (_optionalSint64 != other._optionalSint64) {return false}
      if (_optionalFixed32 != other._optionalFixed32) {return false}
      if (_optionalFixed64 != other._optionalFixed64) {return false}
      if (_optionalSfixed32 != other._optionalSfixed32) {return false}
      if (_optionalSfixed64 != other._optionalSfixed64) {return false}
      if (_optionalFloat != other._optionalFloat) {return false}
      if (_optionalDouble != other._optionalDouble) {return false}
      if (_optionalBool != other._optionalBool) {return false}
      if (_optionalString != other._optionalString) {return false}
      if (_optionalBytes != other._optionalBytes) {return false}
      if ((_optionalGroup != nil || other._optionalGroup != nil) && (_optionalGroup == nil || other._optionalGroup == nil || _optionalGroup! != other._optionalGroup!)) {return false}
      if ((_optionalNestedMessage != nil || other._optionalNestedMessage != nil) && (_optionalNestedMessage == nil || other._optionalNestedMessage == nil || _optionalNestedMessage! != other._optionalNestedMessage!)) {return false}
      if ((_optionalForeignMessage != nil || other._optionalForeignMessage != nil) && (_optionalForeignMessage == nil || other._optionalForeignMessage == nil || _optionalForeignMessage! != other._optionalForeignMessage!)) {return false}
      if ((_optionalImportMessage != nil || other._optionalImportMessage != nil) && (_optionalImportMessage == nil || other._optionalImportMessage == nil || _optionalImportMessage! != other._optionalImportMessage!)) {return false}
      if (_optionalNestedEnum != other._optionalNestedEnum) {return false}
      if (_optionalForeignEnum != other._optionalForeignEnum) {return false}
      if (_optionalImportEnum != other._optionalImportEnum) {return false}
      if (_optionalStringPiece != other._optionalStringPiece) {return false}
      if (_optionalCord != other._optionalCord) {return false}
      if ((_optionalPublicImportMessage != nil || other._optionalPublicImportMessage != nil) && (_optionalPublicImportMessage == nil || other._optionalPublicImportMessage == nil || _optionalPublicImportMessage! != other._optionalPublicImportMessage!)) {return false}
      if ((_optionalLazyMessage != nil || other._optionalLazyMessage != nil) && (_optionalLazyMessage == nil || other._optionalLazyMessage == nil || _optionalLazyMessage! != other._optionalLazyMessage!)) {return false}
      if _repeatedInt32 != other._repeatedInt32 {return false}
      if _repeatedInt64 != other._repeatedInt64 {return false}
      if _repeatedUint32 != other._repeatedUint32 {return false}
      if _repeatedUint64 != other._repeatedUint64 {return false}
      if _repeatedSint32 != other._repeatedSint32 {return false}
      if _repeatedSint64 != other._repeatedSint64 {return false}
      if _repeatedFixed32 != other._repeatedFixed32 {return false}
      if _repeatedFixed64 != other._repeatedFixed64 {return false}
      if _repeatedSfixed32 != other._repeatedSfixed32 {return false}
      if _repeatedSfixed64 != other._repeatedSfixed64 {return false}
      if _repeatedFloat != other._repeatedFloat {return false}
      if _repeatedDouble != other._repeatedDouble {return false}
      if _repeatedBool != other._repeatedBool {return false}
      if _repeatedString != other._repeatedString {return false}
      if _repeatedBytes != other._repeatedBytes {return false}
      if _repeatedGroup != other._repeatedGroup {return false}
      if _repeatedNestedMessage != other._repeatedNestedMessage {return false}
      if _repeatedForeignMessage != other._repeatedForeignMessage {return false}
      if _repeatedImportMessage != other._repeatedImportMessage {return false}
      if _repeatedNestedEnum != other._repeatedNestedEnum {return false}
      if _repeatedForeignEnum != other._repeatedForeignEnum {return false}
      if _repeatedImportEnum != other._repeatedImportEnum {return false}
      if _repeatedStringPiece != other._repeatedStringPiece {return false}
      if _repeatedCord != other._repeatedCord {return false}
      if _repeatedLazyMessage != other._repeatedLazyMessage {return false}
      if (((_defaultInt32 != nil && _defaultInt32! != 41) || (other._defaultInt32 != nil && other._defaultInt32! != 41)) && (_defaultInt32 == nil || other._defaultInt32 == nil || _defaultInt32! != other._defaultInt32!)) {return false}
      if (((_defaultInt64 != nil && _defaultInt64! != 42) || (other._defaultInt64 != nil && other._defaultInt64! != 42)) && (_defaultInt64 == nil || other._defaultInt64 == nil || _defaultInt64! != other._defaultInt64!)) {return false}
      if (((_defaultUint32 != nil && _defaultUint32! != 43) || (other._defaultUint32 != nil && other._defaultUint32! != 43)) && (_defaultUint32 == nil || other._defaultUint32 == nil || _defaultUint32! != other._defaultUint32!)) {return false}
      if (((_defaultUint64 != nil && _defaultUint64! != 44) || (other._defaultUint64 != nil && other._defaultUint64! != 44)) && (_defaultUint64 == nil || other._defaultUint64 == nil || _defaultUint64! != other._defaultUint64!)) {return false}
      if (((_defaultSint32 != nil && _defaultSint32! != -45) || (other._defaultSint32 != nil && other._defaultSint32! != -45)) && (_defaultSint32 == nil || other._defaultSint32 == nil || _defaultSint32! != other._defaultSint32!)) {return false}
      if (((_defaultSint64 != nil && _defaultSint64! != 46) || (other._defaultSint64 != nil && other._defaultSint64! != 46)) && (_defaultSint64 == nil || other._defaultSint64 == nil || _defaultSint64! != other._defaultSint64!)) {return false}
      if (((_defaultFixed32 != nil && _defaultFixed32! != 47) || (other._defaultFixed32 != nil && other._defaultFixed32! != 47)) && (_defaultFixed32 == nil || other._defaultFixed32 == nil || _defaultFixed32! != other._defaultFixed32!)) {return false}
      if (((_defaultFixed64 != nil && _defaultFixed64! != 48) || (other._defaultFixed64 != nil && other._defaultFixed64! != 48)) && (_defaultFixed64 == nil || other._defaultFixed64 == nil || _defaultFixed64! != other._defaultFixed64!)) {return false}
      if (((_defaultSfixed32 != nil && _defaultSfixed32! != 49) || (other._defaultSfixed32 != nil && other._defaultSfixed32! != 49)) && (_defaultSfixed32 == nil || other._defaultSfixed32 == nil || _defaultSfixed32! != other._defaultSfixed32!)) {return false}
      if (((_defaultSfixed64 != nil && _defaultSfixed64! != -50) || (other._defaultSfixed64 != nil && other._defaultSfixed64! != -50)) && (_defaultSfixed64 == nil || other._defaultSfixed64 == nil || _defaultSfixed64! != other._defaultSfixed64!)) {return false}
      if (((_defaultFloat != nil && _defaultFloat! != 51.5) || (other._defaultFloat != nil && other._defaultFloat! != 51.5)) && (_defaultFloat == nil || other._defaultFloat == nil || _defaultFloat! != other._defaultFloat!)) {return false}
      if (((_defaultDouble != nil && _defaultDouble! != 52000) || (other._defaultDouble != nil && other._defaultDouble! != 52000)) && (_defaultDouble == nil || other._defaultDouble == nil || _defaultDouble! != other._defaultDouble!)) {return false}
      if (((_defaultBool != nil && _defaultBool! != true) || (other._defaultBool != nil && other._defaultBool! != true)) && (_defaultBool == nil || other._defaultBool == nil || _defaultBool! != other._defaultBool!)) {return false}
      if (((_defaultString != nil && _defaultString! != "hello") || (other._defaultString != nil && other._defaultString! != "hello")) && (_defaultString == nil || other._defaultString == nil || _defaultString! != other._defaultString!)) {return false}
      if (((_defaultBytes != nil && _defaultBytes! != Data(bytes: [119, 111, 114, 108, 100])) || (other._defaultBytes != nil && other._defaultBytes! != Data(bytes: [119, 111, 114, 108, 100]))) && (_defaultBytes == nil || other._defaultBytes == nil || _defaultBytes! != other._defaultBytes!)) {return false}
      if (((_defaultNestedEnum != nil && _defaultNestedEnum! != ProtobufUnittest_TestAllTypes.NestedEnum.bar) || (other._defaultNestedEnum != nil && other._defaultNestedEnum! != ProtobufUnittest_TestAllTypes.NestedEnum.bar)) && (_defaultNestedEnum == nil || other._defaultNestedEnum == nil || _defaultNestedEnum! != other._defaultNestedEnum!)) {return false}
      if (((_defaultForeignEnum != nil && _defaultForeignEnum! != ProtobufUnittest_ForeignEnum.foreignBar) || (other._defaultForeignEnum != nil && other._defaultForeignEnum! != ProtobufUnittest_ForeignEnum.foreignBar)) && (_defaultForeignEnum == nil || other._defaultForeignEnum == nil || _defaultForeignEnum! != other._defaultForeignEnum!)) {return false}
      if (((_defaultImportEnum != nil && _defaultImportEnum! != ProtobufUnittestImport_ImportEnum.importBar) || (other._defaultImportEnum != nil && other._defaultImportEnum! != ProtobufUnittestImport_ImportEnum.importBar)) && (_defaultImportEnum == nil || other._defaultImportEnum == nil || _defaultImportEnum! != other._defaultImportEnum!)) {return false}
      if (((_defaultStringPiece != nil && _defaultStringPiece! != "abc") || (other._defaultStringPiece != nil && other._defaultStringPiece! != "abc")) && (_defaultStringPiece == nil || other._defaultStringPiece == nil || _defaultStringPiece! != other._defaultStringPiece!)) {return false}
      if (((_defaultCord != nil && _defaultCord! != "123") || (other._defaultCord != nil && other._defaultCord! != "123")) && (_defaultCord == nil || other._defaultCord == nil || _defaultCord! != other._defaultCord!)) {return false}
      if _oneofField != other._oneofField {return false}
      if unknown != other.unknown {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone.unknown = unknown
      clone._optionalInt32 = _optionalInt32
      clone._optionalInt64 = _optionalInt64
      clone._optionalUint32 = _optionalUint32
      clone._optionalUint64 = _optionalUint64
      clone._optionalSint32 = _optionalSint32
      clone._optionalSint64 = _optionalSint64
      clone._optionalFixed32 = _optionalFixed32
      clone._optionalFixed64 = _optionalFixed64
      clone._optionalSfixed32 = _optionalSfixed32
      clone._optionalSfixed64 = _optionalSfixed64
      clone._optionalFloat = _optionalFloat
      clone._optionalDouble = _optionalDouble
      clone._optionalBool = _optionalBool
      clone._optionalString = _optionalString
      clone._optionalBytes = _optionalBytes
      clone._optionalGroup = _optionalGroup
      clone._optionalNestedMessage = _optionalNestedMessage
      clone._optionalForeignMessage = _optionalForeignMessage
      clone._optionalImportMessage = _optionalImportMessage
      clone._optionalNestedEnum = _optionalNestedEnum
      clone._optionalForeignEnum = _optionalForeignEnum
      clone._optionalImportEnum = _optionalImportEnum
      clone._optionalStringPiece = _optionalStringPiece
      clone._optionalCord = _optionalCord
      clone._optionalPublicImportMessage = _optionalPublicImportMessage
      clone._optionalLazyMessage = _optionalLazyMessage
      clone._repeatedInt32 = _repeatedInt32
      clone._repeatedInt64 = _repeatedInt64
      clone._repeatedUint32 = _repeatedUint32
      clone._repeatedUint64 = _repeatedUint64
      clone._repeatedSint32 = _repeatedSint32
      clone._repeatedSint64 = _repeatedSint64
      clone._repeatedFixed32 = _repeatedFixed32
      clone._repeatedFixed64 = _repeatedFixed64
      clone._repeatedSfixed32 = _repeatedSfixed32
      clone._repeatedSfixed64 = _repeatedSfixed64
      clone._repeatedFloat = _repeatedFloat
      clone._repeatedDouble = _repeatedDouble
      clone._repeatedBool = _repeatedBool
      clone._repeatedString = _repeatedString
      clone._repeatedBytes = _repeatedBytes
      clone._repeatedGroup = _repeatedGroup
      clone._repeatedNestedMessage = _repeatedNestedMessage
      clone._repeatedForeignMessage = _repeatedForeignMessage
      clone._repeatedImportMessage = _repeatedImportMessage
      clone._repeatedNestedEnum = _repeatedNestedEnum
      clone._repeatedForeignEnum = _repeatedForeignEnum
      clone._repeatedImportEnum = _repeatedImportEnum
      clone._repeatedStringPiece = _repeatedStringPiece
      clone._repeatedCord = _repeatedCord
      clone._repeatedLazyMessage = _repeatedLazyMessage
      clone._defaultInt32 = _defaultInt32
      clone._defaultInt64 = _defaultInt64
      clone._defaultUint32 = _defaultUint32
      clone._defaultUint64 = _defaultUint64
      clone._defaultSint32 = _defaultSint32
      clone._defaultSint64 = _defaultSint64
      clone._defaultFixed32 = _defaultFixed32
      clone._defaultFixed64 = _defaultFixed64
      clone._defaultSfixed32 = _defaultSfixed32
      clone._defaultSfixed64 = _defaultSfixed64
      clone._defaultFloat = _defaultFloat
      clone._defaultDouble = _defaultDouble
      clone._defaultBool = _defaultBool
      clone._defaultString = _defaultString
      clone._defaultBytes = _defaultBytes
      clone._defaultNestedEnum = _defaultNestedEnum
      clone._defaultForeignEnum = _defaultForeignEnum
      clone._defaultImportEnum = _defaultImportEnum
      clone._defaultStringPiece = _defaultStringPiece
      clone._defaultCord = _defaultCord
      clone._oneofField = _oneofField
      return clone
    }
  }

  private var _storage = _StorageClass()

  public enum OneOf_OneofField: ExpressibleByNilLiteral, ProtobufOneofEnum {
    case oneofUint32(UInt32)
    case oneofNestedMessage(ProtobufUnittest_TestAllTypes.NestedMessage)
    case oneofString(String)
    case oneofBytes(Data)
    case None

    public init(nilLiteral: ()) {
      self = .None
    }

    public init() {
      self = .None
    }

    public mutating func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      if self != .None && setter.rejectConflictingOneof {
        throw ProtobufDecodingError.duplicatedOneOf
      }
      let handled: Bool
      switch protoFieldNumber {
      case 111:
        var value: UInt32?
        handled = try setter.decodeSingularField(fieldType: ProtobufUInt32.self, value: &value)
        if let value = value, handled {
          self = .oneofUint32(value)
        }
      case 112:
        var value: ProtobufUnittest_TestAllTypes.NestedMessage?
        handled = try setter.decodeSingularMessageField(fieldType: ProtobufUnittest_TestAllTypes.NestedMessage.self, value: &value)
        if let value = value, handled {
          self = .oneofNestedMessage(value)
        }
      case 113:
        var value: String?
        handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &value)
        if let value = value, handled {
          self = .oneofString(value)
        }
      case 114:
        var value: Data?
        handled = try setter.decodeSingularField(fieldType: ProtobufBytes.self, value: &value)
        if let value = value, handled {
          self = .oneofBytes(value)
        }
      default:
        handled = false
        self = .None
      }
      return handled
    }

    public func traverse(visitor: inout ProtobufVisitor, start: Int, end: Int) throws {
      switch self {
      case .oneofUint32(let v):
        if start <= 111 && 111 < end {
          try visitor.visitSingularField(fieldType: ProtobufUInt32.self, value: v, protoFieldNumber: 111, protoFieldName: "oneof_uint32", jsonFieldName: "oneofUint32", swiftFieldName: "oneofUint32")
        }
      case .oneofNestedMessage(let v):
        if start <= 112 && 112 < end {
          try visitor.visitSingularMessageField(value: v, protoFieldNumber: 112, protoFieldName: "oneof_nested_message", jsonFieldName: "oneofNestedMessage", swiftFieldName: "oneofNestedMessage")
        }
      case .oneofString(let v):
        if start <= 113 && 113 < end {
          try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 113, protoFieldName: "oneof_string", jsonFieldName: "oneofString", swiftFieldName: "oneofString")
        }
      case .oneofBytes(let v):
        if start <= 114 && 114 < end {
          try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: v, protoFieldNumber: 114, protoFieldName: "oneof_bytes", jsonFieldName: "oneofBytes", swiftFieldName: "oneofBytes")
        }
      case .None:
        break
      }
    }
  }

  public enum NestedEnum: ProtobufEnum {
    public typealias RawValue = Int
    case foo // = 1
    case bar // = 2
    case baz // = 3

    ///   Intentionally negative.
    case neg // = -1

    public init() {
      self = .foo
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 1: self = .foo
      case 2: self = .bar
      case 3: self = .baz
      case -1: self = .neg
      default: return nil
      }
    }

    public init?(name: String) {
      switch name {
      case "foo": self = .foo
      case "bar": self = .bar
      case "baz": self = .baz
      case "neg": self = .neg
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "FOO": self = .foo
      case "BAR": self = .bar
      case "BAZ": self = .baz
      case "NEG": self = .neg
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "FOO": self = .foo
      case "BAR": self = .bar
      case "BAZ": self = .baz
      case "NEG": self = .neg
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .foo: return 1
        case .bar: return 2
        case .baz: return 3
        case .neg: return -1
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .foo: return "\"FOO\""
        case .bar: return "\"BAR\""
        case .baz: return "\"BAZ\""
        case .neg: return "\"NEG\""
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .foo: return ".foo"
        case .bar: return ".bar"
        case .baz: return ".baz"
        case .neg: return ".neg"
        }
      }
    }

  }

  public struct NestedMessage: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "ProtobufUnittest_TestAllTypes.NestedMessage"}
    public var protoMessageName: String {return "NestedMessage"}
    public var protoPackageName: String {return "protobuf_unittest"}
    public var jsonFieldNames: [String: Int] {return [
      "bb": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "bb": 1,
    ]}

    var unknown = ProtobufUnknownStorage()

    ///   The field name "b" fails to compile in proto1 because it conflicts with
    ///   a local variable named "b" in one of the generated methods.  Doh.
    ///   This file needs to compile in proto1 to test backwards-compatibility.
    private var _bb: Int32? = nil
    public var bb: Int32 {
      get {return _bb ?? 0}
      set {_bb = newValue}
    }
    public var hasBb: Bool {
      return _bb != nil
    }
    public mutating func clearBb() {
      return _bb = nil
    }

    public init() {}

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_bb)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if let v = _bb {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: v, protoFieldNumber: 1, protoFieldName: "bb", jsonFieldName: "bb", swiftFieldName: "bb")
      }
      unknown.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestAllTypes.NestedMessage) -> Bool {
      if (bb != other.bb) {return false}
      if unknown != other.unknown {return false}
      return true
    }
  }

  public struct OptionalGroup: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "ProtobufUnittest_TestAllTypes.OptionalGroup"}
    public var protoMessageName: String {return "OptionalGroup"}
    public var protoPackageName: String {return "protobuf_unittest"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 17,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 17,
    ]}

    var unknown = ProtobufUnknownStorage()

    private var _a: Int32? = nil
    public var a: Int32 {
      get {return _a ?? 0}
      set {_a = newValue}
    }
    public var hasA: Bool {
      return _a != nil
    }
    public mutating func clearA() {
      return _a = nil
    }

    public init() {}

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 17: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_a)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if let v = _a {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: v, protoFieldNumber: 17, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
      unknown.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestAllTypes.OptionalGroup) -> Bool {
      if (a != other.a) {return false}
      if unknown != other.unknown {return false}
      return true
    }
  }

  public struct RepeatedGroup: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "ProtobufUnittest_TestAllTypes.RepeatedGroup"}
    public var protoMessageName: String {return "RepeatedGroup"}
    public var protoPackageName: String {return "protobuf_unittest"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 47,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 47,
    ]}

    var unknown = ProtobufUnknownStorage()

    private var _a: Int32? = nil
    public var a: Int32 {
      get {return _a ?? 0}
      set {_a = newValue}
    }
    public var hasA: Bool {
      return _a != nil
    }
    public mutating func clearA() {
      return _a = nil
    }

    public init() {}

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 47: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_a)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if let v = _a {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: v, protoFieldNumber: 47, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
      unknown.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestAllTypes.RepeatedGroup) -> Bool {
      if (a != other.a) {return false}
      if unknown != other.unknown {return false}
      return true
    }
  }

  ///   Singular
  public var optionalInt32: Int32 {
    get {return _storage._optionalInt32 ?? 0}
    set {_uniqueStorage()._optionalInt32 = newValue}
  }
  public var hasOptionalInt32: Bool {
    return _storage._optionalInt32 != nil
  }
  public mutating func clearOptionalInt32() {
    return _storage._optionalInt32 = nil
  }

  public var optionalInt64: Int64 {
    get {return _storage._optionalInt64 ?? 0}
    set {_uniqueStorage()._optionalInt64 = newValue}
  }
  public var hasOptionalInt64: Bool {
    return _storage._optionalInt64 != nil
  }
  public mutating func clearOptionalInt64() {
    return _storage._optionalInt64 = nil
  }

  public var optionalUint32: UInt32 {
    get {return _storage._optionalUint32 ?? 0}
    set {_uniqueStorage()._optionalUint32 = newValue}
  }
  public var hasOptionalUint32: Bool {
    return _storage._optionalUint32 != nil
  }
  public mutating func clearOptionalUint32() {
    return _storage._optionalUint32 = nil
  }

  public var optionalUint64: UInt64 {
    get {return _storage._optionalUint64 ?? 0}
    set {_uniqueStorage()._optionalUint64 = newValue}
  }
  public var hasOptionalUint64: Bool {
    return _storage._optionalUint64 != nil
  }
  public mutating func clearOptionalUint64() {
    return _storage._optionalUint64 = nil
  }

  public var optionalSint32: Int32 {
    get {return _storage._optionalSint32 ?? 0}
    set {_uniqueStorage()._optionalSint32 = newValue}
  }
  public var hasOptionalSint32: Bool {
    return _storage._optionalSint32 != nil
  }
  public mutating func clearOptionalSint32() {
    return _storage._optionalSint32 = nil
  }

  public var optionalSint64: Int64 {
    get {return _storage._optionalSint64 ?? 0}
    set {_uniqueStorage()._optionalSint64 = newValue}
  }
  public var hasOptionalSint64: Bool {
    return _storage._optionalSint64 != nil
  }
  public mutating func clearOptionalSint64() {
    return _storage._optionalSint64 = nil
  }

  public var optionalFixed32: UInt32 {
    get {return _storage._optionalFixed32 ?? 0}
    set {_uniqueStorage()._optionalFixed32 = newValue}
  }
  public var hasOptionalFixed32: Bool {
    return _storage._optionalFixed32 != nil
  }
  public mutating func clearOptionalFixed32() {
    return _storage._optionalFixed32 = nil
  }

  public var optionalFixed64: UInt64 {
    get {return _storage._optionalFixed64 ?? 0}
    set {_uniqueStorage()._optionalFixed64 = newValue}
  }
  public var hasOptionalFixed64: Bool {
    return _storage._optionalFixed64 != nil
  }
  public mutating func clearOptionalFixed64() {
    return _storage._optionalFixed64 = nil
  }

  public var optionalSfixed32: Int32 {
    get {return _storage._optionalSfixed32 ?? 0}
    set {_uniqueStorage()._optionalSfixed32 = newValue}
  }
  public var hasOptionalSfixed32: Bool {
    return _storage._optionalSfixed32 != nil
  }
  public mutating func clearOptionalSfixed32() {
    return _storage._optionalSfixed32 = nil
  }

  public var optionalSfixed64: Int64 {
    get {return _storage._optionalSfixed64 ?? 0}
    set {_uniqueStorage()._optionalSfixed64 = newValue}
  }
  public var hasOptionalSfixed64: Bool {
    return _storage._optionalSfixed64 != nil
  }
  public mutating func clearOptionalSfixed64() {
    return _storage._optionalSfixed64 = nil
  }

  public var optionalFloat: Float {
    get {return _storage._optionalFloat ?? 0}
    set {_uniqueStorage()._optionalFloat = newValue}
  }
  public var hasOptionalFloat: Bool {
    return _storage._optionalFloat != nil
  }
  public mutating func clearOptionalFloat() {
    return _storage._optionalFloat = nil
  }

  public var optionalDouble: Double {
    get {return _storage._optionalDouble ?? 0}
    set {_uniqueStorage()._optionalDouble = newValue}
  }
  public var hasOptionalDouble: Bool {
    return _storage._optionalDouble != nil
  }
  public mutating func clearOptionalDouble() {
    return _storage._optionalDouble = nil
  }

  public var optionalBool: Bool {
    get {return _storage._optionalBool ?? false}
    set {_uniqueStorage()._optionalBool = newValue}
  }
  public var hasOptionalBool: Bool {
    return _storage._optionalBool != nil
  }
  public mutating func clearOptionalBool() {
    return _storage._optionalBool = nil
  }

  public var optionalString: String {
    get {return _storage._optionalString ?? ""}
    set {_uniqueStorage()._optionalString = newValue}
  }
  public var hasOptionalString: Bool {
    return _storage._optionalString != nil
  }
  public mutating func clearOptionalString() {
    return _storage._optionalString = nil
  }

  public var optionalBytes: Data {
    get {return _storage._optionalBytes ?? Data()}
    set {_uniqueStorage()._optionalBytes = newValue}
  }
  public var hasOptionalBytes: Bool {
    return _storage._optionalBytes != nil
  }
  public mutating func clearOptionalBytes() {
    return _storage._optionalBytes = nil
  }

  public var optionalGroup: ProtobufUnittest_TestAllTypes.OptionalGroup {
    get {return _storage._optionalGroup ?? ProtobufUnittest_TestAllTypes.OptionalGroup()}
    set {_uniqueStorage()._optionalGroup = newValue}
  }
  public var hasOptionalGroup: Bool {
    return _storage._optionalGroup != nil
  }
  public mutating func clearOptionalGroup() {
    return _storage._optionalGroup = nil
  }

  public var optionalNestedMessage: ProtobufUnittest_TestAllTypes.NestedMessage {
    get {return _storage._optionalNestedMessage ?? ProtobufUnittest_TestAllTypes.NestedMessage()}
    set {_uniqueStorage()._optionalNestedMessage = newValue}
  }
  public var hasOptionalNestedMessage: Bool {
    return _storage._optionalNestedMessage != nil
  }
  public mutating func clearOptionalNestedMessage() {
    return _storage._optionalNestedMessage = nil
  }

  public var optionalForeignMessage: ProtobufUnittest_ForeignMessage {
    get {return _storage._optionalForeignMessage ?? ProtobufUnittest_ForeignMessage()}
    set {_uniqueStorage()._optionalForeignMessage = newValue}
  }
  public var hasOptionalForeignMessage: Bool {
    return _storage._optionalForeignMessage != nil
  }
  public mutating func clearOptionalForeignMessage() {
    return _storage._optionalForeignMessage = nil
  }

  public var optionalImportMessage: ProtobufUnittestImport_ImportMessage {
    get {return _storage._optionalImportMessage ?? ProtobufUnittestImport_ImportMessage()}
    set {_uniqueStorage()._optionalImportMessage = newValue}
  }
  public var hasOptionalImportMessage: Bool {
    return _storage._optionalImportMessage != nil
  }
  public mutating func clearOptionalImportMessage() {
    return _storage._optionalImportMessage = nil
  }

  public var optionalNestedEnum: ProtobufUnittest_TestAllTypes.NestedEnum {
    get {return _storage._optionalNestedEnum ?? ProtobufUnittest_TestAllTypes.NestedEnum.foo}
    set {_uniqueStorage()._optionalNestedEnum = newValue}
  }
  public var hasOptionalNestedEnum: Bool {
    return _storage._optionalNestedEnum != nil
  }
  public mutating func clearOptionalNestedEnum() {
    return _storage._optionalNestedEnum = nil
  }

  public var optionalForeignEnum: ProtobufUnittest_ForeignEnum {
    get {return _storage._optionalForeignEnum ?? ProtobufUnittest_ForeignEnum.foreignFoo}
    set {_uniqueStorage()._optionalForeignEnum = newValue}
  }
  public var hasOptionalForeignEnum: Bool {
    return _storage._optionalForeignEnum != nil
  }
  public mutating func clearOptionalForeignEnum() {
    return _storage._optionalForeignEnum = nil
  }

  public var optionalImportEnum: ProtobufUnittestImport_ImportEnum {
    get {return _storage._optionalImportEnum ?? ProtobufUnittestImport_ImportEnum.importFoo}
    set {_uniqueStorage()._optionalImportEnum = newValue}
  }
  public var hasOptionalImportEnum: Bool {
    return _storage._optionalImportEnum != nil
  }
  public mutating func clearOptionalImportEnum() {
    return _storage._optionalImportEnum = nil
  }

  public var optionalStringPiece: String {
    get {return _storage._optionalStringPiece ?? ""}
    set {_uniqueStorage()._optionalStringPiece = newValue}
  }
  public var hasOptionalStringPiece: Bool {
    return _storage._optionalStringPiece != nil
  }
  public mutating func clearOptionalStringPiece() {
    return _storage._optionalStringPiece = nil
  }

  public var optionalCord: String {
    get {return _storage._optionalCord ?? ""}
    set {_uniqueStorage()._optionalCord = newValue}
  }
  public var hasOptionalCord: Bool {
    return _storage._optionalCord != nil
  }
  public mutating func clearOptionalCord() {
    return _storage._optionalCord = nil
  }

  ///   Defined in unittest_import_public.proto
  public var optionalPublicImportMessage: ProtobufUnittestImport_PublicImportMessage {
    get {return _storage._optionalPublicImportMessage ?? ProtobufUnittestImport_PublicImportMessage()}
    set {_uniqueStorage()._optionalPublicImportMessage = newValue}
  }
  public var hasOptionalPublicImportMessage: Bool {
    return _storage._optionalPublicImportMessage != nil
  }
  public mutating func clearOptionalPublicImportMessage() {
    return _storage._optionalPublicImportMessage = nil
  }

  public var optionalLazyMessage: ProtobufUnittest_TestAllTypes.NestedMessage {
    get {return _storage._optionalLazyMessage ?? ProtobufUnittest_TestAllTypes.NestedMessage()}
    set {_uniqueStorage()._optionalLazyMessage = newValue}
  }
  public var hasOptionalLazyMessage: Bool {
    return _storage._optionalLazyMessage != nil
  }
  public mutating func clearOptionalLazyMessage() {
    return _storage._optionalLazyMessage = nil
  }

  ///   Repeated
  public var repeatedInt32: [Int32] {
    get {return _storage._repeatedInt32}
    set {_uniqueStorage()._repeatedInt32 = newValue}
  }

  public var repeatedInt64: [Int64] {
    get {return _storage._repeatedInt64}
    set {_uniqueStorage()._repeatedInt64 = newValue}
  }

  public var repeatedUint32: [UInt32] {
    get {return _storage._repeatedUint32}
    set {_uniqueStorage()._repeatedUint32 = newValue}
  }

  public var repeatedUint64: [UInt64] {
    get {return _storage._repeatedUint64}
    set {_uniqueStorage()._repeatedUint64 = newValue}
  }

  public var repeatedSint32: [Int32] {
    get {return _storage._repeatedSint32}
    set {_uniqueStorage()._repeatedSint32 = newValue}
  }

  public var repeatedSint64: [Int64] {
    get {return _storage._repeatedSint64}
    set {_uniqueStorage()._repeatedSint64 = newValue}
  }

  public var repeatedFixed32: [UInt32] {
    get {return _storage._repeatedFixed32}
    set {_uniqueStorage()._repeatedFixed32 = newValue}
  }

  public var repeatedFixed64: [UInt64] {
    get {return _storage._repeatedFixed64}
    set {_uniqueStorage()._repeatedFixed64 = newValue}
  }

  public var repeatedSfixed32: [Int32] {
    get {return _storage._repeatedSfixed32}
    set {_uniqueStorage()._repeatedSfixed32 = newValue}
  }

  public var repeatedSfixed64: [Int64] {
    get {return _storage._repeatedSfixed64}
    set {_uniqueStorage()._repeatedSfixed64 = newValue}
  }

  public var repeatedFloat: [Float] {
    get {return _storage._repeatedFloat}
    set {_uniqueStorage()._repeatedFloat = newValue}
  }

  public var repeatedDouble: [Double] {
    get {return _storage._repeatedDouble}
    set {_uniqueStorage()._repeatedDouble = newValue}
  }

  public var repeatedBool: [Bool] {
    get {return _storage._repeatedBool}
    set {_uniqueStorage()._repeatedBool = newValue}
  }

  public var repeatedString: [String] {
    get {return _storage._repeatedString}
    set {_uniqueStorage()._repeatedString = newValue}
  }

  public var repeatedBytes: [Data] {
    get {return _storage._repeatedBytes}
    set {_uniqueStorage()._repeatedBytes = newValue}
  }

  public var repeatedGroup: [ProtobufUnittest_TestAllTypes.RepeatedGroup] {
    get {return _storage._repeatedGroup}
    set {_uniqueStorage()._repeatedGroup = newValue}
  }

  public var repeatedNestedMessage: [ProtobufUnittest_TestAllTypes.NestedMessage] {
    get {return _storage._repeatedNestedMessage}
    set {_uniqueStorage()._repeatedNestedMessage = newValue}
  }

  public var repeatedForeignMessage: [ProtobufUnittest_ForeignMessage] {
    get {return _storage._repeatedForeignMessage}
    set {_uniqueStorage()._repeatedForeignMessage = newValue}
  }

  public var repeatedImportMessage: [ProtobufUnittestImport_ImportMessage] {
    get {return _storage._repeatedImportMessage}
    set {_uniqueStorage()._repeatedImportMessage = newValue}
  }

  public var repeatedNestedEnum: [ProtobufUnittest_TestAllTypes.NestedEnum] {
    get {return _storage._repeatedNestedEnum}
    set {_uniqueStorage()._repeatedNestedEnum = newValue}
  }

  public var repeatedForeignEnum: [ProtobufUnittest_ForeignEnum] {
    get {return _storage._repeatedForeignEnum}
    set {_uniqueStorage()._repeatedForeignEnum = newValue}
  }

  public var repeatedImportEnum: [ProtobufUnittestImport_ImportEnum] {
    get {return _storage._repeatedImportEnum}
    set {_uniqueStorage()._repeatedImportEnum = newValue}
  }

  public var repeatedStringPiece: [String] {
    get {return _storage._repeatedStringPiece}
    set {_uniqueStorage()._repeatedStringPiece = newValue}
  }

  public var repeatedCord: [String] {
    get {return _storage._repeatedCord}
    set {_uniqueStorage()._repeatedCord = newValue}
  }

  public var repeatedLazyMessage: [ProtobufUnittest_TestAllTypes.NestedMessage] {
    get {return _storage._repeatedLazyMessage}
    set {_uniqueStorage()._repeatedLazyMessage = newValue}
  }

  ///   Singular with defaults
  public var defaultInt32: Int32 {
    get {return _storage._defaultInt32 ?? 41}
    set {_uniqueStorage()._defaultInt32 = newValue}
  }
  public var hasDefaultInt32: Bool {
    return _storage._defaultInt32 != nil
  }
  public mutating func clearDefaultInt32() {
    return _storage._defaultInt32 = nil
  }

  public var defaultInt64: Int64 {
    get {return _storage._defaultInt64 ?? 42}
    set {_uniqueStorage()._defaultInt64 = newValue}
  }
  public var hasDefaultInt64: Bool {
    return _storage._defaultInt64 != nil
  }
  public mutating func clearDefaultInt64() {
    return _storage._defaultInt64 = nil
  }

  public var defaultUint32: UInt32 {
    get {return _storage._defaultUint32 ?? 43}
    set {_uniqueStorage()._defaultUint32 = newValue}
  }
  public var hasDefaultUint32: Bool {
    return _storage._defaultUint32 != nil
  }
  public mutating func clearDefaultUint32() {
    return _storage._defaultUint32 = nil
  }

  public var defaultUint64: UInt64 {
    get {return _storage._defaultUint64 ?? 44}
    set {_uniqueStorage()._defaultUint64 = newValue}
  }
  public var hasDefaultUint64: Bool {
    return _storage._defaultUint64 != nil
  }
  public mutating func clearDefaultUint64() {
    return _storage._defaultUint64 = nil
  }

  public var defaultSint32: Int32 {
    get {return _storage._defaultSint32 ?? -45}
    set {_uniqueStorage()._defaultSint32 = newValue}
  }
  public var hasDefaultSint32: Bool {
    return _storage._defaultSint32 != nil
  }
  public mutating func clearDefaultSint32() {
    return _storage._defaultSint32 = nil
  }

  public var defaultSint64: Int64 {
    get {return _storage._defaultSint64 ?? 46}
    set {_uniqueStorage()._defaultSint64 = newValue}
  }
  public var hasDefaultSint64: Bool {
    return _storage._defaultSint64 != nil
  }
  public mutating func clearDefaultSint64() {
    return _storage._defaultSint64 = nil
  }

  public var defaultFixed32: UInt32 {
    get {return _storage._defaultFixed32 ?? 47}
    set {_uniqueStorage()._defaultFixed32 = newValue}
  }
  public var hasDefaultFixed32: Bool {
    return _storage._defaultFixed32 != nil
  }
  public mutating func clearDefaultFixed32() {
    return _storage._defaultFixed32 = nil
  }

  public var defaultFixed64: UInt64 {
    get {return _storage._defaultFixed64 ?? 48}
    set {_uniqueStorage()._defaultFixed64 = newValue}
  }
  public var hasDefaultFixed64: Bool {
    return _storage._defaultFixed64 != nil
  }
  public mutating func clearDefaultFixed64() {
    return _storage._defaultFixed64 = nil
  }

  public var defaultSfixed32: Int32 {
    get {return _storage._defaultSfixed32 ?? 49}
    set {_uniqueStorage()._defaultSfixed32 = newValue}
  }
  public var hasDefaultSfixed32: Bool {
    return _storage._defaultSfixed32 != nil
  }
  public mutating func clearDefaultSfixed32() {
    return _storage._defaultSfixed32 = nil
  }

  public var defaultSfixed64: Int64 {
    get {return _storage._defaultSfixed64 ?? -50}
    set {_uniqueStorage()._defaultSfixed64 = newValue}
  }
  public var hasDefaultSfixed64: Bool {
    return _storage._defaultSfixed64 != nil
  }
  public mutating func clearDefaultSfixed64() {
    return _storage._defaultSfixed64 = nil
  }

  public var defaultFloat: Float {
    get {return _storage._defaultFloat ?? 51.5}
    set {_uniqueStorage()._defaultFloat = newValue}
  }
  public var hasDefaultFloat: Bool {
    return _storage._defaultFloat != nil
  }
  public mutating func clearDefaultFloat() {
    return _storage._defaultFloat = nil
  }

  public var defaultDouble: Double {
    get {return _storage._defaultDouble ?? 52000}
    set {_uniqueStorage()._defaultDouble = newValue}
  }
  public var hasDefaultDouble: Bool {
    return _storage._defaultDouble != nil
  }
  public mutating func clearDefaultDouble() {
    return _storage._defaultDouble = nil
  }

  public var defaultBool: Bool {
    get {return _storage._defaultBool ?? true}
    set {_uniqueStorage()._defaultBool = newValue}
  }
  public var hasDefaultBool: Bool {
    return _storage._defaultBool != nil
  }
  public mutating func clearDefaultBool() {
    return _storage._defaultBool = nil
  }

  public var defaultString: String {
    get {return _storage._defaultString ?? "hello"}
    set {_uniqueStorage()._defaultString = newValue}
  }
  public var hasDefaultString: Bool {
    return _storage._defaultString != nil
  }
  public mutating func clearDefaultString() {
    return _storage._defaultString = nil
  }

  public var defaultBytes: Data {
    get {return _storage._defaultBytes ?? Data(bytes: [119, 111, 114, 108, 100])}
    set {_uniqueStorage()._defaultBytes = newValue}
  }
  public var hasDefaultBytes: Bool {
    return _storage._defaultBytes != nil
  }
  public mutating func clearDefaultBytes() {
    return _storage._defaultBytes = nil
  }

  public var defaultNestedEnum: ProtobufUnittest_TestAllTypes.NestedEnum {
    get {return _storage._defaultNestedEnum ?? ProtobufUnittest_TestAllTypes.NestedEnum.bar}
    set {_uniqueStorage()._defaultNestedEnum = newValue}
  }
  public var hasDefaultNestedEnum: Bool {
    return _storage._defaultNestedEnum != nil
  }
  public mutating func clearDefaultNestedEnum() {
    return _storage._defaultNestedEnum = nil
  }

  public var defaultForeignEnum: ProtobufUnittest_ForeignEnum {
    get {return _storage._defaultForeignEnum ?? ProtobufUnittest_ForeignEnum.foreignBar}
    set {_uniqueStorage()._defaultForeignEnum = newValue}
  }
  public var hasDefaultForeignEnum: Bool {
    return _storage._defaultForeignEnum != nil
  }
  public mutating func clearDefaultForeignEnum() {
    return _storage._defaultForeignEnum = nil
  }

  public var defaultImportEnum: ProtobufUnittestImport_ImportEnum {
    get {return _storage._defaultImportEnum ?? ProtobufUnittestImport_ImportEnum.importBar}
    set {_uniqueStorage()._defaultImportEnum = newValue}
  }
  public var hasDefaultImportEnum: Bool {
    return _storage._defaultImportEnum != nil
  }
  public mutating func clearDefaultImportEnum() {
    return _storage._defaultImportEnum = nil
  }

  public var defaultStringPiece: String {
    get {return _storage._defaultStringPiece ?? "abc"}
    set {_uniqueStorage()._defaultStringPiece = newValue}
  }
  public var hasDefaultStringPiece: Bool {
    return _storage._defaultStringPiece != nil
  }
  public mutating func clearDefaultStringPiece() {
    return _storage._defaultStringPiece = nil
  }

  public var defaultCord: String {
    get {return _storage._defaultCord ?? "123"}
    set {_uniqueStorage()._defaultCord = newValue}
  }
  public var hasDefaultCord: Bool {
    return _storage._defaultCord != nil
  }
  public mutating func clearDefaultCord() {
    return _storage._defaultCord = nil
  }

  public var oneofUint32: UInt32 {
    get {
      if case .oneofUint32(let v) = _storage._oneofField {
        return v
      }
      return 0
    }
    set {
      _uniqueStorage()._oneofField = .oneofUint32(newValue)
    }
  }

  public var oneofNestedMessage: ProtobufUnittest_TestAllTypes.NestedMessage {
    get {
      if case .oneofNestedMessage(let v) = _storage._oneofField {
        return v
      }
      return ProtobufUnittest_TestAllTypes.NestedMessage()
    }
    set {
      _uniqueStorage()._oneofField = .oneofNestedMessage(newValue)
    }
  }

  public var oneofString: String {
    get {
      if case .oneofString(let v) = _storage._oneofField {
        return v
      }
      return ""
    }
    set {
      _uniqueStorage()._oneofField = .oneofString(newValue)
    }
  }

  public var oneofBytes: Data {
    get {
      if case .oneofBytes(let v) = _storage._oneofField {
        return v
      }
      return Data()
    }
    set {
      _uniqueStorage()._oneofField = .oneofBytes(newValue)
    }
  }

  public var oneofField: OneOf_OneofField {
    get {return _storage._oneofField}
    set {
      _uniqueStorage()._oneofField = newValue
    }
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestAllTypes) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

///   This proto includes a recusively nested message.
public struct ProtobufUnittest_NestedTestAllTypes: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "ProtobufUnittest_NestedTestAllTypes"}
  public var protoMessageName: String {return "NestedTestAllTypes"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [
    "child": 1,
    "payload": 2,
    "repeatedChild": 3,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "child": 1,
    "payload": 2,
    "repeated_child": 3,
  ]}

  private class _StorageClass {
    typealias ProtobufExtendedMessage = ProtobufUnittest_NestedTestAllTypes
    var unknown = ProtobufUnknownStorage()
    var _child: ProtobufUnittest_NestedTestAllTypes? = nil
    var _payload: ProtobufUnittest_TestAllTypes? = nil
    var _repeatedChild: [ProtobufUnittest_NestedTestAllTypes] = []

    init() {}

    func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularMessageField(fieldType: ProtobufUnittest_NestedTestAllTypes.self, value: &_child)
      case 2: handled = try setter.decodeSingularMessageField(fieldType: ProtobufUnittest_TestAllTypes.self, value: &_payload)
      case 3: handled = try setter.decodeRepeatedMessageField(fieldType: ProtobufUnittest_NestedTestAllTypes.self, value: &_repeatedChild)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    func traverse(visitor: inout ProtobufVisitor) throws {
      if let v = _child {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 1, protoFieldName: "child", jsonFieldName: "child", swiftFieldName: "child")
      }
      if let v = _payload {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 2, protoFieldName: "payload", jsonFieldName: "payload", swiftFieldName: "payload")
      }
      if !_repeatedChild.isEmpty {
        try visitor.visitRepeatedMessageField(value: _repeatedChild, protoFieldNumber: 3, protoFieldName: "repeated_child", jsonFieldName: "repeatedChild", swiftFieldName: "repeatedChild")
      }
      unknown.traverse(visitor: &visitor)
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if ((_child != nil || other._child != nil) && (_child == nil || other._child == nil || _child! != other._child!)) {return false}
      if ((_payload != nil || other._payload != nil) && (_payload == nil || other._payload == nil || _payload! != other._payload!)) {return false}
      if _repeatedChild != other._repeatedChild {return false}
      if unknown != other.unknown {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone.unknown = unknown
      clone._child = _child
      clone._payload = _payload
      clone._repeatedChild = _repeatedChild
      return clone
    }
  }

  private var _storage = _StorageClass()

  public var child: ProtobufUnittest_NestedTestAllTypes {
    get {return _storage._child ?? ProtobufUnittest_NestedTestAllTypes()}
    set {_uniqueStorage()._child = newValue}
  }
  public var hasChild: Bool {
    return _storage._child != nil
  }
  public mutating func clearChild() {
    return _storage._child = nil
  }

  public var payload: ProtobufUnittest_TestAllTypes {
    get {return _storage._payload ?? ProtobufUnittest_TestAllTypes()}
    set {_uniqueStorage()._payload = newValue}
  }
  public var hasPayload: Bool {
    return _storage._payload != nil
  }
  public mutating func clearPayload() {
    return _storage._payload = nil
  }

  public var repeatedChild: [ProtobufUnittest_NestedTestAllTypes] {
    get {return _storage._repeatedChild}
    set {_uniqueStorage()._repeatedChild = newValue}
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_NestedTestAllTypes) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

public struct ProtobufUnittest_TestDeprecatedFields: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "ProtobufUnittest_TestDeprecatedFields"}
  public var protoMessageName: String {return "TestDeprecatedFields"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [
    "deprecatedInt32": 1,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "deprecated_int32": 1,
  ]}

  var unknown = ProtobufUnknownStorage()

  private var _deprecatedInt32: Int32? = nil
  public var deprecatedInt32: Int32 {
    get {return _deprecatedInt32 ?? 0}
    set {_deprecatedInt32 = newValue}
  }
  public var hasDeprecatedInt32: Bool {
    return _deprecatedInt32 != nil
  }
  public mutating func clearDeprecatedInt32() {
    return _deprecatedInt32 = nil
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_deprecatedInt32)
    default:
      handled = false
    }
    if handled {
        return true
    } else {
        return try unknown.decodeField(setter: &setter)
    }
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    if let v = _deprecatedInt32 {
      try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: v, protoFieldNumber: 1, protoFieldName: "deprecated_int32", jsonFieldName: "deprecatedInt32", swiftFieldName: "deprecatedInt32")
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestDeprecatedFields) -> Bool {
    if (deprecatedInt32 != other.deprecatedInt32) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

///   Define these after TestAllTypes to make sure the compiler can handle
///   that.
public struct ProtobufUnittest_ForeignMessage: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "ProtobufUnittest_ForeignMessage"}
  public var protoMessageName: String {return "ForeignMessage"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [
    "c": 1,
    "d": 2,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "c": 1,
    "d": 2,
  ]}

  var unknown = ProtobufUnknownStorage()

  private var _c: Int32? = nil
  public var c: Int32 {
    get {return _c ?? 0}
    set {_c = newValue}
  }
  public var hasC: Bool {
    return _c != nil
  }
  public mutating func clearC() {
    return _c = nil
  }

  private var _d: Int32? = nil
  public var d: Int32 {
    get {return _d ?? 0}
    set {_d = newValue}
  }
  public var hasD: Bool {
    return _d != nil
  }
  public mutating func clearD() {
    return _d = nil
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_c)
    case 2: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_d)
    default:
      handled = false
    }
    if handled {
        return true
    } else {
        return try unknown.decodeField(setter: &setter)
    }
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    if let v = _c {
      try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: v, protoFieldNumber: 1, protoFieldName: "c", jsonFieldName: "c", swiftFieldName: "c")
    }
    if let v = _d {
      try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: v, protoFieldNumber: 2, protoFieldName: "d", jsonFieldName: "d", swiftFieldName: "d")
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_ForeignMessage) -> Bool {
    if (c != other.c) {return false}
    if (d != other.d) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

public struct ProtobufUnittest_TestReservedFields: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "ProtobufUnittest_TestReservedFields"}
  public var protoMessageName: String {return "TestReservedFields"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [:]}
  public var protoFieldNames: [String: Int] {return [:]}

  var unknown = ProtobufUnknownStorage()

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try unknown.decodeField(setter: &setter)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestReservedFields) -> Bool {
    if unknown != other.unknown {return false}
    return true
  }
}

public struct ProtobufUnittest_TestAllExtensions: ProtobufGeneratedMessage, ProtobufExtensibleMessage {
  public var swiftClassName: String {return "ProtobufUnittest_TestAllExtensions"}
  public var protoMessageName: String {return "TestAllExtensions"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [:]}
  public var protoFieldNames: [String: Int] {return [:]}

  var unknown = ProtobufUnknownStorage()

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    var handled = false
    if (1 <= protoFieldNumber && protoFieldNumber < 536870912) {
      handled = try setter.decodeExtensionField(values: &extensionFieldValues, messageType: ProtobufUnittest_TestAllExtensions.self, protoFieldNumber: protoFieldNumber)
    } else {
      handled = false
    }
    if handled {
        return true
    } else {
        return try unknown.decodeField(setter: &setter)
    }
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try extensionFieldValues.traverse(visitor: &visitor, start: 1, end: 536870912)
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestAllExtensions) -> Bool {
    if unknown != other.unknown {return false}
    if extensionFieldValues != other.extensionFieldValues {return false}
    return true
  }

  private var extensionFieldValues = ProtobufExtensionFieldValueSet()

  public mutating func setExtensionValue<F: ProtobufExtensionField>(ext: ProtobufGenericMessageExtension<F, ProtobufUnittest_TestAllExtensions>, value: F.ValueType) {
    extensionFieldValues[ext.protoFieldNumber] = ext.set(value: value)
  }

  public mutating func clearExtensionValue<F: ProtobufExtensionField>(ext: ProtobufGenericMessageExtension<F, ProtobufUnittest_TestAllExtensions>) {
    extensionFieldValues[ext.protoFieldNumber] = nil
  }

  public func getExtensionValue<F: ProtobufExtensionField>(ext: ProtobufGenericMessageExtension<F, ProtobufUnittest_TestAllExtensions>) -> F.ValueType {
    if let fieldValue = extensionFieldValues[ext.protoFieldNumber] as? F {
      return fieldValue.value
    }
    return ext.defaultValue
  }

  public func hasExtensionValue<F: ProtobufExtensionField>(ext: ProtobufGenericMessageExtension<F, ProtobufUnittest_TestAllExtensions>) -> Bool {
    return extensionFieldValues[ext.protoFieldNumber] is F
  }
}

public struct ProtobufUnittest_OptionalGroup_extension: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "ProtobufUnittest_OptionalGroup_extension"}
  public var protoMessageName: String {return "OptionalGroup_extension"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [
    "a": 17,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "a": 17,
  ]}

  var unknown = ProtobufUnknownStorage()

  private var _a: Int32? = nil
  public var a: Int32 {
    get {return _a ?? 0}
    set {_a = newValue}
  }
  public var hasA: Bool {
    return _a != nil
  }
  public mutating func clearA() {
    return _a = nil
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 17: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_a)
    default:
      handled = false
    }
    if handled {
        return true
    } else {
        return try unknown.decodeField(setter: &setter)
    }
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    if let v = _a {
      try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: v, protoFieldNumber: 17, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_OptionalGroup_extension) -> Bool {
    if (a != other.a) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

public struct ProtobufUnittest_RepeatedGroup_extension: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "ProtobufUnittest_RepeatedGroup_extension"}
  public var protoMessageName: String {return "RepeatedGroup_extension"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [
    "a": 47,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "a": 47,
  ]}

  var unknown = ProtobufUnknownStorage()

  private var _a: Int32? = nil
  public var a: Int32 {
    get {return _a ?? 0}
    set {_a = newValue}
  }
  public var hasA: Bool {
    return _a != nil
  }
  public mutating func clearA() {
    return _a = nil
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 47: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_a)
    default:
      handled = false
    }
    if handled {
        return true
    } else {
        return try unknown.decodeField(setter: &setter)
    }
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    if let v = _a {
      try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: v, protoFieldNumber: 47, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_RepeatedGroup_extension) -> Bool {
    if (a != other.a) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

public struct ProtobufUnittest_TestNestedExtension: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "ProtobufUnittest_TestNestedExtension"}
  public var protoMessageName: String {return "TestNestedExtension"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [:]}
  public var protoFieldNames: [String: Int] {return [:]}

  var unknown = ProtobufUnknownStorage()

  struct Extensions {

    ///   Check for bug where string extensions declared in tested scope did not
    ///   compile.
    static let ProtobufUnittest_TestAllExtensions_test = ProtobufGenericMessageExtension<ProtobufOptionalField<ProtobufString>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 1002, protoFieldName: "test", jsonFieldName: "test", swiftFieldName: "ProtobufUnittest_TestNestedExtension_test", defaultValue: "test")

    ///   Used to test if generated extension name is correct when there are
    ///   underscores.
    static let ProtobufUnittest_TestAllExtensions_nestedStringExtension = ProtobufGenericMessageExtension<ProtobufOptionalField<ProtobufString>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 1003, protoFieldName: "nested_string_extension", jsonFieldName: "nestedStringExtension", swiftFieldName: "ProtobufUnittest_TestNestedExtension_nestedStringExtension", defaultValue: "")
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try unknown.decodeField(setter: &setter)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestNestedExtension) -> Bool {
    if unknown != other.unknown {return false}
    return true
  }
}

///   We have separate messages for testing required fields because it's
///   annoying to have to fill in required fields in TestProto in order to
///   do anything with it.  Note that we don't need to test every type of
///   required filed because the code output is basically identical to
///   optional fields for all types.
public struct ProtobufUnittest_TestRequired: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "ProtobufUnittest_TestRequired"}
  public var protoMessageName: String {return "TestRequired"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [
    "a": 1,
    "dummy2": 2,
    "b": 3,
    "dummy4": 4,
    "dummy5": 5,
    "dummy6": 6,
    "dummy7": 7,
    "dummy8": 8,
    "dummy9": 9,
    "dummy10": 10,
    "dummy11": 11,
    "dummy12": 12,
    "dummy13": 13,
    "dummy14": 14,
    "dummy15": 15,
    "dummy16": 16,
    "dummy17": 17,
    "dummy18": 18,
    "dummy19": 19,
    "dummy20": 20,
    "dummy21": 21,
    "dummy22": 22,
    "dummy23": 23,
    "dummy24": 24,
    "dummy25": 25,
    "dummy26": 26,
    "dummy27": 27,
    "dummy28": 28,
    "dummy29": 29,
    "dummy30": 30,
    "dummy31": 31,
    "dummy32": 32,
    "c": 33,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "a": 1,
    "dummy2": 2,
    "b": 3,
    "dummy4": 4,
    "dummy5": 5,
    "dummy6": 6,
    "dummy7": 7,
    "dummy8": 8,
    "dummy9": 9,
    "dummy10": 10,
    "dummy11": 11,
    "dummy12": 12,
    "dummy13": 13,
    "dummy14": 14,
    "dummy15": 15,
    "dummy16": 16,
    "dummy17": 17,
    "dummy18": 18,
    "dummy19": 19,
    "dummy20": 20,
    "dummy21": 21,
    "dummy22": 22,
    "dummy23": 23,
    "dummy24": 24,
    "dummy25": 25,
    "dummy26": 26,
    "dummy27": 27,
    "dummy28": 28,
    "dummy29": 29,
    "dummy30": 30,
    "dummy31": 31,
    "dummy32": 32,
    "c": 33,
  ]}

  private class _StorageClass {
    typealias ProtobufExtendedMessage = ProtobufUnittest_TestRequired
    var unknown = ProtobufUnknownStorage()
    var _a: Int32? = nil
    var _dummy2: Int32? = nil
    var _b: Int32? = nil
    var _dummy4: Int32? = nil
    var _dummy5: Int32? = nil
    var _dummy6: Int32? = nil
    var _dummy7: Int32? = nil
    var _dummy8: Int32? = nil
    var _dummy9: Int32? = nil
    var _dummy10: Int32? = nil
    var _dummy11: Int32? = nil
    var _dummy12: Int32? = nil
    var _dummy13: Int32? = nil
    var _dummy14: Int32? = nil
    var _dummy15: Int32? = nil
    var _dummy16: Int32? = nil
    var _dummy17: Int32? = nil
    var _dummy18: Int32? = nil
    var _dummy19: Int32? = nil
    var _dummy20: Int32? = nil
    var _dummy21: Int32? = nil
    var _dummy22: Int32? = nil
    var _dummy23: Int32? = nil
    var _dummy24: Int32? = nil
    var _dummy25: Int32? = nil
    var _dummy26: Int32? = nil
    var _dummy27: Int32? = nil
    var _dummy28: Int32? = nil
    var _dummy29: Int32? = nil
    var _dummy30: Int32? = nil
    var _dummy31: Int32? = nil
    var _dummy32: Int32? = nil
    var _c: Int32? = nil

    init() {}

    func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_a)
      case 2: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_dummy2)
      case 3: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_b)
      case 4: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_dummy4)
      case 5: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_dummy5)
      case 6: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_dummy6)
      case 7: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_dummy7)
      case 8: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_dummy8)
      case 9: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_dummy9)
      case 10: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_dummy10)
      case 11: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_dummy11)
      case 12: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_dummy12)
      case 13: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_dummy13)
      case 14: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_dummy14)
      case 15: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_dummy15)
      case 16: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_dummy16)
      case 17: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_dummy17)
      case 18: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_dummy18)
      case 19: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_dummy19)
      case 20: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_dummy20)
      case 21: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_dummy21)
      case 22: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_dummy22)
      case 23: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_dummy23)
      case 24: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_dummy24)
      case 25: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_dummy25)
      case 26: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_dummy26)
      case 27: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_dummy27)
      case 28: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_dummy28)
      case 29: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_dummy29)
      case 30: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_dummy30)
      case 31: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_dummy31)
      case 32: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_dummy32)
      case 33: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_c)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    func traverse(visitor: inout ProtobufVisitor) throws {
      try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _a ?? 0, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      if let v = _dummy2 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: v, protoFieldNumber: 2, protoFieldName: "dummy2", jsonFieldName: "dummy2", swiftFieldName: "dummy2")
      }
      try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _b ?? 0, protoFieldNumber: 3, protoFieldName: "b", jsonFieldName: "b", swiftFieldName: "b")
      if let v = _dummy4 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: v, protoFieldNumber: 4, protoFieldName: "dummy4", jsonFieldName: "dummy4", swiftFieldName: "dummy4")
      }
      if let v = _dummy5 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: v, protoFieldNumber: 5, protoFieldName: "dummy5", jsonFieldName: "dummy5", swiftFieldName: "dummy5")
      }
      if let v = _dummy6 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: v, protoFieldNumber: 6, protoFieldName: "dummy6", jsonFieldName: "dummy6", swiftFieldName: "dummy6")
      }
      if let v = _dummy7 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: v, protoFieldNumber: 7, protoFieldName: "dummy7", jsonFieldName: "dummy7", swiftFieldName: "dummy7")
      }
      if let v = _dummy8 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: v, protoFieldNumber: 8, protoFieldName: "dummy8", jsonFieldName: "dummy8", swiftFieldName: "dummy8")
      }
      if let v = _dummy9 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: v, protoFieldNumber: 9, protoFieldName: "dummy9", jsonFieldName: "dummy9", swiftFieldName: "dummy9")
      }
      if let v = _dummy10 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: v, protoFieldNumber: 10, protoFieldName: "dummy10", jsonFieldName: "dummy10", swiftFieldName: "dummy10")
      }
      if let v = _dummy11 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: v, protoFieldNumber: 11, protoFieldName: "dummy11", jsonFieldName: "dummy11", swiftFieldName: "dummy11")
      }
      if let v = _dummy12 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: v, protoFieldNumber: 12, protoFieldName: "dummy12", jsonFieldName: "dummy12", swiftFieldName: "dummy12")
      }
      if let v = _dummy13 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: v, protoFieldNumber: 13, protoFieldName: "dummy13", jsonFieldName: "dummy13", swiftFieldName: "dummy13")
      }
      if let v = _dummy14 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: v, protoFieldNumber: 14, protoFieldName: "dummy14", jsonFieldName: "dummy14", swiftFieldName: "dummy14")
      }
      if let v = _dummy15 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: v, protoFieldNumber: 15, protoFieldName: "dummy15", jsonFieldName: "dummy15", swiftFieldName: "dummy15")
      }
      if let v = _dummy16 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: v, protoFieldNumber: 16, protoFieldName: "dummy16", jsonFieldName: "dummy16", swiftFieldName: "dummy16")
      }
      if let v = _dummy17 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: v, protoFieldNumber: 17, protoFieldName: "dummy17", jsonFieldName: "dummy17", swiftFieldName: "dummy17")
      }
      if let v = _dummy18 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: v, protoFieldNumber: 18, protoFieldName: "dummy18", jsonFieldName: "dummy18", swiftFieldName: "dummy18")
      }
      if let v = _dummy19 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: v, protoFieldNumber: 19, protoFieldName: "dummy19", jsonFieldName: "dummy19", swiftFieldName: "dummy19")
      }
      if let v = _dummy20 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: v, protoFieldNumber: 20, protoFieldName: "dummy20", jsonFieldName: "dummy20", swiftFieldName: "dummy20")
      }
      if let v = _dummy21 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: v, protoFieldNumber: 21, protoFieldName: "dummy21", jsonFieldName: "dummy21", swiftFieldName: "dummy21")
      }
      if let v = _dummy22 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: v, protoFieldNumber: 22, protoFieldName: "dummy22", jsonFieldName: "dummy22", swiftFieldName: "dummy22")
      }
      if let v = _dummy23 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: v, protoFieldNumber: 23, protoFieldName: "dummy23", jsonFieldName: "dummy23", swiftFieldName: "dummy23")
      }
      if let v = _dummy24 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: v, protoFieldNumber: 24, protoFieldName: "dummy24", jsonFieldName: "dummy24", swiftFieldName: "dummy24")
      }
      if let v = _dummy25 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: v, protoFieldNumber: 25, protoFieldName: "dummy25", jsonFieldName: "dummy25", swiftFieldName: "dummy25")
      }
      if let v = _dummy26 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: v, protoFieldNumber: 26, protoFieldName: "dummy26", jsonFieldName: "dummy26", swiftFieldName: "dummy26")
      }
      if let v = _dummy27 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: v, protoFieldNumber: 27, protoFieldName: "dummy27", jsonFieldName: "dummy27", swiftFieldName: "dummy27")
      }
      if let v = _dummy28 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: v, protoFieldNumber: 28, protoFieldName: "dummy28", jsonFieldName: "dummy28", swiftFieldName: "dummy28")
      }
      if let v = _dummy29 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: v, protoFieldNumber: 29, protoFieldName: "dummy29", jsonFieldName: "dummy29", swiftFieldName: "dummy29")
      }
      if let v = _dummy30 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: v, protoFieldNumber: 30, protoFieldName: "dummy30", jsonFieldName: "dummy30", swiftFieldName: "dummy30")
      }
      if let v = _dummy31 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: v, protoFieldNumber: 31, protoFieldName: "dummy31", jsonFieldName: "dummy31", swiftFieldName: "dummy31")
      }
      if let v = _dummy32 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: v, protoFieldNumber: 32, protoFieldName: "dummy32", jsonFieldName: "dummy32", swiftFieldName: "dummy32")
      }
      try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _c ?? 0, protoFieldNumber: 33, protoFieldName: "c", jsonFieldName: "c", swiftFieldName: "c")
      unknown.traverse(visitor: &visitor)
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if (_a != other._a) {return false}
      if (_dummy2 != other._dummy2) {return false}
      if (_b != other._b) {return false}
      if (_dummy4 != other._dummy4) {return false}
      if (_dummy5 != other._dummy5) {return false}
      if (_dummy6 != other._dummy6) {return false}
      if (_dummy7 != other._dummy7) {return false}
      if (_dummy8 != other._dummy8) {return false}
      if (_dummy9 != other._dummy9) {return false}
      if (_dummy10 != other._dummy10) {return false}
      if (_dummy11 != other._dummy11) {return false}
      if (_dummy12 != other._dummy12) {return false}
      if (_dummy13 != other._dummy13) {return false}
      if (_dummy14 != other._dummy14) {return false}
      if (_dummy15 != other._dummy15) {return false}
      if (_dummy16 != other._dummy16) {return false}
      if (_dummy17 != other._dummy17) {return false}
      if (_dummy18 != other._dummy18) {return false}
      if (_dummy19 != other._dummy19) {return false}
      if (_dummy20 != other._dummy20) {return false}
      if (_dummy21 != other._dummy21) {return false}
      if (_dummy22 != other._dummy22) {return false}
      if (_dummy23 != other._dummy23) {return false}
      if (_dummy24 != other._dummy24) {return false}
      if (_dummy25 != other._dummy25) {return false}
      if (_dummy26 != other._dummy26) {return false}
      if (_dummy27 != other._dummy27) {return false}
      if (_dummy28 != other._dummy28) {return false}
      if (_dummy29 != other._dummy29) {return false}
      if (_dummy30 != other._dummy30) {return false}
      if (_dummy31 != other._dummy31) {return false}
      if (_dummy32 != other._dummy32) {return false}
      if (_c != other._c) {return false}
      if unknown != other.unknown {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone.unknown = unknown
      clone._a = _a
      clone._dummy2 = _dummy2
      clone._b = _b
      clone._dummy4 = _dummy4
      clone._dummy5 = _dummy5
      clone._dummy6 = _dummy6
      clone._dummy7 = _dummy7
      clone._dummy8 = _dummy8
      clone._dummy9 = _dummy9
      clone._dummy10 = _dummy10
      clone._dummy11 = _dummy11
      clone._dummy12 = _dummy12
      clone._dummy13 = _dummy13
      clone._dummy14 = _dummy14
      clone._dummy15 = _dummy15
      clone._dummy16 = _dummy16
      clone._dummy17 = _dummy17
      clone._dummy18 = _dummy18
      clone._dummy19 = _dummy19
      clone._dummy20 = _dummy20
      clone._dummy21 = _dummy21
      clone._dummy22 = _dummy22
      clone._dummy23 = _dummy23
      clone._dummy24 = _dummy24
      clone._dummy25 = _dummy25
      clone._dummy26 = _dummy26
      clone._dummy27 = _dummy27
      clone._dummy28 = _dummy28
      clone._dummy29 = _dummy29
      clone._dummy30 = _dummy30
      clone._dummy31 = _dummy31
      clone._dummy32 = _dummy32
      clone._c = _c
      return clone
    }
  }

  private var _storage = _StorageClass()

  struct Extensions {

    static let ProtobufUnittest_TestAllExtensions_single = ProtobufGenericMessageExtension<ProtobufOptionalMessageField<ProtobufUnittest_TestRequired>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 1000, protoFieldName: "single", jsonFieldName: "single", swiftFieldName: "ProtobufUnittest_TestRequired_single", defaultValue: ProtobufUnittest_TestRequired())

    static let ProtobufUnittest_TestAllExtensions_multi = ProtobufGenericMessageExtension<ProtobufRepeatedMessageField<ProtobufUnittest_TestRequired>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 1001, protoFieldName: "multi", jsonFieldName: "multi", swiftFieldName: "ProtobufUnittest_TestRequired_multi", defaultValue: [])
  }

  public var a: Int32 {
    get {return _storage._a ?? 0}
    set {_uniqueStorage()._a = newValue}
  }
  public var hasA: Bool {
    return _storage._a != nil
  }
  public mutating func clearA() {
    return _storage._a = nil
  }

  public var dummy2: Int32 {
    get {return _storage._dummy2 ?? 0}
    set {_uniqueStorage()._dummy2 = newValue}
  }
  public var hasDummy2: Bool {
    return _storage._dummy2 != nil
  }
  public mutating func clearDummy2() {
    return _storage._dummy2 = nil
  }

  public var b: Int32 {
    get {return _storage._b ?? 0}
    set {_uniqueStorage()._b = newValue}
  }
  public var hasB: Bool {
    return _storage._b != nil
  }
  public mutating func clearB() {
    return _storage._b = nil
  }

  ///   Pad the field count to 32 so that we can test that IsInitialized()
  ///   properly checks multiple elements of has_bits_.
  public var dummy4: Int32 {
    get {return _storage._dummy4 ?? 0}
    set {_uniqueStorage()._dummy4 = newValue}
  }
  public var hasDummy4: Bool {
    return _storage._dummy4 != nil
  }
  public mutating func clearDummy4() {
    return _storage._dummy4 = nil
  }

  public var dummy5: Int32 {
    get {return _storage._dummy5 ?? 0}
    set {_uniqueStorage()._dummy5 = newValue}
  }
  public var hasDummy5: Bool {
    return _storage._dummy5 != nil
  }
  public mutating func clearDummy5() {
    return _storage._dummy5 = nil
  }

  public var dummy6: Int32 {
    get {return _storage._dummy6 ?? 0}
    set {_uniqueStorage()._dummy6 = newValue}
  }
  public var hasDummy6: Bool {
    return _storage._dummy6 != nil
  }
  public mutating func clearDummy6() {
    return _storage._dummy6 = nil
  }

  public var dummy7: Int32 {
    get {return _storage._dummy7 ?? 0}
    set {_uniqueStorage()._dummy7 = newValue}
  }
  public var hasDummy7: Bool {
    return _storage._dummy7 != nil
  }
  public mutating func clearDummy7() {
    return _storage._dummy7 = nil
  }

  public var dummy8: Int32 {
    get {return _storage._dummy8 ?? 0}
    set {_uniqueStorage()._dummy8 = newValue}
  }
  public var hasDummy8: Bool {
    return _storage._dummy8 != nil
  }
  public mutating func clearDummy8() {
    return _storage._dummy8 = nil
  }

  public var dummy9: Int32 {
    get {return _storage._dummy9 ?? 0}
    set {_uniqueStorage()._dummy9 = newValue}
  }
  public var hasDummy9: Bool {
    return _storage._dummy9 != nil
  }
  public mutating func clearDummy9() {
    return _storage._dummy9 = nil
  }

  public var dummy10: Int32 {
    get {return _storage._dummy10 ?? 0}
    set {_uniqueStorage()._dummy10 = newValue}
  }
  public var hasDummy10: Bool {
    return _storage._dummy10 != nil
  }
  public mutating func clearDummy10() {
    return _storage._dummy10 = nil
  }

  public var dummy11: Int32 {
    get {return _storage._dummy11 ?? 0}
    set {_uniqueStorage()._dummy11 = newValue}
  }
  public var hasDummy11: Bool {
    return _storage._dummy11 != nil
  }
  public mutating func clearDummy11() {
    return _storage._dummy11 = nil
  }

  public var dummy12: Int32 {
    get {return _storage._dummy12 ?? 0}
    set {_uniqueStorage()._dummy12 = newValue}
  }
  public var hasDummy12: Bool {
    return _storage._dummy12 != nil
  }
  public mutating func clearDummy12() {
    return _storage._dummy12 = nil
  }

  public var dummy13: Int32 {
    get {return _storage._dummy13 ?? 0}
    set {_uniqueStorage()._dummy13 = newValue}
  }
  public var hasDummy13: Bool {
    return _storage._dummy13 != nil
  }
  public mutating func clearDummy13() {
    return _storage._dummy13 = nil
  }

  public var dummy14: Int32 {
    get {return _storage._dummy14 ?? 0}
    set {_uniqueStorage()._dummy14 = newValue}
  }
  public var hasDummy14: Bool {
    return _storage._dummy14 != nil
  }
  public mutating func clearDummy14() {
    return _storage._dummy14 = nil
  }

  public var dummy15: Int32 {
    get {return _storage._dummy15 ?? 0}
    set {_uniqueStorage()._dummy15 = newValue}
  }
  public var hasDummy15: Bool {
    return _storage._dummy15 != nil
  }
  public mutating func clearDummy15() {
    return _storage._dummy15 = nil
  }

  public var dummy16: Int32 {
    get {return _storage._dummy16 ?? 0}
    set {_uniqueStorage()._dummy16 = newValue}
  }
  public var hasDummy16: Bool {
    return _storage._dummy16 != nil
  }
  public mutating func clearDummy16() {
    return _storage._dummy16 = nil
  }

  public var dummy17: Int32 {
    get {return _storage._dummy17 ?? 0}
    set {_uniqueStorage()._dummy17 = newValue}
  }
  public var hasDummy17: Bool {
    return _storage._dummy17 != nil
  }
  public mutating func clearDummy17() {
    return _storage._dummy17 = nil
  }

  public var dummy18: Int32 {
    get {return _storage._dummy18 ?? 0}
    set {_uniqueStorage()._dummy18 = newValue}
  }
  public var hasDummy18: Bool {
    return _storage._dummy18 != nil
  }
  public mutating func clearDummy18() {
    return _storage._dummy18 = nil
  }

  public var dummy19: Int32 {
    get {return _storage._dummy19 ?? 0}
    set {_uniqueStorage()._dummy19 = newValue}
  }
  public var hasDummy19: Bool {
    return _storage._dummy19 != nil
  }
  public mutating func clearDummy19() {
    return _storage._dummy19 = nil
  }

  public var dummy20: Int32 {
    get {return _storage._dummy20 ?? 0}
    set {_uniqueStorage()._dummy20 = newValue}
  }
  public var hasDummy20: Bool {
    return _storage._dummy20 != nil
  }
  public mutating func clearDummy20() {
    return _storage._dummy20 = nil
  }

  public var dummy21: Int32 {
    get {return _storage._dummy21 ?? 0}
    set {_uniqueStorage()._dummy21 = newValue}
  }
  public var hasDummy21: Bool {
    return _storage._dummy21 != nil
  }
  public mutating func clearDummy21() {
    return _storage._dummy21 = nil
  }

  public var dummy22: Int32 {
    get {return _storage._dummy22 ?? 0}
    set {_uniqueStorage()._dummy22 = newValue}
  }
  public var hasDummy22: Bool {
    return _storage._dummy22 != nil
  }
  public mutating func clearDummy22() {
    return _storage._dummy22 = nil
  }

  public var dummy23: Int32 {
    get {return _storage._dummy23 ?? 0}
    set {_uniqueStorage()._dummy23 = newValue}
  }
  public var hasDummy23: Bool {
    return _storage._dummy23 != nil
  }
  public mutating func clearDummy23() {
    return _storage._dummy23 = nil
  }

  public var dummy24: Int32 {
    get {return _storage._dummy24 ?? 0}
    set {_uniqueStorage()._dummy24 = newValue}
  }
  public var hasDummy24: Bool {
    return _storage._dummy24 != nil
  }
  public mutating func clearDummy24() {
    return _storage._dummy24 = nil
  }

  public var dummy25: Int32 {
    get {return _storage._dummy25 ?? 0}
    set {_uniqueStorage()._dummy25 = newValue}
  }
  public var hasDummy25: Bool {
    return _storage._dummy25 != nil
  }
  public mutating func clearDummy25() {
    return _storage._dummy25 = nil
  }

  public var dummy26: Int32 {
    get {return _storage._dummy26 ?? 0}
    set {_uniqueStorage()._dummy26 = newValue}
  }
  public var hasDummy26: Bool {
    return _storage._dummy26 != nil
  }
  public mutating func clearDummy26() {
    return _storage._dummy26 = nil
  }

  public var dummy27: Int32 {
    get {return _storage._dummy27 ?? 0}
    set {_uniqueStorage()._dummy27 = newValue}
  }
  public var hasDummy27: Bool {
    return _storage._dummy27 != nil
  }
  public mutating func clearDummy27() {
    return _storage._dummy27 = nil
  }

  public var dummy28: Int32 {
    get {return _storage._dummy28 ?? 0}
    set {_uniqueStorage()._dummy28 = newValue}
  }
  public var hasDummy28: Bool {
    return _storage._dummy28 != nil
  }
  public mutating func clearDummy28() {
    return _storage._dummy28 = nil
  }

  public var dummy29: Int32 {
    get {return _storage._dummy29 ?? 0}
    set {_uniqueStorage()._dummy29 = newValue}
  }
  public var hasDummy29: Bool {
    return _storage._dummy29 != nil
  }
  public mutating func clearDummy29() {
    return _storage._dummy29 = nil
  }

  public var dummy30: Int32 {
    get {return _storage._dummy30 ?? 0}
    set {_uniqueStorage()._dummy30 = newValue}
  }
  public var hasDummy30: Bool {
    return _storage._dummy30 != nil
  }
  public mutating func clearDummy30() {
    return _storage._dummy30 = nil
  }

  public var dummy31: Int32 {
    get {return _storage._dummy31 ?? 0}
    set {_uniqueStorage()._dummy31 = newValue}
  }
  public var hasDummy31: Bool {
    return _storage._dummy31 != nil
  }
  public mutating func clearDummy31() {
    return _storage._dummy31 = nil
  }

  public var dummy32: Int32 {
    get {return _storage._dummy32 ?? 0}
    set {_uniqueStorage()._dummy32 = newValue}
  }
  public var hasDummy32: Bool {
    return _storage._dummy32 != nil
  }
  public mutating func clearDummy32() {
    return _storage._dummy32 = nil
  }

  public var c: Int32 {
    get {return _storage._c ?? 0}
    set {_uniqueStorage()._c = newValue}
  }
  public var hasC: Bool {
    return _storage._c != nil
  }
  public mutating func clearC() {
    return _storage._c = nil
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestRequired) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

public struct ProtobufUnittest_TestRequiredForeign: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "ProtobufUnittest_TestRequiredForeign"}
  public var protoMessageName: String {return "TestRequiredForeign"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [
    "optionalMessage": 1,
    "repeatedMessage": 2,
    "dummy": 3,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "optional_message": 1,
    "repeated_message": 2,
    "dummy": 3,
  ]}

  private class _StorageClass {
    typealias ProtobufExtendedMessage = ProtobufUnittest_TestRequiredForeign
    var unknown = ProtobufUnknownStorage()
    var _optionalMessage: ProtobufUnittest_TestRequired? = nil
    var _repeatedMessage: [ProtobufUnittest_TestRequired] = []
    var _dummy: Int32? = nil

    init() {}

    func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularMessageField(fieldType: ProtobufUnittest_TestRequired.self, value: &_optionalMessage)
      case 2: handled = try setter.decodeRepeatedMessageField(fieldType: ProtobufUnittest_TestRequired.self, value: &_repeatedMessage)
      case 3: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_dummy)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    func traverse(visitor: inout ProtobufVisitor) throws {
      if let v = _optionalMessage {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 1, protoFieldName: "optional_message", jsonFieldName: "optionalMessage", swiftFieldName: "optionalMessage")
      }
      if !_repeatedMessage.isEmpty {
        try visitor.visitRepeatedMessageField(value: _repeatedMessage, protoFieldNumber: 2, protoFieldName: "repeated_message", jsonFieldName: "repeatedMessage", swiftFieldName: "repeatedMessage")
      }
      if let v = _dummy {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: v, protoFieldNumber: 3, protoFieldName: "dummy", jsonFieldName: "dummy", swiftFieldName: "dummy")
      }
      unknown.traverse(visitor: &visitor)
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if ((_optionalMessage != nil || other._optionalMessage != nil) && (_optionalMessage == nil || other._optionalMessage == nil || _optionalMessage! != other._optionalMessage!)) {return false}
      if _repeatedMessage != other._repeatedMessage {return false}
      if (_dummy != other._dummy) {return false}
      if unknown != other.unknown {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone.unknown = unknown
      clone._optionalMessage = _optionalMessage
      clone._repeatedMessage = _repeatedMessage
      clone._dummy = _dummy
      return clone
    }
  }

  private var _storage = _StorageClass()

  public var optionalMessage: ProtobufUnittest_TestRequired {
    get {return _storage._optionalMessage ?? ProtobufUnittest_TestRequired()}
    set {_uniqueStorage()._optionalMessage = newValue}
  }
  public var hasOptionalMessage: Bool {
    return _storage._optionalMessage != nil
  }
  public mutating func clearOptionalMessage() {
    return _storage._optionalMessage = nil
  }

  public var repeatedMessage: [ProtobufUnittest_TestRequired] {
    get {return _storage._repeatedMessage}
    set {_uniqueStorage()._repeatedMessage = newValue}
  }

  public var dummy: Int32 {
    get {return _storage._dummy ?? 0}
    set {_uniqueStorage()._dummy = newValue}
  }
  public var hasDummy: Bool {
    return _storage._dummy != nil
  }
  public mutating func clearDummy() {
    return _storage._dummy = nil
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestRequiredForeign) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

///   Test that we can use NestedMessage from outside TestAllTypes.
public struct ProtobufUnittest_TestForeignNested: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "ProtobufUnittest_TestForeignNested"}
  public var protoMessageName: String {return "TestForeignNested"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [
    "foreignNested": 1,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "foreign_nested": 1,
  ]}

  private class _StorageClass {
    typealias ProtobufExtendedMessage = ProtobufUnittest_TestForeignNested
    var unknown = ProtobufUnknownStorage()
    var _foreignNested: ProtobufUnittest_TestAllTypes.NestedMessage? = nil

    init() {}

    func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularMessageField(fieldType: ProtobufUnittest_TestAllTypes.NestedMessage.self, value: &_foreignNested)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    func traverse(visitor: inout ProtobufVisitor) throws {
      if let v = _foreignNested {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 1, protoFieldName: "foreign_nested", jsonFieldName: "foreignNested", swiftFieldName: "foreignNested")
      }
      unknown.traverse(visitor: &visitor)
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if ((_foreignNested != nil || other._foreignNested != nil) && (_foreignNested == nil || other._foreignNested == nil || _foreignNested! != other._foreignNested!)) {return false}
      if unknown != other.unknown {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone.unknown = unknown
      clone._foreignNested = _foreignNested
      return clone
    }
  }

  private var _storage = _StorageClass()

  public var foreignNested: ProtobufUnittest_TestAllTypes.NestedMessage {
    get {return _storage._foreignNested ?? ProtobufUnittest_TestAllTypes.NestedMessage()}
    set {_uniqueStorage()._foreignNested = newValue}
  }
  public var hasForeignNested: Bool {
    return _storage._foreignNested != nil
  }
  public mutating func clearForeignNested() {
    return _storage._foreignNested = nil
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestForeignNested) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

///   TestEmptyMessage is used to test unknown field support.
public struct ProtobufUnittest_TestEmptyMessage: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "ProtobufUnittest_TestEmptyMessage"}
  public var protoMessageName: String {return "TestEmptyMessage"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [:]}
  public var protoFieldNames: [String: Int] {return [:]}

  var unknown = ProtobufUnknownStorage()

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try unknown.decodeField(setter: &setter)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestEmptyMessage) -> Bool {
    if unknown != other.unknown {return false}
    return true
  }
}

///   Like above, but declare all field numbers as potential extensions.  No
///   actual extensions should ever be defined for this type.
public struct ProtobufUnittest_TestEmptyMessageWithExtensions: ProtobufGeneratedMessage, ProtobufExtensibleMessage {
  public var swiftClassName: String {return "ProtobufUnittest_TestEmptyMessageWithExtensions"}
  public var protoMessageName: String {return "TestEmptyMessageWithExtensions"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [:]}
  public var protoFieldNames: [String: Int] {return [:]}

  var unknown = ProtobufUnknownStorage()

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    var handled = false
    if (1 <= protoFieldNumber && protoFieldNumber < 536870912) {
      handled = try setter.decodeExtensionField(values: &extensionFieldValues, messageType: ProtobufUnittest_TestEmptyMessageWithExtensions.self, protoFieldNumber: protoFieldNumber)
    } else {
      handled = false
    }
    if handled {
        return true
    } else {
        return try unknown.decodeField(setter: &setter)
    }
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try extensionFieldValues.traverse(visitor: &visitor, start: 1, end: 536870912)
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestEmptyMessageWithExtensions) -> Bool {
    if unknown != other.unknown {return false}
    if extensionFieldValues != other.extensionFieldValues {return false}
    return true
  }

  private var extensionFieldValues = ProtobufExtensionFieldValueSet()

  public mutating func setExtensionValue<F: ProtobufExtensionField>(ext: ProtobufGenericMessageExtension<F, ProtobufUnittest_TestEmptyMessageWithExtensions>, value: F.ValueType) {
    extensionFieldValues[ext.protoFieldNumber] = ext.set(value: value)
  }

  public mutating func clearExtensionValue<F: ProtobufExtensionField>(ext: ProtobufGenericMessageExtension<F, ProtobufUnittest_TestEmptyMessageWithExtensions>) {
    extensionFieldValues[ext.protoFieldNumber] = nil
  }

  public func getExtensionValue<F: ProtobufExtensionField>(ext: ProtobufGenericMessageExtension<F, ProtobufUnittest_TestEmptyMessageWithExtensions>) -> F.ValueType {
    if let fieldValue = extensionFieldValues[ext.protoFieldNumber] as? F {
      return fieldValue.value
    }
    return ext.defaultValue
  }

  public func hasExtensionValue<F: ProtobufExtensionField>(ext: ProtobufGenericMessageExtension<F, ProtobufUnittest_TestEmptyMessageWithExtensions>) -> Bool {
    return extensionFieldValues[ext.protoFieldNumber] is F
  }
}

public struct ProtobufUnittest_TestMultipleExtensionRanges: ProtobufGeneratedMessage, ProtobufExtensibleMessage {
  public var swiftClassName: String {return "ProtobufUnittest_TestMultipleExtensionRanges"}
  public var protoMessageName: String {return "TestMultipleExtensionRanges"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [:]}
  public var protoFieldNames: [String: Int] {return [:]}

  var unknown = ProtobufUnknownStorage()

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    var handled = false
    if (42 <= protoFieldNumber && protoFieldNumber < 43) || (4143 <= protoFieldNumber && protoFieldNumber < 4244) || (65536 <= protoFieldNumber && protoFieldNumber < 536870912) {
      handled = try setter.decodeExtensionField(values: &extensionFieldValues, messageType: ProtobufUnittest_TestMultipleExtensionRanges.self, protoFieldNumber: protoFieldNumber)
    } else {
      handled = false
    }
    if handled {
        return true
    } else {
        return try unknown.decodeField(setter: &setter)
    }
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try extensionFieldValues.traverse(visitor: &visitor, start: 42, end: 43)
    try extensionFieldValues.traverse(visitor: &visitor, start: 4143, end: 4244)
    try extensionFieldValues.traverse(visitor: &visitor, start: 65536, end: 536870912)
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestMultipleExtensionRanges) -> Bool {
    if unknown != other.unknown {return false}
    if extensionFieldValues != other.extensionFieldValues {return false}
    return true
  }

  private var extensionFieldValues = ProtobufExtensionFieldValueSet()

  public mutating func setExtensionValue<F: ProtobufExtensionField>(ext: ProtobufGenericMessageExtension<F, ProtobufUnittest_TestMultipleExtensionRanges>, value: F.ValueType) {
    extensionFieldValues[ext.protoFieldNumber] = ext.set(value: value)
  }

  public mutating func clearExtensionValue<F: ProtobufExtensionField>(ext: ProtobufGenericMessageExtension<F, ProtobufUnittest_TestMultipleExtensionRanges>) {
    extensionFieldValues[ext.protoFieldNumber] = nil
  }

  public func getExtensionValue<F: ProtobufExtensionField>(ext: ProtobufGenericMessageExtension<F, ProtobufUnittest_TestMultipleExtensionRanges>) -> F.ValueType {
    if let fieldValue = extensionFieldValues[ext.protoFieldNumber] as? F {
      return fieldValue.value
    }
    return ext.defaultValue
  }

  public func hasExtensionValue<F: ProtobufExtensionField>(ext: ProtobufGenericMessageExtension<F, ProtobufUnittest_TestMultipleExtensionRanges>) -> Bool {
    return extensionFieldValues[ext.protoFieldNumber] is F
  }
}

///   Test that really large tag numbers don't break anything.
public struct ProtobufUnittest_TestReallyLargeTagNumber: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "ProtobufUnittest_TestReallyLargeTagNumber"}
  public var protoMessageName: String {return "TestReallyLargeTagNumber"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [
    "a": 1,
    "bb": 268435455,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "a": 1,
    "bb": 268435455,
  ]}

  var unknown = ProtobufUnknownStorage()

  ///   The largest possible tag number is 2^28 - 1, since the wire format uses
  ///   three bits to communicate wire type.
  private var _a: Int32? = nil
  public var a: Int32 {
    get {return _a ?? 0}
    set {_a = newValue}
  }
  public var hasA: Bool {
    return _a != nil
  }
  public mutating func clearA() {
    return _a = nil
  }

  private var _bb: Int32? = nil
  public var bb: Int32 {
    get {return _bb ?? 0}
    set {_bb = newValue}
  }
  public var hasBb: Bool {
    return _bb != nil
  }
  public mutating func clearBb() {
    return _bb = nil
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_a)
    case 268435455: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_bb)
    default:
      handled = false
    }
    if handled {
        return true
    } else {
        return try unknown.decodeField(setter: &setter)
    }
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    if let v = _a {
      try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: v, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
    }
    if let v = _bb {
      try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: v, protoFieldNumber: 268435455, protoFieldName: "bb", jsonFieldName: "bb", swiftFieldName: "bb")
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestReallyLargeTagNumber) -> Bool {
    if (a != other.a) {return false}
    if (bb != other.bb) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

public struct ProtobufUnittest_TestRecursiveMessage: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "ProtobufUnittest_TestRecursiveMessage"}
  public var protoMessageName: String {return "TestRecursiveMessage"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [
    "a": 1,
    "i": 2,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "a": 1,
    "i": 2,
  ]}

  private class _StorageClass {
    typealias ProtobufExtendedMessage = ProtobufUnittest_TestRecursiveMessage
    var unknown = ProtobufUnknownStorage()
    var _a: ProtobufUnittest_TestRecursiveMessage? = nil
    var _i: Int32? = nil

    init() {}

    func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularMessageField(fieldType: ProtobufUnittest_TestRecursiveMessage.self, value: &_a)
      case 2: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_i)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    func traverse(visitor: inout ProtobufVisitor) throws {
      if let v = _a {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
      if let v = _i {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: v, protoFieldNumber: 2, protoFieldName: "i", jsonFieldName: "i", swiftFieldName: "i")
      }
      unknown.traverse(visitor: &visitor)
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if ((_a != nil || other._a != nil) && (_a == nil || other._a == nil || _a! != other._a!)) {return false}
      if (_i != other._i) {return false}
      if unknown != other.unknown {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone.unknown = unknown
      clone._a = _a
      clone._i = _i
      return clone
    }
  }

  private var _storage = _StorageClass()

  public var a: ProtobufUnittest_TestRecursiveMessage {
    get {return _storage._a ?? ProtobufUnittest_TestRecursiveMessage()}
    set {_uniqueStorage()._a = newValue}
  }
  public var hasA: Bool {
    return _storage._a != nil
  }
  public mutating func clearA() {
    return _storage._a = nil
  }

  public var i: Int32 {
    get {return _storage._i ?? 0}
    set {_uniqueStorage()._i = newValue}
  }
  public var hasI: Bool {
    return _storage._i != nil
  }
  public mutating func clearI() {
    return _storage._i = nil
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestRecursiveMessage) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

///   Test that mutual recursion works.
public struct ProtobufUnittest_TestMutualRecursionA: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "ProtobufUnittest_TestMutualRecursionA"}
  public var protoMessageName: String {return "TestMutualRecursionA"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [
    "bb": 1,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "bb": 1,
  ]}

  private class _StorageClass {
    typealias ProtobufExtendedMessage = ProtobufUnittest_TestMutualRecursionA
    var unknown = ProtobufUnknownStorage()
    var _bb: ProtobufUnittest_TestMutualRecursionB? = nil

    init() {}

    func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularMessageField(fieldType: ProtobufUnittest_TestMutualRecursionB.self, value: &_bb)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    func traverse(visitor: inout ProtobufVisitor) throws {
      if let v = _bb {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 1, protoFieldName: "bb", jsonFieldName: "bb", swiftFieldName: "bb")
      }
      unknown.traverse(visitor: &visitor)
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if ((_bb != nil || other._bb != nil) && (_bb == nil || other._bb == nil || _bb! != other._bb!)) {return false}
      if unknown != other.unknown {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone.unknown = unknown
      clone._bb = _bb
      return clone
    }
  }

  private var _storage = _StorageClass()

  public var bb: ProtobufUnittest_TestMutualRecursionB {
    get {return _storage._bb ?? ProtobufUnittest_TestMutualRecursionB()}
    set {_uniqueStorage()._bb = newValue}
  }
  public var hasBb: Bool {
    return _storage._bb != nil
  }
  public mutating func clearBb() {
    return _storage._bb = nil
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestMutualRecursionA) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

public struct ProtobufUnittest_TestMutualRecursionB: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "ProtobufUnittest_TestMutualRecursionB"}
  public var protoMessageName: String {return "TestMutualRecursionB"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [
    "a": 1,
    "optionalInt32": 2,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "a": 1,
    "optional_int32": 2,
  ]}

  private class _StorageClass {
    typealias ProtobufExtendedMessage = ProtobufUnittest_TestMutualRecursionB
    var unknown = ProtobufUnknownStorage()
    var _a: ProtobufUnittest_TestMutualRecursionA? = nil
    var _optionalInt32: Int32? = nil

    init() {}

    func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularMessageField(fieldType: ProtobufUnittest_TestMutualRecursionA.self, value: &_a)
      case 2: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_optionalInt32)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    func traverse(visitor: inout ProtobufVisitor) throws {
      if let v = _a {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
      if let v = _optionalInt32 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: v, protoFieldNumber: 2, protoFieldName: "optional_int32", jsonFieldName: "optionalInt32", swiftFieldName: "optionalInt32")
      }
      unknown.traverse(visitor: &visitor)
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if ((_a != nil || other._a != nil) && (_a == nil || other._a == nil || _a! != other._a!)) {return false}
      if (_optionalInt32 != other._optionalInt32) {return false}
      if unknown != other.unknown {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone.unknown = unknown
      clone._a = _a
      clone._optionalInt32 = _optionalInt32
      return clone
    }
  }

  private var _storage = _StorageClass()

  public var a: ProtobufUnittest_TestMutualRecursionA {
    get {return _storage._a ?? ProtobufUnittest_TestMutualRecursionA()}
    set {_uniqueStorage()._a = newValue}
  }
  public var hasA: Bool {
    return _storage._a != nil
  }
  public mutating func clearA() {
    return _storage._a = nil
  }

  public var optionalInt32: Int32 {
    get {return _storage._optionalInt32 ?? 0}
    set {_uniqueStorage()._optionalInt32 = newValue}
  }
  public var hasOptionalInt32: Bool {
    return _storage._optionalInt32 != nil
  }
  public mutating func clearOptionalInt32() {
    return _storage._optionalInt32 = nil
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestMutualRecursionB) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

///   Test that groups have disjoint field numbers from their siblings and
///   parents.  This is NOT possible in proto1; only google.protobuf.  When attempting
///   to compile with proto1, this will emit an error; so we only include it
///   in protobuf_unittest_proto.
public struct ProtobufUnittest_TestDupFieldNumber: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "ProtobufUnittest_TestDupFieldNumber"}
  public var protoMessageName: String {return "TestDupFieldNumber"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [
    "a": 1,
    "foo": 2,
    "bar": 3,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "a": 1,
    "foo": 2,
    "bar": 3,
  ]}

  private class _StorageClass {
    typealias ProtobufExtendedMessage = ProtobufUnittest_TestDupFieldNumber
    var unknown = ProtobufUnknownStorage()
    var _a: Int32? = nil
    var _foo: ProtobufUnittest_TestDupFieldNumber.Foo? = nil
    var _bar: ProtobufUnittest_TestDupFieldNumber.Bar? = nil

    init() {}

    func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_a)
      case 2: handled = try setter.decodeSingularGroupField(fieldType: ProtobufUnittest_TestDupFieldNumber.Foo.self, value: &_foo)
      case 3: handled = try setter.decodeSingularGroupField(fieldType: ProtobufUnittest_TestDupFieldNumber.Bar.self, value: &_bar)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    func traverse(visitor: inout ProtobufVisitor) throws {
      if let v = _a {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: v, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
      if let v = _foo {
        try visitor.visitSingularGroupField(value: v, protoFieldNumber: 2, protoFieldName: "foo", jsonFieldName: "foo", swiftFieldName: "foo")
      }
      if let v = _bar {
        try visitor.visitSingularGroupField(value: v, protoFieldNumber: 3, protoFieldName: "bar", jsonFieldName: "bar", swiftFieldName: "bar")
      }
      unknown.traverse(visitor: &visitor)
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if (_a != other._a) {return false}
      if ((_foo != nil || other._foo != nil) && (_foo == nil || other._foo == nil || _foo! != other._foo!)) {return false}
      if ((_bar != nil || other._bar != nil) && (_bar == nil || other._bar == nil || _bar! != other._bar!)) {return false}
      if unknown != other.unknown {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone.unknown = unknown
      clone._a = _a
      clone._foo = _foo
      clone._bar = _bar
      return clone
    }
  }

  private var _storage = _StorageClass()

  public struct Foo: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "ProtobufUnittest_TestDupFieldNumber.Foo"}
    public var protoMessageName: String {return "Foo"}
    public var protoPackageName: String {return "protobuf_unittest"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    var unknown = ProtobufUnknownStorage()

    private var _a: Int32? = nil
    public var a: Int32 {
      get {return _a ?? 0}
      set {_a = newValue}
    }
    public var hasA: Bool {
      return _a != nil
    }
    public mutating func clearA() {
      return _a = nil
    }

    public init() {}

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_a)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if let v = _a {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: v, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
      unknown.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestDupFieldNumber.Foo) -> Bool {
      if (a != other.a) {return false}
      if unknown != other.unknown {return false}
      return true
    }
  }

  public struct Bar: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "ProtobufUnittest_TestDupFieldNumber.Bar"}
    public var protoMessageName: String {return "Bar"}
    public var protoPackageName: String {return "protobuf_unittest"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 1,
    ]}

    var unknown = ProtobufUnknownStorage()

    private var _a: Int32? = nil
    public var a: Int32 {
      get {return _a ?? 0}
      set {_a = newValue}
    }
    public var hasA: Bool {
      return _a != nil
    }
    public mutating func clearA() {
      return _a = nil
    }

    public init() {}

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_a)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if let v = _a {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: v, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
      unknown.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestDupFieldNumber.Bar) -> Bool {
      if (a != other.a) {return false}
      if unknown != other.unknown {return false}
      return true
    }
  }

  ///   NO_PROTO1
  public var a: Int32 {
    get {return _storage._a ?? 0}
    set {_uniqueStorage()._a = newValue}
  }
  public var hasA: Bool {
    return _storage._a != nil
  }
  public mutating func clearA() {
    return _storage._a = nil
  }

  public var foo: ProtobufUnittest_TestDupFieldNumber.Foo {
    get {return _storage._foo ?? ProtobufUnittest_TestDupFieldNumber.Foo()}
    set {_uniqueStorage()._foo = newValue}
  }
  public var hasFoo: Bool {
    return _storage._foo != nil
  }
  public mutating func clearFoo() {
    return _storage._foo = nil
  }

  public var bar: ProtobufUnittest_TestDupFieldNumber.Bar {
    get {return _storage._bar ?? ProtobufUnittest_TestDupFieldNumber.Bar()}
    set {_uniqueStorage()._bar = newValue}
  }
  public var hasBar: Bool {
    return _storage._bar != nil
  }
  public mutating func clearBar() {
    return _storage._bar = nil
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestDupFieldNumber) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

///   Additional messages for testing lazy fields.
public struct ProtobufUnittest_TestEagerMessage: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "ProtobufUnittest_TestEagerMessage"}
  public var protoMessageName: String {return "TestEagerMessage"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [
    "subMessage": 1,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "sub_message": 1,
  ]}

  private class _StorageClass {
    typealias ProtobufExtendedMessage = ProtobufUnittest_TestEagerMessage
    var unknown = ProtobufUnknownStorage()
    var _subMessage: ProtobufUnittest_TestAllTypes? = nil

    init() {}

    func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularMessageField(fieldType: ProtobufUnittest_TestAllTypes.self, value: &_subMessage)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    func traverse(visitor: inout ProtobufVisitor) throws {
      if let v = _subMessage {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 1, protoFieldName: "sub_message", jsonFieldName: "subMessage", swiftFieldName: "subMessage")
      }
      unknown.traverse(visitor: &visitor)
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if ((_subMessage != nil || other._subMessage != nil) && (_subMessage == nil || other._subMessage == nil || _subMessage! != other._subMessage!)) {return false}
      if unknown != other.unknown {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone.unknown = unknown
      clone._subMessage = _subMessage
      return clone
    }
  }

  private var _storage = _StorageClass()

  public var subMessage: ProtobufUnittest_TestAllTypes {
    get {return _storage._subMessage ?? ProtobufUnittest_TestAllTypes()}
    set {_uniqueStorage()._subMessage = newValue}
  }
  public var hasSubMessage: Bool {
    return _storage._subMessage != nil
  }
  public mutating func clearSubMessage() {
    return _storage._subMessage = nil
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestEagerMessage) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

public struct ProtobufUnittest_TestLazyMessage: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "ProtobufUnittest_TestLazyMessage"}
  public var protoMessageName: String {return "TestLazyMessage"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [
    "subMessage": 1,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "sub_message": 1,
  ]}

  private class _StorageClass {
    typealias ProtobufExtendedMessage = ProtobufUnittest_TestLazyMessage
    var unknown = ProtobufUnknownStorage()
    var _subMessage: ProtobufUnittest_TestAllTypes? = nil

    init() {}

    func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularMessageField(fieldType: ProtobufUnittest_TestAllTypes.self, value: &_subMessage)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    func traverse(visitor: inout ProtobufVisitor) throws {
      if let v = _subMessage {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 1, protoFieldName: "sub_message", jsonFieldName: "subMessage", swiftFieldName: "subMessage")
      }
      unknown.traverse(visitor: &visitor)
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if ((_subMessage != nil || other._subMessage != nil) && (_subMessage == nil || other._subMessage == nil || _subMessage! != other._subMessage!)) {return false}
      if unknown != other.unknown {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone.unknown = unknown
      clone._subMessage = _subMessage
      return clone
    }
  }

  private var _storage = _StorageClass()

  public var subMessage: ProtobufUnittest_TestAllTypes {
    get {return _storage._subMessage ?? ProtobufUnittest_TestAllTypes()}
    set {_uniqueStorage()._subMessage = newValue}
  }
  public var hasSubMessage: Bool {
    return _storage._subMessage != nil
  }
  public mutating func clearSubMessage() {
    return _storage._subMessage = nil
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestLazyMessage) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

///   Needed for a Python test.
public struct ProtobufUnittest_TestNestedMessageHasBits: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "ProtobufUnittest_TestNestedMessageHasBits"}
  public var protoMessageName: String {return "TestNestedMessageHasBits"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [
    "optionalNestedMessage": 1,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "optional_nested_message": 1,
  ]}

  private class _StorageClass {
    typealias ProtobufExtendedMessage = ProtobufUnittest_TestNestedMessageHasBits
    var unknown = ProtobufUnknownStorage()
    var _optionalNestedMessage: ProtobufUnittest_TestNestedMessageHasBits.NestedMessage? = nil

    init() {}

    func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularMessageField(fieldType: ProtobufUnittest_TestNestedMessageHasBits.NestedMessage.self, value: &_optionalNestedMessage)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    func traverse(visitor: inout ProtobufVisitor) throws {
      if let v = _optionalNestedMessage {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 1, protoFieldName: "optional_nested_message", jsonFieldName: "optionalNestedMessage", swiftFieldName: "optionalNestedMessage")
      }
      unknown.traverse(visitor: &visitor)
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if ((_optionalNestedMessage != nil || other._optionalNestedMessage != nil) && (_optionalNestedMessage == nil || other._optionalNestedMessage == nil || _optionalNestedMessage! != other._optionalNestedMessage!)) {return false}
      if unknown != other.unknown {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone.unknown = unknown
      clone._optionalNestedMessage = _optionalNestedMessage
      return clone
    }
  }

  private var _storage = _StorageClass()

  public struct NestedMessage: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "ProtobufUnittest_TestNestedMessageHasBits.NestedMessage"}
    public var protoMessageName: String {return "NestedMessage"}
    public var protoPackageName: String {return "protobuf_unittest"}
    public var jsonFieldNames: [String: Int] {return [
      "nestedmessageRepeatedInt32": 1,
      "nestedmessageRepeatedForeignmessage": 2,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "nestedmessage_repeated_int32": 1,
      "nestedmessage_repeated_foreignmessage": 2,
    ]}

    var unknown = ProtobufUnknownStorage()

    public var nestedmessageRepeatedInt32: [Int32] = []

    public var nestedmessageRepeatedForeignmessage: [ProtobufUnittest_ForeignMessage] = []

    public init() {}

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeRepeatedField(fieldType: ProtobufInt32.self, value: &nestedmessageRepeatedInt32)
      case 2: handled = try setter.decodeRepeatedMessageField(fieldType: ProtobufUnittest_ForeignMessage.self, value: &nestedmessageRepeatedForeignmessage)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if !nestedmessageRepeatedInt32.isEmpty {
        try visitor.visitRepeatedField(fieldType: ProtobufInt32.self, value: nestedmessageRepeatedInt32, protoFieldNumber: 1, protoFieldName: "nestedmessage_repeated_int32", jsonFieldName: "nestedmessageRepeatedInt32", swiftFieldName: "nestedmessageRepeatedInt32")
      }
      if !nestedmessageRepeatedForeignmessage.isEmpty {
        try visitor.visitRepeatedMessageField(value: nestedmessageRepeatedForeignmessage, protoFieldNumber: 2, protoFieldName: "nestedmessage_repeated_foreignmessage", jsonFieldName: "nestedmessageRepeatedForeignmessage", swiftFieldName: "nestedmessageRepeatedForeignmessage")
      }
      unknown.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestNestedMessageHasBits.NestedMessage) -> Bool {
      if nestedmessageRepeatedInt32 != other.nestedmessageRepeatedInt32 {return false}
      if nestedmessageRepeatedForeignmessage != other.nestedmessageRepeatedForeignmessage {return false}
      if unknown != other.unknown {return false}
      return true
    }
  }

  public var optionalNestedMessage: ProtobufUnittest_TestNestedMessageHasBits.NestedMessage {
    get {return _storage._optionalNestedMessage ?? ProtobufUnittest_TestNestedMessageHasBits.NestedMessage()}
    set {_uniqueStorage()._optionalNestedMessage = newValue}
  }
  public var hasOptionalNestedMessage: Bool {
    return _storage._optionalNestedMessage != nil
  }
  public mutating func clearOptionalNestedMessage() {
    return _storage._optionalNestedMessage = nil
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestNestedMessageHasBits) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

///   Test message with CamelCase field names.  This violates Protocol Buffer
///   standard style.
public struct ProtobufUnittest_TestCamelCaseFieldNames: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "ProtobufUnittest_TestCamelCaseFieldNames"}
  public var protoMessageName: String {return "TestCamelCaseFieldNames"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [
    "PrimitiveField": 1,
    "StringField": 2,
    "EnumField": 3,
    "MessageField": 4,
    "StringPieceField": 5,
    "CordField": 6,
    "RepeatedPrimitiveField": 7,
    "RepeatedStringField": 8,
    "RepeatedEnumField": 9,
    "RepeatedMessageField": 10,
    "RepeatedStringPieceField": 11,
    "RepeatedCordField": 12,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "PrimitiveField": 1,
    "StringField": 2,
    "EnumField": 3,
    "MessageField": 4,
    "StringPieceField": 5,
    "CordField": 6,
    "RepeatedPrimitiveField": 7,
    "RepeatedStringField": 8,
    "RepeatedEnumField": 9,
    "RepeatedMessageField": 10,
    "RepeatedStringPieceField": 11,
    "RepeatedCordField": 12,
  ]}

  private class _StorageClass {
    typealias ProtobufExtendedMessage = ProtobufUnittest_TestCamelCaseFieldNames
    var unknown = ProtobufUnknownStorage()
    var _primitiveField: Int32? = nil
    var _stringField: String? = nil
    var _enumField: ProtobufUnittest_ForeignEnum? = nil
    var _messageField: ProtobufUnittest_ForeignMessage? = nil
    var _stringPieceField: String? = nil
    var _cordField: String? = nil
    var _repeatedPrimitiveField: [Int32] = []
    var _repeatedStringField: [String] = []
    var _repeatedEnumField: [ProtobufUnittest_ForeignEnum] = []
    var _repeatedMessageField: [ProtobufUnittest_ForeignMessage] = []
    var _repeatedStringPieceField: [String] = []
    var _repeatedCordField: [String] = []

    init() {}

    func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_primitiveField)
      case 2: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &_stringField)
      case 3: handled = try setter.decodeSingularField(fieldType: ProtobufUnittest_ForeignEnum.self, value: &_enumField)
      case 4: handled = try setter.decodeSingularMessageField(fieldType: ProtobufUnittest_ForeignMessage.self, value: &_messageField)
      case 5: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &_stringPieceField)
      case 6: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &_cordField)
      case 7: handled = try setter.decodeRepeatedField(fieldType: ProtobufInt32.self, value: &_repeatedPrimitiveField)
      case 8: handled = try setter.decodeRepeatedField(fieldType: ProtobufString.self, value: &_repeatedStringField)
      case 9: handled = try setter.decodeRepeatedField(fieldType: ProtobufUnittest_ForeignEnum.self, value: &_repeatedEnumField)
      case 10: handled = try setter.decodeRepeatedMessageField(fieldType: ProtobufUnittest_ForeignMessage.self, value: &_repeatedMessageField)
      case 11: handled = try setter.decodeRepeatedField(fieldType: ProtobufString.self, value: &_repeatedStringPieceField)
      case 12: handled = try setter.decodeRepeatedField(fieldType: ProtobufString.self, value: &_repeatedCordField)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    func traverse(visitor: inout ProtobufVisitor) throws {
      if let v = _primitiveField {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: v, protoFieldNumber: 1, protoFieldName: "PrimitiveField", jsonFieldName: "PrimitiveField", swiftFieldName: "primitiveField")
      }
      if let v = _stringField {
        try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 2, protoFieldName: "StringField", jsonFieldName: "StringField", swiftFieldName: "stringField")
      }
      if let v = _enumField {
        try visitor.visitSingularField(fieldType: ProtobufUnittest_ForeignEnum.self, value: v, protoFieldNumber: 3, protoFieldName: "EnumField", jsonFieldName: "EnumField", swiftFieldName: "enumField")
      }
      if let v = _messageField {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 4, protoFieldName: "MessageField", jsonFieldName: "MessageField", swiftFieldName: "messageField")
      }
      if let v = _stringPieceField {
        try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 5, protoFieldName: "StringPieceField", jsonFieldName: "StringPieceField", swiftFieldName: "stringPieceField")
      }
      if let v = _cordField {
        try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 6, protoFieldName: "CordField", jsonFieldName: "CordField", swiftFieldName: "cordField")
      }
      if !_repeatedPrimitiveField.isEmpty {
        try visitor.visitRepeatedField(fieldType: ProtobufInt32.self, value: _repeatedPrimitiveField, protoFieldNumber: 7, protoFieldName: "RepeatedPrimitiveField", jsonFieldName: "RepeatedPrimitiveField", swiftFieldName: "repeatedPrimitiveField")
      }
      if !_repeatedStringField.isEmpty {
        try visitor.visitRepeatedField(fieldType: ProtobufString.self, value: _repeatedStringField, protoFieldNumber: 8, protoFieldName: "RepeatedStringField", jsonFieldName: "RepeatedStringField", swiftFieldName: "repeatedStringField")
      }
      if !_repeatedEnumField.isEmpty {
        try visitor.visitRepeatedField(fieldType: ProtobufUnittest_ForeignEnum.self, value: _repeatedEnumField, protoFieldNumber: 9, protoFieldName: "RepeatedEnumField", jsonFieldName: "RepeatedEnumField", swiftFieldName: "repeatedEnumField")
      }
      if !_repeatedMessageField.isEmpty {
        try visitor.visitRepeatedMessageField(value: _repeatedMessageField, protoFieldNumber: 10, protoFieldName: "RepeatedMessageField", jsonFieldName: "RepeatedMessageField", swiftFieldName: "repeatedMessageField")
      }
      if !_repeatedStringPieceField.isEmpty {
        try visitor.visitRepeatedField(fieldType: ProtobufString.self, value: _repeatedStringPieceField, protoFieldNumber: 11, protoFieldName: "RepeatedStringPieceField", jsonFieldName: "RepeatedStringPieceField", swiftFieldName: "repeatedStringPieceField")
      }
      if !_repeatedCordField.isEmpty {
        try visitor.visitRepeatedField(fieldType: ProtobufString.self, value: _repeatedCordField, protoFieldNumber: 12, protoFieldName: "RepeatedCordField", jsonFieldName: "RepeatedCordField", swiftFieldName: "repeatedCordField")
      }
      unknown.traverse(visitor: &visitor)
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if (_primitiveField != other._primitiveField) {return false}
      if (_stringField != other._stringField) {return false}
      if (_enumField != other._enumField) {return false}
      if ((_messageField != nil || other._messageField != nil) && (_messageField == nil || other._messageField == nil || _messageField! != other._messageField!)) {return false}
      if (_stringPieceField != other._stringPieceField) {return false}
      if (_cordField != other._cordField) {return false}
      if _repeatedPrimitiveField != other._repeatedPrimitiveField {return false}
      if _repeatedStringField != other._repeatedStringField {return false}
      if _repeatedEnumField != other._repeatedEnumField {return false}
      if _repeatedMessageField != other._repeatedMessageField {return false}
      if _repeatedStringPieceField != other._repeatedStringPieceField {return false}
      if _repeatedCordField != other._repeatedCordField {return false}
      if unknown != other.unknown {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone.unknown = unknown
      clone._primitiveField = _primitiveField
      clone._stringField = _stringField
      clone._enumField = _enumField
      clone._messageField = _messageField
      clone._stringPieceField = _stringPieceField
      clone._cordField = _cordField
      clone._repeatedPrimitiveField = _repeatedPrimitiveField
      clone._repeatedStringField = _repeatedStringField
      clone._repeatedEnumField = _repeatedEnumField
      clone._repeatedMessageField = _repeatedMessageField
      clone._repeatedStringPieceField = _repeatedStringPieceField
      clone._repeatedCordField = _repeatedCordField
      return clone
    }
  }

  private var _storage = _StorageClass()

  public var primitiveField: Int32 {
    get {return _storage._primitiveField ?? 0}
    set {_uniqueStorage()._primitiveField = newValue}
  }
  public var hasPrimitiveField: Bool {
    return _storage._primitiveField != nil
  }
  public mutating func clearPrimitiveField() {
    return _storage._primitiveField = nil
  }

  public var stringField: String {
    get {return _storage._stringField ?? ""}
    set {_uniqueStorage()._stringField = newValue}
  }
  public var hasStringField: Bool {
    return _storage._stringField != nil
  }
  public mutating func clearStringField() {
    return _storage._stringField = nil
  }

  public var enumField: ProtobufUnittest_ForeignEnum {
    get {return _storage._enumField ?? ProtobufUnittest_ForeignEnum.foreignFoo}
    set {_uniqueStorage()._enumField = newValue}
  }
  public var hasEnumField: Bool {
    return _storage._enumField != nil
  }
  public mutating func clearEnumField() {
    return _storage._enumField = nil
  }

  public var messageField: ProtobufUnittest_ForeignMessage {
    get {return _storage._messageField ?? ProtobufUnittest_ForeignMessage()}
    set {_uniqueStorage()._messageField = newValue}
  }
  public var hasMessageField: Bool {
    return _storage._messageField != nil
  }
  public mutating func clearMessageField() {
    return _storage._messageField = nil
  }

  public var stringPieceField: String {
    get {return _storage._stringPieceField ?? ""}
    set {_uniqueStorage()._stringPieceField = newValue}
  }
  public var hasStringPieceField: Bool {
    return _storage._stringPieceField != nil
  }
  public mutating func clearStringPieceField() {
    return _storage._stringPieceField = nil
  }

  public var cordField: String {
    get {return _storage._cordField ?? ""}
    set {_uniqueStorage()._cordField = newValue}
  }
  public var hasCordField: Bool {
    return _storage._cordField != nil
  }
  public mutating func clearCordField() {
    return _storage._cordField = nil
  }

  public var repeatedPrimitiveField: [Int32] {
    get {return _storage._repeatedPrimitiveField}
    set {_uniqueStorage()._repeatedPrimitiveField = newValue}
  }

  public var repeatedStringField: [String] {
    get {return _storage._repeatedStringField}
    set {_uniqueStorage()._repeatedStringField = newValue}
  }

  public var repeatedEnumField: [ProtobufUnittest_ForeignEnum] {
    get {return _storage._repeatedEnumField}
    set {_uniqueStorage()._repeatedEnumField = newValue}
  }

  public var repeatedMessageField: [ProtobufUnittest_ForeignMessage] {
    get {return _storage._repeatedMessageField}
    set {_uniqueStorage()._repeatedMessageField = newValue}
  }

  public var repeatedStringPieceField: [String] {
    get {return _storage._repeatedStringPieceField}
    set {_uniqueStorage()._repeatedStringPieceField = newValue}
  }

  public var repeatedCordField: [String] {
    get {return _storage._repeatedCordField}
    set {_uniqueStorage()._repeatedCordField = newValue}
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestCamelCaseFieldNames) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

///   We list fields out of order, to ensure that we're using field number and not
///   field index to determine serialization order.
public struct ProtobufUnittest_TestFieldOrderings: ProtobufGeneratedMessage, ProtobufExtensibleMessage {
  public var swiftClassName: String {return "ProtobufUnittest_TestFieldOrderings"}
  public var protoMessageName: String {return "TestFieldOrderings"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [
    "myString": 11,
    "myInt": 1,
    "myFloat": 101,
    "optionalNestedMessage": 200,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "my_string": 11,
    "my_int": 1,
    "my_float": 101,
    "optional_nested_message": 200,
  ]}

  private class _StorageClass: ProtobufExtensibleMessageStorage {
    typealias ProtobufExtendedMessage = ProtobufUnittest_TestFieldOrderings
    var extensionFieldValues = ProtobufExtensionFieldValueSet()
    var unknown = ProtobufUnknownStorage()
    var _myString: String? = nil
    var _myInt: Int64? = nil
    var _myFloat: Float? = nil
    var _optionalNestedMessage: ProtobufUnittest_TestFieldOrderings.NestedMessage? = nil

    init() {}

    func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 11: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &_myString)
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt64.self, value: &_myInt)
      case 101: handled = try setter.decodeSingularField(fieldType: ProtobufFloat.self, value: &_myFloat)
      case 200: handled = try setter.decodeSingularMessageField(fieldType: ProtobufUnittest_TestFieldOrderings.NestedMessage.self, value: &_optionalNestedMessage)
      default:
        if (2 <= protoFieldNumber && protoFieldNumber < 11) || (12 <= protoFieldNumber && protoFieldNumber < 101) {
          handled = try setter.decodeExtensionField(values: &extensionFieldValues, messageType: ProtobufUnittest_TestFieldOrderings.self, protoFieldNumber: protoFieldNumber)
        } else {
          handled = false
        }
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    func traverse(visitor: inout ProtobufVisitor) throws {
      if let v = _myInt {
        try visitor.visitSingularField(fieldType: ProtobufInt64.self, value: v, protoFieldNumber: 1, protoFieldName: "my_int", jsonFieldName: "myInt", swiftFieldName: "myInt")
      }
      try extensionFieldValues.traverse(visitor: &visitor, start: 2, end: 11)
      if let v = _myString {
        try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 11, protoFieldName: "my_string", jsonFieldName: "myString", swiftFieldName: "myString")
      }
      try extensionFieldValues.traverse(visitor: &visitor, start: 12, end: 101)
      if let v = _myFloat {
        try visitor.visitSingularField(fieldType: ProtobufFloat.self, value: v, protoFieldNumber: 101, protoFieldName: "my_float", jsonFieldName: "myFloat", swiftFieldName: "myFloat")
      }
      if let v = _optionalNestedMessage {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 200, protoFieldName: "optional_nested_message", jsonFieldName: "optionalNestedMessage", swiftFieldName: "optionalNestedMessage")
      }
      unknown.traverse(visitor: &visitor)
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if (_myString != other._myString) {return false}
      if (_myInt != other._myInt) {return false}
      if (_myFloat != other._myFloat) {return false}
      if ((_optionalNestedMessage != nil || other._optionalNestedMessage != nil) && (_optionalNestedMessage == nil || other._optionalNestedMessage == nil || _optionalNestedMessage! != other._optionalNestedMessage!)) {return false}
      if unknown != other.unknown {return false}
      if extensionFieldValues != other.extensionFieldValues {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone.unknown = unknown
      clone.extensionFieldValues = extensionFieldValues
      clone._myString = _myString
      clone._myInt = _myInt
      clone._myFloat = _myFloat
      clone._optionalNestedMessage = _optionalNestedMessage
      return clone
    }
  }

  private var _storage = _StorageClass()

  public struct NestedMessage: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "ProtobufUnittest_TestFieldOrderings.NestedMessage"}
    public var protoMessageName: String {return "NestedMessage"}
    public var protoPackageName: String {return "protobuf_unittest"}
    public var jsonFieldNames: [String: Int] {return [
      "oo": 2,
      "bb": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "oo": 2,
      "bb": 1,
    ]}

    var unknown = ProtobufUnknownStorage()

    private var _oo: Int64? = nil
    public var oo: Int64 {
      get {return _oo ?? 0}
      set {_oo = newValue}
    }
    public var hasOo: Bool {
      return _oo != nil
    }
    public mutating func clearOo() {
      return _oo = nil
    }

    ///   The field name "b" fails to compile in proto1 because it conflicts with
    ///   a local variable named "b" in one of the generated methods.  Doh.
    ///   This file needs to compile in proto1 to test backwards-compatibility.
    private var _bb: Int32? = nil
    public var bb: Int32 {
      get {return _bb ?? 0}
      set {_bb = newValue}
    }
    public var hasBb: Bool {
      return _bb != nil
    }
    public mutating func clearBb() {
      return _bb = nil
    }

    public init() {}

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 2: handled = try setter.decodeSingularField(fieldType: ProtobufInt64.self, value: &_oo)
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_bb)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if let v = _bb {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: v, protoFieldNumber: 1, protoFieldName: "bb", jsonFieldName: "bb", swiftFieldName: "bb")
      }
      if let v = _oo {
        try visitor.visitSingularField(fieldType: ProtobufInt64.self, value: v, protoFieldNumber: 2, protoFieldName: "oo", jsonFieldName: "oo", swiftFieldName: "oo")
      }
      unknown.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestFieldOrderings.NestedMessage) -> Bool {
      if (oo != other.oo) {return false}
      if (bb != other.bb) {return false}
      if unknown != other.unknown {return false}
      return true
    }
  }

  public var myString: String {
    get {return _storage._myString ?? ""}
    set {_uniqueStorage()._myString = newValue}
  }
  public var hasMyString: Bool {
    return _storage._myString != nil
  }
  public mutating func clearMyString() {
    return _storage._myString = nil
  }

  public var myInt: Int64 {
    get {return _storage._myInt ?? 0}
    set {_uniqueStorage()._myInt = newValue}
  }
  public var hasMyInt: Bool {
    return _storage._myInt != nil
  }
  public mutating func clearMyInt() {
    return _storage._myInt = nil
  }

  public var myFloat: Float {
    get {return _storage._myFloat ?? 0}
    set {_uniqueStorage()._myFloat = newValue}
  }
  public var hasMyFloat: Bool {
    return _storage._myFloat != nil
  }
  public mutating func clearMyFloat() {
    return _storage._myFloat = nil
  }

  public var optionalNestedMessage: ProtobufUnittest_TestFieldOrderings.NestedMessage {
    get {return _storage._optionalNestedMessage ?? ProtobufUnittest_TestFieldOrderings.NestedMessage()}
    set {_uniqueStorage()._optionalNestedMessage = newValue}
  }
  public var hasOptionalNestedMessage: Bool {
    return _storage._optionalNestedMessage != nil
  }
  public mutating func clearOptionalNestedMessage() {
    return _storage._optionalNestedMessage = nil
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestFieldOrderings) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }

  public mutating func setExtensionValue<F: ProtobufExtensionField>(ext: ProtobufGenericMessageExtension<F, ProtobufUnittest_TestFieldOrderings>, value: F.ValueType) {
    return _uniqueStorage().setExtensionValue(ext: ext, value: value)
  }

  public mutating func clearExtensionValue<F: ProtobufExtensionField>(ext: ProtobufGenericMessageExtension<F, ProtobufUnittest_TestFieldOrderings>) {
    return _storage.clearExtensionValue(ext: ext)
  }

  public func getExtensionValue<F: ProtobufExtensionField>(ext: ProtobufGenericMessageExtension<F, ProtobufUnittest_TestFieldOrderings>) -> F.ValueType {
    return _storage.getExtensionValue(ext: ext)
  }

  public func hasExtensionValue<F: ProtobufExtensionField>(ext: ProtobufGenericMessageExtension<F, ProtobufUnittest_TestFieldOrderings>) -> Bool {
    return _storage.hasExtensionValue(ext: ext)
  }
}

public struct ProtobufUnittest_TestExtremeDefaultValues: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "ProtobufUnittest_TestExtremeDefaultValues"}
  public var protoMessageName: String {return "TestExtremeDefaultValues"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [
    "escapedBytes": 1,
    "largeUint32": 2,
    "largeUint64": 3,
    "smallInt32": 4,
    "smallInt64": 5,
    "reallySmallInt32": 21,
    "reallySmallInt64": 22,
    "utf8String": 6,
    "zeroFloat": 7,
    "oneFloat": 8,
    "smallFloat": 9,
    "negativeOneFloat": 10,
    "negativeFloat": 11,
    "largeFloat": 12,
    "smallNegativeFloat": 13,
    "infDouble": 14,
    "negInfDouble": 15,
    "nanDouble": 16,
    "infFloat": 17,
    "negInfFloat": 18,
    "nanFloat": 19,
    "cppTrigraph": 20,
    "stringWithZero": 23,
    "bytesWithZero": 24,
    "stringPieceWithZero": 25,
    "cordWithZero": 26,
    "replacementString": 27,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "escaped_bytes": 1,
    "large_uint32": 2,
    "large_uint64": 3,
    "small_int32": 4,
    "small_int64": 5,
    "really_small_int32": 21,
    "really_small_int64": 22,
    "utf8_string": 6,
    "zero_float": 7,
    "one_float": 8,
    "small_float": 9,
    "negative_one_float": 10,
    "negative_float": 11,
    "large_float": 12,
    "small_negative_float": 13,
    "inf_double": 14,
    "neg_inf_double": 15,
    "nan_double": 16,
    "inf_float": 17,
    "neg_inf_float": 18,
    "nan_float": 19,
    "cpp_trigraph": 20,
    "string_with_zero": 23,
    "bytes_with_zero": 24,
    "string_piece_with_zero": 25,
    "cord_with_zero": 26,
    "replacement_string": 27,
  ]}

  private class _StorageClass {
    typealias ProtobufExtendedMessage = ProtobufUnittest_TestExtremeDefaultValues
    var unknown = ProtobufUnknownStorage()
    var _escapedBytes: Data? = nil
    var _largeUint32: UInt32? = nil
    var _largeUint64: UInt64? = nil
    var _smallInt32: Int32? = nil
    var _smallInt64: Int64? = nil
    var _reallySmallInt32: Int32? = nil
    var _reallySmallInt64: Int64? = nil
    var _utf8String: String? = nil
    var _zeroFloat: Float? = nil
    var _oneFloat: Float? = nil
    var _smallFloat: Float? = nil
    var _negativeOneFloat: Float? = nil
    var _negativeFloat: Float? = nil
    var _largeFloat: Float? = nil
    var _smallNegativeFloat: Float? = nil
    var _infDouble: Double? = nil
    var _negInfDouble: Double? = nil
    var _nanDouble: Double? = nil
    var _infFloat: Float? = nil
    var _negInfFloat: Float? = nil
    var _nanFloat: Float? = nil
    var _cppTrigraph: String? = nil
    var _stringWithZero: String? = nil
    var _bytesWithZero: Data? = nil
    var _stringPieceWithZero: String? = nil
    var _cordWithZero: String? = nil
    var _replacementString: String? = nil

    init() {}

    func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufBytes.self, value: &_escapedBytes)
      case 2: handled = try setter.decodeSingularField(fieldType: ProtobufUInt32.self, value: &_largeUint32)
      case 3: handled = try setter.decodeSingularField(fieldType: ProtobufUInt64.self, value: &_largeUint64)
      case 4: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_smallInt32)
      case 5: handled = try setter.decodeSingularField(fieldType: ProtobufInt64.self, value: &_smallInt64)
      case 21: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_reallySmallInt32)
      case 22: handled = try setter.decodeSingularField(fieldType: ProtobufInt64.self, value: &_reallySmallInt64)
      case 6: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &_utf8String)
      case 7: handled = try setter.decodeSingularField(fieldType: ProtobufFloat.self, value: &_zeroFloat)
      case 8: handled = try setter.decodeSingularField(fieldType: ProtobufFloat.self, value: &_oneFloat)
      case 9: handled = try setter.decodeSingularField(fieldType: ProtobufFloat.self, value: &_smallFloat)
      case 10: handled = try setter.decodeSingularField(fieldType: ProtobufFloat.self, value: &_negativeOneFloat)
      case 11: handled = try setter.decodeSingularField(fieldType: ProtobufFloat.self, value: &_negativeFloat)
      case 12: handled = try setter.decodeSingularField(fieldType: ProtobufFloat.self, value: &_largeFloat)
      case 13: handled = try setter.decodeSingularField(fieldType: ProtobufFloat.self, value: &_smallNegativeFloat)
      case 14: handled = try setter.decodeSingularField(fieldType: ProtobufDouble.self, value: &_infDouble)
      case 15: handled = try setter.decodeSingularField(fieldType: ProtobufDouble.self, value: &_negInfDouble)
      case 16: handled = try setter.decodeSingularField(fieldType: ProtobufDouble.self, value: &_nanDouble)
      case 17: handled = try setter.decodeSingularField(fieldType: ProtobufFloat.self, value: &_infFloat)
      case 18: handled = try setter.decodeSingularField(fieldType: ProtobufFloat.self, value: &_negInfFloat)
      case 19: handled = try setter.decodeSingularField(fieldType: ProtobufFloat.self, value: &_nanFloat)
      case 20: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &_cppTrigraph)
      case 23: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &_stringWithZero)
      case 24: handled = try setter.decodeSingularField(fieldType: ProtobufBytes.self, value: &_bytesWithZero)
      case 25: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &_stringPieceWithZero)
      case 26: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &_cordWithZero)
      case 27: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &_replacementString)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    func traverse(visitor: inout ProtobufVisitor) throws {
      if let v = _escapedBytes {
        try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: v, protoFieldNumber: 1, protoFieldName: "escaped_bytes", jsonFieldName: "escapedBytes", swiftFieldName: "escapedBytes")
      }
      if let v = _largeUint32 {
        try visitor.visitSingularField(fieldType: ProtobufUInt32.self, value: v, protoFieldNumber: 2, protoFieldName: "large_uint32", jsonFieldName: "largeUint32", swiftFieldName: "largeUint32")
      }
      if let v = _largeUint64 {
        try visitor.visitSingularField(fieldType: ProtobufUInt64.self, value: v, protoFieldNumber: 3, protoFieldName: "large_uint64", jsonFieldName: "largeUint64", swiftFieldName: "largeUint64")
      }
      if let v = _smallInt32 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: v, protoFieldNumber: 4, protoFieldName: "small_int32", jsonFieldName: "smallInt32", swiftFieldName: "smallInt32")
      }
      if let v = _smallInt64 {
        try visitor.visitSingularField(fieldType: ProtobufInt64.self, value: v, protoFieldNumber: 5, protoFieldName: "small_int64", jsonFieldName: "smallInt64", swiftFieldName: "smallInt64")
      }
      if let v = _utf8String {
        try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 6, protoFieldName: "utf8_string", jsonFieldName: "utf8String", swiftFieldName: "utf8String")
      }
      if let v = _zeroFloat {
        try visitor.visitSingularField(fieldType: ProtobufFloat.self, value: v, protoFieldNumber: 7, protoFieldName: "zero_float", jsonFieldName: "zeroFloat", swiftFieldName: "zeroFloat")
      }
      if let v = _oneFloat {
        try visitor.visitSingularField(fieldType: ProtobufFloat.self, value: v, protoFieldNumber: 8, protoFieldName: "one_float", jsonFieldName: "oneFloat", swiftFieldName: "oneFloat")
      }
      if let v = _smallFloat {
        try visitor.visitSingularField(fieldType: ProtobufFloat.self, value: v, protoFieldNumber: 9, protoFieldName: "small_float", jsonFieldName: "smallFloat", swiftFieldName: "smallFloat")
      }
      if let v = _negativeOneFloat {
        try visitor.visitSingularField(fieldType: ProtobufFloat.self, value: v, protoFieldNumber: 10, protoFieldName: "negative_one_float", jsonFieldName: "negativeOneFloat", swiftFieldName: "negativeOneFloat")
      }
      if let v = _negativeFloat {
        try visitor.visitSingularField(fieldType: ProtobufFloat.self, value: v, protoFieldNumber: 11, protoFieldName: "negative_float", jsonFieldName: "negativeFloat", swiftFieldName: "negativeFloat")
      }
      if let v = _largeFloat {
        try visitor.visitSingularField(fieldType: ProtobufFloat.self, value: v, protoFieldNumber: 12, protoFieldName: "large_float", jsonFieldName: "largeFloat", swiftFieldName: "largeFloat")
      }
      if let v = _smallNegativeFloat {
        try visitor.visitSingularField(fieldType: ProtobufFloat.self, value: v, protoFieldNumber: 13, protoFieldName: "small_negative_float", jsonFieldName: "smallNegativeFloat", swiftFieldName: "smallNegativeFloat")
      }
      if let v = _infDouble {
        try visitor.visitSingularField(fieldType: ProtobufDouble.self, value: v, protoFieldNumber: 14, protoFieldName: "inf_double", jsonFieldName: "infDouble", swiftFieldName: "infDouble")
      }
      if let v = _negInfDouble {
        try visitor.visitSingularField(fieldType: ProtobufDouble.self, value: v, protoFieldNumber: 15, protoFieldName: "neg_inf_double", jsonFieldName: "negInfDouble", swiftFieldName: "negInfDouble")
      }
      if let v = _nanDouble {
        try visitor.visitSingularField(fieldType: ProtobufDouble.self, value: v, protoFieldNumber: 16, protoFieldName: "nan_double", jsonFieldName: "nanDouble", swiftFieldName: "nanDouble")
      }
      if let v = _infFloat {
        try visitor.visitSingularField(fieldType: ProtobufFloat.self, value: v, protoFieldNumber: 17, protoFieldName: "inf_float", jsonFieldName: "infFloat", swiftFieldName: "infFloat")
      }
      if let v = _negInfFloat {
        try visitor.visitSingularField(fieldType: ProtobufFloat.self, value: v, protoFieldNumber: 18, protoFieldName: "neg_inf_float", jsonFieldName: "negInfFloat", swiftFieldName: "negInfFloat")
      }
      if let v = _nanFloat {
        try visitor.visitSingularField(fieldType: ProtobufFloat.self, value: v, protoFieldNumber: 19, protoFieldName: "nan_float", jsonFieldName: "nanFloat", swiftFieldName: "nanFloat")
      }
      if let v = _cppTrigraph {
        try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 20, protoFieldName: "cpp_trigraph", jsonFieldName: "cppTrigraph", swiftFieldName: "cppTrigraph")
      }
      if let v = _reallySmallInt32 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: v, protoFieldNumber: 21, protoFieldName: "really_small_int32", jsonFieldName: "reallySmallInt32", swiftFieldName: "reallySmallInt32")
      }
      if let v = _reallySmallInt64 {
        try visitor.visitSingularField(fieldType: ProtobufInt64.self, value: v, protoFieldNumber: 22, protoFieldName: "really_small_int64", jsonFieldName: "reallySmallInt64", swiftFieldName: "reallySmallInt64")
      }
      if let v = _stringWithZero {
        try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 23, protoFieldName: "string_with_zero", jsonFieldName: "stringWithZero", swiftFieldName: "stringWithZero")
      }
      if let v = _bytesWithZero {
        try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: v, protoFieldNumber: 24, protoFieldName: "bytes_with_zero", jsonFieldName: "bytesWithZero", swiftFieldName: "bytesWithZero")
      }
      if let v = _stringPieceWithZero {
        try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 25, protoFieldName: "string_piece_with_zero", jsonFieldName: "stringPieceWithZero", swiftFieldName: "stringPieceWithZero")
      }
      if let v = _cordWithZero {
        try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 26, protoFieldName: "cord_with_zero", jsonFieldName: "cordWithZero", swiftFieldName: "cordWithZero")
      }
      if let v = _replacementString {
        try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 27, protoFieldName: "replacement_string", jsonFieldName: "replacementString", swiftFieldName: "replacementString")
      }
      unknown.traverse(visitor: &visitor)
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if (((_escapedBytes != nil && _escapedBytes! != Data(bytes: [0, 1, 7, 8, 12, 10, 13, 9, 11, 92, 39, 34, 254])) || (other._escapedBytes != nil && other._escapedBytes! != Data(bytes: [0, 1, 7, 8, 12, 10, 13, 9, 11, 92, 39, 34, 254]))) && (_escapedBytes == nil || other._escapedBytes == nil || _escapedBytes! != other._escapedBytes!)) {return false}
      if (((_largeUint32 != nil && _largeUint32! != 4294967295) || (other._largeUint32 != nil && other._largeUint32! != 4294967295)) && (_largeUint32 == nil || other._largeUint32 == nil || _largeUint32! != other._largeUint32!)) {return false}
      if (((_largeUint64 != nil && _largeUint64! != 18446744073709551615) || (other._largeUint64 != nil && other._largeUint64! != 18446744073709551615)) && (_largeUint64 == nil || other._largeUint64 == nil || _largeUint64! != other._largeUint64!)) {return false}
      if (((_smallInt32 != nil && _smallInt32! != -2147483647) || (other._smallInt32 != nil && other._smallInt32! != -2147483647)) && (_smallInt32 == nil || other._smallInt32 == nil || _smallInt32! != other._smallInt32!)) {return false}
      if (((_smallInt64 != nil && _smallInt64! != -9223372036854775807) || (other._smallInt64 != nil && other._smallInt64! != -9223372036854775807)) && (_smallInt64 == nil || other._smallInt64 == nil || _smallInt64! != other._smallInt64!)) {return false}
      if (((_reallySmallInt32 != nil && _reallySmallInt32! != -2147483648) || (other._reallySmallInt32 != nil && other._reallySmallInt32! != -2147483648)) && (_reallySmallInt32 == nil || other._reallySmallInt32 == nil || _reallySmallInt32! != other._reallySmallInt32!)) {return false}
      if (((_reallySmallInt64 != nil && _reallySmallInt64! != -9223372036854775808) || (other._reallySmallInt64 != nil && other._reallySmallInt64! != -9223372036854775808)) && (_reallySmallInt64 == nil || other._reallySmallInt64 == nil || _reallySmallInt64! != other._reallySmallInt64!)) {return false}
      if (((_utf8String != nil && _utf8String! != "ሴ") || (other._utf8String != nil && other._utf8String! != "ሴ")) && (_utf8String == nil || other._utf8String == nil || _utf8String! != other._utf8String!)) {return false}
      if (((_zeroFloat != nil && _zeroFloat! != 0) || (other._zeroFloat != nil && other._zeroFloat! != 0)) && (_zeroFloat == nil || other._zeroFloat == nil || _zeroFloat! != other._zeroFloat!)) {return false}
      if (((_oneFloat != nil && _oneFloat! != 1) || (other._oneFloat != nil && other._oneFloat! != 1)) && (_oneFloat == nil || other._oneFloat == nil || _oneFloat! != other._oneFloat!)) {return false}
      if (((_smallFloat != nil && _smallFloat! != 1.5) || (other._smallFloat != nil && other._smallFloat! != 1.5)) && (_smallFloat == nil || other._smallFloat == nil || _smallFloat! != other._smallFloat!)) {return false}
      if (((_negativeOneFloat != nil && _negativeOneFloat! != -1) || (other._negativeOneFloat != nil && other._negativeOneFloat! != -1)) && (_negativeOneFloat == nil || other._negativeOneFloat == nil || _negativeOneFloat! != other._negativeOneFloat!)) {return false}
      if (((_negativeFloat != nil && _negativeFloat! != -1.5) || (other._negativeFloat != nil && other._negativeFloat! != -1.5)) && (_negativeFloat == nil || other._negativeFloat == nil || _negativeFloat! != other._negativeFloat!)) {return false}
      if (((_largeFloat != nil && _largeFloat! != 2e+08) || (other._largeFloat != nil && other._largeFloat! != 2e+08)) && (_largeFloat == nil || other._largeFloat == nil || _largeFloat! != other._largeFloat!)) {return false}
      if (((_smallNegativeFloat != nil && _smallNegativeFloat! != -8e-28) || (other._smallNegativeFloat != nil && other._smallNegativeFloat! != -8e-28)) && (_smallNegativeFloat == nil || other._smallNegativeFloat == nil || _smallNegativeFloat! != other._smallNegativeFloat!)) {return false}
      if (((_infDouble != nil && _infDouble! != Double.infinity) || (other._infDouble != nil && other._infDouble! != Double.infinity)) && (_infDouble == nil || other._infDouble == nil || _infDouble! != other._infDouble!)) {return false}
      if (((_negInfDouble != nil && _negInfDouble! != -Double.infinity) || (other._negInfDouble != nil && other._negInfDouble! != -Double.infinity)) && (_negInfDouble == nil || other._negInfDouble == nil || _negInfDouble! != other._negInfDouble!)) {return false}
      if (((_nanDouble != nil && _nanDouble! != Double.nan) || (other._nanDouble != nil && other._nanDouble! != Double.nan)) && (_nanDouble == nil || other._nanDouble == nil || _nanDouble! != other._nanDouble!)) {return false}
      if (((_infFloat != nil && _infFloat! != Float.infinity) || (other._infFloat != nil && other._infFloat! != Float.infinity)) && (_infFloat == nil || other._infFloat == nil || _infFloat! != other._infFloat!)) {return false}
      if (((_negInfFloat != nil && _negInfFloat! != -Float.infinity) || (other._negInfFloat != nil && other._negInfFloat! != -Float.infinity)) && (_negInfFloat == nil || other._negInfFloat == nil || _negInfFloat! != other._negInfFloat!)) {return false}
      if (((_nanFloat != nil && _nanFloat! != Float.nan) || (other._nanFloat != nil && other._nanFloat! != Float.nan)) && (_nanFloat == nil || other._nanFloat == nil || _nanFloat! != other._nanFloat!)) {return false}
      if (((_cppTrigraph != nil && _cppTrigraph! != "? ? ?? ?? ??? ??/ ??-") || (other._cppTrigraph != nil && other._cppTrigraph! != "? ? ?? ?? ??? ??/ ??-")) && (_cppTrigraph == nil || other._cppTrigraph == nil || _cppTrigraph! != other._cppTrigraph!)) {return false}
      if (((_stringWithZero != nil && _stringWithZero! != "hel\0lo") || (other._stringWithZero != nil && other._stringWithZero! != "hel\0lo")) && (_stringWithZero == nil || other._stringWithZero == nil || _stringWithZero! != other._stringWithZero!)) {return false}
      if (((_bytesWithZero != nil && _bytesWithZero! != Data(bytes: [119, 111, 114, 0, 108, 100])) || (other._bytesWithZero != nil && other._bytesWithZero! != Data(bytes: [119, 111, 114, 0, 108, 100]))) && (_bytesWithZero == nil || other._bytesWithZero == nil || _bytesWithZero! != other._bytesWithZero!)) {return false}
      if (((_stringPieceWithZero != nil && _stringPieceWithZero! != "ab\0c") || (other._stringPieceWithZero != nil && other._stringPieceWithZero! != "ab\0c")) && (_stringPieceWithZero == nil || other._stringPieceWithZero == nil || _stringPieceWithZero! != other._stringPieceWithZero!)) {return false}
      if (((_cordWithZero != nil && _cordWithZero! != "12\03") || (other._cordWithZero != nil && other._cordWithZero! != "12\03")) && (_cordWithZero == nil || other._cordWithZero == nil || _cordWithZero! != other._cordWithZero!)) {return false}
      if (((_replacementString != nil && _replacementString! != "${unknown}") || (other._replacementString != nil && other._replacementString! != "${unknown}")) && (_replacementString == nil || other._replacementString == nil || _replacementString! != other._replacementString!)) {return false}
      if unknown != other.unknown {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone.unknown = unknown
      clone._escapedBytes = _escapedBytes
      clone._largeUint32 = _largeUint32
      clone._largeUint64 = _largeUint64
      clone._smallInt32 = _smallInt32
      clone._smallInt64 = _smallInt64
      clone._reallySmallInt32 = _reallySmallInt32
      clone._reallySmallInt64 = _reallySmallInt64
      clone._utf8String = _utf8String
      clone._zeroFloat = _zeroFloat
      clone._oneFloat = _oneFloat
      clone._smallFloat = _smallFloat
      clone._negativeOneFloat = _negativeOneFloat
      clone._negativeFloat = _negativeFloat
      clone._largeFloat = _largeFloat
      clone._smallNegativeFloat = _smallNegativeFloat
      clone._infDouble = _infDouble
      clone._negInfDouble = _negInfDouble
      clone._nanDouble = _nanDouble
      clone._infFloat = _infFloat
      clone._negInfFloat = _negInfFloat
      clone._nanFloat = _nanFloat
      clone._cppTrigraph = _cppTrigraph
      clone._stringWithZero = _stringWithZero
      clone._bytesWithZero = _bytesWithZero
      clone._stringPieceWithZero = _stringPieceWithZero
      clone._cordWithZero = _cordWithZero
      clone._replacementString = _replacementString
      return clone
    }
  }

  private var _storage = _StorageClass()

  public var escapedBytes: Data {
    get {return _storage._escapedBytes ?? Data(bytes: [0, 1, 7, 8, 12, 10, 13, 9, 11, 92, 39, 34, 254])}
    set {_uniqueStorage()._escapedBytes = newValue}
  }
  public var hasEscapedBytes: Bool {
    return _storage._escapedBytes != nil
  }
  public mutating func clearEscapedBytes() {
    return _storage._escapedBytes = nil
  }

  public var largeUint32: UInt32 {
    get {return _storage._largeUint32 ?? 4294967295}
    set {_uniqueStorage()._largeUint32 = newValue}
  }
  public var hasLargeUint32: Bool {
    return _storage._largeUint32 != nil
  }
  public mutating func clearLargeUint32() {
    return _storage._largeUint32 = nil
  }

  public var largeUint64: UInt64 {
    get {return _storage._largeUint64 ?? 18446744073709551615}
    set {_uniqueStorage()._largeUint64 = newValue}
  }
  public var hasLargeUint64: Bool {
    return _storage._largeUint64 != nil
  }
  public mutating func clearLargeUint64() {
    return _storage._largeUint64 = nil
  }

  public var smallInt32: Int32 {
    get {return _storage._smallInt32 ?? -2147483647}
    set {_uniqueStorage()._smallInt32 = newValue}
  }
  public var hasSmallInt32: Bool {
    return _storage._smallInt32 != nil
  }
  public mutating func clearSmallInt32() {
    return _storage._smallInt32 = nil
  }

  public var smallInt64: Int64 {
    get {return _storage._smallInt64 ?? -9223372036854775807}
    set {_uniqueStorage()._smallInt64 = newValue}
  }
  public var hasSmallInt64: Bool {
    return _storage._smallInt64 != nil
  }
  public mutating func clearSmallInt64() {
    return _storage._smallInt64 = nil
  }

  public var reallySmallInt32: Int32 {
    get {return _storage._reallySmallInt32 ?? -2147483648}
    set {_uniqueStorage()._reallySmallInt32 = newValue}
  }
  public var hasReallySmallInt32: Bool {
    return _storage._reallySmallInt32 != nil
  }
  public mutating func clearReallySmallInt32() {
    return _storage._reallySmallInt32 = nil
  }

  public var reallySmallInt64: Int64 {
    get {return _storage._reallySmallInt64 ?? -9223372036854775808}
    set {_uniqueStorage()._reallySmallInt64 = newValue}
  }
  public var hasReallySmallInt64: Bool {
    return _storage._reallySmallInt64 != nil
  }
  public mutating func clearReallySmallInt64() {
    return _storage._reallySmallInt64 = nil
  }

  ///   The default value here is UTF-8 for "\u1234".  (We could also just type
  ///   the UTF-8 text directly into this text file rather than escape it, but
  ///   lots of people use editors that would be confused by this.)
  public var utf8String: String {
    get {return _storage._utf8String ?? "ሴ"}
    set {_uniqueStorage()._utf8String = newValue}
  }
  public var hasUtf8String: Bool {
    return _storage._utf8String != nil
  }
  public mutating func clearUtf8String() {
    return _storage._utf8String = nil
  }

  ///   Tests for single-precision floating-point values.
  public var zeroFloat: Float {
    get {return _storage._zeroFloat ?? 0}
    set {_uniqueStorage()._zeroFloat = newValue}
  }
  public var hasZeroFloat: Bool {
    return _storage._zeroFloat != nil
  }
  public mutating func clearZeroFloat() {
    return _storage._zeroFloat = nil
  }

  public var oneFloat: Float {
    get {return _storage._oneFloat ?? 1}
    set {_uniqueStorage()._oneFloat = newValue}
  }
  public var hasOneFloat: Bool {
    return _storage._oneFloat != nil
  }
  public mutating func clearOneFloat() {
    return _storage._oneFloat = nil
  }

  public var smallFloat: Float {
    get {return _storage._smallFloat ?? 1.5}
    set {_uniqueStorage()._smallFloat = newValue}
  }
  public var hasSmallFloat: Bool {
    return _storage._smallFloat != nil
  }
  public mutating func clearSmallFloat() {
    return _storage._smallFloat = nil
  }

  public var negativeOneFloat: Float {
    get {return _storage._negativeOneFloat ?? -1}
    set {_uniqueStorage()._negativeOneFloat = newValue}
  }
  public var hasNegativeOneFloat: Bool {
    return _storage._negativeOneFloat != nil
  }
  public mutating func clearNegativeOneFloat() {
    return _storage._negativeOneFloat = nil
  }

  public var negativeFloat: Float {
    get {return _storage._negativeFloat ?? -1.5}
    set {_uniqueStorage()._negativeFloat = newValue}
  }
  public var hasNegativeFloat: Bool {
    return _storage._negativeFloat != nil
  }
  public mutating func clearNegativeFloat() {
    return _storage._negativeFloat = nil
  }

  ///   Using exponents
  public var largeFloat: Float {
    get {return _storage._largeFloat ?? 2e+08}
    set {_uniqueStorage()._largeFloat = newValue}
  }
  public var hasLargeFloat: Bool {
    return _storage._largeFloat != nil
  }
  public mutating func clearLargeFloat() {
    return _storage._largeFloat = nil
  }

  public var smallNegativeFloat: Float {
    get {return _storage._smallNegativeFloat ?? -8e-28}
    set {_uniqueStorage()._smallNegativeFloat = newValue}
  }
  public var hasSmallNegativeFloat: Bool {
    return _storage._smallNegativeFloat != nil
  }
  public mutating func clearSmallNegativeFloat() {
    return _storage._smallNegativeFloat = nil
  }

  ///   Text for nonfinite floating-point values.
  public var infDouble: Double {
    get {return _storage._infDouble ?? Double.infinity}
    set {_uniqueStorage()._infDouble = newValue}
  }
  public var hasInfDouble: Bool {
    return _storage._infDouble != nil
  }
  public mutating func clearInfDouble() {
    return _storage._infDouble = nil
  }

  public var negInfDouble: Double {
    get {return _storage._negInfDouble ?? -Double.infinity}
    set {_uniqueStorage()._negInfDouble = newValue}
  }
  public var hasNegInfDouble: Bool {
    return _storage._negInfDouble != nil
  }
  public mutating func clearNegInfDouble() {
    return _storage._negInfDouble = nil
  }

  public var nanDouble: Double {
    get {return _storage._nanDouble ?? Double.nan}
    set {_uniqueStorage()._nanDouble = newValue}
  }
  public var hasNanDouble: Bool {
    return _storage._nanDouble != nil
  }
  public mutating func clearNanDouble() {
    return _storage._nanDouble = nil
  }

  public var infFloat: Float {
    get {return _storage._infFloat ?? Float.infinity}
    set {_uniqueStorage()._infFloat = newValue}
  }
  public var hasInfFloat: Bool {
    return _storage._infFloat != nil
  }
  public mutating func clearInfFloat() {
    return _storage._infFloat = nil
  }

  public var negInfFloat: Float {
    get {return _storage._negInfFloat ?? -Float.infinity}
    set {_uniqueStorage()._negInfFloat = newValue}
  }
  public var hasNegInfFloat: Bool {
    return _storage._negInfFloat != nil
  }
  public mutating func clearNegInfFloat() {
    return _storage._negInfFloat = nil
  }

  public var nanFloat: Float {
    get {return _storage._nanFloat ?? Float.nan}
    set {_uniqueStorage()._nanFloat = newValue}
  }
  public var hasNanFloat: Bool {
    return _storage._nanFloat != nil
  }
  public mutating func clearNanFloat() {
    return _storage._nanFloat = nil
  }

  ///   Tests for C++ trigraphs.
  ///   Trigraphs should be escaped in C++ generated files, but they should not be
  ///   escaped for other languages.
  ///   Note that in .proto file, "\?" is a valid way to escape ? in string
  ///   literals.
  public var cppTrigraph: String {
    get {return _storage._cppTrigraph ?? "? ? ?? ?? ??? ??/ ??-"}
    set {_uniqueStorage()._cppTrigraph = newValue}
  }
  public var hasCppTrigraph: Bool {
    return _storage._cppTrigraph != nil
  }
  public mutating func clearCppTrigraph() {
    return _storage._cppTrigraph = nil
  }

  ///   String defaults containing the character '\000'
  public var stringWithZero: String {
    get {return _storage._stringWithZero ?? "hel\0lo"}
    set {_uniqueStorage()._stringWithZero = newValue}
  }
  public var hasStringWithZero: Bool {
    return _storage._stringWithZero != nil
  }
  public mutating func clearStringWithZero() {
    return _storage._stringWithZero = nil
  }

  public var bytesWithZero: Data {
    get {return _storage._bytesWithZero ?? Data(bytes: [119, 111, 114, 0, 108, 100])}
    set {_uniqueStorage()._bytesWithZero = newValue}
  }
  public var hasBytesWithZero: Bool {
    return _storage._bytesWithZero != nil
  }
  public mutating func clearBytesWithZero() {
    return _storage._bytesWithZero = nil
  }

  public var stringPieceWithZero: String {
    get {return _storage._stringPieceWithZero ?? "ab\0c"}
    set {_uniqueStorage()._stringPieceWithZero = newValue}
  }
  public var hasStringPieceWithZero: Bool {
    return _storage._stringPieceWithZero != nil
  }
  public mutating func clearStringPieceWithZero() {
    return _storage._stringPieceWithZero = nil
  }

  public var cordWithZero: String {
    get {return _storage._cordWithZero ?? "12\03"}
    set {_uniqueStorage()._cordWithZero = newValue}
  }
  public var hasCordWithZero: Bool {
    return _storage._cordWithZero != nil
  }
  public mutating func clearCordWithZero() {
    return _storage._cordWithZero = nil
  }

  public var replacementString: String {
    get {return _storage._replacementString ?? "${unknown}"}
    set {_uniqueStorage()._replacementString = newValue}
  }
  public var hasReplacementString: Bool {
    return _storage._replacementString != nil
  }
  public mutating func clearReplacementString() {
    return _storage._replacementString = nil
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestExtremeDefaultValues) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

public struct ProtobufUnittest_SparseEnumMessage: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "ProtobufUnittest_SparseEnumMessage"}
  public var protoMessageName: String {return "SparseEnumMessage"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [
    "sparseEnum": 1,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "sparse_enum": 1,
  ]}

  var unknown = ProtobufUnknownStorage()

  private var _sparseEnum: ProtobufUnittest_TestSparseEnum? = nil
  public var sparseEnum: ProtobufUnittest_TestSparseEnum {
    get {return _sparseEnum ?? ProtobufUnittest_TestSparseEnum.sparseA}
    set {_sparseEnum = newValue}
  }
  public var hasSparseEnum: Bool {
    return _sparseEnum != nil
  }
  public mutating func clearSparseEnum() {
    return _sparseEnum = nil
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeSingularField(fieldType: ProtobufUnittest_TestSparseEnum.self, value: &_sparseEnum)
    default:
      handled = false
    }
    if handled {
        return true
    } else {
        return try unknown.decodeField(setter: &setter)
    }
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    if let v = _sparseEnum {
      try visitor.visitSingularField(fieldType: ProtobufUnittest_TestSparseEnum.self, value: v, protoFieldNumber: 1, protoFieldName: "sparse_enum", jsonFieldName: "sparseEnum", swiftFieldName: "sparseEnum")
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_SparseEnumMessage) -> Bool {
    if (sparseEnum != other.sparseEnum) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

///   Test String and Bytes: string is for valid UTF-8 strings
public struct ProtobufUnittest_OneString: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "ProtobufUnittest_OneString"}
  public var protoMessageName: String {return "OneString"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [
    "data": 1,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "data": 1,
  ]}

  var unknown = ProtobufUnknownStorage()

  private var _data: String? = nil
  public var data: String {
    get {return _data ?? ""}
    set {_data = newValue}
  }
  public var hasData: Bool {
    return _data != nil
  }
  public mutating func clearData() {
    return _data = nil
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &_data)
    default:
      handled = false
    }
    if handled {
        return true
    } else {
        return try unknown.decodeField(setter: &setter)
    }
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    if let v = _data {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 1, protoFieldName: "data", jsonFieldName: "data", swiftFieldName: "data")
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_OneString) -> Bool {
    if (data != other.data) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

public struct ProtobufUnittest_MoreString: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "ProtobufUnittest_MoreString"}
  public var protoMessageName: String {return "MoreString"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [
    "data": 1,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "data": 1,
  ]}

  var unknown = ProtobufUnknownStorage()

  public var data: [String] = []

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeRepeatedField(fieldType: ProtobufString.self, value: &data)
    default:
      handled = false
    }
    if handled {
        return true
    } else {
        return try unknown.decodeField(setter: &setter)
    }
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    if !data.isEmpty {
      try visitor.visitRepeatedField(fieldType: ProtobufString.self, value: data, protoFieldNumber: 1, protoFieldName: "data", jsonFieldName: "data", swiftFieldName: "data")
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_MoreString) -> Bool {
    if data != other.data {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

public struct ProtobufUnittest_OneBytes: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "ProtobufUnittest_OneBytes"}
  public var protoMessageName: String {return "OneBytes"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [
    "data": 1,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "data": 1,
  ]}

  var unknown = ProtobufUnknownStorage()

  private var _data: Data? = nil
  public var data: Data {
    get {return _data ?? Data()}
    set {_data = newValue}
  }
  public var hasData: Bool {
    return _data != nil
  }
  public mutating func clearData() {
    return _data = nil
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeSingularField(fieldType: ProtobufBytes.self, value: &_data)
    default:
      handled = false
    }
    if handled {
        return true
    } else {
        return try unknown.decodeField(setter: &setter)
    }
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    if let v = _data {
      try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: v, protoFieldNumber: 1, protoFieldName: "data", jsonFieldName: "data", swiftFieldName: "data")
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_OneBytes) -> Bool {
    if (data != other.data) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

public struct ProtobufUnittest_MoreBytes: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "ProtobufUnittest_MoreBytes"}
  public var protoMessageName: String {return "MoreBytes"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [
    "data": 1,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "data": 1,
  ]}

  var unknown = ProtobufUnknownStorage()

  public var data: [Data] = []

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeRepeatedField(fieldType: ProtobufBytes.self, value: &data)
    default:
      handled = false
    }
    if handled {
        return true
    } else {
        return try unknown.decodeField(setter: &setter)
    }
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    if !data.isEmpty {
      try visitor.visitRepeatedField(fieldType: ProtobufBytes.self, value: data, protoFieldNumber: 1, protoFieldName: "data", jsonFieldName: "data", swiftFieldName: "data")
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_MoreBytes) -> Bool {
    if data != other.data {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

///   Test int32, uint32, int64, uint64, and bool are all compatible
public struct ProtobufUnittest_Int32Message: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "ProtobufUnittest_Int32Message"}
  public var protoMessageName: String {return "Int32Message"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [
    "data": 1,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "data": 1,
  ]}

  var unknown = ProtobufUnknownStorage()

  private var _data: Int32? = nil
  public var data: Int32 {
    get {return _data ?? 0}
    set {_data = newValue}
  }
  public var hasData: Bool {
    return _data != nil
  }
  public mutating func clearData() {
    return _data = nil
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_data)
    default:
      handled = false
    }
    if handled {
        return true
    } else {
        return try unknown.decodeField(setter: &setter)
    }
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    if let v = _data {
      try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: v, protoFieldNumber: 1, protoFieldName: "data", jsonFieldName: "data", swiftFieldName: "data")
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_Int32Message) -> Bool {
    if (data != other.data) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

public struct ProtobufUnittest_Uint32Message: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "ProtobufUnittest_Uint32Message"}
  public var protoMessageName: String {return "Uint32Message"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [
    "data": 1,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "data": 1,
  ]}

  var unknown = ProtobufUnknownStorage()

  private var _data: UInt32? = nil
  public var data: UInt32 {
    get {return _data ?? 0}
    set {_data = newValue}
  }
  public var hasData: Bool {
    return _data != nil
  }
  public mutating func clearData() {
    return _data = nil
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeSingularField(fieldType: ProtobufUInt32.self, value: &_data)
    default:
      handled = false
    }
    if handled {
        return true
    } else {
        return try unknown.decodeField(setter: &setter)
    }
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    if let v = _data {
      try visitor.visitSingularField(fieldType: ProtobufUInt32.self, value: v, protoFieldNumber: 1, protoFieldName: "data", jsonFieldName: "data", swiftFieldName: "data")
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_Uint32Message) -> Bool {
    if (data != other.data) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

public struct ProtobufUnittest_Int64Message: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "ProtobufUnittest_Int64Message"}
  public var protoMessageName: String {return "Int64Message"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [
    "data": 1,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "data": 1,
  ]}

  var unknown = ProtobufUnknownStorage()

  private var _data: Int64? = nil
  public var data: Int64 {
    get {return _data ?? 0}
    set {_data = newValue}
  }
  public var hasData: Bool {
    return _data != nil
  }
  public mutating func clearData() {
    return _data = nil
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt64.self, value: &_data)
    default:
      handled = false
    }
    if handled {
        return true
    } else {
        return try unknown.decodeField(setter: &setter)
    }
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    if let v = _data {
      try visitor.visitSingularField(fieldType: ProtobufInt64.self, value: v, protoFieldNumber: 1, protoFieldName: "data", jsonFieldName: "data", swiftFieldName: "data")
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_Int64Message) -> Bool {
    if (data != other.data) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

public struct ProtobufUnittest_Uint64Message: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "ProtobufUnittest_Uint64Message"}
  public var protoMessageName: String {return "Uint64Message"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [
    "data": 1,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "data": 1,
  ]}

  var unknown = ProtobufUnknownStorage()

  private var _data: UInt64? = nil
  public var data: UInt64 {
    get {return _data ?? 0}
    set {_data = newValue}
  }
  public var hasData: Bool {
    return _data != nil
  }
  public mutating func clearData() {
    return _data = nil
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeSingularField(fieldType: ProtobufUInt64.self, value: &_data)
    default:
      handled = false
    }
    if handled {
        return true
    } else {
        return try unknown.decodeField(setter: &setter)
    }
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    if let v = _data {
      try visitor.visitSingularField(fieldType: ProtobufUInt64.self, value: v, protoFieldNumber: 1, protoFieldName: "data", jsonFieldName: "data", swiftFieldName: "data")
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_Uint64Message) -> Bool {
    if (data != other.data) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

public struct ProtobufUnittest_BoolMessage: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "ProtobufUnittest_BoolMessage"}
  public var protoMessageName: String {return "BoolMessage"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [
    "data": 1,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "data": 1,
  ]}

  var unknown = ProtobufUnknownStorage()

  private var _data: Bool? = nil
  public var data: Bool {
    get {return _data ?? false}
    set {_data = newValue}
  }
  public var hasData: Bool {
    return _data != nil
  }
  public mutating func clearData() {
    return _data = nil
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeSingularField(fieldType: ProtobufBool.self, value: &_data)
    default:
      handled = false
    }
    if handled {
        return true
    } else {
        return try unknown.decodeField(setter: &setter)
    }
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    if let v = _data {
      try visitor.visitSingularField(fieldType: ProtobufBool.self, value: v, protoFieldNumber: 1, protoFieldName: "data", jsonFieldName: "data", swiftFieldName: "data")
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_BoolMessage) -> Bool {
    if (data != other.data) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

///   Test oneofs.
public struct ProtobufUnittest_TestOneof: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "ProtobufUnittest_TestOneof"}
  public var protoMessageName: String {return "TestOneof"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [
    "fooInt": 1,
    "fooString": 2,
    "fooMessage": 3,
    "foogroup": 4,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "foo_int": 1,
    "foo_string": 2,
    "foo_message": 3,
    "foogroup": 4,
  ]}

  private class _StorageClass {
    typealias ProtobufExtendedMessage = ProtobufUnittest_TestOneof
    var unknown = ProtobufUnknownStorage()
    var _foo = ProtobufUnittest_TestOneof.OneOf_Foo()

    init() {}

    func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1, 2, 3, 4:
        handled = try _foo.decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    func traverse(visitor: inout ProtobufVisitor) throws {
      try _foo.traverse(visitor: &visitor, start: 1, end: 5)
      unknown.traverse(visitor: &visitor)
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _foo != other._foo {return false}
      if unknown != other.unknown {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone.unknown = unknown
      clone._foo = _foo
      return clone
    }
  }

  private var _storage = _StorageClass()

  public enum OneOf_Foo: ExpressibleByNilLiteral, ProtobufOneofEnum {
    case fooInt(Int32)
    case fooString(String)
    case fooMessage(ProtobufUnittest_TestAllTypes)
    case fooGroup(ProtobufUnittest_TestOneof.FooGroup)
    case None

    public init(nilLiteral: ()) {
      self = .None
    }

    public init() {
      self = .None
    }

    public mutating func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      if self != .None && setter.rejectConflictingOneof {
        throw ProtobufDecodingError.duplicatedOneOf
      }
      let handled: Bool
      switch protoFieldNumber {
      case 1:
        var value: Int32?
        handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &value)
        if let value = value, handled {
          self = .fooInt(value)
        }
      case 2:
        var value: String?
        handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &value)
        if let value = value, handled {
          self = .fooString(value)
        }
      case 3:
        var value: ProtobufUnittest_TestAllTypes?
        handled = try setter.decodeSingularMessageField(fieldType: ProtobufUnittest_TestAllTypes.self, value: &value)
        if let value = value, handled {
          self = .fooMessage(value)
        }
      case 4:
        var value: ProtobufUnittest_TestOneof.FooGroup?
        handled = try setter.decodeSingularGroupField(fieldType: ProtobufUnittest_TestOneof.FooGroup.self, value: &value)
        if let value = value, handled {
          self = .fooGroup(value)
        }
      default:
        handled = false
        self = .None
      }
      return handled
    }

    public func traverse(visitor: inout ProtobufVisitor, start: Int, end: Int) throws {
      switch self {
      case .fooInt(let v):
        if start <= 1 && 1 < end {
          try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: v, protoFieldNumber: 1, protoFieldName: "foo_int", jsonFieldName: "fooInt", swiftFieldName: "fooInt")
        }
      case .fooString(let v):
        if start <= 2 && 2 < end {
          try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 2, protoFieldName: "foo_string", jsonFieldName: "fooString", swiftFieldName: "fooString")
        }
      case .fooMessage(let v):
        if start <= 3 && 3 < end {
          try visitor.visitSingularMessageField(value: v, protoFieldNumber: 3, protoFieldName: "foo_message", jsonFieldName: "fooMessage", swiftFieldName: "fooMessage")
        }
      case .fooGroup(let v):
        if start <= 4 && 4 < end {
          try visitor.visitSingularGroupField(value: v, protoFieldNumber: 4, protoFieldName: "foogroup", jsonFieldName: "foogroup", swiftFieldName: "fooGroup")
        }
      case .None:
        break
      }
    }
  }

  public struct FooGroup: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "ProtobufUnittest_TestOneof.FooGroup"}
    public var protoMessageName: String {return "FooGroup"}
    public var protoPackageName: String {return "protobuf_unittest"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 5,
      "b": 6,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 5,
      "b": 6,
    ]}

    var unknown = ProtobufUnknownStorage()

    private var _a: Int32? = nil
    public var a: Int32 {
      get {return _a ?? 0}
      set {_a = newValue}
    }
    public var hasA: Bool {
      return _a != nil
    }
    public mutating func clearA() {
      return _a = nil
    }

    private var _b: String? = nil
    public var b: String {
      get {return _b ?? ""}
      set {_b = newValue}
    }
    public var hasB: Bool {
      return _b != nil
    }
    public mutating func clearB() {
      return _b = nil
    }

    public init() {}

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 5: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_a)
      case 6: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &_b)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if let v = _a {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: v, protoFieldNumber: 5, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
      if let v = _b {
        try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 6, protoFieldName: "b", jsonFieldName: "b", swiftFieldName: "b")
      }
      unknown.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestOneof.FooGroup) -> Bool {
      if (a != other.a) {return false}
      if (b != other.b) {return false}
      if unknown != other.unknown {return false}
      return true
    }
  }

  public var fooInt: Int32 {
    get {
      if case .fooInt(let v) = _storage._foo {
        return v
      }
      return 0
    }
    set {
      _uniqueStorage()._foo = .fooInt(newValue)
    }
  }

  public var fooString: String {
    get {
      if case .fooString(let v) = _storage._foo {
        return v
      }
      return ""
    }
    set {
      _uniqueStorage()._foo = .fooString(newValue)
    }
  }

  public var fooMessage: ProtobufUnittest_TestAllTypes {
    get {
      if case .fooMessage(let v) = _storage._foo {
        return v
      }
      return ProtobufUnittest_TestAllTypes()
    }
    set {
      _uniqueStorage()._foo = .fooMessage(newValue)
    }
  }

  public var fooGroup: ProtobufUnittest_TestOneof.FooGroup {
    get {
      if case .fooGroup(let v) = _storage._foo {
        return v
      }
      return ProtobufUnittest_TestOneof.FooGroup()
    }
    set {
      _uniqueStorage()._foo = .fooGroup(newValue)
    }
  }

  public var foo: OneOf_Foo {
    get {return _storage._foo}
    set {
      _uniqueStorage()._foo = newValue
    }
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestOneof) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

public struct ProtobufUnittest_TestOneofBackwardsCompatible: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "ProtobufUnittest_TestOneofBackwardsCompatible"}
  public var protoMessageName: String {return "TestOneofBackwardsCompatible"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [
    "fooInt": 1,
    "fooString": 2,
    "fooMessage": 3,
    "foogroup": 4,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "foo_int": 1,
    "foo_string": 2,
    "foo_message": 3,
    "foogroup": 4,
  ]}

  private class _StorageClass {
    typealias ProtobufExtendedMessage = ProtobufUnittest_TestOneofBackwardsCompatible
    var unknown = ProtobufUnknownStorage()
    var _fooInt: Int32? = nil
    var _fooString: String? = nil
    var _fooMessage: ProtobufUnittest_TestAllTypes? = nil
    var _fooGroup: ProtobufUnittest_TestOneofBackwardsCompatible.FooGroup? = nil

    init() {}

    func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_fooInt)
      case 2: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &_fooString)
      case 3: handled = try setter.decodeSingularMessageField(fieldType: ProtobufUnittest_TestAllTypes.self, value: &_fooMessage)
      case 4: handled = try setter.decodeSingularGroupField(fieldType: ProtobufUnittest_TestOneofBackwardsCompatible.FooGroup.self, value: &_fooGroup)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    func traverse(visitor: inout ProtobufVisitor) throws {
      if let v = _fooInt {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: v, protoFieldNumber: 1, protoFieldName: "foo_int", jsonFieldName: "fooInt", swiftFieldName: "fooInt")
      }
      if let v = _fooString {
        try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 2, protoFieldName: "foo_string", jsonFieldName: "fooString", swiftFieldName: "fooString")
      }
      if let v = _fooMessage {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 3, protoFieldName: "foo_message", jsonFieldName: "fooMessage", swiftFieldName: "fooMessage")
      }
      if let v = _fooGroup {
        try visitor.visitSingularGroupField(value: v, protoFieldNumber: 4, protoFieldName: "foogroup", jsonFieldName: "foogroup", swiftFieldName: "fooGroup")
      }
      unknown.traverse(visitor: &visitor)
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if (_fooInt != other._fooInt) {return false}
      if (_fooString != other._fooString) {return false}
      if ((_fooMessage != nil || other._fooMessage != nil) && (_fooMessage == nil || other._fooMessage == nil || _fooMessage! != other._fooMessage!)) {return false}
      if ((_fooGroup != nil || other._fooGroup != nil) && (_fooGroup == nil || other._fooGroup == nil || _fooGroup! != other._fooGroup!)) {return false}
      if unknown != other.unknown {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone.unknown = unknown
      clone._fooInt = _fooInt
      clone._fooString = _fooString
      clone._fooMessage = _fooMessage
      clone._fooGroup = _fooGroup
      return clone
    }
  }

  private var _storage = _StorageClass()

  public struct FooGroup: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "ProtobufUnittest_TestOneofBackwardsCompatible.FooGroup"}
    public var protoMessageName: String {return "FooGroup"}
    public var protoPackageName: String {return "protobuf_unittest"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 5,
      "b": 6,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 5,
      "b": 6,
    ]}

    var unknown = ProtobufUnknownStorage()

    private var _a: Int32? = nil
    public var a: Int32 {
      get {return _a ?? 0}
      set {_a = newValue}
    }
    public var hasA: Bool {
      return _a != nil
    }
    public mutating func clearA() {
      return _a = nil
    }

    private var _b: String? = nil
    public var b: String {
      get {return _b ?? ""}
      set {_b = newValue}
    }
    public var hasB: Bool {
      return _b != nil
    }
    public mutating func clearB() {
      return _b = nil
    }

    public init() {}

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 5: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_a)
      case 6: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &_b)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if let v = _a {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: v, protoFieldNumber: 5, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
      if let v = _b {
        try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 6, protoFieldName: "b", jsonFieldName: "b", swiftFieldName: "b")
      }
      unknown.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestOneofBackwardsCompatible.FooGroup) -> Bool {
      if (a != other.a) {return false}
      if (b != other.b) {return false}
      if unknown != other.unknown {return false}
      return true
    }
  }

  public var fooInt: Int32 {
    get {return _storage._fooInt ?? 0}
    set {_uniqueStorage()._fooInt = newValue}
  }
  public var hasFooInt: Bool {
    return _storage._fooInt != nil
  }
  public mutating func clearFooInt() {
    return _storage._fooInt = nil
  }

  public var fooString: String {
    get {return _storage._fooString ?? ""}
    set {_uniqueStorage()._fooString = newValue}
  }
  public var hasFooString: Bool {
    return _storage._fooString != nil
  }
  public mutating func clearFooString() {
    return _storage._fooString = nil
  }

  public var fooMessage: ProtobufUnittest_TestAllTypes {
    get {return _storage._fooMessage ?? ProtobufUnittest_TestAllTypes()}
    set {_uniqueStorage()._fooMessage = newValue}
  }
  public var hasFooMessage: Bool {
    return _storage._fooMessage != nil
  }
  public mutating func clearFooMessage() {
    return _storage._fooMessage = nil
  }

  public var fooGroup: ProtobufUnittest_TestOneofBackwardsCompatible.FooGroup {
    get {return _storage._fooGroup ?? ProtobufUnittest_TestOneofBackwardsCompatible.FooGroup()}
    set {_uniqueStorage()._fooGroup = newValue}
  }
  public var hasFooGroup: Bool {
    return _storage._fooGroup != nil
  }
  public mutating func clearFooGroup() {
    return _storage._fooGroup = nil
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestOneofBackwardsCompatible) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

public struct ProtobufUnittest_TestOneof2: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "ProtobufUnittest_TestOneof2"}
  public var protoMessageName: String {return "TestOneof2"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [
    "fooInt": 1,
    "fooString": 2,
    "fooCord": 3,
    "fooStringPiece": 4,
    "fooBytes": 5,
    "fooEnum": 6,
    "fooMessage": 7,
    "foogroup": 8,
    "fooLazyMessage": 11,
    "barInt": 12,
    "barString": 13,
    "barCord": 14,
    "barStringPiece": 15,
    "barBytes": 16,
    "barEnum": 17,
    "bazInt": 18,
    "bazString": 19,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "foo_int": 1,
    "foo_string": 2,
    "foo_cord": 3,
    "foo_string_piece": 4,
    "foo_bytes": 5,
    "foo_enum": 6,
    "foo_message": 7,
    "foogroup": 8,
    "foo_lazy_message": 11,
    "bar_int": 12,
    "bar_string": 13,
    "bar_cord": 14,
    "bar_string_piece": 15,
    "bar_bytes": 16,
    "bar_enum": 17,
    "baz_int": 18,
    "baz_string": 19,
  ]}

  private class _StorageClass {
    typealias ProtobufExtendedMessage = ProtobufUnittest_TestOneof2
    var unknown = ProtobufUnknownStorage()
    var _foo = ProtobufUnittest_TestOneof2.OneOf_Foo()
    var _bar = ProtobufUnittest_TestOneof2.OneOf_Bar()
    var _bazInt: Int32? = nil
    var _bazString: String? = nil

    init() {}

    func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1, 2, 3, 4, 5, 6, 7, 8, 11:
        handled = try _foo.decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
      case 12, 13, 14, 15, 16, 17:
        handled = try _bar.decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
      case 18: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_bazInt)
      case 19: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &_bazString)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    func traverse(visitor: inout ProtobufVisitor) throws {
      try _foo.traverse(visitor: &visitor, start: 1, end: 12)
      try _bar.traverse(visitor: &visitor, start: 12, end: 18)
      if let v = _bazInt {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: v, protoFieldNumber: 18, protoFieldName: "baz_int", jsonFieldName: "bazInt", swiftFieldName: "bazInt")
      }
      if let v = _bazString {
        try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 19, protoFieldName: "baz_string", jsonFieldName: "bazString", swiftFieldName: "bazString")
      }
      unknown.traverse(visitor: &visitor)
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _foo != other._foo {return false}
      if _bar != other._bar {return false}
      if (_bazInt != other._bazInt) {return false}
      if (((_bazString != nil && _bazString! != "BAZ") || (other._bazString != nil && other._bazString! != "BAZ")) && (_bazString == nil || other._bazString == nil || _bazString! != other._bazString!)) {return false}
      if unknown != other.unknown {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone.unknown = unknown
      clone._foo = _foo
      clone._bar = _bar
      clone._bazInt = _bazInt
      clone._bazString = _bazString
      return clone
    }
  }

  private var _storage = _StorageClass()

  public enum OneOf_Foo: ExpressibleByNilLiteral, ProtobufOneofEnum {
    case fooInt(Int32)
    case fooString(String)
    case fooCord(String)
    case fooStringPiece(String)
    case fooBytes(Data)
    case fooEnum(ProtobufUnittest_TestOneof2.NestedEnum)
    case fooMessage(ProtobufUnittest_TestOneof2.NestedMessage)
    case fooGroup(ProtobufUnittest_TestOneof2.FooGroup)
    case fooLazyMessage(ProtobufUnittest_TestOneof2.NestedMessage)
    case None

    public init(nilLiteral: ()) {
      self = .None
    }

    public init() {
      self = .None
    }

    public mutating func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      if self != .None && setter.rejectConflictingOneof {
        throw ProtobufDecodingError.duplicatedOneOf
      }
      let handled: Bool
      switch protoFieldNumber {
      case 1:
        var value: Int32?
        handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &value)
        if let value = value, handled {
          self = .fooInt(value)
        }
      case 2:
        var value: String?
        handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &value)
        if let value = value, handled {
          self = .fooString(value)
        }
      case 3:
        var value: String?
        handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &value)
        if let value = value, handled {
          self = .fooCord(value)
        }
      case 4:
        var value: String?
        handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &value)
        if let value = value, handled {
          self = .fooStringPiece(value)
        }
      case 5:
        var value: Data?
        handled = try setter.decodeSingularField(fieldType: ProtobufBytes.self, value: &value)
        if let value = value, handled {
          self = .fooBytes(value)
        }
      case 6:
        var value: ProtobufUnittest_TestOneof2.NestedEnum?
        handled = try setter.decodeSingularField(fieldType: ProtobufUnittest_TestOneof2.NestedEnum.self, value: &value)
        if let value = value, handled {
          self = .fooEnum(value)
        }
      case 7:
        var value: ProtobufUnittest_TestOneof2.NestedMessage?
        handled = try setter.decodeSingularMessageField(fieldType: ProtobufUnittest_TestOneof2.NestedMessage.self, value: &value)
        if let value = value, handled {
          self = .fooMessage(value)
        }
      case 8:
        var value: ProtobufUnittest_TestOneof2.FooGroup?
        handled = try setter.decodeSingularGroupField(fieldType: ProtobufUnittest_TestOneof2.FooGroup.self, value: &value)
        if let value = value, handled {
          self = .fooGroup(value)
        }
      case 11:
        var value: ProtobufUnittest_TestOneof2.NestedMessage?
        handled = try setter.decodeSingularMessageField(fieldType: ProtobufUnittest_TestOneof2.NestedMessage.self, value: &value)
        if let value = value, handled {
          self = .fooLazyMessage(value)
        }
      default:
        handled = false
        self = .None
      }
      return handled
    }

    public func traverse(visitor: inout ProtobufVisitor, start: Int, end: Int) throws {
      switch self {
      case .fooInt(let v):
        if start <= 1 && 1 < end {
          try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: v, protoFieldNumber: 1, protoFieldName: "foo_int", jsonFieldName: "fooInt", swiftFieldName: "fooInt")
        }
      case .fooString(let v):
        if start <= 2 && 2 < end {
          try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 2, protoFieldName: "foo_string", jsonFieldName: "fooString", swiftFieldName: "fooString")
        }
      case .fooCord(let v):
        if start <= 3 && 3 < end {
          try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 3, protoFieldName: "foo_cord", jsonFieldName: "fooCord", swiftFieldName: "fooCord")
        }
      case .fooStringPiece(let v):
        if start <= 4 && 4 < end {
          try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 4, protoFieldName: "foo_string_piece", jsonFieldName: "fooStringPiece", swiftFieldName: "fooStringPiece")
        }
      case .fooBytes(let v):
        if start <= 5 && 5 < end {
          try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: v, protoFieldNumber: 5, protoFieldName: "foo_bytes", jsonFieldName: "fooBytes", swiftFieldName: "fooBytes")
        }
      case .fooEnum(let v):
        if start <= 6 && 6 < end {
          try visitor.visitSingularField(fieldType: ProtobufUnittest_TestOneof2.NestedEnum.self, value: v, protoFieldNumber: 6, protoFieldName: "foo_enum", jsonFieldName: "fooEnum", swiftFieldName: "fooEnum")
        }
      case .fooMessage(let v):
        if start <= 7 && 7 < end {
          try visitor.visitSingularMessageField(value: v, protoFieldNumber: 7, protoFieldName: "foo_message", jsonFieldName: "fooMessage", swiftFieldName: "fooMessage")
        }
      case .fooGroup(let v):
        if start <= 8 && 8 < end {
          try visitor.visitSingularGroupField(value: v, protoFieldNumber: 8, protoFieldName: "foogroup", jsonFieldName: "foogroup", swiftFieldName: "fooGroup")
        }
      case .fooLazyMessage(let v):
        if start <= 11 && 11 < end {
          try visitor.visitSingularMessageField(value: v, protoFieldNumber: 11, protoFieldName: "foo_lazy_message", jsonFieldName: "fooLazyMessage", swiftFieldName: "fooLazyMessage")
        }
      case .None:
        break
      }
    }
  }

  public enum OneOf_Bar: ExpressibleByNilLiteral, ProtobufOneofEnum {
    case barInt(Int32)
    case barString(String)
    case barCord(String)
    case barStringPiece(String)
    case barBytes(Data)
    case barEnum(ProtobufUnittest_TestOneof2.NestedEnum)
    case None

    public init(nilLiteral: ()) {
      self = .None
    }

    public init() {
      self = .None
    }

    public mutating func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      if self != .None && setter.rejectConflictingOneof {
        throw ProtobufDecodingError.duplicatedOneOf
      }
      let handled: Bool
      switch protoFieldNumber {
      case 12:
        var value: Int32?
        handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &value)
        if let value = value, handled {
          self = .barInt(value)
        }
      case 13:
        var value: String?
        handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &value)
        if let value = value, handled {
          self = .barString(value)
        }
      case 14:
        var value: String?
        handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &value)
        if let value = value, handled {
          self = .barCord(value)
        }
      case 15:
        var value: String?
        handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &value)
        if let value = value, handled {
          self = .barStringPiece(value)
        }
      case 16:
        var value: Data?
        handled = try setter.decodeSingularField(fieldType: ProtobufBytes.self, value: &value)
        if let value = value, handled {
          self = .barBytes(value)
        }
      case 17:
        var value: ProtobufUnittest_TestOneof2.NestedEnum?
        handled = try setter.decodeSingularField(fieldType: ProtobufUnittest_TestOneof2.NestedEnum.self, value: &value)
        if let value = value, handled {
          self = .barEnum(value)
        }
      default:
        handled = false
        self = .None
      }
      return handled
    }

    public func traverse(visitor: inout ProtobufVisitor, start: Int, end: Int) throws {
      switch self {
      case .barInt(let v):
        if start <= 12 && 12 < end {
          try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: v, protoFieldNumber: 12, protoFieldName: "bar_int", jsonFieldName: "barInt", swiftFieldName: "barInt")
        }
      case .barString(let v):
        if start <= 13 && 13 < end {
          try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 13, protoFieldName: "bar_string", jsonFieldName: "barString", swiftFieldName: "barString")
        }
      case .barCord(let v):
        if start <= 14 && 14 < end {
          try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 14, protoFieldName: "bar_cord", jsonFieldName: "barCord", swiftFieldName: "barCord")
        }
      case .barStringPiece(let v):
        if start <= 15 && 15 < end {
          try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 15, protoFieldName: "bar_string_piece", jsonFieldName: "barStringPiece", swiftFieldName: "barStringPiece")
        }
      case .barBytes(let v):
        if start <= 16 && 16 < end {
          try visitor.visitSingularField(fieldType: ProtobufBytes.self, value: v, protoFieldNumber: 16, protoFieldName: "bar_bytes", jsonFieldName: "barBytes", swiftFieldName: "barBytes")
        }
      case .barEnum(let v):
        if start <= 17 && 17 < end {
          try visitor.visitSingularField(fieldType: ProtobufUnittest_TestOneof2.NestedEnum.self, value: v, protoFieldNumber: 17, protoFieldName: "bar_enum", jsonFieldName: "barEnum", swiftFieldName: "barEnum")
        }
      case .None:
        break
      }
    }
  }

  public enum NestedEnum: ProtobufEnum {
    public typealias RawValue = Int
    case foo // = 1
    case bar // = 2
    case baz // = 3

    public init() {
      self = .foo
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 1: self = .foo
      case 2: self = .bar
      case 3: self = .baz
      default: return nil
      }
    }

    public init?(name: String) {
      switch name {
      case "foo": self = .foo
      case "bar": self = .bar
      case "baz": self = .baz
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "FOO": self = .foo
      case "BAR": self = .bar
      case "BAZ": self = .baz
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "FOO": self = .foo
      case "BAR": self = .bar
      case "BAZ": self = .baz
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .foo: return 1
        case .bar: return 2
        case .baz: return 3
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .foo: return "\"FOO\""
        case .bar: return "\"BAR\""
        case .baz: return "\"BAZ\""
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .foo: return ".foo"
        case .bar: return ".bar"
        case .baz: return ".baz"
        }
      }
    }

  }

  public struct FooGroup: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "ProtobufUnittest_TestOneof2.FooGroup"}
    public var protoMessageName: String {return "FooGroup"}
    public var protoPackageName: String {return "protobuf_unittest"}
    public var jsonFieldNames: [String: Int] {return [
      "a": 9,
      "b": 10,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "a": 9,
      "b": 10,
    ]}

    var unknown = ProtobufUnknownStorage()

    private var _a: Int32? = nil
    public var a: Int32 {
      get {return _a ?? 0}
      set {_a = newValue}
    }
    public var hasA: Bool {
      return _a != nil
    }
    public mutating func clearA() {
      return _a = nil
    }

    private var _b: String? = nil
    public var b: String {
      get {return _b ?? ""}
      set {_b = newValue}
    }
    public var hasB: Bool {
      return _b != nil
    }
    public mutating func clearB() {
      return _b = nil
    }

    public init() {}

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 9: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_a)
      case 10: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &_b)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if let v = _a {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: v, protoFieldNumber: 9, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
      }
      if let v = _b {
        try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 10, protoFieldName: "b", jsonFieldName: "b", swiftFieldName: "b")
      }
      unknown.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestOneof2.FooGroup) -> Bool {
      if (a != other.a) {return false}
      if (b != other.b) {return false}
      if unknown != other.unknown {return false}
      return true
    }
  }

  public struct NestedMessage: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "ProtobufUnittest_TestOneof2.NestedMessage"}
    public var protoMessageName: String {return "NestedMessage"}
    public var protoPackageName: String {return "protobuf_unittest"}
    public var jsonFieldNames: [String: Int] {return [
      "quxInt": 1,
      "corgeInt": 2,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "qux_int": 1,
      "corge_int": 2,
    ]}

    var unknown = ProtobufUnknownStorage()

    private var _quxInt: Int64? = nil
    public var quxInt: Int64 {
      get {return _quxInt ?? 0}
      set {_quxInt = newValue}
    }
    public var hasQuxInt: Bool {
      return _quxInt != nil
    }
    public mutating func clearQuxInt() {
      return _quxInt = nil
    }

    public var corgeInt: [Int32] = []

    public init() {}

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufInt64.self, value: &_quxInt)
      case 2: handled = try setter.decodeRepeatedField(fieldType: ProtobufInt32.self, value: &corgeInt)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if let v = _quxInt {
        try visitor.visitSingularField(fieldType: ProtobufInt64.self, value: v, protoFieldNumber: 1, protoFieldName: "qux_int", jsonFieldName: "quxInt", swiftFieldName: "quxInt")
      }
      if !corgeInt.isEmpty {
        try visitor.visitRepeatedField(fieldType: ProtobufInt32.self, value: corgeInt, protoFieldNumber: 2, protoFieldName: "corge_int", jsonFieldName: "corgeInt", swiftFieldName: "corgeInt")
      }
      unknown.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestOneof2.NestedMessage) -> Bool {
      if (quxInt != other.quxInt) {return false}
      if corgeInt != other.corgeInt {return false}
      if unknown != other.unknown {return false}
      return true
    }
  }

  public var fooInt: Int32 {
    get {
      if case .fooInt(let v) = _storage._foo {
        return v
      }
      return 0
    }
    set {
      _uniqueStorage()._foo = .fooInt(newValue)
    }
  }

  public var fooString: String {
    get {
      if case .fooString(let v) = _storage._foo {
        return v
      }
      return ""
    }
    set {
      _uniqueStorage()._foo = .fooString(newValue)
    }
  }

  public var fooCord: String {
    get {
      if case .fooCord(let v) = _storage._foo {
        return v
      }
      return ""
    }
    set {
      _uniqueStorage()._foo = .fooCord(newValue)
    }
  }

  public var fooStringPiece: String {
    get {
      if case .fooStringPiece(let v) = _storage._foo {
        return v
      }
      return ""
    }
    set {
      _uniqueStorage()._foo = .fooStringPiece(newValue)
    }
  }

  public var fooBytes: Data {
    get {
      if case .fooBytes(let v) = _storage._foo {
        return v
      }
      return Data()
    }
    set {
      _uniqueStorage()._foo = .fooBytes(newValue)
    }
  }

  public var fooEnum: ProtobufUnittest_TestOneof2.NestedEnum {
    get {
      if case .fooEnum(let v) = _storage._foo {
        return v
      }
      return ProtobufUnittest_TestOneof2.NestedEnum.foo
    }
    set {
      _uniqueStorage()._foo = .fooEnum(newValue)
    }
  }

  public var fooMessage: ProtobufUnittest_TestOneof2.NestedMessage {
    get {
      if case .fooMessage(let v) = _storage._foo {
        return v
      }
      return ProtobufUnittest_TestOneof2.NestedMessage()
    }
    set {
      _uniqueStorage()._foo = .fooMessage(newValue)
    }
  }

  public var fooGroup: ProtobufUnittest_TestOneof2.FooGroup {
    get {
      if case .fooGroup(let v) = _storage._foo {
        return v
      }
      return ProtobufUnittest_TestOneof2.FooGroup()
    }
    set {
      _uniqueStorage()._foo = .fooGroup(newValue)
    }
  }

  public var fooLazyMessage: ProtobufUnittest_TestOneof2.NestedMessage {
    get {
      if case .fooLazyMessage(let v) = _storage._foo {
        return v
      }
      return ProtobufUnittest_TestOneof2.NestedMessage()
    }
    set {
      _uniqueStorage()._foo = .fooLazyMessage(newValue)
    }
  }

  public var barInt: Int32 {
    get {
      if case .barInt(let v) = _storage._bar {
        return v
      }
      return 5
    }
    set {
      _uniqueStorage()._bar = .barInt(newValue)
    }
  }

  public var barString: String {
    get {
      if case .barString(let v) = _storage._bar {
        return v
      }
      return "STRING"
    }
    set {
      _uniqueStorage()._bar = .barString(newValue)
    }
  }

  public var barCord: String {
    get {
      if case .barCord(let v) = _storage._bar {
        return v
      }
      return "CORD"
    }
    set {
      _uniqueStorage()._bar = .barCord(newValue)
    }
  }

  public var barStringPiece: String {
    get {
      if case .barStringPiece(let v) = _storage._bar {
        return v
      }
      return "SPIECE"
    }
    set {
      _uniqueStorage()._bar = .barStringPiece(newValue)
    }
  }

  public var barBytes: Data {
    get {
      if case .barBytes(let v) = _storage._bar {
        return v
      }
      return Data(bytes: [66, 89, 84, 69, 83])
    }
    set {
      _uniqueStorage()._bar = .barBytes(newValue)
    }
  }

  public var barEnum: ProtobufUnittest_TestOneof2.NestedEnum {
    get {
      if case .barEnum(let v) = _storage._bar {
        return v
      }
      return ProtobufUnittest_TestOneof2.NestedEnum.bar
    }
    set {
      _uniqueStorage()._bar = .barEnum(newValue)
    }
  }

  public var bazInt: Int32 {
    get {return _storage._bazInt ?? 0}
    set {_uniqueStorage()._bazInt = newValue}
  }
  public var hasBazInt: Bool {
    return _storage._bazInt != nil
  }
  public mutating func clearBazInt() {
    return _storage._bazInt = nil
  }

  public var bazString: String {
    get {return _storage._bazString ?? "BAZ"}
    set {_uniqueStorage()._bazString = newValue}
  }
  public var hasBazString: Bool {
    return _storage._bazString != nil
  }
  public mutating func clearBazString() {
    return _storage._bazString = nil
  }

  public var foo: OneOf_Foo {
    get {return _storage._foo}
    set {
      _uniqueStorage()._foo = newValue
    }
  }

  public var bar: OneOf_Bar {
    get {return _storage._bar}
    set {
      _uniqueStorage()._bar = newValue
    }
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestOneof2) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

public struct ProtobufUnittest_TestRequiredOneof: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "ProtobufUnittest_TestRequiredOneof"}
  public var protoMessageName: String {return "TestRequiredOneof"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [
    "fooInt": 1,
    "fooString": 2,
    "fooMessage": 3,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "foo_int": 1,
    "foo_string": 2,
    "foo_message": 3,
  ]}

  private class _StorageClass {
    typealias ProtobufExtendedMessage = ProtobufUnittest_TestRequiredOneof
    var unknown = ProtobufUnknownStorage()
    var _foo = ProtobufUnittest_TestRequiredOneof.OneOf_Foo()

    init() {}

    func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1, 2, 3:
        handled = try _foo.decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    func traverse(visitor: inout ProtobufVisitor) throws {
      try _foo.traverse(visitor: &visitor, start: 1, end: 4)
      unknown.traverse(visitor: &visitor)
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _foo != other._foo {return false}
      if unknown != other.unknown {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone.unknown = unknown
      clone._foo = _foo
      return clone
    }
  }

  private var _storage = _StorageClass()

  public enum OneOf_Foo: ExpressibleByNilLiteral, ProtobufOneofEnum {
    case fooInt(Int32)
    case fooString(String)
    case fooMessage(ProtobufUnittest_TestRequiredOneof.NestedMessage)
    case None

    public init(nilLiteral: ()) {
      self = .None
    }

    public init() {
      self = .None
    }

    public mutating func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      if self != .None && setter.rejectConflictingOneof {
        throw ProtobufDecodingError.duplicatedOneOf
      }
      let handled: Bool
      switch protoFieldNumber {
      case 1:
        var value: Int32?
        handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &value)
        if let value = value, handled {
          self = .fooInt(value)
        }
      case 2:
        var value: String?
        handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &value)
        if let value = value, handled {
          self = .fooString(value)
        }
      case 3:
        var value: ProtobufUnittest_TestRequiredOneof.NestedMessage?
        handled = try setter.decodeSingularMessageField(fieldType: ProtobufUnittest_TestRequiredOneof.NestedMessage.self, value: &value)
        if let value = value, handled {
          self = .fooMessage(value)
        }
      default:
        handled = false
        self = .None
      }
      return handled
    }

    public func traverse(visitor: inout ProtobufVisitor, start: Int, end: Int) throws {
      switch self {
      case .fooInt(let v):
        if start <= 1 && 1 < end {
          try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: v, protoFieldNumber: 1, protoFieldName: "foo_int", jsonFieldName: "fooInt", swiftFieldName: "fooInt")
        }
      case .fooString(let v):
        if start <= 2 && 2 < end {
          try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 2, protoFieldName: "foo_string", jsonFieldName: "fooString", swiftFieldName: "fooString")
        }
      case .fooMessage(let v):
        if start <= 3 && 3 < end {
          try visitor.visitSingularMessageField(value: v, protoFieldNumber: 3, protoFieldName: "foo_message", jsonFieldName: "fooMessage", swiftFieldName: "fooMessage")
        }
      case .None:
        break
      }
    }
  }

  public struct NestedMessage: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "ProtobufUnittest_TestRequiredOneof.NestedMessage"}
    public var protoMessageName: String {return "NestedMessage"}
    public var protoPackageName: String {return "protobuf_unittest"}
    public var jsonFieldNames: [String: Int] {return [
      "requiredDouble": 1,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "required_double": 1,
    ]}

    var unknown = ProtobufUnknownStorage()

    private var _requiredDouble: Double? = nil
    public var requiredDouble: Double {
      get {return _requiredDouble ?? 0}
      set {_requiredDouble = newValue}
    }
    public var hasRequiredDouble: Bool {
      return _requiredDouble != nil
    }
    public mutating func clearRequiredDouble() {
      return _requiredDouble = nil
    }

    public init() {}

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularField(fieldType: ProtobufDouble.self, value: &_requiredDouble)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      try visitor.visitSingularField(fieldType: ProtobufDouble.self, value: _requiredDouble ?? 0, protoFieldNumber: 1, protoFieldName: "required_double", jsonFieldName: "requiredDouble", swiftFieldName: "requiredDouble")
      unknown.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestRequiredOneof.NestedMessage) -> Bool {
      if (requiredDouble != other.requiredDouble) {return false}
      if unknown != other.unknown {return false}
      return true
    }
  }

  public var fooInt: Int32 {
    get {
      if case .fooInt(let v) = _storage._foo {
        return v
      }
      return 0
    }
    set {
      _uniqueStorage()._foo = .fooInt(newValue)
    }
  }

  public var fooString: String {
    get {
      if case .fooString(let v) = _storage._foo {
        return v
      }
      return ""
    }
    set {
      _uniqueStorage()._foo = .fooString(newValue)
    }
  }

  public var fooMessage: ProtobufUnittest_TestRequiredOneof.NestedMessage {
    get {
      if case .fooMessage(let v) = _storage._foo {
        return v
      }
      return ProtobufUnittest_TestRequiredOneof.NestedMessage()
    }
    set {
      _uniqueStorage()._foo = .fooMessage(newValue)
    }
  }

  public var foo: OneOf_Foo {
    get {return _storage._foo}
    set {
      _uniqueStorage()._foo = newValue
    }
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestRequiredOneof) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

//  Test messages for packed fields

public struct ProtobufUnittest_TestPackedTypes: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "ProtobufUnittest_TestPackedTypes"}
  public var protoMessageName: String {return "TestPackedTypes"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [
    "packedInt32": 90,
    "packedInt64": 91,
    "packedUint32": 92,
    "packedUint64": 93,
    "packedSint32": 94,
    "packedSint64": 95,
    "packedFixed32": 96,
    "packedFixed64": 97,
    "packedSfixed32": 98,
    "packedSfixed64": 99,
    "packedFloat": 100,
    "packedDouble": 101,
    "packedBool": 102,
    "packedEnum": 103,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "packed_int32": 90,
    "packed_int64": 91,
    "packed_uint32": 92,
    "packed_uint64": 93,
    "packed_sint32": 94,
    "packed_sint64": 95,
    "packed_fixed32": 96,
    "packed_fixed64": 97,
    "packed_sfixed32": 98,
    "packed_sfixed64": 99,
    "packed_float": 100,
    "packed_double": 101,
    "packed_bool": 102,
    "packed_enum": 103,
  ]}

  var unknown = ProtobufUnknownStorage()

  public var packedInt32: [Int32] = []

  public var packedInt64: [Int64] = []

  public var packedUint32: [UInt32] = []

  public var packedUint64: [UInt64] = []

  public var packedSint32: [Int32] = []

  public var packedSint64: [Int64] = []

  public var packedFixed32: [UInt32] = []

  public var packedFixed64: [UInt64] = []

  public var packedSfixed32: [Int32] = []

  public var packedSfixed64: [Int64] = []

  public var packedFloat: [Float] = []

  public var packedDouble: [Double] = []

  public var packedBool: [Bool] = []

  public var packedEnum: [ProtobufUnittest_ForeignEnum] = []

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 90: handled = try setter.decodePackedField(fieldType: ProtobufInt32.self, value: &packedInt32)
    case 91: handled = try setter.decodePackedField(fieldType: ProtobufInt64.self, value: &packedInt64)
    case 92: handled = try setter.decodePackedField(fieldType: ProtobufUInt32.self, value: &packedUint32)
    case 93: handled = try setter.decodePackedField(fieldType: ProtobufUInt64.self, value: &packedUint64)
    case 94: handled = try setter.decodePackedField(fieldType: ProtobufSInt32.self, value: &packedSint32)
    case 95: handled = try setter.decodePackedField(fieldType: ProtobufSInt64.self, value: &packedSint64)
    case 96: handled = try setter.decodePackedField(fieldType: ProtobufFixed32.self, value: &packedFixed32)
    case 97: handled = try setter.decodePackedField(fieldType: ProtobufFixed64.self, value: &packedFixed64)
    case 98: handled = try setter.decodePackedField(fieldType: ProtobufSFixed32.self, value: &packedSfixed32)
    case 99: handled = try setter.decodePackedField(fieldType: ProtobufSFixed64.self, value: &packedSfixed64)
    case 100: handled = try setter.decodePackedField(fieldType: ProtobufFloat.self, value: &packedFloat)
    case 101: handled = try setter.decodePackedField(fieldType: ProtobufDouble.self, value: &packedDouble)
    case 102: handled = try setter.decodePackedField(fieldType: ProtobufBool.self, value: &packedBool)
    case 103: handled = try setter.decodePackedField(fieldType: ProtobufUnittest_ForeignEnum.self, value: &packedEnum)
    default:
      handled = false
    }
    if handled {
        return true
    } else {
        return try unknown.decodeField(setter: &setter)
    }
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    if !packedInt32.isEmpty {
      try visitor.visitPackedField(fieldType: ProtobufInt32.self, value: packedInt32, protoFieldNumber: 90, protoFieldName: "packed_int32", jsonFieldName: "packedInt32", swiftFieldName: "packedInt32")
    }
    if !packedInt64.isEmpty {
      try visitor.visitPackedField(fieldType: ProtobufInt64.self, value: packedInt64, protoFieldNumber: 91, protoFieldName: "packed_int64", jsonFieldName: "packedInt64", swiftFieldName: "packedInt64")
    }
    if !packedUint32.isEmpty {
      try visitor.visitPackedField(fieldType: ProtobufUInt32.self, value: packedUint32, protoFieldNumber: 92, protoFieldName: "packed_uint32", jsonFieldName: "packedUint32", swiftFieldName: "packedUint32")
    }
    if !packedUint64.isEmpty {
      try visitor.visitPackedField(fieldType: ProtobufUInt64.self, value: packedUint64, protoFieldNumber: 93, protoFieldName: "packed_uint64", jsonFieldName: "packedUint64", swiftFieldName: "packedUint64")
    }
    if !packedSint32.isEmpty {
      try visitor.visitPackedField(fieldType: ProtobufSInt32.self, value: packedSint32, protoFieldNumber: 94, protoFieldName: "packed_sint32", jsonFieldName: "packedSint32", swiftFieldName: "packedSint32")
    }
    if !packedSint64.isEmpty {
      try visitor.visitPackedField(fieldType: ProtobufSInt64.self, value: packedSint64, protoFieldNumber: 95, protoFieldName: "packed_sint64", jsonFieldName: "packedSint64", swiftFieldName: "packedSint64")
    }
    if !packedFixed32.isEmpty {
      try visitor.visitPackedField(fieldType: ProtobufFixed32.self, value: packedFixed32, protoFieldNumber: 96, protoFieldName: "packed_fixed32", jsonFieldName: "packedFixed32", swiftFieldName: "packedFixed32")
    }
    if !packedFixed64.isEmpty {
      try visitor.visitPackedField(fieldType: ProtobufFixed64.self, value: packedFixed64, protoFieldNumber: 97, protoFieldName: "packed_fixed64", jsonFieldName: "packedFixed64", swiftFieldName: "packedFixed64")
    }
    if !packedSfixed32.isEmpty {
      try visitor.visitPackedField(fieldType: ProtobufSFixed32.self, value: packedSfixed32, protoFieldNumber: 98, protoFieldName: "packed_sfixed32", jsonFieldName: "packedSfixed32", swiftFieldName: "packedSfixed32")
    }
    if !packedSfixed64.isEmpty {
      try visitor.visitPackedField(fieldType: ProtobufSFixed64.self, value: packedSfixed64, protoFieldNumber: 99, protoFieldName: "packed_sfixed64", jsonFieldName: "packedSfixed64", swiftFieldName: "packedSfixed64")
    }
    if !packedFloat.isEmpty {
      try visitor.visitPackedField(fieldType: ProtobufFloat.self, value: packedFloat, protoFieldNumber: 100, protoFieldName: "packed_float", jsonFieldName: "packedFloat", swiftFieldName: "packedFloat")
    }
    if !packedDouble.isEmpty {
      try visitor.visitPackedField(fieldType: ProtobufDouble.self, value: packedDouble, protoFieldNumber: 101, protoFieldName: "packed_double", jsonFieldName: "packedDouble", swiftFieldName: "packedDouble")
    }
    if !packedBool.isEmpty {
      try visitor.visitPackedField(fieldType: ProtobufBool.self, value: packedBool, protoFieldNumber: 102, protoFieldName: "packed_bool", jsonFieldName: "packedBool", swiftFieldName: "packedBool")
    }
    if !packedEnum.isEmpty {
      try visitor.visitPackedField(fieldType: ProtobufUnittest_ForeignEnum.self, value: packedEnum, protoFieldNumber: 103, protoFieldName: "packed_enum", jsonFieldName: "packedEnum", swiftFieldName: "packedEnum")
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestPackedTypes) -> Bool {
    if packedInt32 != other.packedInt32 {return false}
    if packedInt64 != other.packedInt64 {return false}
    if packedUint32 != other.packedUint32 {return false}
    if packedUint64 != other.packedUint64 {return false}
    if packedSint32 != other.packedSint32 {return false}
    if packedSint64 != other.packedSint64 {return false}
    if packedFixed32 != other.packedFixed32 {return false}
    if packedFixed64 != other.packedFixed64 {return false}
    if packedSfixed32 != other.packedSfixed32 {return false}
    if packedSfixed64 != other.packedSfixed64 {return false}
    if packedFloat != other.packedFloat {return false}
    if packedDouble != other.packedDouble {return false}
    if packedBool != other.packedBool {return false}
    if packedEnum != other.packedEnum {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

///   A message with the same fields as TestPackedTypes, but without packing. Used
///   to test packed <-> unpacked wire compatibility.
public struct ProtobufUnittest_TestUnpackedTypes: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "ProtobufUnittest_TestUnpackedTypes"}
  public var protoMessageName: String {return "TestUnpackedTypes"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [
    "unpackedInt32": 90,
    "unpackedInt64": 91,
    "unpackedUint32": 92,
    "unpackedUint64": 93,
    "unpackedSint32": 94,
    "unpackedSint64": 95,
    "unpackedFixed32": 96,
    "unpackedFixed64": 97,
    "unpackedSfixed32": 98,
    "unpackedSfixed64": 99,
    "unpackedFloat": 100,
    "unpackedDouble": 101,
    "unpackedBool": 102,
    "unpackedEnum": 103,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "unpacked_int32": 90,
    "unpacked_int64": 91,
    "unpacked_uint32": 92,
    "unpacked_uint64": 93,
    "unpacked_sint32": 94,
    "unpacked_sint64": 95,
    "unpacked_fixed32": 96,
    "unpacked_fixed64": 97,
    "unpacked_sfixed32": 98,
    "unpacked_sfixed64": 99,
    "unpacked_float": 100,
    "unpacked_double": 101,
    "unpacked_bool": 102,
    "unpacked_enum": 103,
  ]}

  var unknown = ProtobufUnknownStorage()

  public var unpackedInt32: [Int32] = []

  public var unpackedInt64: [Int64] = []

  public var unpackedUint32: [UInt32] = []

  public var unpackedUint64: [UInt64] = []

  public var unpackedSint32: [Int32] = []

  public var unpackedSint64: [Int64] = []

  public var unpackedFixed32: [UInt32] = []

  public var unpackedFixed64: [UInt64] = []

  public var unpackedSfixed32: [Int32] = []

  public var unpackedSfixed64: [Int64] = []

  public var unpackedFloat: [Float] = []

  public var unpackedDouble: [Double] = []

  public var unpackedBool: [Bool] = []

  public var unpackedEnum: [ProtobufUnittest_ForeignEnum] = []

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 90: handled = try setter.decodeRepeatedField(fieldType: ProtobufInt32.self, value: &unpackedInt32)
    case 91: handled = try setter.decodeRepeatedField(fieldType: ProtobufInt64.self, value: &unpackedInt64)
    case 92: handled = try setter.decodeRepeatedField(fieldType: ProtobufUInt32.self, value: &unpackedUint32)
    case 93: handled = try setter.decodeRepeatedField(fieldType: ProtobufUInt64.self, value: &unpackedUint64)
    case 94: handled = try setter.decodeRepeatedField(fieldType: ProtobufSInt32.self, value: &unpackedSint32)
    case 95: handled = try setter.decodeRepeatedField(fieldType: ProtobufSInt64.self, value: &unpackedSint64)
    case 96: handled = try setter.decodeRepeatedField(fieldType: ProtobufFixed32.self, value: &unpackedFixed32)
    case 97: handled = try setter.decodeRepeatedField(fieldType: ProtobufFixed64.self, value: &unpackedFixed64)
    case 98: handled = try setter.decodeRepeatedField(fieldType: ProtobufSFixed32.self, value: &unpackedSfixed32)
    case 99: handled = try setter.decodeRepeatedField(fieldType: ProtobufSFixed64.self, value: &unpackedSfixed64)
    case 100: handled = try setter.decodeRepeatedField(fieldType: ProtobufFloat.self, value: &unpackedFloat)
    case 101: handled = try setter.decodeRepeatedField(fieldType: ProtobufDouble.self, value: &unpackedDouble)
    case 102: handled = try setter.decodeRepeatedField(fieldType: ProtobufBool.self, value: &unpackedBool)
    case 103: handled = try setter.decodeRepeatedField(fieldType: ProtobufUnittest_ForeignEnum.self, value: &unpackedEnum)
    default:
      handled = false
    }
    if handled {
        return true
    } else {
        return try unknown.decodeField(setter: &setter)
    }
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    if !unpackedInt32.isEmpty {
      try visitor.visitRepeatedField(fieldType: ProtobufInt32.self, value: unpackedInt32, protoFieldNumber: 90, protoFieldName: "unpacked_int32", jsonFieldName: "unpackedInt32", swiftFieldName: "unpackedInt32")
    }
    if !unpackedInt64.isEmpty {
      try visitor.visitRepeatedField(fieldType: ProtobufInt64.self, value: unpackedInt64, protoFieldNumber: 91, protoFieldName: "unpacked_int64", jsonFieldName: "unpackedInt64", swiftFieldName: "unpackedInt64")
    }
    if !unpackedUint32.isEmpty {
      try visitor.visitRepeatedField(fieldType: ProtobufUInt32.self, value: unpackedUint32, protoFieldNumber: 92, protoFieldName: "unpacked_uint32", jsonFieldName: "unpackedUint32", swiftFieldName: "unpackedUint32")
    }
    if !unpackedUint64.isEmpty {
      try visitor.visitRepeatedField(fieldType: ProtobufUInt64.self, value: unpackedUint64, protoFieldNumber: 93, protoFieldName: "unpacked_uint64", jsonFieldName: "unpackedUint64", swiftFieldName: "unpackedUint64")
    }
    if !unpackedSint32.isEmpty {
      try visitor.visitRepeatedField(fieldType: ProtobufSInt32.self, value: unpackedSint32, protoFieldNumber: 94, protoFieldName: "unpacked_sint32", jsonFieldName: "unpackedSint32", swiftFieldName: "unpackedSint32")
    }
    if !unpackedSint64.isEmpty {
      try visitor.visitRepeatedField(fieldType: ProtobufSInt64.self, value: unpackedSint64, protoFieldNumber: 95, protoFieldName: "unpacked_sint64", jsonFieldName: "unpackedSint64", swiftFieldName: "unpackedSint64")
    }
    if !unpackedFixed32.isEmpty {
      try visitor.visitRepeatedField(fieldType: ProtobufFixed32.self, value: unpackedFixed32, protoFieldNumber: 96, protoFieldName: "unpacked_fixed32", jsonFieldName: "unpackedFixed32", swiftFieldName: "unpackedFixed32")
    }
    if !unpackedFixed64.isEmpty {
      try visitor.visitRepeatedField(fieldType: ProtobufFixed64.self, value: unpackedFixed64, protoFieldNumber: 97, protoFieldName: "unpacked_fixed64", jsonFieldName: "unpackedFixed64", swiftFieldName: "unpackedFixed64")
    }
    if !unpackedSfixed32.isEmpty {
      try visitor.visitRepeatedField(fieldType: ProtobufSFixed32.self, value: unpackedSfixed32, protoFieldNumber: 98, protoFieldName: "unpacked_sfixed32", jsonFieldName: "unpackedSfixed32", swiftFieldName: "unpackedSfixed32")
    }
    if !unpackedSfixed64.isEmpty {
      try visitor.visitRepeatedField(fieldType: ProtobufSFixed64.self, value: unpackedSfixed64, protoFieldNumber: 99, protoFieldName: "unpacked_sfixed64", jsonFieldName: "unpackedSfixed64", swiftFieldName: "unpackedSfixed64")
    }
    if !unpackedFloat.isEmpty {
      try visitor.visitRepeatedField(fieldType: ProtobufFloat.self, value: unpackedFloat, protoFieldNumber: 100, protoFieldName: "unpacked_float", jsonFieldName: "unpackedFloat", swiftFieldName: "unpackedFloat")
    }
    if !unpackedDouble.isEmpty {
      try visitor.visitRepeatedField(fieldType: ProtobufDouble.self, value: unpackedDouble, protoFieldNumber: 101, protoFieldName: "unpacked_double", jsonFieldName: "unpackedDouble", swiftFieldName: "unpackedDouble")
    }
    if !unpackedBool.isEmpty {
      try visitor.visitRepeatedField(fieldType: ProtobufBool.self, value: unpackedBool, protoFieldNumber: 102, protoFieldName: "unpacked_bool", jsonFieldName: "unpackedBool", swiftFieldName: "unpackedBool")
    }
    if !unpackedEnum.isEmpty {
      try visitor.visitRepeatedField(fieldType: ProtobufUnittest_ForeignEnum.self, value: unpackedEnum, protoFieldNumber: 103, protoFieldName: "unpacked_enum", jsonFieldName: "unpackedEnum", swiftFieldName: "unpackedEnum")
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestUnpackedTypes) -> Bool {
    if unpackedInt32 != other.unpackedInt32 {return false}
    if unpackedInt64 != other.unpackedInt64 {return false}
    if unpackedUint32 != other.unpackedUint32 {return false}
    if unpackedUint64 != other.unpackedUint64 {return false}
    if unpackedSint32 != other.unpackedSint32 {return false}
    if unpackedSint64 != other.unpackedSint64 {return false}
    if unpackedFixed32 != other.unpackedFixed32 {return false}
    if unpackedFixed64 != other.unpackedFixed64 {return false}
    if unpackedSfixed32 != other.unpackedSfixed32 {return false}
    if unpackedSfixed64 != other.unpackedSfixed64 {return false}
    if unpackedFloat != other.unpackedFloat {return false}
    if unpackedDouble != other.unpackedDouble {return false}
    if unpackedBool != other.unpackedBool {return false}
    if unpackedEnum != other.unpackedEnum {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

public struct ProtobufUnittest_TestPackedExtensions: ProtobufGeneratedMessage, ProtobufExtensibleMessage {
  public var swiftClassName: String {return "ProtobufUnittest_TestPackedExtensions"}
  public var protoMessageName: String {return "TestPackedExtensions"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [:]}
  public var protoFieldNames: [String: Int] {return [:]}

  var unknown = ProtobufUnknownStorage()

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    var handled = false
    if (1 <= protoFieldNumber && protoFieldNumber < 536870912) {
      handled = try setter.decodeExtensionField(values: &extensionFieldValues, messageType: ProtobufUnittest_TestPackedExtensions.self, protoFieldNumber: protoFieldNumber)
    } else {
      handled = false
    }
    if handled {
        return true
    } else {
        return try unknown.decodeField(setter: &setter)
    }
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try extensionFieldValues.traverse(visitor: &visitor, start: 1, end: 536870912)
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestPackedExtensions) -> Bool {
    if unknown != other.unknown {return false}
    if extensionFieldValues != other.extensionFieldValues {return false}
    return true
  }

  private var extensionFieldValues = ProtobufExtensionFieldValueSet()

  public mutating func setExtensionValue<F: ProtobufExtensionField>(ext: ProtobufGenericMessageExtension<F, ProtobufUnittest_TestPackedExtensions>, value: F.ValueType) {
    extensionFieldValues[ext.protoFieldNumber] = ext.set(value: value)
  }

  public mutating func clearExtensionValue<F: ProtobufExtensionField>(ext: ProtobufGenericMessageExtension<F, ProtobufUnittest_TestPackedExtensions>) {
    extensionFieldValues[ext.protoFieldNumber] = nil
  }

  public func getExtensionValue<F: ProtobufExtensionField>(ext: ProtobufGenericMessageExtension<F, ProtobufUnittest_TestPackedExtensions>) -> F.ValueType {
    if let fieldValue = extensionFieldValues[ext.protoFieldNumber] as? F {
      return fieldValue.value
    }
    return ext.defaultValue
  }

  public func hasExtensionValue<F: ProtobufExtensionField>(ext: ProtobufGenericMessageExtension<F, ProtobufUnittest_TestPackedExtensions>) -> Bool {
    return extensionFieldValues[ext.protoFieldNumber] is F
  }
}

public struct ProtobufUnittest_TestUnpackedExtensions: ProtobufGeneratedMessage, ProtobufExtensibleMessage {
  public var swiftClassName: String {return "ProtobufUnittest_TestUnpackedExtensions"}
  public var protoMessageName: String {return "TestUnpackedExtensions"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [:]}
  public var protoFieldNames: [String: Int] {return [:]}

  var unknown = ProtobufUnknownStorage()

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    var handled = false
    if (1 <= protoFieldNumber && protoFieldNumber < 536870912) {
      handled = try setter.decodeExtensionField(values: &extensionFieldValues, messageType: ProtobufUnittest_TestUnpackedExtensions.self, protoFieldNumber: protoFieldNumber)
    } else {
      handled = false
    }
    if handled {
        return true
    } else {
        return try unknown.decodeField(setter: &setter)
    }
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try extensionFieldValues.traverse(visitor: &visitor, start: 1, end: 536870912)
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestUnpackedExtensions) -> Bool {
    if unknown != other.unknown {return false}
    if extensionFieldValues != other.extensionFieldValues {return false}
    return true
  }

  private var extensionFieldValues = ProtobufExtensionFieldValueSet()

  public mutating func setExtensionValue<F: ProtobufExtensionField>(ext: ProtobufGenericMessageExtension<F, ProtobufUnittest_TestUnpackedExtensions>, value: F.ValueType) {
    extensionFieldValues[ext.protoFieldNumber] = ext.set(value: value)
  }

  public mutating func clearExtensionValue<F: ProtobufExtensionField>(ext: ProtobufGenericMessageExtension<F, ProtobufUnittest_TestUnpackedExtensions>) {
    extensionFieldValues[ext.protoFieldNumber] = nil
  }

  public func getExtensionValue<F: ProtobufExtensionField>(ext: ProtobufGenericMessageExtension<F, ProtobufUnittest_TestUnpackedExtensions>) -> F.ValueType {
    if let fieldValue = extensionFieldValues[ext.protoFieldNumber] as? F {
      return fieldValue.value
    }
    return ext.defaultValue
  }

  public func hasExtensionValue<F: ProtobufExtensionField>(ext: ProtobufGenericMessageExtension<F, ProtobufUnittest_TestUnpackedExtensions>) -> Bool {
    return extensionFieldValues[ext.protoFieldNumber] is F
  }
}

///   Used by ExtensionSetTest/DynamicExtensions.  The test actually builds
///   a set of extensions to TestAllExtensions dynamically, based on the fields
///   of this message type.
public struct ProtobufUnittest_TestDynamicExtensions: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "ProtobufUnittest_TestDynamicExtensions"}
  public var protoMessageName: String {return "TestDynamicExtensions"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [
    "scalarExtension": 2000,
    "enumExtension": 2001,
    "dynamicEnumExtension": 2002,
    "messageExtension": 2003,
    "dynamicMessageExtension": 2004,
    "repeatedExtension": 2005,
    "packedExtension": 2006,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "scalar_extension": 2000,
    "enum_extension": 2001,
    "dynamic_enum_extension": 2002,
    "message_extension": 2003,
    "dynamic_message_extension": 2004,
    "repeated_extension": 2005,
    "packed_extension": 2006,
  ]}

  private class _StorageClass {
    typealias ProtobufExtendedMessage = ProtobufUnittest_TestDynamicExtensions
    var unknown = ProtobufUnknownStorage()
    var _scalarExtension: UInt32? = nil
    var _enumExtension: ProtobufUnittest_ForeignEnum? = nil
    var _dynamicEnumExtension: ProtobufUnittest_TestDynamicExtensions.DynamicEnumType? = nil
    var _messageExtension: ProtobufUnittest_ForeignMessage? = nil
    var _dynamicMessageExtension: ProtobufUnittest_TestDynamicExtensions.DynamicMessageType? = nil
    var _repeatedExtension: [String] = []
    var _packedExtension: [Int32] = []

    init() {}

    func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 2000: handled = try setter.decodeSingularField(fieldType: ProtobufFixed32.self, value: &_scalarExtension)
      case 2001: handled = try setter.decodeSingularField(fieldType: ProtobufUnittest_ForeignEnum.self, value: &_enumExtension)
      case 2002: handled = try setter.decodeSingularField(fieldType: ProtobufUnittest_TestDynamicExtensions.DynamicEnumType.self, value: &_dynamicEnumExtension)
      case 2003: handled = try setter.decodeSingularMessageField(fieldType: ProtobufUnittest_ForeignMessage.self, value: &_messageExtension)
      case 2004: handled = try setter.decodeSingularMessageField(fieldType: ProtobufUnittest_TestDynamicExtensions.DynamicMessageType.self, value: &_dynamicMessageExtension)
      case 2005: handled = try setter.decodeRepeatedField(fieldType: ProtobufString.self, value: &_repeatedExtension)
      case 2006: handled = try setter.decodePackedField(fieldType: ProtobufSInt32.self, value: &_packedExtension)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    func traverse(visitor: inout ProtobufVisitor) throws {
      if let v = _scalarExtension {
        try visitor.visitSingularField(fieldType: ProtobufFixed32.self, value: v, protoFieldNumber: 2000, protoFieldName: "scalar_extension", jsonFieldName: "scalarExtension", swiftFieldName: "scalarExtension")
      }
      if let v = _enumExtension {
        try visitor.visitSingularField(fieldType: ProtobufUnittest_ForeignEnum.self, value: v, protoFieldNumber: 2001, protoFieldName: "enum_extension", jsonFieldName: "enumExtension", swiftFieldName: "enumExtension")
      }
      if let v = _dynamicEnumExtension {
        try visitor.visitSingularField(fieldType: ProtobufUnittest_TestDynamicExtensions.DynamicEnumType.self, value: v, protoFieldNumber: 2002, protoFieldName: "dynamic_enum_extension", jsonFieldName: "dynamicEnumExtension", swiftFieldName: "dynamicEnumExtension")
      }
      if let v = _messageExtension {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 2003, protoFieldName: "message_extension", jsonFieldName: "messageExtension", swiftFieldName: "messageExtension")
      }
      if let v = _dynamicMessageExtension {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 2004, protoFieldName: "dynamic_message_extension", jsonFieldName: "dynamicMessageExtension", swiftFieldName: "dynamicMessageExtension")
      }
      if !_repeatedExtension.isEmpty {
        try visitor.visitRepeatedField(fieldType: ProtobufString.self, value: _repeatedExtension, protoFieldNumber: 2005, protoFieldName: "repeated_extension", jsonFieldName: "repeatedExtension", swiftFieldName: "repeatedExtension")
      }
      if !_packedExtension.isEmpty {
        try visitor.visitPackedField(fieldType: ProtobufSInt32.self, value: _packedExtension, protoFieldNumber: 2006, protoFieldName: "packed_extension", jsonFieldName: "packedExtension", swiftFieldName: "packedExtension")
      }
      unknown.traverse(visitor: &visitor)
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if (_scalarExtension != other._scalarExtension) {return false}
      if (_enumExtension != other._enumExtension) {return false}
      if (_dynamicEnumExtension != other._dynamicEnumExtension) {return false}
      if ((_messageExtension != nil || other._messageExtension != nil) && (_messageExtension == nil || other._messageExtension == nil || _messageExtension! != other._messageExtension!)) {return false}
      if ((_dynamicMessageExtension != nil || other._dynamicMessageExtension != nil) && (_dynamicMessageExtension == nil || other._dynamicMessageExtension == nil || _dynamicMessageExtension! != other._dynamicMessageExtension!)) {return false}
      if _repeatedExtension != other._repeatedExtension {return false}
      if _packedExtension != other._packedExtension {return false}
      if unknown != other.unknown {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone.unknown = unknown
      clone._scalarExtension = _scalarExtension
      clone._enumExtension = _enumExtension
      clone._dynamicEnumExtension = _dynamicEnumExtension
      clone._messageExtension = _messageExtension
      clone._dynamicMessageExtension = _dynamicMessageExtension
      clone._repeatedExtension = _repeatedExtension
      clone._packedExtension = _packedExtension
      return clone
    }
  }

  private var _storage = _StorageClass()

  public enum DynamicEnumType: ProtobufEnum {
    public typealias RawValue = Int
    case dynamicFoo // = 2200
    case dynamicBar // = 2201
    case dynamicBaz // = 2202

    public init() {
      self = .dynamicFoo
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 2200: self = .dynamicFoo
      case 2201: self = .dynamicBar
      case 2202: self = .dynamicBaz
      default: return nil
      }
    }

    public init?(name: String) {
      switch name {
      case "dynamicFoo": self = .dynamicFoo
      case "dynamicBar": self = .dynamicBar
      case "dynamicBaz": self = .dynamicBaz
      default: return nil
      }
    }

    public init?(jsonName: String) {
      switch jsonName {
      case "DYNAMIC_FOO": self = .dynamicFoo
      case "DYNAMIC_BAR": self = .dynamicBar
      case "DYNAMIC_BAZ": self = .dynamicBaz
      default: return nil
      }
    }

    public init?(protoName: String) {
      switch protoName {
      case "DYNAMIC_FOO": self = .dynamicFoo
      case "DYNAMIC_BAR": self = .dynamicBar
      case "DYNAMIC_BAZ": self = .dynamicBaz
      default: return nil
      }
    }

    public var rawValue: Int {
      get {
        switch self {
        case .dynamicFoo: return 2200
        case .dynamicBar: return 2201
        case .dynamicBaz: return 2202
        }
      }
    }

    public var json: String {
      get {
        switch self {
        case .dynamicFoo: return "\"DYNAMIC_FOO\""
        case .dynamicBar: return "\"DYNAMIC_BAR\""
        case .dynamicBaz: return "\"DYNAMIC_BAZ\""
        }
      }
    }

    public var hashValue: Int { return rawValue }

    public var debugDescription: String {
      get {
        switch self {
        case .dynamicFoo: return ".dynamicFoo"
        case .dynamicBar: return ".dynamicBar"
        case .dynamicBaz: return ".dynamicBaz"
        }
      }
    }

  }

  public struct DynamicMessageType: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "ProtobufUnittest_TestDynamicExtensions.DynamicMessageType"}
    public var protoMessageName: String {return "DynamicMessageType"}
    public var protoPackageName: String {return "protobuf_unittest"}
    public var jsonFieldNames: [String: Int] {return [
      "dynamicField": 2100,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "dynamic_field": 2100,
    ]}

    var unknown = ProtobufUnknownStorage()

    private var _dynamicField: Int32? = nil
    public var dynamicField: Int32 {
      get {return _dynamicField ?? 0}
      set {_dynamicField = newValue}
    }
    public var hasDynamicField: Bool {
      return _dynamicField != nil
    }
    public mutating func clearDynamicField() {
      return _dynamicField = nil
    }

    public init() {}

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 2100: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_dynamicField)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if let v = _dynamicField {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: v, protoFieldNumber: 2100, protoFieldName: "dynamic_field", jsonFieldName: "dynamicField", swiftFieldName: "dynamicField")
      }
      unknown.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestDynamicExtensions.DynamicMessageType) -> Bool {
      if (dynamicField != other.dynamicField) {return false}
      if unknown != other.unknown {return false}
      return true
    }
  }

  public var scalarExtension: UInt32 {
    get {return _storage._scalarExtension ?? 0}
    set {_uniqueStorage()._scalarExtension = newValue}
  }
  public var hasScalarExtension: Bool {
    return _storage._scalarExtension != nil
  }
  public mutating func clearScalarExtension() {
    return _storage._scalarExtension = nil
  }

  public var enumExtension: ProtobufUnittest_ForeignEnum {
    get {return _storage._enumExtension ?? ProtobufUnittest_ForeignEnum.foreignFoo}
    set {_uniqueStorage()._enumExtension = newValue}
  }
  public var hasEnumExtension: Bool {
    return _storage._enumExtension != nil
  }
  public mutating func clearEnumExtension() {
    return _storage._enumExtension = nil
  }

  public var dynamicEnumExtension: ProtobufUnittest_TestDynamicExtensions.DynamicEnumType {
    get {return _storage._dynamicEnumExtension ?? ProtobufUnittest_TestDynamicExtensions.DynamicEnumType.dynamicFoo}
    set {_uniqueStorage()._dynamicEnumExtension = newValue}
  }
  public var hasDynamicEnumExtension: Bool {
    return _storage._dynamicEnumExtension != nil
  }
  public mutating func clearDynamicEnumExtension() {
    return _storage._dynamicEnumExtension = nil
  }

  public var messageExtension: ProtobufUnittest_ForeignMessage {
    get {return _storage._messageExtension ?? ProtobufUnittest_ForeignMessage()}
    set {_uniqueStorage()._messageExtension = newValue}
  }
  public var hasMessageExtension: Bool {
    return _storage._messageExtension != nil
  }
  public mutating func clearMessageExtension() {
    return _storage._messageExtension = nil
  }

  public var dynamicMessageExtension: ProtobufUnittest_TestDynamicExtensions.DynamicMessageType {
    get {return _storage._dynamicMessageExtension ?? ProtobufUnittest_TestDynamicExtensions.DynamicMessageType()}
    set {_uniqueStorage()._dynamicMessageExtension = newValue}
  }
  public var hasDynamicMessageExtension: Bool {
    return _storage._dynamicMessageExtension != nil
  }
  public mutating func clearDynamicMessageExtension() {
    return _storage._dynamicMessageExtension = nil
  }

  public var repeatedExtension: [String] {
    get {return _storage._repeatedExtension}
    set {_uniqueStorage()._repeatedExtension = newValue}
  }

  public var packedExtension: [Int32] {
    get {return _storage._packedExtension}
    set {_uniqueStorage()._packedExtension = newValue}
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestDynamicExtensions) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

public struct ProtobufUnittest_TestRepeatedScalarDifferentTagSizes: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "ProtobufUnittest_TestRepeatedScalarDifferentTagSizes"}
  public var protoMessageName: String {return "TestRepeatedScalarDifferentTagSizes"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [
    "repeatedFixed32": 12,
    "repeatedInt32": 13,
    "repeatedFixed64": 2046,
    "repeatedInt64": 2047,
    "repeatedFloat": 262142,
    "repeatedUint64": 262143,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "repeated_fixed32": 12,
    "repeated_int32": 13,
    "repeated_fixed64": 2046,
    "repeated_int64": 2047,
    "repeated_float": 262142,
    "repeated_uint64": 262143,
  ]}

  var unknown = ProtobufUnknownStorage()

  ///   Parsing repeated fixed size values used to fail. This message needs to be
  ///   used in order to get a tag of the right size; all of the repeated fields
  ///   in TestAllTypes didn't trigger the check.
  public var repeatedFixed32: [UInt32] = []

  ///   Check for a varint type, just for good measure.
  public var repeatedInt32: [Int32] = []

  ///   These have two-byte tags.
  public var repeatedFixed64: [UInt64] = []

  public var repeatedInt64: [Int64] = []

  ///   Three byte tags.
  public var repeatedFloat: [Float] = []

  public var repeatedUint64: [UInt64] = []

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 12: handled = try setter.decodeRepeatedField(fieldType: ProtobufFixed32.self, value: &repeatedFixed32)
    case 13: handled = try setter.decodeRepeatedField(fieldType: ProtobufInt32.self, value: &repeatedInt32)
    case 2046: handled = try setter.decodeRepeatedField(fieldType: ProtobufFixed64.self, value: &repeatedFixed64)
    case 2047: handled = try setter.decodeRepeatedField(fieldType: ProtobufInt64.self, value: &repeatedInt64)
    case 262142: handled = try setter.decodeRepeatedField(fieldType: ProtobufFloat.self, value: &repeatedFloat)
    case 262143: handled = try setter.decodeRepeatedField(fieldType: ProtobufUInt64.self, value: &repeatedUint64)
    default:
      handled = false
    }
    if handled {
        return true
    } else {
        return try unknown.decodeField(setter: &setter)
    }
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    if !repeatedFixed32.isEmpty {
      try visitor.visitRepeatedField(fieldType: ProtobufFixed32.self, value: repeatedFixed32, protoFieldNumber: 12, protoFieldName: "repeated_fixed32", jsonFieldName: "repeatedFixed32", swiftFieldName: "repeatedFixed32")
    }
    if !repeatedInt32.isEmpty {
      try visitor.visitRepeatedField(fieldType: ProtobufInt32.self, value: repeatedInt32, protoFieldNumber: 13, protoFieldName: "repeated_int32", jsonFieldName: "repeatedInt32", swiftFieldName: "repeatedInt32")
    }
    if !repeatedFixed64.isEmpty {
      try visitor.visitRepeatedField(fieldType: ProtobufFixed64.self, value: repeatedFixed64, protoFieldNumber: 2046, protoFieldName: "repeated_fixed64", jsonFieldName: "repeatedFixed64", swiftFieldName: "repeatedFixed64")
    }
    if !repeatedInt64.isEmpty {
      try visitor.visitRepeatedField(fieldType: ProtobufInt64.self, value: repeatedInt64, protoFieldNumber: 2047, protoFieldName: "repeated_int64", jsonFieldName: "repeatedInt64", swiftFieldName: "repeatedInt64")
    }
    if !repeatedFloat.isEmpty {
      try visitor.visitRepeatedField(fieldType: ProtobufFloat.self, value: repeatedFloat, protoFieldNumber: 262142, protoFieldName: "repeated_float", jsonFieldName: "repeatedFloat", swiftFieldName: "repeatedFloat")
    }
    if !repeatedUint64.isEmpty {
      try visitor.visitRepeatedField(fieldType: ProtobufUInt64.self, value: repeatedUint64, protoFieldNumber: 262143, protoFieldName: "repeated_uint64", jsonFieldName: "repeatedUint64", swiftFieldName: "repeatedUint64")
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestRepeatedScalarDifferentTagSizes) -> Bool {
    if repeatedFixed32 != other.repeatedFixed32 {return false}
    if repeatedInt32 != other.repeatedInt32 {return false}
    if repeatedFixed64 != other.repeatedFixed64 {return false}
    if repeatedInt64 != other.repeatedInt64 {return false}
    if repeatedFloat != other.repeatedFloat {return false}
    if repeatedUint64 != other.repeatedUint64 {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

///   Test that if an optional or required message/group field appears multiple
///   times in the input, they need to be merged.
public struct ProtobufUnittest_TestParsingMerge: ProtobufGeneratedMessage, ProtobufExtensibleMessage {
  public var swiftClassName: String {return "ProtobufUnittest_TestParsingMerge"}
  public var protoMessageName: String {return "TestParsingMerge"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [
    "requiredAllTypes": 1,
    "optionalAllTypes": 2,
    "repeatedAllTypes": 3,
    "optionalgroup": 10,
    "repeatedgroup": 20,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "required_all_types": 1,
    "optional_all_types": 2,
    "repeated_all_types": 3,
    "optionalgroup": 10,
    "repeatedgroup": 20,
  ]}

  private class _StorageClass: ProtobufExtensibleMessageStorage {
    typealias ProtobufExtendedMessage = ProtobufUnittest_TestParsingMerge
    var extensionFieldValues = ProtobufExtensionFieldValueSet()
    var unknown = ProtobufUnknownStorage()
    var _requiredAllTypes: ProtobufUnittest_TestAllTypes? = nil
    var _optionalAllTypes: ProtobufUnittest_TestAllTypes? = nil
    var _repeatedAllTypes: [ProtobufUnittest_TestAllTypes] = []
    var _optionalGroup: ProtobufUnittest_TestParsingMerge.OptionalGroup? = nil
    var _repeatedGroup: [ProtobufUnittest_TestParsingMerge.RepeatedGroup] = []

    init() {}

    func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularMessageField(fieldType: ProtobufUnittest_TestAllTypes.self, value: &_requiredAllTypes)
      case 2: handled = try setter.decodeSingularMessageField(fieldType: ProtobufUnittest_TestAllTypes.self, value: &_optionalAllTypes)
      case 3: handled = try setter.decodeRepeatedMessageField(fieldType: ProtobufUnittest_TestAllTypes.self, value: &_repeatedAllTypes)
      case 10: handled = try setter.decodeSingularGroupField(fieldType: ProtobufUnittest_TestParsingMerge.OptionalGroup.self, value: &_optionalGroup)
      case 20: handled = try setter.decodeRepeatedGroupField(fieldType: ProtobufUnittest_TestParsingMerge.RepeatedGroup.self, value: &_repeatedGroup)
      default:
        if (1000 <= protoFieldNumber && protoFieldNumber < 536870912) {
          handled = try setter.decodeExtensionField(values: &extensionFieldValues, messageType: ProtobufUnittest_TestParsingMerge.self, protoFieldNumber: protoFieldNumber)
        } else {
          handled = false
        }
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    func traverse(visitor: inout ProtobufVisitor) throws {
      if let v = _requiredAllTypes {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 1, protoFieldName: "required_all_types", jsonFieldName: "requiredAllTypes", swiftFieldName: "requiredAllTypes")
      }
      if let v = _optionalAllTypes {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 2, protoFieldName: "optional_all_types", jsonFieldName: "optionalAllTypes", swiftFieldName: "optionalAllTypes")
      }
      if !_repeatedAllTypes.isEmpty {
        try visitor.visitRepeatedMessageField(value: _repeatedAllTypes, protoFieldNumber: 3, protoFieldName: "repeated_all_types", jsonFieldName: "repeatedAllTypes", swiftFieldName: "repeatedAllTypes")
      }
      if let v = _optionalGroup {
        try visitor.visitSingularGroupField(value: v, protoFieldNumber: 10, protoFieldName: "optionalgroup", jsonFieldName: "optionalgroup", swiftFieldName: "optionalGroup")
      }
      if !_repeatedGroup.isEmpty {
        try visitor.visitRepeatedGroupField(value: _repeatedGroup, protoFieldNumber: 20, protoFieldName: "repeatedgroup", jsonFieldName: "repeatedgroup", swiftFieldName: "repeatedGroup")
      }
      try extensionFieldValues.traverse(visitor: &visitor, start: 1000, end: 536870912)
      unknown.traverse(visitor: &visitor)
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if ((_requiredAllTypes != nil || other._requiredAllTypes != nil) && (_requiredAllTypes == nil || other._requiredAllTypes == nil || _requiredAllTypes! != other._requiredAllTypes!)) {return false}
      if ((_optionalAllTypes != nil || other._optionalAllTypes != nil) && (_optionalAllTypes == nil || other._optionalAllTypes == nil || _optionalAllTypes! != other._optionalAllTypes!)) {return false}
      if _repeatedAllTypes != other._repeatedAllTypes {return false}
      if ((_optionalGroup != nil || other._optionalGroup != nil) && (_optionalGroup == nil || other._optionalGroup == nil || _optionalGroup! != other._optionalGroup!)) {return false}
      if _repeatedGroup != other._repeatedGroup {return false}
      if unknown != other.unknown {return false}
      if extensionFieldValues != other.extensionFieldValues {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone.unknown = unknown
      clone.extensionFieldValues = extensionFieldValues
      clone._requiredAllTypes = _requiredAllTypes
      clone._optionalAllTypes = _optionalAllTypes
      clone._repeatedAllTypes = _repeatedAllTypes
      clone._optionalGroup = _optionalGroup
      clone._repeatedGroup = _repeatedGroup
      return clone
    }
  }

  private var _storage = _StorageClass()

  ///   RepeatedFieldsGenerator defines matching field types as TestParsingMerge,
  ///   except that all fields are repeated. In the tests, we will serialize the
  ///   RepeatedFieldsGenerator to bytes, and parse the bytes to TestParsingMerge.
  ///   Repeated fields in RepeatedFieldsGenerator are expected to be merged into
  ///   the corresponding required/optional fields in TestParsingMerge.
  public struct RepeatedFieldsGenerator: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "ProtobufUnittest_TestParsingMerge.RepeatedFieldsGenerator"}
    public var protoMessageName: String {return "RepeatedFieldsGenerator"}
    public var protoPackageName: String {return "protobuf_unittest"}
    public var jsonFieldNames: [String: Int] {return [
      "field1": 1,
      "field2": 2,
      "field3": 3,
      "group1": 10,
      "group2": 20,
      "ext1": 1000,
      "ext2": 1001,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "field1": 1,
      "field2": 2,
      "field3": 3,
      "group1": 10,
      "group2": 20,
      "ext1": 1000,
      "ext2": 1001,
    ]}

    var unknown = ProtobufUnknownStorage()

    public struct Group1: ProtobufGeneratedMessage {
      public var swiftClassName: String {return "ProtobufUnittest_TestParsingMerge.RepeatedFieldsGenerator.Group1"}
      public var protoMessageName: String {return "Group1"}
      public var protoPackageName: String {return "protobuf_unittest"}
      public var jsonFieldNames: [String: Int] {return [
        "field1": 11,
      ]}
      public var protoFieldNames: [String: Int] {return [
        "field1": 11,
      ]}

      private class _StorageClass {
        typealias ProtobufExtendedMessage = ProtobufUnittest_TestParsingMerge.RepeatedFieldsGenerator.Group1
        var unknown = ProtobufUnknownStorage()
        var _field1: ProtobufUnittest_TestAllTypes? = nil

        init() {}

        func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
          let handled: Bool
          switch protoFieldNumber {
          case 11: handled = try setter.decodeSingularMessageField(fieldType: ProtobufUnittest_TestAllTypes.self, value: &_field1)
          default:
            handled = false
          }
          if handled {
              return true
          } else {
              return try unknown.decodeField(setter: &setter)
          }
        }

        func traverse(visitor: inout ProtobufVisitor) throws {
          if let v = _field1 {
            try visitor.visitSingularMessageField(value: v, protoFieldNumber: 11, protoFieldName: "field1", jsonFieldName: "field1", swiftFieldName: "field1")
          }
          unknown.traverse(visitor: &visitor)
        }

        func isEqualTo(other: _StorageClass) -> Bool {
          if ((_field1 != nil || other._field1 != nil) && (_field1 == nil || other._field1 == nil || _field1! != other._field1!)) {return false}
          if unknown != other.unknown {return false}
          return true
        }

        func copy() -> _StorageClass {
          let clone = _StorageClass()
          clone.unknown = unknown
          clone._field1 = _field1
          return clone
        }
      }

      private var _storage = _StorageClass()

      public var field1: ProtobufUnittest_TestAllTypes {
        get {return _storage._field1 ?? ProtobufUnittest_TestAllTypes()}
        set {_uniqueStorage()._field1 = newValue}
      }
      public var hasField1: Bool {
        return _storage._field1 != nil
      }
      public mutating func clearField1() {
        return _storage._field1 = nil
      }

      public init() {}

      public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
        return try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
      }

      public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
        try _storage.traverse(visitor: &visitor)
      }

      public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestParsingMerge.RepeatedFieldsGenerator.Group1) -> Bool {
        return _storage === other._storage || _storage.isEqualTo(other: other._storage)
      }

      private mutating func _uniqueStorage() -> _StorageClass {
        if !isKnownUniquelyReferenced(&_storage) {
          _storage = _storage.copy()
        }
        return _storage
      }
    }

    public struct Group2: ProtobufGeneratedMessage {
      public var swiftClassName: String {return "ProtobufUnittest_TestParsingMerge.RepeatedFieldsGenerator.Group2"}
      public var protoMessageName: String {return "Group2"}
      public var protoPackageName: String {return "protobuf_unittest"}
      public var jsonFieldNames: [String: Int] {return [
        "field1": 21,
      ]}
      public var protoFieldNames: [String: Int] {return [
        "field1": 21,
      ]}

      private class _StorageClass {
        typealias ProtobufExtendedMessage = ProtobufUnittest_TestParsingMerge.RepeatedFieldsGenerator.Group2
        var unknown = ProtobufUnknownStorage()
        var _field1: ProtobufUnittest_TestAllTypes? = nil

        init() {}

        func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
          let handled: Bool
          switch protoFieldNumber {
          case 21: handled = try setter.decodeSingularMessageField(fieldType: ProtobufUnittest_TestAllTypes.self, value: &_field1)
          default:
            handled = false
          }
          if handled {
              return true
          } else {
              return try unknown.decodeField(setter: &setter)
          }
        }

        func traverse(visitor: inout ProtobufVisitor) throws {
          if let v = _field1 {
            try visitor.visitSingularMessageField(value: v, protoFieldNumber: 21, protoFieldName: "field1", jsonFieldName: "field1", swiftFieldName: "field1")
          }
          unknown.traverse(visitor: &visitor)
        }

        func isEqualTo(other: _StorageClass) -> Bool {
          if ((_field1 != nil || other._field1 != nil) && (_field1 == nil || other._field1 == nil || _field1! != other._field1!)) {return false}
          if unknown != other.unknown {return false}
          return true
        }

        func copy() -> _StorageClass {
          let clone = _StorageClass()
          clone.unknown = unknown
          clone._field1 = _field1
          return clone
        }
      }

      private var _storage = _StorageClass()

      public var field1: ProtobufUnittest_TestAllTypes {
        get {return _storage._field1 ?? ProtobufUnittest_TestAllTypes()}
        set {_uniqueStorage()._field1 = newValue}
      }
      public var hasField1: Bool {
        return _storage._field1 != nil
      }
      public mutating func clearField1() {
        return _storage._field1 = nil
      }

      public init() {}

      public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
        return try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
      }

      public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
        try _storage.traverse(visitor: &visitor)
      }

      public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestParsingMerge.RepeatedFieldsGenerator.Group2) -> Bool {
        return _storage === other._storage || _storage.isEqualTo(other: other._storage)
      }

      private mutating func _uniqueStorage() -> _StorageClass {
        if !isKnownUniquelyReferenced(&_storage) {
          _storage = _storage.copy()
        }
        return _storage
      }
    }

    public var field1: [ProtobufUnittest_TestAllTypes] = []

    public var field2: [ProtobufUnittest_TestAllTypes] = []

    public var field3: [ProtobufUnittest_TestAllTypes] = []

    public var group1: [ProtobufUnittest_TestParsingMerge.RepeatedFieldsGenerator.Group1] = []

    public var group2: [ProtobufUnittest_TestParsingMerge.RepeatedFieldsGenerator.Group2] = []

    public var ext1: [ProtobufUnittest_TestAllTypes] = []

    public var ext2: [ProtobufUnittest_TestAllTypes] = []

    public init() {}

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeRepeatedMessageField(fieldType: ProtobufUnittest_TestAllTypes.self, value: &field1)
      case 2: handled = try setter.decodeRepeatedMessageField(fieldType: ProtobufUnittest_TestAllTypes.self, value: &field2)
      case 3: handled = try setter.decodeRepeatedMessageField(fieldType: ProtobufUnittest_TestAllTypes.self, value: &field3)
      case 10: handled = try setter.decodeRepeatedGroupField(fieldType: ProtobufUnittest_TestParsingMerge.RepeatedFieldsGenerator.Group1.self, value: &group1)
      case 20: handled = try setter.decodeRepeatedGroupField(fieldType: ProtobufUnittest_TestParsingMerge.RepeatedFieldsGenerator.Group2.self, value: &group2)
      case 1000: handled = try setter.decodeRepeatedMessageField(fieldType: ProtobufUnittest_TestAllTypes.self, value: &ext1)
      case 1001: handled = try setter.decodeRepeatedMessageField(fieldType: ProtobufUnittest_TestAllTypes.self, value: &ext2)
      default:
        handled = false
      }
      if handled {
          return true
      } else {
          return try unknown.decodeField(setter: &setter)
      }
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      if !field1.isEmpty {
        try visitor.visitRepeatedMessageField(value: field1, protoFieldNumber: 1, protoFieldName: "field1", jsonFieldName: "field1", swiftFieldName: "field1")
      }
      if !field2.isEmpty {
        try visitor.visitRepeatedMessageField(value: field2, protoFieldNumber: 2, protoFieldName: "field2", jsonFieldName: "field2", swiftFieldName: "field2")
      }
      if !field3.isEmpty {
        try visitor.visitRepeatedMessageField(value: field3, protoFieldNumber: 3, protoFieldName: "field3", jsonFieldName: "field3", swiftFieldName: "field3")
      }
      if !group1.isEmpty {
        try visitor.visitRepeatedGroupField(value: group1, protoFieldNumber: 10, protoFieldName: "group1", jsonFieldName: "group1", swiftFieldName: "group1")
      }
      if !group2.isEmpty {
        try visitor.visitRepeatedGroupField(value: group2, protoFieldNumber: 20, protoFieldName: "group2", jsonFieldName: "group2", swiftFieldName: "group2")
      }
      if !ext1.isEmpty {
        try visitor.visitRepeatedMessageField(value: ext1, protoFieldNumber: 1000, protoFieldName: "ext1", jsonFieldName: "ext1", swiftFieldName: "ext1")
      }
      if !ext2.isEmpty {
        try visitor.visitRepeatedMessageField(value: ext2, protoFieldNumber: 1001, protoFieldName: "ext2", jsonFieldName: "ext2", swiftFieldName: "ext2")
      }
      unknown.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestParsingMerge.RepeatedFieldsGenerator) -> Bool {
      if field1 != other.field1 {return false}
      if field2 != other.field2 {return false}
      if field3 != other.field3 {return false}
      if group1 != other.group1 {return false}
      if group2 != other.group2 {return false}
      if ext1 != other.ext1 {return false}
      if ext2 != other.ext2 {return false}
      if unknown != other.unknown {return false}
      return true
    }
  }

  public struct OptionalGroup: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "ProtobufUnittest_TestParsingMerge.OptionalGroup"}
    public var protoMessageName: String {return "OptionalGroup"}
    public var protoPackageName: String {return "protobuf_unittest"}
    public var jsonFieldNames: [String: Int] {return [
      "optionalGroupAllTypes": 11,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "optional_group_all_types": 11,
    ]}

    private class _StorageClass {
      typealias ProtobufExtendedMessage = ProtobufUnittest_TestParsingMerge.OptionalGroup
      var unknown = ProtobufUnknownStorage()
      var _optionalGroupAllTypes: ProtobufUnittest_TestAllTypes? = nil

      init() {}

      func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
        let handled: Bool
        switch protoFieldNumber {
        case 11: handled = try setter.decodeSingularMessageField(fieldType: ProtobufUnittest_TestAllTypes.self, value: &_optionalGroupAllTypes)
        default:
          handled = false
        }
        if handled {
            return true
        } else {
            return try unknown.decodeField(setter: &setter)
        }
      }

      func traverse(visitor: inout ProtobufVisitor) throws {
        if let v = _optionalGroupAllTypes {
          try visitor.visitSingularMessageField(value: v, protoFieldNumber: 11, protoFieldName: "optional_group_all_types", jsonFieldName: "optionalGroupAllTypes", swiftFieldName: "optionalGroupAllTypes")
        }
        unknown.traverse(visitor: &visitor)
      }

      func isEqualTo(other: _StorageClass) -> Bool {
        if ((_optionalGroupAllTypes != nil || other._optionalGroupAllTypes != nil) && (_optionalGroupAllTypes == nil || other._optionalGroupAllTypes == nil || _optionalGroupAllTypes! != other._optionalGroupAllTypes!)) {return false}
        if unknown != other.unknown {return false}
        return true
      }

      func copy() -> _StorageClass {
        let clone = _StorageClass()
        clone.unknown = unknown
        clone._optionalGroupAllTypes = _optionalGroupAllTypes
        return clone
      }
    }

    private var _storage = _StorageClass()

    public var optionalGroupAllTypes: ProtobufUnittest_TestAllTypes {
      get {return _storage._optionalGroupAllTypes ?? ProtobufUnittest_TestAllTypes()}
      set {_uniqueStorage()._optionalGroupAllTypes = newValue}
    }
    public var hasOptionalGroupAllTypes: Bool {
      return _storage._optionalGroupAllTypes != nil
    }
    public mutating func clearOptionalGroupAllTypes() {
      return _storage._optionalGroupAllTypes = nil
    }

    public init() {}

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      return try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      try _storage.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestParsingMerge.OptionalGroup) -> Bool {
      return _storage === other._storage || _storage.isEqualTo(other: other._storage)
    }

    private mutating func _uniqueStorage() -> _StorageClass {
      if !isKnownUniquelyReferenced(&_storage) {
        _storage = _storage.copy()
      }
      return _storage
    }
  }

  public struct RepeatedGroup: ProtobufGeneratedMessage {
    public var swiftClassName: String {return "ProtobufUnittest_TestParsingMerge.RepeatedGroup"}
    public var protoMessageName: String {return "RepeatedGroup"}
    public var protoPackageName: String {return "protobuf_unittest"}
    public var jsonFieldNames: [String: Int] {return [
      "repeatedGroupAllTypes": 21,
    ]}
    public var protoFieldNames: [String: Int] {return [
      "repeated_group_all_types": 21,
    ]}

    private class _StorageClass {
      typealias ProtobufExtendedMessage = ProtobufUnittest_TestParsingMerge.RepeatedGroup
      var unknown = ProtobufUnknownStorage()
      var _repeatedGroupAllTypes: ProtobufUnittest_TestAllTypes? = nil

      init() {}

      func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
        let handled: Bool
        switch protoFieldNumber {
        case 21: handled = try setter.decodeSingularMessageField(fieldType: ProtobufUnittest_TestAllTypes.self, value: &_repeatedGroupAllTypes)
        default:
          handled = false
        }
        if handled {
            return true
        } else {
            return try unknown.decodeField(setter: &setter)
        }
      }

      func traverse(visitor: inout ProtobufVisitor) throws {
        if let v = _repeatedGroupAllTypes {
          try visitor.visitSingularMessageField(value: v, protoFieldNumber: 21, protoFieldName: "repeated_group_all_types", jsonFieldName: "repeatedGroupAllTypes", swiftFieldName: "repeatedGroupAllTypes")
        }
        unknown.traverse(visitor: &visitor)
      }

      func isEqualTo(other: _StorageClass) -> Bool {
        if ((_repeatedGroupAllTypes != nil || other._repeatedGroupAllTypes != nil) && (_repeatedGroupAllTypes == nil || other._repeatedGroupAllTypes == nil || _repeatedGroupAllTypes! != other._repeatedGroupAllTypes!)) {return false}
        if unknown != other.unknown {return false}
        return true
      }

      func copy() -> _StorageClass {
        let clone = _StorageClass()
        clone.unknown = unknown
        clone._repeatedGroupAllTypes = _repeatedGroupAllTypes
        return clone
      }
    }

    private var _storage = _StorageClass()

    public var repeatedGroupAllTypes: ProtobufUnittest_TestAllTypes {
      get {return _storage._repeatedGroupAllTypes ?? ProtobufUnittest_TestAllTypes()}
      set {_uniqueStorage()._repeatedGroupAllTypes = newValue}
    }
    public var hasRepeatedGroupAllTypes: Bool {
      return _storage._repeatedGroupAllTypes != nil
    }
    public mutating func clearRepeatedGroupAllTypes() {
      return _storage._repeatedGroupAllTypes = nil
    }

    public init() {}

    public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      return try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
    }

    public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
      try _storage.traverse(visitor: &visitor)
    }

    public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestParsingMerge.RepeatedGroup) -> Bool {
      return _storage === other._storage || _storage.isEqualTo(other: other._storage)
    }

    private mutating func _uniqueStorage() -> _StorageClass {
      if !isKnownUniquelyReferenced(&_storage) {
        _storage = _storage.copy()
      }
      return _storage
    }
  }

  struct Extensions {

    static let ProtobufUnittest_TestParsingMerge_optionalExt = ProtobufGenericMessageExtension<ProtobufOptionalMessageField<ProtobufUnittest_TestAllTypes>, ProtobufUnittest_TestParsingMerge>(protoFieldNumber: 1000, protoFieldName: "optional_ext", jsonFieldName: "optionalExt", swiftFieldName: "ProtobufUnittest_TestParsingMerge_optionalExt", defaultValue: ProtobufUnittest_TestAllTypes())

    static let ProtobufUnittest_TestParsingMerge_repeatedExt = ProtobufGenericMessageExtension<ProtobufRepeatedMessageField<ProtobufUnittest_TestAllTypes>, ProtobufUnittest_TestParsingMerge>(protoFieldNumber: 1001, protoFieldName: "repeated_ext", jsonFieldName: "repeatedExt", swiftFieldName: "ProtobufUnittest_TestParsingMerge_repeatedExt", defaultValue: [])
  }

  public var requiredAllTypes: ProtobufUnittest_TestAllTypes {
    get {return _storage._requiredAllTypes ?? ProtobufUnittest_TestAllTypes()}
    set {_uniqueStorage()._requiredAllTypes = newValue}
  }
  public var hasRequiredAllTypes: Bool {
    return _storage._requiredAllTypes != nil
  }
  public mutating func clearRequiredAllTypes() {
    return _storage._requiredAllTypes = nil
  }

  public var optionalAllTypes: ProtobufUnittest_TestAllTypes {
    get {return _storage._optionalAllTypes ?? ProtobufUnittest_TestAllTypes()}
    set {_uniqueStorage()._optionalAllTypes = newValue}
  }
  public var hasOptionalAllTypes: Bool {
    return _storage._optionalAllTypes != nil
  }
  public mutating func clearOptionalAllTypes() {
    return _storage._optionalAllTypes = nil
  }

  public var repeatedAllTypes: [ProtobufUnittest_TestAllTypes] {
    get {return _storage._repeatedAllTypes}
    set {_uniqueStorage()._repeatedAllTypes = newValue}
  }

  public var optionalGroup: ProtobufUnittest_TestParsingMerge.OptionalGroup {
    get {return _storage._optionalGroup ?? ProtobufUnittest_TestParsingMerge.OptionalGroup()}
    set {_uniqueStorage()._optionalGroup = newValue}
  }
  public var hasOptionalGroup: Bool {
    return _storage._optionalGroup != nil
  }
  public mutating func clearOptionalGroup() {
    return _storage._optionalGroup = nil
  }

  public var repeatedGroup: [ProtobufUnittest_TestParsingMerge.RepeatedGroup] {
    get {return _storage._repeatedGroup}
    set {_uniqueStorage()._repeatedGroup = newValue}
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestParsingMerge) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }

  public mutating func setExtensionValue<F: ProtobufExtensionField>(ext: ProtobufGenericMessageExtension<F, ProtobufUnittest_TestParsingMerge>, value: F.ValueType) {
    return _uniqueStorage().setExtensionValue(ext: ext, value: value)
  }

  public mutating func clearExtensionValue<F: ProtobufExtensionField>(ext: ProtobufGenericMessageExtension<F, ProtobufUnittest_TestParsingMerge>) {
    return _storage.clearExtensionValue(ext: ext)
  }

  public func getExtensionValue<F: ProtobufExtensionField>(ext: ProtobufGenericMessageExtension<F, ProtobufUnittest_TestParsingMerge>) -> F.ValueType {
    return _storage.getExtensionValue(ext: ext)
  }

  public func hasExtensionValue<F: ProtobufExtensionField>(ext: ProtobufGenericMessageExtension<F, ProtobufUnittest_TestParsingMerge>) -> Bool {
    return _storage.hasExtensionValue(ext: ext)
  }
}

public struct ProtobufUnittest_TestCommentInjectionMessage: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "ProtobufUnittest_TestCommentInjectionMessage"}
  public var protoMessageName: String {return "TestCommentInjectionMessage"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [
    "a": 1,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "a": 1,
  ]}

  var unknown = ProtobufUnknownStorage()

  ///   */ <- This should not close the generated doc comment
  private var _a: String? = nil
  public var a: String {
    get {return _a ?? "*/ <- Neither should this."}
    set {_a = newValue}
  }
  public var hasA: Bool {
    return _a != nil
  }
  public mutating func clearA() {
    return _a = nil
  }

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &_a)
    default:
      handled = false
    }
    if handled {
        return true
    } else {
        return try unknown.decodeField(setter: &setter)
    }
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    if let v = _a {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: v, protoFieldNumber: 1, protoFieldName: "a", jsonFieldName: "a", swiftFieldName: "a")
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_TestCommentInjectionMessage) -> Bool {
    if (((_a != nil && _a! != "*/ <- Neither should this.") || (other._a != nil && other._a! != "*/ <- Neither should this.")) && (_a == nil || other._a == nil || _a! != other._a!)) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

///   Test that RPC services work.
public struct ProtobufUnittest_FooRequest: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "ProtobufUnittest_FooRequest"}
  public var protoMessageName: String {return "FooRequest"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [:]}
  public var protoFieldNames: [String: Int] {return [:]}

  var unknown = ProtobufUnknownStorage()

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try unknown.decodeField(setter: &setter)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_FooRequest) -> Bool {
    if unknown != other.unknown {return false}
    return true
  }
}

public struct ProtobufUnittest_FooResponse: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "ProtobufUnittest_FooResponse"}
  public var protoMessageName: String {return "FooResponse"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [:]}
  public var protoFieldNames: [String: Int] {return [:]}

  var unknown = ProtobufUnknownStorage()

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try unknown.decodeField(setter: &setter)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_FooResponse) -> Bool {
    if unknown != other.unknown {return false}
    return true
  }
}

public struct ProtobufUnittest_FooClientMessage: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "ProtobufUnittest_FooClientMessage"}
  public var protoMessageName: String {return "FooClientMessage"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [:]}
  public var protoFieldNames: [String: Int] {return [:]}

  var unknown = ProtobufUnknownStorage()

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try unknown.decodeField(setter: &setter)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_FooClientMessage) -> Bool {
    if unknown != other.unknown {return false}
    return true
  }
}

public struct ProtobufUnittest_FooServerMessage: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "ProtobufUnittest_FooServerMessage"}
  public var protoMessageName: String {return "FooServerMessage"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [:]}
  public var protoFieldNames: [String: Int] {return [:]}

  var unknown = ProtobufUnknownStorage()

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try unknown.decodeField(setter: &setter)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_FooServerMessage) -> Bool {
    if unknown != other.unknown {return false}
    return true
  }
}

public struct ProtobufUnittest_BarRequest: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "ProtobufUnittest_BarRequest"}
  public var protoMessageName: String {return "BarRequest"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [:]}
  public var protoFieldNames: [String: Int] {return [:]}

  var unknown = ProtobufUnknownStorage()

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try unknown.decodeField(setter: &setter)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_BarRequest) -> Bool {
    if unknown != other.unknown {return false}
    return true
  }
}

public struct ProtobufUnittest_BarResponse: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "ProtobufUnittest_BarResponse"}
  public var protoMessageName: String {return "BarResponse"}
  public var protoPackageName: String {return "protobuf_unittest"}
  public var jsonFieldNames: [String: Int] {return [:]}
  public var protoFieldNames: [String: Int] {return [:]}

  var unknown = ProtobufUnknownStorage()

  public init() {}

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try unknown.decodeField(setter: &setter)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtobufUnittest_BarResponse) -> Bool {
    if unknown != other.unknown {return false}
    return true
  }
}

///   Singular
let ProtobufUnittest_TestAllExtensions_optionalInt32Extension = ProtobufGenericMessageExtension<ProtobufOptionalField<ProtobufInt32>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 1, protoFieldName: "optional_int32_extension", jsonFieldName: "optionalInt32Extension", swiftFieldName: "optionalInt32Extension", defaultValue: 0)

let ProtobufUnittest_TestAllExtensions_optionalInt64Extension = ProtobufGenericMessageExtension<ProtobufOptionalField<ProtobufInt64>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 2, protoFieldName: "optional_int64_extension", jsonFieldName: "optionalInt64Extension", swiftFieldName: "optionalInt64Extension", defaultValue: 0)

let ProtobufUnittest_TestAllExtensions_optionalUint32Extension = ProtobufGenericMessageExtension<ProtobufOptionalField<ProtobufUInt32>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 3, protoFieldName: "optional_uint32_extension", jsonFieldName: "optionalUint32Extension", swiftFieldName: "optionalUint32Extension", defaultValue: 0)

let ProtobufUnittest_TestAllExtensions_optionalUint64Extension = ProtobufGenericMessageExtension<ProtobufOptionalField<ProtobufUInt64>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 4, protoFieldName: "optional_uint64_extension", jsonFieldName: "optionalUint64Extension", swiftFieldName: "optionalUint64Extension", defaultValue: 0)

let ProtobufUnittest_TestAllExtensions_optionalSint32Extension = ProtobufGenericMessageExtension<ProtobufOptionalField<ProtobufSInt32>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 5, protoFieldName: "optional_sint32_extension", jsonFieldName: "optionalSint32Extension", swiftFieldName: "optionalSint32Extension", defaultValue: 0)

let ProtobufUnittest_TestAllExtensions_optionalSint64Extension = ProtobufGenericMessageExtension<ProtobufOptionalField<ProtobufSInt64>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 6, protoFieldName: "optional_sint64_extension", jsonFieldName: "optionalSint64Extension", swiftFieldName: "optionalSint64Extension", defaultValue: 0)

let ProtobufUnittest_TestAllExtensions_optionalFixed32Extension = ProtobufGenericMessageExtension<ProtobufOptionalField<ProtobufFixed32>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 7, protoFieldName: "optional_fixed32_extension", jsonFieldName: "optionalFixed32Extension", swiftFieldName: "optionalFixed32Extension", defaultValue: 0)

let ProtobufUnittest_TestAllExtensions_optionalFixed64Extension = ProtobufGenericMessageExtension<ProtobufOptionalField<ProtobufFixed64>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 8, protoFieldName: "optional_fixed64_extension", jsonFieldName: "optionalFixed64Extension", swiftFieldName: "optionalFixed64Extension", defaultValue: 0)

let ProtobufUnittest_TestAllExtensions_optionalSfixed32Extension = ProtobufGenericMessageExtension<ProtobufOptionalField<ProtobufSFixed32>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 9, protoFieldName: "optional_sfixed32_extension", jsonFieldName: "optionalSfixed32Extension", swiftFieldName: "optionalSfixed32Extension", defaultValue: 0)

let ProtobufUnittest_TestAllExtensions_optionalSfixed64Extension = ProtobufGenericMessageExtension<ProtobufOptionalField<ProtobufSFixed64>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 10, protoFieldName: "optional_sfixed64_extension", jsonFieldName: "optionalSfixed64Extension", swiftFieldName: "optionalSfixed64Extension", defaultValue: 0)

let ProtobufUnittest_TestAllExtensions_optionalFloatExtension = ProtobufGenericMessageExtension<ProtobufOptionalField<ProtobufFloat>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 11, protoFieldName: "optional_float_extension", jsonFieldName: "optionalFloatExtension", swiftFieldName: "optionalFloatExtension", defaultValue: 0)

let ProtobufUnittest_TestAllExtensions_optionalDoubleExtension = ProtobufGenericMessageExtension<ProtobufOptionalField<ProtobufDouble>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 12, protoFieldName: "optional_double_extension", jsonFieldName: "optionalDoubleExtension", swiftFieldName: "optionalDoubleExtension", defaultValue: 0)

let ProtobufUnittest_TestAllExtensions_optionalBoolExtension = ProtobufGenericMessageExtension<ProtobufOptionalField<ProtobufBool>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 13, protoFieldName: "optional_bool_extension", jsonFieldName: "optionalBoolExtension", swiftFieldName: "optionalBoolExtension", defaultValue: false)

let ProtobufUnittest_TestAllExtensions_optionalStringExtension = ProtobufGenericMessageExtension<ProtobufOptionalField<ProtobufString>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 14, protoFieldName: "optional_string_extension", jsonFieldName: "optionalStringExtension", swiftFieldName: "optionalStringExtension", defaultValue: "")

let ProtobufUnittest_TestAllExtensions_optionalBytesExtension = ProtobufGenericMessageExtension<ProtobufOptionalField<ProtobufBytes>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 15, protoFieldName: "optional_bytes_extension", jsonFieldName: "optionalBytesExtension", swiftFieldName: "optionalBytesExtension", defaultValue: Data())

let ProtobufUnittest_TestAllExtensions_optionalGroupExtension = ProtobufGenericMessageExtension<ProtobufOptionalGroupField<ProtobufUnittest_OptionalGroup_extension>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 16, protoFieldName: "optionalgroup_extension", jsonFieldName: "optionalgroupExtension", swiftFieldName: "optionalGroupExtension", defaultValue: ProtobufUnittest_OptionalGroup_extension())

let ProtobufUnittest_TestAllExtensions_optionalNestedMessageExtension = ProtobufGenericMessageExtension<ProtobufOptionalMessageField<ProtobufUnittest_TestAllTypes.NestedMessage>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 18, protoFieldName: "optional_nested_message_extension", jsonFieldName: "optionalNestedMessageExtension", swiftFieldName: "optionalNestedMessageExtension", defaultValue: ProtobufUnittest_TestAllTypes.NestedMessage())

let ProtobufUnittest_TestAllExtensions_optionalForeignMessageExtension = ProtobufGenericMessageExtension<ProtobufOptionalMessageField<ProtobufUnittest_ForeignMessage>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 19, protoFieldName: "optional_foreign_message_extension", jsonFieldName: "optionalForeignMessageExtension", swiftFieldName: "optionalForeignMessageExtension", defaultValue: ProtobufUnittest_ForeignMessage())

let ProtobufUnittest_TestAllExtensions_optionalImportMessageExtension = ProtobufGenericMessageExtension<ProtobufOptionalMessageField<ProtobufUnittestImport_ImportMessage>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 20, protoFieldName: "optional_import_message_extension", jsonFieldName: "optionalImportMessageExtension", swiftFieldName: "optionalImportMessageExtension", defaultValue: ProtobufUnittestImport_ImportMessage())

let ProtobufUnittest_TestAllExtensions_optionalNestedEnumExtension = ProtobufGenericMessageExtension<ProtobufOptionalField<ProtobufUnittest_TestAllTypes.NestedEnum>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 21, protoFieldName: "optional_nested_enum_extension", jsonFieldName: "optionalNestedEnumExtension", swiftFieldName: "optionalNestedEnumExtension", defaultValue: ProtobufUnittest_TestAllTypes.NestedEnum.foo)

let ProtobufUnittest_TestAllExtensions_optionalForeignEnumExtension = ProtobufGenericMessageExtension<ProtobufOptionalField<ProtobufUnittest_ForeignEnum>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 22, protoFieldName: "optional_foreign_enum_extension", jsonFieldName: "optionalForeignEnumExtension", swiftFieldName: "optionalForeignEnumExtension", defaultValue: ProtobufUnittest_ForeignEnum.foreignFoo)

let ProtobufUnittest_TestAllExtensions_optionalImportEnumExtension = ProtobufGenericMessageExtension<ProtobufOptionalField<ProtobufUnittestImport_ImportEnum>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 23, protoFieldName: "optional_import_enum_extension", jsonFieldName: "optionalImportEnumExtension", swiftFieldName: "optionalImportEnumExtension", defaultValue: ProtobufUnittestImport_ImportEnum.importFoo)

let ProtobufUnittest_TestAllExtensions_optionalStringPieceExtension = ProtobufGenericMessageExtension<ProtobufOptionalField<ProtobufString>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 24, protoFieldName: "optional_string_piece_extension", jsonFieldName: "optionalStringPieceExtension", swiftFieldName: "optionalStringPieceExtension", defaultValue: "")

let ProtobufUnittest_TestAllExtensions_optionalCordExtension = ProtobufGenericMessageExtension<ProtobufOptionalField<ProtobufString>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 25, protoFieldName: "optional_cord_extension", jsonFieldName: "optionalCordExtension", swiftFieldName: "optionalCordExtension", defaultValue: "")

let ProtobufUnittest_TestAllExtensions_optionalPublicImportMessageExtension = ProtobufGenericMessageExtension<ProtobufOptionalMessageField<ProtobufUnittestImport_PublicImportMessage>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 26, protoFieldName: "optional_public_import_message_extension", jsonFieldName: "optionalPublicImportMessageExtension", swiftFieldName: "optionalPublicImportMessageExtension", defaultValue: ProtobufUnittestImport_PublicImportMessage())

let ProtobufUnittest_TestAllExtensions_optionalLazyMessageExtension = ProtobufGenericMessageExtension<ProtobufOptionalMessageField<ProtobufUnittest_TestAllTypes.NestedMessage>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 27, protoFieldName: "optional_lazy_message_extension", jsonFieldName: "optionalLazyMessageExtension", swiftFieldName: "optionalLazyMessageExtension", defaultValue: ProtobufUnittest_TestAllTypes.NestedMessage())

///   Repeated
let ProtobufUnittest_TestAllExtensions_repeatedInt32Extension = ProtobufGenericMessageExtension<ProtobufRepeatedField<ProtobufInt32>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 31, protoFieldName: "repeated_int32_extension", jsonFieldName: "repeatedInt32Extension", swiftFieldName: "repeatedInt32Extension", defaultValue: [])

let ProtobufUnittest_TestAllExtensions_repeatedInt64Extension = ProtobufGenericMessageExtension<ProtobufRepeatedField<ProtobufInt64>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 32, protoFieldName: "repeated_int64_extension", jsonFieldName: "repeatedInt64Extension", swiftFieldName: "repeatedInt64Extension", defaultValue: [])

let ProtobufUnittest_TestAllExtensions_repeatedUint32Extension = ProtobufGenericMessageExtension<ProtobufRepeatedField<ProtobufUInt32>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 33, protoFieldName: "repeated_uint32_extension", jsonFieldName: "repeatedUint32Extension", swiftFieldName: "repeatedUint32Extension", defaultValue: [])

let ProtobufUnittest_TestAllExtensions_repeatedUint64Extension = ProtobufGenericMessageExtension<ProtobufRepeatedField<ProtobufUInt64>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 34, protoFieldName: "repeated_uint64_extension", jsonFieldName: "repeatedUint64Extension", swiftFieldName: "repeatedUint64Extension", defaultValue: [])

let ProtobufUnittest_TestAllExtensions_repeatedSint32Extension = ProtobufGenericMessageExtension<ProtobufRepeatedField<ProtobufSInt32>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 35, protoFieldName: "repeated_sint32_extension", jsonFieldName: "repeatedSint32Extension", swiftFieldName: "repeatedSint32Extension", defaultValue: [])

let ProtobufUnittest_TestAllExtensions_repeatedSint64Extension = ProtobufGenericMessageExtension<ProtobufRepeatedField<ProtobufSInt64>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 36, protoFieldName: "repeated_sint64_extension", jsonFieldName: "repeatedSint64Extension", swiftFieldName: "repeatedSint64Extension", defaultValue: [])

let ProtobufUnittest_TestAllExtensions_repeatedFixed32Extension = ProtobufGenericMessageExtension<ProtobufRepeatedField<ProtobufFixed32>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 37, protoFieldName: "repeated_fixed32_extension", jsonFieldName: "repeatedFixed32Extension", swiftFieldName: "repeatedFixed32Extension", defaultValue: [])

let ProtobufUnittest_TestAllExtensions_repeatedFixed64Extension = ProtobufGenericMessageExtension<ProtobufRepeatedField<ProtobufFixed64>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 38, protoFieldName: "repeated_fixed64_extension", jsonFieldName: "repeatedFixed64Extension", swiftFieldName: "repeatedFixed64Extension", defaultValue: [])

let ProtobufUnittest_TestAllExtensions_repeatedSfixed32Extension = ProtobufGenericMessageExtension<ProtobufRepeatedField<ProtobufSFixed32>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 39, protoFieldName: "repeated_sfixed32_extension", jsonFieldName: "repeatedSfixed32Extension", swiftFieldName: "repeatedSfixed32Extension", defaultValue: [])

let ProtobufUnittest_TestAllExtensions_repeatedSfixed64Extension = ProtobufGenericMessageExtension<ProtobufRepeatedField<ProtobufSFixed64>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 40, protoFieldName: "repeated_sfixed64_extension", jsonFieldName: "repeatedSfixed64Extension", swiftFieldName: "repeatedSfixed64Extension", defaultValue: [])

let ProtobufUnittest_TestAllExtensions_repeatedFloatExtension = ProtobufGenericMessageExtension<ProtobufRepeatedField<ProtobufFloat>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 41, protoFieldName: "repeated_float_extension", jsonFieldName: "repeatedFloatExtension", swiftFieldName: "repeatedFloatExtension", defaultValue: [])

let ProtobufUnittest_TestAllExtensions_repeatedDoubleExtension = ProtobufGenericMessageExtension<ProtobufRepeatedField<ProtobufDouble>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 42, protoFieldName: "repeated_double_extension", jsonFieldName: "repeatedDoubleExtension", swiftFieldName: "repeatedDoubleExtension", defaultValue: [])

let ProtobufUnittest_TestAllExtensions_repeatedBoolExtension = ProtobufGenericMessageExtension<ProtobufRepeatedField<ProtobufBool>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 43, protoFieldName: "repeated_bool_extension", jsonFieldName: "repeatedBoolExtension", swiftFieldName: "repeatedBoolExtension", defaultValue: [])

let ProtobufUnittest_TestAllExtensions_repeatedStringExtension = ProtobufGenericMessageExtension<ProtobufRepeatedField<ProtobufString>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 44, protoFieldName: "repeated_string_extension", jsonFieldName: "repeatedStringExtension", swiftFieldName: "repeatedStringExtension", defaultValue: [])

let ProtobufUnittest_TestAllExtensions_repeatedBytesExtension = ProtobufGenericMessageExtension<ProtobufRepeatedField<ProtobufBytes>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 45, protoFieldName: "repeated_bytes_extension", jsonFieldName: "repeatedBytesExtension", swiftFieldName: "repeatedBytesExtension", defaultValue: [])

let ProtobufUnittest_TestAllExtensions_repeatedGroupExtension = ProtobufGenericMessageExtension<ProtobufRepeatedGroupField<ProtobufUnittest_RepeatedGroup_extension>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 46, protoFieldName: "repeatedgroup_extension", jsonFieldName: "repeatedgroupExtension", swiftFieldName: "repeatedGroupExtension", defaultValue: [])

let ProtobufUnittest_TestAllExtensions_repeatedNestedMessageExtension = ProtobufGenericMessageExtension<ProtobufRepeatedMessageField<ProtobufUnittest_TestAllTypes.NestedMessage>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 48, protoFieldName: "repeated_nested_message_extension", jsonFieldName: "repeatedNestedMessageExtension", swiftFieldName: "repeatedNestedMessageExtension", defaultValue: [])

let ProtobufUnittest_TestAllExtensions_repeatedForeignMessageExtension = ProtobufGenericMessageExtension<ProtobufRepeatedMessageField<ProtobufUnittest_ForeignMessage>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 49, protoFieldName: "repeated_foreign_message_extension", jsonFieldName: "repeatedForeignMessageExtension", swiftFieldName: "repeatedForeignMessageExtension", defaultValue: [])

let ProtobufUnittest_TestAllExtensions_repeatedImportMessageExtension = ProtobufGenericMessageExtension<ProtobufRepeatedMessageField<ProtobufUnittestImport_ImportMessage>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 50, protoFieldName: "repeated_import_message_extension", jsonFieldName: "repeatedImportMessageExtension", swiftFieldName: "repeatedImportMessageExtension", defaultValue: [])

let ProtobufUnittest_TestAllExtensions_repeatedNestedEnumExtension = ProtobufGenericMessageExtension<ProtobufRepeatedField<ProtobufUnittest_TestAllTypes.NestedEnum>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 51, protoFieldName: "repeated_nested_enum_extension", jsonFieldName: "repeatedNestedEnumExtension", swiftFieldName: "repeatedNestedEnumExtension", defaultValue: [])

let ProtobufUnittest_TestAllExtensions_repeatedForeignEnumExtension = ProtobufGenericMessageExtension<ProtobufRepeatedField<ProtobufUnittest_ForeignEnum>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 52, protoFieldName: "repeated_foreign_enum_extension", jsonFieldName: "repeatedForeignEnumExtension", swiftFieldName: "repeatedForeignEnumExtension", defaultValue: [])

let ProtobufUnittest_TestAllExtensions_repeatedImportEnumExtension = ProtobufGenericMessageExtension<ProtobufRepeatedField<ProtobufUnittestImport_ImportEnum>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 53, protoFieldName: "repeated_import_enum_extension", jsonFieldName: "repeatedImportEnumExtension", swiftFieldName: "repeatedImportEnumExtension", defaultValue: [])

let ProtobufUnittest_TestAllExtensions_repeatedStringPieceExtension = ProtobufGenericMessageExtension<ProtobufRepeatedField<ProtobufString>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 54, protoFieldName: "repeated_string_piece_extension", jsonFieldName: "repeatedStringPieceExtension", swiftFieldName: "repeatedStringPieceExtension", defaultValue: [])

let ProtobufUnittest_TestAllExtensions_repeatedCordExtension = ProtobufGenericMessageExtension<ProtobufRepeatedField<ProtobufString>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 55, protoFieldName: "repeated_cord_extension", jsonFieldName: "repeatedCordExtension", swiftFieldName: "repeatedCordExtension", defaultValue: [])

let ProtobufUnittest_TestAllExtensions_repeatedLazyMessageExtension = ProtobufGenericMessageExtension<ProtobufRepeatedMessageField<ProtobufUnittest_TestAllTypes.NestedMessage>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 57, protoFieldName: "repeated_lazy_message_extension", jsonFieldName: "repeatedLazyMessageExtension", swiftFieldName: "repeatedLazyMessageExtension", defaultValue: [])

///   Singular with defaults
let ProtobufUnittest_TestAllExtensions_defaultInt32Extension = ProtobufGenericMessageExtension<ProtobufOptionalField<ProtobufInt32>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 61, protoFieldName: "default_int32_extension", jsonFieldName: "defaultInt32Extension", swiftFieldName: "defaultInt32Extension", defaultValue: 41)

let ProtobufUnittest_TestAllExtensions_defaultInt64Extension = ProtobufGenericMessageExtension<ProtobufOptionalField<ProtobufInt64>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 62, protoFieldName: "default_int64_extension", jsonFieldName: "defaultInt64Extension", swiftFieldName: "defaultInt64Extension", defaultValue: 42)

let ProtobufUnittest_TestAllExtensions_defaultUint32Extension = ProtobufGenericMessageExtension<ProtobufOptionalField<ProtobufUInt32>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 63, protoFieldName: "default_uint32_extension", jsonFieldName: "defaultUint32Extension", swiftFieldName: "defaultUint32Extension", defaultValue: 43)

let ProtobufUnittest_TestAllExtensions_defaultUint64Extension = ProtobufGenericMessageExtension<ProtobufOptionalField<ProtobufUInt64>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 64, protoFieldName: "default_uint64_extension", jsonFieldName: "defaultUint64Extension", swiftFieldName: "defaultUint64Extension", defaultValue: 44)

let ProtobufUnittest_TestAllExtensions_defaultSint32Extension = ProtobufGenericMessageExtension<ProtobufOptionalField<ProtobufSInt32>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 65, protoFieldName: "default_sint32_extension", jsonFieldName: "defaultSint32Extension", swiftFieldName: "defaultSint32Extension", defaultValue: -45)

let ProtobufUnittest_TestAllExtensions_defaultSint64Extension = ProtobufGenericMessageExtension<ProtobufOptionalField<ProtobufSInt64>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 66, protoFieldName: "default_sint64_extension", jsonFieldName: "defaultSint64Extension", swiftFieldName: "defaultSint64Extension", defaultValue: 46)

let ProtobufUnittest_TestAllExtensions_defaultFixed32Extension = ProtobufGenericMessageExtension<ProtobufOptionalField<ProtobufFixed32>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 67, protoFieldName: "default_fixed32_extension", jsonFieldName: "defaultFixed32Extension", swiftFieldName: "defaultFixed32Extension", defaultValue: 47)

let ProtobufUnittest_TestAllExtensions_defaultFixed64Extension = ProtobufGenericMessageExtension<ProtobufOptionalField<ProtobufFixed64>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 68, protoFieldName: "default_fixed64_extension", jsonFieldName: "defaultFixed64Extension", swiftFieldName: "defaultFixed64Extension", defaultValue: 48)

let ProtobufUnittest_TestAllExtensions_defaultSfixed32Extension = ProtobufGenericMessageExtension<ProtobufOptionalField<ProtobufSFixed32>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 69, protoFieldName: "default_sfixed32_extension", jsonFieldName: "defaultSfixed32Extension", swiftFieldName: "defaultSfixed32Extension", defaultValue: 49)

let ProtobufUnittest_TestAllExtensions_defaultSfixed64Extension = ProtobufGenericMessageExtension<ProtobufOptionalField<ProtobufSFixed64>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 70, protoFieldName: "default_sfixed64_extension", jsonFieldName: "defaultSfixed64Extension", swiftFieldName: "defaultSfixed64Extension", defaultValue: -50)

let ProtobufUnittest_TestAllExtensions_defaultFloatExtension = ProtobufGenericMessageExtension<ProtobufOptionalField<ProtobufFloat>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 71, protoFieldName: "default_float_extension", jsonFieldName: "defaultFloatExtension", swiftFieldName: "defaultFloatExtension", defaultValue: 51.5)

let ProtobufUnittest_TestAllExtensions_defaultDoubleExtension = ProtobufGenericMessageExtension<ProtobufOptionalField<ProtobufDouble>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 72, protoFieldName: "default_double_extension", jsonFieldName: "defaultDoubleExtension", swiftFieldName: "defaultDoubleExtension", defaultValue: 52000)

let ProtobufUnittest_TestAllExtensions_defaultBoolExtension = ProtobufGenericMessageExtension<ProtobufOptionalField<ProtobufBool>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 73, protoFieldName: "default_bool_extension", jsonFieldName: "defaultBoolExtension", swiftFieldName: "defaultBoolExtension", defaultValue: true)

let ProtobufUnittest_TestAllExtensions_defaultStringExtension = ProtobufGenericMessageExtension<ProtobufOptionalField<ProtobufString>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 74, protoFieldName: "default_string_extension", jsonFieldName: "defaultStringExtension", swiftFieldName: "defaultStringExtension", defaultValue: "hello")

let ProtobufUnittest_TestAllExtensions_defaultBytesExtension = ProtobufGenericMessageExtension<ProtobufOptionalField<ProtobufBytes>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 75, protoFieldName: "default_bytes_extension", jsonFieldName: "defaultBytesExtension", swiftFieldName: "defaultBytesExtension", defaultValue: Data(bytes: [119, 111, 114, 108, 100]))

let ProtobufUnittest_TestAllExtensions_defaultNestedEnumExtension = ProtobufGenericMessageExtension<ProtobufOptionalField<ProtobufUnittest_TestAllTypes.NestedEnum>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 81, protoFieldName: "default_nested_enum_extension", jsonFieldName: "defaultNestedEnumExtension", swiftFieldName: "defaultNestedEnumExtension", defaultValue: ProtobufUnittest_TestAllTypes.NestedEnum.bar)

let ProtobufUnittest_TestAllExtensions_defaultForeignEnumExtension = ProtobufGenericMessageExtension<ProtobufOptionalField<ProtobufUnittest_ForeignEnum>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 82, protoFieldName: "default_foreign_enum_extension", jsonFieldName: "defaultForeignEnumExtension", swiftFieldName: "defaultForeignEnumExtension", defaultValue: ProtobufUnittest_ForeignEnum.foreignBar)

let ProtobufUnittest_TestAllExtensions_defaultImportEnumExtension = ProtobufGenericMessageExtension<ProtobufOptionalField<ProtobufUnittestImport_ImportEnum>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 83, protoFieldName: "default_import_enum_extension", jsonFieldName: "defaultImportEnumExtension", swiftFieldName: "defaultImportEnumExtension", defaultValue: ProtobufUnittestImport_ImportEnum.importBar)

let ProtobufUnittest_TestAllExtensions_defaultStringPieceExtension = ProtobufGenericMessageExtension<ProtobufOptionalField<ProtobufString>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 84, protoFieldName: "default_string_piece_extension", jsonFieldName: "defaultStringPieceExtension", swiftFieldName: "defaultStringPieceExtension", defaultValue: "abc")

let ProtobufUnittest_TestAllExtensions_defaultCordExtension = ProtobufGenericMessageExtension<ProtobufOptionalField<ProtobufString>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 85, protoFieldName: "default_cord_extension", jsonFieldName: "defaultCordExtension", swiftFieldName: "defaultCordExtension", defaultValue: "123")

///   For oneof test
let ProtobufUnittest_TestAllExtensions_oneofUint32Extension = ProtobufGenericMessageExtension<ProtobufOptionalField<ProtobufUInt32>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 111, protoFieldName: "oneof_uint32_extension", jsonFieldName: "oneofUint32Extension", swiftFieldName: "oneofUint32Extension", defaultValue: 0)

let ProtobufUnittest_TestAllExtensions_oneofNestedMessageExtension = ProtobufGenericMessageExtension<ProtobufOptionalMessageField<ProtobufUnittest_TestAllTypes.NestedMessage>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 112, protoFieldName: "oneof_nested_message_extension", jsonFieldName: "oneofNestedMessageExtension", swiftFieldName: "oneofNestedMessageExtension", defaultValue: ProtobufUnittest_TestAllTypes.NestedMessage())

let ProtobufUnittest_TestAllExtensions_oneofStringExtension = ProtobufGenericMessageExtension<ProtobufOptionalField<ProtobufString>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 113, protoFieldName: "oneof_string_extension", jsonFieldName: "oneofStringExtension", swiftFieldName: "oneofStringExtension", defaultValue: "")

let ProtobufUnittest_TestAllExtensions_oneofBytesExtension = ProtobufGenericMessageExtension<ProtobufOptionalField<ProtobufBytes>, ProtobufUnittest_TestAllExtensions>(protoFieldNumber: 114, protoFieldName: "oneof_bytes_extension", jsonFieldName: "oneofBytesExtension", swiftFieldName: "oneofBytesExtension", defaultValue: Data())

let ProtobufUnittest_TestFieldOrderings_myExtensionString = ProtobufGenericMessageExtension<ProtobufOptionalField<ProtobufString>, ProtobufUnittest_TestFieldOrderings>(protoFieldNumber: 50, protoFieldName: "my_extension_string", jsonFieldName: "myExtensionString", swiftFieldName: "myExtensionString", defaultValue: "")

let ProtobufUnittest_TestFieldOrderings_myExtensionInt = ProtobufGenericMessageExtension<ProtobufOptionalField<ProtobufInt32>, ProtobufUnittest_TestFieldOrderings>(protoFieldNumber: 5, protoFieldName: "my_extension_int", jsonFieldName: "myExtensionInt", swiftFieldName: "myExtensionInt", defaultValue: 0)

let ProtobufUnittest_TestPackedExtensions_packedInt32Extension = ProtobufGenericMessageExtension<ProtobufPackedField<ProtobufInt32>, ProtobufUnittest_TestPackedExtensions>(protoFieldNumber: 90, protoFieldName: "packed_int32_extension", jsonFieldName: "packedInt32Extension", swiftFieldName: "packedInt32Extension", defaultValue: [])

let ProtobufUnittest_TestPackedExtensions_packedInt64Extension = ProtobufGenericMessageExtension<ProtobufPackedField<ProtobufInt64>, ProtobufUnittest_TestPackedExtensions>(protoFieldNumber: 91, protoFieldName: "packed_int64_extension", jsonFieldName: "packedInt64Extension", swiftFieldName: "packedInt64Extension", defaultValue: [])

let ProtobufUnittest_TestPackedExtensions_packedUint32Extension = ProtobufGenericMessageExtension<ProtobufPackedField<ProtobufUInt32>, ProtobufUnittest_TestPackedExtensions>(protoFieldNumber: 92, protoFieldName: "packed_uint32_extension", jsonFieldName: "packedUint32Extension", swiftFieldName: "packedUint32Extension", defaultValue: [])

let ProtobufUnittest_TestPackedExtensions_packedUint64Extension = ProtobufGenericMessageExtension<ProtobufPackedField<ProtobufUInt64>, ProtobufUnittest_TestPackedExtensions>(protoFieldNumber: 93, protoFieldName: "packed_uint64_extension", jsonFieldName: "packedUint64Extension", swiftFieldName: "packedUint64Extension", defaultValue: [])

let ProtobufUnittest_TestPackedExtensions_packedSint32Extension = ProtobufGenericMessageExtension<ProtobufPackedField<ProtobufSInt32>, ProtobufUnittest_TestPackedExtensions>(protoFieldNumber: 94, protoFieldName: "packed_sint32_extension", jsonFieldName: "packedSint32Extension", swiftFieldName: "packedSint32Extension", defaultValue: [])

let ProtobufUnittest_TestPackedExtensions_packedSint64Extension = ProtobufGenericMessageExtension<ProtobufPackedField<ProtobufSInt64>, ProtobufUnittest_TestPackedExtensions>(protoFieldNumber: 95, protoFieldName: "packed_sint64_extension", jsonFieldName: "packedSint64Extension", swiftFieldName: "packedSint64Extension", defaultValue: [])

let ProtobufUnittest_TestPackedExtensions_packedFixed32Extension = ProtobufGenericMessageExtension<ProtobufPackedField<ProtobufFixed32>, ProtobufUnittest_TestPackedExtensions>(protoFieldNumber: 96, protoFieldName: "packed_fixed32_extension", jsonFieldName: "packedFixed32Extension", swiftFieldName: "packedFixed32Extension", defaultValue: [])

let ProtobufUnittest_TestPackedExtensions_packedFixed64Extension = ProtobufGenericMessageExtension<ProtobufPackedField<ProtobufFixed64>, ProtobufUnittest_TestPackedExtensions>(protoFieldNumber: 97, protoFieldName: "packed_fixed64_extension", jsonFieldName: "packedFixed64Extension", swiftFieldName: "packedFixed64Extension", defaultValue: [])

let ProtobufUnittest_TestPackedExtensions_packedSfixed32Extension = ProtobufGenericMessageExtension<ProtobufPackedField<ProtobufSFixed32>, ProtobufUnittest_TestPackedExtensions>(protoFieldNumber: 98, protoFieldName: "packed_sfixed32_extension", jsonFieldName: "packedSfixed32Extension", swiftFieldName: "packedSfixed32Extension", defaultValue: [])

let ProtobufUnittest_TestPackedExtensions_packedSfixed64Extension = ProtobufGenericMessageExtension<ProtobufPackedField<ProtobufSFixed64>, ProtobufUnittest_TestPackedExtensions>(protoFieldNumber: 99, protoFieldName: "packed_sfixed64_extension", jsonFieldName: "packedSfixed64Extension", swiftFieldName: "packedSfixed64Extension", defaultValue: [])

let ProtobufUnittest_TestPackedExtensions_packedFloatExtension = ProtobufGenericMessageExtension<ProtobufPackedField<ProtobufFloat>, ProtobufUnittest_TestPackedExtensions>(protoFieldNumber: 100, protoFieldName: "packed_float_extension", jsonFieldName: "packedFloatExtension", swiftFieldName: "packedFloatExtension", defaultValue: [])

let ProtobufUnittest_TestPackedExtensions_packedDoubleExtension = ProtobufGenericMessageExtension<ProtobufPackedField<ProtobufDouble>, ProtobufUnittest_TestPackedExtensions>(protoFieldNumber: 101, protoFieldName: "packed_double_extension", jsonFieldName: "packedDoubleExtension", swiftFieldName: "packedDoubleExtension", defaultValue: [])

let ProtobufUnittest_TestPackedExtensions_packedBoolExtension = ProtobufGenericMessageExtension<ProtobufPackedField<ProtobufBool>, ProtobufUnittest_TestPackedExtensions>(protoFieldNumber: 102, protoFieldName: "packed_bool_extension", jsonFieldName: "packedBoolExtension", swiftFieldName: "packedBoolExtension", defaultValue: [])

let ProtobufUnittest_TestPackedExtensions_packedEnumExtension = ProtobufGenericMessageExtension<ProtobufPackedField<ProtobufUnittest_ForeignEnum>, ProtobufUnittest_TestPackedExtensions>(protoFieldNumber: 103, protoFieldName: "packed_enum_extension", jsonFieldName: "packedEnumExtension", swiftFieldName: "packedEnumExtension", defaultValue: [])

let ProtobufUnittest_TestUnpackedExtensions_unpackedInt32Extension = ProtobufGenericMessageExtension<ProtobufRepeatedField<ProtobufInt32>, ProtobufUnittest_TestUnpackedExtensions>(protoFieldNumber: 90, protoFieldName: "unpacked_int32_extension", jsonFieldName: "unpackedInt32Extension", swiftFieldName: "unpackedInt32Extension", defaultValue: [])

let ProtobufUnittest_TestUnpackedExtensions_unpackedInt64Extension = ProtobufGenericMessageExtension<ProtobufRepeatedField<ProtobufInt64>, ProtobufUnittest_TestUnpackedExtensions>(protoFieldNumber: 91, protoFieldName: "unpacked_int64_extension", jsonFieldName: "unpackedInt64Extension", swiftFieldName: "unpackedInt64Extension", defaultValue: [])

let ProtobufUnittest_TestUnpackedExtensions_unpackedUint32Extension = ProtobufGenericMessageExtension<ProtobufRepeatedField<ProtobufUInt32>, ProtobufUnittest_TestUnpackedExtensions>(protoFieldNumber: 92, protoFieldName: "unpacked_uint32_extension", jsonFieldName: "unpackedUint32Extension", swiftFieldName: "unpackedUint32Extension", defaultValue: [])

let ProtobufUnittest_TestUnpackedExtensions_unpackedUint64Extension = ProtobufGenericMessageExtension<ProtobufRepeatedField<ProtobufUInt64>, ProtobufUnittest_TestUnpackedExtensions>(protoFieldNumber: 93, protoFieldName: "unpacked_uint64_extension", jsonFieldName: "unpackedUint64Extension", swiftFieldName: "unpackedUint64Extension", defaultValue: [])

let ProtobufUnittest_TestUnpackedExtensions_unpackedSint32Extension = ProtobufGenericMessageExtension<ProtobufRepeatedField<ProtobufSInt32>, ProtobufUnittest_TestUnpackedExtensions>(protoFieldNumber: 94, protoFieldName: "unpacked_sint32_extension", jsonFieldName: "unpackedSint32Extension", swiftFieldName: "unpackedSint32Extension", defaultValue: [])

let ProtobufUnittest_TestUnpackedExtensions_unpackedSint64Extension = ProtobufGenericMessageExtension<ProtobufRepeatedField<ProtobufSInt64>, ProtobufUnittest_TestUnpackedExtensions>(protoFieldNumber: 95, protoFieldName: "unpacked_sint64_extension", jsonFieldName: "unpackedSint64Extension", swiftFieldName: "unpackedSint64Extension", defaultValue: [])

let ProtobufUnittest_TestUnpackedExtensions_unpackedFixed32Extension = ProtobufGenericMessageExtension<ProtobufRepeatedField<ProtobufFixed32>, ProtobufUnittest_TestUnpackedExtensions>(protoFieldNumber: 96, protoFieldName: "unpacked_fixed32_extension", jsonFieldName: "unpackedFixed32Extension", swiftFieldName: "unpackedFixed32Extension", defaultValue: [])

let ProtobufUnittest_TestUnpackedExtensions_unpackedFixed64Extension = ProtobufGenericMessageExtension<ProtobufRepeatedField<ProtobufFixed64>, ProtobufUnittest_TestUnpackedExtensions>(protoFieldNumber: 97, protoFieldName: "unpacked_fixed64_extension", jsonFieldName: "unpackedFixed64Extension", swiftFieldName: "unpackedFixed64Extension", defaultValue: [])

let ProtobufUnittest_TestUnpackedExtensions_unpackedSfixed32Extension = ProtobufGenericMessageExtension<ProtobufRepeatedField<ProtobufSFixed32>, ProtobufUnittest_TestUnpackedExtensions>(protoFieldNumber: 98, protoFieldName: "unpacked_sfixed32_extension", jsonFieldName: "unpackedSfixed32Extension", swiftFieldName: "unpackedSfixed32Extension", defaultValue: [])

let ProtobufUnittest_TestUnpackedExtensions_unpackedSfixed64Extension = ProtobufGenericMessageExtension<ProtobufRepeatedField<ProtobufSFixed64>, ProtobufUnittest_TestUnpackedExtensions>(protoFieldNumber: 99, protoFieldName: "unpacked_sfixed64_extension", jsonFieldName: "unpackedSfixed64Extension", swiftFieldName: "unpackedSfixed64Extension", defaultValue: [])

let ProtobufUnittest_TestUnpackedExtensions_unpackedFloatExtension = ProtobufGenericMessageExtension<ProtobufRepeatedField<ProtobufFloat>, ProtobufUnittest_TestUnpackedExtensions>(protoFieldNumber: 100, protoFieldName: "unpacked_float_extension", jsonFieldName: "unpackedFloatExtension", swiftFieldName: "unpackedFloatExtension", defaultValue: [])

let ProtobufUnittest_TestUnpackedExtensions_unpackedDoubleExtension = ProtobufGenericMessageExtension<ProtobufRepeatedField<ProtobufDouble>, ProtobufUnittest_TestUnpackedExtensions>(protoFieldNumber: 101, protoFieldName: "unpacked_double_extension", jsonFieldName: "unpackedDoubleExtension", swiftFieldName: "unpackedDoubleExtension", defaultValue: [])

let ProtobufUnittest_TestUnpackedExtensions_unpackedBoolExtension = ProtobufGenericMessageExtension<ProtobufRepeatedField<ProtobufBool>, ProtobufUnittest_TestUnpackedExtensions>(protoFieldNumber: 102, protoFieldName: "unpacked_bool_extension", jsonFieldName: "unpackedBoolExtension", swiftFieldName: "unpackedBoolExtension", defaultValue: [])

let ProtobufUnittest_TestUnpackedExtensions_unpackedEnumExtension = ProtobufGenericMessageExtension<ProtobufRepeatedField<ProtobufUnittest_ForeignEnum>, ProtobufUnittest_TestUnpackedExtensions>(protoFieldNumber: 103, protoFieldName: "unpacked_enum_extension", jsonFieldName: "unpackedEnumExtension", swiftFieldName: "unpackedEnumExtension", defaultValue: [])

public func ==(lhs: ProtobufUnittest_TestAllTypes.OneOf_OneofField, rhs: ProtobufUnittest_TestAllTypes.OneOf_OneofField) -> Bool {
  switch (lhs, rhs) {
  case (.oneofUint32(let l), .oneofUint32(let r)): return l == r
  case (.oneofNestedMessage(let l), .oneofNestedMessage(let r)): return l == r
  case (.oneofString(let l), .oneofString(let r)): return l == r
  case (.oneofBytes(let l), .oneofBytes(let r)): return l == r
  case (.None, .None): return true
  default: return false
  }
}

extension ProtobufUnittest_TestAllExtensions {
  ///   Check for bug where string extensions declared in tested scope did not
  ///   compile.
  public var ProtobufUnittest_TestNestedExtension_test: String {
    get {return getExtensionValue(ext: ProtobufUnittest_TestNestedExtension.Extensions.ProtobufUnittest_TestAllExtensions_test) ?? "test"}
    set {setExtensionValue(ext: ProtobufUnittest_TestNestedExtension.Extensions.ProtobufUnittest_TestAllExtensions_test, value: newValue)}
  }
  public var hasProtobufUnittest_TestNestedExtension_test: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestNestedExtension.Extensions.ProtobufUnittest_TestAllExtensions_test)
  }
  public mutating func clearProtobufUnittest_TestNestedExtension_test() {
    clearExtensionValue(ext: ProtobufUnittest_TestNestedExtension.Extensions.ProtobufUnittest_TestAllExtensions_test)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  ///   Used to test if generated extension name is correct when there are
  ///   underscores.
  public var ProtobufUnittest_TestNestedExtension_nestedStringExtension: String {
    get {return getExtensionValue(ext: ProtobufUnittest_TestNestedExtension.Extensions.ProtobufUnittest_TestAllExtensions_nestedStringExtension) ?? ""}
    set {setExtensionValue(ext: ProtobufUnittest_TestNestedExtension.Extensions.ProtobufUnittest_TestAllExtensions_nestedStringExtension, value: newValue)}
  }
  public var hasProtobufUnittest_TestNestedExtension_nestedStringExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestNestedExtension.Extensions.ProtobufUnittest_TestAllExtensions_nestedStringExtension)
  }
  public mutating func clearProtobufUnittest_TestNestedExtension_nestedStringExtension() {
    clearExtensionValue(ext: ProtobufUnittest_TestNestedExtension.Extensions.ProtobufUnittest_TestAllExtensions_nestedStringExtension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  public var ProtobufUnittest_TestRequired_single: ProtobufUnittest_TestRequired {
    get {return getExtensionValue(ext: ProtobufUnittest_TestRequired.Extensions.ProtobufUnittest_TestAllExtensions_single) ?? ProtobufUnittest_TestRequired()}
    set {setExtensionValue(ext: ProtobufUnittest_TestRequired.Extensions.ProtobufUnittest_TestAllExtensions_single, value: newValue)}
  }
  public var hasProtobufUnittest_TestRequired_single: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestRequired.Extensions.ProtobufUnittest_TestAllExtensions_single)
  }
  public mutating func clearProtobufUnittest_TestRequired_single() {
    clearExtensionValue(ext: ProtobufUnittest_TestRequired.Extensions.ProtobufUnittest_TestAllExtensions_single)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  public var ProtobufUnittest_TestRequired_multi: [ProtobufUnittest_TestRequired] {
    get {return getExtensionValue(ext: ProtobufUnittest_TestRequired.Extensions.ProtobufUnittest_TestAllExtensions_multi)}
    set {setExtensionValue(ext: ProtobufUnittest_TestRequired.Extensions.ProtobufUnittest_TestAllExtensions_multi, value: newValue)}
  }
  public var hasProtobufUnittest_TestRequired_multi: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestRequired.Extensions.ProtobufUnittest_TestAllExtensions_multi)
  }
  public mutating func clearProtobufUnittest_TestRequired_multi() {
    clearExtensionValue(ext: ProtobufUnittest_TestRequired.Extensions.ProtobufUnittest_TestAllExtensions_multi)
  }
}

public func ==(lhs: ProtobufUnittest_TestOneof.OneOf_Foo, rhs: ProtobufUnittest_TestOneof.OneOf_Foo) -> Bool {
  switch (lhs, rhs) {
  case (.fooInt(let l), .fooInt(let r)): return l == r
  case (.fooString(let l), .fooString(let r)): return l == r
  case (.fooMessage(let l), .fooMessage(let r)): return l == r
  case (.fooGroup(let l), .fooGroup(let r)): return l == r
  case (.None, .None): return true
  default: return false
  }
}

public func ==(lhs: ProtobufUnittest_TestOneof2.OneOf_Foo, rhs: ProtobufUnittest_TestOneof2.OneOf_Foo) -> Bool {
  switch (lhs, rhs) {
  case (.fooInt(let l), .fooInt(let r)): return l == r
  case (.fooString(let l), .fooString(let r)): return l == r
  case (.fooCord(let l), .fooCord(let r)): return l == r
  case (.fooStringPiece(let l), .fooStringPiece(let r)): return l == r
  case (.fooBytes(let l), .fooBytes(let r)): return l == r
  case (.fooEnum(let l), .fooEnum(let r)): return l == r
  case (.fooMessage(let l), .fooMessage(let r)): return l == r
  case (.fooGroup(let l), .fooGroup(let r)): return l == r
  case (.fooLazyMessage(let l), .fooLazyMessage(let r)): return l == r
  case (.None, .None): return true
  default: return false
  }
}

public func ==(lhs: ProtobufUnittest_TestOneof2.OneOf_Bar, rhs: ProtobufUnittest_TestOneof2.OneOf_Bar) -> Bool {
  switch (lhs, rhs) {
  case (.barInt(let l), .barInt(let r)): return l == r
  case (.barString(let l), .barString(let r)): return l == r
  case (.barCord(let l), .barCord(let r)): return l == r
  case (.barStringPiece(let l), .barStringPiece(let r)): return l == r
  case (.barBytes(let l), .barBytes(let r)): return l == r
  case (.barEnum(let l), .barEnum(let r)): return l == r
  case (.None, .None): return true
  default: return false
  }
}

public func ==(lhs: ProtobufUnittest_TestRequiredOneof.OneOf_Foo, rhs: ProtobufUnittest_TestRequiredOneof.OneOf_Foo) -> Bool {
  switch (lhs, rhs) {
  case (.fooInt(let l), .fooInt(let r)): return l == r
  case (.fooString(let l), .fooString(let r)): return l == r
  case (.fooMessage(let l), .fooMessage(let r)): return l == r
  case (.None, .None): return true
  default: return false
  }
}

extension ProtobufUnittest_TestParsingMerge {
  public var ProtobufUnittest_TestParsingMerge_optionalExt: ProtobufUnittest_TestAllTypes {
    get {return getExtensionValue(ext: ProtobufUnittest_TestParsingMerge.Extensions.ProtobufUnittest_TestParsingMerge_optionalExt) ?? ProtobufUnittest_TestAllTypes()}
    set {setExtensionValue(ext: ProtobufUnittest_TestParsingMerge.Extensions.ProtobufUnittest_TestParsingMerge_optionalExt, value: newValue)}
  }
  public var hasProtobufUnittest_TestParsingMerge_optionalExt: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestParsingMerge.Extensions.ProtobufUnittest_TestParsingMerge_optionalExt)
  }
  public mutating func clearProtobufUnittest_TestParsingMerge_optionalExt() {
    clearExtensionValue(ext: ProtobufUnittest_TestParsingMerge.Extensions.ProtobufUnittest_TestParsingMerge_optionalExt)
  }
}

extension ProtobufUnittest_TestParsingMerge {
  public var ProtobufUnittest_TestParsingMerge_repeatedExt: [ProtobufUnittest_TestAllTypes] {
    get {return getExtensionValue(ext: ProtobufUnittest_TestParsingMerge.Extensions.ProtobufUnittest_TestParsingMerge_repeatedExt)}
    set {setExtensionValue(ext: ProtobufUnittest_TestParsingMerge.Extensions.ProtobufUnittest_TestParsingMerge_repeatedExt, value: newValue)}
  }
  public var hasProtobufUnittest_TestParsingMerge_repeatedExt: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestParsingMerge.Extensions.ProtobufUnittest_TestParsingMerge_repeatedExt)
  }
  public mutating func clearProtobufUnittest_TestParsingMerge_repeatedExt() {
    clearExtensionValue(ext: ProtobufUnittest_TestParsingMerge.Extensions.ProtobufUnittest_TestParsingMerge_repeatedExt)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  ///   Singular
  public var optionalInt32Extension: Int32 {
    get {return getExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalInt32Extension) ?? 0}
    set {setExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalInt32Extension, value: newValue)}
  }
  public var hasOptionalInt32Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalInt32Extension)
  }
  public mutating func clearOptionalInt32Extension() {
    clearExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalInt32Extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  public var optionalInt64Extension: Int64 {
    get {return getExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalInt64Extension) ?? 0}
    set {setExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalInt64Extension, value: newValue)}
  }
  public var hasOptionalInt64Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalInt64Extension)
  }
  public mutating func clearOptionalInt64Extension() {
    clearExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalInt64Extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  public var optionalUint32Extension: UInt32 {
    get {return getExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalUint32Extension) ?? 0}
    set {setExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalUint32Extension, value: newValue)}
  }
  public var hasOptionalUint32Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalUint32Extension)
  }
  public mutating func clearOptionalUint32Extension() {
    clearExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalUint32Extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  public var optionalUint64Extension: UInt64 {
    get {return getExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalUint64Extension) ?? 0}
    set {setExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalUint64Extension, value: newValue)}
  }
  public var hasOptionalUint64Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalUint64Extension)
  }
  public mutating func clearOptionalUint64Extension() {
    clearExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalUint64Extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  public var optionalSint32Extension: Int32 {
    get {return getExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalSint32Extension) ?? 0}
    set {setExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalSint32Extension, value: newValue)}
  }
  public var hasOptionalSint32Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalSint32Extension)
  }
  public mutating func clearOptionalSint32Extension() {
    clearExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalSint32Extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  public var optionalSint64Extension: Int64 {
    get {return getExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalSint64Extension) ?? 0}
    set {setExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalSint64Extension, value: newValue)}
  }
  public var hasOptionalSint64Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalSint64Extension)
  }
  public mutating func clearOptionalSint64Extension() {
    clearExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalSint64Extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  public var optionalFixed32Extension: UInt32 {
    get {return getExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalFixed32Extension) ?? 0}
    set {setExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalFixed32Extension, value: newValue)}
  }
  public var hasOptionalFixed32Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalFixed32Extension)
  }
  public mutating func clearOptionalFixed32Extension() {
    clearExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalFixed32Extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  public var optionalFixed64Extension: UInt64 {
    get {return getExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalFixed64Extension) ?? 0}
    set {setExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalFixed64Extension, value: newValue)}
  }
  public var hasOptionalFixed64Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalFixed64Extension)
  }
  public mutating func clearOptionalFixed64Extension() {
    clearExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalFixed64Extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  public var optionalSfixed32Extension: Int32 {
    get {return getExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalSfixed32Extension) ?? 0}
    set {setExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalSfixed32Extension, value: newValue)}
  }
  public var hasOptionalSfixed32Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalSfixed32Extension)
  }
  public mutating func clearOptionalSfixed32Extension() {
    clearExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalSfixed32Extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  public var optionalSfixed64Extension: Int64 {
    get {return getExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalSfixed64Extension) ?? 0}
    set {setExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalSfixed64Extension, value: newValue)}
  }
  public var hasOptionalSfixed64Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalSfixed64Extension)
  }
  public mutating func clearOptionalSfixed64Extension() {
    clearExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalSfixed64Extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  public var optionalFloatExtension: Float {
    get {return getExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalFloatExtension) ?? 0}
    set {setExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalFloatExtension, value: newValue)}
  }
  public var hasOptionalFloatExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalFloatExtension)
  }
  public mutating func clearOptionalFloatExtension() {
    clearExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalFloatExtension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  public var optionalDoubleExtension: Double {
    get {return getExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalDoubleExtension) ?? 0}
    set {setExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalDoubleExtension, value: newValue)}
  }
  public var hasOptionalDoubleExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalDoubleExtension)
  }
  public mutating func clearOptionalDoubleExtension() {
    clearExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalDoubleExtension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  public var optionalBoolExtension: Bool {
    get {return getExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalBoolExtension) ?? false}
    set {setExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalBoolExtension, value: newValue)}
  }
  public var hasOptionalBoolExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalBoolExtension)
  }
  public mutating func clearOptionalBoolExtension() {
    clearExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalBoolExtension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  public var optionalStringExtension: String {
    get {return getExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalStringExtension) ?? ""}
    set {setExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalStringExtension, value: newValue)}
  }
  public var hasOptionalStringExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalStringExtension)
  }
  public mutating func clearOptionalStringExtension() {
    clearExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalStringExtension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  public var optionalBytesExtension: Data {
    get {return getExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalBytesExtension) ?? Data()}
    set {setExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalBytesExtension, value: newValue)}
  }
  public var hasOptionalBytesExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalBytesExtension)
  }
  public mutating func clearOptionalBytesExtension() {
    clearExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalBytesExtension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  public var optionalGroupExtension: ProtobufUnittest_OptionalGroup_extension {
    get {return getExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalGroupExtension) ?? ProtobufUnittest_OptionalGroup_extension()}
    set {setExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalGroupExtension, value: newValue)}
  }
  public var hasOptionalGroupExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalGroupExtension)
  }
  public mutating func clearOptionalGroupExtension() {
    clearExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalGroupExtension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  public var optionalNestedMessageExtension: ProtobufUnittest_TestAllTypes.NestedMessage {
    get {return getExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalNestedMessageExtension) ?? ProtobufUnittest_TestAllTypes.NestedMessage()}
    set {setExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalNestedMessageExtension, value: newValue)}
  }
  public var hasOptionalNestedMessageExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalNestedMessageExtension)
  }
  public mutating func clearOptionalNestedMessageExtension() {
    clearExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalNestedMessageExtension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  public var optionalForeignMessageExtension: ProtobufUnittest_ForeignMessage {
    get {return getExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalForeignMessageExtension) ?? ProtobufUnittest_ForeignMessage()}
    set {setExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalForeignMessageExtension, value: newValue)}
  }
  public var hasOptionalForeignMessageExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalForeignMessageExtension)
  }
  public mutating func clearOptionalForeignMessageExtension() {
    clearExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalForeignMessageExtension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  public var optionalImportMessageExtension: ProtobufUnittestImport_ImportMessage {
    get {return getExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalImportMessageExtension) ?? ProtobufUnittestImport_ImportMessage()}
    set {setExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalImportMessageExtension, value: newValue)}
  }
  public var hasOptionalImportMessageExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalImportMessageExtension)
  }
  public mutating func clearOptionalImportMessageExtension() {
    clearExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalImportMessageExtension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  public var optionalNestedEnumExtension: ProtobufUnittest_TestAllTypes.NestedEnum {
    get {return getExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalNestedEnumExtension) ?? ProtobufUnittest_TestAllTypes.NestedEnum.foo}
    set {setExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalNestedEnumExtension, value: newValue)}
  }
  public var hasOptionalNestedEnumExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalNestedEnumExtension)
  }
  public mutating func clearOptionalNestedEnumExtension() {
    clearExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalNestedEnumExtension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  public var optionalForeignEnumExtension: ProtobufUnittest_ForeignEnum {
    get {return getExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalForeignEnumExtension) ?? ProtobufUnittest_ForeignEnum.foreignFoo}
    set {setExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalForeignEnumExtension, value: newValue)}
  }
  public var hasOptionalForeignEnumExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalForeignEnumExtension)
  }
  public mutating func clearOptionalForeignEnumExtension() {
    clearExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalForeignEnumExtension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  public var optionalImportEnumExtension: ProtobufUnittestImport_ImportEnum {
    get {return getExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalImportEnumExtension) ?? ProtobufUnittestImport_ImportEnum.importFoo}
    set {setExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalImportEnumExtension, value: newValue)}
  }
  public var hasOptionalImportEnumExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalImportEnumExtension)
  }
  public mutating func clearOptionalImportEnumExtension() {
    clearExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalImportEnumExtension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  public var optionalStringPieceExtension: String {
    get {return getExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalStringPieceExtension) ?? ""}
    set {setExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalStringPieceExtension, value: newValue)}
  }
  public var hasOptionalStringPieceExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalStringPieceExtension)
  }
  public mutating func clearOptionalStringPieceExtension() {
    clearExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalStringPieceExtension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  public var optionalCordExtension: String {
    get {return getExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalCordExtension) ?? ""}
    set {setExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalCordExtension, value: newValue)}
  }
  public var hasOptionalCordExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalCordExtension)
  }
  public mutating func clearOptionalCordExtension() {
    clearExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalCordExtension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  public var optionalPublicImportMessageExtension: ProtobufUnittestImport_PublicImportMessage {
    get {return getExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalPublicImportMessageExtension) ?? ProtobufUnittestImport_PublicImportMessage()}
    set {setExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalPublicImportMessageExtension, value: newValue)}
  }
  public var hasOptionalPublicImportMessageExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalPublicImportMessageExtension)
  }
  public mutating func clearOptionalPublicImportMessageExtension() {
    clearExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalPublicImportMessageExtension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  public var optionalLazyMessageExtension: ProtobufUnittest_TestAllTypes.NestedMessage {
    get {return getExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalLazyMessageExtension) ?? ProtobufUnittest_TestAllTypes.NestedMessage()}
    set {setExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalLazyMessageExtension, value: newValue)}
  }
  public var hasOptionalLazyMessageExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalLazyMessageExtension)
  }
  public mutating func clearOptionalLazyMessageExtension() {
    clearExtensionValue(ext: ProtobufUnittest_TestAllExtensions_optionalLazyMessageExtension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  ///   Repeated
  public var repeatedInt32Extension: [Int32] {
    get {return getExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedInt32Extension)}
    set {setExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedInt32Extension, value: newValue)}
  }
  public var hasRepeatedInt32Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedInt32Extension)
  }
  public mutating func clearRepeatedInt32Extension() {
    clearExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedInt32Extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  public var repeatedInt64Extension: [Int64] {
    get {return getExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedInt64Extension)}
    set {setExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedInt64Extension, value: newValue)}
  }
  public var hasRepeatedInt64Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedInt64Extension)
  }
  public mutating func clearRepeatedInt64Extension() {
    clearExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedInt64Extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  public var repeatedUint32Extension: [UInt32] {
    get {return getExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedUint32Extension)}
    set {setExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedUint32Extension, value: newValue)}
  }
  public var hasRepeatedUint32Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedUint32Extension)
  }
  public mutating func clearRepeatedUint32Extension() {
    clearExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedUint32Extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  public var repeatedUint64Extension: [UInt64] {
    get {return getExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedUint64Extension)}
    set {setExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedUint64Extension, value: newValue)}
  }
  public var hasRepeatedUint64Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedUint64Extension)
  }
  public mutating func clearRepeatedUint64Extension() {
    clearExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedUint64Extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  public var repeatedSint32Extension: [Int32] {
    get {return getExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedSint32Extension)}
    set {setExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedSint32Extension, value: newValue)}
  }
  public var hasRepeatedSint32Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedSint32Extension)
  }
  public mutating func clearRepeatedSint32Extension() {
    clearExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedSint32Extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  public var repeatedSint64Extension: [Int64] {
    get {return getExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedSint64Extension)}
    set {setExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedSint64Extension, value: newValue)}
  }
  public var hasRepeatedSint64Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedSint64Extension)
  }
  public mutating func clearRepeatedSint64Extension() {
    clearExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedSint64Extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  public var repeatedFixed32Extension: [UInt32] {
    get {return getExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedFixed32Extension)}
    set {setExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedFixed32Extension, value: newValue)}
  }
  public var hasRepeatedFixed32Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedFixed32Extension)
  }
  public mutating func clearRepeatedFixed32Extension() {
    clearExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedFixed32Extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  public var repeatedFixed64Extension: [UInt64] {
    get {return getExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedFixed64Extension)}
    set {setExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedFixed64Extension, value: newValue)}
  }
  public var hasRepeatedFixed64Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedFixed64Extension)
  }
  public mutating func clearRepeatedFixed64Extension() {
    clearExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedFixed64Extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  public var repeatedSfixed32Extension: [Int32] {
    get {return getExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedSfixed32Extension)}
    set {setExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedSfixed32Extension, value: newValue)}
  }
  public var hasRepeatedSfixed32Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedSfixed32Extension)
  }
  public mutating func clearRepeatedSfixed32Extension() {
    clearExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedSfixed32Extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  public var repeatedSfixed64Extension: [Int64] {
    get {return getExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedSfixed64Extension)}
    set {setExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedSfixed64Extension, value: newValue)}
  }
  public var hasRepeatedSfixed64Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedSfixed64Extension)
  }
  public mutating func clearRepeatedSfixed64Extension() {
    clearExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedSfixed64Extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  public var repeatedFloatExtension: [Float] {
    get {return getExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedFloatExtension)}
    set {setExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedFloatExtension, value: newValue)}
  }
  public var hasRepeatedFloatExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedFloatExtension)
  }
  public mutating func clearRepeatedFloatExtension() {
    clearExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedFloatExtension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  public var repeatedDoubleExtension: [Double] {
    get {return getExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedDoubleExtension)}
    set {setExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedDoubleExtension, value: newValue)}
  }
  public var hasRepeatedDoubleExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedDoubleExtension)
  }
  public mutating func clearRepeatedDoubleExtension() {
    clearExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedDoubleExtension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  public var repeatedBoolExtension: [Bool] {
    get {return getExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedBoolExtension)}
    set {setExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedBoolExtension, value: newValue)}
  }
  public var hasRepeatedBoolExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedBoolExtension)
  }
  public mutating func clearRepeatedBoolExtension() {
    clearExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedBoolExtension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  public var repeatedStringExtension: [String] {
    get {return getExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedStringExtension)}
    set {setExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedStringExtension, value: newValue)}
  }
  public var hasRepeatedStringExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedStringExtension)
  }
  public mutating func clearRepeatedStringExtension() {
    clearExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedStringExtension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  public var repeatedBytesExtension: [Data] {
    get {return getExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedBytesExtension)}
    set {setExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedBytesExtension, value: newValue)}
  }
  public var hasRepeatedBytesExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedBytesExtension)
  }
  public mutating func clearRepeatedBytesExtension() {
    clearExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedBytesExtension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  public var repeatedGroupExtension: [ProtobufUnittest_RepeatedGroup_extension] {
    get {return getExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedGroupExtension)}
    set {setExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedGroupExtension, value: newValue)}
  }
  public var hasRepeatedGroupExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedGroupExtension)
  }
  public mutating func clearRepeatedGroupExtension() {
    clearExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedGroupExtension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  public var repeatedNestedMessageExtension: [ProtobufUnittest_TestAllTypes.NestedMessage] {
    get {return getExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedNestedMessageExtension)}
    set {setExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedNestedMessageExtension, value: newValue)}
  }
  public var hasRepeatedNestedMessageExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedNestedMessageExtension)
  }
  public mutating func clearRepeatedNestedMessageExtension() {
    clearExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedNestedMessageExtension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  public var repeatedForeignMessageExtension: [ProtobufUnittest_ForeignMessage] {
    get {return getExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedForeignMessageExtension)}
    set {setExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedForeignMessageExtension, value: newValue)}
  }
  public var hasRepeatedForeignMessageExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedForeignMessageExtension)
  }
  public mutating func clearRepeatedForeignMessageExtension() {
    clearExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedForeignMessageExtension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  public var repeatedImportMessageExtension: [ProtobufUnittestImport_ImportMessage] {
    get {return getExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedImportMessageExtension)}
    set {setExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedImportMessageExtension, value: newValue)}
  }
  public var hasRepeatedImportMessageExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedImportMessageExtension)
  }
  public mutating func clearRepeatedImportMessageExtension() {
    clearExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedImportMessageExtension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  public var repeatedNestedEnumExtension: [ProtobufUnittest_TestAllTypes.NestedEnum] {
    get {return getExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedNestedEnumExtension)}
    set {setExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedNestedEnumExtension, value: newValue)}
  }
  public var hasRepeatedNestedEnumExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedNestedEnumExtension)
  }
  public mutating func clearRepeatedNestedEnumExtension() {
    clearExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedNestedEnumExtension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  public var repeatedForeignEnumExtension: [ProtobufUnittest_ForeignEnum] {
    get {return getExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedForeignEnumExtension)}
    set {setExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedForeignEnumExtension, value: newValue)}
  }
  public var hasRepeatedForeignEnumExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedForeignEnumExtension)
  }
  public mutating func clearRepeatedForeignEnumExtension() {
    clearExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedForeignEnumExtension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  public var repeatedImportEnumExtension: [ProtobufUnittestImport_ImportEnum] {
    get {return getExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedImportEnumExtension)}
    set {setExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedImportEnumExtension, value: newValue)}
  }
  public var hasRepeatedImportEnumExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedImportEnumExtension)
  }
  public mutating func clearRepeatedImportEnumExtension() {
    clearExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedImportEnumExtension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  public var repeatedStringPieceExtension: [String] {
    get {return getExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedStringPieceExtension)}
    set {setExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedStringPieceExtension, value: newValue)}
  }
  public var hasRepeatedStringPieceExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedStringPieceExtension)
  }
  public mutating func clearRepeatedStringPieceExtension() {
    clearExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedStringPieceExtension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  public var repeatedCordExtension: [String] {
    get {return getExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedCordExtension)}
    set {setExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedCordExtension, value: newValue)}
  }
  public var hasRepeatedCordExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedCordExtension)
  }
  public mutating func clearRepeatedCordExtension() {
    clearExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedCordExtension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  public var repeatedLazyMessageExtension: [ProtobufUnittest_TestAllTypes.NestedMessage] {
    get {return getExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedLazyMessageExtension)}
    set {setExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedLazyMessageExtension, value: newValue)}
  }
  public var hasRepeatedLazyMessageExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedLazyMessageExtension)
  }
  public mutating func clearRepeatedLazyMessageExtension() {
    clearExtensionValue(ext: ProtobufUnittest_TestAllExtensions_repeatedLazyMessageExtension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  ///   Singular with defaults
  public var defaultInt32Extension: Int32 {
    get {return getExtensionValue(ext: ProtobufUnittest_TestAllExtensions_defaultInt32Extension) ?? 41}
    set {setExtensionValue(ext: ProtobufUnittest_TestAllExtensions_defaultInt32Extension, value: newValue)}
  }
  public var hasDefaultInt32Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestAllExtensions_defaultInt32Extension)
  }
  public mutating func clearDefaultInt32Extension() {
    clearExtensionValue(ext: ProtobufUnittest_TestAllExtensions_defaultInt32Extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  public var defaultInt64Extension: Int64 {
    get {return getExtensionValue(ext: ProtobufUnittest_TestAllExtensions_defaultInt64Extension) ?? 42}
    set {setExtensionValue(ext: ProtobufUnittest_TestAllExtensions_defaultInt64Extension, value: newValue)}
  }
  public var hasDefaultInt64Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestAllExtensions_defaultInt64Extension)
  }
  public mutating func clearDefaultInt64Extension() {
    clearExtensionValue(ext: ProtobufUnittest_TestAllExtensions_defaultInt64Extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  public var defaultUint32Extension: UInt32 {
    get {return getExtensionValue(ext: ProtobufUnittest_TestAllExtensions_defaultUint32Extension) ?? 43}
    set {setExtensionValue(ext: ProtobufUnittest_TestAllExtensions_defaultUint32Extension, value: newValue)}
  }
  public var hasDefaultUint32Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestAllExtensions_defaultUint32Extension)
  }
  public mutating func clearDefaultUint32Extension() {
    clearExtensionValue(ext: ProtobufUnittest_TestAllExtensions_defaultUint32Extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  public var defaultUint64Extension: UInt64 {
    get {return getExtensionValue(ext: ProtobufUnittest_TestAllExtensions_defaultUint64Extension) ?? 44}
    set {setExtensionValue(ext: ProtobufUnittest_TestAllExtensions_defaultUint64Extension, value: newValue)}
  }
  public var hasDefaultUint64Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestAllExtensions_defaultUint64Extension)
  }
  public mutating func clearDefaultUint64Extension() {
    clearExtensionValue(ext: ProtobufUnittest_TestAllExtensions_defaultUint64Extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  public var defaultSint32Extension: Int32 {
    get {return getExtensionValue(ext: ProtobufUnittest_TestAllExtensions_defaultSint32Extension) ?? -45}
    set {setExtensionValue(ext: ProtobufUnittest_TestAllExtensions_defaultSint32Extension, value: newValue)}
  }
  public var hasDefaultSint32Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestAllExtensions_defaultSint32Extension)
  }
  public mutating func clearDefaultSint32Extension() {
    clearExtensionValue(ext: ProtobufUnittest_TestAllExtensions_defaultSint32Extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  public var defaultSint64Extension: Int64 {
    get {return getExtensionValue(ext: ProtobufUnittest_TestAllExtensions_defaultSint64Extension) ?? 46}
    set {setExtensionValue(ext: ProtobufUnittest_TestAllExtensions_defaultSint64Extension, value: newValue)}
  }
  public var hasDefaultSint64Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestAllExtensions_defaultSint64Extension)
  }
  public mutating func clearDefaultSint64Extension() {
    clearExtensionValue(ext: ProtobufUnittest_TestAllExtensions_defaultSint64Extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  public var defaultFixed32Extension: UInt32 {
    get {return getExtensionValue(ext: ProtobufUnittest_TestAllExtensions_defaultFixed32Extension) ?? 47}
    set {setExtensionValue(ext: ProtobufUnittest_TestAllExtensions_defaultFixed32Extension, value: newValue)}
  }
  public var hasDefaultFixed32Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestAllExtensions_defaultFixed32Extension)
  }
  public mutating func clearDefaultFixed32Extension() {
    clearExtensionValue(ext: ProtobufUnittest_TestAllExtensions_defaultFixed32Extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  public var defaultFixed64Extension: UInt64 {
    get {return getExtensionValue(ext: ProtobufUnittest_TestAllExtensions_defaultFixed64Extension) ?? 48}
    set {setExtensionValue(ext: ProtobufUnittest_TestAllExtensions_defaultFixed64Extension, value: newValue)}
  }
  public var hasDefaultFixed64Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestAllExtensions_defaultFixed64Extension)
  }
  public mutating func clearDefaultFixed64Extension() {
    clearExtensionValue(ext: ProtobufUnittest_TestAllExtensions_defaultFixed64Extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  public var defaultSfixed32Extension: Int32 {
    get {return getExtensionValue(ext: ProtobufUnittest_TestAllExtensions_defaultSfixed32Extension) ?? 49}
    set {setExtensionValue(ext: ProtobufUnittest_TestAllExtensions_defaultSfixed32Extension, value: newValue)}
  }
  public var hasDefaultSfixed32Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestAllExtensions_defaultSfixed32Extension)
  }
  public mutating func clearDefaultSfixed32Extension() {
    clearExtensionValue(ext: ProtobufUnittest_TestAllExtensions_defaultSfixed32Extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  public var defaultSfixed64Extension: Int64 {
    get {return getExtensionValue(ext: ProtobufUnittest_TestAllExtensions_defaultSfixed64Extension) ?? -50}
    set {setExtensionValue(ext: ProtobufUnittest_TestAllExtensions_defaultSfixed64Extension, value: newValue)}
  }
  public var hasDefaultSfixed64Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestAllExtensions_defaultSfixed64Extension)
  }
  public mutating func clearDefaultSfixed64Extension() {
    clearExtensionValue(ext: ProtobufUnittest_TestAllExtensions_defaultSfixed64Extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  public var defaultFloatExtension: Float {
    get {return getExtensionValue(ext: ProtobufUnittest_TestAllExtensions_defaultFloatExtension) ?? 51.5}
    set {setExtensionValue(ext: ProtobufUnittest_TestAllExtensions_defaultFloatExtension, value: newValue)}
  }
  public var hasDefaultFloatExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestAllExtensions_defaultFloatExtension)
  }
  public mutating func clearDefaultFloatExtension() {
    clearExtensionValue(ext: ProtobufUnittest_TestAllExtensions_defaultFloatExtension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  public var defaultDoubleExtension: Double {
    get {return getExtensionValue(ext: ProtobufUnittest_TestAllExtensions_defaultDoubleExtension) ?? 52000}
    set {setExtensionValue(ext: ProtobufUnittest_TestAllExtensions_defaultDoubleExtension, value: newValue)}
  }
  public var hasDefaultDoubleExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestAllExtensions_defaultDoubleExtension)
  }
  public mutating func clearDefaultDoubleExtension() {
    clearExtensionValue(ext: ProtobufUnittest_TestAllExtensions_defaultDoubleExtension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  public var defaultBoolExtension: Bool {
    get {return getExtensionValue(ext: ProtobufUnittest_TestAllExtensions_defaultBoolExtension) ?? true}
    set {setExtensionValue(ext: ProtobufUnittest_TestAllExtensions_defaultBoolExtension, value: newValue)}
  }
  public var hasDefaultBoolExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestAllExtensions_defaultBoolExtension)
  }
  public mutating func clearDefaultBoolExtension() {
    clearExtensionValue(ext: ProtobufUnittest_TestAllExtensions_defaultBoolExtension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  public var defaultStringExtension: String {
    get {return getExtensionValue(ext: ProtobufUnittest_TestAllExtensions_defaultStringExtension) ?? "hello"}
    set {setExtensionValue(ext: ProtobufUnittest_TestAllExtensions_defaultStringExtension, value: newValue)}
  }
  public var hasDefaultStringExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestAllExtensions_defaultStringExtension)
  }
  public mutating func clearDefaultStringExtension() {
    clearExtensionValue(ext: ProtobufUnittest_TestAllExtensions_defaultStringExtension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  public var defaultBytesExtension: Data {
    get {return getExtensionValue(ext: ProtobufUnittest_TestAllExtensions_defaultBytesExtension) ?? Data(bytes: [119, 111, 114, 108, 100])}
    set {setExtensionValue(ext: ProtobufUnittest_TestAllExtensions_defaultBytesExtension, value: newValue)}
  }
  public var hasDefaultBytesExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestAllExtensions_defaultBytesExtension)
  }
  public mutating func clearDefaultBytesExtension() {
    clearExtensionValue(ext: ProtobufUnittest_TestAllExtensions_defaultBytesExtension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  public var defaultNestedEnumExtension: ProtobufUnittest_TestAllTypes.NestedEnum {
    get {return getExtensionValue(ext: ProtobufUnittest_TestAllExtensions_defaultNestedEnumExtension) ?? ProtobufUnittest_TestAllTypes.NestedEnum.bar}
    set {setExtensionValue(ext: ProtobufUnittest_TestAllExtensions_defaultNestedEnumExtension, value: newValue)}
  }
  public var hasDefaultNestedEnumExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestAllExtensions_defaultNestedEnumExtension)
  }
  public mutating func clearDefaultNestedEnumExtension() {
    clearExtensionValue(ext: ProtobufUnittest_TestAllExtensions_defaultNestedEnumExtension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  public var defaultForeignEnumExtension: ProtobufUnittest_ForeignEnum {
    get {return getExtensionValue(ext: ProtobufUnittest_TestAllExtensions_defaultForeignEnumExtension) ?? ProtobufUnittest_ForeignEnum.foreignBar}
    set {setExtensionValue(ext: ProtobufUnittest_TestAllExtensions_defaultForeignEnumExtension, value: newValue)}
  }
  public var hasDefaultForeignEnumExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestAllExtensions_defaultForeignEnumExtension)
  }
  public mutating func clearDefaultForeignEnumExtension() {
    clearExtensionValue(ext: ProtobufUnittest_TestAllExtensions_defaultForeignEnumExtension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  public var defaultImportEnumExtension: ProtobufUnittestImport_ImportEnum {
    get {return getExtensionValue(ext: ProtobufUnittest_TestAllExtensions_defaultImportEnumExtension) ?? ProtobufUnittestImport_ImportEnum.importBar}
    set {setExtensionValue(ext: ProtobufUnittest_TestAllExtensions_defaultImportEnumExtension, value: newValue)}
  }
  public var hasDefaultImportEnumExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestAllExtensions_defaultImportEnumExtension)
  }
  public mutating func clearDefaultImportEnumExtension() {
    clearExtensionValue(ext: ProtobufUnittest_TestAllExtensions_defaultImportEnumExtension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  public var defaultStringPieceExtension: String {
    get {return getExtensionValue(ext: ProtobufUnittest_TestAllExtensions_defaultStringPieceExtension) ?? "abc"}
    set {setExtensionValue(ext: ProtobufUnittest_TestAllExtensions_defaultStringPieceExtension, value: newValue)}
  }
  public var hasDefaultStringPieceExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestAllExtensions_defaultStringPieceExtension)
  }
  public mutating func clearDefaultStringPieceExtension() {
    clearExtensionValue(ext: ProtobufUnittest_TestAllExtensions_defaultStringPieceExtension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  public var defaultCordExtension: String {
    get {return getExtensionValue(ext: ProtobufUnittest_TestAllExtensions_defaultCordExtension) ?? "123"}
    set {setExtensionValue(ext: ProtobufUnittest_TestAllExtensions_defaultCordExtension, value: newValue)}
  }
  public var hasDefaultCordExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestAllExtensions_defaultCordExtension)
  }
  public mutating func clearDefaultCordExtension() {
    clearExtensionValue(ext: ProtobufUnittest_TestAllExtensions_defaultCordExtension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  ///   For oneof test
  public var oneofUint32Extension: UInt32 {
    get {return getExtensionValue(ext: ProtobufUnittest_TestAllExtensions_oneofUint32Extension) ?? 0}
    set {setExtensionValue(ext: ProtobufUnittest_TestAllExtensions_oneofUint32Extension, value: newValue)}
  }
  public var hasOneofUint32Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestAllExtensions_oneofUint32Extension)
  }
  public mutating func clearOneofUint32Extension() {
    clearExtensionValue(ext: ProtobufUnittest_TestAllExtensions_oneofUint32Extension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  public var oneofNestedMessageExtension: ProtobufUnittest_TestAllTypes.NestedMessage {
    get {return getExtensionValue(ext: ProtobufUnittest_TestAllExtensions_oneofNestedMessageExtension) ?? ProtobufUnittest_TestAllTypes.NestedMessage()}
    set {setExtensionValue(ext: ProtobufUnittest_TestAllExtensions_oneofNestedMessageExtension, value: newValue)}
  }
  public var hasOneofNestedMessageExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestAllExtensions_oneofNestedMessageExtension)
  }
  public mutating func clearOneofNestedMessageExtension() {
    clearExtensionValue(ext: ProtobufUnittest_TestAllExtensions_oneofNestedMessageExtension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  public var oneofStringExtension: String {
    get {return getExtensionValue(ext: ProtobufUnittest_TestAllExtensions_oneofStringExtension) ?? ""}
    set {setExtensionValue(ext: ProtobufUnittest_TestAllExtensions_oneofStringExtension, value: newValue)}
  }
  public var hasOneofStringExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestAllExtensions_oneofStringExtension)
  }
  public mutating func clearOneofStringExtension() {
    clearExtensionValue(ext: ProtobufUnittest_TestAllExtensions_oneofStringExtension)
  }
}

extension ProtobufUnittest_TestAllExtensions {
  public var oneofBytesExtension: Data {
    get {return getExtensionValue(ext: ProtobufUnittest_TestAllExtensions_oneofBytesExtension) ?? Data()}
    set {setExtensionValue(ext: ProtobufUnittest_TestAllExtensions_oneofBytesExtension, value: newValue)}
  }
  public var hasOneofBytesExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestAllExtensions_oneofBytesExtension)
  }
  public mutating func clearOneofBytesExtension() {
    clearExtensionValue(ext: ProtobufUnittest_TestAllExtensions_oneofBytesExtension)
  }
}

extension ProtobufUnittest_TestFieldOrderings {
  public var myExtensionString: String {
    get {return getExtensionValue(ext: ProtobufUnittest_TestFieldOrderings_myExtensionString) ?? ""}
    set {setExtensionValue(ext: ProtobufUnittest_TestFieldOrderings_myExtensionString, value: newValue)}
  }
  public var hasMyExtensionString: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestFieldOrderings_myExtensionString)
  }
  public mutating func clearMyExtensionString() {
    clearExtensionValue(ext: ProtobufUnittest_TestFieldOrderings_myExtensionString)
  }
}

extension ProtobufUnittest_TestFieldOrderings {
  public var myExtensionInt: Int32 {
    get {return getExtensionValue(ext: ProtobufUnittest_TestFieldOrderings_myExtensionInt) ?? 0}
    set {setExtensionValue(ext: ProtobufUnittest_TestFieldOrderings_myExtensionInt, value: newValue)}
  }
  public var hasMyExtensionInt: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestFieldOrderings_myExtensionInt)
  }
  public mutating func clearMyExtensionInt() {
    clearExtensionValue(ext: ProtobufUnittest_TestFieldOrderings_myExtensionInt)
  }
}

extension ProtobufUnittest_TestPackedExtensions {
  public var packedInt32Extension: [Int32] {
    get {return getExtensionValue(ext: ProtobufUnittest_TestPackedExtensions_packedInt32Extension)}
    set {setExtensionValue(ext: ProtobufUnittest_TestPackedExtensions_packedInt32Extension, value: newValue)}
  }
  public var hasPackedInt32Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestPackedExtensions_packedInt32Extension)
  }
  public mutating func clearPackedInt32Extension() {
    clearExtensionValue(ext: ProtobufUnittest_TestPackedExtensions_packedInt32Extension)
  }
}

extension ProtobufUnittest_TestPackedExtensions {
  public var packedInt64Extension: [Int64] {
    get {return getExtensionValue(ext: ProtobufUnittest_TestPackedExtensions_packedInt64Extension)}
    set {setExtensionValue(ext: ProtobufUnittest_TestPackedExtensions_packedInt64Extension, value: newValue)}
  }
  public var hasPackedInt64Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestPackedExtensions_packedInt64Extension)
  }
  public mutating func clearPackedInt64Extension() {
    clearExtensionValue(ext: ProtobufUnittest_TestPackedExtensions_packedInt64Extension)
  }
}

extension ProtobufUnittest_TestPackedExtensions {
  public var packedUint32Extension: [UInt32] {
    get {return getExtensionValue(ext: ProtobufUnittest_TestPackedExtensions_packedUint32Extension)}
    set {setExtensionValue(ext: ProtobufUnittest_TestPackedExtensions_packedUint32Extension, value: newValue)}
  }
  public var hasPackedUint32Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestPackedExtensions_packedUint32Extension)
  }
  public mutating func clearPackedUint32Extension() {
    clearExtensionValue(ext: ProtobufUnittest_TestPackedExtensions_packedUint32Extension)
  }
}

extension ProtobufUnittest_TestPackedExtensions {
  public var packedUint64Extension: [UInt64] {
    get {return getExtensionValue(ext: ProtobufUnittest_TestPackedExtensions_packedUint64Extension)}
    set {setExtensionValue(ext: ProtobufUnittest_TestPackedExtensions_packedUint64Extension, value: newValue)}
  }
  public var hasPackedUint64Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestPackedExtensions_packedUint64Extension)
  }
  public mutating func clearPackedUint64Extension() {
    clearExtensionValue(ext: ProtobufUnittest_TestPackedExtensions_packedUint64Extension)
  }
}

extension ProtobufUnittest_TestPackedExtensions {
  public var packedSint32Extension: [Int32] {
    get {return getExtensionValue(ext: ProtobufUnittest_TestPackedExtensions_packedSint32Extension)}
    set {setExtensionValue(ext: ProtobufUnittest_TestPackedExtensions_packedSint32Extension, value: newValue)}
  }
  public var hasPackedSint32Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestPackedExtensions_packedSint32Extension)
  }
  public mutating func clearPackedSint32Extension() {
    clearExtensionValue(ext: ProtobufUnittest_TestPackedExtensions_packedSint32Extension)
  }
}

extension ProtobufUnittest_TestPackedExtensions {
  public var packedSint64Extension: [Int64] {
    get {return getExtensionValue(ext: ProtobufUnittest_TestPackedExtensions_packedSint64Extension)}
    set {setExtensionValue(ext: ProtobufUnittest_TestPackedExtensions_packedSint64Extension, value: newValue)}
  }
  public var hasPackedSint64Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestPackedExtensions_packedSint64Extension)
  }
  public mutating func clearPackedSint64Extension() {
    clearExtensionValue(ext: ProtobufUnittest_TestPackedExtensions_packedSint64Extension)
  }
}

extension ProtobufUnittest_TestPackedExtensions {
  public var packedFixed32Extension: [UInt32] {
    get {return getExtensionValue(ext: ProtobufUnittest_TestPackedExtensions_packedFixed32Extension)}
    set {setExtensionValue(ext: ProtobufUnittest_TestPackedExtensions_packedFixed32Extension, value: newValue)}
  }
  public var hasPackedFixed32Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestPackedExtensions_packedFixed32Extension)
  }
  public mutating func clearPackedFixed32Extension() {
    clearExtensionValue(ext: ProtobufUnittest_TestPackedExtensions_packedFixed32Extension)
  }
}

extension ProtobufUnittest_TestPackedExtensions {
  public var packedFixed64Extension: [UInt64] {
    get {return getExtensionValue(ext: ProtobufUnittest_TestPackedExtensions_packedFixed64Extension)}
    set {setExtensionValue(ext: ProtobufUnittest_TestPackedExtensions_packedFixed64Extension, value: newValue)}
  }
  public var hasPackedFixed64Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestPackedExtensions_packedFixed64Extension)
  }
  public mutating func clearPackedFixed64Extension() {
    clearExtensionValue(ext: ProtobufUnittest_TestPackedExtensions_packedFixed64Extension)
  }
}

extension ProtobufUnittest_TestPackedExtensions {
  public var packedSfixed32Extension: [Int32] {
    get {return getExtensionValue(ext: ProtobufUnittest_TestPackedExtensions_packedSfixed32Extension)}
    set {setExtensionValue(ext: ProtobufUnittest_TestPackedExtensions_packedSfixed32Extension, value: newValue)}
  }
  public var hasPackedSfixed32Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestPackedExtensions_packedSfixed32Extension)
  }
  public mutating func clearPackedSfixed32Extension() {
    clearExtensionValue(ext: ProtobufUnittest_TestPackedExtensions_packedSfixed32Extension)
  }
}

extension ProtobufUnittest_TestPackedExtensions {
  public var packedSfixed64Extension: [Int64] {
    get {return getExtensionValue(ext: ProtobufUnittest_TestPackedExtensions_packedSfixed64Extension)}
    set {setExtensionValue(ext: ProtobufUnittest_TestPackedExtensions_packedSfixed64Extension, value: newValue)}
  }
  public var hasPackedSfixed64Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestPackedExtensions_packedSfixed64Extension)
  }
  public mutating func clearPackedSfixed64Extension() {
    clearExtensionValue(ext: ProtobufUnittest_TestPackedExtensions_packedSfixed64Extension)
  }
}

extension ProtobufUnittest_TestPackedExtensions {
  public var packedFloatExtension: [Float] {
    get {return getExtensionValue(ext: ProtobufUnittest_TestPackedExtensions_packedFloatExtension)}
    set {setExtensionValue(ext: ProtobufUnittest_TestPackedExtensions_packedFloatExtension, value: newValue)}
  }
  public var hasPackedFloatExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestPackedExtensions_packedFloatExtension)
  }
  public mutating func clearPackedFloatExtension() {
    clearExtensionValue(ext: ProtobufUnittest_TestPackedExtensions_packedFloatExtension)
  }
}

extension ProtobufUnittest_TestPackedExtensions {
  public var packedDoubleExtension: [Double] {
    get {return getExtensionValue(ext: ProtobufUnittest_TestPackedExtensions_packedDoubleExtension)}
    set {setExtensionValue(ext: ProtobufUnittest_TestPackedExtensions_packedDoubleExtension, value: newValue)}
  }
  public var hasPackedDoubleExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestPackedExtensions_packedDoubleExtension)
  }
  public mutating func clearPackedDoubleExtension() {
    clearExtensionValue(ext: ProtobufUnittest_TestPackedExtensions_packedDoubleExtension)
  }
}

extension ProtobufUnittest_TestPackedExtensions {
  public var packedBoolExtension: [Bool] {
    get {return getExtensionValue(ext: ProtobufUnittest_TestPackedExtensions_packedBoolExtension)}
    set {setExtensionValue(ext: ProtobufUnittest_TestPackedExtensions_packedBoolExtension, value: newValue)}
  }
  public var hasPackedBoolExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestPackedExtensions_packedBoolExtension)
  }
  public mutating func clearPackedBoolExtension() {
    clearExtensionValue(ext: ProtobufUnittest_TestPackedExtensions_packedBoolExtension)
  }
}

extension ProtobufUnittest_TestPackedExtensions {
  public var packedEnumExtension: [ProtobufUnittest_ForeignEnum] {
    get {return getExtensionValue(ext: ProtobufUnittest_TestPackedExtensions_packedEnumExtension)}
    set {setExtensionValue(ext: ProtobufUnittest_TestPackedExtensions_packedEnumExtension, value: newValue)}
  }
  public var hasPackedEnumExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestPackedExtensions_packedEnumExtension)
  }
  public mutating func clearPackedEnumExtension() {
    clearExtensionValue(ext: ProtobufUnittest_TestPackedExtensions_packedEnumExtension)
  }
}

extension ProtobufUnittest_TestUnpackedExtensions {
  public var unpackedInt32Extension: [Int32] {
    get {return getExtensionValue(ext: ProtobufUnittest_TestUnpackedExtensions_unpackedInt32Extension)}
    set {setExtensionValue(ext: ProtobufUnittest_TestUnpackedExtensions_unpackedInt32Extension, value: newValue)}
  }
  public var hasUnpackedInt32Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestUnpackedExtensions_unpackedInt32Extension)
  }
  public mutating func clearUnpackedInt32Extension() {
    clearExtensionValue(ext: ProtobufUnittest_TestUnpackedExtensions_unpackedInt32Extension)
  }
}

extension ProtobufUnittest_TestUnpackedExtensions {
  public var unpackedInt64Extension: [Int64] {
    get {return getExtensionValue(ext: ProtobufUnittest_TestUnpackedExtensions_unpackedInt64Extension)}
    set {setExtensionValue(ext: ProtobufUnittest_TestUnpackedExtensions_unpackedInt64Extension, value: newValue)}
  }
  public var hasUnpackedInt64Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestUnpackedExtensions_unpackedInt64Extension)
  }
  public mutating func clearUnpackedInt64Extension() {
    clearExtensionValue(ext: ProtobufUnittest_TestUnpackedExtensions_unpackedInt64Extension)
  }
}

extension ProtobufUnittest_TestUnpackedExtensions {
  public var unpackedUint32Extension: [UInt32] {
    get {return getExtensionValue(ext: ProtobufUnittest_TestUnpackedExtensions_unpackedUint32Extension)}
    set {setExtensionValue(ext: ProtobufUnittest_TestUnpackedExtensions_unpackedUint32Extension, value: newValue)}
  }
  public var hasUnpackedUint32Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestUnpackedExtensions_unpackedUint32Extension)
  }
  public mutating func clearUnpackedUint32Extension() {
    clearExtensionValue(ext: ProtobufUnittest_TestUnpackedExtensions_unpackedUint32Extension)
  }
}

extension ProtobufUnittest_TestUnpackedExtensions {
  public var unpackedUint64Extension: [UInt64] {
    get {return getExtensionValue(ext: ProtobufUnittest_TestUnpackedExtensions_unpackedUint64Extension)}
    set {setExtensionValue(ext: ProtobufUnittest_TestUnpackedExtensions_unpackedUint64Extension, value: newValue)}
  }
  public var hasUnpackedUint64Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestUnpackedExtensions_unpackedUint64Extension)
  }
  public mutating func clearUnpackedUint64Extension() {
    clearExtensionValue(ext: ProtobufUnittest_TestUnpackedExtensions_unpackedUint64Extension)
  }
}

extension ProtobufUnittest_TestUnpackedExtensions {
  public var unpackedSint32Extension: [Int32] {
    get {return getExtensionValue(ext: ProtobufUnittest_TestUnpackedExtensions_unpackedSint32Extension)}
    set {setExtensionValue(ext: ProtobufUnittest_TestUnpackedExtensions_unpackedSint32Extension, value: newValue)}
  }
  public var hasUnpackedSint32Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestUnpackedExtensions_unpackedSint32Extension)
  }
  public mutating func clearUnpackedSint32Extension() {
    clearExtensionValue(ext: ProtobufUnittest_TestUnpackedExtensions_unpackedSint32Extension)
  }
}

extension ProtobufUnittest_TestUnpackedExtensions {
  public var unpackedSint64Extension: [Int64] {
    get {return getExtensionValue(ext: ProtobufUnittest_TestUnpackedExtensions_unpackedSint64Extension)}
    set {setExtensionValue(ext: ProtobufUnittest_TestUnpackedExtensions_unpackedSint64Extension, value: newValue)}
  }
  public var hasUnpackedSint64Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestUnpackedExtensions_unpackedSint64Extension)
  }
  public mutating func clearUnpackedSint64Extension() {
    clearExtensionValue(ext: ProtobufUnittest_TestUnpackedExtensions_unpackedSint64Extension)
  }
}

extension ProtobufUnittest_TestUnpackedExtensions {
  public var unpackedFixed32Extension: [UInt32] {
    get {return getExtensionValue(ext: ProtobufUnittest_TestUnpackedExtensions_unpackedFixed32Extension)}
    set {setExtensionValue(ext: ProtobufUnittest_TestUnpackedExtensions_unpackedFixed32Extension, value: newValue)}
  }
  public var hasUnpackedFixed32Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestUnpackedExtensions_unpackedFixed32Extension)
  }
  public mutating func clearUnpackedFixed32Extension() {
    clearExtensionValue(ext: ProtobufUnittest_TestUnpackedExtensions_unpackedFixed32Extension)
  }
}

extension ProtobufUnittest_TestUnpackedExtensions {
  public var unpackedFixed64Extension: [UInt64] {
    get {return getExtensionValue(ext: ProtobufUnittest_TestUnpackedExtensions_unpackedFixed64Extension)}
    set {setExtensionValue(ext: ProtobufUnittest_TestUnpackedExtensions_unpackedFixed64Extension, value: newValue)}
  }
  public var hasUnpackedFixed64Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestUnpackedExtensions_unpackedFixed64Extension)
  }
  public mutating func clearUnpackedFixed64Extension() {
    clearExtensionValue(ext: ProtobufUnittest_TestUnpackedExtensions_unpackedFixed64Extension)
  }
}

extension ProtobufUnittest_TestUnpackedExtensions {
  public var unpackedSfixed32Extension: [Int32] {
    get {return getExtensionValue(ext: ProtobufUnittest_TestUnpackedExtensions_unpackedSfixed32Extension)}
    set {setExtensionValue(ext: ProtobufUnittest_TestUnpackedExtensions_unpackedSfixed32Extension, value: newValue)}
  }
  public var hasUnpackedSfixed32Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestUnpackedExtensions_unpackedSfixed32Extension)
  }
  public mutating func clearUnpackedSfixed32Extension() {
    clearExtensionValue(ext: ProtobufUnittest_TestUnpackedExtensions_unpackedSfixed32Extension)
  }
}

extension ProtobufUnittest_TestUnpackedExtensions {
  public var unpackedSfixed64Extension: [Int64] {
    get {return getExtensionValue(ext: ProtobufUnittest_TestUnpackedExtensions_unpackedSfixed64Extension)}
    set {setExtensionValue(ext: ProtobufUnittest_TestUnpackedExtensions_unpackedSfixed64Extension, value: newValue)}
  }
  public var hasUnpackedSfixed64Extension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestUnpackedExtensions_unpackedSfixed64Extension)
  }
  public mutating func clearUnpackedSfixed64Extension() {
    clearExtensionValue(ext: ProtobufUnittest_TestUnpackedExtensions_unpackedSfixed64Extension)
  }
}

extension ProtobufUnittest_TestUnpackedExtensions {
  public var unpackedFloatExtension: [Float] {
    get {return getExtensionValue(ext: ProtobufUnittest_TestUnpackedExtensions_unpackedFloatExtension)}
    set {setExtensionValue(ext: ProtobufUnittest_TestUnpackedExtensions_unpackedFloatExtension, value: newValue)}
  }
  public var hasUnpackedFloatExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestUnpackedExtensions_unpackedFloatExtension)
  }
  public mutating func clearUnpackedFloatExtension() {
    clearExtensionValue(ext: ProtobufUnittest_TestUnpackedExtensions_unpackedFloatExtension)
  }
}

extension ProtobufUnittest_TestUnpackedExtensions {
  public var unpackedDoubleExtension: [Double] {
    get {return getExtensionValue(ext: ProtobufUnittest_TestUnpackedExtensions_unpackedDoubleExtension)}
    set {setExtensionValue(ext: ProtobufUnittest_TestUnpackedExtensions_unpackedDoubleExtension, value: newValue)}
  }
  public var hasUnpackedDoubleExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestUnpackedExtensions_unpackedDoubleExtension)
  }
  public mutating func clearUnpackedDoubleExtension() {
    clearExtensionValue(ext: ProtobufUnittest_TestUnpackedExtensions_unpackedDoubleExtension)
  }
}

extension ProtobufUnittest_TestUnpackedExtensions {
  public var unpackedBoolExtension: [Bool] {
    get {return getExtensionValue(ext: ProtobufUnittest_TestUnpackedExtensions_unpackedBoolExtension)}
    set {setExtensionValue(ext: ProtobufUnittest_TestUnpackedExtensions_unpackedBoolExtension, value: newValue)}
  }
  public var hasUnpackedBoolExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestUnpackedExtensions_unpackedBoolExtension)
  }
  public mutating func clearUnpackedBoolExtension() {
    clearExtensionValue(ext: ProtobufUnittest_TestUnpackedExtensions_unpackedBoolExtension)
  }
}

extension ProtobufUnittest_TestUnpackedExtensions {
  public var unpackedEnumExtension: [ProtobufUnittest_ForeignEnum] {
    get {return getExtensionValue(ext: ProtobufUnittest_TestUnpackedExtensions_unpackedEnumExtension)}
    set {setExtensionValue(ext: ProtobufUnittest_TestUnpackedExtensions_unpackedEnumExtension, value: newValue)}
  }
  public var hasUnpackedEnumExtension: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestUnpackedExtensions_unpackedEnumExtension)
  }
  public mutating func clearUnpackedEnumExtension() {
    clearExtensionValue(ext: ProtobufUnittest_TestUnpackedExtensions_unpackedEnumExtension)
  }
}

public let ProtobufUnittest_Unittest_Extensions: ProtobufExtensionSet = [
  ProtobufUnittest_TestAllExtensions_optionalInt32Extension,
  ProtobufUnittest_TestAllExtensions_optionalInt64Extension,
  ProtobufUnittest_TestAllExtensions_optionalUint32Extension,
  ProtobufUnittest_TestAllExtensions_optionalUint64Extension,
  ProtobufUnittest_TestAllExtensions_optionalSint32Extension,
  ProtobufUnittest_TestAllExtensions_optionalSint64Extension,
  ProtobufUnittest_TestAllExtensions_optionalFixed32Extension,
  ProtobufUnittest_TestAllExtensions_optionalFixed64Extension,
  ProtobufUnittest_TestAllExtensions_optionalSfixed32Extension,
  ProtobufUnittest_TestAllExtensions_optionalSfixed64Extension,
  ProtobufUnittest_TestAllExtensions_optionalFloatExtension,
  ProtobufUnittest_TestAllExtensions_optionalDoubleExtension,
  ProtobufUnittest_TestAllExtensions_optionalBoolExtension,
  ProtobufUnittest_TestAllExtensions_optionalStringExtension,
  ProtobufUnittest_TestAllExtensions_optionalBytesExtension,
  ProtobufUnittest_TestAllExtensions_optionalGroupExtension,
  ProtobufUnittest_TestAllExtensions_optionalNestedMessageExtension,
  ProtobufUnittest_TestAllExtensions_optionalForeignMessageExtension,
  ProtobufUnittest_TestAllExtensions_optionalImportMessageExtension,
  ProtobufUnittest_TestAllExtensions_optionalNestedEnumExtension,
  ProtobufUnittest_TestAllExtensions_optionalForeignEnumExtension,
  ProtobufUnittest_TestAllExtensions_optionalImportEnumExtension,
  ProtobufUnittest_TestAllExtensions_optionalStringPieceExtension,
  ProtobufUnittest_TestAllExtensions_optionalCordExtension,
  ProtobufUnittest_TestAllExtensions_optionalPublicImportMessageExtension,
  ProtobufUnittest_TestAllExtensions_optionalLazyMessageExtension,
  ProtobufUnittest_TestAllExtensions_repeatedInt32Extension,
  ProtobufUnittest_TestAllExtensions_repeatedInt64Extension,
  ProtobufUnittest_TestAllExtensions_repeatedUint32Extension,
  ProtobufUnittest_TestAllExtensions_repeatedUint64Extension,
  ProtobufUnittest_TestAllExtensions_repeatedSint32Extension,
  ProtobufUnittest_TestAllExtensions_repeatedSint64Extension,
  ProtobufUnittest_TestAllExtensions_repeatedFixed32Extension,
  ProtobufUnittest_TestAllExtensions_repeatedFixed64Extension,
  ProtobufUnittest_TestAllExtensions_repeatedSfixed32Extension,
  ProtobufUnittest_TestAllExtensions_repeatedSfixed64Extension,
  ProtobufUnittest_TestAllExtensions_repeatedFloatExtension,
  ProtobufUnittest_TestAllExtensions_repeatedDoubleExtension,
  ProtobufUnittest_TestAllExtensions_repeatedBoolExtension,
  ProtobufUnittest_TestAllExtensions_repeatedStringExtension,
  ProtobufUnittest_TestAllExtensions_repeatedBytesExtension,
  ProtobufUnittest_TestAllExtensions_repeatedGroupExtension,
  ProtobufUnittest_TestAllExtensions_repeatedNestedMessageExtension,
  ProtobufUnittest_TestAllExtensions_repeatedForeignMessageExtension,
  ProtobufUnittest_TestAllExtensions_repeatedImportMessageExtension,
  ProtobufUnittest_TestAllExtensions_repeatedNestedEnumExtension,
  ProtobufUnittest_TestAllExtensions_repeatedForeignEnumExtension,
  ProtobufUnittest_TestAllExtensions_repeatedImportEnumExtension,
  ProtobufUnittest_TestAllExtensions_repeatedStringPieceExtension,
  ProtobufUnittest_TestAllExtensions_repeatedCordExtension,
  ProtobufUnittest_TestAllExtensions_repeatedLazyMessageExtension,
  ProtobufUnittest_TestAllExtensions_defaultInt32Extension,
  ProtobufUnittest_TestAllExtensions_defaultInt64Extension,
  ProtobufUnittest_TestAllExtensions_defaultUint32Extension,
  ProtobufUnittest_TestAllExtensions_defaultUint64Extension,
  ProtobufUnittest_TestAllExtensions_defaultSint32Extension,
  ProtobufUnittest_TestAllExtensions_defaultSint64Extension,
  ProtobufUnittest_TestAllExtensions_defaultFixed32Extension,
  ProtobufUnittest_TestAllExtensions_defaultFixed64Extension,
  ProtobufUnittest_TestAllExtensions_defaultSfixed32Extension,
  ProtobufUnittest_TestAllExtensions_defaultSfixed64Extension,
  ProtobufUnittest_TestAllExtensions_defaultFloatExtension,
  ProtobufUnittest_TestAllExtensions_defaultDoubleExtension,
  ProtobufUnittest_TestAllExtensions_defaultBoolExtension,
  ProtobufUnittest_TestAllExtensions_defaultStringExtension,
  ProtobufUnittest_TestAllExtensions_defaultBytesExtension,
  ProtobufUnittest_TestAllExtensions_defaultNestedEnumExtension,
  ProtobufUnittest_TestAllExtensions_defaultForeignEnumExtension,
  ProtobufUnittest_TestAllExtensions_defaultImportEnumExtension,
  ProtobufUnittest_TestAllExtensions_defaultStringPieceExtension,
  ProtobufUnittest_TestAllExtensions_defaultCordExtension,
  ProtobufUnittest_TestAllExtensions_oneofUint32Extension,
  ProtobufUnittest_TestAllExtensions_oneofNestedMessageExtension,
  ProtobufUnittest_TestAllExtensions_oneofStringExtension,
  ProtobufUnittest_TestAllExtensions_oneofBytesExtension,
  ProtobufUnittest_TestFieldOrderings_myExtensionString,
  ProtobufUnittest_TestFieldOrderings_myExtensionInt,
  ProtobufUnittest_TestPackedExtensions_packedInt32Extension,
  ProtobufUnittest_TestPackedExtensions_packedInt64Extension,
  ProtobufUnittest_TestPackedExtensions_packedUint32Extension,
  ProtobufUnittest_TestPackedExtensions_packedUint64Extension,
  ProtobufUnittest_TestPackedExtensions_packedSint32Extension,
  ProtobufUnittest_TestPackedExtensions_packedSint64Extension,
  ProtobufUnittest_TestPackedExtensions_packedFixed32Extension,
  ProtobufUnittest_TestPackedExtensions_packedFixed64Extension,
  ProtobufUnittest_TestPackedExtensions_packedSfixed32Extension,
  ProtobufUnittest_TestPackedExtensions_packedSfixed64Extension,
  ProtobufUnittest_TestPackedExtensions_packedFloatExtension,
  ProtobufUnittest_TestPackedExtensions_packedDoubleExtension,
  ProtobufUnittest_TestPackedExtensions_packedBoolExtension,
  ProtobufUnittest_TestPackedExtensions_packedEnumExtension,
  ProtobufUnittest_TestUnpackedExtensions_unpackedInt32Extension,
  ProtobufUnittest_TestUnpackedExtensions_unpackedInt64Extension,
  ProtobufUnittest_TestUnpackedExtensions_unpackedUint32Extension,
  ProtobufUnittest_TestUnpackedExtensions_unpackedUint64Extension,
  ProtobufUnittest_TestUnpackedExtensions_unpackedSint32Extension,
  ProtobufUnittest_TestUnpackedExtensions_unpackedSint64Extension,
  ProtobufUnittest_TestUnpackedExtensions_unpackedFixed32Extension,
  ProtobufUnittest_TestUnpackedExtensions_unpackedFixed64Extension,
  ProtobufUnittest_TestUnpackedExtensions_unpackedSfixed32Extension,
  ProtobufUnittest_TestUnpackedExtensions_unpackedSfixed64Extension,
  ProtobufUnittest_TestUnpackedExtensions_unpackedFloatExtension,
  ProtobufUnittest_TestUnpackedExtensions_unpackedDoubleExtension,
  ProtobufUnittest_TestUnpackedExtensions_unpackedBoolExtension,
  ProtobufUnittest_TestUnpackedExtensions_unpackedEnumExtension,
  ProtobufUnittest_TestNestedExtension.Extensions.ProtobufUnittest_TestAllExtensions_test,
  ProtobufUnittest_TestNestedExtension.Extensions.ProtobufUnittest_TestAllExtensions_nestedStringExtension,
  ProtobufUnittest_TestRequired.Extensions.ProtobufUnittest_TestAllExtensions_single,
  ProtobufUnittest_TestRequired.Extensions.ProtobufUnittest_TestAllExtensions_multi,
  ProtobufUnittest_TestParsingMerge.Extensions.ProtobufUnittest_TestParsingMerge_optionalExt,
  ProtobufUnittest_TestParsingMerge.Extensions.ProtobufUnittest_TestParsingMerge_repeatedExt
]
